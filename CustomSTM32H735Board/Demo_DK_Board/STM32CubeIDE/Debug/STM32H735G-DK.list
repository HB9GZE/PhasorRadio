
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bd0c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e3c  0802bfe0  0802bfe0  0002cfe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08030e1c  08030e1c  00031e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08030fc4  08030fc4  00031fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000e  08030fdc  08030fdc  00031fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000002  08030fea  08030fea  00031fea  2**0
                  ALLOC
  7 .ARM          00000008  08030fec  08030fec  00031fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08030ff4  08030ff4  0006f920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  08030ff4  08030ff4  00031ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0803100c  0803100c  0003200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  24000000  08031014  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  24000120  08031124  00033120  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  24000220  08031224  00033220  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000167d4  24000320  08031324  00033320  2**2
                  ALLOC
 15 ._user_heap_stack 00002004  24016af4  08031324  00033af4  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0006f920  2**0
                  CONTENTS, READONLY
 17 ExtFlashSection 0003b920  90000000  90000000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 0017e800  70000000  70000000  00034000  2**2
                  ALLOC
 19 .debug_info   000e92a6  00000000  00000000  0006f94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001a3c6  00000000  00000000  00158bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003cc8  00000000  00000000  00172fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000041a3  00000000  00000000  00176c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00048a10  00000000  00000000  0017ae2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0008135c  00000000  00000000  001c383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0018e112  00000000  00000000  00244b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  003d2ca9  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b2f8  00000000  00000000  003d2d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0003892a  00000000  00000000  003de064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000085  00000000  00000000  0041698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000320 	.word	0x24000320
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802bfc4 	.word	0x0802bfc4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000324 	.word	0x24000324
 800030c:	0802bfc4 	.word	0x0802bfc4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	@ (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f009 bebc 	b.w	800a4a8 <vTaskSetApplicationTaskTag>
 8000730:	080019c1 	.word	0x080019c1

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	@ 0x64
 8000738:	f008 f99b 	bl	8008a72 <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <SystemClock_Config>:
{
 8000740:	b510      	push	{r4, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	224c      	movs	r2, #76	@ 0x4c
 8000746:	2100      	movs	r1, #0
 8000748:	a809      	add	r0, sp, #36	@ 0x24
 800074a:	f02a fcfd 	bl	802b148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	a801      	add	r0, sp, #4
 8000754:	f02a fcf8 	bl	802b148 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000758:	2004      	movs	r0, #4
 800075a:	f006 fce9 	bl	8007130 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <SystemClock_Config+0x90>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800076a:	619a      	str	r2, [r3, #24]
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	0491      	lsls	r1, r2, #18
 800077a:	d5fc      	bpl.n	8000776 <SystemClock_Config+0x36>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000784:	212c      	movs	r1, #44	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000788:	941b      	str	r4, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078a:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000794:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000796:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 800079c:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a0:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f006 fd02 	bl	80071ac <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2103      	movs	r1, #3
 80007aa:	233f      	movs	r3, #63	@ 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ac:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ae:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c6:	f007 f80d 	bl	80077e4 <HAL_RCC_ClockConfig>
}
 80007ca:	b01c      	add	sp, #112	@ 0x70
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	58024800 	.word	0x58024800

080007d4 <PeriphCommonClock_Config>:
{
 80007d4:	b500      	push	{lr}
 80007d6:	b0af      	sub	sp, #188	@ 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d8:	2100      	movs	r1, #0
 80007da:	2298      	movs	r2, #152	@ 0x98
 80007dc:	a808      	add	r0, sp, #32
 80007de:	f02a fcb3 	bl	802b148 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80007e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007e6:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80007ea:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80007ee:	2205      	movs	r2, #5
 80007f0:	2350      	movs	r3, #80	@ 0x50
 80007f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007f6:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007fc:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000802:	2320      	movs	r3, #32
 8000804:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000806:	f007 fa73 	bl	8007cf0 <HAL_RCCEx_PeriphCLKConfig>
}
 800080a:	b02f      	add	sp, #188	@ 0xbc
 800080c:	f85d fb04 	ldr.w	pc, [sp], #4

08000810 <main>:
{
 8000810:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000814:	b0a1      	sub	sp, #132	@ 0x84

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000816:	2210      	movs	r2, #16
 8000818:	2100      	movs	r1, #0
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800081a:	f04f 5410 	mov.w	r4, #603979776	@ 0x24000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800081e:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000820:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000822:	f02a fc91 	bl	802b148 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000826:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 8000828:	f004 fdfc 	bl	8005424 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800082c:	4bd6      	ldr	r3, [pc, #856]	@ (8000b88 <main+0x378>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082e:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000830:	f8ad 504c 	strh.w	r5, [sp, #76]	@ 0x4c

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000834:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000836:	e9cd 4314 	strd	r4, r3, [sp, #80]	@ 0x50
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800083a:	4bd4      	ldr	r3, [pc, #848]	@ (8000b8c <main+0x37c>)
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800083c:	2400      	movs	r4, #0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800083e:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000840:	f004 fe0e 	bl	8005460 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000844:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000848:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800084a:	f88d 4057 	strb.w	r4, [sp, #87]	@ 0x57
  MPU_InitStruct.BaseAddress = 0x70000000;
 800084e:	9314      	str	r3, [sp, #80]	@ 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000850:	f8ad 405a 	strh.w	r4, [sp, #90]	@ 0x5a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000854:	f88d 504d 	strb.w	r5, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000858:	f88d 7054 	strb.w	r7, [sp, #84]	@ 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085c:	f004 fe00 	bl	8005460 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000860:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000862:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000864:	f88d 6057 	strb.w	r6, [sp, #87]	@ 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000868:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800086c:	2316      	movs	r3, #22
 800086e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000872:	f240 1301 	movw	r3, #257	@ 0x101
 8000876:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800087a:	f004 fdf1 	bl	8005460 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 800087e:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000882:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000884:	f88d 4057 	strb.w	r4, [sp, #87]	@ 0x57
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000888:	9314      	str	r3, [sp, #80]	@ 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800088a:	f8ad 405a 	strh.w	r4, [sp, #90]	@ 0x5a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800088e:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000890:	f88d 604d 	strb.w	r6, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000894:	f88d 7054 	strb.w	r7, [sp, #84]	@ 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000898:	f004 fde2 	bl	8005460 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800089c:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800089e:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80008a0:	f88d 404d 	strb.w	r4, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80008a4:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008a8:	f88d 6057 	strb.w	r6, [sp, #87]	@ 0x57
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008ac:	f88d 505a 	strb.w	r5, [sp, #90]	@ 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008b0:	f004 fdd6 	bl	8005460 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008b4:	4620      	mov	r0, r4
 80008b6:	f004 fdc3 	bl	8005440 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ba:	4bb5      	ldr	r3, [pc, #724]	@ (8000b90 <main+0x380>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 80008c2:	d111      	bne.n	80008e8 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008cc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008de:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008e8:	4aa9      	ldr	r2, [pc, #676]	@ (8000b90 <main+0x380>)
 80008ea:	6953      	ldr	r3, [r2, #20]
 80008ec:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008f0:	d123      	bne.n	800093a <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008fa:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fe:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000902:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000906:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800090a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800090c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000910:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000912:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000916:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000918:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 800091c:	d2f9      	bcs.n	8000912 <main+0x102>
    } while(sets-- != 0U);
 800091e:	3b20      	subs	r3, #32
 8000920:	f113 0f20 	cmn.w	r3, #32
 8000924:	d1f2      	bne.n	800090c <main+0xfc>
 8000926:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800092a:	6953      	ldr	r3, [r2, #20]
 800092c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000936:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800093a:	f004 fccf 	bl	80052dc <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000940:	f7ff fefe 	bl	8000740 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000946:	f7ff ff45 	bl	80007d4 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	2214      	movs	r2, #20
 800094c:	2100      	movs	r1, #0
 800094e:	a813      	add	r0, sp, #76	@ 0x4c
 8000950:	f02a fbfa 	bl	802b148 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b8f      	ldr	r3, [pc, #572]	@ (8000b94 <main+0x384>)
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000956:	f248 0108 	movw	r1, #32776	@ 0x8008
 800095a:	488f      	ldr	r0, [pc, #572]	@ (8000b98 <main+0x388>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = RENDER_TIME_Pin;
 8000964:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000968:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	f042 0202 	orr.w	r2, r2, #2
  hltdc.Instance = LTDC;
 8000970:	4d8a      	ldr	r5, [pc, #552]	@ (8000b9c <main+0x38c>)
  pLayerCfg.FBStartAdress = 0x70000000;
 8000972:	f04f 0a05 	mov.w	sl, #5
  hospi1.Init.FifoThreshold = 4;
 8000976:	f04f 0b04 	mov.w	fp, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800097e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000982:	f002 0202 	and.w	r2, r2, #2
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800098e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000992:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000996:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800099a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800099e:	9201      	str	r2, [sp, #4]
 80009a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009a6:	f042 0208 	orr.w	r2, r2, #8
 80009aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009b2:	f002 0208 	and.w	r2, r2, #8
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009be:	f042 0210 	orr.w	r2, r2, #16
 80009c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009ca:	f002 0210 	and.w	r2, r2, #16
 80009ce:	9203      	str	r2, [sp, #12]
 80009d0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009e2:	f002 0201 	and.w	r2, r2, #1
 80009e6:	9204      	str	r2, [sp, #16]
 80009e8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009fa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80009fe:	9205      	str	r2, [sp, #20]
 8000a00:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a06:	f042 0204 	orr.w	r2, r2, #4
 8000a0a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a12:	f002 0204 	and.w	r2, r2, #4
 8000a16:	9206      	str	r2, [sp, #24]
 8000a18:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a1e:	f042 0220 	orr.w	r2, r2, #32
 8000a22:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	9307      	str	r3, [sp, #28]
 8000a32:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a34:	f004 ffe8 	bl	8005a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000a3e:	4858      	ldr	r0, [pc, #352]	@ (8000ba0 <main+0x390>)
 8000a40:	f004 ffe2 	bl	8005a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a4a:	4856      	ldr	r0, [pc, #344]	@ (8000ba4 <main+0x394>)
 8000a4c:	f004 ffdc 	bl	8005a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	4854      	ldr	r0, [pc, #336]	@ (8000ba8 <main+0x398>)
 8000a56:	f004 ffd7 	bl	8005a08 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a913      	add	r1, sp, #76	@ 0x4c
 8000a60:	484d      	ldr	r0, [pc, #308]	@ (8000b98 <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f004 fe4f 	bl	800570c <HAL_GPIO_Init>
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	a913      	add	r1, sp, #76	@ 0x4c
 8000a70:	4849      	ldr	r0, [pc, #292]	@ (8000b98 <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	e9cd 9613 	strd	r9, r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f004 fe46 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8000a80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	a913      	add	r1, sp, #76	@ 0x4c
 8000a86:	4846      	ldr	r0, [pc, #280]	@ (8000ba0 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	e9cd 4815 	strd	r4, r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f004 fe3c 	bl	800570c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a94:	a913      	add	r1, sp, #76	@ 0x4c
 8000a96:	4843      	ldr	r0, [pc, #268]	@ (8000ba4 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	e9cd 7613 	strd	r7, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f004 fe34 	bl	800570c <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	a913      	add	r1, sp, #76	@ 0x4c
 8000aa6:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	e9cd 4815 	strd	r4, r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f004 fe2c 	bl	800570c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000ab4:	483d      	ldr	r0, [pc, #244]	@ (8000bac <main+0x39c>)
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb0 <main+0x3a0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ab8:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000aba:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000abc:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000abe:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ac2:	f004 fcf9 	bl	80054b8 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ac6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  hdma2d.Instance = DMA2D;
 8000aca:	483a      	ldr	r0, [pc, #232]	@ (8000bb4 <main+0x3a4>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000acc:	4a3a      	ldr	r2, [pc, #232]	@ (8000bb8 <main+0x3a8>)
  hdma2d.Init.OutputOffset = 0;
 8000ace:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ad2:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad6:	f004 fd50 	bl	800557a <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ada:	2234      	movs	r2, #52	@ 0x34
 8000adc:	4621      	mov	r1, r4
 8000ade:	a813      	add	r0, sp, #76	@ 0x4c
 8000ae0:	f02a fb32 	bl	802b148 <memset>
  hltdc.Instance = LTDC;
 8000ae4:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <main+0x3ac>)
  hltdc.Init.VerticalSync = 9;
 8000ae6:	2128      	movs	r1, #40	@ 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000ae8:	2035      	movs	r0, #53	@ 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000aea:	f240 2c15 	movw	ip, #533	@ 0x215
  hltdc.Init.TotalHeigh = 285;
 8000aee:	f240 2e35 	movw	lr, #565	@ 0x235
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000af2:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8000af4:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000af6:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000afa:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000afe:	2309      	movs	r3, #9
 8000b00:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000b04:	230b      	movs	r3, #11
 8000b06:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000b0a:	f240 131b 	movw	r3, #283	@ 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b0e:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000b10:	e9c5 c309 	strd	ip, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 285;
 8000b14:	f240 131d 	movw	r3, #285	@ 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b18:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000b1c:	e9c5 e30b 	strd	lr, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b20:	f005 fbb2 	bl	8006288 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000b24:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY1 = 272;
 8000b26:	f44f 7388 	mov.w	r3, #272	@ 0x110
  pLayerCfg.WindowX1 = 480;
 8000b2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b2e:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b30:	971a      	str	r7, [sp, #104]	@ 0x68
  pLayerCfg.WindowX0 = 0;
 8000b32:	9413      	str	r4, [sp, #76]	@ 0x4c
  hospi1.Init.ChipSelectHighTime = 2;
 8000b34:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 8000b36:	f8ad 407c 	strh.w	r4, [sp, #124]	@ 0x7c
  pLayerCfg.Backcolor.Red = 0;
 8000b3a:	f88d 407e 	strb.w	r4, [sp, #126]	@ 0x7e
  hospi1.Instance = OCTOSPI1;
 8000b3e:	4d20      	ldr	r5, [pc, #128]	@ (8000bc0 <main+0x3b0>)
  pLayerCfg.Alpha0 = 0;
 8000b40:	e9cd 1418 	strd	r1, r4, [sp, #96]	@ 0x60
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b44:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8000b48:	e9cd a11b 	strd	sl, r1, [sp, #108]	@ 0x6c
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b4c:	f04f 0a18 	mov.w	sl, #24
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b50:	a913      	add	r1, sp, #76	@ 0x4c
  pLayerCfg.ImageHeight = 272;
 8000b52:	e9cd 231d 	strd	r2, r3, [sp, #116]	@ 0x74
  pLayerCfg.WindowY0 = 0;
 8000b56:	e9cd 2414 	strd	r2, r4, [sp, #80]	@ 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b5a:	4622      	mov	r2, r4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b5c:	e9cd 3616 	strd	r3, r6, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b60:	f005 fc5d 	bl	800641e <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b64:	4621      	mov	r1, r4
 8000b66:	4652      	mov	r2, sl
 8000b68:	a813      	add	r0, sp, #76	@ 0x4c
 8000b6a:	f02a faed 	bl	802b148 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <main+0x3b4>)
  hospi1.Init.DeviceSize = 32;
 8000b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b74:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b76:	60ac      	str	r4, [r5, #8]
  hospi1.Init.Refresh = 0;
 8000b78:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hospi1.Init.FifoThreshold = 4;
 8000b7a:	e9c5 3b00 	strd	r3, fp, [r5]
  hospi1.Init.DeviceSize = 32;
 8000b7e:	2320      	movs	r3, #32
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b80:	e9c5 7405 	strd	r7, r4, [r5, #20]
 8000b84:	e020      	b.n	8000bc8 <main+0x3b8>
 8000b86:	bf00      	nop
 8000b88:	03000012 	.word	0x03000012
 8000b8c:	01010001 	.word	0x01010001
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	58024400 	.word	0x58024400
 8000b98:	58021800 	.word	0x58021800
 8000b9c:	24000400 	.word	0x24000400
 8000ba0:	58020400 	.word	0x58020400
 8000ba4:	58020c00 	.word	0x58020c00
 8000ba8:	58020000 	.word	0x58020000
 8000bac:	24000510 	.word	0x24000510
 8000bb0:	58024c00 	.word	0x58024c00
 8000bb4:	240004a8 	.word	0x240004a8
 8000bb8:	52001000 	.word	0x52001000
 8000bbc:	50001000 	.word	0x50001000
 8000bc0:	240003a4 	.word	0x240003a4
 8000bc4:	52005000 	.word	0x52005000
  hospi1.Init.DeviceSize = 32;
 8000bc8:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000bcc:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000bd0:	e9c5 7409 	strd	r7, r4, [r5, #36]	@ 0x24
  hospi1.Init.ChipSelectBoundary = 0;
 8000bd4:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hospi1.Init.MaxTran = 0;
 8000bd8:	e9c5 940d 	strd	r9, r4, [r5, #52]	@ 0x34
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000bdc:	f005 fdac 	bl	8006738 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000be0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000be8:	a913      	add	r1, sp, #76	@ 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000bea:	9316      	str	r3, [sp, #88]	@ 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bec:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bf0:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 1;
 8000bf2:	9615      	str	r6, [sp, #84]	@ 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bf4:	9317      	str	r3, [sp, #92]	@ 0x5c
  sOspiManagerCfg.DQSPort = 1;
 8000bf6:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bfa:	f006 f829 	bl	8006c50 <HAL_OSPIM_Config>
  HAL_OSPI_DeInit(&hospi1);
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f005 fe0e 	bl	8006820 <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000c04:	f240 1301 	movw	r3, #257	@ 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000c08:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000c0a:	4d43      	ldr	r5, [pc, #268]	@ (8000d18 <main+0x508>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000c0c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000c10:	f003 ffc0 	bl	8004b94 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000c14:	a90e      	add	r1, sp, #56	@ 0x38
 8000c16:	4620      	mov	r0, r4
 8000c18:	f004 f8ae 	bl	8004d78 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f003 ff81 	bl	8004b24 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c22:	4652      	mov	r2, sl
 8000c24:	4621      	mov	r1, r4
 8000c26:	a813      	add	r0, sp, #76	@ 0x4c
 8000c28:	f02a fa8e 	bl	802b148 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	4621      	mov	r1, r4
 8000c30:	a80a      	add	r0, sp, #40	@ 0x28
 8000c32:	f02a fa89 	bl	802b148 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000c36:	2214      	movs	r2, #20
 8000c38:	4621      	mov	r1, r4
 8000c3a:	a80e      	add	r0, sp, #56	@ 0x38
 8000c3c:	f02a fa84 	bl	802b148 <memset>
  hospi2.Instance = OCTOSPI2;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <main+0x50c>)
  hospi2.Init.ChipSelectBoundary = 23;
 8000c42:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c46:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c48:	60ac      	str	r4, [r5, #8]
  hospi2.Init.FifoThreshold = 4;
 8000c4a:	e9c5 3b00 	strd	r3, fp, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000c4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  hospi2.Init.DeviceSize = 24;
 8000c52:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000c56:	2317      	movs	r3, #23
 8000c58:	e9c5 130b 	strd	r1, r3, [r5, #44]	@ 0x2c
  hospi2.Init.Refresh = 400;
 8000c5c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000c60:	e9cd 4408 	strd	r4, r4, [sp, #32]
  hospi2.Init.Refresh = 400;
 8000c64:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c66:	e9c5 b405 	strd	fp, r4, [r5, #20]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c6a:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c6e:	e9c5 7409 	strd	r7, r4, [r5, #36]	@ 0x24
  hospi2.Init.MaxTran = 0;
 8000c72:	e9c5 440d 	strd	r4, r4, [r5, #52]	@ 0x34
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c76:	f005 fd5f 	bl	8006738 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <main+0x510>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c80:	a913      	add	r1, sp, #76	@ 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c82:	9316      	str	r3, [sp, #88]	@ 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c84:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c88:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000c8a:	9715      	str	r7, [sp, #84]	@ 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c8c:	9317      	str	r3, [sp, #92]	@ 0x5c
  sOspiManagerCfg.DQSPort = 2;
 8000c8e:	e9cd 7713 	strd	r7, r7, [sp, #76]	@ 0x4c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c92:	f005 ffdd 	bl	8006c50 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000c96:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c9c:	a90a      	add	r1, sp, #40	@ 0x28
 8000c9e:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000ca0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000ca4:	960d      	str	r6, [sp, #52]	@ 0x34
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000ca6:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000caa:	f005 fe1b 	bl	80068e4 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000cae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cb6:	a90e      	add	r1, sp, #56	@ 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000cb8:	9310      	str	r3, [sp, #64]	@ 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000cba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cbe:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000cc0:	940e      	str	r4, [sp, #56]	@ 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000cc2:	9312      	str	r3, [sp, #72]	@ 0x48
  sCommand.Address      = 0;
 8000cc4:	940f      	str	r4, [sp, #60]	@ 0x3c
  sCommand.NbData       = 1;
 8000cc6:	9611      	str	r6, [sp, #68]	@ 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cc8:	f005 fe32 	bl	8006930 <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000ccc:	a908      	add	r1, sp, #32
 8000cce:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000cd0:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000cd2:	f005 ff4d 	bl	8006b70 <HAL_OSPI_MemoryMapped>
  MX_LIBJPEG_Init();
 8000cd6:	f000 fbf3 	bl	80014c0 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8000cda:	f000 fc1d 	bl	8001518 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000cde:	f000 fc1a 	bl	8001516 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000ce2:	f007 fe53 	bl	800898c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <main+0x514>)
 8000ce8:	4621      	mov	r1, r4
 8000cea:	480f      	ldr	r0, [pc, #60]	@ (8000d28 <main+0x518>)
 8000cec:	f007 fe7a 	bl	80089e4 <osThreadNew>
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <main+0x51c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <main+0x520>)
 8000cf4:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf6:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000cf8:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <main+0x524>)
 8000cfa:	f007 fe73 	bl	80089e4 <osThreadNew>
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <main+0x528>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d00:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <main+0x52c>)
 8000d02:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d04:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <main+0x530>)
 8000d08:	f007 fe6c 	bl	80089e4 <osThreadNew>
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <main+0x534>)
 8000d0e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d10:	f007 fe4e 	bl	80089b0 <osKernelStart>
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <main+0x504>
 8000d16:	bf00      	nop
 8000d18:	24000348 	.word	0x24000348
 8000d1c:	5200a000 	.word	0x5200a000
 8000d20:	00010002 	.word	0x00010002
 8000d24:	0802c08c 	.word	0x0802c08c
 8000d28:	08000735 	.word	0x08000735
 8000d2c:	24000344 	.word	0x24000344
 8000d30:	0802c068 	.word	0x0802c068
 8000d34:	08001527 	.word	0x08001527
 8000d38:	24000340 	.word	0x24000340
 8000d3c:	0802c044 	.word	0x0802c044
 8000d40:	08003029 	.word	0x08003029
 8000d44:	2400033c 	.word	0x2400033c

08000d48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d48:	6802      	ldr	r2, [r0, #0]
 8000d4a:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d101      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000d50:	f004 baf2 	b.w	8005338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40001000 	.word	0x40001000

08000d5c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d5c:	4770      	bx	lr
	...

08000d60 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_MspInit+0x2c>)
{
 8000d62:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d64:	210f      	movs	r1, #15
 8000d66:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d6e:	f042 0202 	orr.w	r2, r2, #2
 8000d72:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d86:	f004 bb0d 	b.w	80053a4 <HAL_NVIC_SetPriority>
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000d90:	6802      	ldr	r2, [r0, #0]
{
 8000d92:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_CRC_MspInit+0x2c>)
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d10d      	bne.n	8000db6 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000d9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000da2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000da6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000db6:	b002      	add	sp, #8
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	58024c00 	.word	0x58024c00

08000dc0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_DMA2D_MspInit+0x40>)
{
 8000dc2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000dc4:	6802      	ldr	r2, [r0, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d117      	bne.n	8000dfa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dcc:	2105      	movs	r1, #5
 8000dce:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dd0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000dd4:	f042 0210 	orr.w	r2, r2, #16
 8000dd8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ddc:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dea:	f004 fadb 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dee:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000df0:	b003      	add	sp, #12
 8000df2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000df6:	f004 bb07 	b.w	8005408 <HAL_NVIC_EnableIRQ>
}
 8000dfa:	b003      	add	sp, #12
 8000dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e00:	52001000 	.word	0x52001000
 8000e04:	58024400 	.word	0x58024400

08000e08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0c:	b0bc      	sub	sp, #240	@ 0xf0
 8000e0e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	2214      	movs	r2, #20
 8000e12:	2100      	movs	r1, #0
 8000e14:	a809      	add	r0, sp, #36	@ 0x24
 8000e16:	f02a f997 	bl	802b148 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1a:	22b8      	movs	r2, #184	@ 0xb8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	a80e      	add	r0, sp, #56	@ 0x38
 8000e20:	f02a f992 	bl	802b148 <memset>
  if(hltdc->Instance==LTDC)
 8000e24:	6822      	ldr	r2, [r4, #0]
 8000e26:	4b77      	ldr	r3, [pc, #476]	@ (8001004 <HAL_LTDC_MspInit+0x1fc>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 80e7 	bne.w	8000ffc <HAL_LTDC_MspInit+0x1f4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e2e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e32:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	a80e      	add	r0, sp, #56	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e36:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000e3a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000e3e:	2219      	movs	r2, #25
 8000e40:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e44:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e46:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000e4a:	231e      	movs	r3, #30
 8000e4c:	931c      	str	r3, [sp, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000e4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e52:	931e      	str	r3, [sp, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e54:	f006 ff4c 	bl	8007cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	b108      	cbz	r0, 8000e5e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000e5a:	f7ff ff7f 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001008 <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e66:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e6a:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	a909      	add	r1, sp, #36	@ 0x24
 8000e6e:	4867      	ldr	r0, [pc, #412]	@ (800100c <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e70:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000e74:	f04f 0858 	mov.w	r8, #88	@ 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e78:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8000e7c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8000e80:	f002 0208 	and.w	r2, r2, #8
 8000e84:	9201      	str	r2, [sp, #4]
 8000e86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e8c:	f042 0202 	orr.w	r2, r2, #2
 8000e90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e98:	f002 0202 	and.w	r2, r2, #2
 8000e9c:	9202      	str	r2, [sp, #8]
 8000e9e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ea4:	f042 0208 	orr.w	r2, r2, #8
 8000ea8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000eac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000eb0:	f002 0208 	and.w	r2, r2, #8
 8000eb4:	9203      	str	r2, [sp, #12]
 8000eb6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ebc:	f042 0210 	orr.w	r2, r2, #16
 8000ec0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ec8:	f002 0210 	and.w	r2, r2, #16
 8000ecc:	9204      	str	r2, [sp, #16]
 8000ece:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ed4:	f042 0201 	orr.w	r2, r2, #1
 8000ed8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ee0:	f002 0201 	and.w	r2, r2, #1
 8000ee4:	9205      	str	r2, [sp, #20]
 8000ee6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ef0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ef8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000efc:	9206      	str	r2, [sp, #24]
 8000efe:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f10:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f14:	9207      	str	r2, [sp, #28]
 8000f16:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f1c:	f042 0204 	orr.w	r2, r2, #4
 8000f20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f28:	970d      	str	r7, [sp, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	9308      	str	r3, [sp, #32]
 8000f30:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	f240 3303 	movw	r3, #771	@ 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f004 fbe5 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8000f42:	2349      	movs	r3, #73	@ 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	a909      	add	r1, sp, #36	@ 0x24
 8000f46:	4832      	ldr	r0, [pc, #200]	@ (8001010 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f48:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f004 fbdb 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000f56:	f64b 0303 	movw	r3, #47107	@ 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5a:	a909      	add	r1, sp, #36	@ 0x24
 8000f5c:	482d      	ldr	r0, [pc, #180]	@ (8001014 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f004 fbd0 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	a909      	add	r1, sp, #36	@ 0x24
 8000f72:	4829      	ldr	r0, [pc, #164]	@ (8001018 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000f78:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000f7e:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f004 fbc4 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000f84:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f88:	a909      	add	r1, sp, #36	@ 0x24
 8000f8a:	4824      	ldr	r0, [pc, #144]	@ (800101c <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f8c:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	f004 fbb9 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8000f9a:	f648 7308 	movw	r3, #36616	@ 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9e:	a909      	add	r1, sp, #36	@ 0x24
 8000fa0:	481f      	ldr	r0, [pc, #124]	@ (8001020 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa2:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fac:	f004 fbae 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fb0:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	a909      	add	r1, sp, #36	@ 0x24
 8000fb4:	481b      	ldr	r0, [pc, #108]	@ (8001024 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb6:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f004 fba4 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	a909      	add	r1, sp, #36	@ 0x24
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc8:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	e9cd 8609 	strd	r8, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f004 fb9b 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fd6:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fd8:	a909      	add	r1, sp, #36	@ 0x24
 8000fda:	4811      	ldr	r0, [pc, #68]	@ (8001020 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe0:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe6:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fe8:	f004 fb90 	bl	800570c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000fec:	4640      	mov	r0, r8
 8000fee:	4622      	mov	r2, r4
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	f004 f9d7 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	f004 fa06 	bl	8005408 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000ffc:	b03c      	add	sp, #240	@ 0xf0
 8000ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001002:	bf00      	nop
 8001004:	50001000 	.word	0x50001000
 8001008:	58024400 	.word	0x58024400
 800100c:	58020400 	.word	0x58020400
 8001010:	58020c00 	.word	0x58020c00
 8001014:	58021000 	.word	0x58021000
 8001018:	58020000 	.word	0x58020000
 800101c:	58021800 	.word	0x58021800
 8001020:	58021c00 	.word	0x58021c00
 8001024:	58020800 	.word	0x58020800

08001028 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800102c:	b091      	sub	sp, #68	@ 0x44
 800102e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2214      	movs	r2, #20
 8001032:	2100      	movs	r1, #0
 8001034:	a80b      	add	r0, sp, #44	@ 0x2c
 8001036:	f02a f887 	bl	802b148 <memset>
  if(hospi->Instance==OCTOSPI1)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	4a88      	ldr	r2, [pc, #544]	@ (8001260 <HAL_OSPI_MspInit+0x238>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 80b0 	bne.w	80011a4 <HAL_OSPI_MspInit+0x17c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001044:	4a87      	ldr	r2, [pc, #540]	@ (8001264 <HAL_OSPI_MspInit+0x23c>)
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800104a:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800104c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800104e:	d10c      	bne.n	800106a <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001050:	4b85      	ldr	r3, [pc, #532]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
 8001052:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001056:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800105a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800105e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800106a:	4b7f      	ldr	r3, [pc, #508]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800106e:	2403      	movs	r4, #3
 8001070:	2709      	movs	r7, #9
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001072:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001076:	a90b      	add	r1, sp, #44	@ 0x2c
 8001078:	487c      	ldr	r0, [pc, #496]	@ (800126c <HAL_OSPI_MspInit+0x244>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2600      	movs	r6, #0
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800107c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001080:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001084:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001088:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800108c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001090:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001094:	9201      	str	r2, [sp, #4]
 8001096:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001098:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800109c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010a8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80010ac:	9202      	str	r2, [sp, #8]
 80010ae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010b4:	f042 0208 	orr.w	r2, r2, #8
 80010b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010c0:	f002 0208 	and.w	r2, r2, #8
 80010c4:	9203      	str	r2, [sp, #12]
 80010c6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010cc:	f042 0210 	orr.w	r2, r2, #16
 80010d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010d8:	f002 0210 	and.w	r2, r2, #16
 80010dc:	9204      	str	r2, [sp, #16]
 80010de:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010f0:	f002 0220 	and.w	r2, r2, #32
 80010f4:	9205      	str	r2, [sp, #20]
 80010f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010fc:	f042 0202 	orr.w	r2, r2, #2
 8001100:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	9306      	str	r3, [sp, #24]
 800110e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001118:	e9cd 470e 	strd	r4, r7, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111c:	f004 faf6 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8001120:	23b0      	movs	r3, #176	@ 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	a90b      	add	r1, sp, #44	@ 0x2c
 8001124:	4852      	ldr	r0, [pc, #328]	@ (8001270 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001126:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f004 faeb 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001136:	a90b      	add	r1, sp, #44	@ 0x2c
 8001138:	484e      	ldr	r0, [pc, #312]	@ (8001274 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800113a:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f004 fae2 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001148:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800114a:	a90b      	add	r1, sp, #44	@ 0x2c
 800114c:	4847      	ldr	r0, [pc, #284]	@ (800126c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800114e:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	f004 fad7 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 800115e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	a90b      	add	r1, sp, #44	@ 0x2c
 8001164:	4842      	ldr	r0, [pc, #264]	@ (8001270 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001166:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f004 facc 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001178:	a90b      	add	r1, sp, #44	@ 0x2c
 800117a:	483f      	ldr	r0, [pc, #252]	@ (8001278 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800117c:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001186:	f004 fac1 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	a90b      	add	r1, sp, #44	@ 0x2c
 800118c:	483b      	ldr	r0, [pc, #236]	@ (800127c <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800118e:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119a:	f004 fab7 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800119e:	b011      	add	sp, #68	@ 0x44
 80011a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 80011a4:	4a36      	ldr	r2, [pc, #216]	@ (8001280 <HAL_OSPI_MspInit+0x258>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d1f9      	bne.n	800119e <HAL_OSPI_MspInit+0x176>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80011aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001264 <HAL_OSPI_MspInit+0x23c>)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80011b0:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80011b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80011b4:	d10c      	bne.n	80011d0 <HAL_OSPI_MspInit+0x1a8>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80011b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
 80011b8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80011bc:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80011c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80011c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011cc:	9307      	str	r3, [sp, #28]
 80011ce:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80011d2:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80011d6:	2609      	movs	r6, #9
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011dc:	a90b      	add	r1, sp, #44	@ 0x2c
 80011de:	4823      	ldr	r0, [pc, #140]	@ (800126c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2700      	movs	r7, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011e2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80011e6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80011ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80011ee:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80011f2:	9208      	str	r2, [sp, #32]
 80011f4:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80011fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001202:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001206:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800120a:	9209      	str	r2, [sp, #36]	@ 0x24
 800120c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001212:	f042 0220 	orr.w	r2, r2, #32
 8001216:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	930a      	str	r3, [sp, #40]	@ 0x28
 8001224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	f640 0303 	movw	r3, #2051	@ 0x803
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800122a:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001232:	f004 fa6b 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001236:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123a:	a90b      	add	r1, sp, #44	@ 0x2c
 800123c:	480b      	ldr	r0, [pc, #44]	@ (800126c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800123e:	940f      	str	r4, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001248:	f004 fa60 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800124c:	f241 031f 	movw	r3, #4127	@ 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	a90b      	add	r1, sp, #44	@ 0x2c
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001254:	960f      	str	r6, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125e:	e79c      	b.n	800119a <HAL_OSPI_MspInit+0x172>
 8001260:	52005000 	.word	0x52005000
 8001264:	24000534 	.word	0x24000534
 8001268:	58024400 	.word	0x58024400
 800126c:	58021800 	.word	0x58021800
 8001270:	58020c00 	.word	0x58020c00
 8001274:	58021000 	.word	0x58021000
 8001278:	58021400 	.word	0x58021400
 800127c:	58020400 	.word	0x58020400
 8001280:	5200a000 	.word	0x5200a000

08001284 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8001284:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <HAL_OSPI_MspDeInit+0xa0>)
{
 8001286:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	4293      	cmp	r3, r2
 800128c:	d12a      	bne.n	80012e4 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <HAL_OSPI_MspDeInit+0xa4>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	3a01      	subs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001296:	4b25      	ldr	r3, [pc, #148]	@ (800132c <HAL_OSPI_MspDeInit+0xa8>)
 8001298:	b92a      	cbnz	r2, 80012a6 <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800129a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800129e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80012a2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80012aa:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80012ae:	4820      	ldr	r0, [pc, #128]	@ (8001330 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80012b8:	f004 fb0a 	bl	80058d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 80012bc:	f643 01b0 	movw	r1, #14512	@ 0x38b0
 80012c0:	481c      	ldr	r0, [pc, #112]	@ (8001334 <HAL_OSPI_MspDeInit+0xb0>)
 80012c2:	f004 fb05 	bl	80058d0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	481b      	ldr	r0, [pc, #108]	@ (8001338 <HAL_OSPI_MspDeInit+0xb4>)
 80012ca:	f004 fb01 	bl	80058d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 80012ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d2:	481a      	ldr	r0, [pc, #104]	@ (800133c <HAL_OSPI_MspDeInit+0xb8>)
 80012d4:	f004 fafc 	bl	80058d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	4819      	ldr	r0, [pc, #100]	@ (8001340 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 80012dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80012e0:	f004 baf6 	b.w	80058d0 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_OSPI_MspDeInit+0xc0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d11a      	bne.n	8001320 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_OSPI_MspDeInit+0xa4>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	3a01      	subs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_OSPI_MspDeInit+0xa8>)
 80012f4:	b92a      	cbnz	r2, 8001302 <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80012f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80012fa:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80012fe:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001302:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001306:	f641 4103 	movw	r1, #7171	@ 0x1c03
 800130a:	4809      	ldr	r0, [pc, #36]	@ (8001330 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 800130c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001310:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001314:	f004 fadc 	bl	80058d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001318:	f241 011f 	movw	r1, #4127	@ 0x101f
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <HAL_OSPI_MspDeInit+0xb8>)
 800131e:	e7dd      	b.n	80012dc <HAL_OSPI_MspDeInit+0x58>
}
 8001320:	bd08      	pop	{r3, pc}
 8001322:	bf00      	nop
 8001324:	52005000 	.word	0x52005000
 8001328:	24000534 	.word	0x24000534
 800132c:	58024400 	.word	0x58024400
 8001330:	58021800 	.word	0x58021800
 8001334:	58020c00 	.word	0x58020c00
 8001338:	58021000 	.word	0x58021000
 800133c:	58021400 	.word	0x58021400
 8001340:	58020400 	.word	0x58020400
 8001344:	5200a000 	.word	0x5200a000

08001348 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001348:	280f      	cmp	r0, #15
{
 800134a:	b510      	push	{r4, lr}
 800134c:	4604      	mov	r4, r0
 800134e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001350:	d902      	bls.n	8001358 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001352:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001354:	b00a      	add	sp, #40	@ 0x28
 8001356:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001358:	4601      	mov	r1, r0
 800135a:	2200      	movs	r2, #0
 800135c:	2036      	movs	r0, #54	@ 0x36
 800135e:	f004 f821 	bl	80053a4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001362:	2036      	movs	r0, #54	@ 0x36
 8001364:	f004 f850 	bl	8005408 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136a:	4669      	mov	r1, sp
 800136c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800136e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_InitTick+0x88>)
 8001372:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800137e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138a:	f006 fb97 	bl	8007abc <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800138e:	9b07      	ldr	r3, [sp, #28]
 8001390:	b9c3      	cbnz	r3, 80013c4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001392:	f006 fb6f 	bl	8007a74 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001396:	4c0f      	ldr	r4, [pc, #60]	@ (80013d4 <HAL_InitTick+0x8c>)
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <HAL_InitTick+0x90>)
 800139a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800139c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80013a0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_InitTick+0x94>)
 80013a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80013aa:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ac:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013ae:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80013b0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013b4:	f007 faaa 	bl	800890c <HAL_TIM_Base_Init>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1ca      	bne.n	8001352 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80013bc:	4620      	mov	r0, r4
 80013be:	f007 f947 	bl	8008650 <HAL_TIM_Base_Start_IT>
 80013c2:	e7c7      	b.n	8001354 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c4:	f006 fb56 	bl	8007a74 <HAL_RCC_GetPCLK1Freq>
 80013c8:	0040      	lsls	r0, r0, #1
 80013ca:	e7e4      	b.n	8001396 <HAL_InitTick+0x4e>
 80013cc:	24000048 	.word	0x24000048
 80013d0:	58024400 	.word	0x58024400
 80013d4:	24000538 	.word	0x24000538
 80013d8:	40001000 	.word	0x40001000
 80013dc:	000f4240 	.word	0x000f4240

080013e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e0:	4770      	bx	lr

080013e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler>

080013e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler>

080013e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler>

080013e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler>

080013ea <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80013ea:	4770      	bx	lr

080013ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013ec:	4801      	ldr	r0, [pc, #4]	@ (80013f4 <TIM6_DAC_IRQHandler+0x8>)
 80013ee:	f007 b979 	b.w	80086e4 <HAL_TIM_IRQHandler>
 80013f2:	bf00      	nop
 80013f4:	24000538 	.word	0x24000538

080013f8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013f8:	4801      	ldr	r0, [pc, #4]	@ (8001400 <LTDC_IRQHandler+0x8>)
 80013fa:	f004 bfb3 	b.w	8006364 <HAL_LTDC_IRQHandler>
 80013fe:	bf00      	nop
 8001400:	24000400 	.word	0x24000400

08001404 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001404:	4801      	ldr	r0, [pc, #4]	@ (800140c <DMA2D_IRQHandler+0x8>)
 8001406:	f004 b8f7 	b.w	80055f8 <HAL_DMA2D_IRQHandler>
 800140a:	bf00      	nop
 800140c:	240004a8 	.word	0x240004a8

08001410 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001410:	2001      	movs	r0, #1
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001416:	f029 ff4b 	bl	802b2b0 <__errno>
 800141a:	2316      	movs	r3, #22
 800141c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800141e:	f04f 30ff 	mov.w	r0, #4294967295
 8001422:	bd08      	pop	{r3, pc}

08001424 <_exit>:

void _exit (int status)
{
 8001424:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001426:	f029 ff43 	bl	802b2b0 <__errno>
 800142a:	2316      	movs	r3, #22
 800142c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800142e:	e7fe      	b.n	800142e <_exit+0xa>

08001430 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	460d      	mov	r5, r1
 8001434:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	460e      	mov	r6, r1
 8001438:	1b73      	subs	r3, r6, r5
 800143a:	429c      	cmp	r4, r3
 800143c:	dc01      	bgt.n	8001442 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800143e:	4620      	mov	r0, r4
 8001440:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001442:	f3af 8000 	nop.w
 8001446:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	e7f5      	b.n	8001438 <_read+0x8>

0800144c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	460d      	mov	r5, r1
 8001450:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	460e      	mov	r6, r1
 8001454:	1b73      	subs	r3, r6, r5
 8001456:	429c      	cmp	r4, r3
 8001458:	dc01      	bgt.n	800145e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800145a:	4620      	mov	r0, r4
 800145c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800145e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001462:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	e7f5      	b.n	8001454 <_write+0x8>

08001468 <_close>:

int _close(int file)
{
	return -1;
}
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001472:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001474:	604b      	str	r3, [r1, #4]
}
 8001476:	4770      	bx	lr

08001478 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001478:	2001      	movs	r0, #1
 800147a:	4770      	bx	lr

0800147c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800147c:	2000      	movs	r0, #0
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <_sbrk+0x30>)
{
 8001482:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001484:	6811      	ldr	r1, [r2, #0]
{
 8001486:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001488:	b909      	cbnz	r1, 800148e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800148a:	490a      	ldr	r1, [pc, #40]	@ (80014b4 <_sbrk+0x34>)
 800148c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	4909      	ldr	r1, [pc, #36]	@ (80014b8 <_sbrk+0x38>)
 8001492:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <_sbrk+0x3c>)
 8001494:	4403      	add	r3, r0
 8001496:	1b09      	subs	r1, r1, r4
 8001498:	428b      	cmp	r3, r1
 800149a:	d906      	bls.n	80014aa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800149c:	f029 ff08 	bl	802b2b0 <__errno>
 80014a0:	230c      	movs	r3, #12
 80014a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014a8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80014aa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80014ac:	e7fc      	b.n	80014a8 <_sbrk+0x28>
 80014ae:	bf00      	nop
 80014b0:	24000584 	.word	0x24000584
 80014b4:	24016af8 	.word	0x24016af8
 80014b8:	24050000 	.word	0x24050000
 80014bc:	00001000 	.word	0x00001000

080014c0 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80014c0:	4770      	bx	lr
	...

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014fc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014c8:	f003 feb2 	bl	8005230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d8:	480a      	ldr	r0, [pc, #40]	@ (8001504 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
  ldr  r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80014ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f029 fee3 	bl	802b2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff f98b 	bl	8000810 <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001500:	08031014 	.word	0x08031014
  ldr  r0, =_sdata
 8001504:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001508:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 800150c:	24000320 	.word	0x24000320
  ldr  r3, = _ebss
 8001510:	24016af4 	.word	0x24016af4

08001514 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC3_IRQHandler>

08001516 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001516:	4770      	bx	lr

08001518 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001518:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800151a:	f001 f955 	bl	80027c8 <touchgfx_components_init>
    touchgfx_init();
}
 800151e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001522:	f001 b8d9 	b.w	80026d8 <touchgfx_init>

08001526 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001526:	f001 b951 	b.w	80027cc <touchgfx_taskEntry>

0800152a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800152a:	6840      	ldr	r0, [r0, #4]
    }
 800152c:	4770      	bx	lr

0800152e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800152e:	6041      	str	r1, [r0, #4]
    }
 8001530:	4770      	bx	lr
	...

08001534 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001534:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001538:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 800153c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001540:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001546:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001548:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 800154c:	430a      	orrs	r2, r1
 800154e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	4770      	bx	lr
 800155c:	e0001000 	.word	0xe0001000
 8001560:	c5acce55 	.word	0xc5acce55

08001564 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001564:	1a52      	subs	r2, r2, r1
 8001566:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800156a:	fbb2 f0f3 	udiv	r0, r2, r3
 800156e:	4770      	bx	lr

08001570 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001570:	4b01      	ldr	r3, [pc, #4]	@ (8001578 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001572:	6858      	ldr	r0, [r3, #4]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e0001000 	.word	0xe0001000

0800157c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 800157c:	4770      	bx	lr

0800157e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800157e:	b510      	push	{r4, lr}
 8001580:	4604      	mov	r4, r0
 8001582:	210c      	movs	r1, #12
 8001584:	f028 ffac 	bl	802a4e0 <_ZdlPvj>
 8001588:	4620      	mov	r0, r4
 800158a:	bd10      	pop	{r4, pc}

0800158c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800158c:	6803      	ldr	r3, [r0, #0]
{
 800158e:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001590:	691b      	ldr	r3, [r3, #16]
{
 8001592:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001594:	b131      	cbz	r1, 80015a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001596:	4798      	blx	r3
 8001598:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800159a:	6863      	ldr	r3, [r4, #4]
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	4403      	add	r3, r0
 80015a0:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80015a2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80015a4:	4798      	blx	r3
 80015a6:	60a0      	str	r0, [r4, #8]
}
 80015a8:	e7fb      	b.n	80015a2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080015aa <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80015aa:	4770      	bx	lr

080015ac <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80015ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 80015ae:	2308      	movs	r3, #8
 80015b0:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 80015b2:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 80015b4:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <_ZN20STM32TouchController4initEv+0x24>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <_ZN20STM32TouchController4initEv+0x28>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 80015c4:	f003 fd52 	bl	800506c <BSP_TS_Init>
}
 80015c8:	b005      	add	sp, #20
 80015ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ce:	bf00      	nop
 80015d0:	24015dce 	.word	0x24015dce
 80015d4:	24015dd0 	.word	0x24015dd0

080015d8 <_ZN20STM32TouchControllerD0Ev>:
 80015d8:	b510      	push	{r4, lr}
 80015da:	4604      	mov	r4, r0
 80015dc:	2104      	movs	r1, #4
 80015de:	f028 ff7f 	bl	802a4e0 <_ZdlPvj>
 80015e2:	4620      	mov	r0, r4
 80015e4:	bd10      	pop	{r4, pc}

080015e6 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80015e6:	b530      	push	{r4, r5, lr}
 80015e8:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 80015ea:	2000      	movs	r0, #0
{
 80015ec:	460d      	mov	r5, r1
 80015ee:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80015f0:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 80015f2:	9003      	str	r0, [sp, #12]
 80015f4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80015f8:	f003 fdba 	bl	8005170 <BSP_TS_GetState>
 80015fc:	b140      	cbz	r0, 8001610 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001602:	f383 8811 	msr	BASEPRI, r3
 8001606:	f3bf 8f6f 	isb	sy
 800160a:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800160e:	e7fe      	b.n	800160e <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001610:	9801      	ldr	r0, [sp, #4]
 8001612:	b120      	cbz	r0, 800161e <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001614:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001616:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001618:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800161a:	9b03      	ldr	r3, [sp, #12]
 800161c:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 800161e:	b005      	add	sp, #20
 8001620:	bd30      	pop	{r4, r5, pc}
	...

08001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001624:	2803      	cmp	r0, #3
 8001626:	d825      	bhi.n	8001674 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001628:	e8df f000 	tbb	[pc, r0]
 800162c:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001632:	2101      	movs	r1, #1
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800163e:	f004 b9e3 	b.w	8005a08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001644:	2108      	movs	r1, #8
 8001646:	480e      	ldr	r0, [pc, #56]	@ (8001680 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	0952      	lsrs	r2, r2, #5
 8001650:	e7f5      	b.n	800163e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	fab2 f282 	clz	r2, r2
 800165e:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001660:	4808      	ldr	r0, [pc, #32]	@ (8001684 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 8001662:	e7ec      	b.n	800163e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	fab2 f282 	clz	r2, r2
 8001670:	0952      	lsrs	r2, r2, #5
 8001672:	e7f5      	b.n	8001660 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	24000588 	.word	0x24000588
 800167c:	58020000 	.word	0x58020000
 8001680:	58021800 	.word	0x58021800
 8001684:	58020400 	.word	0x58020400

08001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001688:	2803      	cmp	r0, #3
 800168a:	d825      	bhi.n	80016d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 800168c:	e8df f000 	tbb	[pc, r0]
 8001690:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001696:	2101      	movs	r1, #1
 8001698:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	3a00      	subs	r2, #0
 800169e:	bf18      	it	ne
 80016a0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80016a2:	f004 b9b1 	b.w	8005a08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80016a8:	2108      	movs	r1, #8
 80016aa:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	3a00      	subs	r2, #0
 80016b0:	bf18      	it	ne
 80016b2:	2201      	movne	r2, #1
 80016b4:	e7f5      	b.n	80016a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80016b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	3a00      	subs	r2, #0
 80016c0:	bf18      	it	ne
 80016c2:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80016c4:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 80016c6:	e7ec      	b.n	80016a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80016ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	3a00      	subs	r2, #0
 80016d2:	bf18      	it	ne
 80016d4:	2201      	movne	r2, #1
 80016d6:	e7f5      	b.n	80016c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	24000588 	.word	0x24000588
 80016e0:	58020000 	.word	0x58020000
 80016e4:	58021800 	.word	0x58021800
 80016e8:	58020400 	.word	0x58020400

080016ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80016ec:	2803      	cmp	r0, #3
 80016ee:	d811      	bhi.n	8001714 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80016f0:	e8df f000 	tbb	[pc, r0]
 80016f4:	0d090602 	.word	0x0d090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80016f8:	2101      	movs	r1, #1
 80016fa:	4807      	ldr	r0, [pc, #28]	@ (8001718 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80016fc:	f004 b989 	b.w	8005a12 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001700:	2108      	movs	r1, #8
 8001702:	4806      	ldr	r0, [pc, #24]	@ (800171c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001704:	e7fa      	b.n	80016fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
 800170c:	e7f6      	b.n	80016fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800170e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001712:	e7fa      	b.n	800170a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	58020000 	.word	0x58020000
 800171c:	58021800 	.word	0x58021800
 8001720:	58020400 	.word	0x58020400

08001724 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001724:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001726:	2803      	cmp	r0, #3
 8001728:	d815      	bhi.n	8001756 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 800172a:	e8df f000 	tbb	[pc, r0]
 800172e:	0a02      	.short	0x0a02
 8001730:	110d      	.short	0x110d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001732:	2101      	movs	r1, #1
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001736:	f004 f961 	bl	80059fc <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800173a:	1e43      	subs	r3, r0, #1
 800173c:	4258      	negs	r0, r3
 800173e:	4158      	adcs	r0, r3
 8001740:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001742:	2108      	movs	r1, #8
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001746:	e7f6      	b.n	8001736 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x40>)
 800174e:	e7f2      	b.n	8001736 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001754:	e7fa      	b.n	800174c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x28>
    switch (id)
 8001756:	2000      	movs	r0, #0
 8001758:	e7ef      	b.n	800173a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 800175a:	bf00      	nop
 800175c:	58020000 	.word	0x58020000
 8001760:	58021800 	.word	0x58021800
 8001764:	58020400 	.word	0x58020400

08001768 <_ZN8touchgfx4GPIO4initEv>:
{
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4d08      	ldr	r5, [pc, #32]	@ (800178c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800176c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800176e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001770:	b2e0      	uxtb	r0, r4
 8001772:	f7ff ffd7 	bl	8001724 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001776:	b118      	cbz	r0, 8001780 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800177c:	bf18      	it	ne
 800177e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001780:	3401      	adds	r4, #1
 8001782:	3504      	adds	r5, #4
 8001784:	2c05      	cmp	r4, #5
 8001786:	d1f3      	bne.n	8001770 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001788:	bd70      	pop	{r4, r5, r6, pc}
 800178a:	bf00      	nop
 800178c:	24000588 	.word	0x24000588

08001790 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001790:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001792:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001796:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800179a:	4770      	bx	lr

0800179c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800179c:	2000      	movs	r0, #0
 800179e:	4770      	bx	lr

080017a0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80017a0:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80017a2:	3900      	subs	r1, #0
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80017a6:	bf18      	it	ne
 80017a8:	2101      	movne	r1, #1
 80017aa:	7019      	strb	r1, [r3, #0]
    }
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	24015dd3 	.word	0x24015dd3

080017b4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80017b4:	2000      	movs	r0, #0
 80017b6:	4770      	bx	lr

080017b8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80017b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80017ba:	b10b      	cbz	r3, 80017c0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80017bc:	4608      	mov	r0, r1
 80017be:	4718      	bx	r3
        }
    }
 80017c0:	4770      	bx	lr

080017c2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80017c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017c6:	4770      	bx	lr

080017c8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80017c8:	6840      	ldr	r0, [r0, #4]
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4718      	bx	r3

080017d0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80017d0:	4770      	bx	lr
	...

080017d4 <_ZN11TouchGFXHAL10initializeEv>:
uint32_t animationBuffer[(480 * 272 * 3 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}


void TouchGFXHAL::initialize()
{
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80017d8:	f001 f924 	bl	8002a24 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setAnimationStorage((void*)animationBuffer);
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <_ZN11TouchGFXHAL10initializeEv+0x28>)
 80017de:	6823      	ldr	r3, [r4, #0]

    instrumentation.init();
 80017e0:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
    setAnimationStorage((void*)animationBuffer);
 80017e4:	4620      	mov	r0, r4
 80017e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ea:	4798      	blx	r3
    instrumentation.init();
 80017ec:	4628      	mov	r0, r5
 80017ee:	f7ff fea1 	bl	8001534 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 80017f2:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 80017f4:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80017f6:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	70000000 	.word	0x70000000

08001800 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001800:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001802:	6803      	ldr	r3, [r0, #0]
{
 8001804:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800180a:	4798      	blx	r3
    enableInterrupts();
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	4620      	mov	r0, r4
 8001810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001812:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001814:	f000 f92c 	bl	8001a70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	4620      	mov	r0, r4
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001826:	4808      	ldr	r0, [pc, #32]	@ (8001848 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 8001828:	f004 f8ee 	bl	8005a08 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001832:	4806      	ldr	r0, [pc, #24]	@ (800184c <_ZN11TouchGFXHAL9taskEntryEv+0x4c>)
 8001834:	f004 f8e8 	bl	8005a08 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001838:	f000 f91a 	bl	8001a70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	4620      	mov	r0, r4
 8001840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001842:	4798      	blx	r3
    for (;;)
 8001844:	e7f8      	b.n	8001838 <_ZN11TouchGFXHAL9taskEntryEv+0x38>
 8001846:	bf00      	nop
 8001848:	58020c00 	.word	0x58020c00
 800184c:	58021800 	.word	0x58021800

08001850 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001850:	b510      	push	{r4, lr}
 8001852:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001854:	f017 fb20 	bl	8018e98 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	4620      	mov	r0, r4
 800185c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001864:	4718      	bx	r3

08001866 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001866:	f001 b8a9 	b.w	80029bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800186a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800186a:	f001 b8ad 	b.w	80029c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001870 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001870:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001872:	f001 f901 	bl	8002a78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001876:	4910      	ldr	r1, [pc, #64]	@ (80018b8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001878:	2300      	movs	r3, #0
 800187a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800187e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001882:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001886:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800188a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800188e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001892:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001894:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001898:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800189a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800189e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80018a0:	f8c1 5274 	str.w	r5, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80018a4:	d2f9      	bcs.n	800189a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 80018a6:	3b20      	subs	r3, #32
 80018a8:	f113 0f20 	cmn.w	r3, #32
 80018ac:	d1f2      	bne.n	8001894 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 80018ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018b2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80018bc:	f001 b85a 	b.w	8002974 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080018c0 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80018c0:	f001 ba44 	b.w	8002d4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

080018c4 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80018c4:	f001 ba4c 	b.w	8002d60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

080018c8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80018c8:	f001 b85e 	b.w	8002988 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

080018cc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80018cc:	f016 bd50 	b.w	8018370 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080018d0 <_ZN11TouchGFXHALD0Ev>:
 80018d0:	b510      	push	{r4, lr}
 80018d2:	4604      	mov	r4, r0
 80018d4:	2188      	movs	r1, #136	@ 0x88
 80018d6:	f028 fe03 	bl	802a4e0 <_ZdlPvj>
 80018da:	4620      	mov	r0, r4
 80018dc:	bd10      	pop	{r4, pc}
	...

080018e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80018e0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80018e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80018e8:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80018ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80018ee:	428c      	cmp	r4, r1
 80018f0:	d009      	beq.n	8001906 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80018f2:	b93a      	cbnz	r2, 8001904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80018f4:	490a      	ldr	r1, [pc, #40]	@ (8001920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80018f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80018fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80018fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80018fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001900:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001902:	701a      	strb	r2, [r3, #0]
        }
    }
 8001904:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001906:	2a00      	cmp	r2, #0
 8001908:	d0fc      	beq.n	8001904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800190a:	4a06      	ldr	r2, [pc, #24]	@ (8001924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800190c:	4904      	ldr	r1, [pc, #16]	@ (8001920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800190e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001910:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001912:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001914:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001916:	2200      	movs	r2, #0
 8001918:	e7f3      	b.n	8001902 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800191a:	bf00      	nop
 800191c:	24015dcc 	.word	0x24015dcc
 8001920:	24015dca 	.word	0x24015dca
 8001924:	24015dc8 	.word	0x24015dc8

08001928 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	460d      	mov	r5, r1
 800192c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800192e:	b935      	cbnz	r5, 800193e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001932:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 800193a:	f029 f949 	bl	802abd0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800193e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001942:	3a00      	subs	r2, #0
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001946:	bf18      	it	ne
 8001948:	2201      	movne	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800194c:	6803      	ldr	r3, [r0, #0]
    }
 800194e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001956:	4718      	bx	r3
 8001958:	0802c0f0 	.word	0x0802c0f0
 800195c:	0802c128 	.word	0x0802c128
 8001960:	0802c176 	.word	0x0802c176
 8001964:	24015dd2 	.word	0x24015dd2

08001968 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001968:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	428b      	cmp	r3, r1
 8001970:	d803      	bhi.n	800197a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4293      	cmp	r3, r2
 8001978:	d905      	bls.n	8001986 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800197c:	219e      	movs	r1, #158	@ 0x9e
 800197e:	4a07      	ldr	r2, [pc, #28]	@ (800199c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001980:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001982:	f029 f925 	bl	802abd0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001988:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800198c:	801a      	strh	r2, [r3, #0]
    }
 800198e:	bd08      	pop	{r3, pc}
 8001990:	24015dc8 	.word	0x24015dc8
 8001994:	24015dca 	.word	0x24015dca
 8001998:	0802c1bb 	.word	0x0802c1bb
 800199c:	0802c21e 	.word	0x0802c21e
 80019a0:	0802c176 	.word	0x0802c176
 80019a4:	24015dce 	.word	0x24015dce
 80019a8:	24015dd0 	.word	0x24015dd0

080019ac <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80019ac:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 80019ae:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 80019b2:	b118      	cbz	r0, 80019bc <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 80019b4:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4718      	bx	r3
    }
 80019bc:	4770      	bx	lr
	...

080019c0 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 80019c0:	4601      	mov	r1, r0
 80019c2:	b508      	push	{r3, lr}
        return instance;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <IdleTaskHook+0x14>)
 80019c6:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80019c8:	b101      	cbz	r1, 80019cc <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80019ca:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80019cc:	f017 fa7e 	bl	8018ecc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80019d0:	2001      	movs	r0, #1
 80019d2:	bd08      	pop	{r3, pc}
 80019d4:	24015dd4 	.word	0x24015dd4

080019d8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80019d8:	2101      	movs	r1, #1
 80019da:	2200      	movs	r2, #0
{
 80019dc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80019de:	4608      	mov	r0, r1
 80019e0:	f007 f8ca 	bl	8008b78 <osSemaphoreNew>
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80019e6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80019e8:	b928      	cbnz	r0, 80019f6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80019ec:	2128      	movs	r1, #40	@ 0x28
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80019f0:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80019f2:	f029 f8ed 	bl	802abd0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2104      	movs	r1, #4
 80019fa:	2001      	movs	r0, #1
 80019fc:	f007 f95b 	bl	8008cb6 <osMessageQueueNew>
 8001a00:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001a02:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a04:	b918      	cbnz	r0, 8001a0e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001a06:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001a08:	212c      	movs	r1, #44	@ 0x2c
 8001a0a:	4a03      	ldr	r2, [pc, #12]	@ (8001a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001a0c:	e7f0      	b.n	80019f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001a0e:	bd08      	pop	{r3, pc}
 8001a10:	2400059c 	.word	0x2400059c
 8001a14:	0802c33c 	.word	0x0802c33c
 8001a18:	0802c385 	.word	0x0802c385
 8001a1c:	0802c3b4 	.word	0x0802c3b4
 8001a20:	24000598 	.word	0x24000598
 8001a24:	0802c41b 	.word	0x0802c41b

08001a28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001a28:	4b02      	ldr	r3, [pc, #8]	@ (8001a34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f007 b8ec 	b.w	8008c0c <osSemaphoreAcquire>
 8001a34:	2400059c 	.word	0x2400059c

08001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001a38:	4b01      	ldr	r3, [pc, #4]	@ (8001a40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	f007 b912 	b.w	8008c64 <osSemaphoreRelease>
 8001a40:	2400059c 	.word	0x2400059c

08001a44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001a44:	4b02      	ldr	r3, [pc, #8]	@ (8001a50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f007 b8df 	b.w	8008c0c <osSemaphoreAcquire>
 8001a4e:	bf00      	nop
 8001a50:	2400059c 	.word	0x2400059c

08001a54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001a54:	f7ff bff0 	b.w	8001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001a58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001a5c:	4903      	ldr	r1, [pc, #12]	@ (8001a6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6800      	ldr	r0, [r0, #0]
 8001a62:	f007 b963 	b.w	8008d2c <osMessageQueuePut>
 8001a66:	bf00      	nop
 8001a68:	24000598 	.word	0x24000598
 8001a6c:	24000004 	.word	0x24000004

08001a70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001a70:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001a72:	2300      	movs	r3, #0
 8001a74:	4c07      	ldr	r4, [pc, #28]	@ (8001a94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001a76:	a901      	add	r1, sp, #4
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	f007 f987 	bl	8008d8e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	2200      	movs	r2, #0
 8001a86:	a901      	add	r1, sp, #4
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	f007 f980 	bl	8008d8e <osMessageQueueGet>
}
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	24000598 	.word	0x24000598

08001a98 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001a98:	6803      	ldr	r3, [r0, #0]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	4718      	bx	r3

08001a9e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	4770      	bx	lr

08001aa2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001aa2:	6803      	ldr	r3, [r0, #0]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	4718      	bx	r3

08001aa8 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <DMA2D_XferErrorCallback>

08001aaa <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001aaa:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001aae:	4770      	bx	lr

08001ab0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ab6:	6003      	str	r3, [r0, #0]
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <_ZN8STM32DMAD1Ev+0x1c>)
 8001aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ac2:	f3bf 8f6f 	isb	sy
}
 8001ac6:	4770      	bx	lr
 8001ac8:	0802c5d4 	.word	0x0802c5d4
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
}
 8001ad4:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001ad8:	f7ff ffea 	bl	8001ab0 <_ZN8STM32DMAD1Ev>
 8001adc:	4620      	mov	r0, r4
 8001ade:	f028 fcff 	bl	802a4e0 <_ZdlPvj>
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	bd10      	pop	{r4, pc}
	...

08001ae8 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ae8:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <_ZN8STM32DMA10initializeEv+0x44>)
{
 8001aea:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001aec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001af0:	f042 0210 	orr.w	r2, r2, #16
 8001af4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001af8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001afc:	f002 0210 	and.w	r2, r2, #16
 8001b00:	9201      	str	r2, [sp, #4]
 8001b02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001b04:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b06:	f042 0210 	orr.w	r2, r2, #16
 8001b0a:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b0e:	f022 0210 	bic.w	r2, r2, #16
 8001b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <_ZN8STM32DMA10initializeEv+0x48>)
 8001b16:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001b18:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <_ZN8STM32DMA10initializeEv+0x50>)
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_ZN8STM32DMA10initializeEv+0x54>)
 8001b20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b24:	609a      	str	r2, [r3, #8]
}
 8001b26:	b002      	add	sp, #8
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	240004a8 	.word	0x240004a8
 8001b34:	08001d85 	.word	0x08001d85
 8001b38:	08001aa9 	.word	0x08001aa9
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001b40:	b508      	push	{r3, lr}
    switch (format)
 8001b42:	280a      	cmp	r0, #10
 8001b44:	d809      	bhi.n	8001b5a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001b46:	e8df f000 	tbb	[pc, r0]
 8001b4a:	1006      	.short	0x1006
 8001b4c:	0808080e 	.word	0x0808080e
 8001b50:	10101008 	.word	0x10101008
 8001b54:	10          	.byte	0x10
 8001b55:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001b56:	2002      	movs	r0, #2
}
 8001b58:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001b5c:	2190      	movs	r1, #144	@ 0x90
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001b62:	f029 f835 	bl	802abd0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b66:	2000      	movs	r0, #0
 8001b68:	e7f6      	b.n	8001b58 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001b6a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001b6c:	e7f4      	b.n	8001b58 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001b6e:	bf00      	nop
 8001b70:	0802c45d 	.word	0x0802c45d
 8001b74:	0802c478 	.word	0x0802c478
 8001b78:	0802c4c3 	.word	0x0802c4c3

08001b7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b80:	7f88      	ldrb	r0, [r1, #30]
 8001b82:	f7ff ffdd 	bl	8001b40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b88:	8aa5      	ldrh	r5, [r4, #20]
 8001b8a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001b8c:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b8e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001b92:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b96:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001b98:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b9a:	1b52      	subs	r2, r2, r5
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001b9e:	6825      	ldr	r5, [r4, #0]
 8001ba0:	2d08      	cmp	r5, #8
 8001ba2:	d10e      	bne.n	8001bc2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ba4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ba6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ba8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001bac:	7f20      	ldrb	r0, [r4, #28]
 8001bae:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001bb2:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8001bb4:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001bb6:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001bba:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001bbc:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8001bbe:	601a      	str	r2, [r3, #0]
    }
}
 8001bc0:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001bc2:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001bc4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001bca:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8001bcc:	4a03      	ldr	r2, [pc, #12]	@ (8001bdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8001bce:	e7f6      	b.n	8001bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001bd0:	52001000 	.word	0x52001000
 8001bd4:	00010009 	.word	0x00010009
 8001bd8:	00022301 	.word	0x00022301
 8001bdc:	00032301 	.word	0x00032301

08001be0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001be0:	b508      	push	{r3, lr}
    switch (format)
 8001be2:	280b      	cmp	r0, #11
 8001be4:	d80b      	bhi.n	8001bfe <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001be6:	e8df f000 	tbb	[pc, r0]
 8001bea:	1206      	.short	0x1206
 8001bec:	0a0a0a10 	.word	0x0a0a0a10
 8001bf0:	0808080a 	.word	0x0808080a
 8001bf4:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001bf6:	2002      	movs	r0, #2
}
 8001bf8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001bfa:	2005      	movs	r0, #5
        break;
 8001bfc:	e7fc      	b.n	8001bf8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001c00:	216f      	movs	r1, #111	@ 0x6f
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001c06:	f028 ffe3 	bl	802abd0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	e7f4      	b.n	8001bf8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001c0e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001c10:	e7f2      	b.n	8001bf8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001c12:	bf00      	nop
 8001c14:	0802c45d 	.word	0x0802c45d
 8001c18:	0802c528 	.word	0x0802c528
 8001c1c:	0802c4c3 	.word	0x0802c4c3

08001c20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8001c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c24:	7f4f      	ldrb	r7, [r1, #29]
{
 8001c26:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c28:	4638      	mov	r0, r7
 8001c2a:	f7ff ffd9 	bl	8001be0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c2e:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c32:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c34:	4628      	mov	r0, r5
 8001c36:	f7ff ffd3 	bl	8001be0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001c3a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f7ff ff7f 	bl	8001b40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c42:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8001c46:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c4a:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c4e:	4b45      	ldr	r3, [pc, #276]	@ (8001d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001c50:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c52:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c54:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c56:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c58:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c5a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c5e:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c64:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c68:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c6a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c6e:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c70:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8001c72:	f8d9 4000 	ldr.w	r4, [r9]
 8001c76:	f899 201c 	ldrb.w	r2, [r9, #28]
 8001c7a:	2c80      	cmp	r4, #128	@ 0x80
 8001c7c:	d022      	beq.n	8001cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8001c7e:	d80f      	bhi.n	8001ca0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8001c80:	2c20      	cmp	r4, #32
 8001c82:	d066      	beq.n	8001d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8001c84:	2c40      	cmp	r4, #64	@ 0x40
 8001c86:	d064      	beq.n	8001d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8001c88:	2c04      	cmp	r4, #4
 8001c8a:	d05c      	beq.n	8001d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c8c:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8001c90:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001c92:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c94:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8001c98:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001c9a:	d060      	beq.n	8001d5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001c9c:	4a32      	ldr	r2, [pc, #200]	@ (8001d68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001c9e:	e03f      	b.n	8001d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001ca0:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8001ca4:	d004      	beq.n	8001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8001ca6:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8001caa:	d1ef      	bne.n	8001c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cac:	482f      	ldr	r0, [pc, #188]	@ (8001d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8001cae:	e000      	b.n	8001cb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cb0:	482f      	ldr	r0, [pc, #188]	@ (8001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cb2:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8001cb6:	61da      	str	r2, [r3, #28]
 8001cb8:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001cbc:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cbe:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cc0:	6159      	str	r1, [r3, #20]
 8001cc2:	e02c      	b.n	8001d1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cc4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001cc8:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ccc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8001cd0:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cd2:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cd4:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001cd6:	1d21      	adds	r1, r4, #4
 8001cd8:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8001cda:	7821      	ldrb	r1, [r4, #0]
 8001cdc:	b141      	cbz	r1, 8001cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001cde:	2901      	cmp	r1, #1
 8001ce0:	d021      	beq.n	8001d26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001ce4:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001ce8:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8001cea:	4824      	ldr	r0, [pc, #144]	@ (8001d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001cec:	f028 ff70 	bl	802abd0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	8861      	ldrh	r1, [r4, #2]
 8001cf4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001cf8:	3901      	subs	r1, #1
 8001cfa:	f022 0210 	bic.w	r2, r2, #16
 8001cfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d02:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8001d04:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d08:	69d9      	ldr	r1, [r3, #28]
 8001d0a:	f041 0120 	orr.w	r1, r1, #32
 8001d0e:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001d10:	69d9      	ldr	r1, [r3, #28]
 8001d12:	0689      	lsls	r1, r1, #26
 8001d14:	d4fc      	bmi.n	8001d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001d16:	2110      	movs	r1, #16
 8001d18:	6099      	str	r1, [r3, #8]
            if (blend)
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d0be      	beq.n	8001c9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001d1e:	4a18      	ldr	r2, [pc, #96]	@ (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d26:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8001d28:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d2a:	8860      	ldrh	r0, [r4, #2]
 8001d2c:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8001d30:	bf18      	it	ne
 8001d32:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d34:	3801      	subs	r0, #1
 8001d36:	f021 0110 	bic.w	r1, r1, #16
 8001d3a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8001d3e:	f041 0110 	orr.w	r1, r1, #16
 8001d42:	61d9      	str	r1, [r3, #28]
                break;
 8001d44:	e7df      	b.n	8001d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d46:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8001d4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d4e:	61da      	str	r2, [r3, #28]
 8001d50:	e7b5      	b.n	8001cbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8001d52:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8001d56:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d58:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001d5c:	e7f7      	b.n	8001d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001d5e:	f242 3201 	movw	r2, #8961	@ 0x2301
 8001d62:	e7dd      	b.n	8001d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001d64:	52001000 	.word	0x52001000
 8001d68:	00012301 	.word	0x00012301
 8001d6c:	00020009 	.word	0x00020009
 8001d70:	0002000a 	.word	0x0002000a
 8001d74:	0802c572 	.word	0x0802c572
 8001d78:	0802c58c 	.word	0x0802c58c
 8001d7c:	0802c4c3 	.word	0x0802c4c3
 8001d80:	00022301 	.word	0x00022301

08001d84 <DMA2D_XferCpltCallback>:
 8001d84:	4b02      	ldr	r3, [pc, #8]	@ (8001d90 <DMA2D_XferCpltCallback+0xc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001d8a:	6803      	ldr	r3, [r0, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4718      	bx	r3
 8001d90:	24015dd4 	.word	0x24015dd4

08001d94 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <_ZN8STM32DMAC1Ev+0x30>)
 8001d9a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001d9c:	2600      	movs	r6, #0
 8001d9e:	4625      	mov	r5, r4
 8001da0:	2260      	movs	r2, #96	@ 0x60
 8001da2:	6060      	str	r0, [r4, #4]
 8001da4:	7226      	strb	r6, [r4, #8]
 8001da6:	7266      	strb	r6, [r4, #9]
 8001da8:	f845 3b20 	str.w	r3, [r5], #32
 8001dac:	4629      	mov	r1, r5
 8001dae:	f017 f9e3 	bl	8019178 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001db2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8001db6:	60ee      	str	r6, [r5, #12]
 8001db8:	3524      	adds	r5, #36	@ 0x24
 8001dba:	429d      	cmp	r5, r3
 8001dbc:	d1fb      	bne.n	8001db6 <_ZN8STM32DMAC1Ev+0x22>
}
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
 8001dc2:	bf00      	nop
 8001dc4:	0802c5d4 	.word	0x0802c5d4

08001dc8 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	07d2      	lsls	r2, r2, #31
 8001dce:	d4fc      	bmi.n	8001dca <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dd0:	2223      	movs	r2, #35	@ 0x23
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	52001000 	.word	0x52001000

08001ddc <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e0c <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8001dde:	6953      	ldr	r3, [r2, #20]
 8001de0:	03db      	lsls	r3, r3, #15
 8001de2:	d511      	bpl.n	8001e08 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001de4:	2900      	cmp	r1, #0
 8001de6:	dd0f      	ble.n	8001e08 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001de8:	f000 031f 	and.w	r3, r0, #31
 8001dec:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8001dee:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001df2:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001df4:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001df8:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8001dfa:	1a0b      	subs	r3, r1, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dcf9      	bgt.n	8001df4 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8001e00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e04:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8001e10:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001e12:	4c10      	ldr	r4, [pc, #64]	@ (8001e54 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8001e14:	6825      	ldr	r5, [r4, #0]
 8001e16:	07ed      	lsls	r5, r5, #31
 8001e18:	d4fc      	bmi.n	8001e14 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e1a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001e1c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001e1e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e20:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001e22:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001e26:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001e2a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001e2c:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001e2e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8001e30:	d00c      	beq.n	8001e4c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001e32:	4909      	ldr	r1, [pc, #36]	@ (8001e58 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8001e34:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001e38:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001e3a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001e3e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8001e42:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001e44:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001e46:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001e48:	6023      	str	r3, [r4, #0]
    }
}
 8001e4a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001e4c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8001e50:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001e52:	e7f9      	b.n	8001e48 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8001e54:	52001000 	.word	0x52001000
 8001e58:	00010009 	.word	0x00010009
 8001e5c:	00020001 	.word	0x00020001
 8001e60:	00030001 	.word	0x00030001

08001e64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8001e64:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001e66:	4c0e      	ldr	r4, [pc, #56]	@ (8001ea0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8001e68:	6825      	ldr	r5, [r4, #0]
 8001e6a:	07ed      	lsls	r5, r5, #31
 8001e6c:	d4fc      	bmi.n	8001e68 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e6e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001e70:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8001e72:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e74:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001e76:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001e7a:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001e7e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001e80:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001e82:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001e84:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8001e86:	d007      	beq.n	8001e98 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8001e8a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8001e8e:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001e90:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001e92:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001e94:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8001e96:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8001e9a:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001e9c:	6025      	str	r5, [r4, #0]
}
 8001e9e:	e7fa      	b.n	8001e96 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8001ea0:	52001000 	.word	0x52001000
 8001ea4:	00020001 	.word	0x00020001
 8001ea8:	ff020001 	.word	0xff020001

08001eac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8001eac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001eae:	4c0b      	ldr	r4, [pc, #44]	@ (8001edc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8001eb0:	6825      	ldr	r5, [r4, #0]
 8001eb2:	07ed      	lsls	r5, r5, #31
 8001eb4:	d4fc      	bmi.n	8001eb0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001eb6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001eb8:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001eba:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ebc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001ebe:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ec4:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001ec6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ec8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001eca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001ecc:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001ece:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ed2:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001ed4:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001ed6:	6023      	str	r3, [r4, #0]
}
 8001ed8:	bd30      	pop	{r4, r5, pc}
 8001eda:	bf00      	nop
 8001edc:	52001000 	.word	0x52001000
 8001ee0:	00020001 	.word	0x00020001

08001ee4 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8001ee4:	6940      	ldr	r0, [r0, #20]
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8001ee8:	f890 0044 	ldrb.w	r0, [r0, #68]	@ 0x44
 8001eec:	4770      	bx	lr

08001eee <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001eee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001ef0:	b923      	cbnz	r3, 8001efc <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 8001ef2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001ef4:	3800      	subs	r0, #0
 8001ef6:	bf18      	it	ne
 8001ef8:	2001      	movne	r0, #1
 8001efa:	4770      	bx	lr
 8001efc:	2001      	movs	r0, #1
}
 8001efe:	4770      	bx	lr

08001f00 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001f00:	6880      	ldr	r0, [r0, #8]
 8001f02:	4770      	bx	lr

08001f04 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8001f04:	3004      	adds	r0, #4
{
 8001f06:	b510      	push	{r4, lr}
 8001f08:	460c      	mov	r4, r1
    *data = videoInfo;
 8001f0a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 8001f10:	bd10      	pop	{r4, pc}

08001f12 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 8001f12:	4770      	bx	lr

08001f14 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001f14:	b508      	push	{r3, lr}
    assert(0);
 8001f16:	4a03      	ldr	r2, [pc, #12]	@ (8001f24 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001f18:	f240 2112 	movw	r1, #530	@ 0x212
 8001f1c:	4b02      	ldr	r3, [pc, #8]	@ (8001f28 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8001f1e:	4803      	ldr	r0, [pc, #12]	@ (8001f2c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8001f20:	f028 fe56 	bl	802abd0 <__assert_func>
 8001f24:	0802c61c 	.word	0x0802c61c
 8001f28:	0802e21b 	.word	0x0802e21b
 8001f2c:	0802c677 	.word	0x0802c677

08001f30 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4604      	mov	r4, r0
 8001f34:	2148      	movs	r1, #72	@ 0x48
 8001f36:	f028 fad3 	bl	802a4e0 <_ZdlPvj>
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	bd10      	pop	{r4, pc}

08001f3e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8001f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f42:	461e      	mov	r6, r3
 8001f44:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8001f48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8001f4a:	4607      	mov	r7, r0
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	4690      	mov	r8, r2
 8001f50:	9da6      	ldr	r5, [sp, #664]	@ 0x298
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8001f52:	b393      	cbz	r3, 8001fba <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x7c>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8001f54:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 8001f56:	a803      	add	r0, sp, #12
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8001f58:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8001f5c:	f00e ff54 	bl	8010e08 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8001f60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001f64:	2150      	movs	r1, #80	@ 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8001f66:	9024      	str	r0, [sp, #144]	@ 0x90
        jpeg_create_decompress(&cinfo);
 8001f68:	a824      	add	r0, sp, #144	@ 0x90
 8001f6a:	f008 ff1a 	bl	800ada2 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8001f6e:	4642      	mov	r2, r8
 8001f70:	4621      	mov	r1, r4
 8001f72:	a824      	add	r0, sp, #144	@ 0x90
 8001f74:	f009 fe6e 	bl	800bc54 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	a824      	add	r0, sp, #144	@ 0x90
 8001f7c:	f009 f80c 	bl	800af98 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8001f80:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8001f82:	a824      	add	r0, sp, #144	@ 0x90
        cinfo.dct_method = JDCT_FLOAT;
 8001f84:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
        jpeg_start_decompress(&cinfo);
 8001f88:	f009 f8a7 	bl	800b0da <jpeg_start_decompress>
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8001f8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001f8e:	f8bd 8294 	ldrh.w	r8, [sp, #660]	@ 0x294
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8001f92:	f8bd 2290 	ldrh.w	r2, [sp, #656]	@ 0x290
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8001f96:	4598      	cmp	r8, r3
 8001f98:	bf28      	it	cs
 8001f9a:	4698      	movcs	r8, r3
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8001f9c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	bf28      	it	cs
 8001fa2:	461a      	movcs	r2, r3
            memcpy(lineptr, lineBuffer, width * 3);
 8001fa4:	eb02 0442 	add.w	r4, r2, r2, lsl #1
        while (cinfo.output_scanline < height)
 8001fa8:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001faa:	4598      	cmp	r8, r3
 8001fac:	d809      	bhi.n	8001fc2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x84>
        jpeg_finish_decompress(&cinfo);
 8001fae:	a824      	add	r0, sp, #144	@ 0x90
 8001fb0:	f009 f814 	bl	800afdc <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8001fb4:	a824      	add	r0, sp, #144	@ 0x90
 8001fb6:	f008 ff41 	bl	800ae3c <jpeg_destroy_decompress>
}
 8001fba:	f50d 7d1e 	add.w	sp, sp, #632	@ 0x278
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	a901      	add	r1, sp, #4
 8001fc6:	a824      	add	r0, sp, #144	@ 0x90
 8001fc8:	f009 f8d0 	bl	800b16c <jpeg_read_scanlines>
            memcpy(lineptr, lineBuffer, width * 3);
 8001fcc:	4630      	mov	r0, r6
 8001fce:	4622      	mov	r2, r4
 8001fd0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
            lineptr += bufferStride; //move to next line
 8001fd2:	442e      	add	r6, r5
            memcpy(lineptr, lineBuffer, width * 3);
 8001fd4:	f029 f999 	bl	802b30a <memcpy>
            lineptr += bufferStride; //move to next line
 8001fd8:	e7e6      	b.n	8001fa8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x6a>
	...

08001fdc <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8001fde:	6002      	str	r2, [r0, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8001fe6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8001fea:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001fee:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8001ff2:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 8001ff6:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8001ffa:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
    videoInfo.frame_width = 0;
 8001ffe:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002002:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 8002006:	4770      	bx	lr
 8002008:	0802c970 	.word	0x0802c970

0800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 800200c:	b410      	push	{r4}
 800200e:	460c      	mov	r4, r1
 8002010:	4611      	mov	r1, r2
 8002012:	461a      	mov	r2, r3
    if (reader != 0)
 8002014:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002016:	b13b      	cbz	r3, 8002028 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002018:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800201a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800201c:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800201e:	4420      	add	r0, r4
}
 8002020:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002024:	f029 b898 	b.w	802b158 <strncmp>
        src = (const char*)movieData + offset;
 8002028:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800202a:	e7f8      	b.n	800201e <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

0800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800202c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800202e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002030:	b173      	cbz	r3, 8002050 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002032:	6c03      	ldr	r3, [r0, #64]	@ 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002034:	6b82      	ldr	r2, [r0, #56]	@ 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8002036:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002038:	1853      	adds	r3, r2, r1
 800203a:	5c52      	ldrb	r2, [r2, r1]
 800203c:	7898      	ldrb	r0, [r3, #2]
 800203e:	785c      	ldrb	r4, [r3, #1]
 8002040:	0400      	lsls	r0, r0, #16
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002048:	4310      	orrs	r0, r2
 800204a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800204e:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002050:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002052:	5858      	ldr	r0, [r3, r1]
 8002054:	e7fb      	b.n	800204e <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

08002056 <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002056:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002058:	b143      	cbz	r3, 800206c <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800205a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800205c:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800205e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002060:	185a      	adds	r2, r3, r1
 8002062:	5c58      	ldrb	r0, [r3, r1]
 8002064:	7852      	ldrb	r2, [r2, #1]
 8002066:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800206a:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 800206c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800206e:	5a58      	ldrh	r0, [r3, r1]
}
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	4604      	mov	r4, r0
    if (reader != 0)
 8002078:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800207a:	460d      	mov	r5, r1
 800207c:	4616      	mov	r6, r2
    if (reader != 0)
 800207e:	b1d8      	cbz	r0, 80020b8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002080:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002082:	4293      	cmp	r3, r2
 8002084:	d208      	bcs.n	8002098 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002086:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 800208a:	2165      	movs	r1, #101	@ 0x65
 800208c:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800208e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            assert(!"Buffer to small");
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 8002094:	f028 fd9c 	bl	802abd0 <__assert_func>
        reader->seek(offset);
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800209e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80020a0:	4632      	mov	r2, r6
 80020a2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4798      	blx	r3
 80020aa:	b910      	cbnz	r0, 80020b2 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80020ac:	230d      	movs	r3, #13
 80020ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        return aviBuffer;
 80020b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        aviBufferStartOffset = offset;
 80020b4:	6425      	str	r5, [r4, #64]	@ 0x40
}
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80020b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80020ba:	4408      	add	r0, r1
 80020bc:	e7fb      	b.n	80020b6 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 80020be:	bf00      	nop
 80020c0:	0802c6fb 	.word	0x0802c6fb
 80020c4:	0802c677 	.word	0x0802c677
 80020c8:	0802c6e8 	.word	0x0802c6e8

080020cc <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 80020cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80020d0:	6943      	ldr	r3, [r0, #20]
{
 80020d2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80020d4:	b92b      	cbnz	r3, 80020e2 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80020d6:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80020d8:	21aa      	movs	r1, #170	@ 0xaa
 80020da:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80020dc:	4823      	ldr	r0, [pc, #140]	@ (800216c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 80020de:	f028 fd77 	bl	802abd0 <__assert_func>
    readData(currentMovieOffset, 8);
 80020e2:	2208      	movs	r2, #8
 80020e4:	6981      	ldr	r1, [r0, #24]
 80020e6:	f7ff ffc5 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80020ea:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80020ec:	f243 0630 	movw	r6, #12336	@ 0x3030
 80020f0:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80020f4:	3104      	adds	r1, #4
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7ff ff98 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80020fc:	69a3      	ldr	r3, [r4, #24]
 80020fe:	4418      	add	r0, r3
 8002100:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002102:	f100 0208 	add.w	r2, r0, #8
 8002106:	429a      	cmp	r2, r3
 8002108:	d306      	bcc.n	8002118 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800210a:	2301      	movs	r3, #1
    return false;
 800210c:	2000      	movs	r0, #0
    frameNumber = 1;
 800210e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002110:	6a23      	ldr	r3, [r4, #32]
 8002112:	61a3      	str	r3, [r4, #24]
}
 8002114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002118:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800211a:	3009      	adds	r0, #9
        readData(currentMovieOffset, 8);
 800211c:	2208      	movs	r2, #8
        frameNumber++;
 800211e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002120:	f020 0101 	bic.w	r1, r0, #1
        readData(currentMovieOffset, 8);
 8002124:	4620      	mov	r0, r4
        frameNumber++;
 8002126:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002128:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800212a:	f7ff ffa3 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 800212e:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002132:	4620      	mov	r0, r4
 8002134:	4649      	mov	r1, r9
 8002136:	f7ff ff8e 	bl	8002056 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800213a:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo = getU16(currentMovieOffset);
 800213e:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff88 	bl	8002056 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002146:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800214a:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff ff6d 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002152:	45b0      	cmp	r8, r6
 8002154:	d1d2      	bne.n	80020fc <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002156:	42bd      	cmp	r5, r7
 8002158:	d1d0      	bne.n	80020fc <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800215a:	2800      	cmp	r0, #0
 800215c:	d0ce      	beq.n	80020fc <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800215e:	2001      	movs	r0, #1
 8002160:	e7d8      	b.n	8002114 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002162:	bf00      	nop
 8002164:	0802c73d 	.word	0x0802c73d
 8002168:	0802c786 	.word	0x0802c786
 800216c:	0802c677 	.word	0x0802c677

08002170 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	4605      	mov	r5, r0
 8002176:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
 800217a:	468b      	mov	fp, r1
 800217c:	4690      	mov	r8, r2
    readData(currentMovieOffset, 8);
 800217e:	6981      	ldr	r1, [r0, #24]
 8002180:	2208      	movs	r2, #8
{
 8002182:	461f      	mov	r7, r3
    readData(currentMovieOffset, 8);
 8002184:	f7ff ff76 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002188:	69ae      	ldr	r6, [r5, #24]
 800218a:	4628      	mov	r0, r5
 800218c:	1d31      	adds	r1, r6, #4
 800218e:	f7ff ff4d 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002192:	f106 0108 	add.w	r1, r6, #8
 8002196:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002198:	4604      	mov	r4, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800219a:	4628      	mov	r0, r5
 800219c:	f7ff ff6a 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80021a0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80021a2:	4606      	mov	r6, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80021a4:	b933      	cbnz	r3, 80021b4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x108>)
 80021a8:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80021ac:	4a33      	ldr	r2, [pc, #204]	@ (800227c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>)
 80021ae:	4834      	ldr	r0, [pc, #208]	@ (8002280 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>)
 80021b0:	f028 fd0e 	bl	802abd0 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80021b4:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80021b6:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80021b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 80021bc:	f00e fe24 	bl	8010e08 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 80021c0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80021c4:	2150      	movs	r1, #80	@ 0x50
    cinfo.err = jpeg_std_error(&jerr);
 80021c6:	9024      	str	r0, [sp, #144]	@ 0x90
    jpeg_create_decompress(&cinfo);
 80021c8:	a824      	add	r0, sp, #144	@ 0x90
 80021ca:	f008 fdea 	bl	800ada2 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80021ce:	4622      	mov	r2, r4
 80021d0:	4631      	mov	r1, r6
 80021d2:	a824      	add	r0, sp, #144	@ 0x90
 80021d4:	f009 fd3e 	bl	800bc54 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80021d8:	2101      	movs	r1, #1
 80021da:	a824      	add	r0, sp, #144	@ 0x90
 80021dc:	f008 fedc 	bl	800af98 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80021e0:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80021e2:	a824      	add	r0, sp, #144	@ 0x90
    cinfo.dct_method = JDCT_FLOAT;
 80021e4:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
    jpeg_start_decompress(&cinfo);
 80021e8:	f008 ff77 	bl	800b0da <jpeg_start_decompress>
    const uint32_t startY = area.y;
 80021ec:	f9bb a002 	ldrsh.w	sl, [fp, #2]
    while (cinfo.output_scanline < startY)
 80021f0:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80021f2:	4553      	cmp	r3, sl
 80021f4:	d32d      	bcc.n	8002252 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe2>
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 80021f6:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80021fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80021fe:	f8bb 6002 	ldrh.w	r6, [fp, #2]
    const uint32_t startX = area.x;
 8002202:	f9bb 4000 	ldrsh.w	r4, [fp]
 8002206:	441e      	add	r6, r3
        return x + width;
 8002208:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 800220c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
        memcpy(lineptr + startX * 3, lineBuffer + startX * 3, (endX - startX) * 3);
 800220e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 8002212:	b236      	sxth	r6, r6
 8002214:	4422      	add	r2, r4
 8002216:	fb07 9a0a 	mla	sl, r7, sl, r9
 800221a:	429e      	cmp	r6, r3
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 800221c:	b212      	sxth	r2, r2
 800221e:	44d0      	add	r8, sl
 8002220:	bf28      	it	cs
 8002222:	461e      	movcs	r6, r3
        memcpy(lineptr + startX * 3, lineBuffer + startX * 3, (endX - startX) * 3);
 8002224:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8002226:	429a      	cmp	r2, r3
 8002228:	bf94      	ite	ls
 800222a:	ebc4 0402 	rsbls	r4, r4, r2
 800222e:	ebc4 0403 	rsbhi	r4, r4, r3
 8002232:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    while (cinfo.output_scanline < endY)
 8002236:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8002238:	42b3      	cmp	r3, r6
 800223a:	d310      	bcc.n	800225e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xee>
    jpeg_finish_decompress(&cinfo);
 800223c:	a824      	add	r0, sp, #144	@ 0x90
 800223e:	f008 fecd 	bl	800afdc <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 8002242:	a824      	add	r0, sp, #144	@ 0x90
 8002244:	f008 fdfa 	bl	800ae3c <jpeg_destroy_decompress>
}
 8002248:	2001      	movs	r0, #1
 800224a:	f50d 7d1f 	add.w	sp, sp, #636	@ 0x27c
 800224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002252:	2201      	movs	r2, #1
 8002254:	a901      	add	r1, sp, #4
 8002256:	a824      	add	r0, sp, #144	@ 0x90
 8002258:	f008 ff88 	bl	800b16c <jpeg_read_scanlines>
 800225c:	e7c8      	b.n	80021f0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800225e:	2201      	movs	r2, #1
 8002260:	a901      	add	r1, sp, #4
 8002262:	a824      	add	r0, sp, #144	@ 0x90
 8002264:	f008 ff82 	bl	800b16c <jpeg_read_scanlines>
        memcpy(lineptr + startX * 3, lineBuffer + startX * 3, (endX - startX) * 3);
 8002268:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800226a:	4640      	mov	r0, r8
 800226c:	4622      	mov	r2, r4
 800226e:	4449      	add	r1, r9
 8002270:	44b8      	add	r8, r7
 8002272:	f029 f84a 	bl	802b30a <memcpy>
        lineptr += framebuffer_width * 3; //move to next line
 8002276:	e7de      	b.n	8002236 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xc6>
 8002278:	0802c7b9 	.word	0x0802c7b9
 800227c:	0802c80f 	.word	0x0802c80f
 8002280:	0802c677 	.word	0x0802c677

08002284 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002284:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002286:	6803      	ldr	r3, [r0, #0]
 8002288:	bf38      	it	cc
 800228a:	2101      	movcc	r1, #1
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 800228e:	b570      	push	{r4, r5, r6, lr}
 8002290:	460d      	mov	r5, r1
 8002292:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002294:	4798      	blx	r3
 8002296:	42a8      	cmp	r0, r5
 8002298:	d204      	bcs.n	80022a4 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	4620      	mov	r0, r4
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	4798      	blx	r3
 80022a2:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022a4:	1e6b      	subs	r3, r5, #1
 80022a6:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80022a8:	2210      	movs	r2, #16
 80022aa:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022ac:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80022b0:	f106 0108 	add.w	r1, r6, #8
 80022b4:	f7ff fede 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80022b8:	f106 0110 	add.w	r1, r6, #16
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff feb5 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80022c2:	6a23      	ldr	r3, [r4, #32]
 80022c4:	3b04      	subs	r3, #4
 80022c6:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80022c8:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080022d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022d0:	2100      	movs	r1, #0
    readData(0, 72);
 80022d2:	2248      	movs	r2, #72	@ 0x48
{
 80022d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d8:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022da:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022dc:	f880 1044 	strb.w	r1, [r0, #68]	@ 0x44
    readData(0, 72);
 80022e0:	f7ff fec8 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022e4:	69a6      	ldr	r6, [r4, #24]
 80022e6:	2304      	movs	r3, #4
 80022e8:	4a62      	ldr	r2, [pc, #392]	@ (8002474 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a4>)
 80022ea:	4631      	mov	r1, r6
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff fe8d 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80022f2:	b140      	cbz	r0, 8002306 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 80022f4:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022f6:	4a60      	ldr	r2, [pc, #384]	@ (8002478 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022f8:	21f2      	movs	r1, #242	@ 0xf2
        lastError = AVI_ERROR_NOT_RIFF;
 80022fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        assert(!"RIFF header not found");
 80022fe:	4b5f      	ldr	r3, [pc, #380]	@ (800247c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
        assert(!"AVI header not found");
 8002300:	485f      	ldr	r0, [pc, #380]	@ (8002480 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8002302:	f028 fc65 	bl	802abd0 <__assert_func>
    currentMovieOffset += 8;
 8002306:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800230a:	2304      	movs	r3, #4
 800230c:	4a5d      	ldr	r2, [pc, #372]	@ (8002484 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800230e:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002310:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002312:	f7ff fe7b 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002316:	b130      	cbz	r0, 8002326 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002318:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800231a:	4a57      	ldr	r2, [pc, #348]	@ (8002478 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800231c:	21fa      	movs	r1, #250	@ 0xfa
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800231e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        assert(!"AVI header not found");
 8002322:	4b59      	ldr	r3, [pc, #356]	@ (8002488 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002324:	e7ec      	b.n	8002300 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002326:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800232a:	2304      	movs	r3, #4
 800232c:	4a57      	ldr	r2, [pc, #348]	@ (800248c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800232e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002330:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002332:	f7ff fe6b 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002336:	4607      	mov	r7, r0
 8002338:	b138      	cbz	r0, 800234a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800233a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 800233c:	4a4e      	ldr	r2, [pc, #312]	@ (8002478 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800233e:	f240 1101 	movw	r1, #257	@ 0x101
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002342:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        assert(!"AVI LIST not found");
 8002346:	4b52      	ldr	r3, [pc, #328]	@ (8002490 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002348:	e7da      	b.n	8002300 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800234a:	f106 0110 	add.w	r1, r6, #16
 800234e:	4620      	mov	r0, r4
 8002350:	f7ff fe6c 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002354:	4605      	mov	r5, r0
 8002356:	b920      	cbnz	r0, 8002362 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002358:	4b4e      	ldr	r3, [pc, #312]	@ (8002494 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 800235a:	f240 1107 	movw	r1, #263	@ 0x107
 800235e:	4a46      	ldr	r2, [pc, #280]	@ (8002478 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002360:	e7ce      	b.n	8002300 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 8002362:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002366:	2304      	movs	r3, #4
 8002368:	4a4b      	ldr	r2, [pc, #300]	@ (8002498 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800236a:	4620      	mov	r0, r4
 800236c:	4641      	mov	r1, r8
 800236e:	f7ff fe4d 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002372:	2800      	cmp	r0, #0
 8002374:	d049      	beq.n	800240a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002376:	2306      	movs	r3, #6
 8002378:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    if (compare(offset, "avih", 4))
 800237c:	2304      	movs	r3, #4
 800237e:	4a47      	ldr	r2, [pc, #284]	@ (800249c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002380:	f106 0118 	add.w	r1, r6, #24
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff fe41 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800238a:	2800      	cmp	r0, #0
 800238c:	d03f      	beq.n	800240e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800238e:	2307      	movs	r3, #7
 8002390:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002394:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002396:	4f42      	ldr	r7, [pc, #264]	@ (80024a0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
    readData(listOffset, 12);
 8002398:	220c      	movs	r2, #12
 800239a:	4620      	mov	r0, r4
 800239c:	4629      	mov	r1, r5
 800239e:	f7ff fe69 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80023a2:	f105 0608 	add.w	r6, r5, #8
 80023a6:	2304      	movs	r3, #4
 80023a8:	463a      	mov	r2, r7
 80023aa:	4620      	mov	r0, r4
 80023ac:	4631      	mov	r1, r6
 80023ae:	f7ff fe2d 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80023b2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d048      	beq.n	800244c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x17c>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d148      	bne.n	8002450 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80023be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	d849      	bhi.n	8002458 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x188>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80023c4:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023c8:	3504      	adds	r5, #4
 80023ca:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80023cc:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7ff fe2c 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80023d4:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023d6:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023d8:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fe26 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023e0:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023e2:	2204      	movs	r2, #4
 80023e4:	4620      	mov	r0, r4
 80023e6:	4631      	mov	r1, r6
 80023e8:	f7ff fe44 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023ec:	2304      	movs	r3, #4
 80023ee:	4a2d      	ldr	r2, [pc, #180]	@ (80024a4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 80023f0:	4631      	mov	r1, r6
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff fe0a 	bl	800200c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d138      	bne.n	800246e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x19e>
    frameNumber = 1; //next frame number is 1
 80023fc:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023fe:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8002400:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002402:	69a3      	ldr	r3, [r4, #24]
 8002404:	6223      	str	r3, [r4, #32]
}
 8002406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800240a:	2701      	movs	r7, #1
 800240c:	e7b6      	b.n	800237c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 800240e:	2f00      	cmp	r7, #0
 8002410:	d0c0      	beq.n	8002394 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002412:	f106 0120 	add.w	r1, r6, #32
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff fe08 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800241c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002420:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002424:	fbb0 f0f3 	udiv	r0, r0, r3
 8002428:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff fdfe 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002430:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002434:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff fdf8 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800243c:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002440:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fdf2 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002448:	6120      	str	r0, [r4, #16]
 800244a:	e7a3      	b.n	8002394 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0b9      	beq.n	80023c4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf4>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002450:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002452:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        return;
 8002456:	e7d6      	b.n	8002406 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x136>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002458:	1d29      	adds	r1, r5, #4
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff fde6 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002460:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 8002462:	220c      	movs	r2, #12
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7ff fe04 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
 800246c:	e799      	b.n	80023a2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800246e:	230b      	movs	r3, #11
 8002470:	e7ef      	b.n	8002452 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x182>
 8002472:	bf00      	nop
 8002474:	0802c869 	.word	0x0802c869
 8002478:	0802c887 	.word	0x0802c887
 800247c:	0802c86e 	.word	0x0802c86e
 8002480:	0802c677 	.word	0x0802c677
 8002484:	0802c8b4 	.word	0x0802c8b4
 8002488:	0802c8b9 	.word	0x0802c8b9
 800248c:	0802c8d1 	.word	0x0802c8d1
 8002490:	0802c8d6 	.word	0x0802c8d6
 8002494:	0802c8ec 	.word	0x0802c8ec
 8002498:	0802c8f8 	.word	0x0802c8f8
 800249c:	0802c8fd 	.word	0x0802c8fd
 80024a0:	0802c902 	.word	0x0802c902
 80024a4:	0802c907 	.word	0x0802c907

080024a8 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80024a8:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; //not using reader
 80024ac:	2200      	movs	r2, #0
 80024ae:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80024b0:	f7ff bf0e 	b.w	80022d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080024b4 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80024b4:	b510      	push	{r4, lr}
    movieData = 0;
 80024b6:	2300      	movs	r3, #0
{
 80024b8:	4604      	mov	r4, r0
 80024ba:	4608      	mov	r0, r1
    movieData = 0;
 80024bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80024be:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80024c0:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4798      	blx	r3
 80024c6:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024c8:	4620      	mov	r0, r4
}
 80024ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024ce:	f7ff beff 	b.w	80022d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080024d2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80024d2:	b4f0      	push	{r4, r5, r6, r7}
 80024d4:	9f06      	ldr	r7, [sp, #24]
 80024d6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80024da:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 80024de:	b132      	cbz	r2, 80024ee <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x1c>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80024e0:	b12b      	cbz	r3, 80024ee <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x1c>
 80024e2:	9504      	str	r5, [sp, #16]
 80024e4:	e9cd 6705 	strd	r6, r7, [sp, #20]
}
 80024e8:	bcf0      	pop	{r4, r5, r6, r7}
 80024ea:	f7ff bd28 	b.w	8001f3e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 80024ee:	bcf0      	pop	{r4, r5, r6, r7}
 80024f0:	4770      	bx	lr
	...

080024f4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f8:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80024fa:	6943      	ldr	r3, [r0, #20]
{
 80024fc:	b085      	sub	sp, #20
 80024fe:	4604      	mov	r4, r0
 8002500:	460f      	mov	r7, r1
 8002502:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002504:	b92b      	cbnz	r3, 8002512 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002508:	2177      	movs	r1, #119	@ 0x77
 800250a:	4a29      	ldr	r2, [pc, #164]	@ (80025b0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 800250c:	4829      	ldr	r0, [pc, #164]	@ (80025b4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 800250e:	f028 fb5f 	bl	802abd0 <__assert_func>
    readData(currentMovieOffset, 8);
 8002512:	2208      	movs	r2, #8
 8002514:	6981      	ldr	r1, [r0, #24]
 8002516:	f7ff fdad 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 800251a:	69a6      	ldr	r6, [r4, #24]
 800251c:	4620      	mov	r0, r4
 800251e:	4631      	mov	r1, r6
 8002520:	f7ff fd99 	bl	8002056 <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002524:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo = getU16(currentMovieOffset);
 8002526:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002528:	4620      	mov	r0, r4
 800252a:	f7ff fd94 	bl	8002056 <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800252e:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002530:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff fd7a 	bl	800202c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002538:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800253c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800253e:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002540:	1842      	adds	r2, r0, r1
 8002542:	429a      	cmp	r2, r3
 8002544:	d226      	bcs.n	8002594 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002546:	f243 0330 	movw	r3, #12336	@ 0x3030
 800254a:	459b      	cmp	fp, r3
 800254c:	d117      	bne.n	800257e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800254e:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002552:	459a      	cmp	sl, r3
 8002554:	d113      	bne.n	800257e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002556:	b190      	cbz	r0, 800257e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002558:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 800255a:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fd89 	bl	8002074 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002564:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002566:	462a      	mov	r2, r5
 8002568:	4620      	mov	r0, r4
 800256a:	f8cd 8000 	str.w	r8, [sp]
 800256e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002572:	463b      	mov	r3, r7
 8002574:	f7ff ffad 	bl	80024d2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002578:	6963      	ldr	r3, [r4, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800257e:	69a3      	ldr	r3, [r4, #24]
 8002580:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8002582:	b905      	cbnz	r5, 8002586 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002584:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002586:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002588:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800258a:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800258e:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002590:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002592:	d109      	bne.n	80025a8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002594:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002596:	2001      	movs	r0, #1
        frameNumber = 1;
 8002598:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 800259a:	6a23      	ldr	r3, [r4, #32]
 800259c:	61a3      	str	r3, [r4, #24]
}
 800259e:	f080 0001 	eor.w	r0, r0, #1
 80025a2:	b005      	add	sp, #20
 80025a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 80025a8:	2000      	movs	r0, #0
 80025aa:	e7f8      	b.n	800259e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80025ac:	0802c73d 	.word	0x0802c73d
 80025b0:	0802c90c 	.word	0x0802c90c
 80025b4:	0802c677 	.word	0x0802c677

080025b8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80025b8:	2001      	movs	r0, #1
 80025ba:	4770      	bx	lr

080025bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80025bc:	200c      	movs	r0, #12
 80025be:	4770      	bx	lr

080025c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80025c0:	230c      	movs	r3, #12
 80025c2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025c6:	3008      	adds	r0, #8
 80025c8:	4770      	bx	lr

080025ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80025ca:	230c      	movs	r3, #12
 80025cc:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025d0:	3008      	adds	r0, #8
 80025d2:	4770      	bx	lr

080025d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80025d4:	2001      	movs	r0, #1
 80025d6:	4770      	bx	lr

080025d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80025d8:	20dc      	movs	r0, #220	@ 0xdc
 80025da:	4770      	bx	lr

080025dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025dc:	23dc      	movs	r3, #220	@ 0xdc
 80025de:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025e2:	3008      	adds	r0, #8
 80025e4:	4770      	bx	lr

080025e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025e6:	23dc      	movs	r3, #220	@ 0xdc
 80025e8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025ec:	3008      	adds	r0, #8
 80025ee:	4770      	bx	lr

080025f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80025f0:	2001      	movs	r0, #1
 80025f2:	4770      	bx	lr

080025f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80025f4:	2010      	movs	r0, #16
 80025f6:	4770      	bx	lr

080025f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025f8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80025fc:	3008      	adds	r0, #8
 80025fe:	4770      	bx	lr

08002600 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002600:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002604:	3008      	adds	r0, #8
 8002606:	4770      	bx	lr

08002608 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002608:	4608      	mov	r0, r1
 800260a:	f000 bf83 	b.w	8003514 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08002610 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002612:	b510      	push	{r4, lr}
 8002614:	4604      	mov	r4, r0
 8002616:	6003      	str	r3, [r0, #0]
 8002618:	f015 fc00 	bl	8017e1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800261c:	4620      	mov	r0, r4
 800261e:	bd10      	pop	{r4, pc}
 8002620:	0802ca18 	.word	0x0802ca18

08002624 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002624:	b510      	push	{r4, lr}
 8002626:	4604      	mov	r4, r0
 8002628:	f7ff fff2 	bl	8002610 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800262c:	2114      	movs	r1, #20
 800262e:	4620      	mov	r0, r4
 8002630:	f027 ff56 	bl	802a4e0 <_ZdlPvj>
 8002634:	4620      	mov	r0, r4
 8002636:	bd10      	pop	{r4, pc}

08002638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800263a:	b510      	push	{r4, lr}
 800263c:	4604      	mov	r4, r0
 800263e:	6003      	str	r3, [r0, #0]
 8002640:	f015 fbec 	bl	8017e1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002644:	4620      	mov	r0, r4
 8002646:	bd10      	pop	{r4, pc}
 8002648:	0802c9e4 	.word	0x0802c9e4

0800264c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800264c:	b510      	push	{r4, lr}
 800264e:	4604      	mov	r4, r0
 8002650:	f7ff fff2 	bl	8002638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002654:	21e4      	movs	r1, #228	@ 0xe4
 8002656:	4620      	mov	r0, r4
 8002658:	f027 ff42 	bl	802a4e0 <_ZdlPvj>
 800265c:	4620      	mov	r0, r4
 800265e:	bd10      	pop	{r4, pc}

08002660 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002662:	b510      	push	{r4, lr}
 8002664:	4604      	mov	r4, r0
 8002666:	6003      	str	r3, [r0, #0]
 8002668:	f015 fbd8 	bl	8017e1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800266c:	4620      	mov	r0, r4
 800266e:	bd10      	pop	{r4, pc}
 8002670:	0802c9b0 	.word	0x0802c9b0

08002674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002674:	b510      	push	{r4, lr}
 8002676:	4604      	mov	r4, r0
 8002678:	f7ff fff2 	bl	8002660 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800267c:	2118      	movs	r1, #24
 800267e:	4620      	mov	r0, r4
 8002680:	f027 ff2e 	bl	802a4e0 <_ZdlPvj>
 8002684:	4620      	mov	r0, r4
 8002686:	bd10      	pop	{r4, pc}

08002688 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <_ZN12FrontendHeapD1Ev+0x24>)
 800268a:	b510      	push	{r4, lr}
 800268c:	4604      	mov	r4, r0
 800268e:	6003      	str	r3, [r0, #0]
 8002690:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8002694:	f7ff ffbc 	bl	8002610 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002698:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800269c:	f7ff ffcc 	bl	8002638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026a0:	f104 0014 	add.w	r0, r4, #20
 80026a4:	f7ff ffdc 	bl	8002660 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026a8:	4620      	mov	r0, r4
 80026aa:	bd10      	pop	{r4, pc}
 80026ac:	0802ca4c 	.word	0x0802ca4c

080026b0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80026b0:	b508      	push	{r3, lr}
 80026b2:	4802      	ldr	r0, [pc, #8]	@ (80026bc <__tcf_0+0xc>)
 80026b4:	f7ff ffe8 	bl	8002688 <_ZN12FrontendHeapD1Ev>
 80026b8:	bd08      	pop	{r3, pc}
 80026ba:	bf00      	nop
 80026bc:	2400145c 	.word	0x2400145c

080026c0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80026c0:	b510      	push	{r4, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	f7ff ffe0 	bl	8002688 <_ZN12FrontendHeapD1Ev>
 80026c8:	f44f 7121 	mov.w	r1, #644	@ 0x284
 80026cc:	4620      	mov	r0, r4
 80026ce:	f027 ff07 	bl	802a4e0 <_ZdlPvj>
 80026d2:	4620      	mov	r0, r4
 80026d4:	bd10      	pop	{r4, pc}
	...

080026d8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80026d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80026dc:	f000 fcfa 	bl	80030d4 <_ZN14BitmapDatabase11getInstanceEv>
 80026e0:	2400      	movs	r4, #0
 80026e2:	4605      	mov	r5, r0
 80026e4:	f000 fcfa 	bl	80030dc <_ZN14BitmapDatabase15getInstanceSizeEv>
 80026e8:	4623      	mov	r3, r4
 80026ea:	4601      	mov	r1, r0
 80026ec:	4622      	mov	r2, r4
 80026ee:	4628      	mov	r0, r5
 80026f0:	9400      	str	r4, [sp, #0]
 80026f2:	f01d f8ff 	bl	801f8f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <touchgfx_init+0xbc>)
 80026f8:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80026fa:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80026fc:	4d27      	ldr	r5, [pc, #156]	@ (800279c <touchgfx_init+0xc4>)
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f001 fa48 	bl	8003b94 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8002704:	4b26      	ldr	r3, [pc, #152]	@ (80027a0 <touchgfx_init+0xc8>)
 8002706:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8002708:	4827      	ldr	r0, [pc, #156]	@ (80027a8 <touchgfx_init+0xd0>)
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	f01c ff9e 	bl	801f64c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	f3bf 8f5b 	dmb	ish
 8002716:	07db      	lsls	r3, r3, #31
 8002718:	d435      	bmi.n	8002786 <touchgfx_init+0xae>
 800271a:	4628      	mov	r0, r5
 800271c:	f027 fee2 	bl	802a4e4 <__cxa_guard_acquire>
 8002720:	b388      	cbz	r0, 8002786 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002722:	4c22      	ldr	r4, [pc, #136]	@ (80027ac <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002724:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002726:	f504 7694 	add.w	r6, r4, #296	@ 0x128
        : presenterStorage(pres),
 800272a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800272e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8002732:	f504 7788 	add.w	r7, r4, #272	@ 0x110
 8002736:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8002738:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800273a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800273e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002740:	6126      	str	r6, [r4, #16]
 8002742:	f015 fb6d 	bl	8017e20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002746:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <touchgfx_init+0xdc>)
 8002748:	4640      	mov	r0, r8
 800274a:	6163      	str	r3, [r4, #20]
 800274c:	f015 fb68 	bl	8017e20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002750:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <touchgfx_init+0xe0>)
 8002752:	4638      	mov	r0, r7
 8002754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002756:	f015 fb63 	bl	8017e20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <touchgfx_init+0xe4>)
 800275c:	f504 7092 	add.w	r0, r4, #292	@ 0x124
 8002760:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 8002764:	f001 fa8c 	bl	8003c80 <_ZN5ModelC1Ev>
 8002768:	4622      	mov	r2, r4
 800276a:	f504 7192 	add.w	r1, r4, #292	@ 0x124
 800276e:	4630      	mov	r0, r6
 8002770:	f001 fa7c 	bl	8003c6c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002774:	4630      	mov	r0, r6
 8002776:	f000 fecd 	bl	8003514 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800277a:	4811      	ldr	r0, [pc, #68]	@ (80027c0 <touchgfx_init+0xe8>)
 800277c:	f028 fa46 	bl	802ac0c <atexit>
 8002780:	4628      	mov	r0, r5
 8002782:	f027 febb 	bl	802a4fc <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002786:	480f      	ldr	r0, [pc, #60]	@ (80027c4 <touchgfx_init+0xec>)
}
 8002788:	b002      	add	sp, #8
 800278a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800278e:	f7ff b821 	b.w	80017d4 <_ZN11TouchGFXHAL10initializeEv>
 8002792:	bf00      	nop
 8002794:	24015e38 	.word	0x24015e38
 8002798:	24000628 	.word	0x24000628
 800279c:	24001458 	.word	0x24001458
 80027a0:	24000648 	.word	0x24000648
 80027a4:	2400062c 	.word	0x2400062c
 80027a8:	24000008 	.word	0x24000008
 80027ac:	2400145c 	.word	0x2400145c
 80027b0:	0802ca4c 	.word	0x0802ca4c
 80027b4:	0802c9b0 	.word	0x0802c9b0
 80027b8:	0802c9e4 	.word	0x0802c9e4
 80027bc:	0802ca18 	.word	0x0802ca18
 80027c0:	080026b1 	.word	0x080026b1
 80027c4:	240005a0 	.word	0x240005a0

080027c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80027c8:	4770      	bx	lr
	...

080027cc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80027cc:	4801      	ldr	r0, [pc, #4]	@ (80027d4 <touchgfx_taskEntry+0x8>)
 80027ce:	f7ff b817 	b.w	8001800 <_ZN11TouchGFXHAL9taskEntryEv>
 80027d2:	bf00      	nop
 80027d4:	240005a0 	.word	0x240005a0

080027d8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80027d8:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 80027da:	4e27      	ldr	r6, [pc, #156]	@ (8002878 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 80027de:	4c28      	ldr	r4, [pc, #160]	@ (8002880 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 80027e0:	4630      	mov	r0, r6
static LCD24bpp display;
 80027e2:	4d28      	ldr	r5, [pc, #160]	@ (8002884 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 80027e4:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 80027e6:	f7ff fad5 	bl	8001d94 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80027ea:	4628      	mov	r0, r5
 80027ec:	f020 feec 	bl	80235c8 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80027f0:	4825      	ldr	r0, [pc, #148]	@ (8002888 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 80027f2:	f01b f961 	bl	801dab8 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
        : dma(dmaInterface),
 80027f6:	4b25      	ldr	r3, [pc, #148]	@ (800288c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          mcuInstrumentation(0),
 80027f8:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80027fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80027fe:	4824      	ldr	r0, [pc, #144]	@ (8002890 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002800:	861a      	strh	r2, [r3, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8002802:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          lastY(0),
 8002806:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 8002808:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          touchController(touchCtrl),
 800280c:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 800280e:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 8002812:	4920      	ldr	r1, [pc, #128]	@ (8002894 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          vSyncCompensationEnabled(false),
 8002814:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
        instance = this;
 8002818:	491f      	ldr	r1, [pc, #124]	@ (8002898 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 800281a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800281c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002820:	8001      	strh	r1, [r0, #0]
 8002822:	481e      	ldr	r0, [pc, #120]	@ (800289c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 8002824:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002826:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800282a:	481d      	ldr	r0, [pc, #116]	@ (80028a0 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 800282c:	8001      	strh	r1, [r0, #0]
 800282e:	481d      	ldr	r0, [pc, #116]	@ (80028a4 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8002830:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002832:	491d      	ldr	r1, [pc, #116]	@ (80028a8 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
          buttonController(0),
 8002834:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002838:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800283c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002840:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8002844:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8002848:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
        : x(0), y(0), width(0), height(0)
 800284c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8002850:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lcdRef(display),
 8002854:	e9c3 6501 	strd	r6, r5, [r3, #4]
        DISPLAY_ROTATION = rotate0;
 8002858:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800285a:	4914      	ldr	r1, [pc, #80]	@ (80028ac <_GLOBAL__sub_I_touchgfx_init+0xd4>)
        : cc_consumed(0),
 800285c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002864:	6019      	str	r1, [r3, #0]
          cc_begin(0),
 8002866:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002868:	4911      	ldr	r1, [pc, #68]	@ (80028b0 <_GLOBAL__sub_I_touchgfx_init+0xd8>)
          cc_in(0)
 800286a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800286e:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <_GLOBAL__sub_I_touchgfx_init+0xdc>)
 8002870:	6799      	str	r1, [r3, #120]	@ 0x78
 8002872:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002874:	bd70      	pop	{r4, r5, r6, pc}
 8002876:	bf00      	nop
 8002878:	240006b4 	.word	0x240006b4
 800287c:	0802c0e0 	.word	0x0802c0e0
 8002880:	24001454 	.word	0x24001454
 8002884:	24000648 	.word	0x24000648
 8002888:	2400062c 	.word	0x2400062c
 800288c:	240005a0 	.word	0x240005a0
 8002890:	24015dc8 	.word	0x24015dc8
 8002894:	01000001 	.word	0x01000001
 8002898:	24015dd4 	.word	0x24015dd4
 800289c:	24015dce 	.word	0x24015dce
 80028a0:	24015dca 	.word	0x24015dca
 80028a4:	24015dd0 	.word	0x24015dd0
 80028a8:	24015dcc 	.word	0x24015dcc
 80028ac:	0802c26c 	.word	0x0802c26c
 80028b0:	01010000 	.word	0x01010000
 80028b4:	0802c0b8 	.word	0x0802c0b8

080028b8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80028b8:	4801      	ldr	r0, [pc, #4]	@ (80028c0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80028ba:	f7ff b8f9 	b.w	8001ab0 <_ZN8STM32DMAD1Ev>
 80028be:	bf00      	nop
 80028c0:	240006b4 	.word	0x240006b4

080028c4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80028c4:	2000      	movs	r0, #0
 80028c6:	4770      	bx	lr

080028c8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80028c8:	8081      	strh	r1, [r0, #4]
    }
 80028ca:	4770      	bx	lr

080028cc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80028cc:	80c1      	strh	r1, [r0, #6]
    }
 80028ce:	4770      	bx	lr

080028d0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80028d0:	8101      	strh	r1, [r0, #8]
    }
 80028d2:	4770      	bx	lr

080028d4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80028d4:	8141      	strh	r1, [r0, #10]
    }
 80028d6:	4770      	bx	lr

080028d8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80028d8:	4770      	bx	lr

080028da <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80028da:	4770      	bx	lr

080028dc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80028dc:	4770      	bx	lr

080028de <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80028de:	4770      	bx	lr

080028e0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80028e0:	4770      	bx	lr

080028e2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80028e2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80028e4:	88c4      	ldrh	r4, [r0, #6]
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	1b12      	subs	r2, r2, r4
 80028ea:	8884      	ldrh	r4, [r0, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	1b09      	subs	r1, r1, r4
 80028f0:	b212      	sxth	r2, r2
    }
 80028f2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80028f6:	b209      	sxth	r1, r1
 80028f8:	4718      	bx	r3

080028fa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80028fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028fe:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800290a:	6010      	str	r0, [r2, #0]
    }
 800290c:	4770      	bx	lr

0800290e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800290e:	2000      	movs	r0, #0
 8002910:	4770      	bx	lr

08002912 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002912:	888b      	ldrh	r3, [r1, #4]
 8002914:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002916:	2001      	movs	r0, #1
 8002918:	4770      	bx	lr

0800291a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800291a:	4770      	bx	lr

0800291c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800291c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8002920:	4770      	bx	lr

08002922 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002922:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8002926:	4770      	bx	lr

08002928 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002928:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800292a:	b510      	push	{r4, lr}
        return rect.width;
 800292c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002930:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002934:	8002      	strh	r2, [r0, #0]
 8002936:	8042      	strh	r2, [r0, #2]
 8002938:	8084      	strh	r4, [r0, #4]
 800293a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800293c:	bd10      	pop	{r4, pc}

0800293e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800293e:	2200      	movs	r2, #0
 8002940:	8002      	strh	r2, [r0, #0]
 8002942:	8042      	strh	r2, [r0, #2]
 8002944:	8082      	strh	r2, [r0, #4]
 8002946:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002948:	4770      	bx	lr

0800294a <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800294a:	7701      	strb	r1, [r0, #28]
    }
 800294c:	4770      	bx	lr

0800294e <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800294e:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8002952:	4770      	bx	lr

08002954 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8002954:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8002958:	4770      	bx	lr

0800295a <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800295a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 800295e:	4770      	bx	lr

08002960 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8002960:	2001      	movs	r0, #1
 8002962:	4770      	bx	lr

08002964 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8002964:	3098      	adds	r0, #152	@ 0x98
 8002966:	4770      	bx	lr

08002968 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8002968:	308c      	adds	r0, #140	@ 0x8c
 800296a:	4770      	bx	lr

0800296c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 800296c:	3084      	adds	r0, #132	@ 0x84
 800296e:	4770      	bx	lr

08002970 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8002970:	4770      	bx	lr
	...

08002974 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002976:	2290      	movs	r2, #144	@ 0x90
 8002978:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800297c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e100 	.word	0xe000e100

08002988 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002988:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800298a:	490a      	ldr	r1, [pc, #40]	@ (80029b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800298c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800298e:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002994:	3b01      	subs	r3, #1
 8002996:	b29b      	uxth	r3, r3
 8002998:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800299a:	6911      	ldr	r1, [r2, #16]
 800299c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80029a0:	3901      	subs	r1, #1
 80029a2:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80029a6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80029ae:	4770      	bx	lr
 80029b0:	50001000 	.word	0x50001000
 80029b4:	240016e2 	.word	0x240016e2
 80029b8:	240016e0 	.word	0x240016e0

080029bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80029bc:	4b01      	ldr	r3, [pc, #4]	@ (80029c4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80029be:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 80029c2:	4770      	bx	lr
 80029c4:	50001000 	.word	0x50001000

080029c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80029c8:	4b02      	ldr	r3, [pc, #8]	@ (80029d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80029ca:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80029cc:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80029d2:	4770      	bx	lr
 80029d4:	50001000 	.word	0x50001000

080029d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80029d8:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80029da:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80029de:	4770      	bx	lr

080029e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80029e0:	4770      	bx	lr

080029e2 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80029e2:	4770      	bx	lr

080029e4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80029e4:	4770      	bx	lr

080029e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80029e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80029ea:	4611      	mov	r1, r2
 80029ec:	6840      	ldr	r0, [r0, #4]
 80029ee:	6803      	ldr	r3, [r0, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4718      	bx	r3

080029f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80029f4:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80029f8:	4770      	bx	lr

080029fa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80029fa:	b510      	push	{r4, lr}
 80029fc:	4604      	mov	r4, r0
 80029fe:	2148      	movs	r1, #72	@ 0x48
 8002a00:	f027 fd6e 	bl	802a4e0 <_ZdlPvj>
 8002a04:	4620      	mov	r0, r4
 8002a06:	bd10      	pop	{r4, pc}

08002a08 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	212c      	movs	r1, #44	@ 0x2c
 8002a0e:	f027 fd67 	bl	802a4e0 <_ZdlPvj>
 8002a12:	4620      	mov	r0, r4
 8002a14:	bd10      	pop	{r4, pc}

08002a16 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002a16:	b510      	push	{r4, lr}
 8002a18:	4604      	mov	r4, r0
 8002a1a:	21bc      	movs	r1, #188	@ 0xbc
 8002a1c:	f027 fd60 	bl	802a4e0 <_ZdlPvj>
 8002a20:	4620      	mov	r0, r4
 8002a22:	bd10      	pop	{r4, pc}

08002a24 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4604      	mov	r4, r0
    HAL::initialize();
 8002a28:	f015 fcf7 	bl	801841a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8002a30:	f019 ff14 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 8002a34:	4601      	mov	r1, r0
 8002a36:	4620      	mov	r0, r4
 8002a38:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8002a44:	2300      	movs	r3, #0
 8002a46:	4906      	ldr	r1, [pc, #24]	@ (8002a60 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002a48:	47a8      	blx	r5
        mjpegDecoders[index] = &decoder;
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002a4c:	4a06      	ldr	r2, [pc, #24]	@ (8002a68 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002a4e:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002a50:	4a06      	ldr	r2, [pc, #24]	@ (8002a6c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8002a56:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8002a58:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a5a:	bd38      	pop	{r3, r4, r5, pc}
 8002a5c:	700bf400 	.word	0x700bf400
 8002a60:	7005fa00 	.word	0x7005fa00
 8002a64:	240017a4 	.word	0x240017a4
 8002a68:	240017ec 	.word	0x240017ec
 8002a6c:	7011ee00 	.word	0x7011ee00
 8002a70:	0005fa00 	.word	0x0005fa00

08002a74 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002a74:	f015 bcb8 	b.w	80183e8 <_ZN8touchgfx3HAL10beginFrameEv>

08002a78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8002a78:	f015 bc80 	b.w	801837c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002a7c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002a7c:	f015 bde1 	b.w	8018642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002a80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4604      	mov	r4, r0
 8002a84:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8002a86:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	f006 f832 	bl	8008af4 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8002a90:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002a92:	f006 f852 	bl	8008b3a <osMutexRelease>
        streams[handle].isActive = false;
 8002a96:	2324      	movs	r3, #36	@ 0x24
 8002a98:	fb03 4505 	mla	r5, r3, r5, r4
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8002aa2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002aa6:	b90b      	cbnz	r3, 8002aac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8002aa8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002aaa:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8002aac:	bd38      	pop	{r3, r4, r5, pc}

08002aae <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002aae:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002ab2:	b112      	cbz	r2, 8002aba <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	4718      	bx	r3
    }
 8002aba:	4770      	bx	lr

08002abc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002abc:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002abe:	6953      	ldr	r3, [r2, #20]
 8002ac0:	03db      	lsls	r3, r3, #15
{
 8002ac2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002ac4:	d51e      	bpl.n	8002b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002acc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002ad0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ad4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ad8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002adc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002ae0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ae2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ae6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ae8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002aec:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002aee:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8002af2:	d2f9      	bcs.n	8002ae8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002af4:	3b20      	subs	r3, #32
 8002af6:	f113 0f20 	cmn.w	r3, #32
 8002afa:	d1f2      	bne.n	8002ae2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b00:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8002b0c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002b0e:	b131      	cbz	r1, 8002b1e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8002b12:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8002b18:	4804      	ldr	r0, [pc, #16]	@ (8002b2c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8002b1a:	f028 f859 	bl	802abd0 <__assert_func>
    }
 8002b1e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8002b22:	bd08      	pop	{r3, pc}
 8002b24:	0802ca58 	.word	0x0802ca58
 8002b28:	0802ca6c 	.word	0x0802ca6c
 8002b2c:	0802cbf6 	.word	0x0802cbf6

08002b30 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002b30:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002b32:	b131      	cbz	r1, 8002b42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002b36:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8002b3a:	4a06      	ldr	r2, [pc, #24]	@ (8002b54 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002b3c:	4806      	ldr	r0, [pc, #24]	@ (8002b58 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002b3e:	f028 f847 	bl	802abd0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002b42:	6840      	ldr	r0, [r0, #4]
 8002b44:	4611      	mov	r1, r2
 8002b46:	6803      	ldr	r3, [r0, #0]
    }
 8002b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4718      	bx	r3
 8002b50:	0802ca58 	.word	0x0802ca58
 8002b54:	0802cc39 	.word	0x0802cc39
 8002b58:	0802cbf6 	.word	0x0802cbf6

08002b5c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002b5c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002b5e:	b129      	cbz	r1, 8002b6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8002b62:	2179      	movs	r1, #121	@ 0x79
 8002b64:	4a03      	ldr	r2, [pc, #12]	@ (8002b74 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8002b66:	4804      	ldr	r0, [pc, #16]	@ (8002b78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8002b68:	f028 f832 	bl	802abd0 <__assert_func>
    }
 8002b6c:	68c0      	ldr	r0, [r0, #12]
 8002b6e:	bd08      	pop	{r3, pc}
 8002b70:	0802ca58 	.word	0x0802ca58
 8002b74:	0802cde7 	.word	0x0802cde7
 8002b78:	0802cbf6 	.word	0x0802cbf6

08002b7c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002b80:	b129      	cbz	r1, 8002b8e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002b82:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002b84:	21a2      	movs	r1, #162	@ 0xa2
 8002b86:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002b88:	4819      	ldr	r0, [pc, #100]	@ (8002bf0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8002b8a:	f028 f821 	bl	802abd0 <__assert_func>
        switch (cmd)
 8002b8e:	2a05      	cmp	r2, #5
 8002b90:	d815      	bhi.n	8002bbe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002b92:	e8df f002 	tbb	[pc, r2]
 8002b96:	1103      	.short	0x1103
 8002b98:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002b9c:	6840      	ldr	r0, [r0, #4]
 8002b9e:	6803      	ldr	r3, [r0, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	4798      	blx	r3
 8002ba4:	b158      	cbz	r0, 8002bbe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002bac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8002bb0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8002bb2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8002bb6:	e002      	b.n	8002bbe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8002bbe:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002bc0:	6203      	str	r3, [r0, #32]
 8002bc2:	e7f5      	b.n	8002bb0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8002bc4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8002bcc:	e7f0      	b.n	8002bb0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6203      	str	r3, [r0, #32]
            break;
 8002bd8:	e7f1      	b.n	8002bbe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8002bda:	3b00      	subs	r3, #0
 8002bdc:	bf18      	it	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8002be4:	e7eb      	b.n	8002bbe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002be6:	bf00      	nop
 8002be8:	0802ca58 	.word	0x0802ca58
 8002bec:	0802cf9c 	.word	0x0802cf9c
 8002bf0:	0802cbf6 	.word	0x0802cbf6

08002bf4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002bfc:	b12c      	cbz	r4, 8002c0a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8002c00:	2190      	movs	r1, #144	@ 0x90
 8002c02:	4a06      	ldr	r2, [pc, #24]	@ (8002c1c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8002c04:	4806      	ldr	r0, [pc, #24]	@ (8002c20 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8002c06:	f027 ffe3 	bl	802abd0 <__assert_func>
        stream.frameNumber = 0;
 8002c0a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002c0c:	6840      	ldr	r0, [r0, #4]
 8002c0e:	6803      	ldr	r3, [r0, #0]
    }
 8002c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4718      	bx	r3
 8002c18:	0802ca58 	.word	0x0802ca58
 8002c1c:	0802d170 	.word	0x0802d170
 8002c20:	0802cbf6 	.word	0x0802cbf6

08002c24 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002c24:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002c26:	b129      	cbz	r1, 8002c34 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8002c2a:	2182      	movs	r1, #130	@ 0x82
 8002c2c:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8002c2e:	4806      	ldr	r0, [pc, #24]	@ (8002c48 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8002c30:	f027 ffce 	bl	802abd0 <__assert_func>
        stream.tickCount = 0;
 8002c34:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002c38:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop
 8002c40:	0802ca58 	.word	0x0802ca58
 8002c44:	0802d34b 	.word	0x0802d34b
 8002c48:	0802cbf6 	.word	0x0802cbf6

08002c4c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002c4c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002c54:	b153      	cbz	r3, 8002c6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8002c56:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8002c5c:	f005 ff4a 	bl	8008af4 <osMutexAcquire>
            firstDrawThisFrame = false;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8002c6c:	bd10      	pop	{r4, pc}

08002c6e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002c6e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002c72:	b11a      	cbz	r2, 8002c7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002c74:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002c78:	b102      	cbz	r2, 8002c7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002c7a:	6018      	str	r0, [r3, #0]
        }
    }
 8002c7c:	4770      	bx	lr
	...

08002c80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002c80:	b510      	push	{r4, lr}
 8002c82:	4604      	mov	r4, r0
 8002c84:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002c86:	b129      	cbz	r1, 8002c94 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002c8a:	21d0      	movs	r1, #208	@ 0xd0
 8002c8c:	4a13      	ldr	r2, [pc, #76]	@ (8002cdc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8002c8e:	4814      	ldr	r0, [pc, #80]	@ (8002ce0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8002c90:	f027 ff9e 	bl	802abd0 <__assert_func>
        if (stream.isPlaying)
 8002c94:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8002c98:	b133      	cbz	r3, 8002ca8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002c9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002ca2:	6963      	ldr	r3, [r4, #20]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002ca8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8002cac:	b90b      	cbnz	r3, 8002cb2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8002cae:	2001      	movs	r0, #1
    }
 8002cb0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002cb2:	68a3      	ldr	r3, [r4, #8]
 8002cb4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8002cb6:	6803      	ldr	r3, [r0, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002cbc:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8002cbe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8002cc2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d1f1      	bne.n	8002cae <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8002cca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ee      	bne.n	8002cb0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8002cd2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8002cd6:	e7eb      	b.n	8002cb0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002cd8:	0802ca58 	.word	0x0802ca58
 8002cdc:	0802d507 	.word	0x0802d507
 8002ce0:	0802cbf6 	.word	0x0802cbf6
 8002ce4:	24015dd4 	.word	0x24015dd4

08002ce8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002ce8:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8002cea:	4c17      	ldr	r4, [pc, #92]	@ (8002d48 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 8002cec:	f015 fb88 	bl	8018400 <_ZN8touchgfx3HAL8endFrameEv>
 8002cf0:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8002cf4:	b913      	cbnz	r3, 8002cfc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 8002cf6:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8002cfa:	b1ab      	cbz	r3, 8002d28 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002cfc:	69e1      	ldr	r1, [r4, #28]
 8002cfe:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002d02:	4353      	muls	r3, r2
 8002d04:	6922      	ldr	r2, [r4, #16]
 8002d06:	434a      	muls	r2, r1
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d30d      	bcc.n	8002d28 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 8002d0c:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8002d10:	b138      	cbz	r0, 8002d22 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002d18:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002d1a:	bf98      	it	ls
 8002d1c:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002d20:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8002d28:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8002d2a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8002d2c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8002d30:	f005 ff98 	bl	8008c64 <osSemaphoreRelease>
        if (uiHasMutex)
 8002d34:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002d38:	b12b      	cbz	r3, 8002d46 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 8002d3a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002d3c:	f005 fefd 	bl	8008b3a <osMutexRelease>
            uiHasMutex = false;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8002d46:	bd10      	pop	{r4, pc}
 8002d48:	240017a4 	.word	0x240017a4

08002d4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002d4e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002d62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002d6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002d7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d7e:	f3bf 8f6f 	isb	sy
}
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002d8c:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8002d90:	b9d8      	cbnz	r0, 8002dca <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002d96:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8002d98:	2501      	movs	r5, #1
                streams[i] = Stream();
 8002d9a:	60d8      	str	r0, [r3, #12]
 8002d9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002d9e:	f506 22bf 	add.w	r2, r6, #391168	@ 0x5f800
                streams[i] = Stream();
 8002da2:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002da4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
                streams[i] = Stream();
 8002da8:	6158      	str	r0, [r3, #20]
 8002daa:	6198      	str	r0, [r3, #24]
 8002dac:	61d8      	str	r0, [r3, #28]
 8002dae:	6218      	str	r0, [r3, #32]
 8002db0:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8002db2:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8002db4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002db8:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8002dbc:	443c      	add	r4, r7
 8002dbe:	42a2      	cmp	r2, r4
 8002dc0:	d90a      	bls.n	8002dd8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8002dc4:	2152      	movs	r1, #82	@ 0x52
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002df4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8002dc8:	e003      	b.n	8002dd2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002dcc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002dd2:	480b      	ldr	r0, [pc, #44]	@ (8002e00 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8002dd4:	f027 fefc 	bl	802abd0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002dd8:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8002dda:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002ddc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        format = bufferFormat;
 8002de0:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8002de4:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8002de6:	f44f 7388 	mov.w	r3, #272	@ 0x110
        buffer = videoBuffer;
 8002dea:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8002dec:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8002dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df0:	0802d85f 	.word	0x0802d85f
 8002df4:	0802d89a 	.word	0x0802d89a
 8002df8:	0802d6a8 	.word	0x0802d6a8
 8002dfc:	0802d6d8 	.word	0x0802d6d8
 8002e00:	0802cbf6 	.word	0x0802cbf6

08002e04 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002e04:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002e06:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002e08:	4e12      	ldr	r6, [pc, #72]	@ (8002e54 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002e10:	6003      	str	r3, [r0, #0]
 8002e12:	6833      	ldr	r3, [r6, #0]
 8002e14:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002e18:	b10a      	cbz	r2, 8002e1e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8002e1a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002e1c:	b900      	cbnz	r0, 8002e20 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8002e1e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002e20:	6803      	ldr	r3, [r0, #0]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	4798      	blx	r3
 8002e26:	1e43      	subs	r3, r0, #1
 8002e28:	425d      	negs	r5, r3
 8002e2a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8002e2c:	6833      	ldr	r3, [r6, #0]
 8002e2e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002e30:	b130      	cbz	r0, 8002e40 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002e32:	6803      	ldr	r3, [r0, #0]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	4798      	blx	r3
 8002e38:	2801      	cmp	r0, #1
 8002e3a:	bf08      	it	eq
 8002e3c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8002e40:	b92d      	cbnz	r5, 8002e4e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8002e44:	2127      	movs	r1, #39	@ 0x27
 8002e46:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8002e48:	4806      	ldr	r0, [pc, #24]	@ (8002e64 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8002e4a:	f027 fec1 	bl	802abd0 <__assert_func>
    }
 8002e4e:	4620      	mov	r0, r4
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	bf00      	nop
 8002e54:	24015dd4 	.word	0x24015dd4
 8002e58:	0802db40 	.word	0x0802db40
 8002e5c:	0802da3d 	.word	0x0802da3d
 8002e60:	0802da9b 	.word	0x0802da9b
 8002e64:	0802dad4 	.word	0x0802dad4

08002e68 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8002e68:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8002e6a:	4e24      	ldr	r6, [pc, #144]	@ (8002efc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8002e6c:	6835      	ldr	r5, [r6, #0]
 8002e6e:	f3bf 8f5b 	dmb	ish
 8002e72:	f015 0501 	ands.w	r5, r5, #1
 8002e76:	d13f      	bne.n	8002ef8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f027 fb33 	bl	802a4e4 <__cxa_guard_acquire>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d03a      	beq.n	8002ef8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8002e82:	4c1f      	ldr	r4, [pc, #124]	@ (8002f00 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002e84:	4b1f      	ldr	r3, [pc, #124]	@ (8002f04 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8002e86:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8002e8a:	6125      	str	r5, [r4, #16]
 8002e8c:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8002e8e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8002e90:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8002e92:	e9c4 3500 	strd	r3, r5, [r4]
 8002e96:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8002e9a:	f01b f86c 	bl	801df76 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8002e9e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ea2:	f017 fcef 	bl	801a884 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8002ea6:	4b18      	ldr	r3, [pc, #96]	@ (8002f08 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002ea8:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8002eaa:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002eac:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8002eae:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8002eb2:	f7ff ffa7 	bl	8002e04 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8002eb6:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8002eb8:	4816      	ldr	r0, [pc, #88]	@ (8002f14 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8002eba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8002ebe:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8002ec0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8002ec4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8002ec8:	2364      	movs	r3, #100	@ 0x64
 8002eca:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8002ece:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8002ed2:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8002edc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8002ee0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8002ee4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8002eea:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8002eee:	f027 fe8d 	bl	802ac0c <atexit>
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f027 fb02 	bl	802a4fc <__cxa_guard_release>
}
 8002ef8:	4801      	ldr	r0, [pc, #4]	@ (8002f00 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	240016e4 	.word	0x240016e4
 8002f00:	240016e8 	.word	0x240016e8
 8002f04:	08030694 	.word	0x08030694
 8002f08:	0802db60 	.word	0x0802db60
 8002f0c:	0802dbd8 	.word	0x0802dbd8
 8002f10:	080306e0 	.word	0x080306e0
 8002f14:	08002971 	.word	0x08002971
 8002f18:	08030718 	.word	0x08030718

08002f1c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002f1c:	b510      	push	{r4, lr}
        return instance;
 8002f1e:	4c14      	ldr	r4, [pc, #80]	@ (8002f70 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	b323      	cbz	r3, 8002f6e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002f24:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <HAL_LTDC_LineEventCallback+0x58>)
 8002f26:	4a14      	ldr	r2, [pc, #80]	@ (8002f78 <HAL_LTDC_LineEventCallback+0x5c>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	8811      	ldrh	r1, [r2, #0]
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d113      	bne.n	8002f58 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <HAL_LTDC_LineEventCallback+0x60>)
 8002f32:	8819      	ldrh	r1, [r3, #0]
 8002f34:	f003 faa0 	bl	8006478 <HAL_LTDC_ProgramLineEvent>
 8002f38:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002f3a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002f44:	f7fe fd88 	bl	8001a58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	f015 ffa5 	bl	8018e98 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002f4e:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002f54:	f7fe bb66 	b.w	8001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002f58:	f003 fa8e 	bl	8006478 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002f5c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002f64:	2000      	movs	r0, #0
    }
 8002f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002f6a:	f7fe bb8d 	b.w	8001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	24015dd4 	.word	0x24015dd4
 8002f74:	50001000 	.word	0x50001000
 8002f78:	240016e2 	.word	0x240016e2
 8002f7c:	240016e0 	.word	0x240016e0

08002f80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f84:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002f86:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002f88:	f44f 67b4 	mov.w	r7, #1440	@ 0x5a0
            SEM_WAIT(semDecode);
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002f92:	f005 fe3b 	bl	8008c0c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002f96:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002f9c:	f005 fdaa 	bl	8008af4 <osMutexAcquire>
                if (stream.doDecode)
 8002fa0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002fa4:	b343      	cbz	r3, 8002ff8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002fa6:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002fa8:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8002fac:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8002fae:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8002fb2:	f1b8 0f00 	cmp.w	r8, #0
 8002fb6:	d023      	beq.n	8003000 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	4641      	mov	r1, r8
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002fca:	9700      	str	r7, [sp, #0]
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002fd2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002fd6:	68a1      	ldr	r1, [r4, #8]
 8002fd8:	47c0      	blx	r8
                    stream.frameCount++;
 8002fda:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002fdc:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002fe4:	b1f0      	cbz	r0, 8003024 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002fe6:	682b      	ldr	r3, [r5, #0]
 8002fe8:	4628      	mov	r0, r5
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	4798      	blx	r3
 8002fee:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8002ff0:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002ff2:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002ff4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002ff8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002ffa:	f005 fd9e 	bl	8008b3a <osMutexRelease>
        while (1)
 8002ffe:	e7c5      	b.n	8002f8c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003000:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003002:	2a00      	cmp	r2, #0
 8003004:	d0de      	beq.n	8002fc4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003006:	4628      	mov	r0, r5
 8003008:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 800300c:	4798      	blx	r3
 800300e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003010:	4401      	add	r1, r0
 8003012:	4628      	mov	r0, r5
 8003014:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003016:	6923      	ldr	r3, [r4, #16]
 8003018:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 800301a:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 800301e:	4413      	add	r3, r2
 8003020:	6123      	str	r3, [r4, #16]
 8003022:	e7cf      	b.n	8002fc4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003024:	2001      	movs	r0, #1
 8003026:	e7e3      	b.n	8002ff0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003028 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 8003028:	4801      	ldr	r0, [pc, #4]	@ (8003030 <videoTaskFunc+0x8>)
{
 800302a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 800302c:	f7ff ffa8 	bl	8002f80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003030:	240017a4 	.word	0x240017a4

08003034 <_GLOBAL__sub_I_lineBuffer>:
}
 8003034:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003036:	4915      	ldr	r1, [pc, #84]	@ (800308c <_GLOBAL__sub_I_lineBuffer+0x58>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003038:	2500      	movs	r5, #0
 800303a:	4815      	ldr	r0, [pc, #84]	@ (8003090 <_GLOBAL__sub_I_lineBuffer+0x5c>)
 800303c:	f7fe ffce 	bl	8001fdc <_ZN20SoftwareMJPEGDecoderC1EPh>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003040:	4c14      	ldr	r4, [pc, #80]	@ (8003094 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <_GLOBAL__sub_I_lineBuffer+0x64>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003044:	462a      	mov	r2, r5
 8003046:	4629      	mov	r1, r5
 8003048:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003050:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003052:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003054:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003056:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 800305a:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800305e:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003062:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003066:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800306a:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800306e:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003072:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003076:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 800307a:	f005 fd7d 	bl	8008b78 <osSemaphoreNew>
 800307e:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003080:	4628      	mov	r0, r5
 8003082:	f005 fd02 	bl	8008a8a <osMutexNew>
 8003086:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	24001834 	.word	0x24001834
 8003090:	240017ec 	.word	0x240017ec
 8003094:	240017a4 	.word	0x240017a4
 8003098:	0802dc24 	.word	0x0802dc24

0800309c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800309c:	4770      	bx	lr

0800309e <_ZN23ApplicationFontProviderD0Ev>:
 800309e:	b510      	push	{r4, lr}
 80030a0:	4604      	mov	r4, r0
 80030a2:	2104      	movs	r1, #4
 80030a4:	f027 fa1c 	bl	802a4e0 <_ZdlPvj>
 80030a8:	4620      	mov	r0, r4
 80030aa:	bd10      	pop	{r4, pc}

080030ac <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80030ac:	2901      	cmp	r1, #1
{
 80030ae:	b508      	push	{r3, lr}
    switch (typography)
 80030b0:	d006      	beq.n	80030c0 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80030b2:	2902      	cmp	r1, #2
 80030b4:	d008      	beq.n	80030c8 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80030b6:	b959      	cbnz	r1, 80030d0 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80030b8:	f000 fdaa 	bl	8003c10 <_ZN17TypedTextDatabase8getFontsEv>
 80030bc:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80030be:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80030c0:	f000 fda6 	bl	8003c10 <_ZN17TypedTextDatabase8getFontsEv>
 80030c4:	6840      	ldr	r0, [r0, #4]
 80030c6:	e7fa      	b.n	80030be <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80030c8:	f000 fda2 	bl	8003c10 <_ZN17TypedTextDatabase8getFontsEv>
 80030cc:	6880      	ldr	r0, [r0, #8]
 80030ce:	e7f6      	b.n	80030be <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80030d0:	2000      	movs	r0, #0
 80030d2:	e7f4      	b.n	80030be <_ZN23ApplicationFontProvider7getFontEt+0x12>

080030d4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80030d4:	4800      	ldr	r0, [pc, #0]	@ (80030d8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80030d6:	4770      	bx	lr
 80030d8:	0802dc74 	.word	0x0802dc74

080030dc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80030dc:	2004      	movs	r0, #4
 80030de:	4770      	bx	lr

080030e0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80030e0:	b513      	push	{r0, r1, r4, lr}
 80030e2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80030e4:	b151      	cbz	r1, 80030fc <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80030e6:	6803      	ldr	r3, [r0, #0]
 80030e8:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80030ea:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80030ec:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80030f0:	689c      	ldr	r4, [r3, #8]
 80030f2:	f10d 0303 	add.w	r3, sp, #3
 80030f6:	47a0      	blx	r4
        return glyph;
    }
 80030f8:	b002      	add	sp, #8
 80030fa:	bd10      	pop	{r4, pc}
            return 0;
 80030fc:	4608      	mov	r0, r1
 80030fe:	e7fb      	b.n	80030f8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003100 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003100:	89c0      	ldrh	r0, [r0, #14]
 8003102:	4770      	bx	lr

08003104 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003104:	8a00      	ldrh	r0, [r0, #16]
 8003106:	4770      	bx	lr

08003108 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003108:	88c0      	ldrh	r0, [r0, #6]
 800310a:	4770      	bx	lr

0800310c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800310c:	8880      	ldrh	r0, [r0, #4]
 800310e:	4770      	bx	lr

08003110 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003110:	7a80      	ldrb	r0, [r0, #10]
    }
 8003112:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003116:	4770      	bx	lr

08003118 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003118:	7a80      	ldrb	r0, [r0, #10]
    }
 800311a:	09c0      	lsrs	r0, r0, #7
 800311c:	4770      	bx	lr

0800311e <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 800311e:	2000      	movs	r0, #0
 8003120:	4770      	bx	lr
	...

08003124 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003124:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800312c <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	00000000 	.word	0x00000000

08003130 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003130:	4770      	bx	lr

08003132 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003132:	4770      	bx	lr

08003134 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003134:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003138:	6808      	ldr	r0, [r1, #0]
 800313a:	6849      	ldr	r1, [r1, #4]
 800313c:	c303      	stmia	r3!, {r0, r1}
    }
 800313e:	4770      	bx	lr

08003140 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003140:	4770      	bx	lr

08003142 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003142:	4770      	bx	lr

08003144 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003144:	6041      	str	r1, [r0, #4]
    }
 8003146:	4770      	bx	lr

08003148 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003148:	4770      	bx	lr
	...

0800314c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800314e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003152:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003156:	2300      	movs	r3, #0
 8003158:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800315c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003160:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	08003355 	.word	0x08003355

0800316c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800316c:	2301      	movs	r3, #1
 800316e:	7203      	strb	r3, [r0, #8]
    }
 8003170:	4770      	bx	lr

08003172 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003172:	4770      	bx	lr

08003174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003174:	4770      	bx	lr

08003176 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003176:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003178:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800317a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800317c:	68c2      	ldr	r2, [r0, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	1054      	asrs	r4, r2, #1
 8003182:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003186:	07d2      	lsls	r2, r2, #31
 8003188:	bf48      	it	mi
 800318a:	590a      	ldrmi	r2, [r1, r4]
    }
 800318c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003190:	bf48      	it	mi
 8003192:	58d3      	ldrmi	r3, [r2, r3]
 8003194:	4718      	bx	r3

08003196 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003196:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003198:	6840      	ldr	r0, [r0, #4]
 800319a:	b130      	cbz	r0, 80031aa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	b91a      	cbnz	r2, 80031a8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80031a0:	68d8      	ldr	r0, [r3, #12]
 80031a2:	f000 0001 	and.w	r0, r0, #1
 80031a6:	4770      	bx	lr
 80031a8:	2001      	movs	r0, #1
    }
 80031aa:	4770      	bx	lr

080031ac <_ZN8touchgfx12NoTransitionD0Ev>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	4604      	mov	r4, r0
 80031b0:	210c      	movs	r1, #12
 80031b2:	f027 f995 	bl	802a4e0 <_ZdlPvj>
 80031b6:	4620      	mov	r0, r4
 80031b8:	bd10      	pop	{r4, pc}

080031ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80031ba:	b510      	push	{r4, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	2110      	movs	r1, #16
 80031c0:	f027 f98e 	bl	802a4e0 <_ZdlPvj>
 80031c4:	4620      	mov	r0, r4
 80031c6:	bd10      	pop	{r4, pc}

080031c8 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
 80031cc:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80031d0:	f027 f986 	bl	802a4e0 <_ZdlPvj>
 80031d4:	4620      	mov	r0, r4
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80031d8:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80031da:	f019 fb3f 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 80031de:	6803      	ldr	r3, [r0, #0]
    }
 80031e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	4718      	bx	r3

080031e8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80031ec:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80031f0:	b158      	cbz	r0, 800320a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4798      	blx	r3
 80031f8:	b138      	cbz	r0, 800320a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80031fa:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800320a:	bd10      	pop	{r4, pc}

0800320c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 800320c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003210:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003214:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003216:	68b0      	ldr	r0, [r6, #8]
 8003218:	6803      	ldr	r3, [r0, #0]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4798      	blx	r3
 800321e:	28db      	cmp	r0, #219	@ 0xdb
 8003220:	d805      	bhi.n	800322e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x22>
 8003222:	4b44      	ldr	r3, [pc, #272]	@ (8003334 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x128>)
 8003224:	21a3      	movs	r1, #163	@ 0xa3
 8003226:	4a44      	ldr	r2, [pc, #272]	@ (8003338 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003228:	4844      	ldr	r0, [pc, #272]	@ (800333c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800322a:	f027 fcd1 	bl	802abd0 <__assert_func>
 800322e:	6870      	ldr	r0, [r6, #4]
 8003230:	6803      	ldr	r3, [r0, #0]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4798      	blx	r3
 8003236:	280f      	cmp	r0, #15
 8003238:	d803      	bhi.n	8003242 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x36>
 800323a:	4b41      	ldr	r3, [pc, #260]	@ (8003340 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 800323c:	21a4      	movs	r1, #164	@ 0xa4
 800323e:	4a3e      	ldr	r2, [pc, #248]	@ (8003338 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 8003240:	e7f2      	b.n	8003228 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003242:	68f0      	ldr	r0, [r6, #12]
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4798      	blx	r3
 800324a:	280b      	cmp	r0, #11
 800324c:	d803      	bhi.n	8003256 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4a>
 800324e:	4b3d      	ldr	r3, [pc, #244]	@ (8003344 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 8003250:	21a5      	movs	r1, #165	@ 0xa5
 8003252:	4a39      	ldr	r2, [pc, #228]	@ (8003338 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 8003254:	e7e8      	b.n	8003228 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003256:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 800334c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 800325a:	f019 faff 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800325e:	3004      	adds	r0, #4
 8003260:	f019 fb21 	bl	801c8a6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003264:	f8d9 0000 	ldr.w	r0, [r9]
 8003268:	b110      	cbz	r0, 8003270 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4798      	blx	r3
    if (*currentTrans)
 8003270:	f8d9 0000 	ldr.w	r0, [r9]
 8003274:	b110      	cbz	r0, 800327c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003276:	6803      	ldr	r3, [r0, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4798      	blx	r3
    if (*currentScreen)
 800327c:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003350 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>
 8003280:	f8d8 0000 	ldr.w	r0, [r8]
 8003284:	b110      	cbz	r0, 800328c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003286:	6803      	ldr	r3, [r0, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	4798      	blx	r3
    if (*currentPresenter)
 800328c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003290:	b110      	cbz	r0, 8003298 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003292:	6803      	ldr	r3, [r0, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4798      	blx	r3
    if (*currentScreen)
 8003298:	f8d8 0000 	ldr.w	r0, [r8]
 800329c:	b110      	cbz	r0, 80032a4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800329e:	6803      	ldr	r3, [r0, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4798      	blx	r3
    if (*currentPresenter)
 80032a4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80032a8:	b110      	cbz	r0, 80032b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80032aa:	6803      	ldr	r3, [r0, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80032b0:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80032b2:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80032b4:	f04f 0b00 	mov.w	fp, #0
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	4798      	blx	r3
 80032be:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 80032c0:	4604      	mov	r4, r0
 80032c2:	f8c0 b004 	str.w	fp, [r0, #4]
 80032c6:	f880 b008 	strb.w	fp, [r0, #8]
 80032ca:	4659      	mov	r1, fp
 80032cc:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80032ce:	68b0      	ldr	r0, [r6, #8]
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	4798      	blx	r3
 80032d6:	4605      	mov	r5, r0
 80032d8:	f000 fd3e 	bl	8003d58 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80032dc:	6870      	ldr	r0, [r6, #4]
 80032de:	4659      	mov	r1, fp
 80032e0:	6803      	ldr	r3, [r0, #0]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	4798      	blx	r3
 80032e6:	4606      	mov	r6, r0
 80032e8:	4629      	mov	r1, r5
 80032ea:	f000 fd15 	bl	8003d18 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 80032ee:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80032f0:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80032f4:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80032f6:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80032fa:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80032fe:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003302:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003304:	f8c6 a008 	str.w	sl, [r6, #8]
 8003308:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800330a:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800330c:	4798      	blx	r3
    newPresenter->activate();
 800330e:	6833      	ldr	r3, [r6, #0]
 8003310:	4630      	mov	r0, r6
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003316:	4621      	mov	r1, r4
 8003318:	4628      	mov	r0, r5
 800331a:	f01b fa8f 	bl	801e83c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	4620      	mov	r0, r4
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	4798      	blx	r3
    newTransition->invalidate();
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	4620      	mov	r0, r4
 800332a:	695b      	ldr	r3, [r3, #20]
}
 800332c:	b001      	add	sp, #4
 800332e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003332:	4718      	bx	r3
 8003334:	0802dcc4 	.word	0x0802dcc4
 8003338:	0802dd52 	.word	0x0802dd52
 800333c:	0802de24 	.word	0x0802de24
 8003340:	0802de6b 	.word	0x0802de6b
 8003344:	0802df0e 	.word	0x0802df0e
 8003348:	0802e0f8 	.word	0x0802e0f8
 800334c:	24015e1c 	.word	0x24015e1c
 8003350:	24015e18 	.word	0x24015e18

08003354 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 8003354:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003358:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 800335c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800335e:	68b0      	ldr	r0, [r6, #8]
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4798      	blx	r3
 8003366:	28db      	cmp	r0, #219	@ 0xdb
 8003368:	d805      	bhi.n	8003376 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 800336a:	4b44      	ldr	r3, [pc, #272]	@ (800347c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 800336c:	21a3      	movs	r1, #163	@ 0xa3
 800336e:	4a44      	ldr	r2, [pc, #272]	@ (8003480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003370:	4844      	ldr	r0, [pc, #272]	@ (8003484 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003372:	f027 fc2d 	bl	802abd0 <__assert_func>
 8003376:	6870      	ldr	r0, [r6, #4]
 8003378:	6803      	ldr	r3, [r0, #0]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4798      	blx	r3
 800337e:	280f      	cmp	r0, #15
 8003380:	d803      	bhi.n	800338a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 8003382:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003384:	21a4      	movs	r1, #164	@ 0xa4
 8003386:	4a3e      	ldr	r2, [pc, #248]	@ (8003480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003388:	e7f2      	b.n	8003370 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800338a:	68f0      	ldr	r0, [r6, #12]
 800338c:	6803      	ldr	r3, [r0, #0]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4798      	blx	r3
 8003392:	280b      	cmp	r0, #11
 8003394:	d803      	bhi.n	800339e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 8003396:	4b3d      	ldr	r3, [pc, #244]	@ (800348c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003398:	21a5      	movs	r1, #165	@ 0xa5
 800339a:	4a39      	ldr	r2, [pc, #228]	@ (8003480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800339c:	e7e8      	b.n	8003370 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 800339e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003494 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 80033a2:	f019 fa5b 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 80033a6:	3004      	adds	r0, #4
 80033a8:	f019 fa7d 	bl	801c8a6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80033ac:	f8d9 0000 	ldr.w	r0, [r9]
 80033b0:	b110      	cbz	r0, 80033b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4798      	blx	r3
    if (*currentTrans)
 80033b8:	f8d9 0000 	ldr.w	r0, [r9]
 80033bc:	b110      	cbz	r0, 80033c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80033be:	6803      	ldr	r3, [r0, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4798      	blx	r3
    if (*currentScreen)
 80033c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003498 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 80033c8:	f8d8 0000 	ldr.w	r0, [r8]
 80033cc:	b110      	cbz	r0, 80033d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4798      	blx	r3
    if (*currentPresenter)
 80033d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80033d8:	b110      	cbz	r0, 80033e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80033da:	6803      	ldr	r3, [r0, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4798      	blx	r3
    if (*currentScreen)
 80033e0:	f8d8 0000 	ldr.w	r0, [r8]
 80033e4:	b110      	cbz	r0, 80033ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80033e6:	6803      	ldr	r3, [r0, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4798      	blx	r3
    if (*currentPresenter)
 80033ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80033f0:	b110      	cbz	r0, 80033f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80033f8:	68f0      	ldr	r0, [r6, #12]
 80033fa:	2100      	movs	r1, #0
 80033fc:	f04f 0b00 	mov.w	fp, #0
 8003400:	6803      	ldr	r3, [r0, #0]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	4798      	blx	r3
 8003406:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003408:	4604      	mov	r4, r0
 800340a:	f8c0 b004 	str.w	fp, [r0, #4]
 800340e:	f880 b008 	strb.w	fp, [r0, #8]
 8003412:	4659      	mov	r1, fp
 8003414:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003416:	68b0      	ldr	r0, [r6, #8]
 8003418:	6803      	ldr	r3, [r0, #0]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	4798      	blx	r3
 800341e:	4605      	mov	r5, r0
 8003420:	f000 fc60 	bl	8003ce4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003424:	6870      	ldr	r0, [r6, #4]
 8003426:	4659      	mov	r1, fp
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	4798      	blx	r3
 800342e:	4606      	mov	r6, r0
 8003430:	4629      	mov	r1, r5
 8003432:	f000 fc37 	bl	8003ca4 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8003436:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003438:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800343c:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800343e:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003442:	f8c8 5000 	str.w	r5, [r8]
 8003446:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	f8c6 a008 	str.w	sl, [r6, #8]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003454:	4798      	blx	r3
    newPresenter->activate();
 8003456:	6833      	ldr	r3, [r6, #0]
 8003458:	4630      	mov	r0, r6
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800345e:	4621      	mov	r1, r4
 8003460:	4628      	mov	r0, r5
 8003462:	f01b f9eb 	bl	801e83c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	4620      	mov	r0, r4
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	4798      	blx	r3
    newTransition->invalidate();
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	4620      	mov	r0, r4
 8003472:	695b      	ldr	r3, [r3, #20]
}
 8003474:	b001      	add	sp, #4
 8003476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	4718      	bx	r3
 800347c:	0802dcc4 	.word	0x0802dcc4
 8003480:	0802dfb1 	.word	0x0802dfb1
 8003484:	0802de24 	.word	0x0802de24
 8003488:	0802de6b 	.word	0x0802de6b
 800348c:	0802df0e 	.word	0x0802df0e
 8003490:	0802e0f8 	.word	0x0802e0f8
 8003494:	24015e1c 	.word	0x24015e1c
 8003498:	24015e18 	.word	0x24015e18

0800349c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80034a4:	b10a      	cbz	r2, 80034aa <_ZN8touchgfx3HAL3lcdEv+0xe>
 80034a6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80034a8:	b900      	cbnz	r0, 80034ac <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80034aa:	6898      	ldr	r0, [r3, #8]
    }
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	24015dd4 	.word	0x24015dd4

080034b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4616      	mov	r6, r2
 80034b8:	4604      	mov	r4, r0
 80034ba:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 80034bc:	f019 fa94 	bl	801c9e8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80034c0:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 80034c2:	2100      	movs	r1, #0
        instance = this;
 80034c4:	601c      	str	r4, [r3, #0]
      model(m)
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80034c8:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80034cc:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003510 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80034d8:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80034da:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 80034de:	689b      	ldr	r3, [r3, #8]
      model(m)
 80034e0:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80034e4:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80034e6:	f7ff ffd9 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 80034ea:	f021 f96e 	bl	80247ca <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80034ee:	f7ff ffd5 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 80034f2:	f021 f9e1 	bl	80248b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80034f6:	f7ff ffd1 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 80034fa:	f021 f9e9 	bl	80248d0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80034fe:	4620      	mov	r0, r4
 8003500:	bd70      	pop	{r4, r5, r6, pc}
 8003502:	bf00      	nop
 8003504:	24015e28 	.word	0x24015e28
 8003508:	0802e0a4 	.word	0x0802e0a4
 800350c:	0802e08c 	.word	0x0802e08c
 8003510:	24015dd4 	.word	0x24015dd4

08003514 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003516:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800351a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800351e:	2300      	movs	r3, #0
 8003520:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003524:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003528:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	08003355 	.word	0x08003355

08003534 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8003536:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800353a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800353e:	2300      	movs	r3, #0
 8003540:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003544:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003548:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	0800320d 	.word	0x0800320d

08003554 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003554:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003556:	4770      	bx	lr

08003558 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003558:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800355a:	4770      	bx	lr

0800355c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800355c:	4770      	bx	lr

0800355e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800355e:	888b      	ldrh	r3, [r1, #4]
 8003560:	69c0      	ldr	r0, [r0, #28]
 8003562:	0adb      	lsrs	r3, r3, #11
 8003564:	680a      	ldr	r2, [r1, #0]
 8003566:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800356a:	4410      	add	r0, r2
 800356c:	4770      	bx	lr

0800356e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800356e:	b510      	push	{r4, lr}
 8003570:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003572:	b1ba      	cbz	r2, 80035a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003574:	7b10      	ldrb	r0, [r2, #12]
 8003576:	b168      	cbz	r0, 8003594 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003578:	7b53      	ldrb	r3, [r2, #13]
 800357a:	7ad2      	ldrb	r2, [r2, #11]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003582:	431a      	orrs	r2, r3
 8003584:	6a23      	ldr	r3, [r4, #32]
 8003586:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 800358a:	881a      	ldrh	r2, [r3, #0]
 800358c:	428a      	cmp	r2, r1
 800358e:	d102      	bne.n	8003596 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003590:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003594:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003596:	d805      	bhi.n	80035a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003598:	3801      	subs	r0, #1
 800359a:	3304      	adds	r3, #4
 800359c:	b280      	uxth	r0, r0
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1f3      	bne.n	800358a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80035a2:	e7f7      	b.n	8003594 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80035a4:	2000      	movs	r0, #0
 80035a6:	e7f5      	b.n	8003594 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080035a8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	212c      	movs	r1, #44	@ 0x2c
 80035ae:	f026 ff97 	bl	802a4e0 <_ZdlPvj>
 80035b2:	4620      	mov	r0, r4
 80035b4:	bd10      	pop	{r4, pc}
	...

080035b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80035b8:	b530      	push	{r4, r5, lr}
 80035ba:	b08b      	sub	sp, #44	@ 0x2c
 80035bc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80035be:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 80035c2:	9508      	str	r5, [sp, #32]
 80035c4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80035c8:	9507      	str	r5, [sp, #28]
 80035ca:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80035ce:	9506      	str	r5, [sp, #24]
 80035d0:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80035d4:	9505      	str	r5, [sp, #20]
 80035d6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80035da:	9504      	str	r5, [sp, #16]
 80035dc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80035e0:	9503      	str	r5, [sp, #12]
 80035e2:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80035e6:	9502      	str	r5, [sp, #8]
 80035e8:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80035ec:	9501      	str	r5, [sp, #4]
 80035ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80035f2:	9500      	str	r5, [sp, #0]
 80035f4:	f01a fd7c 	bl	801e0f0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80035fa:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80035fc:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80035fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003600:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003602:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003604:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003608:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800360a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800360c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800360e:	b00b      	add	sp, #44	@ 0x2c
 8003610:	bd30      	pop	{r4, r5, pc}
 8003612:	bf00      	nop
 8003614:	0802e11c 	.word	0x0802e11c

08003618 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003618:	4770      	bx	lr

0800361a <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800361a:	4770      	bx	lr

0800361c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800361c:	4770      	bx	lr

0800361e <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800361e:	4770      	bx	lr

08003620 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003620:	4770      	bx	lr

08003622 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003622:	4770      	bx	lr

08003624 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003624:	4770      	bx	lr

08003626 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003626:	4770      	bx	lr

08003628 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003628:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800362a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800362c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800362e:	68c2      	ldr	r2, [r0, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	1055      	asrs	r5, r2, #1
 8003634:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003638:	07d2      	lsls	r2, r2, #31
 800363a:	bf48      	it	mi
 800363c:	5962      	ldrmi	r2, [r4, r5]
    }
 800363e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003640:	bf48      	it	mi
 8003642:	58d3      	ldrmi	r3, [r2, r3]
 8003644:	4718      	bx	r3

08003646 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8003646:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003648:	6840      	ldr	r0, [r0, #4]
 800364a:	b130      	cbz	r0, 800365a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	b91a      	cbnz	r2, 8003658 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003650:	68d8      	ldr	r0, [r3, #12]
 8003652:	f000 0001 	and.w	r0, r0, #1
 8003656:	4770      	bx	lr
 8003658:	2001      	movs	r0, #1
    }
 800365a:	4770      	bx	lr

0800365c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
 8003660:	2110      	movs	r1, #16
 8003662:	f026 ff3d 	bl	802a4e0 <_ZdlPvj>
 8003666:	4620      	mov	r0, r4
 8003668:	bd10      	pop	{r4, pc}

0800366a <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800366a:	b510      	push	{r4, lr}
 800366c:	4604      	mov	r4, r0
}
 800366e:	21dc      	movs	r1, #220	@ 0xdc
 8003670:	f026 ff36 	bl	802a4e0 <_ZdlPvj>
 8003674:	4620      	mov	r0, r4
 8003676:	bd10      	pop	{r4, pc}

08003678 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8003678:	3098      	adds	r0, #152	@ 0x98
 800367a:	4288      	cmp	r0, r1
{
 800367c:	b508      	push	{r3, lr}
    if (&src == &button1)
 800367e:	d105      	bne.n	800368c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003680:	f019 f8ec 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
 8003684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenNoTransition();
 8003688:	f7ff bf54 	b.w	8003534 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 800368c:	bd08      	pop	{r3, pc}

0800368e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800368e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4604      	mov	r4, r0
        setX(x);
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003696:	4615      	mov	r5, r2
        setX(x);
 8003698:	4798      	blx	r3
        setY(y);
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80036a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80036a6:	4718      	bx	r3

080036a8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4604      	mov	r4, r0
 80036ac:	461d      	mov	r5, r3
 80036ae:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80036b2:	f7ff ffec 	bl	800368e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	4629      	mov	r1, r5
 80036ba:	4620      	mov	r0, r4
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	4798      	blx	r3
        setHeight(height);
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	4631      	mov	r1, r6
 80036c4:	4620      	mov	r0, r4
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80036c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80036cc:	4718      	bx	r3
	...

080036d0 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80036d0:	4a09      	ldr	r2, [pc, #36]	@ (80036f8 <_ZN8touchgfx3BoxC1Ev+0x28>)
          touchable(false),
 80036d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036d6:	6002      	str	r2, [r0, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	8481      	strh	r1, [r0, #36]	@ 0x24
 80036dc:	21ff      	movs	r1, #255	@ 0xff
        : color(col)
 80036de:	6282      	str	r2, [r0, #40]	@ 0x28
 80036e0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : x(0), y(0), width(0), height(0)
 80036e4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80036e8:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80036ec:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80036f0:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	080307b0 	.word	0x080307b0

080036fc <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80036fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003700:	4604      	mov	r4, r0
        : presenter(0)
 8003702:	2500      	movs	r5, #0
 8003704:	f01a feee 	bl	801e4e4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003708:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <_ZN15Screen1ViewBaseC1Ev+0xec>)
 800370a:	4626      	mov	r6, r4
 800370c:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8003710:	63e5      	str	r5, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 480, 272);
 8003712:	f44f 7a88 	mov.w	sl, #272	@ 0x110
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003716:	f846 3b40 	str.w	r3, [r6], #64
 800371a:	4630      	mov	r0, r6
 800371c:	f7ff ffd8 	bl	80036d0 <_ZN8touchgfx3BoxC1Ev>
 8003720:	4648      	mov	r0, r9
 8003722:	f7ff ffd5 	bl	80036d0 <_ZN8touchgfx3BoxC1Ev>
        touchable = touch;
 8003726:	f240 1301 	movw	r3, #257	@ 0x101
    __background.setPosition(0, 0, 480, 272);
 800372a:	462a      	mov	r2, r5
 800372c:	4629      	mov	r1, r5
 800372e:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8003732:	4630      	mov	r0, r6
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003734:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <_ZN15Screen1ViewBaseC1Ev+0xf0>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003736:	1d27      	adds	r7, r4, #4
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003738:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800373c:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 8003740:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003748:	f884 50c4 	strb.w	r5, [r4, #196]	@ 0xc4
 800374c:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8003750:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 8003754:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
        : pobject(pObject), pmemfun(pmemfun_1)
 8003758:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <_ZN15Screen1ViewBaseC1Ev+0xf4>)
 800375a:	e9c4 3433 	strd	r3, r4, [r4, #204]	@ 0xcc
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <_ZN15Screen1ViewBaseC1Ev+0xf8>)
 8003760:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 8003764:	e9c4 3535 	strd	r3, r5, [r4, #212]	@ 0xd4
 8003768:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
          nextSibling(0),
 800376c:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
          cachedAbsX(0),
 8003770:	e9c4 552d 	strd	r5, r5, [r4, #180]	@ 0xb4
    __background.setPosition(0, 0, 480, 272);
 8003774:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003778:	f8cd a000 	str.w	sl, [sp]
 800377c:	f7ff ff94 	bl	80036a8 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003780:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003784:	4631      	mov	r1, r6
 8003786:	4638      	mov	r0, r7
 8003788:	66a3      	str	r3, [r4, #104]	@ 0x68
 800378a:	f014 fb5d 	bl	8017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 480, 272);
 800378e:	462a      	mov	r2, r5
 8003790:	4629      	mov	r1, r5
 8003792:	4648      	mov	r0, r9
 8003794:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003798:	f8cd a000 	str.w	sl, [sp]
 800379c:	f7ff ff84 	bl	80036a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80037a0:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <_ZN15Screen1ViewBaseC1Ev+0xfc>)
 80037a2:	4649      	mov	r1, r9
 80037a4:	4638      	mov	r0, r7
 80037a6:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80037aa:	f014 fb4d 	bl	8017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(120, 111);
 80037ae:	4640      	mov	r0, r8
 80037b0:	226f      	movs	r2, #111	@ 0x6f
 80037b2:	2178      	movs	r1, #120	@ 0x78
 80037b4:	f7ff ff6b 	bl	800368e <_ZN8touchgfx8Drawable5setXYEss>
 80037b8:	2303      	movs	r3, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTIVE_ID));
 80037ba:	aa03      	add	r2, sp, #12
 80037bc:	a902      	add	r1, sp, #8
 80037be:	f8ad 3008 	strh.w	r3, [sp, #8]
 80037c2:	2302      	movs	r3, #2
 80037c4:	4640      	mov	r0, r8
 80037c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80037ca:	f017 f8b9 	bl	801a940 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80037ce:	f104 03cc 	add.w	r3, r4, #204	@ 0xcc
 80037d2:	4638      	mov	r0, r7
 80037d4:	4641      	mov	r1, r8
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80037d6:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 80037da:	f014 fb35 	bl	8017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80037de:	4620      	mov	r0, r4
 80037e0:	b004      	add	sp, #16
 80037e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e6:	bf00      	nop
 80037e8:	0802e19c 	.word	0x0802e19c
 80037ec:	08030818 	.word	0x08030818
 80037f0:	0802e184 	.word	0x0802e184
 80037f4:	08003679 	.word	0x08003679
 80037f8:	ffc22f2f 	.word	0xffc22f2f

080037fc <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80037fc:	4770      	bx	lr

080037fe <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80037fe:	4770      	bx	lr

08003800 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003800:	4770      	bx	lr

08003802 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003802:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003804:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003806:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003808:	68c2      	ldr	r2, [r0, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	1055      	asrs	r5, r2, #1
 800380e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003812:	07d2      	lsls	r2, r2, #31
 8003814:	bf48      	it	mi
 8003816:	5962      	ldrmi	r2, [r4, r5]
    }
 8003818:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800381a:	bf48      	it	mi
 800381c:	58d3      	ldrmi	r3, [r2, r3]
 800381e:	4718      	bx	r3

08003820 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8003820:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003822:	6840      	ldr	r0, [r0, #4]
 8003824:	b130      	cbz	r0, 8003834 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	b91a      	cbnz	r2, 8003832 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800382a:	68d8      	ldr	r0, [r3, #12]
 800382c:	f000 0001 	and.w	r0, r0, #1
 8003830:	4770      	bx	lr
 8003832:	2001      	movs	r0, #1
    }
 8003834:	4770      	bx	lr

08003836 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003836:	b510      	push	{r4, lr}
 8003838:	4604      	mov	r4, r0
 800383a:	2110      	movs	r1, #16
 800383c:	f026 fe50 	bl	802a4e0 <_ZdlPvj>
 8003840:	4620      	mov	r0, r4
 8003842:	bd10      	pop	{r4, pc}

08003844 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8003844:	b510      	push	{r4, lr}
 8003846:	4604      	mov	r4, r0
}
 8003848:	21dc      	movs	r1, #220	@ 0xdc
 800384a:	f026 fe49 	bl	802a4e0 <_ZdlPvj>
 800384e:	4620      	mov	r0, r4
 8003850:	bd10      	pop	{r4, pc}

08003852 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8003852:	3098      	adds	r0, #152	@ 0x98
 8003854:	4288      	cmp	r0, r1
{
 8003856:	b508      	push	{r3, lr}
    if (&src == &button1)
 8003858:	d105      	bne.n	8003866 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800385a:	f018 ffff 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}
 800385e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenNoTransition();
 8003862:	f7ff be57 	b.w	8003514 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 8003866:	bd08      	pop	{r3, pc}

08003868 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4604      	mov	r4, r0
 800386e:	2500      	movs	r5, #0
 8003870:	f01a fe38 	bl	801e4e4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003874:	4b36      	ldr	r3, [pc, #216]	@ (8003950 <_ZN15Screen2ViewBaseC1Ev+0xe8>)
 8003876:	4626      	mov	r6, r4
 8003878:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 800387c:	63e5      	str	r5, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 480, 272);
 800387e:	f44f 7a88 	mov.w	sl, #272	@ 0x110
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003882:	f846 3b40 	str.w	r3, [r6], #64
 8003886:	4630      	mov	r0, r6
 8003888:	f7ff ff22 	bl	80036d0 <_ZN8touchgfx3BoxC1Ev>
 800388c:	4648      	mov	r0, r9
 800388e:	f7ff ff1f 	bl	80036d0 <_ZN8touchgfx3BoxC1Ev>
        touchable = touch;
 8003892:	f240 1301 	movw	r3, #257	@ 0x101
    __background.setPosition(0, 0, 480, 272);
 8003896:	462a      	mov	r2, r5
 8003898:	4629      	mov	r1, r5
 800389a:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 800389e:	4630      	mov	r0, r6
 80038a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <_ZN15Screen2ViewBaseC1Ev+0xec>)
 80038a2:	1d27      	adds	r7, r4, #4
        : Widget(), action(), pressed(false)
 80038a4:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80038a8:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 80038ac:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80038b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038b4:	f884 50c4 	strb.w	r5, [r4, #196]	@ 0xc4
 80038b8:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 80038bc:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 80038c0:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
        : pobject(pObject), pmemfun(pmemfun_1)
 80038c4:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <_ZN15Screen2ViewBaseC1Ev+0xf0>)
 80038c6:	e9c4 3433 	strd	r3, r4, [r4, #204]	@ 0xcc
 80038ca:	4b24      	ldr	r3, [pc, #144]	@ (800395c <_ZN15Screen2ViewBaseC1Ev+0xf4>)
 80038cc:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 80038d0:	e9c4 3535 	strd	r3, r5, [r4, #212]	@ 0xd4
 80038d4:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
          nextSibling(0),
 80038d8:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
          cachedAbsX(0),
 80038dc:	e9c4 552d 	strd	r5, r5, [r4, #180]	@ 0xb4
    __background.setPosition(0, 0, 480, 272);
 80038e0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80038e4:	f8cd a000 	str.w	sl, [sp]
 80038e8:	f7ff fede 	bl	80036a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80038ec:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80038f0:	4631      	mov	r1, r6
 80038f2:	4638      	mov	r0, r7
 80038f4:	66a3      	str	r3, [r4, #104]	@ 0x68
 80038f6:	f014 faa7 	bl	8017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 480, 272);
 80038fa:	462a      	mov	r2, r5
 80038fc:	4629      	mov	r1, r5
 80038fe:	4648      	mov	r0, r9
 8003900:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003904:	f8cd a000 	str.w	sl, [sp]
 8003908:	f7ff fece 	bl	80036a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800390c:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <_ZN15Screen2ViewBaseC1Ev+0xf8>)
 800390e:	4649      	mov	r1, r9
 8003910:	4638      	mov	r0, r7
 8003912:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003916:	f014 fa97 	bl	8017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(55, 117);
 800391a:	4640      	mov	r0, r8
 800391c:	2275      	movs	r2, #117	@ 0x75
 800391e:	2137      	movs	r1, #55	@ 0x37
 8003920:	f7ff feb5 	bl	800368e <_ZN8touchgfx8Drawable5setXYEss>
 8003924:	2301      	movs	r3, #1
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUND_ACTIVE_ID));
 8003926:	aa03      	add	r2, sp, #12
 8003928:	a902      	add	r1, sp, #8
 800392a:	4640      	mov	r0, r8
 800392c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003930:	f8ad 5008 	strh.w	r5, [sp, #8]
 8003934:	f017 f804 	bl	801a940 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8003938:	f104 03cc 	add.w	r3, r4, #204	@ 0xcc
 800393c:	4638      	mov	r0, r7
 800393e:	4641      	mov	r1, r8
        action = &callback;
 8003940:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8003944:	f014 fa80 	bl	8017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003948:	4620      	mov	r0, r4
 800394a:	b004      	add	sp, #16
 800394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003950:	0802e1e8 	.word	0x0802e1e8
 8003954:	08030818 	.word	0x08030818
 8003958:	0802e1d0 	.word	0x0802e1d0
 800395c:	08003853 	.word	0x08003853
 8003960:	ff35e6c5 	.word	0xff35e6c5

08003964 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003964:	4770      	bx	lr
	...

08003968 <_Z23getFont_verdana_10_4bppv>:
{
 8003968:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800396a:	4d16      	ldr	r5, [pc, #88]	@ (80039c4 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 800396c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800396e:	682c      	ldr	r4, [r5, #0]
 8003970:	f3bf 8f5b 	dmb	ish
 8003974:	f014 0401 	ands.w	r4, r4, #1
 8003978:	d120      	bne.n	80039bc <_Z23getFont_verdana_10_4bppv+0x54>
 800397a:	4628      	mov	r0, r5
 800397c:	f026 fdb2 	bl	802a4e4 <__cxa_guard_acquire>
 8003980:	b1e0      	cbz	r0, 80039bc <_Z23getFont_verdana_10_4bppv+0x54>
 8003982:	233f      	movs	r3, #63	@ 0x3f
 8003984:	2201      	movs	r2, #1
 8003986:	4910      	ldr	r1, [pc, #64]	@ (80039c8 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003988:	9309      	str	r3, [sp, #36]	@ 0x24
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <_Z23getFont_verdana_10_4bppv+0x64>)
 800398c:	4810      	ldr	r0, [pc, #64]	@ (80039d0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800398e:	9308      	str	r3, [sp, #32]
 8003990:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003992:	940a      	str	r4, [sp, #40]	@ 0x28
 8003994:	9405      	str	r4, [sp, #20]
 8003996:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800399a:	2304      	movs	r3, #4
 800399c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80039a0:	230a      	movs	r3, #10
 80039a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039ac:	f7ff fe04 	bl	80035b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039b0:	4809      	ldr	r0, [pc, #36]	@ (80039d8 <_Z23getFont_verdana_10_4bppv+0x70>)
 80039b2:	f027 f92b 	bl	802ac0c <atexit>
 80039b6:	4628      	mov	r0, r5
 80039b8:	f026 fda0 	bl	802a4fc <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80039bc:	4804      	ldr	r0, [pc, #16]	@ (80039d0 <_Z23getFont_verdana_10_4bppv+0x68>)
 80039be:	b00f      	add	sp, #60	@ 0x3c
 80039c0:	bd30      	pop	{r4, r5, pc}
 80039c2:	bf00      	nop
 80039c4:	24001fb4 	.word	0x24001fb4
 80039c8:	08030f94 	.word	0x08030f94
 80039cc:	08030fc4 	.word	0x08030fc4
 80039d0:	24001fb8 	.word	0x24001fb8
 80039d4:	08030fd0 	.word	0x08030fd0
 80039d8:	08003965 	.word	0x08003965

080039dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80039dc:	4770      	bx	lr
	...

080039e0 <_Z23getFont_verdana_20_4bppv>:
{
 80039e0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80039e2:	4d16      	ldr	r5, [pc, #88]	@ (8003a3c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80039e4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80039e6:	682c      	ldr	r4, [r5, #0]
 80039e8:	f3bf 8f5b 	dmb	ish
 80039ec:	f014 0401 	ands.w	r4, r4, #1
 80039f0:	d120      	bne.n	8003a34 <_Z23getFont_verdana_20_4bppv+0x54>
 80039f2:	4628      	mov	r0, r5
 80039f4:	f026 fd76 	bl	802a4e4 <__cxa_guard_acquire>
 80039f8:	b1e0      	cbz	r0, 8003a34 <_Z23getFont_verdana_20_4bppv+0x54>
 80039fa:	233f      	movs	r3, #63	@ 0x3f
 80039fc:	2201      	movs	r2, #1
 80039fe:	4910      	ldr	r1, [pc, #64]	@ (8003a40 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a02:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003a04:	4810      	ldr	r0, [pc, #64]	@ (8003a48 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003a06:	9308      	str	r3, [sp, #32]
 8003a08:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003a0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003a0c:	9405      	str	r4, [sp, #20]
 8003a0e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003a12:	2304      	movs	r3, #4
 8003a14:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a18:	2314      	movs	r3, #20
 8003a1a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a24:	f7ff fdc8 	bl	80035b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a28:	4809      	ldr	r0, [pc, #36]	@ (8003a50 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003a2a:	f027 f8ef 	bl	802ac0c <atexit>
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f026 fd64 	bl	802a4fc <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003a34:	4804      	ldr	r0, [pc, #16]	@ (8003a48 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003a36:	b00f      	add	sp, #60	@ 0x3c
 8003a38:	bd30      	pop	{r4, r5, pc}
 8003a3a:	bf00      	nop
 8003a3c:	24001fe4 	.word	0x24001fe4
 8003a40:	08030fa4 	.word	0x08030fa4
 8003a44:	08030fc8 	.word	0x08030fc8
 8003a48:	24001fe8 	.word	0x24001fe8
 8003a4c:	08030fd4 	.word	0x08030fd4
 8003a50:	080039dd 	.word	0x080039dd

08003a54 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a54:	4770      	bx	lr
	...

08003a58 <_Z23getFont_verdana_40_4bppv>:
{
 8003a58:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a5a:	4d16      	ldr	r5, [pc, #88]	@ (8003ab4 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003a5c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a5e:	682c      	ldr	r4, [r5, #0]
 8003a60:	f3bf 8f5b 	dmb	ish
 8003a64:	f014 0401 	ands.w	r4, r4, #1
 8003a68:	d120      	bne.n	8003aac <_Z23getFont_verdana_40_4bppv+0x54>
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f026 fd3a 	bl	802a4e4 <__cxa_guard_acquire>
 8003a70:	b1e0      	cbz	r0, 8003aac <_Z23getFont_verdana_40_4bppv+0x54>
 8003a72:	233f      	movs	r3, #63	@ 0x3f
 8003a74:	2201      	movs	r2, #1
 8003a76:	4910      	ldr	r1, [pc, #64]	@ (8003ab8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <_Z23getFont_verdana_40_4bppv+0x64>)
 8003a7c:	4810      	ldr	r0, [pc, #64]	@ (8003ac0 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a7e:	9308      	str	r3, [sp, #32]
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003a82:	940a      	str	r4, [sp, #40]	@ 0x28
 8003a84:	9405      	str	r4, [sp, #20]
 8003a86:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a90:	2328      	movs	r3, #40	@ 0x28
 8003a92:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a9c:	f7ff fd8c 	bl	80035b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003aa0:	4809      	ldr	r0, [pc, #36]	@ (8003ac8 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003aa2:	f027 f8b3 	bl	802ac0c <atexit>
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f026 fd28 	bl	802a4fc <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003aac:	4804      	ldr	r0, [pc, #16]	@ (8003ac0 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003aae:	b00f      	add	sp, #60	@ 0x3c
 8003ab0:	bd30      	pop	{r4, r5, pc}
 8003ab2:	bf00      	nop
 8003ab4:	24002014 	.word	0x24002014
 8003ab8:	08030fb4 	.word	0x08030fb4
 8003abc:	08030fcc 	.word	0x08030fcc
 8003ac0:	24002018 	.word	0x24002018
 8003ac4:	08030fd8 	.word	0x08030fd8
 8003ac8:	08003a55 	.word	0x08003a55

08003acc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003acc:	2000      	movs	r0, #0
 8003ace:	4770      	bx	lr

08003ad0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	4770      	bx	lr

08003ad4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ad4:	b40e      	push	{r1, r2, r3}
 8003ad6:	b503      	push	{r0, r1, lr}
 8003ad8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ada:	2100      	movs	r1, #0
{
 8003adc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003ae0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ae2:	f019 fe09 	bl	801d6f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ae6:	b002      	add	sp, #8
 8003ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aec:	b003      	add	sp, #12
 8003aee:	4770      	bx	lr

08003af0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003af0:	b40c      	push	{r2, r3}
 8003af2:	b507      	push	{r0, r1, r2, lr}
 8003af4:	ab04      	add	r3, sp, #16
 8003af6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003afa:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003afc:	f019 fdfc 	bl	801d6f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b00:	b003      	add	sp, #12
 8003b02:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b06:	b002      	add	sp, #8
 8003b08:	4770      	bx	lr
	...

08003b0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003b0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003b12:	b373      	cbz	r3, 8003b72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003b14:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003b16:	b92b      	cbnz	r3, 8003b24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003b18:	4b18      	ldr	r3, [pc, #96]	@ (8003b7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003b1a:	21c5      	movs	r1, #197	@ 0xc5
 8003b1c:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003b1e:	4819      	ldr	r0, [pc, #100]	@ (8003b84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003b20:	f027 f856 	bl	802abd0 <__assert_func>
            return buffer[pos];
 8003b24:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003b26:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003b2a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b2c:	b30b      	cbz	r3, 8003b72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003b2e:	f01b fb51 	bl	801f1d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003b32:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d803      	bhi.n	8003b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003b3a:	21cb      	movs	r1, #203	@ 0xcb
 8003b3c:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003b3e:	e7ee      	b.n	8003b1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003b40:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003b42:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003b46:	1c53      	adds	r3, r2, #1
 8003b48:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	bf88      	it	hi
 8003b50:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b54:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003b58:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	d109      	bne.n	8003b72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003b5e:	2b0a      	cmp	r3, #10
 8003b60:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003b64:	bf28      	it	cs
 8003b66:	2300      	movcs	r3, #0
            return buffer[pos];
 8003b68:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003b6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003b6e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003b70:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003b72:	4620      	mov	r0, r4
}
 8003b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003b78:	f01b ba2e 	b.w	801efd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003b7c:	0802e214 	.word	0x0802e214
 8003b80:	0802e21d 	.word	0x0802e21d
 8003b84:	0802e2c8 	.word	0x0802e2c8
 8003b88:	0802e312 	.word	0x0802e312
 8003b8c:	0802e320 	.word	0x0802e320

08003b90 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003b90:	f01b b9eb 	b.w	801ef6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003b94 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003b94:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003b96:	bb18      	cbnz	r0, 8003be0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003b98:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003b9a:	4813      	ldr	r0, [pc, #76]	@ (8003be8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003b9c:	681c      	ldr	r4, [r3, #0]
 8003b9e:	4913      	ldr	r1, [pc, #76]	@ (8003bec <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003ba0:	b1b4      	cbz	r4, 8003bd0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	4422      	add	r2, r4
 8003ba6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003ba8:	6862      	ldr	r2, [r4, #4]
 8003baa:	4422      	add	r2, r4
 8003bac:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003bae:	68a2      	ldr	r2, [r4, #8]
 8003bb0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003bb8:	f000 f82a 	bl	8003c10 <_ZN17TypedTextDatabase8getFontsEv>
 8003bbc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003bbe:	f000 f825 	bl	8003c0c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003bc4:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003bc8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003bcc:	8018      	strh	r0, [r3, #0]
    }
}
 8003bce:	e007      	b.n	8003be0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003bd2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003bd6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003bda:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003bdc:	2c00      	cmp	r4, #0
 8003bde:	d1e8      	bne.n	8003bb2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003be0:	bd38      	pop	{r3, r4, r5, pc}
 8003be2:	bf00      	nop
 8003be4:	24002050 	.word	0x24002050
 8003be8:	24002048 	.word	0x24002048
 8003bec:	24002044 	.word	0x24002044
 8003bf0:	2400204c 	.word	0x2400204c
 8003bf4:	24015e2c 	.word	0x24015e2c
 8003bf8:	24015e34 	.word	0x24015e34
 8003bfc:	24015e30 	.word	0x24015e30
 8003c00:	08030fe0 	.word	0x08030fe0
 8003c04:	08030fdc 	.word	0x08030fdc
 8003c08:	08030fe4 	.word	0x08030fe4

08003c0c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	4770      	bx	lr

08003c10 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003c10:	4800      	ldr	r0, [pc, #0]	@ (8003c14 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003c12:	4770      	bx	lr
 8003c14:	24002054 	.word	0x24002054

08003c18 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003c18:	b510      	push	{r4, lr}
};
 8003c1a:	4c05      	ldr	r4, [pc, #20]	@ (8003c30 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003c1c:	f7ff fee0 	bl	80039e0 <_Z23getFont_verdana_20_4bppv>
};
 8003c20:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003c22:	f7ff ff19 	bl	8003a58 <_Z23getFont_verdana_40_4bppv>
};
 8003c26:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003c28:	f7ff fe9e 	bl	8003968 <_Z23getFont_verdana_10_4bppv>
};
 8003c2c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003c2e:	bd10      	pop	{r4, pc}
 8003c30:	24002054 	.word	0x24002054

08003c34 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8003c34:	b510      	push	{r4, lr}
    pointArray = 0;
 8003c36:	2400      	movs	r4, #0
 8003c38:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8003c3a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8003c3c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8003c3e:	601c      	str	r4, [r3, #0]
}
 8003c40:	bd10      	pop	{r4, pc}

08003c42 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003c42:	4770      	bx	lr

08003c44 <_ZN19FrontendApplicationD0Ev>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	4604      	mov	r4, r0
 8003c48:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003c4c:	f026 fc48 	bl	802a4e0 <_ZdlPvj>
 8003c50:	4620      	mov	r0, r4
 8003c52:	bd10      	pop	{r4, pc}

08003c54 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4604      	mov	r4, r0
    {
        model.tick();
 8003c58:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003c5c:	f000 f813 	bl	8003c86 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003c60:	4620      	mov	r0, r4
    }
 8003c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003c66:	f018 be7b 	b.w	801c960 <_ZN8touchgfx11Application15handleTickEventEv>
	...

08003c6c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003c70:	f7ff fc20 	bl	80034b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003c74:	4b01      	ldr	r3, [pc, #4]	@ (8003c7c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003c76:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003c78:	6023      	str	r3, [r4, #0]
}
 8003c7a:	bd10      	pop	{r4, pc}
 8003c7c:	0802e3fc 	.word	0x0802e3fc

08003c80 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003c80:	2200      	movs	r2, #0
 8003c82:	6002      	str	r2, [r0, #0]
{

}
 8003c84:	4770      	bx	lr

08003c86 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003c86:	4770      	bx	lr

08003c88 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8003c88:	4770      	bx	lr

08003c8a <_ZThn4_N16Screen1PresenterD1Ev>:
 8003c8a:	3804      	subs	r0, #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003c8e:	4770      	bx	lr

08003c90 <_ZN16Screen1PresenterD0Ev>:
 8003c90:	b510      	push	{r4, lr}
 8003c92:	4604      	mov	r4, r0
 8003c94:	2110      	movs	r1, #16
 8003c96:	f026 fc23 	bl	802a4e0 <_ZdlPvj>
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	bd10      	pop	{r4, pc}

08003c9e <_ZThn4_N16Screen1PresenterD0Ev>:
 8003c9e:	f1a0 0004 	sub.w	r0, r0, #4
 8003ca2:	e7f5      	b.n	8003c90 <_ZN16Screen1PresenterD0Ev>

08003ca4 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003ca4:	2200      	movs	r2, #0
    : view(v)
 8003ca6:	60c1      	str	r1, [r0, #12]
 8003ca8:	6082      	str	r2, [r0, #8]
 8003caa:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8003cac:	6002      	str	r2, [r0, #0]
 8003cae:	3218      	adds	r2, #24
 8003cb0:	6042      	str	r2, [r0, #4]
}
 8003cb2:	4770      	bx	lr
 8003cb4:	0802e450 	.word	0x0802e450

08003cb8 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003cb8:	4770      	bx	lr
	...

08003cbc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <_ZN11Screen1ViewD1Ev+0x10>)
 8003cbe:	b510      	push	{r4, lr}
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	6003      	str	r3, [r0, #0]
 8003cc4:	f7ff fcad 	bl	8003622 <_ZN15Screen1ViewBaseD1Ev>
 8003cc8:	4620      	mov	r0, r4
 8003cca:	bd10      	pop	{r4, pc}
 8003ccc:	0802e478 	.word	0x0802e478

08003cd0 <_ZN11Screen1ViewD0Ev>:
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	f7ff fff2 	bl	8003cbc <_ZN11Screen1ViewD1Ev>
 8003cd8:	21dc      	movs	r1, #220	@ 0xdc
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f026 fc00 	bl	802a4e0 <_ZdlPvj>
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	bd10      	pop	{r4, pc}

08003ce4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	f7ff fd08 	bl	80036fc <_ZN15Screen1ViewBaseC1Ev>
 8003cec:	4b01      	ldr	r3, [pc, #4]	@ (8003cf4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8003cee:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003cf0:	6023      	str	r3, [r4, #0]
}
 8003cf2:	bd10      	pop	{r4, pc}
 8003cf4:	0802e478 	.word	0x0802e478

08003cf8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003cf8:	f7ff bc94 	b.w	8003624 <_ZN15Screen1ViewBase11setupScreenEv>

08003cfc <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 8003cfc:	4770      	bx	lr

08003cfe <_ZThn4_N16Screen2PresenterD1Ev>:
 8003cfe:	3804      	subs	r0, #4
 8003d00:	4770      	bx	lr

08003d02 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003d02:	4770      	bx	lr

08003d04 <_ZN16Screen2PresenterD0Ev>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	4604      	mov	r4, r0
 8003d08:	2110      	movs	r1, #16
 8003d0a:	f026 fbe9 	bl	802a4e0 <_ZdlPvj>
 8003d0e:	4620      	mov	r0, r4
 8003d10:	bd10      	pop	{r4, pc}

08003d12 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003d12:	f1a0 0004 	sub.w	r0, r0, #4
 8003d16:	e7f5      	b.n	8003d04 <_ZN16Screen2PresenterD0Ev>

08003d18 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003d18:	2200      	movs	r2, #0
    : view(v)
 8003d1a:	60c1      	str	r1, [r0, #12]
 8003d1c:	6082      	str	r2, [r0, #8]
 8003d1e:	4a02      	ldr	r2, [pc, #8]	@ (8003d28 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003d20:	6002      	str	r2, [r0, #0]
 8003d22:	3218      	adds	r2, #24
 8003d24:	6042      	str	r2, [r0, #4]
}
 8003d26:	4770      	bx	lr
 8003d28:	0802e4ac 	.word	0x0802e4ac

08003d2c <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8003d2c:	4770      	bx	lr
	...

08003d30 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <_ZN11Screen2ViewD1Ev+0x10>)
 8003d32:	b510      	push	{r4, lr}
 8003d34:	4604      	mov	r4, r0
 8003d36:	6003      	str	r3, [r0, #0]
 8003d38:	f7ff fd60 	bl	80037fc <_ZN15Screen2ViewBaseD1Ev>
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	bd10      	pop	{r4, pc}
 8003d40:	0802e4d4 	.word	0x0802e4d4

08003d44 <_ZN11Screen2ViewD0Ev>:
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4604      	mov	r4, r0
 8003d48:	f7ff fff2 	bl	8003d30 <_ZN11Screen2ViewD1Ev>
 8003d4c:	21dc      	movs	r1, #220	@ 0xdc
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f026 fbc6 	bl	802a4e0 <_ZdlPvj>
 8003d54:	4620      	mov	r0, r4
 8003d56:	bd10      	pop	{r4, pc}

08003d58 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	f7ff fd84 	bl	8003868 <_ZN15Screen2ViewBaseC1Ev>
 8003d60:	4b01      	ldr	r3, [pc, #4]	@ (8003d68 <_ZN11Screen2ViewC1Ev+0x10>)
}
 8003d62:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8003d64:	6023      	str	r3, [r4, #0]
}
 8003d66:	bd10      	pop	{r4, pc}
 8003d68:	0802e4d4 	.word	0x0802e4d4

08003d6c <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8003d6c:	f7ff bd47 	b.w	80037fe <_ZN15Screen2ViewBase11setupScreenEv>

08003d70 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8003d70:	f240 1301 	movw	r3, #257	@ 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003d74:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0

  return FT5336_OK;
}
 8003d78:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8003d7a:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8003d7c:	2305      	movs	r3, #5
 8003d7e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003d80:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003d84:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8003d88:	4770      	bx	lr

08003d8a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8003d8a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003d8e:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8003d90:	bf04      	itt	eq
 8003d92:	2300      	moveq	r3, #0
 8003d94:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }

  return ret;
}
 8003d98:	2000      	movs	r0, #0
 8003d9a:	4770      	bx	lr

08003d9c <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	4770      	bx	lr

08003da0 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003da0:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003da2:	6904      	ldr	r4, [r0, #16]
 8003da4:	8900      	ldrh	r0, [r0, #8]
 8003da6:	46a4      	mov	ip, r4
}
 8003da8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003dac:	4760      	bx	ip

08003dae <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003dae:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003db0:	68c4      	ldr	r4, [r0, #12]
 8003db2:	8900      	ldrh	r0, [r0, #8]
 8003db4:	46a4      	mov	ip, r4
}
 8003db6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003dba:	4760      	bx	ip

08003dbc <FT5336_GestureConfig>:
{
 8003dbc:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003dbe:	f100 0518 	add.w	r5, r0, #24
{
 8003dc2:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003dc4:	7809      	ldrb	r1, [r1, #0]
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 f8f4 	bl	8003fb4 <ft5336_radian_value>
 8003dcc:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003dce:	7931      	ldrb	r1, [r6, #4]
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 f8fb 	bl	8003fcc <ft5336_offset_left_right>
 8003dd6:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003dd8:	7a31      	ldrb	r1, [r6, #8]
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 f902 	bl	8003fe4 <ft5336_offset_up_down>
 8003de0:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8003de2:	7b31      	ldrb	r1, [r6, #12]
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f909 	bl	8003ffc <ft5336_disatnce_left_right>
 8003dea:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003dec:	7c31      	ldrb	r1, [r6, #16]
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 f910 	bl	8004014 <ft5336_distance_up_down>
 8003df4:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003df6:	7d31      	ldrb	r1, [r6, #20]
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f917 	bl	800402c <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003dfe:	42c4      	cmn	r4, r0
}
 8003e00:	bf14      	ite	ne
 8003e02:	f04f 30ff 	movne.w	r0, #4294967295
 8003e06:	2000      	moveq	r0, #0
 8003e08:	bd70      	pop	{r4, r5, r6, pc}

08003e0a <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003e0a:	3018      	adds	r0, #24
 8003e0c:	f000 b926 	b.w	800405c <ft5336_chip_id>

08003e10 <FT5336_GetState>:
{
 8003e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003e12:	f100 0518 	add.w	r5, r0, #24
{
 8003e16:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003e18:	a901      	add	r1, sp, #4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f8bd 	bl	8003f9a <ft5336_td_status>
 8003e20:	bb08      	cbnz	r0, 8003e66 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003e22:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	bf98      	it	ls
 8003e2a:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003e2c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003e2e:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003e30:	2103      	movs	r1, #3
 8003e32:	4628      	mov	r0, r5
 8003e34:	eb0d 0203 	add.w	r2, sp, r3
 8003e38:	f000 f89c 	bl	8003f74 <ft5336_read_reg>
 8003e3c:	b9b0      	cbnz	r0, 8003e6c <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003e3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e4c:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003e4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003e52:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003e54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60a3      	str	r3, [r4, #8]
}
 8003e62:	b003      	add	sp, #12
 8003e64:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003e66:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6a:	e7df      	b.n	8003e2c <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003e70:	e7f7      	b.n	8003e62 <FT5336_GetState+0x52>

08003e72 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003e72:	3018      	adds	r0, #24
 8003e74:	f000 b88c 	b.w	8003f90 <ft5336_gest_id>

08003e78 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003e78:	2101      	movs	r1, #1
 8003e7a:	3018      	adds	r0, #24
 8003e7c:	f000 b8e2 	b.w	8004044 <ft5336_g_mode>

08003e80 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8003e80:	2100      	movs	r1, #0
 8003e82:	3018      	adds	r0, #24
 8003e84:	f000 b8de 	b.w	8004044 <ft5336_g_mode>

08003e88 <FT5336_Init>:
{
 8003e88:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8003e8a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8003e8e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8003e90:	b96b      	cbnz	r3, 8003eae <FT5336_Init+0x26>
    pObj->IO.Init();
 8003e92:	6803      	ldr	r3, [r0, #0]
 8003e94:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8003e96:	4620      	mov	r0, r4
 8003e98:	f7ff fff2 	bl	8003e80 <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8003e9c:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8003e9e:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8003ea2:	bf18      	it	ne
 8003ea4:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8003ea6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT5336_OK)
 8003eaa:	4240      	negs	r0, r0
}
 8003eac:	bd10      	pop	{r4, pc}
    ret += FT5336_DisableIT(pObj);
 8003eae:	2000      	movs	r0, #0
  return ret;
 8003eb0:	e7fc      	b.n	8003eac <FT5336_Init+0x24>

08003eb2 <FT5336_ClearIT>:
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	4770      	bx	lr

08003eb6 <FT5336_GetMultiTouchState>:
{
 8003eb6:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003eb8:	f100 0518 	add.w	r5, r0, #24
{
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	4669      	mov	r1, sp
 8003ec4:	f000 f869 	bl	8003f9a <ft5336_td_status>
 8003ec8:	bb90      	cbnz	r0, 8003f30 <FT5336_GetMultiTouchState+0x7a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003eca:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	bf98      	it	ls
 8003ed2:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003ed4:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003ed6:	231e      	movs	r3, #30
 8003ed8:	466a      	mov	r2, sp
 8003eda:	2103      	movs	r1, #3
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f849 	bl	8003f74 <ft5336_read_reg>
 8003ee2:	bb40      	cbnz	r0, 8003f36 <FT5336_GetMultiTouchState+0x80>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	466d      	mov	r5, sp
 8003ee8:	3414      	adds	r4, #20
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003eea:	782a      	ldrb	r2, [r5, #0]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003eec:	3506      	adds	r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003eee:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8003ef2:	0213      	lsls	r3, r2, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003ef4:	0992      	lsrs	r2, r2, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003ef6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003efa:	4333      	orrs	r3, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003efc:	f815 6c03 	ldrb.w	r6, [r5, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003f00:	f841 3f04 	str.w	r3, [r1, #4]!
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003f04:	428c      	cmp	r4, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003f06:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003f0a:	63ca      	str	r2, [r1, #60]	@ 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003f0c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003f10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f14:	ea43 0306 	orr.w	r3, r3, r6
 8003f18:	614b      	str	r3, [r1, #20]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8003f1a:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8003f1e:	628b      	str	r3, [r1, #40]	@ 0x28
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003f20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f24:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8003f28:	650b      	str	r3, [r1, #80]	@ 0x50
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003f2a:	d1de      	bne.n	8003eea <FT5336_GetMultiTouchState+0x34>
}
 8003f2c:	b008      	add	sp, #32
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	e7ce      	b.n	8003ed4 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8003f36:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003f3a:	e7f7      	b.n	8003f2c <FT5336_GetMultiTouchState+0x76>

08003f3c <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003f3c:	b190      	cbz	r0, 8003f64 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8003f3e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8003f40:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f42:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8003f44:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8003f46:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8003f48:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f4a:	68ca      	ldr	r2, [r1, #12]
 8003f4c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f4e:	690a      	ldr	r2, [r1, #16]
 8003f50:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f52:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8003f54:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f56:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8003f58:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <FT5336_RegisterBusIO+0x30>)
 8003f5a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8003f5c:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <FT5336_RegisterBusIO+0x34>)
 8003f5e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8003f60:	b103      	cbz	r3, 8003f64 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8003f62:	4718      	bx	r3
}
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	08003da1 	.word	0x08003da1
 8003f70:	08003daf 	.word	0x08003daf

08003f74 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003f74:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003f76:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8003f7a:	46a4      	mov	ip, r4
}
 8003f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003f80:	4760      	bx	ip

08003f82 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8003f82:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003f84:	6804      	ldr	r4, [r0, #0]
 8003f86:	6880      	ldr	r0, [r0, #8]
 8003f88:	46a4      	mov	ip, r4
}
 8003f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003f8e:	4760      	bx	ip

08003f90 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003f90:	2301      	movs	r3, #1
{
 8003f92:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003f94:	4619      	mov	r1, r3
 8003f96:	f7ff bfed 	b.w	8003f74 <ft5336_read_reg>

08003f9a <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003f9a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003f9c:	460a      	mov	r2, r1
{
 8003f9e:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	f7ff ffe6 	bl	8003f74 <ft5336_read_reg>
  
  if(ret == 0)
 8003fa8:	b918      	cbnz	r0, 8003fb2 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003faa:	7823      	ldrb	r3, [r4, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8003fb2:	bd10      	pop	{r4, pc}

08003fb4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003fb4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003fb6:	2301      	movs	r3, #1
{
 8003fb8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003fbc:	f10d 0207 	add.w	r2, sp, #7
 8003fc0:	2191      	movs	r1, #145	@ 0x91
 8003fc2:	f7ff ffde 	bl	8003f82 <ft5336_write_reg>
}
 8003fc6:	b003      	add	sp, #12
 8003fc8:	f85d fb04 	ldr.w	pc, [sp], #4

08003fcc <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003fcc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003fce:	2301      	movs	r3, #1
{
 8003fd0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003fd4:	f10d 0207 	add.w	r2, sp, #7
 8003fd8:	2192      	movs	r1, #146	@ 0x92
 8003fda:	f7ff ffd2 	bl	8003f82 <ft5336_write_reg>
}
 8003fde:	b003      	add	sp, #12
 8003fe0:	f85d fb04 	ldr.w	pc, [sp], #4

08003fe4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003fe4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003fe6:	2301      	movs	r3, #1
{
 8003fe8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003fec:	f10d 0207 	add.w	r2, sp, #7
 8003ff0:	2193      	movs	r1, #147	@ 0x93
 8003ff2:	f7ff ffc6 	bl	8003f82 <ft5336_write_reg>
}
 8003ff6:	b003      	add	sp, #12
 8003ff8:	f85d fb04 	ldr.w	pc, [sp], #4

08003ffc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003ffc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003ffe:	2301      	movs	r3, #1
{
 8004000:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8004004:	f10d 0207 	add.w	r2, sp, #7
 8004008:	2194      	movs	r1, #148	@ 0x94
 800400a:	f7ff ffba 	bl	8003f82 <ft5336_write_reg>
}
 800400e:	b003      	add	sp, #12
 8004010:	f85d fb04 	ldr.w	pc, [sp], #4

08004014 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8004014:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8004016:	2301      	movs	r3, #1
{
 8004018:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800401c:	f10d 0207 	add.w	r2, sp, #7
 8004020:	2195      	movs	r1, #149	@ 0x95
 8004022:	f7ff ffae 	bl	8003f82 <ft5336_write_reg>
}
 8004026:	b003      	add	sp, #12
 8004028:	f85d fb04 	ldr.w	pc, [sp], #4

0800402c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800402c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800402e:	2301      	movs	r3, #1
{
 8004030:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8004034:	f10d 0207 	add.w	r2, sp, #7
 8004038:	2196      	movs	r1, #150	@ 0x96
 800403a:	f7ff ffa2 	bl	8003f82 <ft5336_write_reg>
}
 800403e:	b003      	add	sp, #12
 8004040:	f85d fb04 	ldr.w	pc, [sp], #4

08004044 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8004044:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8004046:	2301      	movs	r3, #1
{
 8004048:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800404c:	f10d 0207 	add.w	r2, sp, #7
 8004050:	21a4      	movs	r1, #164	@ 0xa4
 8004052:	f7ff ff96 	bl	8003f82 <ft5336_write_reg>
}
 8004056:	b003      	add	sp, #12
 8004058:	f85d fb04 	ldr.w	pc, [sp], #4

0800405c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800405c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800405e:	2301      	movs	r3, #1
 8004060:	21a8      	movs	r1, #168	@ 0xa8
 8004062:	f7ff bf87 	b.w	8003f74 <ft5336_read_reg>

08004066 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8004066:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800406a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800406e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8004072:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8004076:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800407a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800407e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8004082:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8004086:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800408a:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800408c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004090:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8004094:	2000      	movs	r0, #0
 8004096:	4770      	bx	lr

08004098 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	b09a      	sub	sp, #104	@ 0x68
 800409c:	460e      	mov	r6, r1
 800409e:	4605      	mov	r5, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 80040a0:	2100      	movs	r1, #0
{
 80040a2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 80040a4:	a806      	add	r0, sp, #24
 80040a6:	2250      	movs	r2, #80	@ 0x50
 80040a8:	f027 f84e 	bl	802b148 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80040ac:	2214      	movs	r2, #20
 80040ae:	2100      	movs	r1, #0
 80040b0:	a801      	add	r0, sp, #4
 80040b2:	f027 f849 	bl	802b148 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80040b6:	b92e      	cbnz	r6, 80040c4 <MX25LM51245G_AutoPollingMemReady+0x2c>
 80040b8:	2c01      	cmp	r4, #1
 80040ba:	d150      	bne.n	800415e <MX25LM51245G_AutoPollingMemReady+0xc6>
  {
    return MX25LM51245G_ERROR;
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80040c0:	b01a      	add	sp, #104	@ 0x68
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040c4:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040c6:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040c8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80040ca:	2010      	movs	r0, #16
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040cc:	4253      	negs	r3, r2
 80040ce:	4153      	adcs	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040d0:	2e00      	cmp	r6, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040d2:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 80040d6:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040d8:	bf14      	ite	ne
 80040da:	2201      	movne	r2, #1
 80040dc:	2200      	moveq	r2, #0
 80040de:	ea4f 1102 	mov.w	r1, r2, lsl #4
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80040e2:	ea4f 2282 	mov.w	r2, r2, lsl #10
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040e6:	910a      	str	r1, [sp, #40]	@ 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80040e8:	f240 51fa 	movw	r1, #1530	@ 0x5fa
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80040ec:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80040ee:	ea4f 22c3 	mov.w	r2, r3, lsl #11
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80040f2:	bf08      	it	eq
 80040f4:	2105      	moveq	r1, #5
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80040f6:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80040f8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80040fc:	9108      	str	r1, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040fe:	a906      	add	r1, sp, #24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004100:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004102:	bf0c      	ite	eq
 8004104:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
 8004108:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 800410c:	9214      	str	r2, [sp, #80]	@ 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800410e:	ea4f 62c3 	mov.w	r2, r3, lsl #27
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8004112:	ea4f 7343 	mov.w	r3, r3, lsl #29
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004116:	9216      	str	r2, [sp, #88]	@ 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004118:	bf14      	ite	ne
 800411a:	2205      	movne	r2, #5
 800411c:	2200      	moveq	r2, #0
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800411e:	9318      	str	r3, [sp, #96]	@ 0x60
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004120:	2c01      	cmp	r4, #1
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8004122:	f04f 0301 	mov.w	r3, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004126:	9217      	str	r2, [sp, #92]	@ 0x5c
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8004128:	9302      	str	r3, [sp, #8]
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800412a:	bf0c      	ite	eq
 800412c:	2202      	moveq	r2, #2
 800412e:	2201      	movne	r2, #1
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004130:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004134:	9215      	str	r2, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004136:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800413a:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800413e:	4628      	mov	r0, r5
 8004140:	f002 fb81 	bl	8006846 <HAL_OSPI_Command>
 8004144:	2800      	cmp	r0, #0
 8004146:	d1b9      	bne.n	80040bc <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414c:	a901      	add	r1, sp, #4
 800414e:	4628      	mov	r0, r5
 8004150:	f002 fcbe 	bl	8006ad0 <HAL_OSPI_AutoPolling>
 8004154:	3800      	subs	r0, #0
 8004156:	bf18      	it	ne
 8004158:	2001      	movne	r0, #1
 800415a:	4240      	negs	r0, r0
 800415c:	e7b0      	b.n	80040c0 <MX25LM51245G_AutoPollingMemReady+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800415e:	2301      	movs	r3, #1
 8004160:	e7b1      	b.n	80040c6 <MX25LM51245G_AutoPollingMemReady+0x2e>

08004162 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8004162:	b570      	push	{r4, r5, r6, lr}
 8004164:	b096      	sub	sp, #88	@ 0x58
 8004166:	460c      	mov	r4, r1
 8004168:	4606      	mov	r6, r0
 800416a:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800416c:	2100      	movs	r1, #0
 800416e:	2250      	movs	r2, #80	@ 0x50
 8004170:	a802      	add	r0, sp, #8
 8004172:	f026 ffe9 	bl	802b148 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004176:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8004178:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800417a:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800417e:	d105      	bne.n	800418c <MX25LM51245G_EnableSTRMemoryMappedMode+0x2a>
 8004180:	2d00      	cmp	r5, #0
 8004182:	d153      	bne.n	800422c <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
  {
    return MX25LM51245G_ERROR;
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004188:	b016      	add	sp, #88	@ 0x58
 800418a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800418c:	2c00      	cmp	r4, #0
 800418e:	bf14      	ite	ne
 8004190:	2304      	movne	r3, #4
 8004192:	2301      	moveq	r3, #1
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8004194:	2201      	movs	r2, #1
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004196:	2c00      	cmp	r4, #0
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004198:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800419a:	bf14      	ite	ne
 800419c:	4613      	movne	r3, r2
 800419e:	2300      	moveq	r3, #0
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80041a0:	9202      	str	r2, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80041a2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80041a6:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80041a8:	d142      	bne.n	8004230 <MX25LM51245G_EnableSTRMemoryMappedMode+0xce>
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	bf0c      	ite	eq
 80041ae:	230b      	moveq	r3, #11
 80041b0:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80041b2:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80041b4:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ba:	a902      	add	r1, sp, #8
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80041bc:	bf0c      	ite	eq
 80041be:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 80041c2:	f44f 6380 	movne.w	r3, #1024	@ 0x400
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80041c6:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041c8:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80041ca:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80041cc:	bf0c      	ite	eq
 80041ce:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
 80041d2:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80041d6:	2c00      	cmp	r4, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80041d8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80041da:	bf0c      	ite	eq
 80041dc:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 80041e0:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80041e4:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80041e6:	bf0c      	ite	eq
 80041e8:	2308      	moveq	r3, #8
 80041ea:	2306      	movne	r3, #6
 80041ec:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041ee:	f002 fb2a 	bl	8006846 <HAL_OSPI_Command>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d1c6      	bne.n	8004184 <MX25LM51245G_EnableSTRMemoryMappedMode+0x22>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80041f6:	2302      	movs	r3, #2
 80041f8:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80041fa:	b9e4      	cbnz	r4, 8004236 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd4>
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	bf18      	it	ne
 8004200:	2312      	movne	r3, #18
 8004202:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8004204:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	a902      	add	r1, sp, #8
 800420c:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 800420e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004210:	f002 fb19 	bl	8006846 <HAL_OSPI_Command>
 8004214:	2800      	cmp	r0, #0
 8004216:	d1b5      	bne.n	8004184 <MX25LM51245G_EnableSTRMemoryMappedMode+0x22>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8004218:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800421a:	4669      	mov	r1, sp
 800421c:	4630      	mov	r0, r6
 800421e:	f002 fca7 	bl	8006b70 <HAL_OSPI_MemoryMapped>
 8004222:	3800      	subs	r0, #0
 8004224:	bf18      	it	ne
 8004226:	2001      	movne	r0, #1
 8004228:	4240      	negs	r0, r0
 800422a:	e7ad      	b.n	8004188 <MX25LM51245G_EnableSTRMemoryMappedMode+0x26>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800422c:	2304      	movs	r3, #4
 800422e:	e7b1      	b.n	8004194 <MX25LM51245G_EnableSTRMemoryMappedMode+0x32>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8004230:	f64e 4313 	movw	r3, #60435	@ 0xec13
 8004234:	e7bd      	b.n	80041b2 <MX25LM51245G_EnableSTRMemoryMappedMode+0x50>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004236:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 800423a:	e7e2      	b.n	8004202 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa0>

0800423c <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800423c:	b510      	push	{r4, lr}
 800423e:	b096      	sub	sp, #88	@ 0x58
 8004240:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8004242:	224c      	movs	r2, #76	@ 0x4c
 8004244:	2100      	movs	r1, #0
 8004246:	a803      	add	r0, sp, #12
 8004248:	f026 ff7e 	bl	802b148 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800424c:	2300      	movs	r3, #0
  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800424e:	f04f 0c08 	mov.w	ip, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425a:	4620      	mov	r0, r4
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800425c:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8004260:	2301      	movs	r3, #1
 8004262:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8004264:	2304      	movs	r3, #4
 8004266:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8004268:	2310      	movs	r3, #16
 800426a:	e9cd 3c06 	strd	r3, ip, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800426e:	f64e 6311 	movw	r3, #60945	@ 0xee11
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8004272:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8004276:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8004278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800427c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800427e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004282:	e9cd 310a 	strd	r3, r1, [sp, #40]	@ 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8004286:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800428a:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800428c:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800428e:	2306      	movs	r3, #6
 8004290:	e9cd c312 	strd	ip, r3, [sp, #72]	@ 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8004294:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004298:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800429a:	f002 fad4 	bl	8006846 <HAL_OSPI_Command>
 800429e:	b118      	cbz	r0, 80042a8 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6c>
  {
    return MX25LM51245G_ERROR;
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80042a4:	b016      	add	sp, #88	@ 0x58
 80042a6:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80042a8:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ae:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80042b0:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80042b2:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80042b6:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042ba:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80042bc:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042be:	f002 fac2 	bl	8006846 <HAL_OSPI_Command>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d1ec      	bne.n	80042a0 <MX25LM51245G_EnableDTRMemoryMappedMode+0x64>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80042c6:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80042c8:	4669      	mov	r1, sp
 80042ca:	4620      	mov	r0, r4
 80042cc:	f002 fc50 	bl	8006b70 <HAL_OSPI_MemoryMapped>
 80042d0:	3800      	subs	r0, #0
 80042d2:	bf18      	it	ne
 80042d4:	2001      	movne	r0, #1
 80042d6:	4240      	negs	r0, r0
 80042d8:	e7e4      	b.n	80042a4 <MX25LM51245G_EnableDTRMemoryMappedMode+0x68>

080042da <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	b09a      	sub	sp, #104	@ 0x68
 80042e0:	460f      	mov	r7, r1
 80042e2:	4605      	mov	r5, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 80042e4:	2100      	movs	r1, #0
{
 80042e6:	4616      	mov	r6, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 80042e8:	a806      	add	r0, sp, #24
 80042ea:	2250      	movs	r2, #80	@ 0x50
 80042ec:	f026 ff2c 	bl	802b148 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80042f0:	2214      	movs	r2, #20
 80042f2:	2100      	movs	r1, #0
 80042f4:	a801      	add	r0, sp, #4
 80042f6:	f026 ff27 	bl	802b148 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80042fa:	b937      	cbnz	r7, 800430a <MX25LM51245G_WriteEnable+0x30>
 80042fc:	2e01      	cmp	r6, #1
 80042fe:	d163      	bne.n	80043c8 <MX25LM51245G_WriteEnable+0xee>
  {
    return MX25LM51245G_ERROR;
 8004300:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004304:	b01a      	add	sp, #104	@ 0x68
 8004306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800430a:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800430c:	1e71      	subs	r1, r6, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800430e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004314:	4628      	mov	r0, r5
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004316:	424c      	negs	r4, r1
 8004318:	414c      	adcs	r4, r1
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800431a:	2f00      	cmp	r7, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800431c:	a906      	add	r1, sp, #24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800431e:	ea4f 03c4 	mov.w	r3, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004322:	bf14      	ite	ne
 8004324:	f04f 0801 	movne.w	r8, #1
 8004328:	f04f 0800 	moveq.w	r8, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800432c:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800432e:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8004332:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8004334:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 8004338:	bf08      	it	eq
 800433a:	2306      	moveq	r3, #6
 800433c:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800433e:	f002 fa82 	bl	8006846 <HAL_OSPI_Command>
 8004342:	2800      	cmp	r0, #0
 8004344:	d1dc      	bne.n	8004300 <MX25LM51245G_WriteEnable+0x26>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8004346:	2f00      	cmp	r7, #0
 8004348:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Address        = 0U;
 800434c:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800434e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8004352:	bf08      	it	eq
 8004354:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004356:	a906      	add	r1, sp, #24
 8004358:	4628      	mov	r0, r5
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800435a:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800435c:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8004360:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004362:	ea4f 23c4 	mov.w	r3, r4, lsl #11
 8004366:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8004368:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800436c:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800436e:	bf0c      	ite	eq
 8004370:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8004374:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8004378:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800437a:	ea4f 63c4 	mov.w	r3, r4, lsl #27
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800437e:	ea4f 7444 	mov.w	r4, r4, lsl #29
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004382:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004384:	bf14      	ite	ne
 8004386:	2305      	movne	r3, #5
 8004388:	2300      	moveq	r3, #0
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800438a:	2e01      	cmp	r6, #1
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800438c:	9418      	str	r4, [sp, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800438e:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004390:	bf0c      	ite	eq
 8004392:	2302      	moveq	r3, #2
 8004394:	2301      	movne	r3, #1
 8004396:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004398:	f002 fa55 	bl	8006846 <HAL_OSPI_Command>
 800439c:	2800      	cmp	r0, #0
 800439e:	d1af      	bne.n	8004300 <MX25LM51245G_WriteEnable+0x26>
  s_config.Match           = 2U;
 80043a0:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80043a2:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80043a4:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043a6:	a901      	add	r1, sp, #4
 80043a8:	4628      	mov	r0, r5
  s_config.Mask            = 2U;
 80043aa:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80043ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043b2:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ba:	f002 fb89 	bl	8006ad0 <HAL_OSPI_AutoPolling>
 80043be:	3800      	subs	r0, #0
 80043c0:	bf18      	it	ne
 80043c2:	2001      	movne	r0, #1
 80043c4:	4240      	negs	r0, r0
 80043c6:	e79d      	b.n	8004304 <MX25LM51245G_WriteEnable+0x2a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e79f      	b.n	800430c <MX25LM51245G_WriteEnable+0x32>

080043cc <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80043cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ce:	b095      	sub	sp, #84	@ 0x54
 80043d0:	460e      	mov	r6, r1
 80043d2:	4605      	mov	r5, r0
 80043d4:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80043d6:	2100      	movs	r1, #0
 80043d8:	2250      	movs	r2, #80	@ 0x50
 80043da:	4668      	mov	r0, sp
{
 80043dc:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80043de:	f026 feb3 	bl	802b148 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80043e2:	b92e      	cbnz	r6, 80043f0 <MX25LM51245G_WriteCfg2Register+0x24>
 80043e4:	2c01      	cmp	r4, #1
 80043e6:	d146      	bne.n	8004476 <MX25LM51245G_WriteCfg2Register+0xaa>
  {
    return MX25LM51245G_ERROR;
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80043ec:	b015      	add	sp, #84	@ 0x54
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80043f0:	2304      	movs	r3, #4
 80043f2:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80043f4:	1e63      	subs	r3, r4, #1
  s_command.Address            = WriteAddr;
 80043f6:	9706      	str	r7, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80043f8:	425a      	negs	r2, r3
 80043fa:	415a      	adcs	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80043fc:	2e00      	cmp	r6, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80043fe:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8004402:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800440e:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8004410:	f247 238d 	movw	r3, #29325	@ 0x728d
 8004414:	bf08      	it	eq
 8004416:	2372      	moveq	r3, #114	@ 0x72
 8004418:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800441a:	bf0c      	ite	eq
 800441c:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8004420:	f44f 6380 	movne.w	r3, #1024	@ 0x400
 8004424:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004426:	ea4f 23c2 	mov.w	r3, r2, lsl #11
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800442a:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800442e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004430:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004434:	9210      	str	r2, [sp, #64]	@ 0x40
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004436:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004438:	bf0c      	ite	eq
 800443a:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 800443e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8004442:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004444:	d019      	beq.n	800447a <MX25LM51245G_WriteCfg2Register+0xae>
 8004446:	2c01      	cmp	r4, #1
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2302      	moveq	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004452:	4669      	mov	r1, sp
 8004454:	4628      	mov	r0, r5
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004456:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004458:	f002 f9f5 	bl	8006846 <HAL_OSPI_Command>
 800445c:	2800      	cmp	r0, #0
 800445e:	d1c3      	bne.n	80043e8 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	a91a      	add	r1, sp, #104	@ 0x68
 8004466:	4628      	mov	r0, r5
 8004468:	f002 fa98 	bl	800699c <HAL_OSPI_Transmit>
 800446c:	3800      	subs	r0, #0
 800446e:	bf18      	it	ne
 8004470:	2001      	movne	r0, #1
 8004472:	4240      	negs	r0, r0
 8004474:	e7ba      	b.n	80043ec <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004476:	2301      	movs	r3, #1
 8004478:	e7bb      	b.n	80043f2 <MX25LM51245G_WriteCfg2Register+0x26>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800447a:	2301      	movs	r3, #1
 800447c:	e7e7      	b.n	800444e <MX25LM51245G_WriteCfg2Register+0x82>

0800447e <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	b094      	sub	sp, #80	@ 0x50
 8004484:	460f      	mov	r7, r1
 8004486:	4606      	mov	r6, r0
 8004488:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800448a:	2100      	movs	r1, #0
 800448c:	2250      	movs	r2, #80	@ 0x50
 800448e:	4668      	mov	r0, sp
{
 8004490:	4698      	mov	r8, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8004492:	f026 fe59 	bl	802b148 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004496:	b937      	cbnz	r7, 80044a6 <MX25LM51245G_ReadCfg2Register+0x28>
 8004498:	2d01      	cmp	r5, #1
 800449a:	d14e      	bne.n	800453a <MX25LM51245G_ReadCfg2Register+0xbc>
  {
    return MX25LM51245G_ERROR;
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80044a0:	b014      	add	sp, #80	@ 0x50
 80044a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80044a6:	2304      	movs	r3, #4
 80044a8:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044aa:	1e6b      	subs	r3, r5, #1
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b0:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044b2:	425c      	negs	r4, r3
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044b4:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 80044b6:	f8cd 8018 	str.w	r8, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044ba:	415c      	adcs	r4, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80044bc:	2f00      	cmp	r7, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044be:	ea4f 03c4 	mov.w	r3, r4, lsl #3
 80044c2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80044ce:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80044d0:	f247 138e 	movw	r3, #29070	@ 0x718e
 80044d4:	bf08      	it	eq
 80044d6:	2371      	moveq	r3, #113	@ 0x71
 80044d8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80044da:	bf0c      	ite	eq
 80044dc:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 80044e0:	f44f 6380 	movne.w	r3, #1024	@ 0x400
 80044e4:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80044e6:	ea4f 23c4 	mov.w	r3, r4, lsl #11
 80044ea:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80044ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80044f0:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80044f2:	bf0c      	ite	eq
 80044f4:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 80044f8:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80044fc:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80044fe:	ea4f 63c4 	mov.w	r3, r4, lsl #27
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8004502:	ea4f 7444 	mov.w	r4, r4, lsl #29
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004506:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004508:	bf14      	ite	ne
 800450a:	2305      	movne	r3, #5
 800450c:	2300      	moveq	r3, #0
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800450e:	2d01      	cmp	r5, #1
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8004510:	9412      	str	r4, [sp, #72]	@ 0x48
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004512:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004514:	bf0c      	ite	eq
 8004516:	2302      	moveq	r3, #2
 8004518:	2301      	movne	r3, #1
 800451a:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800451c:	f002 f993 	bl	8006846 <HAL_OSPI_Command>
 8004520:	2800      	cmp	r0, #0
 8004522:	d1bb      	bne.n	800449c <MX25LM51245G_ReadCfg2Register+0x1e>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004528:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800452a:	4630      	mov	r0, r6
 800452c:	f002 fa7a 	bl	8006a24 <HAL_OSPI_Receive>
 8004530:	3800      	subs	r0, #0
 8004532:	bf18      	it	ne
 8004534:	2001      	movne	r0, #1
 8004536:	4240      	negs	r0, r0
 8004538:	e7b2      	b.n	80044a0 <MX25LM51245G_ReadCfg2Register+0x22>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800453a:	2301      	movs	r3, #1
 800453c:	e7b4      	b.n	80044a8 <MX25LM51245G_ReadCfg2Register+0x2a>

0800453e <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800453e:	b570      	push	{r4, r5, r6, lr}
 8004540:	b094      	sub	sp, #80	@ 0x50
 8004542:	460d      	mov	r5, r1
 8004544:	4606      	mov	r6, r0
 8004546:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004548:	2100      	movs	r1, #0
 800454a:	2250      	movs	r2, #80	@ 0x50
 800454c:	4668      	mov	r0, sp
 800454e:	f026 fdfb 	bl	802b148 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004552:	bb0d      	cbnz	r5, 8004598 <MX25LM51245G_ResetEnable+0x5a>
 8004554:	2c01      	cmp	r4, #1
 8004556:	d021      	beq.n	800459c <MX25LM51245G_ResetEnable+0x5e>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004558:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800455a:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800455c:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800455e:	4669      	mov	r1, sp
 8004560:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004562:	4254      	negs	r4, r2
 8004564:	4154      	adcs	r4, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004566:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004572:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004576:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800457a:	9405      	str	r4, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800457c:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800457e:	f246 6399 	movw	r3, #26265	@ 0x6699
 8004582:	bf08      	it	eq
 8004584:	2366      	moveq	r3, #102	@ 0x66
 8004586:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004588:	f002 f95d 	bl	8006846 <HAL_OSPI_Command>
 800458c:	3800      	subs	r0, #0
 800458e:	bf18      	it	ne
 8004590:	2001      	movne	r0, #1
 8004592:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004594:	b014      	add	sp, #80	@ 0x50
 8004596:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004598:	2304      	movs	r3, #4
 800459a:	e7de      	b.n	800455a <MX25LM51245G_ResetEnable+0x1c>
    return MX25LM51245G_ERROR;
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	e7f8      	b.n	8004594 <MX25LM51245G_ResetEnable+0x56>

080045a2 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80045a2:	b570      	push	{r4, r5, r6, lr}
 80045a4:	b094      	sub	sp, #80	@ 0x50
 80045a6:	460d      	mov	r5, r1
 80045a8:	4606      	mov	r6, r0
 80045aa:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80045ac:	2100      	movs	r1, #0
 80045ae:	2250      	movs	r2, #80	@ 0x50
 80045b0:	4668      	mov	r0, sp
 80045b2:	f026 fdc9 	bl	802b148 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80045b6:	bb0d      	cbnz	r5, 80045fc <MX25LM51245G_ResetMemory+0x5a>
 80045b8:	2c01      	cmp	r4, #1
 80045ba:	d021      	beq.n	8004600 <MX25LM51245G_ResetMemory+0x5e>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80045bc:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80045be:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80045c0:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045c2:	4669      	mov	r1, sp
 80045c4:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80045c6:	4254      	negs	r4, r2
 80045c8:	4154      	adcs	r4, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80045ca:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045cc:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80045d6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80045da:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80045de:	9405      	str	r4, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80045e0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80045e2:	f649 1366 	movw	r3, #39270	@ 0x9966
 80045e6:	bf08      	it	eq
 80045e8:	2399      	moveq	r3, #153	@ 0x99
 80045ea:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045ec:	f002 f92b 	bl	8006846 <HAL_OSPI_Command>
 80045f0:	3800      	subs	r0, #0
 80045f2:	bf18      	it	ne
 80045f4:	2001      	movne	r0, #1
 80045f6:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80045f8:	b014      	add	sp, #80	@ 0x50
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80045fc:	2304      	movs	r3, #4
 80045fe:	e7de      	b.n	80045be <MX25LM51245G_ResetMemory+0x1c>
    return MX25LM51245G_ERROR;
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e7f8      	b.n	80045f8 <MX25LM51245G_ResetMemory+0x56>
	...

08004608 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 8004608:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <BSP_I2C4_DeInit+0x48>)
{
 800460a:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	b90b      	cbnz	r3, 8004614 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 8004610:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 8004612:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 8004614:	3b01      	subs	r3, #1
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f9      	bne.n	8004610 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800461c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004620:	480c      	ldr	r0, [pc, #48]	@ (8004654 <BSP_I2C4_DeInit+0x4c>)
 8004622:	f001 f955 	bl	80058d0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8004626:	480b      	ldr	r0, [pc, #44]	@ (8004654 <BSP_I2C4_DeInit+0x4c>)
 8004628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800462c:	f001 f950 	bl	80058d0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8004630:	4a09      	ldr	r2, [pc, #36]	@ (8004658 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004632:	480a      	ldr	r0, [pc, #40]	@ (800465c <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 8004634:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8004638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004640:	f001 fb7a 	bl	8005d38 <HAL_I2C_DeInit>
 8004644:	2800      	cmp	r0, #0
 8004646:	d0e3      	beq.n	8004610 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8004648:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800464c:	e7e1      	b.n	8004612 <BSP_I2C4_DeInit+0xa>
 800464e:	bf00      	nop
 8004650:	24002a64 	.word	0x24002a64
 8004654:	58021400 	.word	0x58021400
 8004658:	58024400 	.word	0x58024400
 800465c:	24002a68 	.word	0x24002a68

08004660 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004660:	2300      	movs	r3, #0
 8004662:	2201      	movs	r2, #1
{
 8004664:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8004666:	6041      	str	r1, [r0, #4]
{
 8004668:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800466a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800466c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8004670:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004674:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004678:	f001 fb08 	bl	8005c8c <HAL_I2C_Init>
 800467c:	4601      	mov	r1, r0
 800467e:	b108      	cbz	r0, 8004684 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8004680:	2001      	movs	r0, #1
}
 8004682:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004684:	4620      	mov	r0, r4
 8004686:	f001 fd2e 	bl	80060e6 <HAL_I2CEx_ConfigAnalogFilter>
 800468a:	4601      	mov	r1, r0
 800468c:	2800      	cmp	r0, #0
 800468e:	d1f7      	bne.n	8004680 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004690:	4620      	mov	r0, r4
 8004692:	f001 fd4e 	bl	8006132 <HAL_I2CEx_ConfigDigitalFilter>
 8004696:	3800      	subs	r0, #0
 8004698:	bf18      	it	ne
 800469a:	2001      	movne	r0, #1
 800469c:	e7f1      	b.n	8004682 <MX_I2C4_Init+0x22>
	...

080046a0 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80046a0:	4b9f      	ldr	r3, [pc, #636]	@ (8004920 <BSP_I2C4_Init+0x280>)
 80046a2:	48a0      	ldr	r0, [pc, #640]	@ (8004924 <BSP_I2C4_Init+0x284>)
{
 80046a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80046a8:	6003      	str	r3, [r0, #0]
{
 80046aa:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter++ == 0U)
 80046ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004928 <BSP_I2C4_Init+0x288>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	9200      	str	r2, [sp, #0]
 80046b2:	3201      	adds	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	9b00      	ldr	r3, [sp, #0]
 80046b8:	b11b      	cbz	r3, 80046c2 <BSP_I2C4_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80046ba:	2000      	movs	r0, #0
}
 80046bc:	b013      	add	sp, #76	@ 0x4c
 80046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80046c2:	f001 fd0b 	bl	80060dc <HAL_I2C_GetState>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d1f7      	bne.n	80046ba <BSP_I2C4_Init+0x1a>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80046ca:	4d98      	ldr	r5, [pc, #608]	@ (800492c <BSP_I2C4_Init+0x28c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80046cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80046d0:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80046d2:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80046d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80046d8:	4895      	ldr	r0, [pc, #596]	@ (8004930 <BSP_I2C4_Init+0x290>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80046da:	f043 0320 	orr.w	r3, r3, #32
 80046de:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80046e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80046ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80046ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80046f2:	f043 0320 	orr.w	r3, r3, #32
 80046f6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80046fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80046fe:	9611      	str	r6, [sp, #68]	@ 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004708:	2312      	movs	r3, #18
 800470a:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800470e:	2302      	movs	r3, #2
 8004710:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004714:	a90d      	add	r1, sp, #52	@ 0x34
 8004716:	f000 fff9 	bl	800570c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800471a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800471e:	a90d      	add	r1, sp, #52	@ 0x34
 8004720:	4883      	ldr	r0, [pc, #524]	@ (8004930 <BSP_I2C4_Init+0x290>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8004722:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8004724:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8004726:	f000 fff1 	bl	800570c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800472a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800472e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004732:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8004736:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8004742:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800474a:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800474e:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004756:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800475a:	f003 f99d 	bl	8007a98 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800475e:	2800      	cmp	r0, #0
 8004760:	d06a      	beq.n	8004838 <BSP_I2C4_Init+0x198>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004762:	4b74      	ldr	r3, [pc, #464]	@ (8004934 <BSP_I2C4_Init+0x294>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004764:	f04f 0910 	mov.w	r9, #16
  if (tsdadel_max <= 0)
 8004768:	9a00      	ldr	r2, [sp, #0]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800476a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800476e:	f8df b1cc 	ldr.w	fp, [pc, #460]	@ 800493c <BSP_I2C4_Init+0x29c>
  if (tsdadel_max <= 0)
 8004772:	4692      	mov	sl, r2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004774:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004778:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800477c:	4b6e      	ldr	r3, [pc, #440]	@ (8004938 <BSP_I2C4_Init+0x298>)
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800477e:	0086      	lsls	r6, r0, #2
  if (tsdadel_max <= 0)
 8004780:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004782:	f1c5 0532 	rsb	r5, r5, #50	@ 0x32
 8004786:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004788:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800478c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  if (tsdadel_max <= 0)
 8004790:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
{
 8004794:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004796:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800479a:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800479e:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80047a2:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80047a6:	d35a      	bcc.n	800485e <BSP_I2C4_Init+0x1be>
 80047a8:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80047aa:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80047ac:	42bd      	cmp	r5, r7
 80047ae:	d850      	bhi.n	8004852 <BSP_I2C4_Init+0x1b2>
 80047b0:	42be      	cmp	r6, r7
 80047b2:	d34e      	bcc.n	8004852 <BSP_I2C4_Init+0x1b2>
            if(presc != prev_presc)
 80047b4:	4591      	cmp	r9, r2
 80047b6:	d04c      	beq.n	8004852 <BSP_I2C4_Init+0x1b2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80047b8:	2414      	movs	r4, #20
 80047ba:	fb04 fa03 	mul.w	sl, r4, r3
              I2c_valid_timing_nbr ++;
 80047be:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80047c0:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80047c2:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80047c6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80047c8:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80047cc:	e9c9 4e01 	strd	r4, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80047d0:	d93c      	bls.n	800484c <BSP_I2C4_Init+0x1ac>
 80047d2:	4a59      	ldr	r2, [pc, #356]	@ (8004938 <BSP_I2C4_Init+0x298>)
 80047d4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047d6:	4b58      	ldr	r3, [pc, #352]	@ (8004938 <BSP_I2C4_Init+0x298>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047d8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80047dc:	4957      	ldr	r1, [pc, #348]	@ (800493c <BSP_I2C4_Init+0x29c>)
 80047de:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047e0:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047e2:	9202      	str	r2, [sp, #8]
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047e8:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047ea:	0043      	lsls	r3, r0, #1
 80047ec:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80047f0:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80047f4:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80047f8:	f10b 0b01 	add.w	fp, fp, #1
 80047fc:	9408      	str	r4, [sp, #32]
 80047fe:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004800:	9b05      	ldr	r3, [sp, #20]
 8004802:	429f      	cmp	r7, r3
 8004804:	d137      	bne.n	8004876 <BSP_I2C4_Init+0x1d6>
        if (idx < I2C_VALID_TIMING_NBR)
 8004806:	2a7f      	cmp	r2, #127	@ 0x7f
 8004808:	d816      	bhi.n	8004838 <BSP_I2C4_Init+0x198>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800480a:	2114      	movs	r1, #20
 800480c:	4b4b      	ldr	r3, [pc, #300]	@ (800493c <BSP_I2C4_Init+0x29c>)
 800480e:	434a      	muls	r2, r1
 8004810:	1899      	adds	r1, r3, r2
 8004812:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004814:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004816:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800481a:	684b      	ldr	r3, [r1, #4]
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004822:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004824:	688b      	ldr	r3, [r1, #8]
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800482c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800482e:	68cb      	ldr	r3, [r1, #12]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004834:	4323      	orrs	r3, r4
 8004836:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004838:	9900      	ldr	r1, [sp, #0]
 800483a:	483a      	ldr	r0, [pc, #232]	@ (8004924 <BSP_I2C4_Init+0x284>)
 800483c:	f7ff ff10 	bl	8004660 <MX_I2C4_Init>
 8004840:	2800      	cmp	r0, #0
 8004842:	f43f af3a 	beq.w	80046ba <BSP_I2C4_Init+0x1a>
          ret = BSP_ERROR_BUS_FAILURE;
 8004846:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800484a:	e737      	b.n	80046bc <BSP_I2C4_Init+0x1c>
 800484c:	4691      	mov	r9, r2
 800484e:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004852:	f10e 0e01 	add.w	lr, lr, #1
 8004856:	440f      	add	r7, r1
 8004858:	f1be 0f10 	cmp.w	lr, #16
 800485c:	d1a6      	bne.n	80047ac <BSP_I2C4_Init+0x10c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800485e:	f1bc 0f10 	cmp.w	ip, #16
 8004862:	4488      	add	r8, r1
 8004864:	d199      	bne.n	800479a <BSP_I2C4_Init+0xfa>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004866:	3201      	adds	r2, #1
 8004868:	4401      	add	r1, r0
 800486a:	2a10      	cmp	r2, #16
 800486c:	d192      	bne.n	8004794 <BSP_I2C4_Init+0xf4>
 800486e:	f1ba 0f00 	cmp.w	sl, #0
 8004872:	d1ae      	bne.n	80047d2 <BSP_I2C4_Init+0x132>
 8004874:	e7af      	b.n	80047d6 <BSP_I2C4_Init+0x136>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004876:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004878:	f04f 0c00 	mov.w	ip, #0
 800487c:	9c08      	ldr	r4, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800487e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004882:	441c      	add	r4, r3
 8004884:	ebab 0503 	sub.w	r5, fp, r3
 8004888:	9403      	str	r4, [sp, #12]
 800488a:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800488c:	9d03      	ldr	r5, [sp, #12]
 800488e:	9401      	str	r4, [sp, #4]
 8004890:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8004892:	441c      	add	r4, r3
 8004894:	9407      	str	r4, [sp, #28]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004896:	f240 5414 	movw	r4, #1300	@ 0x514
 800489a:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800489e:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80048a2:	42a5      	cmp	r5, r4
 80048a4:	d930      	bls.n	8004908 <BSP_I2C4_Init+0x268>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80048a6:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80048aa:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80048ae:	d22b      	bcs.n	8004908 <BSP_I2C4_Init+0x268>
 80048b0:	9c07      	ldr	r4, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80048b2:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80048b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80048ba:	1966      	adds	r6, r4, r5
 80048bc:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80048c0:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80048c4:	f240 4412 	movw	r4, #1042	@ 0x412
 80048c8:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80048cc:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80048d0:	45a2      	cmp	sl, r4
 80048d2:	d812      	bhi.n	80048fa <BSP_I2C4_Init+0x25a>
 80048d4:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 80048d8:	d30f      	bcc.n	80048fa <BSP_I2C4_Init+0x25a>
 80048da:	4580      	cmp	r8, r0
 80048dc:	d90d      	bls.n	80048fa <BSP_I2C4_Init+0x25a>
              error = -error;
 80048de:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80048e2:	bf28      	it	cs
 80048e4:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80048e6:	9c02      	ldr	r4, [sp, #8]
 80048e8:	45a2      	cmp	sl, r4
 80048ea:	d206      	bcs.n	80048fa <BSP_I2C4_Init+0x25a>
              I2c_valid_timing[count].scll = scll;
 80048ec:	9a04      	ldr	r2, [sp, #16]
              I2c_valid_timing[count].sclh = sclh;
 80048ee:	f8cd a008 	str.w	sl, [sp, #8]
              I2c_valid_timing[count].scll = scll;
 80048f2:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80048f4:	9a06      	ldr	r2, [sp, #24]
 80048f6:	60ca      	str	r2, [r1, #12]
 80048f8:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80048fa:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80048fe:	4498      	add	r8, r3
 8004900:	441e      	add	r6, r3
 8004902:	eba9 0903 	sub.w	r9, r9, r3
 8004906:	d1db      	bne.n	80048c0 <BSP_I2C4_Init+0x220>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004908:	9c01      	ldr	r4, [sp, #4]
 800490a:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800490e:	441d      	add	r5, r3
 8004910:	eba4 0403 	sub.w	r4, r4, r3
 8004914:	9401      	str	r4, [sp, #4]
 8004916:	d1be      	bne.n	8004896 <BSP_I2C4_Init+0x1f6>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004918:	3701      	adds	r7, #1
 800491a:	3114      	adds	r1, #20
 800491c:	e770      	b.n	8004800 <BSP_I2C4_Init+0x160>
 800491e:	bf00      	nop
 8004920:	58001c00 	.word	0x58001c00
 8004924:	24002a68 	.word	0x24002a68
 8004928:	24002a64 	.word	0x24002a64
 800492c:	58024400 	.word	0x58024400
 8004930:	58021400 	.word	0x58021400
 8004934:	3b9aca00 	.word	0x3b9aca00
 8004938:	24002060 	.word	0x24002060
 800493c:	24002064 	.word	0x24002064

08004940 <BSP_I2C4_WriteReg>:
{
 8004940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004942:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8004946:	9200      	str	r2, [sp, #0]
 8004948:	460a      	mov	r2, r1
 800494a:	4601      	mov	r1, r0
 800494c:	4808      	ldr	r0, [pc, #32]	@ (8004970 <BSP_I2C4_WriteReg+0x30>)
 800494e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004952:	2301      	movs	r3, #1
 8004954:	f001 fa0a 	bl	8005d6c <HAL_I2C_Mem_Write>
 8004958:	b140      	cbz	r0, 800496c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800495a:	4805      	ldr	r0, [pc, #20]	@ (8004970 <BSP_I2C4_WriteReg+0x30>)
 800495c:	f001 fbc1 	bl	80060e2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004960:	2804      	cmp	r0, #4
 8004962:	bf14      	ite	ne
 8004964:	f06f 0003 	mvnne.w	r0, #3
 8004968:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800496c:	b004      	add	sp, #16
 800496e:	bd10      	pop	{r4, pc}
 8004970:	24002a68 	.word	0x24002a68

08004974 <BSP_I2C4_ReadReg>:
{
 8004974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004976:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800497a:	9200      	str	r2, [sp, #0]
 800497c:	460a      	mov	r2, r1
 800497e:	4601      	mov	r1, r0
 8004980:	4808      	ldr	r0, [pc, #32]	@ (80049a4 <BSP_I2C4_ReadReg+0x30>)
 8004982:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004986:	2301      	movs	r3, #1
 8004988:	f001 faca 	bl	8005f20 <HAL_I2C_Mem_Read>
 800498c:	b140      	cbz	r0, 80049a0 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800498e:	4805      	ldr	r0, [pc, #20]	@ (80049a4 <BSP_I2C4_ReadReg+0x30>)
 8004990:	f001 fba7 	bl	80060e2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004994:	2804      	cmp	r0, #4
 8004996:	bf14      	ite	ne
 8004998:	f06f 0003 	mvnne.w	r0, #3
 800499c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80049a0:	b004      	add	sp, #16
 80049a2:	bd10      	pop	{r4, pc}
 80049a4:	24002a68 	.word	0x24002a68

080049a8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80049a8:	f000 bcd2 	b.w	8005350 <HAL_GetTick>

080049ac <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 80049ac:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80049ae:	4c21      	ldr	r4, [pc, #132]	@ (8004a34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 80049b0:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80049b2:	4821      	ldr	r0, [pc, #132]	@ (8004a38 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049b4:	78a2      	ldrb	r2, [r4, #2]
 80049b6:	7861      	ldrb	r1, [r4, #1]
 80049b8:	f7ff fc8f 	bl	80042da <MX25LM51245G_WriteEnable>
 80049bc:	b118      	cbz	r0, 80049c6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80049be:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80049c2:	b005      	add	sp, #20
 80049c4:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 80049c6:	2303      	movs	r3, #3
 80049c8:	481b      	ldr	r0, [pc, #108]	@ (8004a38 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80049d0:	78a2      	ldrb	r2, [r4, #2]
 80049d2:	7861      	ldrb	r1, [r4, #1]
 80049d4:	f7ff fcfa 	bl	80043cc <MX25LM51245G_WriteCfg2Register>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1f0      	bne.n	80049be <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80049dc:	78a2      	ldrb	r2, [r4, #2]
 80049de:	7861      	ldrb	r1, [r4, #1]
 80049e0:	4815      	ldr	r0, [pc, #84]	@ (8004a38 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049e2:	f7ff fc7a 	bl	80042da <MX25LM51245G_WriteEnable>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d1e8      	bne.n	80049be <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80049ec:	2501      	movs	r5, #1
 80049ee:	4812      	ldr	r0, [pc, #72]	@ (8004a38 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049f0:	9500      	str	r5, [sp, #0]
 80049f2:	78a2      	ldrb	r2, [r4, #2]
 80049f4:	7861      	ldrb	r1, [r4, #1]
 80049f6:	f7ff fce9 	bl	80043cc <MX25LM51245G_WriteCfg2Register>
 80049fa:	4604      	mov	r4, r0
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d1de      	bne.n	80049be <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004a00:	2028      	movs	r0, #40	@ 0x28
 8004a02:	f000 fcab 	bl	800535c <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004a06:	4622      	mov	r2, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	480b      	ldr	r0, [pc, #44]	@ (8004a38 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004a0c:	f7ff fb44 	bl	8004098 <MX25LM51245G_AutoPollingMemReady>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d1d3      	bne.n	80049be <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004a16:	aa03      	add	r2, sp, #12
 8004a18:	4629      	mov	r1, r5
 8004a1a:	9200      	str	r2, [sp, #0]
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4806      	ldr	r0, [pc, #24]	@ (8004a38 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004a20:	f7ff fd2d 	bl	800447e <MX25LM51245G_ReadCfg2Register>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d1ca      	bne.n	80049be <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8004a28:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	d0c8      	beq.n	80049c2 <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8004a30:	e7c5      	b.n	80049be <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8004a32:	bf00      	nop
 8004a34:	24002abc 	.word	0x24002abc
 8004a38:	24002ac4 	.word	0x24002ac4

08004a3c <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004a3c:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a3e:	4d27      	ldr	r5, [pc, #156]	@ (8004adc <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004a40:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a42:	4c27      	ldr	r4, [pc, #156]	@ (8004ae0 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8004a44:	78aa      	ldrb	r2, [r5, #2]
 8004a46:	7869      	ldrb	r1, [r5, #1]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff fc46 	bl	80042da <MX25LM51245G_WriteEnable>
 8004a4e:	b118      	cbz	r0, 8004a58 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a50:	f06f 0004 	mvn.w	r0, #4
}
 8004a54:	b005      	add	sp, #20
 8004a56:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004a58:	2303      	movs	r3, #3
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a62:	78aa      	ldrb	r2, [r5, #2]
 8004a64:	7869      	ldrb	r1, [r5, #1]
 8004a66:	f7ff fcb1 	bl	80043cc <MX25LM51245G_WriteCfg2Register>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d1f0      	bne.n	8004a50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a6e:	78aa      	ldrb	r2, [r5, #2]
 8004a70:	4620      	mov	r0, r4
 8004a72:	7869      	ldrb	r1, [r5, #1]
 8004a74:	f7ff fc31 	bl	80042da <MX25LM51245G_WriteEnable>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d1e8      	bne.n	8004a50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8004a7e:	2202      	movs	r2, #2
 8004a80:	4620      	mov	r0, r4
 8004a82:	9200      	str	r2, [sp, #0]
 8004a84:	78aa      	ldrb	r2, [r5, #2]
 8004a86:	7869      	ldrb	r1, [r5, #1]
 8004a88:	f7ff fca0 	bl	80043cc <MX25LM51245G_WriteCfg2Register>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d1df      	bne.n	8004a50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004a90:	2028      	movs	r0, #40	@ 0x28
 8004a92:	f000 fc63 	bl	800535c <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004a9a:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004a9c:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004a9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004aa2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004aa4:	f001 fe48 	bl	8006738 <HAL_OSPI_Init>
 8004aa8:	b9a8      	cbnz	r0, 8004ad6 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4620      	mov	r0, r4
 8004aae:	4611      	mov	r1, r2
 8004ab0:	f7ff faf2 	bl	8004098 <MX25LM51245G_AutoPollingMemReady>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d1ca      	bne.n	8004a50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004aba:	aa03      	add	r2, sp, #12
 8004abc:	4620      	mov	r0, r4
 8004abe:	9200      	str	r2, [sp, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	f7ff fcdb 	bl	800447e <MX25LM51245G_ReadCfg2Register>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d1c1      	bne.n	8004a50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004acc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d0bf      	beq.n	8004a54 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004ad4:	e7bc      	b.n	8004a50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004ad6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004ada:	e7bb      	b.n	8004a54 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004adc:	24002abc 	.word	0x24002abc
 8004ae0:	24002ac4 	.word	0x24002ac4

08004ae4 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8004ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8004b20 <MX_OSPI_NOR_Init+0x3c>)
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004aec:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004aee:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004af0:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8004af2:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004af4:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004af6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004afa:	684a      	ldr	r2, [r1, #4]
 8004afc:	6242      	str	r2, [r0, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004afe:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8004b00:	6303      	str	r3, [r0, #48]	@ 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004b02:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004b04:	68ca      	ldr	r2, [r1, #12]
 8004b06:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004b08:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004b0c:	bf12      	itee	ne
 8004b0e:	461a      	movne	r2, r3
 8004b10:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8004b14:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004b18:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004b1a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_OSPI_Init(hospi);
 8004b1c:	f001 be0c 	b.w	8006738 <HAL_OSPI_Init>
 8004b20:	52005000 	.word	0x52005000

08004b24 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8004b24:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b26:	b998      	cbnz	r0, 8004b50 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004b28:	4c0b      	ldr	r4, [pc, #44]	@ (8004b58 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004b2a:	78a3      	ldrb	r3, [r4, #2]
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004b2c:	7861      	ldrb	r1, [r4, #1]
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004b2e:	b95b      	cbnz	r3, 8004b48 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004b30:	2201      	movs	r2, #1
 8004b32:	480a      	ldr	r0, [pc, #40]	@ (8004b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004b34:	f7ff fb15 	bl	8004162 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8004b38:	b110      	cbz	r0, 8004b40 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b3a:	f06f 0004 	mvn.w	r0, #4
}
 8004b3e:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004b40:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8004b42:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004b44:	7023      	strb	r3, [r4, #0]
 8004b46:	e7fa      	b.n	8004b3e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8004b48:	4804      	ldr	r0, [pc, #16]	@ (8004b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004b4a:	f7ff fb77 	bl	800423c <MX25LM51245G_EnableDTRMemoryMappedMode>
 8004b4e:	e7f3      	b.n	8004b38 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8004b50:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004b54:	e7f3      	b.n	8004b3e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8004b56:	bf00      	nop
 8004b58:	24002abc 	.word	0x24002abc
 8004b5c:	24002ac4 	.word	0x24002ac4

08004b60 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8004b60:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b62:	b950      	cbnz	r0, 8004b7a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8004b64:	4c09      	ldr	r4, [pc, #36]	@ (8004b8c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8004b66:	7823      	ldrb	r3, [r4, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d109      	bne.n	8004b80 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8004b6c:	4808      	ldr	r0, [pc, #32]	@ (8004b90 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8004b6e:	f002 f82e 	bl	8006bce <HAL_OSPI_Abort>
 8004b72:	b940      	cbnz	r0, 8004b86 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004b74:	2301      	movs	r3, #1
 8004b76:	7023      	strb	r3, [r4, #0]
}
 8004b78:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004b7a:	f06f 0001 	mvn.w	r0, #1
 8004b7e:	e7fb      	b.n	8004b78 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004b80:	f06f 001a 	mvn.w	r0, #26
 8004b84:	e7f8      	b.n	8004b78 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004b86:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004b8a:	e7f5      	b.n	8004b78 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8004b8c:	24002abc 	.word	0x24002abc
 8004b90:	24002ac4 	.word	0x24002ac4

08004b94 <BSP_OSPI_NOR_DeInit>:
{
 8004b94:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d156      	bne.n	8004c48 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004b9a:	4c2d      	ldr	r4, [pc, #180]	@ (8004c50 <BSP_OSPI_NOR_DeInit+0xbc>)
 8004b9c:	7823      	ldrb	r3, [r4, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d04b      	beq.n	8004c3a <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004ba2:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ba8:	482a      	ldr	r0, [pc, #168]	@ (8004c54 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004baa:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8004bac:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004bae:	f000 fe8f 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	4828      	ldr	r0, [pc, #160]	@ (8004c58 <BSP_OSPI_NOR_DeInit+0xc4>)
 8004bb6:	f000 fe8b 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8004bba:	2140      	movs	r1, #64	@ 0x40
 8004bbc:	4827      	ldr	r0, [pc, #156]	@ (8004c5c <BSP_OSPI_NOR_DeInit+0xc8>)
 8004bbe:	f000 fe87 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8004bc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bc6:	4826      	ldr	r0, [pc, #152]	@ (8004c60 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bc8:	f000 fe82 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8004bcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004bd0:	4823      	ldr	r0, [pc, #140]	@ (8004c60 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bd2:	f000 fe7d 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8004bd6:	2104      	movs	r1, #4
 8004bd8:	4822      	ldr	r0, [pc, #136]	@ (8004c64 <BSP_OSPI_NOR_DeInit+0xd0>)
 8004bda:	f000 fe79 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8004bde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004be2:	481f      	ldr	r0, [pc, #124]	@ (8004c60 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004be4:	f000 fe74 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8004be8:	2110      	movs	r1, #16
 8004bea:	481d      	ldr	r0, [pc, #116]	@ (8004c60 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bec:	f000 fe70 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	481b      	ldr	r0, [pc, #108]	@ (8004c60 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bf4:	f000 fe6c 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8004bf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004bfc:	4817      	ldr	r0, [pc, #92]	@ (8004c5c <BSP_OSPI_NOR_DeInit+0xc8>)
 8004bfe:	f000 fe67 	bl	80058d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8004c02:	2180      	movs	r1, #128	@ 0x80
 8004c04:	4816      	ldr	r0, [pc, #88]	@ (8004c60 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004c06:	f000 fe63 	bl	80058d0 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8004c0a:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004c0c:	4817      	ldr	r0, [pc, #92]	@ (8004c6c <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8004c0e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c14:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004c16:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004c18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_CLK_DISABLE();
 8004c1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8004c22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c26:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004c2a:	f001 fdf9 	bl	8006820 <HAL_OSPI_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	bf14      	ite	ne
 8004c32:	f06f 0003 	mvnne.w	r0, #3
 8004c36:	2000      	moveq	r0, #0
}
 8004c38:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004c3a:	f7ff ff91 	bl	8004b60 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d0af      	beq.n	8004ba2 <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004c42:	f06f 0004 	mvn.w	r0, #4
 8004c46:	e7f7      	b.n	8004c38 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8004c48:	f06f 0001 	mvn.w	r0, #1
 8004c4c:	e7f4      	b.n	8004c38 <BSP_OSPI_NOR_DeInit+0xa4>
 8004c4e:	bf00      	nop
 8004c50:	24002abc 	.word	0x24002abc
 8004c54:	58021400 	.word	0x58021400
 8004c58:	58020400 	.word	0x58020400
 8004c5c:	58021800 	.word	0x58021800
 8004c60:	58020c00 	.word	0x58020c00
 8004c64:	58021000 	.word	0x58021000
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	24002ac4 	.word	0x24002ac4

08004c70 <BSP_OSPI_NOR_ConfigFlash>:
{
 8004c70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004c74:	460d      	mov	r5, r1
 8004c76:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d156      	bne.n	8004d2a <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004c7c:	4c2e      	ldr	r4, [pc, #184]	@ (8004d38 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8004c7e:	7823      	ldrb	r3, [r4, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d055      	beq.n	8004d30 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004c84:	7863      	ldrb	r3, [r4, #1]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d146      	bne.n	8004d18 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8004c8a:	2901      	cmp	r1, #1
 8004c8c:	78a2      	ldrb	r2, [r4, #2]
 8004c8e:	d109      	bne.n	8004ca4 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8004c90:	4296      	cmp	r6, r2
 8004c92:	d107      	bne.n	8004ca4 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c94:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004c96:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8004c98:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c9a:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004c9c:	70a6      	strb	r6, [r4, #2]
}
 8004c9e:	b004      	add	sp, #16
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004ca4:	4f25      	ldr	r7, [pc, #148]	@ (8004d3c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f7ff fb16 	bl	80042da <MX25LM51245G_WriteEnable>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	bb78      	cbnz	r0, 8004d12 <BSP_OSPI_NOR_ConfigFlash+0xa2>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004cb2:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
 8004cb4:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004cb8:	4638      	mov	r0, r7
 8004cba:	78a2      	ldrb	r2, [r4, #2]
 8004cbc:	7861      	ldrb	r1, [r4, #1]
 8004cbe:	f7ff fb85 	bl	80043cc <MX25LM51245G_WriteCfg2Register>
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	bb28      	cbnz	r0, 8004d12 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004cc6:	2028      	movs	r0, #40	@ 0x28
 8004cc8:	f000 fb48 	bl	800535c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004ccc:	78a3      	ldrb	r3, [r4, #2]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d106      	bne.n	8004ce0 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004cd2:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004cd4:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004cd8:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004cdc:	f001 fd2c 	bl	8006738 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4816      	ldr	r0, [pc, #88]	@ (8004d3c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	f7ff f9d7 	bl	8004098 <MX25LM51245G_AutoPollingMemReady>
 8004cea:	4603      	mov	r3, r0
 8004cec:	b988      	cbnz	r0, 8004d12 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004cee:	aa03      	add	r2, sp, #12
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	9200      	str	r2, [sp, #0]
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4811      	ldr	r0, [pc, #68]	@ (8004d3c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004cf8:	f7ff fbc1 	bl	800447e <MX25LM51245G_ReadCfg2Register>
 8004cfc:	b948      	cbnz	r0, 8004d12 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8004cfe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004d02:	b933      	cbnz	r3, 8004d12 <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004d04:	2d01      	cmp	r5, #1
 8004d06:	d1c5      	bne.n	8004c94 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004d08:	78a3      	ldrb	r3, [r4, #2]
 8004d0a:	b94b      	cbnz	r3, 8004d20 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004d0c:	f7ff fe96 	bl	8004a3c <OSPI_NOR_EnterDOPIMode.constprop.0>
 8004d10:	e008      	b.n	8004d24 <BSP_OSPI_NOR_ConfigFlash+0xb4>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d12:	f06f 0004 	mvn.w	r0, #4
 8004d16:	e7c2      	b.n	8004c9e <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8004d18:	2901      	cmp	r1, #1
 8004d1a:	d1bb      	bne.n	8004c94 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	d1f5      	bne.n	8004d0c <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004d20:	f7ff fe44 	bl	80049ac <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d1ba      	bne.n	8004c9e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004d28:	e7b4      	b.n	8004c94 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8004d2a:	f06f 0001 	mvn.w	r0, #1
 8004d2e:	e7b6      	b.n	8004c9e <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004d30:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8004d34:	e7b3      	b.n	8004c9e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004d36:	bf00      	nop
 8004d38:	24002abc 	.word	0x24002abc
 8004d3c:	24002ac4 	.word	0x24002ac4

08004d40 <MX_OSPI_ClockConfig>:
{
 8004d40:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
{
 8004d46:	b0af      	sub	sp, #188	@ 0xbc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d48:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004d4a:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d4c:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004d50:	2320      	movs	r3, #32
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004d52:	2250      	movs	r2, #80	@ 0x50
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004d54:	9313      	str	r3, [sp, #76]	@ 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004d56:	2305      	movs	r3, #5
 8004d58:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8004d5c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004d5e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004d60:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004d64:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004d66:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8004d6a:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004d6c:	f002 ffc0 	bl	8007cf0 <HAL_RCCEx_PeriphCLKConfig>
}
 8004d70:	b02f      	add	sp, #188	@ 0xbc
 8004d72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004d78 <BSP_OSPI_NOR_Init>:
{
 8004d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	b09b      	sub	sp, #108	@ 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f040 8160 	bne.w	8005046 <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004d86:	4eb1      	ldr	r6, [pc, #708]	@ (800504c <BSP_OSPI_NOR_Init+0x2d4>)
 8004d88:	7834      	ldrb	r4, [r6, #0]
 8004d8a:	b11c      	cbz	r4, 8004d94 <BSP_OSPI_NOR_Init+0x1c>
      ret = BSP_ERROR_NONE;
 8004d8c:	2000      	movs	r0, #0
}
 8004d8e:	b01b      	add	sp, #108	@ 0x6c
 8004d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OSPI_NOR_CLK_ENABLE();
 8004d94:	4bae      	ldr	r3, [pc, #696]	@ (8005050 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004d96:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004d9a:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004d9e:	a911      	add	r1, sp, #68	@ 0x44
  OSPI_NOR_CLK_ENABLE();
 8004da0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004da4:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004da6:	48ab      	ldr	r0, [pc, #684]	@ (8005054 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8004da8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dac:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8004db0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8004db4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004db8:	9201      	str	r2, [sp, #4]
 8004dba:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8004dbc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004dbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc2:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004dc4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004dc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dca:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004dd0:	f042 0220 	orr.w	r2, r2, #32
 8004dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004dd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004ddc:	f002 0220 	and.w	r2, r2, #32
 8004de0:	9202      	str	r2, [sp, #8]
 8004de2:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8004de4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004de8:	f042 0202 	orr.w	r2, r2, #2
 8004dec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004df0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004df4:	f002 0202 	and.w	r2, r2, #2
 8004df8:	9203      	str	r2, [sp, #12]
 8004dfa:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004dfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e04:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e0c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8004e10:	9204      	str	r2, [sp, #16]
 8004e12:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8004e14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e24:	f002 0208 	and.w	r2, r2, #8
 8004e28:	9205      	str	r2, [sp, #20]
 8004e2a:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8004e2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e3c:	f002 0208 	and.w	r2, r2, #8
 8004e40:	9206      	str	r2, [sp, #24]
 8004e42:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8004e44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e48:	f042 0210 	orr.w	r2, r2, #16
 8004e4c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e54:	f002 0210 	and.w	r2, r2, #16
 8004e58:	9207      	str	r2, [sp, #28]
 8004e5a:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8004e5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e60:	f042 0208 	orr.w	r2, r2, #8
 8004e64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e6c:	f002 0208 	and.w	r2, r2, #8
 8004e70:	9208      	str	r2, [sp, #32]
 8004e72:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8004e74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e78:	f042 0208 	orr.w	r2, r2, #8
 8004e7c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e84:	f002 0208 	and.w	r2, r2, #8
 8004e88:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8004e8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e90:	f042 0208 	orr.w	r2, r2, #8
 8004e94:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004e98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004e9c:	f002 0208 	and.w	r2, r2, #8
 8004ea0:	920a      	str	r2, [sp, #40]	@ 0x28
 8004ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8004ea4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004eb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004eb4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8004eb8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004eba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004ebc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004ec0:	f042 0208 	orr.w	r2, r2, #8
 8004ec4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec8:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ed4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004ed6:	2340      	movs	r3, #64	@ 0x40
 8004ed8:	e9cd 3911 	strd	r3, r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004edc:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004ede:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee2:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004ee6:	f000 fc11 	bl	800570c <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004eea:	a911      	add	r1, sp, #68	@ 0x44
 8004eec:	485a      	ldr	r0, [pc, #360]	@ (8005058 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004eee:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004ef0:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004ef2:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004ef6:	f000 fc09 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004efe:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004f00:	2409      	movs	r4, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004f02:	a911      	add	r1, sp, #68	@ 0x44
 8004f04:	4855      	ldr	r0, [pc, #340]	@ (800505c <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004f06:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004f08:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004f0a:	f000 fbff 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004f0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004f12:	a911      	add	r1, sp, #68	@ 0x44
 8004f14:	4852      	ldr	r0, [pc, #328]	@ (8005060 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004f16:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004f18:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004f1a:	f000 fbf7 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004f22:	a911      	add	r1, sp, #68	@ 0x44
 8004f24:	484e      	ldr	r0, [pc, #312]	@ (8005060 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004f26:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004f28:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004f2a:	f000 fbef 	bl	800570c <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004f2e:	a911      	add	r1, sp, #68	@ 0x44
 8004f30:	484c      	ldr	r0, [pc, #304]	@ (8005064 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8004f32:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004f34:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8004f36:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004f38:	f000 fbe8 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004f40:	a911      	add	r1, sp, #68	@ 0x44
 8004f42:	4847      	ldr	r0, [pc, #284]	@ (8005060 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004f44:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8004f46:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004f48:	f000 fbe0 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004f4c:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004f4e:	a911      	add	r1, sp, #68	@ 0x44
 8004f50:	4843      	ldr	r0, [pc, #268]	@ (8005060 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004f52:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8004f54:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004f58:	f000 fbd8 	bl	800570c <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004f5c:	a911      	add	r1, sp, #68	@ 0x44
 8004f5e:	4840      	ldr	r0, [pc, #256]	@ (8005060 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004f60:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8004f62:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004f66:	f000 fbd1 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004f6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004f6e:	a911      	add	r1, sp, #68	@ 0x44
 8004f70:	4838      	ldr	r0, [pc, #224]	@ (8005054 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004f72:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8004f74:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004f76:	f000 fbc9 	bl	800570c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004f7a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004f7c:	a911      	add	r1, sp, #68	@ 0x44
 8004f7e:	4838      	ldr	r0, [pc, #224]	@ (8005060 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004f80:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8004f82:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004f86:	f000 fbc1 	bl	800570c <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004f8a:	a811      	add	r0, sp, #68	@ 0x44
 8004f8c:	f7ff f86b 	bl	8004066 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
      ospi_config.ClockPrescaler = 2U;
 8004f92:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8004f96:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f9a:	b10b      	cbz	r3, 8004fa0 <BSP_OSPI_NOR_Init+0x228>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004f9c:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004fa0:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004fa2:	4831      	ldr	r0, [pc, #196]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004fa4:	970d      	str	r7, [sp, #52]	@ 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004fa6:	930f      	str	r3, [sp, #60]	@ 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8004fa8:	786b      	ldrb	r3, [r5, #1]
 8004faa:	9310      	str	r3, [sp, #64]	@ 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004fac:	f7ff fec8 	bl	8004d40 <MX_OSPI_ClockConfig>
 8004fb0:	b110      	cbz	r0, 8004fb8 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004fb2:	f06f 0003 	mvn.w	r0, #3
 8004fb6:	e6ea      	b.n	8004d8e <BSP_OSPI_NOR_Init+0x16>
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004fb8:	a90d      	add	r1, sp, #52	@ 0x34
 8004fba:	482b      	ldr	r0, [pc, #172]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fbc:	f7ff fd92 	bl	8004ae4 <MX_OSPI_NOR_Init>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d1f5      	bne.n	8004fb2 <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	4827      	ldr	r0, [pc, #156]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fca:	f7ff fab8 	bl	800453e <MX25LM51245G_ResetEnable>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	b110      	cbz	r0, 8004fd8 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fd2:	f06f 0004 	mvn.w	r0, #4
 8004fd6:	e6da      	b.n	8004d8e <BSP_OSPI_NOR_Init+0x16>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fd8:	4601      	mov	r1, r0
 8004fda:	4823      	ldr	r0, [pc, #140]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fdc:	f7ff fae1 	bl	80045a2 <MX25LM51245G_ResetMemory>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d1f5      	bne.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	481f      	ldr	r0, [pc, #124]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fea:	f7ff faa8 	bl	800453e <MX25LM51245G_ResetEnable>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d1ee      	bne.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	481c      	ldr	r0, [pc, #112]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8004ff8:	f7ff fad3 	bl	80045a2 <MX25LM51245G_ResetMemory>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1e8      	bne.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8005000:	2201      	movs	r2, #1
 8005002:	4819      	ldr	r0, [pc, #100]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8005004:	4611      	mov	r1, r2
 8005006:	f7ff fa9a 	bl	800453e <MX25LM51245G_ResetEnable>
 800500a:	2800      	cmp	r0, #0
 800500c:	d1e1      	bne.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800500e:	2201      	movs	r2, #1
 8005010:	4815      	ldr	r0, [pc, #84]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 8005012:	4611      	mov	r1, r2
 8005014:	f7ff fac5 	bl	80045a2 <MX25LM51245G_ResetMemory>
 8005018:	2800      	cmp	r0, #0
 800501a:	d1da      	bne.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800501c:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800501e:	70b0      	strb	r0, [r6, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8005020:	2064      	movs	r0, #100	@ 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8005022:	8033      	strh	r3, [r6, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8005024:	f000 f99a 	bl	800535c <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005028:	78b2      	ldrb	r2, [r6, #2]
 800502a:	7871      	ldrb	r1, [r6, #1]
 800502c:	480e      	ldr	r0, [pc, #56]	@ (8005068 <BSP_OSPI_NOR_Init+0x2f0>)
 800502e:	f7ff f833 	bl	8004098 <MX25LM51245G_AutoPollingMemReady>
 8005032:	2800      	cmp	r0, #0
 8005034:	d1cd      	bne.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005036:	786a      	ldrb	r2, [r5, #1]
 8005038:	7829      	ldrb	r1, [r5, #0]
 800503a:	f7ff fe19 	bl	8004c70 <BSP_OSPI_NOR_ConfigFlash>
 800503e:	2800      	cmp	r0, #0
 8005040:	f43f aea4 	beq.w	8004d8c <BSP_OSPI_NOR_Init+0x14>
 8005044:	e7c5      	b.n	8004fd2 <BSP_OSPI_NOR_Init+0x25a>
    ret = BSP_ERROR_WRONG_PARAM;
 8005046:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800504a:	e6a0      	b.n	8004d8e <BSP_OSPI_NOR_Init+0x16>
 800504c:	24002abc 	.word	0x24002abc
 8005050:	58024400 	.word	0x58024400
 8005054:	58021800 	.word	0x58021800
 8005058:	58020400 	.word	0x58020400
 800505c:	58021400 	.word	0x58021400
 8005060:	58020c00 	.word	0x58020c00
 8005064:	58021000 	.word	0x58021000
 8005068:	24002ac4 	.word	0x24002ac4

0800506c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	460c      	mov	r4, r1
 8005072:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005074:	2800      	cmp	r0, #0
 8005076:	d163      	bne.n	8005140 <BSP_TS_Init+0xd4>
 8005078:	680b      	ldr	r3, [r1, #0]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8005080:	d25e      	bcs.n	8005140 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005082:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005084:	1e51      	subs	r1, r2, #1
 8005086:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800508a:	d259      	bcs.n	8005140 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800508c:	4293      	cmp	r3, r2
 800508e:	bf28      	it	cs
 8005090:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005092:	68e2      	ldr	r2, [r4, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d853      	bhi.n	8005140 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005098:	2370      	movs	r3, #112	@ 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800509a:	4d2b      	ldr	r5, [pc, #172]	@ (8005148 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 800509c:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800509e:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 80050a0:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80050a4:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 80050a6:	4b29      	ldr	r3, [pc, #164]	@ (800514c <BSP_TS_Init+0xe0>)
 80050a8:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80050aa:	4b29      	ldr	r3, [pc, #164]	@ (8005150 <BSP_TS_Init+0xe4>)
 80050ac:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80050ae:	4b29      	ldr	r3, [pc, #164]	@ (8005154 <BSP_TS_Init+0xe8>)
 80050b0:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80050b2:	4b29      	ldr	r3, [pc, #164]	@ (8005158 <BSP_TS_Init+0xec>)
 80050b4:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 80050b6:	4b29      	ldr	r3, [pc, #164]	@ (800515c <BSP_TS_Init+0xf0>)
 80050b8:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80050ba:	f7fe ff3f 	bl	8003f3c <FT5336_RegisterBusIO>
 80050be:	b128      	cbz	r0, 80050cc <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 80050c0:	f04f 35ff 	mov.w	r5, #4294967295
}
 80050c4:	4628      	mov	r0, r5
 80050c6:	b008      	add	sp, #32
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80050cc:	a901      	add	r1, sp, #4
 80050ce:	4628      	mov	r0, r5
 80050d0:	f7fe fe9b 	bl	8003e0a <FT5336_ReadID>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1f3      	bne.n	80050c0 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	2b51      	cmp	r3, #81	@ 0x51
 80050dc:	d1f0      	bne.n	80050c0 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050de:	4b20      	ldr	r3, [pc, #128]	@ (8005160 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80050e0:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 80050e2:	4f20      	ldr	r7, [pc, #128]	@ (8005164 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050e4:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800516c <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 80050e8:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050ea:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4798      	blx	r3
 80050f2:	4605      	mov	r5, r0
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d1e3      	bne.n	80050c0 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050f8:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050fa:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050fc:	4e1a      	ldr	r6, [pc, #104]	@ (8005168 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050fe:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8005100:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800510e:	f8d8 3000 	ldr.w	r3, [r8]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	4798      	blx	r3
 8005116:	2800      	cmp	r0, #0
 8005118:	db0f      	blt.n	800513a <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800511a:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800511c:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800511e:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005120:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005122:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005124:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800512a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800512c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800512e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005130:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005132:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005134:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005138:	e7c4      	b.n	80050c4 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800513a:	f06f 0504 	mvn.w	r5, #4
 800513e:	e7c1      	b.n	80050c4 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8005140:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005144:	e7be      	b.n	80050c4 <BSP_TS_Init+0x58>
 8005146:	bf00      	nop
 8005148:	24002b20 	.word	0x24002b20
 800514c:	080046a1 	.word	0x080046a1
 8005150:	08004609 	.word	0x08004609
 8005154:	08004975 	.word	0x08004975
 8005158:	08004941 	.word	0x08004941
 800515c:	080049a9 	.word	0x080049a9
 8005160:	2400000c 	.word	0x2400000c
 8005164:	24002b70 	.word	0x24002b70
 8005168:	24002b48 	.word	0x24002b48
 800516c:	24002b74 	.word	0x24002b74

08005170 <BSP_TS_GetState>:
{
 8005170:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005174:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8005176:	2800      	cmp	r0, #0
 8005178:	d150      	bne.n	800521c <BSP_TS_GetState+0xac>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800517a:	4b2a      	ldr	r3, [pc, #168]	@ (8005224 <BSP_TS_GetState+0xb4>)
 800517c:	a901      	add	r1, sp, #4
 800517e:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <BSP_TS_GetState+0xb8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6810      	ldr	r0, [r2, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	4798      	blx	r3
 8005188:	2800      	cmp	r0, #0
 800518a:	db44      	blt.n	8005216 <BSP_TS_GetState+0xa6>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800518c:	4927      	ldr	r1, [pc, #156]	@ (800522c <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800518e:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005190:	698d      	ldr	r5, [r1, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005192:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8005194:	2e00      	cmp	r6, #0
 8005196:	d03a      	beq.n	800520e <BSP_TS_GetState+0x9e>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005198:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800519c:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80051a0:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 80051a4:	e9dd c702 	ldrd	ip, r7, [sp, #8]
        x_oriented = state.TouchY;
 80051a8:	bf19      	ittee	ne
 80051aa:	463b      	movne	r3, r7
        y_oriented = state.TouchX;
 80051ac:	4662      	movne	r2, ip
      y_oriented = state.TouchY;
 80051ae:	463a      	moveq	r2, r7
      x_oriented = state.TouchX;
 80051b0:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80051b2:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80051b6:	bf1c      	itt	ne
 80051b8:	f108 33ff 	addne.w	r3, r8, #4294967295
 80051bc:	eba3 030c 	subne.w	r3, r3, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80051c0:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80051c4:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80051c8:	bf18      	it	ne
 80051ca:	ebac 0207 	subne.w	r2, ip, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051ce:	680f      	ldr	r7, [r1, #0]
 80051d0:	437b      	muls	r3, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051d2:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80051d4:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051d6:	437a      	muls	r2, r7
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80051d8:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051da:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051de:	fbb2 f2fc 	udiv	r2, r2, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80051e2:	42ab      	cmp	r3, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051e4:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051e6:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80051e8:	bf8c      	ite	hi
 80051ea:	eba3 0c05 	subhi.w	ip, r3, r5
 80051ee:	eba5 0c03 	subls.w	ip, r5, r3
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80051f2:	4282      	cmp	r2, r0
 80051f4:	bf8c      	ite	hi
 80051f6:	1a16      	subhi	r6, r2, r0
 80051f8:	1a86      	subls	r6, r0, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80051fa:	4567      	cmp	r7, ip
 80051fc:	d301      	bcc.n	8005202 <BSP_TS_GetState+0x92>
 80051fe:	42b7      	cmp	r7, r6
 8005200:	d206      	bcs.n	8005210 <BSP_TS_GetState+0xa0>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005202:	618b      	str	r3, [r1, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005204:	620a      	str	r2, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005206:	2000      	movs	r0, #0
}
 8005208:	b004      	add	sp, #16
 800520a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TS_State->TouchDetected = 0U;
 800520e:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005210:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8005214:	e7f7      	b.n	8005206 <BSP_TS_GetState+0x96>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005216:	f06f 0004 	mvn.w	r0, #4
 800521a:	e7f5      	b.n	8005208 <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 800521c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005220:	e7f2      	b.n	8005208 <BSP_TS_GetState+0x98>
 8005222:	bf00      	nop
 8005224:	24002b74 	.word	0x24002b74
 8005228:	24002b70 	.word	0x24002b70
 800522c:	24002b48 	.word	0x24002b48

08005230 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005230:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <SystemInit+0x8c>)
 8005232:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800523a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800523e:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <SystemInit+0x90>)
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	2b06      	cmp	r3, #6
 8005248:	d805      	bhi.n	8005256 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800524a:	6813      	ldr	r3, [r2, #0]
 800524c:	f023 030f 	bic.w	r3, r3, #15
 8005250:	f043 0307 	orr.w	r3, r3, #7
 8005254:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005256:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <SystemInit+0x94>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005260:	2200      	movs	r2, #0
 8005262:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005264:	4a18      	ldr	r2, [pc, #96]	@ (80052c8 <SystemInit+0x98>)
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800526a:	4915      	ldr	r1, [pc, #84]	@ (80052c0 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 800526c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800526e:	680a      	ldr	r2, [r1, #0]
 8005270:	0712      	lsls	r2, r2, #28
 8005272:	d505      	bpl.n	8005280 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005274:	680a      	ldr	r2, [r1, #0]
 8005276:	f022 020f 	bic.w	r2, r2, #15
 800527a:	f042 0207 	orr.w	r2, r2, #7
 800527e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005280:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005282:	4912      	ldr	r1, [pc, #72]	@ (80052cc <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8005284:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005286:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005288:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800528a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800528c:	4910      	ldr	r1, [pc, #64]	@ (80052d0 <SystemInit+0xa0>)
 800528e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005290:	4910      	ldr	r1, [pc, #64]	@ (80052d4 <SystemInit+0xa4>)
 8005292:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005296:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005298:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800529a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800529c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80052a4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80052a6:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80052a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <SystemInit+0xa8>)
 80052ae:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80052b4:	4b01      	ldr	r3, [pc, #4]	@ (80052bc <SystemInit+0x8c>)
 80052b6:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000ed00 	.word	0xe000ed00
 80052c0:	52002000 	.word	0x52002000
 80052c4:	58024400 	.word	0x58024400
 80052c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80052cc:	02020200 	.word	0x02020200
 80052d0:	01ff0000 	.word	0x01ff0000
 80052d4:	01010280 	.word	0x01010280
 80052d8:	52004000 	.word	0x52004000

080052dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052dc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052de:	2003      	movs	r0, #3
 80052e0:	f000 f84e 	bl	8005380 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052e4:	f002 f9dc 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 80052e8:	490f      	ldr	r1, [pc, #60]	@ (8005328 <HAL_Init+0x4c>)
 80052ea:	4a10      	ldr	r2, [pc, #64]	@ (800532c <HAL_Init+0x50>)
 80052ec:	698b      	ldr	r3, [r1, #24]
 80052ee:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052fa:	698b      	ldr	r3, [r1, #24]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	5cd3      	ldrb	r3, [r2, r3]
 8005302:	4a0b      	ldr	r2, [pc, #44]	@ (8005330 <HAL_Init+0x54>)
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa20 f303 	lsr.w	r3, r0, r3
 800530c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800530e:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <HAL_Init+0x58>)
 8005310:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005312:	2000      	movs	r0, #0
 8005314:	f7fc f818 	bl	8001348 <HAL_InitTick>
 8005318:	4604      	mov	r4, r0
 800531a:	b918      	cbnz	r0, 8005324 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800531c:	f7fb fd20 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005320:	4620      	mov	r0, r4
 8005322:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005324:	2401      	movs	r4, #1
 8005326:	e7fb      	b.n	8005320 <HAL_Init+0x44>
 8005328:	58024400 	.word	0x58024400
 800532c:	0802e500 	.word	0x0802e500
 8005330:	2400003c 	.word	0x2400003c
 8005334:	24000040 	.word	0x24000040

08005338 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005338:	4a03      	ldr	r2, [pc, #12]	@ (8005348 <HAL_IncTick+0x10>)
 800533a:	4b04      	ldr	r3, [pc, #16]	@ (800534c <HAL_IncTick+0x14>)
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	440b      	add	r3, r1
 8005342:	6013      	str	r3, [r2, #0]
}
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	24002b78 	.word	0x24002b78
 800534c:	24000044 	.word	0x24000044

08005350 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005350:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <HAL_GetTick+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	24002b78 	.word	0x24002b78

0800535c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005360:	f7ff fff6 	bl	8005350 <HAL_GetTick>
 8005364:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005366:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005368:	bf1e      	ittt	ne
 800536a:	4b04      	ldrne	r3, [pc, #16]	@ (800537c <HAL_Delay+0x20>)
 800536c:	781b      	ldrbne	r3, [r3, #0]
 800536e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005370:	f7ff ffee 	bl	8005350 <HAL_GetTick>
 8005374:	1b43      	subs	r3, r0, r5
 8005376:	42a3      	cmp	r3, r4
 8005378:	d3fa      	bcc.n	8005370 <HAL_Delay+0x14>
  {
  }
}
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	24000044 	.word	0x24000044

08005380 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005380:	4907      	ldr	r1, [pc, #28]	@ (80053a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005382:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005384:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005386:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800538e:	0412      	lsls	r2, r2, #16
 8005390:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800539c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800539e:	4770      	bx	lr
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a4:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a6:	b530      	push	{r4, r5, lr}
 80053a8:	68dc      	ldr	r4, [r3, #12]
 80053aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	bf28      	it	cs
 80053b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ba:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053bc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c0:	bf8c      	ite	hi
 80053c2:	3c03      	subhi	r4, #3
 80053c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80053ca:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053cc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053d4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	fa03 f304 	lsl.w	r3, r3, r4
 80053dc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80053e4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80053e6:	db06      	blt.n	80053f6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80053ec:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80053f0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053f4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f6:	f000 000f 	and.w	r0, r0, #15
 80053fa:	4a02      	ldr	r2, [pc, #8]	@ (8005404 <HAL_NVIC_SetPriority+0x60>)
 80053fc:	5413      	strb	r3, [r2, r0]
 80053fe:	e7f9      	b.n	80053f4 <HAL_NVIC_SetPriority+0x50>
 8005400:	e000ed00 	.word	0xe000ed00
 8005404:	e000ed14 	.word	0xe000ed14

08005408 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005408:	2800      	cmp	r0, #0
 800540a:	db07      	blt.n	800541c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540c:	2301      	movs	r3, #1
 800540e:	0941      	lsrs	r1, r0, #5
 8005410:	f000 001f 	and.w	r0, r0, #31
 8005414:	4a02      	ldr	r2, [pc, #8]	@ (8005420 <HAL_NVIC_EnableIRQ+0x18>)
 8005416:	4083      	lsls	r3, r0
 8005418:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000e100 	.word	0xe000e100

08005424 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005424:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <HAL_MPU_Disable+0x18>)
 800542a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800542c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000ed00 	.word	0xe000ed00

08005440 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005440:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_MPU_Enable+0x1c>)
 8005442:	f040 0001 	orr.w	r0, r0, #1
 8005446:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800544a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800544c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005450:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005452:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005456:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800545a:	4770      	bx	lr
 800545c:	e000ed00 	.word	0xe000ed00

08005460 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005460:	7843      	ldrb	r3, [r0, #1]
 8005462:	4a14      	ldr	r2, [pc, #80]	@ (80054b4 <HAL_MPU_ConfigRegion+0x54>)
 8005464:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005468:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005474:	6843      	ldr	r3, [r0, #4]
 8005476:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800547a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800547c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800547e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005480:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005484:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005486:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005488:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800548a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800548e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005490:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005494:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005496:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800549a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800549c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80054a0:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80054a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054a6:	7a01      	ldrb	r1, [r0, #8]
 80054a8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054ac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80054b8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80054ba:	4604      	mov	r4, r0
 80054bc:	b908      	cbnz	r0, 80054c2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80054be:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80054c0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80054c2:	7f43      	ldrb	r3, [r0, #29]
 80054c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80054c8:	b913      	cbnz	r3, 80054d0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80054ca:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80054cc:	f7fb fc60 	bl	8000d90 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80054d4:	7923      	ldrb	r3, [r4, #4]
 80054d6:	b9e3      	cbnz	r3, 8005512 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	4a13      	ldr	r2, [pc, #76]	@ (8005528 <HAL_CRC_Init+0x70>)
 80054dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	f022 0218 	bic.w	r2, r2, #24
 80054e4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80054e6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80054e8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80054ea:	b9d2      	cbnz	r2, 8005522 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054f0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80054f2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	6961      	ldr	r1, [r4, #20]
 80054f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054fc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054fe:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005500:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800550c:	2301      	movs	r3, #1
 800550e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8005510:	e7d6      	b.n	80054c0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005512:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005516:	4620      	mov	r0, r4
 8005518:	f000 f808 	bl	800552c <HAL_CRCEx_Polynomial_Set>
 800551c:	2800      	cmp	r0, #0
 800551e:	d0e2      	beq.n	80054e6 <HAL_CRC_Init+0x2e>
 8005520:	e7cd      	b.n	80054be <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005522:	6922      	ldr	r2, [r4, #16]
 8005524:	e7e4      	b.n	80054f0 <HAL_CRC_Init+0x38>
 8005526:	bf00      	nop
 8005528:	04c11db7 	.word	0x04c11db7

0800552c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800552c:	07cb      	lsls	r3, r1, #31
{
 800552e:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005530:	d50d      	bpl.n	800554e <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005532:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005534:	3b01      	subs	r3, #1
 8005536:	d31d      	bcc.n	8005574 <HAL_CRCEx_Polynomial_Set+0x48>
 8005538:	fa21 f403 	lsr.w	r4, r1, r3
 800553c:	07e4      	lsls	r4, r4, #31
 800553e:	d5f9      	bpl.n	8005534 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8005540:	2a10      	cmp	r2, #16
 8005542:	d013      	beq.n	800556c <HAL_CRCEx_Polynomial_Set+0x40>
 8005544:	2a10      	cmp	r2, #16
 8005546:	d804      	bhi.n	8005552 <HAL_CRCEx_Polynomial_Set+0x26>
 8005548:	b13a      	cbz	r2, 800555a <HAL_CRCEx_Polynomial_Set+0x2e>
 800554a:	2a08      	cmp	r2, #8
 800554c:	d010      	beq.n	8005570 <HAL_CRCEx_Polynomial_Set+0x44>
 800554e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005550:	e00b      	b.n	800556a <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8005552:	2a18      	cmp	r2, #24
 8005554:	d1fb      	bne.n	800554e <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8005556:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8005558:	d8f9      	bhi.n	800554e <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800555e:	6883      	ldr	r3, [r0, #8]
 8005560:	f023 0318 	bic.w	r3, r3, #24
 8005564:	4313      	orrs	r3, r2
 8005566:	6083      	str	r3, [r0, #8]
 8005568:	2000      	movs	r0, #0
}
 800556a:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800556c:	2b07      	cmp	r3, #7
 800556e:	e7f3      	b.n	8005558 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8005570:	2b0f      	cmp	r3, #15
 8005572:	e7f1      	b.n	8005558 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8005574:	2a10      	cmp	r2, #16
 8005576:	d1e5      	bne.n	8005544 <HAL_CRCEx_Polynomial_Set+0x18>
 8005578:	e7e9      	b.n	800554e <HAL_CRCEx_Polynomial_Set+0x22>

0800557a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800557a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800557c:	4604      	mov	r4, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d036      	beq.n	80055f0 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005582:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8005586:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800558a:	b91b      	cbnz	r3, 8005594 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800558c:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005590:	f7fb fc16 	bl	8000dc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005594:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005596:	69e0      	ldr	r0, [r4, #28]
 8005598:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800559a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80055a2:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80055aa:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80055ae:	430a      	orrs	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80055b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055b4:	68a2      	ldr	r2, [r4, #8]
 80055b6:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80055ba:	4302      	orrs	r2, r0
 80055bc:	f021 0101 	bic.w	r1, r1, #1
 80055c0:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055c2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80055c4:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c8:	0c12      	lsrs	r2, r2, #16
 80055ca:	0412      	lsls	r2, r2, #16
 80055cc:	430a      	orrs	r2, r1
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80055d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055d2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80055d6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80055da:	0552      	lsls	r2, r2, #21
 80055dc:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055e0:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80055e2:	430a      	orrs	r2, r1
 80055e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055e6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055e8:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055ea:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80055ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80055f0:	2001      	movs	r0, #1
 80055f2:	e7fc      	b.n	80055ee <HAL_DMA2D_Init+0x74>

080055f4 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80055f4:	4770      	bx	lr

080055f6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80055f6:	4770      	bx	lr

080055f8 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055f8:	6803      	ldr	r3, [r0, #0]
{
 80055fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055fc:	685e      	ldr	r6, [r3, #4]
{
 80055fe:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005600:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005602:	07f2      	lsls	r2, r6, #31
 8005604:	d514      	bpl.n	8005630 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005606:	05e9      	lsls	r1, r5, #23
 8005608:	d512      	bpl.n	8005630 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005610:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005612:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800561a:	2201      	movs	r2, #1
 800561c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800561e:	2304      	movs	r3, #4
 8005620:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8005624:	2300      	movs	r3, #0
 8005626:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800562a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800562c:	b103      	cbz	r3, 8005630 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800562e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005630:	06b2      	lsls	r2, r6, #26
 8005632:	d516      	bpl.n	8005662 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005634:	04ab      	lsls	r3, r5, #18
 8005636:	d514      	bpl.n	8005662 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005640:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005642:	2220      	movs	r2, #32
 8005644:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800564e:	2304      	movs	r3, #4
 8005650:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8005654:	2300      	movs	r3, #0
 8005656:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800565a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800565c:	b10b      	cbz	r3, 8005662 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800565e:	4620      	mov	r0, r4
 8005660:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005662:	0730      	lsls	r0, r6, #28
 8005664:	d516      	bpl.n	8005694 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005666:	0529      	lsls	r1, r5, #20
 8005668:	d514      	bpl.n	8005694 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005672:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005674:	2208      	movs	r2, #8
 8005676:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800567a:	f043 0304 	orr.w	r3, r3, #4
 800567e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005680:	2304      	movs	r3, #4
 8005682:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8005686:	2300      	movs	r3, #0
 8005688:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800568c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800568e:	b10b      	cbz	r3, 8005694 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8005690:	4620      	mov	r0, r4
 8005692:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005694:	0772      	lsls	r2, r6, #29
 8005696:	d50b      	bpl.n	80056b0 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005698:	056b      	lsls	r3, r5, #21
 800569a:	d509      	bpl.n	80056b0 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800569c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800569e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80056a8:	2204      	movs	r2, #4
 80056aa:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80056ac:	f7ff ffa2 	bl	80055f4 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80056b0:	07b0      	lsls	r0, r6, #30
 80056b2:	d514      	bpl.n	80056de <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80056b4:	05a9      	lsls	r1, r5, #22
 80056b6:	d512      	bpl.n	80056de <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80056c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80056c2:	2202      	movs	r2, #2
 80056c4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056c8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80056d0:	2300      	movs	r3, #0
 80056d2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80056d6:	6a23      	ldr	r3, [r4, #32]
 80056d8:	b10b      	cbz	r3, 80056de <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80056da:	4620      	mov	r0, r4
 80056dc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80056de:	06f2      	lsls	r2, r6, #27
 80056e0:	d513      	bpl.n	800570a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80056e2:	04eb      	lsls	r3, r5, #19
 80056e4:	d511      	bpl.n	800570a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056e6:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056e8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80056f2:	2210      	movs	r2, #16
 80056f4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056f8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8005700:	2300      	movs	r3, #0
 8005702:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005706:	f7ff ff76 	bl	80055f6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800570a:	bd70      	pop	{r4, r5, r6, pc}

0800570c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800570c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005710:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005712:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 80058cc <HAL_GPIO_Init+0x1c0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005716:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800571a:	680a      	ldr	r2, [r1, #0]
 800571c:	fa32 f503 	lsrs.w	r5, r2, r3
 8005720:	d102      	bne.n	8005728 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8005722:	b003      	add	sp, #12
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005728:	2501      	movs	r5, #1
 800572a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800572e:	ea18 0202 	ands.w	r2, r8, r2
 8005732:	f000 80b7 	beq.w	80058a4 <HAL_GPIO_Init+0x198>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005736:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005738:	2703      	movs	r7, #3
 800573a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800573e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005742:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005746:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005748:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800574c:	2f01      	cmp	r7, #1
 800574e:	d834      	bhi.n	80057ba <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8005750:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005752:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005756:	68cf      	ldr	r7, [r1, #12]
 8005758:	fa07 f70e 	lsl.w	r7, r7, lr
 800575c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005760:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005762:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005764:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005768:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800576c:	409f      	lsls	r7, r3
 800576e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005772:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005774:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005776:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005778:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800577c:	688f      	ldr	r7, [r1, #8]
 800577e:	fa07 f70e 	lsl.w	r7, r7, lr
 8005782:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8005786:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005788:	d119      	bne.n	80057be <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800578a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800578e:	f003 0a07 	and.w	sl, r3, #7
 8005792:	f04f 0b0f 	mov.w	fp, #15
 8005796:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800579a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800579e:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057a2:	fa0b fb0a 	lsl.w	fp, fp, sl
 80057a6:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057aa:	690f      	ldr	r7, [r1, #16]
 80057ac:	fa07 f70a 	lsl.w	r7, r7, sl
 80057b0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80057b4:	f8c8 7020 	str.w	r7, [r8, #32]
 80057b8:	e001      	b.n	80057be <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ba:	2d03      	cmp	r5, #3
 80057bc:	d1da      	bne.n	8005774 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80057be:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057c0:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057c4:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057c8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057cc:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 80057d0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057d2:	d067      	beq.n	80058a4 <HAL_GPIO_Init+0x198>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057d4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80057d8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057dc:	f003 0c03 	and.w	ip, r3, #3
 80057e0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e4:	f045 0502 	orr.w	r5, r5, #2
 80057e8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f0:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 80057f4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80057f8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005800:	f005 0502 	and.w	r5, r5, #2
 8005804:	9501      	str	r5, [sp, #4]
 8005806:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005808:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800580a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800580e:	4d2e      	ldr	r5, [pc, #184]	@ (80058c8 <HAL_GPIO_Init+0x1bc>)
 8005810:	42a8      	cmp	r0, r5
 8005812:	d049      	beq.n	80058a8 <HAL_GPIO_Init+0x19c>
 8005814:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005818:	42a8      	cmp	r0, r5
 800581a:	d047      	beq.n	80058ac <HAL_GPIO_Init+0x1a0>
 800581c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005820:	42a8      	cmp	r0, r5
 8005822:	d045      	beq.n	80058b0 <HAL_GPIO_Init+0x1a4>
 8005824:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005828:	42a8      	cmp	r0, r5
 800582a:	d043      	beq.n	80058b4 <HAL_GPIO_Init+0x1a8>
 800582c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005830:	42a8      	cmp	r0, r5
 8005832:	d041      	beq.n	80058b8 <HAL_GPIO_Init+0x1ac>
 8005834:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005838:	42a8      	cmp	r0, r5
 800583a:	d03f      	beq.n	80058bc <HAL_GPIO_Init+0x1b0>
 800583c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005840:	42a8      	cmp	r0, r5
 8005842:	d03d      	beq.n	80058c0 <HAL_GPIO_Init+0x1b4>
 8005844:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005848:	42a8      	cmp	r0, r5
 800584a:	d03b      	beq.n	80058c4 <HAL_GPIO_Init+0x1b8>
 800584c:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005850:	42a8      	cmp	r0, r5
 8005852:	bf14      	ite	ne
 8005854:	250a      	movne	r5, #10
 8005856:	2509      	moveq	r5, #9
 8005858:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800585c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005860:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005864:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8005866:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800586a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800586c:	bf0c      	ite	eq
 800586e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005870:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005872:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8005876:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8005878:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800587a:	bf0c      	ite	eq
 800587c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800587e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005880:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8005884:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005886:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800588a:	bf0c      	ite	eq
 800588c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800588e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005890:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005892:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8005896:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800589a:	bf54      	ite	pl
 800589c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800589e:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80058a0:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80058a4:	3301      	adds	r3, #1
 80058a6:	e738      	b.n	800571a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058a8:	2500      	movs	r5, #0
 80058aa:	e7d5      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058ac:	2501      	movs	r5, #1
 80058ae:	e7d3      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058b0:	2502      	movs	r5, #2
 80058b2:	e7d1      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058b4:	2503      	movs	r5, #3
 80058b6:	e7cf      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058b8:	2504      	movs	r5, #4
 80058ba:	e7cd      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058bc:	2505      	movs	r5, #5
 80058be:	e7cb      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058c0:	2506      	movs	r5, #6
 80058c2:	e7c9      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058c4:	2507      	movs	r5, #7
 80058c6:	e7c7      	b.n	8005858 <HAL_GPIO_Init+0x14c>
 80058c8:	58020000 	.word	0x58020000
 80058cc:	58024400 	.word	0x58024400

080058d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80058d4:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80058d6:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058da:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80058de:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80058e2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 80058e6:	fa31 f302 	lsrs.w	r3, r1, r2
 80058ea:	d101      	bne.n	80058f0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80058ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80058f0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 80058f4:	ea1c 0601 	ands.w	r6, ip, r1
 80058f8:	d06c      	beq.n	80059d4 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058fa:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058fe:	f002 0703 	and.w	r7, r2, #3
 8005902:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8005906:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005908:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800590c:	fa08 f907 	lsl.w	r9, r8, r7
 8005910:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005914:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005918:	4b37      	ldr	r3, [pc, #220]	@ (80059f8 <HAL_GPIO_DeInit+0x128>)
 800591a:	4298      	cmp	r0, r3
 800591c:	d05c      	beq.n	80059d8 <HAL_GPIO_DeInit+0x108>
 800591e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005922:	4298      	cmp	r0, r3
 8005924:	d05a      	beq.n	80059dc <HAL_GPIO_DeInit+0x10c>
 8005926:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800592a:	4298      	cmp	r0, r3
 800592c:	d058      	beq.n	80059e0 <HAL_GPIO_DeInit+0x110>
 800592e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005932:	4298      	cmp	r0, r3
 8005934:	d056      	beq.n	80059e4 <HAL_GPIO_DeInit+0x114>
 8005936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593a:	4298      	cmp	r0, r3
 800593c:	d054      	beq.n	80059e8 <HAL_GPIO_DeInit+0x118>
 800593e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005942:	4298      	cmp	r0, r3
 8005944:	d052      	beq.n	80059ec <HAL_GPIO_DeInit+0x11c>
 8005946:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800594a:	4298      	cmp	r0, r3
 800594c:	d050      	beq.n	80059f0 <HAL_GPIO_DeInit+0x120>
 800594e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005952:	4298      	cmp	r0, r3
 8005954:	d04e      	beq.n	80059f4 <HAL_GPIO_DeInit+0x124>
 8005956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595a:	4298      	cmp	r0, r3
 800595c:	bf0c      	ite	eq
 800595e:	2309      	moveq	r3, #9
 8005960:	230a      	movne	r3, #10
 8005962:	40bb      	lsls	r3, r7
 8005964:	4573      	cmp	r3, lr
 8005966:	d117      	bne.n	8005998 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005968:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800596c:	ea23 0306 	bic.w	r3, r3, r6
 8005970:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005974:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005978:	ea23 0306 	bic.w	r3, r3, r6
 800597c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	ea23 0306 	bic.w	r3, r3, r6
 8005986:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	ea23 0306 	bic.w	r3, r3, r6
 800598e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005990:	68ab      	ldr	r3, [r5, #8]
 8005992:	ea23 0309 	bic.w	r3, r3, r9
 8005996:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005998:	0053      	lsls	r3, r2, #1
 800599a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800599c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800599e:	fa0b f303 	lsl.w	r3, fp, r3
 80059a2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80059a6:	431d      	orrs	r5, r3
 80059a8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80059aa:	f002 0507 	and.w	r5, r2, #7
 80059ae:	6a37      	ldr	r7, [r6, #32]
 80059b0:	00ad      	lsls	r5, r5, #2
 80059b2:	fa08 f505 	lsl.w	r5, r8, r5
 80059b6:	ea27 0705 	bic.w	r7, r7, r5
 80059ba:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059bc:	68c5      	ldr	r5, [r0, #12]
 80059be:	ea25 0503 	bic.w	r5, r5, r3
 80059c2:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80059c4:	6845      	ldr	r5, [r0, #4]
 80059c6:	ea25 050c 	bic.w	r5, r5, ip
 80059ca:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059cc:	6885      	ldr	r5, [r0, #8]
 80059ce:	ea25 0303 	bic.w	r3, r5, r3
 80059d2:	6083      	str	r3, [r0, #8]
    position++;
 80059d4:	3201      	adds	r2, #1
 80059d6:	e786      	b.n	80058e6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80059d8:	2300      	movs	r3, #0
 80059da:	e7c2      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059dc:	2301      	movs	r3, #1
 80059de:	e7c0      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e7be      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059e4:	2303      	movs	r3, #3
 80059e6:	e7bc      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059e8:	2304      	movs	r3, #4
 80059ea:	e7ba      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059ec:	2305      	movs	r3, #5
 80059ee:	e7b8      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059f0:	2306      	movs	r3, #6
 80059f2:	e7b6      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059f4:	2307      	movs	r3, #7
 80059f6:	e7b4      	b.n	8005962 <HAL_GPIO_DeInit+0x92>
 80059f8:	58020000 	.word	0x58020000

080059fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059fc:	6903      	ldr	r3, [r0, #16]
 80059fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005a00:	bf14      	ite	ne
 8005a02:	2001      	movne	r0, #1
 8005a04:	2000      	moveq	r0, #0
 8005a06:	4770      	bx	lr

08005a08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a08:	b10a      	cbz	r2, 8005a0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a0a:	6181      	str	r1, [r0, #24]
  }
}
 8005a0c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a0e:	0409      	lsls	r1, r1, #16
 8005a10:	e7fb      	b.n	8005a0a <HAL_GPIO_WritePin+0x2>

08005a12 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a12:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a14:	ea01 0203 	and.w	r2, r1, r3
 8005a18:	ea21 0103 	bic.w	r1, r1, r3
 8005a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a20:	6181      	str	r1, [r0, #24]
}
 8005a22:	4770      	bx	lr

08005a24 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a24:	6803      	ldr	r3, [r0, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	0791      	lsls	r1, r2, #30
 8005a2a:	d501      	bpl.n	8005a30 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	07d2      	lsls	r2, r2, #31
 8005a34:	d403      	bmi.n	8005a3e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	619a      	str	r2, [r3, #24]
  }
}
 8005a3e:	4770      	bx	lr

08005a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a40:	b530      	push	{r4, r5, lr}
 8005a42:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a44:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a48:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a4a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a4c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a52:	4a05      	ldr	r2, [pc, #20]	@ (8005a68 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a54:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a56:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a5e:	ea20 0002 	bic.w	r0, r0, r2
 8005a62:	4303      	orrs	r3, r0
 8005a64:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a66:	bd30      	pop	{r4, r5, pc}
 8005a68:	03ff63ff 	.word	0x03ff63ff

08005a6c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a6c:	6803      	ldr	r3, [r0, #0]
{
 8005a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a72:	699c      	ldr	r4, [r3, #24]
{
 8005a74:	4605      	mov	r5, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a7a:	f014 0410 	ands.w	r4, r4, #16
 8005a7e:	d06f      	beq.n	8005b60 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8005a80:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a82:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a86:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	0690      	lsls	r0, r2, #26
 8005a8e:	d461      	bmi.n	8005b54 <I2C_IsErrorOccurred+0xe8>
 8005a90:	f1b8 0f00 	cmp.w	r8, #0
 8005a94:	d035      	beq.n	8005b02 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8005a96:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8005a9a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8005a9c:	682e      	ldr	r6, [r5, #0]
 8005a9e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005aa0:	05d9      	lsls	r1, r3, #23
 8005aa2:	d505      	bpl.n	8005ab0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005aa8:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8005aac:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005aae:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ab0:	055a      	lsls	r2, r3, #21
 8005ab2:	d505      	bpl.n	8005ac0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ab4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005ab8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8005abc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005abe:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ac0:	059b      	lsls	r3, r3, #22
 8005ac2:	d54f      	bpl.n	8005b64 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ac8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005acc:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f7ff ffa8 	bl	8005a24 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005ad4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8005ad6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8005ad8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8005adc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8005ae0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8005aea:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8005aec:	4323      	orrs	r3, r4
 8005aee:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	2320      	movs	r3, #32
 8005af2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8005afc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8005b00:	e032      	b.n	8005b68 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8005b02:	1c7a      	adds	r2, r7, #1
 8005b04:	d0c1      	beq.n	8005a8a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b06:	f7ff fc23 	bl	8005350 <HAL_GetTick>
 8005b0a:	1b80      	subs	r0, r0, r6
 8005b0c:	42b8      	cmp	r0, r7
 8005b0e:	d801      	bhi.n	8005b14 <I2C_IsErrorOccurred+0xa8>
 8005b10:	2f00      	cmp	r7, #0
 8005b12:	d1b9      	bne.n	8005a88 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005b18:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b1c:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005b1e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b20:	0400      	lsls	r0, r0, #16
 8005b22:	d50a      	bpl.n	8005b3a <I2C_IsErrorOccurred+0xce>
 8005b24:	0449      	lsls	r1, r1, #17
 8005b26:	d408      	bmi.n	8005b3a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8005b28:	2a20      	cmp	r2, #32
 8005b2a:	d006      	beq.n	8005b3a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b32:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005b34:	f7ff fc0c 	bl	8005350 <HAL_GetTick>
 8005b38:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b3a:	682b      	ldr	r3, [r5, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	069b      	lsls	r3, r3, #26
 8005b40:	d4a2      	bmi.n	8005a88 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b42:	f7ff fc05 	bl	8005350 <HAL_GetTick>
 8005b46:	1b80      	subs	r0, r0, r6
 8005b48:	2819      	cmp	r0, #25
 8005b4a:	d9f6      	bls.n	8005b3a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b4c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8005b4e:	f04f 0801 	mov.w	r8, #1
 8005b52:	e799      	b.n	8005a88 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8005b54:	f1b8 0f00 	cmp.w	r8, #0
 8005b58:	d19d      	bne.n	8005a96 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	61da      	str	r2, [r3, #28]
 8005b5e:	e79a      	b.n	8005a96 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	4620      	mov	r0, r4
 8005b62:	e79b      	b.n	8005a9c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d1b2      	bne.n	8005ace <I2C_IsErrorOccurred+0x62>
}
 8005b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b6c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	079b      	lsls	r3, r3, #30
 8005b7a:	d501      	bpl.n	8005b80 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e01f      	b.n	8005bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b80:	4632      	mov	r2, r6
 8005b82:	4629      	mov	r1, r5
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7ff ff71 	bl	8005a6c <I2C_IsErrorOccurred>
 8005b8a:	b9c0      	cbnz	r0, 8005bbe <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	1c6a      	adds	r2, r5, #1
 8005b8e:	d0f1      	beq.n	8005b74 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b90:	f7ff fbde 	bl	8005350 <HAL_GetTick>
 8005b94:	1b80      	subs	r0, r0, r6
 8005b96:	42a8      	cmp	r0, r5
 8005b98:	d801      	bhi.n	8005b9e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	d1ea      	bne.n	8005b74 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f013 0302 	ands.w	r3, r3, #2
 8005ba6:	d1e5      	bne.n	8005b74 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ba8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8005baa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bae:	f042 0220 	orr.w	r2, r2, #32
 8005bb2:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8005bbe:	2001      	movs	r0, #1
}
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}

08005bc2 <I2C_WaitOnFlagUntilTimeout>:
{
 8005bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	4616      	mov	r6, r2
 8005bd0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	ea37 0303 	bics.w	r3, r7, r3
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	42b3      	cmp	r3, r6
 8005be2:	d001      	beq.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005be4:	2000      	movs	r0, #0
 8005be6:	e025      	b.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be8:	4642      	mov	r2, r8
 8005bea:	4629      	mov	r1, r5
 8005bec:	4620      	mov	r0, r4
 8005bee:	f7ff ff3d 	bl	8005a6c <I2C_IsErrorOccurred>
 8005bf2:	b9f0      	cbnz	r0, 8005c32 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8005bf4:	1c6b      	adds	r3, r5, #1
 8005bf6:	d0ec      	beq.n	8005bd2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf8:	f7ff fbaa 	bl	8005350 <HAL_GetTick>
 8005bfc:	eba0 0008 	sub.w	r0, r0, r8
 8005c00:	42a8      	cmp	r0, r5
 8005c02:	d801      	bhi.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x46>
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	d1e4      	bne.n	8005bd2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	ea37 0303 	bics.w	r3, r7, r3
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	42b3      	cmp	r3, r6
 8005c18:	d1db      	bne.n	8005bd2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005c1c:	f043 0320 	orr.w	r3, r3, #32
 8005c20:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c22:	2320      	movs	r3, #32
 8005c24:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8005c2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005c32:	2001      	movs	r0, #1
}
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	069b      	lsls	r3, r3, #26
 8005c46:	d501      	bpl.n	8005c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e01d      	b.n	8005c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	4629      	mov	r1, r5
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7ff ff0b 	bl	8005a6c <I2C_IsErrorOccurred>
 8005c56:	b9b0      	cbnz	r0, 8005c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c58:	f7ff fb7a 	bl	8005350 <HAL_GetTick>
 8005c5c:	1b80      	subs	r0, r0, r6
 8005c5e:	42a8      	cmp	r0, r5
 8005c60:	d801      	bhi.n	8005c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005c62:	2d00      	cmp	r5, #0
 8005c64:	d1ec      	bne.n	8005c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f013 0320 	ands.w	r3, r3, #32
 8005c6e:	d1e7      	bne.n	8005c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c70:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005c72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c76:	f042 0220 	orr.w	r2, r2, #32
 8005c7a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c82:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8005c86:	2001      	movs	r0, #1
}
 8005c88:	bd70      	pop	{r4, r5, r6, pc}

08005c8a <HAL_I2C_MspInit>:
}
 8005c8a:	4770      	bx	lr

08005c8c <HAL_I2C_Init>:
{
 8005c8c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005c8e:	4604      	mov	r4, r0
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d04e      	beq.n	8005d32 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c94:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005c98:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005c9c:	b91b      	cbnz	r3, 8005ca6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005c9e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8005ca2:	f7ff fff2 	bl	8005c8a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca6:	2324      	movs	r3, #36	@ 0x24
 8005ca8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cb6:	6862      	ldr	r2, [r4, #4]
 8005cb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cbc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cc4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cc6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cca:	2901      	cmp	r1, #1
 8005ccc:	d106      	bne.n	8005cdc <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cd2:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cda:	e007      	b.n	8005cec <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cdc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ce0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ce2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ce4:	d1f6      	bne.n	8005cd4 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cec:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cee:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cfa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d02:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d04:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005d08:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d0a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d10:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d12:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d24:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d2a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8005d30:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d32:	2001      	movs	r0, #1
 8005d34:	e7fc      	b.n	8005d30 <HAL_I2C_Init+0xa4>

08005d36 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8005d36:	4770      	bx	lr

08005d38 <HAL_I2C_DeInit>:
{
 8005d38:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	b198      	cbz	r0, 8005d66 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005d3e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d40:	2324      	movs	r3, #36	@ 0x24
 8005d42:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005d4e:	f7ff fff2 	bl	8005d36 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d52:	2000      	movs	r0, #0
 8005d54:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8005d56:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d5a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8005d64:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d66:	2001      	movs	r0, #1
 8005d68:	e7fc      	b.n	8005d64 <HAL_I2C_DeInit+0x2c>
	...

08005d6c <HAL_I2C_Mem_Write>:
{
 8005d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d72:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8005d76:	4604      	mov	r4, r0
 8005d78:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d7a:	2b20      	cmp	r3, #32
{
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8005d82:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d86:	f040 80c6 	bne.w	8005f16 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8005d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d8c:	b113      	cbz	r3, 8005d94 <HAL_I2C_Mem_Write+0x28>
 8005d8e:	f1ba 0f00 	cmp.w	sl, #0
 8005d92:	d106      	bne.n	8005da2 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d98:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8005d9a:	2001      	movs	r0, #1
}
 8005d9c:	b003      	add	sp, #12
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005da2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	f000 80b5 	beq.w	8005f16 <HAL_I2C_Mem_Write+0x1aa>
 8005dac:	f04f 0b01 	mov.w	fp, #1
 8005db0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8005db4:	f7ff facc 	bl	8005350 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005db8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005dba:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dbc:	9000      	str	r0, [sp, #0]
 8005dbe:	465a      	mov	r2, fp
 8005dc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7ff fefc 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d1e5      	bne.n	8005d9a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dce:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8005dd0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005dd2:	fa5f f289 	uxtb.w	r2, r9
 8005dd6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dd8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ddc:	2340      	movs	r3, #64	@ 0x40
 8005dde:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8005de2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de4:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005de6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005de8:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005dea:	4b4c      	ldr	r3, [pc, #304]	@ (8005f1c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8005dec:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005df6:	f7ff fe23 	bl	8005a40 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f7ff feb4 	bl	8005b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8005e04:	bb18      	cbnz	r0, 8005e4e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e06:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e0a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0c:	d115      	bne.n	8005e3a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e0e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	@ 0x80
 8005e14:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e16:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e18:	4643      	mov	r3, r8
 8005e1a:	9500      	str	r5, [sp, #0]
 8005e1c:	f7ff fed1 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 8005e20:	b9a8      	cbnz	r0, 8005e4e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2bff      	cmp	r3, #255	@ 0xff
 8005e28:	d815      	bhi.n	8005e56 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005e2a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005e30:	b292      	uxth	r2, r2
 8005e32:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	9000      	str	r0, [sp, #0]
 8005e38:	e012      	b.n	8005e60 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e3a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e40:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e42:	462a      	mov	r2, r5
 8005e44:	f7ff fe92 	bl	8005b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8005e48:	b908      	cbnz	r0, 8005e4e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	e7df      	b.n	8005e0e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005e54:	e7a1      	b.n	8005d9a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e56:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e5c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e5e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e60:	4639      	mov	r1, r7
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff fdec 	bl	8005a40 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f7ff fe7d 	bl	8005b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d191      	bne.n	8005d9a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005e7e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8005e80:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005e82:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e84:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005e86:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005e88:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005e8a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005e8c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005e8e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e92:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b1b3      	cbz	r3, 8005ec6 <HAL_I2C_Mem_Write+0x15a>
 8005e98:	b9aa      	cbnz	r2, 8005ec6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e9a:	4643      	mov	r3, r8
 8005e9c:	2180      	movs	r1, #128	@ 0x80
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	9500      	str	r5, [sp, #0]
 8005ea2:	f7ff fe8e 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f47f af77 	bne.w	8005d9a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2bff      	cmp	r3, #255	@ 0xff
 8005eb2:	d928      	bls.n	8005f06 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ebc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7ff fdbd 	bl	8005a40 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005ec6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1cc      	bne.n	8005e68 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff feb0 	bl	8005c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f47f af5e 	bne.w	8005d9a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8005eea:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8005eee:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ef8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005efc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f00:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8005f04:	e74a      	b.n	8005d9c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005f06:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	9000      	str	r0, [sp, #0]
 8005f14:	e7d3      	b.n	8005ebe <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8005f16:	2002      	movs	r0, #2
 8005f18:	e740      	b.n	8005d9c <HAL_I2C_Mem_Write+0x30>
 8005f1a:	bf00      	nop
 8005f1c:	80002000 	.word	0x80002000

08005f20 <HAL_I2C_Mem_Read>:
{
 8005f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f26:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2e:	2b20      	cmp	r3, #32
{
 8005f30:	4616      	mov	r6, r2
 8005f32:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8005f36:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3a:	f040 80c9 	bne.w	80060d0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8005f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f40:	b113      	cbz	r3, 8005f48 <HAL_I2C_Mem_Read+0x28>
 8005f42:	f1ba 0f00 	cmp.w	sl, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f4c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8005f4e:	2001      	movs	r0, #1
}
 8005f50:	b003      	add	sp, #12
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005f56:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	f000 80b8 	beq.w	80060d0 <HAL_I2C_Mem_Read+0x1b0>
 8005f60:	f04f 0b01 	mov.w	fp, #1
 8005f64:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8005f68:	f7ff f9f2 	bl	8005350 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f6c:	2319      	movs	r3, #25
 8005f6e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005f70:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f72:	465a      	mov	r2, fp
 8005f74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff fe22 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1e4      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f84:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8005f86:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f88:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f8a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f8e:	2240      	movs	r2, #64	@ 0x40
 8005f90:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8005f94:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f96:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f98:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005f9a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f9c:	4a4d      	ldr	r2, [pc, #308]	@ (80060d4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8005f9e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005fa2:	9200      	str	r2, [sp, #0]
 8005fa4:	fa5f f289 	uxtb.w	r2, r9
 8005fa8:	f7ff fd4a 	bl	8005a40 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fac:	462a      	mov	r2, r5
 8005fae:	4641      	mov	r1, r8
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff fddb 	bl	8005b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8005fb6:	bb20      	cbnz	r0, 8006002 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fbc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fbe:	d116      	bne.n	8005fee <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2140      	movs	r1, #64	@ 0x40
 8005fc6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc8:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fca:	4643      	mov	r3, r8
 8005fcc:	9500      	str	r5, [sp, #0]
 8005fce:	f7ff fdf8 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	b9b0      	cbnz	r0, 8006002 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2bff      	cmp	r3, #255	@ 0xff
 8005fda:	4b3f      	ldr	r3, [pc, #252]	@ (80060d8 <HAL_I2C_Mem_Read+0x1b8>)
 8005fdc:	d815      	bhi.n	800600a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005fde:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005fe0:	b292      	uxth	r2, r2
 8005fe2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fec:	e012      	b.n	8006014 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fee:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ff4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	f7ff fdb8 	bl	8005b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8005ffc:	b908      	cbnz	r0, 8006002 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	e7de      	b.n	8005fc0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8006002:	2300      	movs	r3, #0
 8006004:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006008:	e7a1      	b.n	8005f4e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800600a:	22ff      	movs	r2, #255	@ 0xff
 800600c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006014:	4639      	mov	r1, r7
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff fd12 	bl	8005a40 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800601c:	4643      	mov	r3, r8
 800601e:	2200      	movs	r2, #0
 8006020:	2104      	movs	r1, #4
 8006022:	4620      	mov	r0, r4
 8006024:	9500      	str	r5, [sp, #0]
 8006026:	f7ff fdcc 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 800602a:	2800      	cmp	r0, #0
 800602c:	d18f      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006032:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006034:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006036:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006038:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800603a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800603c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800603e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006040:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006042:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006044:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006046:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8006048:	b29b      	uxth	r3, r3
 800604a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800604c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	b1b3      	cbz	r3, 8006080 <HAL_I2C_Mem_Read+0x160>
 8006052:	b9aa      	cbnz	r2, 8006080 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006054:	4643      	mov	r3, r8
 8006056:	2180      	movs	r1, #128	@ 0x80
 8006058:	4620      	mov	r0, r4
 800605a:	9500      	str	r5, [sp, #0]
 800605c:	f7ff fdb1 	bl	8005bc2 <I2C_WaitOnFlagUntilTimeout>
 8006060:	2800      	cmp	r0, #0
 8006062:	f47f af74 	bne.w	8005f4e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006066:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2bff      	cmp	r3, #255	@ 0xff
 800606c:	d928      	bls.n	80060c0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800606e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006070:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006074:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006076:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006078:	4639      	mov	r1, r7
 800607a:	4620      	mov	r0, r4
 800607c:	f7ff fce0 	bl	8005a40 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006080:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1c9      	bne.n	800601c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006088:	462a      	mov	r2, r5
 800608a:	4641      	mov	r1, r8
 800608c:	4620      	mov	r0, r4
 800608e:	f7ff fdd3 	bl	8005c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006092:	2800      	cmp	r0, #0
 8006094:	f47f af5b 	bne.w	8005f4e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	2120      	movs	r1, #32
 800609c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80060a4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80060a8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80060b6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ba:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80060be:	e747      	b.n	8005f50 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80060c0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80060c6:	b292      	uxth	r2, r2
 80060c8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	9000      	str	r0, [sp, #0]
 80060ce:	e7d3      	b.n	8006078 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 80060d0:	2002      	movs	r0, #2
 80060d2:	e73d      	b.n	8005f50 <HAL_I2C_Mem_Read+0x30>
 80060d4:	80002000 	.word	0x80002000
 80060d8:	80002400 	.word	0x80002400

080060dc <HAL_I2C_GetState>:
  return hi2c->State;
 80060dc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80060e0:	4770      	bx	lr

080060e2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80060e2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 80060e4:	4770      	bx	lr

080060e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060e6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80060ec:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ee:	2a20      	cmp	r2, #32
 80060f0:	b2d4      	uxtb	r4, r2
 80060f2:	d11c      	bne.n	800612e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80060f8:	2a01      	cmp	r2, #1
 80060fa:	d018      	beq.n	800612e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060fc:	2224      	movs	r2, #36	@ 0x24
 80060fe:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006102:	6802      	ldr	r2, [r0, #0]
 8006104:	6810      	ldr	r0, [r2, #0]
 8006106:	f020 0001 	bic.w	r0, r0, #1
 800610a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800610c:	6810      	ldr	r0, [r2, #0]
 800610e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8006112:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006114:	6810      	ldr	r0, [r2, #0]
 8006116:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006118:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800611a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	f041 0101 	orr.w	r1, r1, #1
 8006122:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006124:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8006128:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800612c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800612e:	2002      	movs	r0, #2
 8006130:	e7fc      	b.n	800612c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08006132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006132:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006134:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8006138:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800613a:	2a20      	cmp	r2, #32
 800613c:	b2d4      	uxtb	r4, r2
 800613e:	d11b      	bne.n	8006178 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006140:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006144:	2a01      	cmp	r2, #1
 8006146:	d017      	beq.n	8006178 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006148:	2224      	movs	r2, #36	@ 0x24
 800614a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800614e:	6802      	ldr	r2, [r0, #0]
 8006150:	6810      	ldr	r0, [r2, #0]
 8006152:	f020 0001 	bic.w	r0, r0, #1
 8006156:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006158:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800615a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800615e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006162:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8006164:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006166:	6811      	ldr	r1, [r2, #0]
 8006168:	f041 0101 	orr.w	r1, r1, #1
 800616c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800616e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8006172:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006176:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8006178:	2002      	movs	r0, #2
 800617a:	e7fc      	b.n	8006176 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800617c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800617c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800617e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006180:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006184:	3284      	adds	r2, #132	@ 0x84
 8006186:	1883      	adds	r3, r0, r2
{
 8006188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800618c:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800618e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006192:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006194:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006198:	684c      	ldr	r4, [r1, #4]
 800619a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800619e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061a2:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061a6:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061a8:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061aa:	68c5      	ldr	r5, [r0, #12]
 80061ac:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80061b0:	443d      	add	r5, r7
 80061b2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061b6:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061b8:	68c6      	ldr	r6, [r0, #12]
 80061ba:	68cd      	ldr	r5, [r1, #12]
 80061bc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80061c0:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061c2:	689d      	ldr	r5, [r3, #8]
 80061c4:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80061c8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061ca:	688d      	ldr	r5, [r1, #8]
 80061cc:	68c7      	ldr	r7, [r0, #12]
 80061ce:	3501      	adds	r5, #1
 80061d0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80061d4:	443d      	add	r5, r7
 80061d6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061da:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061dc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061de:	691d      	ldr	r5, [r3, #16]
 80061e0:	f025 0507 	bic.w	r5, r5, #7
 80061e4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061e6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80061e8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061ea:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061ee:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80061f2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80061f6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80061fa:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80061fe:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8006202:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8006206:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006208:	695d      	ldr	r5, [r3, #20]
 800620a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800620e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006210:	694d      	ldr	r5, [r1, #20]
 8006212:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006214:	69dd      	ldr	r5, [r3, #28]
 8006216:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800621a:	f025 0507 	bic.w	r5, r5, #7
 800621e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006220:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8006224:	433d      	orrs	r5, r7
 8006226:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006228:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800622a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800622c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006230:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006232:	b31e      	cbz	r6, 800627c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006234:	2e01      	cmp	r6, #1
 8006236:	d023      	beq.n	8006280 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006238:	1eb5      	subs	r5, r6, #2
 800623a:	2d02      	cmp	r5, #2
 800623c:	d922      	bls.n	8006284 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800623e:	2e07      	cmp	r6, #7
 8006240:	bf14      	ite	ne
 8006242:	2501      	movne	r5, #1
 8006244:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006246:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006248:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800624c:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006250:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006252:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006254:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006256:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006258:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800625a:	436e      	muls	r6, r5
 800625c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006260:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006262:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8006264:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8006268:	f024 0407 	bic.w	r4, r4, #7
 800626c:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800626e:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006270:	5883      	ldr	r3, [r0, r2]
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	5083      	str	r3, [r0, r2]
}
 8006278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800627c:	2504      	movs	r5, #4
 800627e:	e7e2      	b.n	8006246 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8006280:	2503      	movs	r5, #3
 8006282:	e7e0      	b.n	8006246 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006284:	2502      	movs	r5, #2
 8006286:	e7de      	b.n	8006246 <LTDC_SetConfig+0xca>

08006288 <HAL_LTDC_Init>:
{
 8006288:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800628a:	4604      	mov	r4, r0
 800628c:	2800      	cmp	r0, #0
 800628e:	d063      	beq.n	8006358 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006290:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8006294:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006298:	b91b      	cbnz	r3, 80062a2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800629a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800629e:	f7fa fdb3 	bl	8000e08 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062a2:	2302      	movs	r3, #2
 80062a4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80062b0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062b2:	6999      	ldr	r1, [r3, #24]
 80062b4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80062b8:	4302      	orrs	r2, r0
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062be:	6920      	ldr	r0, [r4, #16]
 80062c0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062c2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062c4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062c6:	4925      	ldr	r1, [pc, #148]	@ (800635c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062c8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	400a      	ands	r2, r1
 80062ce:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062d6:	69a0      	ldr	r0, [r4, #24]
 80062d8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062da:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062dc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	400a      	ands	r2, r1
 80062e2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062ea:	6a20      	ldr	r0, [r4, #32]
 80062ec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062ee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062f0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	400a      	ands	r2, r1
 80062f6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006300:	4302      	orrs	r2, r0
 8006302:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006308:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800630a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006312:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006314:	430a      	orrs	r2, r1
 8006316:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800631a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800631e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006322:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006328:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800632a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800632e:	432a      	orrs	r2, r5
 8006330:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006334:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006336:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800633a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800633c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800633e:	f042 0206 	orr.w	r2, r2, #6
 8006342:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800634c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800634e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006352:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8006356:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006358:	2001      	movs	r0, #1
 800635a:	e7fc      	b.n	8006356 <HAL_LTDC_Init+0xce>
 800635c:	f000f800 	.word	0xf000f800

08006360 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8006360:	4770      	bx	lr

08006362 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8006362:	4770      	bx	lr

08006364 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006364:	6803      	ldr	r3, [r0, #0]
{
 8006366:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006368:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800636a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800636c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800636e:	0772      	lsls	r2, r6, #29
 8006370:	d514      	bpl.n	800639c <HAL_LTDC_IRQHandler+0x38>
 8006372:	0769      	lsls	r1, r5, #29
 8006374:	d512      	bpl.n	800639c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006378:	f022 0204 	bic.w	r2, r2, #4
 800637c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800637e:	2204      	movs	r2, #4
 8006380:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006382:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800638e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006390:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8006394:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006398:	f7ff ffe2 	bl	8006360 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800639c:	07b2      	lsls	r2, r6, #30
 800639e:	d516      	bpl.n	80063ce <HAL_LTDC_IRQHandler+0x6a>
 80063a0:	07ab      	lsls	r3, r5, #30
 80063a2:	d514      	bpl.n	80063ce <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063a4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80063a6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063aa:	f022 0202 	bic.w	r2, r2, #2
 80063ae:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80063b0:	2202      	movs	r2, #2
 80063b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80063b4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063be:	2304      	movs	r3, #4
 80063c0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80063c4:	2300      	movs	r3, #0
 80063c6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80063ca:	f7ff ffc9 	bl	8006360 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80063ce:	07f0      	lsls	r0, r6, #31
 80063d0:	d510      	bpl.n	80063f4 <HAL_LTDC_IRQHandler+0x90>
 80063d2:	07e9      	lsls	r1, r5, #31
 80063d4:	d50e      	bpl.n	80063f4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063d6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80063d8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063e2:	2201      	movs	r2, #1
 80063e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 80063e6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80063e8:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80063ec:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80063f0:	f7fc fd94 	bl	8002f1c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063f4:	0732      	lsls	r2, r6, #28
 80063f6:	d511      	bpl.n	800641c <HAL_LTDC_IRQHandler+0xb8>
 80063f8:	072b      	lsls	r3, r5, #28
 80063fa:	d50f      	bpl.n	800641c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063fc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063fe:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006402:	f022 0208 	bic.w	r2, r2, #8
 8006406:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006408:	2208      	movs	r2, #8
 800640a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800640c:	2301      	movs	r3, #1
 800640e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8006412:	2300      	movs	r3, #0
 8006414:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006418:	f7ff ffa3 	bl	8006362 <HAL_LTDC_ReloadEventCallback>
}
 800641c:	bd70      	pop	{r4, r5, r6, pc}

0800641e <HAL_LTDC_ConfigLayer>:
{
 800641e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8006422:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8006426:	4606      	mov	r6, r0
 8006428:	460f      	mov	r7, r1
 800642a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800642c:	2b01      	cmp	r3, #1
 800642e:	f04f 0002 	mov.w	r0, #2
 8006432:	d01f      	beq.n	8006474 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006434:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8006436:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800643a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800643c:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006440:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8006444:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006448:	3438      	adds	r4, #56	@ 0x38
 800644a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006456:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006458:	4630      	mov	r0, r6
 800645a:	4662      	mov	r2, ip
 800645c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800645e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006460:	f7ff fe8c 	bl	800617c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006464:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8006466:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006468:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800646c:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8006470:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006478 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8006478:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 800647c:	4603      	mov	r3, r0
 800647e:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 8006480:	2a01      	cmp	r2, #1
 8006482:	d012      	beq.n	80064aa <HAL_LTDC_ProgramLineEvent+0x32>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006484:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006486:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800648a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800648c:	f020 0001 	bic.w	r0, r0, #1
 8006490:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8006492:	4806      	ldr	r0, [pc, #24]	@ (80064ac <HAL_LTDC_ProgramLineEvent+0x34>)
 8006494:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hltdc);
 8006496:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006498:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800649a:	f041 0101 	orr.w	r1, r1, #1
 800649e:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80064a0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 80064a2:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 80064a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
}
 80064aa:	4770      	bx	lr
 80064ac:	50001000 	.word	0x50001000

080064b0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80064b4:	f7fe ff4c 	bl	8005350 <HAL_GetTick>
 80064b8:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80064ba:	b144      	cbz	r4, 80064ce <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80064bc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d006      	beq.n	80064d2 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80064c4:	2380      	movs	r3, #128	@ 0x80
 80064c6:	66a3      	str	r3, [r4, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80064c8:	2300      	movs	r3, #0
 80064ca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80064ce:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 80064d0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80064da:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_DISABLE(hmdma);
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	60da      	str	r2, [r3, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	68d8      	ldr	r0, [r3, #12]
 80064e8:	f010 0001 	ands.w	r0, r0, #1
 80064ec:	d107      	bne.n	80064fe <HAL_MDMA_Abort+0x4e>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80064ee:	221f      	movs	r2, #31
 80064f0:	605a      	str	r2, [r3, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 80064f2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hmdma);
 80064f4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80064f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80064fc:	e7e8      	b.n	80064d0 <HAL_MDMA_Abort+0x20>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80064fe:	f7fe ff27 	bl	8005350 <HAL_GetTick>
 8006502:	1b40      	subs	r0, r0, r5
 8006504:	2805      	cmp	r0, #5
 8006506:	d9ed      	bls.n	80064e4 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8006508:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800650a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650e:	66a3      	str	r3, [r4, #104]	@ 0x68
        __HAL_UNLOCK(hmdma);
 8006510:	2300      	movs	r3, #0
 8006512:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006516:	2303      	movs	r3, #3
 8006518:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        return HAL_ERROR;
 800651c:	e7d7      	b.n	80064ce <HAL_MDMA_Abort+0x1e>
	...

08006520 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006524:	6804      	ldr	r4, [r0, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800652c:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800652e:	6883      	ldr	r3, [r0, #8]
 8006530:	b92b      	cbnz	r3, 800653e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	684a      	ldr	r2, [r1, #4]
 8006536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653a:	4313      	orrs	r3, r2
 800653c:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800653e:	680b      	ldr	r3, [r1, #0]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d150      	bne.n	80065e6 <OSPI_ConfigCmd+0xc6>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8006544:	f504 72c0 	add.w	r2, r4, #384	@ 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8006548:	f504 76c4 	add.w	r6, r4, #392	@ 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800654c:	f504 75c8 	add.w	r5, r4, #400	@ 0x190
    abr_reg = &(hospi->Instance->WABR);
 8006550:	f504 7cd0 	add.w	ip, r4, #416	@ 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006554:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	@ 0x48
 8006558:	433b      	orrs	r3, r7
 800655a:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800655c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800655e:	b16b      	cbz	r3, 800657c <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006560:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8006562:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006566:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
 8006568:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800656a:	f8d2 c000 	ldr.w	ip, [r2]
 800656e:	433b      	orrs	r3, r7
 8006570:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8006572:	433b      	orrs	r3, r7
 8006574:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
 8006578:	433b      	orrs	r3, r7
 800657a:	6013      	str	r3, [r2, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	6c4f      	ldr	r7, [r1, #68]	@ 0x44
 8006580:	f023 031f 	bic.w	r3, r3, #31
 8006584:	433b      	orrs	r3, r7
 8006586:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006588:	f8d1 e038 	ldr.w	lr, [r1, #56]	@ 0x38
 800658c:	f1be 0f00 	cmp.w	lr, #0
 8006590:	d004      	beq.n	800659c <OSPI_ConfigCmd+0x7c>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006592:	680b      	ldr	r3, [r1, #0]
 8006594:	b913      	cbnz	r3, 800659c <OSPI_ConfigCmd+0x7c>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006596:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8006598:	3b01      	subs	r3, #1
 800659a:	6423      	str	r3, [r4, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800659c:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800659e:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d07a      	beq.n	800669c <OSPI_ConfigCmd+0x17c>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065a6:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	d04a      	beq.n	8006646 <OSPI_ConfigCmd+0x126>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065b0:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80065b4:	f1be 0f00 	cmp.w	lr, #0
 80065b8:	d029      	beq.n	800660e <OSPI_ConfigCmd+0xee>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065ba:	ea4e 0303 	orr.w	r3, lr, r3
 80065be:	6810      	ldr	r0, [r2, #0]
 80065c0:	ea43 0309 	orr.w	r3, r3, r9
 80065c4:	ea43 0308 	orr.w	r3, r3, r8
 80065c8:	ea43 030c 	orr.w	r3, r3, ip
 80065cc:	433b      	orrs	r3, r7
 80065ce:	4333      	orrs	r3, r6
 80065d0:	6c0e      	ldr	r6, [r1, #64]	@ 0x40
 80065d2:	4333      	orrs	r3, r6
 80065d4:	4e43      	ldr	r6, [pc, #268]	@ (80066e4 <OSPI_ConfigCmd+0x1c4>)
 80065d6:	4006      	ands	r6, r0
 80065d8:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80065da:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80065dc:	688b      	ldr	r3, [r1, #8]
 80065de:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80065e0:	698b      	ldr	r3, [r1, #24]
 80065e2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80065e4:	e043      	b.n	800666e <OSPI_ConfigCmd+0x14e>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80065e6:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80065e8:	bf01      	itttt	eq
 80065ea:	f504 72a0 	addeq.w	r2, r4, #320	@ 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80065ee:	f504 76a4 	addeq.w	r6, r4, #328	@ 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80065f2:	f504 75a8 	addeq.w	r5, r4, #336	@ 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80065f6:	f504 7cb0 	addeq.w	ip, r4, #352	@ 0x160
    ccr_reg = &(hospi->Instance->CCR);
 80065fa:	bf1f      	itttt	ne
 80065fc:	f504 7280 	addne.w	r2, r4, #256	@ 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8006600:	f504 7684 	addne.w	r6, r4, #264	@ 0x108
    ir_reg  = &(hospi->Instance->IR);
 8006604:	f504 7588 	addne.w	r5, r4, #272	@ 0x110
    abr_reg = &(hospi->Instance->ABR);
 8006608:	f504 7c90 	addne.w	ip, r4, #288	@ 0x120
 800660c:	e7a2      	b.n	8006554 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800660e:	ea43 0309 	orr.w	r3, r3, r9
 8006612:	f8d2 e000 	ldr.w	lr, [r2]
 8006616:	ea43 0308 	orr.w	r3, r3, r8
 800661a:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
 800661e:	ea43 030c 	orr.w	r3, r3, ip
 8006622:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
 8006626:	433b      	orrs	r3, r7
 8006628:	4333      	orrs	r3, r6
 800662a:	ea43 030e 	orr.w	r3, r3, lr
 800662e:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006630:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006636:	d1d1      	bne.n	80065dc <OSPI_ConfigCmd+0xbc>
 8006638:	694b      	ldr	r3, [r1, #20]
 800663a:	2b08      	cmp	r3, #8
 800663c:	d1ce      	bne.n	80065dc <OSPI_ConfigCmd+0xbc>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800663e:	6813      	ldr	r3, [r2, #0]
 8006640:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006644:	e7c9      	b.n	80065da <OSPI_ConfigCmd+0xba>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006646:	f1be 0f00 	cmp.w	lr, #0
 800664a:	d013      	beq.n	8006674 <OSPI_ConfigCmd+0x154>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800664c:	ea4e 0303 	orr.w	r3, lr, r3
 8006650:	6810      	ldr	r0, [r2, #0]
 8006652:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8006654:	ea43 0308 	orr.w	r3, r3, r8
 8006658:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 800665c:	ea43 030c 	orr.w	r3, r3, ip
 8006660:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8006664:	4323      	orrs	r3, r4
 8006666:	4303      	orrs	r3, r0
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006668:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 800666a:	688b      	ldr	r3, [r1, #8]
 800666c:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666e:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8006670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006674:	6814      	ldr	r4, [r2, #0]
 8006676:	ea43 0308 	orr.w	r3, r3, r8
 800667a:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 800667e:	ea43 030c 	orr.w	r3, r3, ip
 8006682:	4323      	orrs	r3, r4
 8006684:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006686:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800668c:	d1ed      	bne.n	800666a <OSPI_ConfigCmd+0x14a>
 800668e:	694b      	ldr	r3, [r1, #20]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d1ea      	bne.n	800666a <OSPI_ConfigCmd+0x14a>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006694:	6813      	ldr	r3, [r2, #0]
 8006696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800669a:	e7e5      	b.n	8006668 <OSPI_ConfigCmd+0x148>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800669c:	f1b9 0f00 	cmp.w	r9, #0
 80066a0:	d01b      	beq.n	80066da <OSPI_ConfigCmd+0x1ba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80066a2:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80066a6:	f1be 0f00 	cmp.w	lr, #0
 80066aa:	d00d      	beq.n	80066c8 <OSPI_ConfigCmd+0x1a8>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80066ac:	ea4e 0309 	orr.w	r3, lr, r9
 80066b0:	6815      	ldr	r5, [r2, #0]
 80066b2:	4303      	orrs	r3, r0
 80066b4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 80066b6:	4333      	orrs	r3, r6
 80066b8:	4303      	orrs	r3, r0
 80066ba:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
 80066be:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 80066c2:	4303      	orrs	r3, r0
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e78b      	b.n	80065e0 <OSPI_ConfigCmd+0xc0>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80066c8:	6813      	ldr	r3, [r2, #0]
 80066ca:	ea40 0009 	orr.w	r0, r0, r9
 80066ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066d2:	4330      	orrs	r0, r6
 80066d4:	4318      	orrs	r0, r3
 80066d6:	6010      	str	r0, [r2, #0]
 80066d8:	e782      	b.n	80065e0 <OSPI_ConfigCmd+0xc0>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80066da:	2308      	movs	r3, #8
 80066dc:	6543      	str	r3, [r0, #84]	@ 0x54
      status = HAL_ERROR;
 80066de:	2001      	movs	r0, #1
 80066e0:	e7c6      	b.n	8006670 <OSPI_ConfigCmd+0x150>
 80066e2:	bf00      	nop
 80066e4:	f0ffc0c0 	.word	0xf0ffc0c0

080066e8 <OSPI_WaitFlagStateUntilTimeout>:
{
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80066f0:	4604      	mov	r4, r0
 80066f2:	460e      	mov	r6, r1
 80066f4:	4615      	mov	r5, r2
 80066f6:	461f      	mov	r7, r3
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	6a13      	ldr	r3, [r2, #32]
 80066fc:	4233      	tst	r3, r6
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	42ab      	cmp	r3, r5
 8006706:	d101      	bne.n	800670c <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8006708:	2000      	movs	r0, #0
 800670a:	e012      	b.n	8006732 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800670c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006710:	d0f3      	beq.n	80066fa <OSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006712:	f7fe fe1d 	bl	8005350 <HAL_GetTick>
 8006716:	1bc0      	subs	r0, r0, r7
 8006718:	4540      	cmp	r0, r8
 800671a:	d802      	bhi.n	8006722 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 800671c:	f1b8 0f00 	cmp.w	r8, #0
 8006720:	d1ea      	bne.n	80066f8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006722:	f44f 7300 	mov.w	r3, #512	@ 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006726:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006728:	6523      	str	r3, [r4, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800672a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8006732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006738 <HAL_OSPI_Init>:
{
 8006738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800673a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800673c:	f7fe fe08 	bl	8005350 <HAL_GetTick>
 8006740:	4606      	mov	r6, r0
  if (hospi == NULL)
 8006742:	2c00      	cmp	r4, #0
 8006744:	d068      	beq.n	8006818 <HAL_OSPI_Init+0xe0>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006746:	2300      	movs	r3, #0
 8006748:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800674a:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 800674c:	2f00      	cmp	r7, #0
 800674e:	d15e      	bne.n	800680e <HAL_OSPI_Init+0xd6>
      HAL_OSPI_MspInit(hospi);
 8006750:	4620      	mov	r0, r4
 8006752:	f7fa fc69 	bl	8001028 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8006756:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006758:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 800675a:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800675e:	6825      	ldr	r5, [r4, #0]
 8006760:	4319      	orrs	r1, r3
 8006762:	69e3      	ldr	r3, [r4, #28]
 8006764:	68a8      	ldr	r0, [r5, #8]
 8006766:	4319      	orrs	r1, r3
 8006768:	4b2c      	ldr	r3, [pc, #176]	@ (800681c <HAL_OSPI_Init+0xe4>)
  hospi->Timeout = Timeout;
 800676a:	65a2      	str	r2, [r4, #88]	@ 0x58
      MODIFY_REG(hospi->Instance->DCR1,
 800676c:	4003      	ands	r3, r0
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800676e:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->DCR1,
 8006770:	4319      	orrs	r1, r3
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	3b01      	subs	r3, #1
 8006776:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800677a:	6963      	ldr	r3, [r4, #20]
 800677c:	3b01      	subs	r3, #1
 800677e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8006782:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006784:	68eb      	ldr	r3, [r5, #12]
 8006786:	6a21      	ldr	r1, [r4, #32]
 8006788:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800678c:	430b      	orrs	r3, r1
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800678e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006790:	60eb      	str	r3, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006792:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006794:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006798:	6861      	ldr	r1, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800679a:	612b      	str	r3, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800679c:	3901      	subs	r1, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800679e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80067a0:	616b      	str	r3, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80067a2:	682b      	ldr	r3, [r5, #0]
 80067a4:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80067a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80067ac:	2120      	movs	r1, #32
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80067ae:	602b      	str	r3, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80067b0:	4633      	mov	r3, r6
 80067b2:	9200      	str	r2, [sp, #0]
 80067b4:	463a      	mov	r2, r7
 80067b6:	f7ff ff97 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80067ba:	bb48      	cbnz	r0, 8006810 <HAL_OSPI_Init+0xd8>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80067c0:	68d9      	ldr	r1, [r3, #12]
 80067c2:	3a01      	subs	r2, #1
 80067c4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80067c8:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80067ca:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80067cc:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80067d8:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 80067dc:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 80067e0:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
 80067e4:	4302      	orrs	r2, r0
 80067e6:	430a      	orrs	r2, r1
 80067e8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        __HAL_OSPI_ENABLE(hospi);
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80067f4:	69a2      	ldr	r2, [r4, #24]
 80067f6:	2a02      	cmp	r2, #2
 80067f8:	d103      	bne.n	8006802 <HAL_OSPI_Init+0xca>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	f042 0202 	orr.w	r2, r2, #2
 8006800:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006802:	68e3      	ldr	r3, [r4, #12]
 8006804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006808:	d104      	bne.n	8006814 <HAL_OSPI_Init+0xdc>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800680a:	2301      	movs	r3, #1
 800680c:	6523      	str	r3, [r4, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2000      	movs	r0, #0
}
 8006810:	b003      	add	sp, #12
 8006812:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hospi->State = HAL_OSPI_STATE_READY;
 8006814:	2302      	movs	r3, #2
 8006816:	e7f9      	b.n	800680c <HAL_OSPI_Init+0xd4>
    status = HAL_ERROR;
 8006818:	2001      	movs	r0, #1
 800681a:	e7f9      	b.n	8006810 <HAL_OSPI_Init+0xd8>
 800681c:	f8e0f8f4 	.word	0xf8e0f8f4

08006820 <HAL_OSPI_DeInit>:
{
 8006820:	b510      	push	{r4, lr}
  if (hospi == NULL)
 8006822:	4604      	mov	r4, r0
 8006824:	b168      	cbz	r0, 8006842 <HAL_OSPI_DeInit+0x22>
    __HAL_OSPI_DISABLE(hospi);
 8006826:	6803      	ldr	r3, [r0, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	f022 0202 	bic.w	r2, r2, #2
 8006836:	609a      	str	r2, [r3, #8]
    HAL_OSPI_MspDeInit(hospi);
 8006838:	f7fa fd24 	bl	8001284 <HAL_OSPI_MspDeInit>
    hospi->State = HAL_OSPI_STATE_RESET;
 800683c:	2000      	movs	r0, #0
 800683e:	6520      	str	r0, [r4, #80]	@ 0x50
}
 8006840:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8006842:	2001      	movs	r0, #1
 8006844:	e7fc      	b.n	8006840 <HAL_OSPI_DeInit+0x20>

08006846 <HAL_OSPI_Command>:
{
 8006846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006848:	4604      	mov	r4, r0
 800684a:	460d      	mov	r5, r1
 800684c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800684e:	f7fe fd7f 	bl	8005350 <HAL_GetTick>
  state = hospi->State;
 8006852:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 8006854:	4606      	mov	r6, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006856:	2b02      	cmp	r3, #2
 8006858:	d107      	bne.n	800686a <HAL_OSPI_Command+0x24>
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006860:	d109      	bne.n	8006876 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006862:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006864:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006866:	6563      	str	r3, [r4, #84]	@ 0x54
 8006868:	e01f      	b.n	80068aa <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800686a:	2b14      	cmp	r3, #20
 800686c:	d11f      	bne.n	80068ae <HAL_OSPI_Command+0x68>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800686e:	682b      	ldr	r3, [r5, #0]
 8006870:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006872:	2b01      	cmp	r3, #1
 8006874:	d8f5      	bhi.n	8006862 <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006876:	4633      	mov	r3, r6
 8006878:	2200      	movs	r2, #0
 800687a:	2120      	movs	r1, #32
 800687c:	4620      	mov	r0, r4
 800687e:	9700      	str	r7, [sp, #0]
 8006880:	f7ff ff32 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006884:	b988      	cbnz	r0, 80068aa <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006886:	6560      	str	r0, [r4, #84]	@ 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8006888:	4629      	mov	r1, r5
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff fe48 	bl	8006520 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8006890:	b958      	cbnz	r0, 80068aa <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8006892:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006894:	b99b      	cbnz	r3, 80068be <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006896:	4633      	mov	r3, r6
 8006898:	2201      	movs	r2, #1
 800689a:	2102      	movs	r1, #2
 800689c:	4620      	mov	r0, r4
 800689e:	9700      	str	r7, [sp, #0]
 80068a0:	f7ff ff22 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	2202      	movs	r2, #2
 80068a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80068aa:	b003      	add	sp, #12
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80068ae:	2b24      	cmp	r3, #36	@ 0x24
 80068b0:	d1d7      	bne.n	8006862 <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80068b2:	682b      	ldr	r3, [r5, #0]
 80068b4:	f023 0302 	bic.w	r3, r3, #2
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d1d2      	bne.n	8006862 <HAL_OSPI_Command+0x1c>
 80068bc:	e7db      	b.n	8006876 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	b90b      	cbnz	r3, 80068c6 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068c2:	2304      	movs	r3, #4
 80068c4:	e005      	b.n	80068d2 <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d105      	bne.n	80068d6 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80068ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80068cc:	2b24      	cmp	r3, #36	@ 0x24
 80068ce:	d0f8      	beq.n	80068c2 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80068d0:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80068d2:	6523      	str	r3, [r4, #80]	@ 0x50
 80068d4:	e7e9      	b.n	80068aa <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d1e7      	bne.n	80068aa <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80068da:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80068dc:	2b14      	cmp	r3, #20
 80068de:	d0f0      	beq.n	80068c2 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80068e0:	2324      	movs	r3, #36	@ 0x24
 80068e2:	e7f6      	b.n	80068d2 <HAL_OSPI_Command+0x8c>

080068e4 <HAL_OSPI_HyperbusCfg>:
{
 80068e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	4616      	mov	r6, r2
 80068ea:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80068ec:	f7fe fd30 	bl	8005350 <HAL_GetTick>
  state = hospi->State;
 80068f0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80068f2:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80068f4:	3a01      	subs	r2, #1
 80068f6:	2a01      	cmp	r2, #1
 80068f8:	d816      	bhi.n	8006928 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2120      	movs	r1, #32
 80068fe:	4620      	mov	r0, r4
 8006900:	9600      	str	r6, [sp, #0]
 8006902:	f7ff fef1 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006906:	b968      	cbnz	r0, 8006924 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 800690e:	430b      	orrs	r3, r1
 8006910:	6829      	ldr	r1, [r5, #0]
 8006912:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006916:	6869      	ldr	r1, [r5, #4]
 8006918:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800691c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 8006920:	2302      	movs	r3, #2
 8006922:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006924:	b002      	add	sp, #8
 8006926:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006928:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800692a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800692c:	6563      	str	r3, [r4, #84]	@ 0x54
 800692e:	e7f9      	b.n	8006924 <HAL_OSPI_HyperbusCfg+0x40>

08006930 <HAL_OSPI_HyperbusCmd>:
{
 8006930:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	4616      	mov	r6, r2
 8006936:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006938:	f7fe fd0a 	bl	8005350 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 800693c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 800693e:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006940:	2a02      	cmp	r2, #2
 8006942:	d127      	bne.n	8006994 <HAL_OSPI_HyperbusCmd+0x64>
 8006944:	68e2      	ldr	r2, [r4, #12]
 8006946:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800694a:	d123      	bne.n	8006994 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800694c:	2200      	movs	r2, #0
 800694e:	2120      	movs	r1, #32
 8006950:	4620      	mov	r0, r4
 8006952:	9600      	str	r6, [sp, #0]
 8006954:	f7ff fec8 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006958:	b9d0      	cbnz	r0, 8006990 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800695a:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800695c:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006964:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800696c:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800696e:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006970:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8006972:	692a      	ldr	r2, [r5, #16]
 8006974:	430a      	orrs	r2, r1
 8006976:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800697a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 800697e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8006982:	68ea      	ldr	r2, [r5, #12]
 8006984:	3a01      	subs	r2, #1
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8006988:	686a      	ldr	r2, [r5, #4]
 800698a:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800698c:	2304      	movs	r3, #4
 800698e:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006990:	b002      	add	sp, #8
 8006992:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006994:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006996:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006998:	6563      	str	r3, [r4, #84]	@ 0x54
 800699a:	e7f9      	b.n	8006990 <HAL_OSPI_HyperbusCmd+0x60>

0800699c <HAL_OSPI_Transmit>:
{
 800699c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069a0:	4604      	mov	r4, r0
 80069a2:	4688      	mov	r8, r1
 80069a4:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80069a6:	f7fe fcd3 	bl	8005350 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80069aa:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80069ac:	4605      	mov	r5, r0
  if (pData == NULL)
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d103      	bne.n	80069bc <HAL_OSPI_Transmit+0x20>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069b4:	2308      	movs	r3, #8
    status = HAL_ERROR;
 80069b6:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80069b8:	6563      	str	r3, [r4, #84]	@ 0x54
 80069ba:	e02e      	b.n	8006a1a <HAL_OSPI_Transmit+0x7e>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80069bc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d12e      	bne.n	8006a20 <HAL_OSPI_Transmit+0x84>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 80069c4:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069c8:	3301      	adds	r3, #1
 80069ca:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80069cc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80069ce:	6463      	str	r3, [r4, #68]	@ 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80069d6:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80069d8:	462b      	mov	r3, r5
 80069da:	2201      	movs	r2, #1
 80069dc:	2104      	movs	r1, #4
 80069de:	4620      	mov	r0, r4
 80069e0:	9600      	str	r6, [sp, #0]
 80069e2:	f7ff fe81 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80069e6:	b9c0      	cbnz	r0, 8006a1a <HAL_OSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80069e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hospi->pBuffPtr++;
 80069f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069f2:	3301      	adds	r3, #1
 80069f4:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 80069f6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80069f8:	3b01      	subs	r3, #1
 80069fa:	64a3      	str	r3, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80069fc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1ea      	bne.n	80069d8 <HAL_OSPI_Transmit+0x3c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a02:	462b      	mov	r3, r5
 8006a04:	2201      	movs	r2, #1
 8006a06:	2102      	movs	r1, #2
 8006a08:	4620      	mov	r0, r4
 8006a0a:	9600      	str	r6, [sp, #0]
 8006a0c:	f7ff fe6c 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006a10:	b918      	cbnz	r0, 8006a1a <HAL_OSPI_Transmit+0x7e>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006a12:	2302      	movs	r3, #2
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006a18:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006a1a:	b002      	add	sp, #8
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a20:	2310      	movs	r3, #16
 8006a22:	e7c8      	b.n	80069b6 <HAL_OSPI_Transmit+0x1a>

08006a24 <HAL_OSPI_Receive>:
{
 8006a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a28:	4604      	mov	r4, r0
 8006a2a:	4616      	mov	r6, r2
 8006a2c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8006a2e:	f7fe fc8f 	bl	8005350 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006a32:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006a34:	4607      	mov	r7, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006a36:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006a38:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
 8006a3c:	f1b8 0f00 	cmp.w	r8, #0
 8006a40:	d103      	bne.n	8006a4a <HAL_OSPI_Receive+0x26>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006a42:	2308      	movs	r3, #8
    status = HAL_ERROR;
 8006a44:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a46:	6563      	str	r3, [r4, #84]	@ 0x54
 8006a48:	e035      	b.n	8006ab6 <HAL_OSPI_Receive+0x92>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006a4a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d13d      	bne.n	8006acc <HAL_OSPI_Receive+0xa8>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a50:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 8006a52:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a56:	3301      	adds	r3, #1
 8006a58:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8006a5a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006a5c:	6463      	str	r3, [r4, #68]	@ 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a5e:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a60:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a62:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a6a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8006a6e:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a70:	d124      	bne.n	8006abc <HAL_OSPI_Receive+0x98>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a72:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006a74:	463b      	mov	r3, r7
 8006a76:	2201      	movs	r2, #1
 8006a78:	2106      	movs	r1, #6
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	9600      	str	r6, [sp, #0]
 8006a7e:	f7ff fe33 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006a82:	b9c0      	cbnz	r0, 8006ab6 <HAL_OSPI_Receive+0x92>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006a84:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 8006a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a8a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006a8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a8e:	3301      	adds	r3, #1
 8006a90:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 8006a92:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006a94:	3b01      	subs	r3, #1
 8006a96:	64a3      	str	r3, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8006a98:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1ea      	bne.n	8006a74 <HAL_OSPI_Receive+0x50>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	9600      	str	r6, [sp, #0]
 8006aa8:	f7ff fe1e 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006aac:	b918      	cbnz	r0, 8006ab6 <HAL_OSPI_Receive+0x92>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006aae:	2302      	movs	r3, #2
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006ab4:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006ab6:	b002      	add	sp, #8
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006abc:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
 8006ac0:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8006ac4:	d1d5      	bne.n	8006a72 <HAL_OSPI_Receive+0x4e>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006ac6:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 8006aca:	e7d3      	b.n	8006a74 <HAL_OSPI_Receive+0x50>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006acc:	2310      	movs	r3, #16
 8006ace:	e7b9      	b.n	8006a44 <HAL_OSPI_Receive+0x20>

08006ad0 <HAL_OSPI_AutoPolling>:
{
 8006ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006ada:	f7fe fc39 	bl	8005350 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006ade:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006ae0:	4681      	mov	r9, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006ae2:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006ae4:	f8d3 8110 	ldr.w	r8, [r3, #272]	@ 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006ae8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d13c      	bne.n	8006b68 <HAL_OSPI_AutoPolling+0x98>
 8006aee:	68eb      	ldr	r3, [r5, #12]
 8006af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006af4:	d138      	bne.n	8006b68 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006af6:	4603      	mov	r3, r0
 8006af8:	2200      	movs	r2, #0
 8006afa:	2120      	movs	r1, #32
 8006afc:	4620      	mov	r0, r4
 8006afe:	9600      	str	r6, [sp, #0]
 8006b00:	f7ff fdf2 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006b04:	bb28      	cbnz	r0, 8006b52 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	682a      	ldr	r2, [r5, #0]
 8006b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8006b0e:	686a      	ldr	r2, [r5, #4]
 8006b10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8006b14:	692a      	ldr	r2, [r5, #16]
 8006b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006b1a:	6819      	ldr	r1, [r3, #0]
 8006b1c:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 8006b20:	f021 5143 	bic.w	r1, r1, #817889280	@ 0x30c00000
 8006b24:	4302      	orrs	r2, r0
 8006b26:	430a      	orrs	r2, r1
 8006b28:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006b2c:	601a      	str	r2, [r3, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b2e:	68e2      	ldr	r2, [r4, #12]
 8006b30:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8006b34:	d110      	bne.n	8006b58 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006b36:	649f      	str	r7, [r3, #72]	@ 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006b38:	464b      	mov	r3, r9
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2108      	movs	r1, #8
 8006b3e:	4620      	mov	r0, r4
 8006b40:	9600      	str	r6, [sp, #0]
 8006b42:	f7ff fdd1 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006b46:	b920      	cbnz	r0, 8006b52 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006b52:	b003      	add	sp, #12
 8006b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006b58:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006b5c:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 8006b60:	d1e9      	bne.n	8006b36 <HAL_OSPI_AutoPolling+0x66>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006b62:	f8c3 8110 	str.w	r8, [r3, #272]	@ 0x110
 8006b66:	e7e7      	b.n	8006b38 <HAL_OSPI_AutoPolling+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b68:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006b6a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b6c:	6563      	str	r3, [r4, #84]	@ 0x54
 8006b6e:	e7f0      	b.n	8006b52 <HAL_OSPI_AutoPolling+0x82>

08006b70 <HAL_OSPI_MemoryMapped>:
{
 8006b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b72:	4604      	mov	r4, r0
 8006b74:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006b76:	f7fe fbeb 	bl	8005350 <HAL_GetTick>
 8006b7a:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006b7c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006b7e:	2a04      	cmp	r2, #4
 8006b80:	d121      	bne.n	8006bc6 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006b82:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006b84:	2120      	movs	r1, #32
 8006b86:	4620      	mov	r0, r4
 8006b88:	9200      	str	r2, [sp, #0]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f7ff fdac 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006b90:	b9b8      	cbnz	r0, 8006bc2 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b92:	6829      	ldr	r1, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b94:	2388      	movs	r3, #136	@ 0x88
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006b96:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b98:	2908      	cmp	r1, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b9a:	6523      	str	r3, [r4, #80]	@ 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b9c:	d108      	bne.n	8006bb0 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006b9e:	686b      	ldr	r3, [r5, #4]
 8006ba0:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	6253      	str	r3, [r2, #36]	@ 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bae:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006bb0:	6813      	ldr	r3, [r2, #0]
 8006bb2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006bb6:	f023 0308 	bic.w	r3, r3, #8
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8006bc0:	6013      	str	r3, [r2, #0]
}
 8006bc2:	b003      	add	sp, #12
 8006bc4:	bd30      	pop	{r4, r5, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006bc6:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006bc8:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006bca:	6563      	str	r3, [r4, #84]	@ 0x54
 8006bcc:	e7f9      	b.n	8006bc2 <HAL_OSPI_MemoryMapped+0x52>

08006bce <HAL_OSPI_Abort>:
{
 8006bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006bd2:	f7fe fbbd 	bl	8005350 <HAL_GetTick>
 8006bd6:	4605      	mov	r5, r0
  state = hospi->State;
 8006bd8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006bda:	f013 0f0c 	tst.w	r3, #12
 8006bde:	d032      	beq.n	8006c46 <HAL_OSPI_Abort+0x78>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	0751      	lsls	r1, r2, #29
 8006be6:	d507      	bpl.n	8006bf8 <HAL_OSPI_Abort+0x2a>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006be8:	681a      	ldr	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006bea:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006bec:	f022 0204 	bic.w	r2, r2, #4
 8006bf0:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006bf2:	f7ff fc5d 	bl	80064b0 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8006bf6:	bb00      	cbnz	r0, 8006c3a <HAL_OSPI_Abort+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8006bf8:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	0692      	lsls	r2, r2, #26
 8006c00:	d51e      	bpl.n	8006c40 <HAL_OSPI_Abort+0x72>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006c02:	681a      	ldr	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006c04:	2102      	movs	r1, #2
 8006c06:	4620      	mov	r0, r4
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006c08:	f042 0202 	orr.w	r2, r2, #2
 8006c0c:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006c0e:	2201      	movs	r2, #1
 8006c10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462b      	mov	r3, r5
 8006c16:	f7ff fd67 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006c1a:	b960      	cbnz	r0, 8006c36 <HAL_OSPI_Abort+0x68>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	2602      	movs	r6, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c20:	4602      	mov	r2, r0
 8006c22:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006c24:	625e      	str	r6, [r3, #36]	@ 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c26:	4620      	mov	r0, r4
 8006c28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	f7ff fd5b 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006c32:	b900      	cbnz	r0, 8006c36 <HAL_OSPI_Abort+0x68>
          hospi->State = HAL_OSPI_STATE_READY;
 8006c34:	6526      	str	r6, [r4, #80]	@ 0x50
}
 8006c36:	b002      	add	sp, #8
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	6563      	str	r3, [r4, #84]	@ 0x54
 8006c3e:	e7dc      	b.n	8006bfa <HAL_OSPI_Abort+0x2c>
      hospi->State = HAL_OSPI_STATE_READY;
 8006c40:	2302      	movs	r3, #2
 8006c42:	6523      	str	r3, [r4, #80]	@ 0x50
 8006c44:	e7f7      	b.n	8006c36 <HAL_OSPI_Abort+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c46:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006c48:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c4a:	6563      	str	r3, [r4, #84]	@ 0x54
 8006c4c:	e7f3      	b.n	8006c36 <HAL_OSPI_Abort+0x68>
	...

08006c50 <HAL_OSPIM_Config>:
    other_instance = 1U;
 8006c50:	4b96      	ldr	r3, [pc, #600]	@ (8006eac <HAL_OSPIM_Config+0x25c>)
{
 8006c52:	468c      	mov	ip, r1
  if (hospi->Instance == OCTOSPI1)
 8006c54:	6802      	ldr	r2, [r0, #0]
{
 8006c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 1U;
 8006c5a:	429a      	cmp	r2, r3
{
 8006c5c:	b091      	sub	sp, #68	@ 0x44
 8006c5e:	f04f 0701 	mov.w	r7, #1
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006c62:	f04f 0400 	mov.w	r4, #0
    other_instance = 1U;
 8006c66:	bf15      	itete	ne
 8006c68:	f04f 0a00 	movne.w	sl, #0
 8006c6c:	f04f 0a01 	moveq.w	sl, #1
 8006c70:	2601      	movne	r6, #1
 8006c72:	2600      	moveq	r6, #0
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006c74:	ab04      	add	r3, sp, #16
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
    {
      reg = OCTOSPIM->PCR[index];
 8006c76:	f8df e238 	ldr.w	lr, [pc, #568]	@ 8006eb0 <HAL_OSPIM_Config+0x260>
    if (instance_nb == 2U)
 8006c7a:	2f02      	cmp	r7, #2
    cfg->IOHighPort = 0U;
 8006c7c:	611c      	str	r4, [r3, #16]
    cfg->DQSPort    = 0U;
 8006c7e:	e9c3 4400 	strd	r4, r4, [r3]
    cfg->IOLowPort  = 0U;
 8006c82:	e9c3 4402 	strd	r4, r4, [r3, #8]
    if (instance_nb == 2U)
 8006c86:	f040 810d 	bne.w	8006ea4 <HAL_OSPIM_Config+0x254>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006c8a:	4a89      	ldr	r2, [pc, #548]	@ (8006eb0 <HAL_OSPIM_Config+0x260>)
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006c8c:	4889      	ldr	r0, [pc, #548]	@ (8006eb4 <HAL_OSPIM_Config+0x264>)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006c8e:	6812      	ldr	r2, [r2, #0]
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006c90:	f012 0f01 	tst.w	r2, #1
 8006c94:	bf18      	it	ne
 8006c96:	f44f 7000 	movne.w	r0, #512	@ 0x200
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006c9a:	2500      	movs	r5, #0
      reg = OCTOSPIM->PCR[index];
 8006c9c:	eb0e 0285 	add.w	r2, lr, r5, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006ca0:	1c69      	adds	r1, r5, #1
      reg = OCTOSPIM->PCR[index];
 8006ca2:	6852      	ldr	r2, [r2, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006ca4:	07d5      	lsls	r5, r2, #31
 8006ca6:	d504      	bpl.n	8006cb2 <HAL_OSPIM_Config+0x62>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006ca8:	ea82 0500 	eor.w	r5, r2, r0
 8006cac:	07ad      	lsls	r5, r5, #30
          cfg->ClkPort = index + 1U;
 8006cae:	bf58      	it	pl
 8006cb0:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006cb2:	06d5      	lsls	r5, r2, #27
 8006cb4:	d504      	bpl.n	8006cc0 <HAL_OSPIM_Config+0x70>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006cb6:	ea82 0500 	eor.w	r5, r2, r0
 8006cba:	06ad      	lsls	r5, r5, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006cbc:	bf58      	it	pl
 8006cbe:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006cc0:	05d5      	lsls	r5, r2, #23
 8006cc2:	d504      	bpl.n	8006cce <HAL_OSPIM_Config+0x7e>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006cc4:	ea82 0500 	eor.w	r5, r2, r0
 8006cc8:	05ad      	lsls	r5, r5, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006cca:	bf58      	it	pl
 8006ccc:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006cce:	03d5      	lsls	r5, r2, #15
 8006cd0:	d50a      	bpl.n	8006ce8 <HAL_OSPIM_Config+0x98>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006cd2:	ea82 0500 	eor.w	r5, r2, r0
 8006cd6:	036d      	lsls	r5, r5, #13
 8006cd8:	d406      	bmi.n	8006ce8 <HAL_OSPIM_Config+0x98>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006cda:	0395      	lsls	r5, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006cdc:	bf54      	ite	pl
 8006cde:	f441 3580 	orrpl.w	r5, r1, #65536	@ 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006ce2:	f041 7580 	orrmi.w	r5, r1, #16777216	@ 0x1000000
 8006ce6:	60dd      	str	r5, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006ce8:	01d5      	lsls	r5, r2, #7
 8006cea:	d50a      	bpl.n	8006d02 <HAL_OSPIM_Config+0xb2>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006cec:	ea82 0500 	eor.w	r5, r2, r0
 8006cf0:	016d      	lsls	r5, r5, #5
 8006cf2:	d406      	bmi.n	8006d02 <HAL_OSPIM_Config+0xb2>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006cf4:	0195      	lsls	r5, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006cf6:	bf54      	ite	pl
 8006cf8:	f441 3280 	orrpl.w	r2, r1, #65536	@ 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006cfc:	f041 7280 	orrmi.w	r2, r1, #16777216	@ 0x1000000
 8006d00:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006d02:	2902      	cmp	r1, #2
 8006d04:	f04f 0501 	mov.w	r5, #1
 8006d08:	d1c8      	bne.n	8006c9c <HAL_OSPIM_Config+0x4c>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006d0a:	42af      	cmp	r7, r5
 8006d0c:	f103 0318 	add.w	r3, r3, #24
 8006d10:	f000 80c6 	beq.w	8006ea0 <HAL_OSPIM_Config+0x250>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006d14:	4b65      	ldr	r3, [pc, #404]	@ (8006eac <HAL_OSPIM_Config+0x25c>)
 8006d16:	681f      	ldr	r7, [r3, #0]
 8006d18:	402f      	ands	r7, r5
 8006d1a:	d004      	beq.n	8006d26 <HAL_OSPIM_Config+0xd6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006d1c:	681a      	ldr	r2, [r3, #0]
      ospi_enabled |= 0x1U;
 8006d1e:	462f      	mov	r7, r5
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006d26:	4b64      	ldr	r3, [pc, #400]	@ (8006eb8 <HAL_OSPIM_Config+0x268>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	07d1      	lsls	r1, r2, #31
 8006d2c:	f140 80bc 	bpl.w	8006ea8 <HAL_OSPIM_Config+0x258>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8006d38:	f047 0302 	orr.w	r3, r7, #2
 8006d3c:	9303      	str	r3, [sp, #12]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006d3e:	ab10      	add	r3, sp, #64	@ 0x40
 8006d40:	2118      	movs	r1, #24
 8006d42:	fb01 3106 	mla	r1, r1, r6, r3
 8006d46:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb0 <HAL_OSPIM_Config+0x260>)
 8006d48:	f851 2c28 	ldr.w	r2, [r1, #-40]
 8006d4c:	3a01      	subs	r2, #1
 8006d4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006d52:	6850      	ldr	r0, [r2, #4]
 8006d54:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8006d58:	6050      	str	r0, [r2, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	07d2      	lsls	r2, r2, #31
 8006d5e:	f140 80af 	bpl.w	8006ec0 <HAL_OSPIM_Config+0x270>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8006d6a:	f1ba 0f00 	cmp.w	sl, #0
 8006d6e:	d02c      	beq.n	8006dca <HAL_OSPIM_Config+0x17a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006d70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d72:	3a01      	subs	r2, #1
 8006d74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006d78:	6851      	ldr	r1, [r2, #4]
 8006d7a:	f041 0102 	orr.w	r1, r1, #2
 8006d7e:	6051      	str	r1, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006d80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d82:	b132      	cbz	r2, 8006d92 <HAL_OSPIM_Config+0x142>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006d84:	3a01      	subs	r2, #1
 8006d86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	f042 0220 	orr.w	r2, r2, #32
 8006d90:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d94:	b15b      	cbz	r3, 8006dae <HAL_OSPIM_Config+0x15e>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006d96:	3b01      	subs	r3, #1
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006da2:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006dac:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006db0:	b15b      	cbz	r3, 8006dca <HAL_OSPIM_Config+0x17a>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006dbe:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006dc8:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006dca:	f8dc 3000 	ldr.w	r3, [ip]
 8006dce:	f04f 0918 	mov.w	r9, #24
 8006dd2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	ab10      	add	r3, sp, #64	@ 0x40
 8006dda:	9902      	ldr	r1, [sp, #8]
 8006ddc:	fb09 390a 	mla	r9, r9, sl, r3
 8006de0:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8006eb0 <HAL_OSPIM_Config+0x260>
 8006de4:	f859 8c30 	ldr.w	r8, [r9, #-48]
 8006de8:	f859 3c2c 	ldr.w	r3, [r9, #-44]
 8006dec:	4541      	cmp	r1, r8
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006dee:	f859 4c24 	ldr.w	r4, [r9, #-36]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006df2:	9301      	str	r3, [sp, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006df4:	f859 0c20 	ldr.w	r0, [r9, #-32]
 8006df8:	f8dc 3010 	ldr.w	r3, [ip, #16]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006dfc:	9901      	ldr	r1, [sp, #4]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006dfe:	e9dc e202 	ldrd	lr, r2, [ip, #8]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006e02:	f000 809a 	beq.w	8006f3a <HAL_OSPIM_Config+0x2ea>
 8006e06:	42a9      	cmp	r1, r5
 8006e08:	d008      	beq.n	8006e1c <HAL_OSPIM_Config+0x1cc>
 8006e0a:	f859 9c28 	ldr.w	r9, [r9, #-40]
 8006e0e:	45f1      	cmp	r9, lr
 8006e10:	d004      	beq.n	8006e1c <HAL_OSPIM_Config+0x1cc>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006e12:	42a2      	cmp	r2, r4
 8006e14:	d002      	beq.n	8006e1c <HAL_OSPIM_Config+0x1cc>
 8006e16:	4298      	cmp	r0, r3
 8006e18:	f040 809e 	bne.w	8006f58 <HAL_OSPIM_Config+0x308>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006e1c:	f108 38ff 	add.w	r8, r8, #4294967295
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006e20:	9901      	ldr	r1, [sp, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006e22:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
 8006e26:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8006e2a:	f029 0901 	bic.w	r9, r9, #1
 8006e2e:	f8c8 9004 	str.w	r9, [r8, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006e32:	b141      	cbz	r1, 8006e46 <HAL_OSPIM_Config+0x1f6>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006e34:	3901      	subs	r1, #1
 8006e36:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8006e3a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006e3e:	f028 0810 	bic.w	r8, r8, #16
 8006e42:	f8c1 8004 	str.w	r8, [r1, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006e46:	2118      	movs	r1, #24
 8006e48:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8006e4c:	fb01 8a0a 	mla	sl, r1, sl, r8
 8006e50:	f85a 1c28 	ldr.w	r1, [sl, #-40]
 8006e54:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8006e58:	4918      	ldr	r1, [pc, #96]	@ (8006ebc <HAL_OSPIM_Config+0x26c>)
 8006e5a:	4441      	add	r1, r8
 8006e5c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006e60:	f428 7880 	bic.w	r8, r8, #256	@ 0x100
 8006e64:	f8c1 8004 	str.w	r8, [r1, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e68:	b15c      	cbz	r4, 8006e82 <HAL_OSPIM_Config+0x232>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e6a:	3c01      	subs	r4, #1
 8006e6c:	f004 0401 	and.w	r4, r4, #1
 8006e70:	00a4      	lsls	r4, r4, #2
 8006e72:	f104 44a4 	add.w	r4, r4, #1375731712	@ 0x52000000
 8006e76:	f504 4434 	add.w	r4, r4, #46080	@ 0xb400
 8006e7a:	6861      	ldr	r1, [r4, #4]
 8006e7c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006e80:	6061      	str	r1, [r4, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d068      	beq.n	8006f58 <HAL_OSPIM_Config+0x308>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e86:	3801      	subs	r0, #1
 8006e88:	f000 0001 	and.w	r0, r0, #1
 8006e8c:	0080      	lsls	r0, r0, #2
 8006e8e:	f100 40a4 	add.w	r0, r0, #1375731712	@ 0x52000000
 8006e92:	f500 4034 	add.w	r0, r0, #46080	@ 0xb400
 8006e96:	6841      	ldr	r1, [r0, #4]
 8006e98:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8006e9c:	6041      	str	r1, [r0, #4]
 8006e9e:	e05b      	b.n	8006f58 <HAL_OSPIM_Config+0x308>
 8006ea0:	460f      	mov	r7, r1
 8006ea2:	e6ea      	b.n	8006c7a <HAL_OSPIM_Config+0x2a>
  uint32_t value = 0U;
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e6f8      	b.n	8006c9a <HAL_OSPIM_Config+0x4a>
 8006ea8:	9703      	str	r7, [sp, #12]
 8006eaa:	e748      	b.n	8006d3e <HAL_OSPIM_Config+0xee>
 8006eac:	52005000 	.word	0x52005000
 8006eb0:	5200b400 	.word	0x5200b400
 8006eb4:	04040222 	.word	0x04040222
 8006eb8:	5200a000 	.word	0x5200a000
 8006ebc:	5200b3fc 	.word	0x5200b3fc
      if (IOM_cfg[instance].ClkPort != 0U)
 8006ec0:	f851 2c30 	ldr.w	r2, [r1, #-48]
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	d080      	beq.n	8006dca <HAL_OSPIM_Config+0x17a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006ec8:	3a01      	subs	r2, #1
 8006eca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006ece:	6850      	ldr	r0, [r2, #4]
 8006ed0:	f020 0001 	bic.w	r0, r0, #1
 8006ed4:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006ed6:	f851 2c2c 	ldr.w	r2, [r1, #-44]
 8006eda:	b132      	cbz	r2, 8006eea <HAL_OSPIM_Config+0x29a>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006edc:	3a01      	subs	r2, #1
 8006ede:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	f022 0210 	bic.w	r2, r2, #16
 8006ee8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006eea:	2318      	movs	r3, #24
 8006eec:	aa10      	add	r2, sp, #64	@ 0x40
 8006eee:	fb03 2306 	mla	r3, r3, r6, r2
 8006ef2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006ef6:	b15b      	cbz	r3, 8006f10 <HAL_OSPIM_Config+0x2c0>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006f04:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f0e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f10:	2318      	movs	r3, #24
 8006f12:	aa10      	add	r2, sp, #64	@ 0x40
 8006f14:	fb03 2306 	mla	r3, r3, r6, r2
 8006f18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f43f af54 	beq.w	8006dca <HAL_OSPIM_Config+0x17a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006f22:	3b01      	subs	r3, #1
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006f2e:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006f38:	e746      	b.n	8006dc8 <HAL_OSPIM_Config+0x178>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006f3a:	42a9      	cmp	r1, r5
 8006f3c:	f47f af6e 	bne.w	8006e1c <HAL_OSPIM_Config+0x1cc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006f40:	42a2      	cmp	r2, r4
 8006f42:	f47f af6b 	bne.w	8006e1c <HAL_OSPIM_Config+0x1cc>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006f46:	4298      	cmp	r0, r3
 8006f48:	f47f af68 	bne.w	8006e1c <HAL_OSPIM_Config+0x1cc>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006f4c:	f8db 1000 	ldr.w	r1, [fp]
 8006f50:	f041 0101 	orr.w	r1, r1, #1
 8006f54:	f8cb 1000 	str.w	r1, [fp]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006f58:	4c72      	ldr	r4, [pc, #456]	@ (8007124 <HAL_OSPIM_Config+0x4d4>)
 8006f5a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006f5e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8006f62:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006f66:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8006f6a:	ea41 2146 	orr.w	r1, r1, r6, lsl #9
 8006f6e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8006f72:	f8ce 1004 	str.w	r1, [lr, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006f76:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8006f7a:	6821      	ldr	r1, [r4, #0]
 8006f7c:	3801      	subs	r0, #1
 8006f7e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8006f82:	4288      	cmp	r0, r1
 8006f84:	d905      	bls.n	8006f92 <HAL_OSPIM_Config+0x342>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	f421 017f 	bic.w	r1, r1, #16711680	@ 0xff0000
 8006f8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f90:	6021      	str	r1, [r4, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006f92:	9902      	ldr	r1, [sp, #8]
 8006f94:	f402 3c80 	and.w	ip, r2, #65536	@ 0x10000
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006f98:	6820      	ldr	r0, [r4, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006f9a:	3901      	subs	r1, #1
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006f9c:	f010 0f01 	tst.w	r0, #1
 8006fa0:	f403 3080 	and.w	r0, r3, #65536	@ 0x10000
 8006fa4:	ea4f 0181 	mov.w	r1, r1, lsl #2
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006fa8:	4421      	add	r1, r4
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006faa:	d061      	beq.n	8007070 <HAL_OSPIM_Config+0x420>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006fac:	684e      	ldr	r6, [r1, #4]
 8006fae:	f026 0603 	bic.w	r6, r6, #3
 8006fb2:	f046 0601 	orr.w	r6, r6, #1
 8006fb6:	604e      	str	r6, [r1, #4]
      if (cfg->DQSPort != 0U)
 8006fb8:	b145      	cbz	r5, 8006fcc <HAL_OSPIM_Config+0x37c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006fba:	3d01      	subs	r5, #1
 8006fbc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006fc0:	6869      	ldr	r1, [r5, #4]
 8006fc2:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006fc6:	f041 0110 	orr.w	r1, r1, #16
 8006fca:	6069      	str	r1, [r5, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006fcc:	f1bc 0f00 	cmp.w	ip, #0
 8006fd0:	d02e      	beq.n	8007030 <HAL_OSPIM_Config+0x3e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006fd2:	3a01      	subs	r2, #1
 8006fd4:	f002 0201 	and.w	r2, r2, #1
 8006fd8:	0092      	lsls	r2, r2, #2
 8006fda:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8006fde:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8006fe2:	6851      	ldr	r1, [r2, #4]
 8006fe4:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006fe8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006fec:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006fee:	b378      	cbz	r0, 8007050 <HAL_OSPIM_Config+0x400>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006ffc:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007006:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800700a:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800700c:	b127      	cbz	r7, 8007018 <HAL_OSPIM_Config+0x3c8>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800700e:	4a46      	ldr	r2, [pc, #280]	@ (8007128 <HAL_OSPIM_Config+0x4d8>)
 8007010:	6813      	ldr	r3, [r2, #0]
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d504      	bpl.n	8007028 <HAL_OSPIM_Config+0x3d8>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800701e:	4a43      	ldr	r2, [pc, #268]	@ (800712c <HAL_OSPIM_Config+0x4dc>)
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6013      	str	r3, [r2, #0]
}
 8007028:	2000      	movs	r0, #0
 800702a:	b011      	add	sp, #68	@ 0x44
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007030:	2a00      	cmp	r2, #0
 8007032:	d0dc      	beq.n	8006fee <HAL_OSPIM_Config+0x39e>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007034:	3a01      	subs	r2, #1
 8007036:	f002 0201 	and.w	r2, r2, #1
 800703a:	0092      	lsls	r2, r2, #2
 800703c:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8007040:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8007044:	6851      	ldr	r1, [r2, #4]
 8007046:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800704a:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800704e:	e7cd      	b.n	8006fec <HAL_OSPIM_Config+0x39c>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0db      	beq.n	800700c <HAL_OSPIM_Config+0x3bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007054:	3b01      	subs	r3, #1
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8007060:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800706a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800706e:	e7cc      	b.n	800700a <HAL_OSPIM_Config+0x3ba>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007070:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8007074:	f02e 0e03 	bic.w	lr, lr, #3
 8007078:	ea4e 0e46 	orr.w	lr, lr, r6, lsl #1
 800707c:	f04e 0e01 	orr.w	lr, lr, #1
 8007080:	f8c1 e004 	str.w	lr, [r1, #4]
      if (cfg->DQSPort != 0U)
 8007084:	b155      	cbz	r5, 800709c <HAL_OSPIM_Config+0x44c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007086:	3d01      	subs	r5, #1
 8007088:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800708c:	6861      	ldr	r1, [r4, #4]
 800708e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8007092:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
 8007096:	f041 0110 	orr.w	r1, r1, #16
 800709a:	6061      	str	r1, [r4, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800709c:	f1bc 0f00 	cmp.w	ip, #0
 80070a0:	d01e      	beq.n	80070e0 <HAL_OSPIM_Config+0x490>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070a2:	3a01      	subs	r2, #1
 80070a4:	f002 0201 	and.w	r2, r2, #1
 80070a8:	0092      	lsls	r2, r2, #2
 80070aa:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 80070ae:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 80070b2:	6851      	ldr	r1, [r2, #4]
 80070b4:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80070b8:	ea41 4186 	orr.w	r1, r1, r6, lsl #18
 80070bc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070c0:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070c2:	b1f8      	cbz	r0, 8007104 <HAL_OSPIM_Config+0x4b4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070c4:	3b01      	subs	r3, #1
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 80070d0:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80070da:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
 80070de:	e792      	b.n	8007006 <HAL_OSPIM_Config+0x3b6>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	d0ee      	beq.n	80070c2 <HAL_OSPIM_Config+0x472>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070e4:	3a01      	subs	r2, #1
 80070e6:	f002 0201 	and.w	r2, r2, #1
 80070ea:	0092      	lsls	r2, r2, #2
 80070ec:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 80070f0:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 80070f4:	6851      	ldr	r1, [r2, #4]
 80070f6:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80070fa:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 80070fe:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8007102:	e7dd      	b.n	80070c0 <HAL_OSPIM_Config+0x470>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007104:	2b00      	cmp	r3, #0
 8007106:	d081      	beq.n	800700c <HAL_OSPIM_Config+0x3bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007108:	3b01      	subs	r3, #1
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8007114:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800711e:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8007122:	e7a2      	b.n	800706a <HAL_OSPIM_Config+0x41a>
 8007124:	5200b400 	.word	0x5200b400
 8007128:	52005000 	.word	0x52005000
 800712c:	5200a000 	.word	0x5200a000

08007130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007130:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007132:	4d1d      	ldr	r5, [pc, #116]	@ (80071a8 <HAL_PWREx_ConfigSupply+0x78>)
{
 8007134:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007136:	68eb      	ldr	r3, [r5, #12]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	2b06      	cmp	r3, #6
 800713e:	d006      	beq.n	800714e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007140:	68e8      	ldr	r0, [r5, #12]
 8007142:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8007146:	1b00      	subs	r0, r0, r4
 8007148:	bf18      	it	ne
 800714a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800714c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800714e:	68eb      	ldr	r3, [r5, #12]
 8007150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007154:	4303      	orrs	r3, r0
 8007156:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8007158:	f7fe f8fa 	bl	8005350 <HAL_GetTick>
 800715c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800715e:	686b      	ldr	r3, [r5, #4]
 8007160:	049b      	lsls	r3, r3, #18
 8007162:	d508      	bpl.n	8007176 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007164:	f1a4 031d 	sub.w	r3, r4, #29
 8007168:	2b01      	cmp	r3, #1
 800716a:	d90c      	bls.n	8007186 <HAL_PWREx_ConfigSupply+0x56>
 800716c:	3c2d      	subs	r4, #45	@ 0x2d
 800716e:	2c01      	cmp	r4, #1
 8007170:	d909      	bls.n	8007186 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8007172:	2000      	movs	r0, #0
 8007174:	e7ea      	b.n	800714c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007176:	f7fe f8eb 	bl	8005350 <HAL_GetTick>
 800717a:	1b80      	subs	r0, r0, r6
 800717c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007180:	d9ed      	bls.n	800715e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8007182:	2001      	movs	r0, #1
 8007184:	e7e2      	b.n	800714c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8007186:	f7fe f8e3 	bl	8005350 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800718a:	4d07      	ldr	r5, [pc, #28]	@ (80071a8 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 800718c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800718e:	68eb      	ldr	r3, [r5, #12]
 8007190:	f003 0311 	and.w	r3, r3, #17
 8007194:	2b11      	cmp	r3, #17
 8007196:	d0ec      	beq.n	8007172 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007198:	f7fe f8da 	bl	8005350 <HAL_GetTick>
 800719c:	1b00      	subs	r0, r0, r4
 800719e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80071a2:	d9f4      	bls.n	800718e <HAL_PWREx_ConfigSupply+0x5e>
 80071a4:	e7ed      	b.n	8007182 <HAL_PWREx_ConfigSupply+0x52>
 80071a6:	bf00      	nop
 80071a8:	58024800 	.word	0x58024800

080071ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071ae:	4604      	mov	r4, r0
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d069      	beq.n	8007288 <HAL_RCC_OscConfig+0xdc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071b4:	6803      	ldr	r3, [r0, #0]
 80071b6:	07d8      	lsls	r0, r3, #31
 80071b8:	d453      	bmi.n	8007262 <HAL_RCC_OscConfig+0xb6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0799      	lsls	r1, r3, #30
 80071be:	f100 80a1 	bmi.w	8007304 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	06da      	lsls	r2, r3, #27
 80071c6:	d51c      	bpl.n	8007202 <HAL_RCC_OscConfig+0x56>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c8:	4a95      	ldr	r2, [pc, #596]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 80071ca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d007      	beq.n	80071e6 <HAL_RCC_OscConfig+0x3a>
 80071d6:	2b18      	cmp	r3, #24
 80071d8:	f040 80e1 	bne.w	800739e <HAL_RCC_OscConfig+0x1f2>
 80071dc:	f001 0303 	and.w	r3, r1, #3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f040 80dc 	bne.w	800739e <HAL_RCC_OscConfig+0x1f2>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	05db      	lsls	r3, r3, #23
 80071ea:	d502      	bpl.n	80071f2 <HAL_RCC_OscConfig+0x46>
 80071ec:	69e3      	ldr	r3, [r4, #28]
 80071ee:	2b80      	cmp	r3, #128	@ 0x80
 80071f0:	d14a      	bne.n	8007288 <HAL_RCC_OscConfig+0xdc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071f2:	4a8b      	ldr	r2, [pc, #556]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 80071f4:	6a21      	ldr	r1, [r4, #32]
 80071f6:	68d3      	ldr	r3, [r2, #12]
 80071f8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80071fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007200:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	0719      	lsls	r1, r3, #28
 8007206:	f100 80f6 	bmi.w	80073f6 <HAL_RCC_OscConfig+0x24a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	069a      	lsls	r2, r3, #26
 800720e:	f100 811c 	bmi.w	800744a <HAL_RCC_OscConfig+0x29e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	075d      	lsls	r5, r3, #29
 8007216:	d51e      	bpl.n	8007256 <HAL_RCC_OscConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007218:	4d82      	ldr	r5, [pc, #520]	@ (8007424 <HAL_RCC_OscConfig+0x278>)
 800721a:	682b      	ldr	r3, [r5, #0]
 800721c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007220:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007222:	f7fe f895 	bl	8005350 <HAL_GetTick>
 8007226:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	05da      	lsls	r2, r3, #23
 800722c:	f140 8132 	bpl.w	8007494 <HAL_RCC_OscConfig+0x2e8>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007230:	68a3      	ldr	r3, [r4, #8]
 8007232:	4d7b      	ldr	r5, [pc, #492]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 8007234:	2b01      	cmp	r3, #1
 8007236:	f040 8134 	bne.w	80074a2 <HAL_RCC_OscConfig+0x2f6>
 800723a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007246:	f7fe f883 	bl	8005350 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800724a:	4e75      	ldr	r6, [pc, #468]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 800724c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800724e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8007250:	079b      	lsls	r3, r3, #30
 8007252:	f140 814c 	bpl.w	80074ee <HAL_RCC_OscConfig+0x342>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007256:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007258:	2900      	cmp	r1, #0
 800725a:	f040 814f 	bne.w	80074fc <HAL_RCC_OscConfig+0x350>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800725e:	2000      	movs	r0, #0
 8007260:	e02a      	b.n	80072b8 <HAL_RCC_OscConfig+0x10c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007262:	4a6f      	ldr	r2, [pc, #444]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 8007264:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007266:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007268:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800726c:	2b10      	cmp	r3, #16
 800726e:	d005      	beq.n	800727c <HAL_RCC_OscConfig+0xd0>
 8007270:	2b18      	cmp	r3, #24
 8007272:	d10b      	bne.n	800728c <HAL_RCC_OscConfig+0xe0>
 8007274:	f001 0303 	and.w	r3, r1, #3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d107      	bne.n	800728c <HAL_RCC_OscConfig+0xe0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	039a      	lsls	r2, r3, #14
 8007280:	d59b      	bpl.n	80071ba <HAL_RCC_OscConfig+0xe>
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d198      	bne.n	80071ba <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8007288:	2001      	movs	r0, #1
 800728a:	e015      	b.n	80072b8 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800728c:	6863      	ldr	r3, [r4, #4]
 800728e:	4d64      	ldr	r5, [pc, #400]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007294:	d111      	bne.n	80072ba <HAL_RCC_OscConfig+0x10e>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800729c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800729e:	f7fe f857 	bl	8005350 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072a2:	4e5f      	ldr	r6, [pc, #380]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80072a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072a6:	6833      	ldr	r3, [r6, #0]
 80072a8:	039b      	lsls	r3, r3, #14
 80072aa:	d486      	bmi.n	80071ba <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fe f850 	bl	8005350 <HAL_GetTick>
 80072b0:	1b40      	subs	r0, r0, r5
 80072b2:	2864      	cmp	r0, #100	@ 0x64
 80072b4:	d9f7      	bls.n	80072a6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80072b6:	2003      	movs	r0, #3
}
 80072b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ba:	b9a3      	cbnz	r3, 80072e6 <HAL_RCC_OscConfig+0x13a>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80072cc:	f7fe f840 	bl	8005350 <HAL_GetTick>
 80072d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	039f      	lsls	r7, r3, #14
 80072d6:	f57f af70 	bpl.w	80071ba <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072da:	f7fe f839 	bl	8005350 <HAL_GetTick>
 80072de:	1b80      	subs	r0, r0, r6
 80072e0:	2864      	cmp	r0, #100	@ 0x64
 80072e2:	d9f6      	bls.n	80072d2 <HAL_RCC_OscConfig+0x126>
 80072e4:	e7e7      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	d103      	bne.n	80072f6 <HAL_RCC_OscConfig+0x14a>
 80072ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	e7cf      	b.n	8007296 <HAL_RCC_OscConfig+0xea>
 80072f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007302:	e7cb      	b.n	800729c <HAL_RCC_OscConfig+0xf0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007304:	4946      	ldr	r1, [pc, #280]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 8007306:	68e2      	ldr	r2, [r4, #12]
 8007308:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800730a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800730c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8007310:	d003      	beq.n	800731a <HAL_RCC_OscConfig+0x16e>
 8007312:	2b18      	cmp	r3, #24
 8007314:	d120      	bne.n	8007358 <HAL_RCC_OscConfig+0x1ac>
 8007316:	0780      	lsls	r0, r0, #30
 8007318:	d11e      	bne.n	8007358 <HAL_RCC_OscConfig+0x1ac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800731a:	680b      	ldr	r3, [r1, #0]
 800731c:	075b      	lsls	r3, r3, #29
 800731e:	d501      	bpl.n	8007324 <HAL_RCC_OscConfig+0x178>
 8007320:	2a00      	cmp	r2, #0
 8007322:	d0b1      	beq.n	8007288 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007324:	4d3e      	ldr	r5, [pc, #248]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	f023 0319 	bic.w	r3, r3, #25
 800732c:	4313      	orrs	r3, r2
 800732e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007330:	f7fe f80e 	bl	8005350 <HAL_GetTick>
 8007334:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	075f      	lsls	r7, r3, #29
 800733a:	d507      	bpl.n	800734c <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733c:	686b      	ldr	r3, [r5, #4]
 800733e:	6922      	ldr	r2, [r4, #16]
 8007340:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007344:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007348:	606b      	str	r3, [r5, #4]
 800734a:	e73a      	b.n	80071c2 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800734c:	f7fe f800 	bl	8005350 <HAL_GetTick>
 8007350:	1b80      	subs	r0, r0, r6
 8007352:	2802      	cmp	r0, #2
 8007354:	d9ef      	bls.n	8007336 <HAL_RCC_OscConfig+0x18a>
 8007356:	e7ae      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007358:	4d31      	ldr	r5, [pc, #196]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800735a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800735c:	b17a      	cbz	r2, 800737e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800735e:	f023 0319 	bic.w	r3, r3, #25
 8007362:	4313      	orrs	r3, r2
 8007364:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007366:	f7fd fff3 	bl	8005350 <HAL_GetTick>
 800736a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	0758      	lsls	r0, r3, #29
 8007370:	d4e4      	bmi.n	800733c <HAL_RCC_OscConfig+0x190>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007372:	f7fd ffed 	bl	8005350 <HAL_GetTick>
 8007376:	1b80      	subs	r0, r0, r6
 8007378:	2802      	cmp	r0, #2
 800737a:	d9f7      	bls.n	800736c <HAL_RCC_OscConfig+0x1c0>
 800737c:	e79b      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_HSI_DISABLE();
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007384:	f7fd ffe4 	bl	8005350 <HAL_GetTick>
 8007388:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	0759      	lsls	r1, r3, #29
 800738e:	f57f af18 	bpl.w	80071c2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007392:	f7fd ffdd 	bl	8005350 <HAL_GetTick>
 8007396:	1b80      	subs	r0, r0, r6
 8007398:	2802      	cmp	r0, #2
 800739a:	d9f6      	bls.n	800738a <HAL_RCC_OscConfig+0x1de>
 800739c:	e78b      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800739e:	69e3      	ldr	r3, [r4, #28]
 80073a0:	4d1f      	ldr	r5, [pc, #124]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 80073a2:	b1bb      	cbz	r3, 80073d4 <HAL_RCC_OscConfig+0x228>
        __HAL_RCC_CSI_ENABLE();
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80073ac:	f7fd ffd0 	bl	8005350 <HAL_GetTick>
 80073b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	05df      	lsls	r7, r3, #23
 80073b6:	d507      	bpl.n	80073c8 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073b8:	68eb      	ldr	r3, [r5, #12]
 80073ba:	6a22      	ldr	r2, [r4, #32]
 80073bc:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80073c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80073c4:	60eb      	str	r3, [r5, #12]
 80073c6:	e71c      	b.n	8007202 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073c8:	f7fd ffc2 	bl	8005350 <HAL_GetTick>
 80073cc:	1b80      	subs	r0, r0, r6
 80073ce:	2802      	cmp	r0, #2
 80073d0:	d9ef      	bls.n	80073b2 <HAL_RCC_OscConfig+0x206>
 80073d2:	e770      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_CSI_DISABLE();
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80073dc:	f7fd ffb8 	bl	8005350 <HAL_GetTick>
 80073e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	05d8      	lsls	r0, r3, #23
 80073e6:	f57f af0c 	bpl.w	8007202 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073ea:	f7fd ffb1 	bl	8005350 <HAL_GetTick>
 80073ee:	1b80      	subs	r0, r0, r6
 80073f0:	2802      	cmp	r0, #2
 80073f2:	d9f6      	bls.n	80073e2 <HAL_RCC_OscConfig+0x236>
 80073f4:	e75f      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073f6:	6963      	ldr	r3, [r4, #20]
 80073f8:	4d09      	ldr	r5, [pc, #36]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 80073fa:	b1ab      	cbz	r3, 8007428 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSI_ENABLE();
 80073fc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8007404:	f7fd ffa4 	bl	8005350 <HAL_GetTick>
 8007408:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800740a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800740c:	079b      	lsls	r3, r3, #30
 800740e:	f53f aefc 	bmi.w	800720a <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007412:	f7fd ff9d 	bl	8005350 <HAL_GetTick>
 8007416:	1b80      	subs	r0, r0, r6
 8007418:	2802      	cmp	r0, #2
 800741a:	d9f6      	bls.n	800740a <HAL_RCC_OscConfig+0x25e>
 800741c:	e74b      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
 800741e:	bf00      	nop
 8007420:	58024400 	.word	0x58024400
 8007424:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8007428:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8007430:	f7fd ff8e 	bl	8005350 <HAL_GetTick>
 8007434:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007436:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007438:	079f      	lsls	r7, r3, #30
 800743a:	f57f aee6 	bpl.w	800720a <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800743e:	f7fd ff87 	bl	8005350 <HAL_GetTick>
 8007442:	1b80      	subs	r0, r0, r6
 8007444:	2802      	cmp	r0, #2
 8007446:	d9f6      	bls.n	8007436 <HAL_RCC_OscConfig+0x28a>
 8007448:	e735      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800744a:	69a3      	ldr	r3, [r4, #24]
 800744c:	4d93      	ldr	r5, [pc, #588]	@ (800769c <HAL_RCC_OscConfig+0x4f0>)
 800744e:	b183      	cbz	r3, 8007472 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSI48_ENABLE();
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007456:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007458:	f7fd ff7a 	bl	8005350 <HAL_GetTick>
 800745c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800745e:	682b      	ldr	r3, [r5, #0]
 8007460:	0498      	lsls	r0, r3, #18
 8007462:	f53f aed6 	bmi.w	8007212 <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007466:	f7fd ff73 	bl	8005350 <HAL_GetTick>
 800746a:	1b80      	subs	r0, r0, r6
 800746c:	2802      	cmp	r0, #2
 800746e:	d9f6      	bls.n	800745e <HAL_RCC_OscConfig+0x2b2>
 8007470:	e721      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSI48_DISABLE();
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007478:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800747a:	f7fd ff69 	bl	8005350 <HAL_GetTick>
 800747e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	0499      	lsls	r1, r3, #18
 8007484:	f57f aec5 	bpl.w	8007212 <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007488:	f7fd ff62 	bl	8005350 <HAL_GetTick>
 800748c:	1b80      	subs	r0, r0, r6
 800748e:	2802      	cmp	r0, #2
 8007490:	d9f6      	bls.n	8007480 <HAL_RCC_OscConfig+0x2d4>
 8007492:	e710      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007494:	f7fd ff5c 	bl	8005350 <HAL_GetTick>
 8007498:	1b80      	subs	r0, r0, r6
 800749a:	2864      	cmp	r0, #100	@ 0x64
 800749c:	f67f aec4 	bls.w	8007228 <HAL_RCC_OscConfig+0x7c>
 80074a0:	e709      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074a2:	b9b3      	cbnz	r3, 80074d2 <HAL_RCC_OscConfig+0x326>
 80074a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	672b      	str	r3, [r5, #112]	@ 0x70
 80074b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80074b2:	f023 0304 	bic.w	r3, r3, #4
 80074b6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80074b8:	f7fd ff4a 	bl	8005350 <HAL_GetTick>
 80074bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074be:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80074c0:	0798      	lsls	r0, r3, #30
 80074c2:	f57f aec8 	bpl.w	8007256 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c6:	f7fd ff43 	bl	8005350 <HAL_GetTick>
 80074ca:	1b80      	subs	r0, r0, r6
 80074cc:	42b8      	cmp	r0, r7
 80074ce:	d9f6      	bls.n	80074be <HAL_RCC_OscConfig+0x312>
 80074d0:	e6f1      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80074d6:	d103      	bne.n	80074e0 <HAL_RCC_OscConfig+0x334>
 80074d8:	f043 0304 	orr.w	r3, r3, #4
 80074dc:	672b      	str	r3, [r5, #112]	@ 0x70
 80074de:	e6ac      	b.n	800723a <HAL_RCC_OscConfig+0x8e>
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	672b      	str	r3, [r5, #112]	@ 0x70
 80074e6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80074e8:	f023 0304 	bic.w	r3, r3, #4
 80074ec:	e6a8      	b.n	8007240 <HAL_RCC_OscConfig+0x94>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ee:	f7fd ff2f 	bl	8005350 <HAL_GetTick>
 80074f2:	1b40      	subs	r0, r0, r5
 80074f4:	42b8      	cmp	r0, r7
 80074f6:	f67f aeaa 	bls.w	800724e <HAL_RCC_OscConfig+0xa2>
 80074fa:	e6dc      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074fc:	4d67      	ldr	r5, [pc, #412]	@ (800769c <HAL_RCC_OscConfig+0x4f0>)
 80074fe:	692b      	ldr	r3, [r5, #16]
 8007500:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007504:	2b18      	cmp	r3, #24
 8007506:	d07a      	beq.n	80075fe <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_DISABLE();
 8007508:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800750a:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800750c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007510:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007512:	d167      	bne.n	80075e4 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8007514:	f7fd ff1c 	bl	8005350 <HAL_GetTick>
 8007518:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	0199      	lsls	r1, r3, #6
 800751e:	d45b      	bmi.n	80075d8 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007520:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8007522:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007524:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8007528:	f023 0303 	bic.w	r3, r3, #3
 800752c:	4313      	orrs	r3, r2
 800752e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007530:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007534:	62ab      	str	r3, [r5, #40]	@ 0x28
 8007536:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007538:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800753a:	3b01      	subs	r3, #1
 800753c:	3a01      	subs	r2, #1
 800753e:	025b      	lsls	r3, r3, #9
 8007540:	0412      	lsls	r2, r2, #16
 8007542:	b29b      	uxth	r3, r3
 8007544:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007548:	4313      	orrs	r3, r2
 800754a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800754c:	3a01      	subs	r2, #1
 800754e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007552:	4313      	orrs	r3, r2
 8007554:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007556:	3a01      	subs	r2, #1
 8007558:	0612      	lsls	r2, r2, #24
 800755a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800755e:	4313      	orrs	r3, r2
 8007560:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8007562:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800756a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800756c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800756e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007572:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007576:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800757a:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800757c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800757e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007580:	f023 030c 	bic.w	r3, r3, #12
 8007584:	4313      	orrs	r3, r2
 8007586:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007588:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800758a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800758c:	f023 0302 	bic.w	r3, r3, #2
 8007590:	4313      	orrs	r3, r2
 8007592:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007594:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800759a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800759c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800759e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075a2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075a4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80075a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075aa:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80075ac:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80075bc:	f7fd fec8 	bl	8005350 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075c0:	4d36      	ldr	r5, [pc, #216]	@ (800769c <HAL_RCC_OscConfig+0x4f0>)
        tickstart = HAL_GetTick();
 80075c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	019a      	lsls	r2, r3, #6
 80075c8:	f53f ae49 	bmi.w	800725e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075cc:	f7fd fec0 	bl	8005350 <HAL_GetTick>
 80075d0:	1b00      	subs	r0, r0, r4
 80075d2:	2802      	cmp	r0, #2
 80075d4:	d9f6      	bls.n	80075c4 <HAL_RCC_OscConfig+0x418>
 80075d6:	e66e      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fd feba 	bl	8005350 <HAL_GetTick>
 80075dc:	1b80      	subs	r0, r0, r6
 80075de:	2802      	cmp	r0, #2
 80075e0:	d99b      	bls.n	800751a <HAL_RCC_OscConfig+0x36e>
 80075e2:	e668      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 80075e4:	f7fd feb4 	bl	8005350 <HAL_GetTick>
 80075e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ea:	682b      	ldr	r3, [r5, #0]
 80075ec:	019b      	lsls	r3, r3, #6
 80075ee:	f57f ae36 	bpl.w	800725e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f2:	f7fd fead 	bl	8005350 <HAL_GetTick>
 80075f6:	1b00      	subs	r0, r0, r4
 80075f8:	2802      	cmp	r0, #2
 80075fa:	d9f6      	bls.n	80075ea <HAL_RCC_OscConfig+0x43e>
 80075fc:	e65b      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075fe:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007600:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007602:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007604:	f43f ae40 	beq.w	8007288 <HAL_RCC_OscConfig+0xdc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007608:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800760c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800760e:	4281      	cmp	r1, r0
 8007610:	f47f ae3a 	bne.w	8007288 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007614:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007618:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800761a:	428a      	cmp	r2, r1
 800761c:	f47f ae34 	bne.w	8007288 <HAL_RCC_OscConfig+0xdc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007620:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007622:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8007626:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007628:	4291      	cmp	r1, r2
 800762a:	f47f ae2d 	bne.w	8007288 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800762e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007630:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8007634:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007636:	4291      	cmp	r1, r2
 8007638:	f47f ae26 	bne.w	8007288 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800763c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800763e:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8007642:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007644:	4291      	cmp	r1, r2
 8007646:	f47f ae1f 	bne.w	8007288 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800764a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800764c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007650:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007652:	4293      	cmp	r3, r2
 8007654:	f47f ae18 	bne.w	8007288 <HAL_RCC_OscConfig+0xdc>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007658:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800765a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800765c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007660:	429a      	cmp	r2, r3
 8007662:	f43f adfc 	beq.w	800725e <HAL_RCC_OscConfig+0xb2>
          __HAL_RCC_PLLFRACN_DISABLE();
 8007666:	4d0d      	ldr	r5, [pc, #52]	@ (800769c <HAL_RCC_OscConfig+0x4f0>)
 8007668:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8007670:	f7fd fe6e 	bl	8005350 <HAL_GetTick>
 8007674:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007676:	f7fd fe6b 	bl	8005350 <HAL_GetTick>
 800767a:	42b0      	cmp	r0, r6
 800767c:	d0fb      	beq.n	8007676 <HAL_RCC_OscConfig+0x4ca>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800767e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8007680:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8007682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007686:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800768a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800768e:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8007690:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007692:	f043 0301 	orr.w	r3, r3, #1
 8007696:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8007698:	e5e1      	b.n	800725e <HAL_RCC_OscConfig+0xb2>
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400

080076a0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076a0:	4b49      	ldr	r3, [pc, #292]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x128>)
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80076a8:	2a10      	cmp	r2, #16
{
 80076aa:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ac:	f000 8088 	beq.w	80077c0 <HAL_RCC_GetSysClockFreq+0x120>
 80076b0:	2a18      	cmp	r2, #24
 80076b2:	d00c      	beq.n	80076ce <HAL_RCC_GetSysClockFreq+0x2e>
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	f040 8085 	bne.w	80077c4 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4843      	ldr	r0, [pc, #268]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x12c>)
 80076be:	f012 0f20 	tst.w	r2, #32
 80076c2:	d003      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80076ca:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80076cc:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80076d0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076d2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 80076d4:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80076d8:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 80076de:	d0f5      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076e0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076e4:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e8:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ec:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076f0:	4362      	muls	r2, r4
 80076f2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80076f6:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076fc:	ee06 2a90 	vmov	s13, r2
 8007700:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007704:	d04e      	beq.n	80077a4 <HAL_RCC_GetSysClockFreq+0x104>
 8007706:	2902      	cmp	r1, #2
 8007708:	d03e      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0xe8>
 800770a:	2900      	cmp	r1, #0
 800770c:	d14a      	bne.n	80077a4 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	0692      	lsls	r2, r2, #26
 8007712:	d527      	bpl.n	8007764 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007714:	6819      	ldr	r1, [r3, #0]
 8007716:	4a2d      	ldr	r2, [pc, #180]	@ (80077cc <HAL_RCC_GetSysClockFreq+0x12c>)
 8007718:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800771e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007724:	ee07 2a90 	vmov	s15, r2
 8007728:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800772c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8007730:	ee07 3a10 	vmov	s14, r3
 8007734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007738:	ee37 7a26 	vadd.f32	s14, s14, s13
 800773c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007740:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007744:	4b20      	ldr	r3, [pc, #128]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x128>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007748:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800774c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800774e:	ee07 3a10 	vmov	s14, r3
 8007752:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007756:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800775a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800775e:	ee17 0a90 	vmov	r0, s15
 8007762:	e7b3      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee77 7a86 	vadd.f32	s15, s15, s12
 800777a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80077d0 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800777e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8007782:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8007786:	e7dd      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800779e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x134>
 80077a2:	e7ec      	b.n	800777e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077ba:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x138>
 80077be:	e7de      	b.n	800777e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077c0:	4806      	ldr	r0, [pc, #24]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80077c2:	e783      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 80077c4:	4806      	ldr	r0, [pc, #24]	@ (80077e0 <HAL_RCC_GetSysClockFreq+0x140>)
 80077c6:	e781      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x2c>
 80077c8:	58024400 	.word	0x58024400
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	4c742400 	.word	0x4c742400
 80077d4:	4bbebc20 	.word	0x4bbebc20
 80077d8:	4a742400 	.word	0x4a742400
 80077dc:	017d7840 	.word	0x017d7840
 80077e0:	003d0900 	.word	0x003d0900

080077e4 <HAL_RCC_ClockConfig>:
{
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80077ea:	4604      	mov	r4, r0
 80077ec:	b910      	cbnz	r0, 80077f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80077ee:	2001      	movs	r0, #1
}
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f4:	4a88      	ldr	r2, [pc, #544]	@ (8007a18 <HAL_RCC_ClockConfig+0x234>)
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	428b      	cmp	r3, r1
 80077fe:	f0c0 8093 	bcc.w	8007928 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	075f      	lsls	r7, r3, #29
 8007806:	f100 809b 	bmi.w	8007940 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780a:	071e      	lsls	r6, r3, #28
 800780c:	d50b      	bpl.n	8007826 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800780e:	4983      	ldr	r1, [pc, #524]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 8007810:	6960      	ldr	r0, [r4, #20]
 8007812:	69ca      	ldr	r2, [r1, #28]
 8007814:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007818:	4290      	cmp	r0, r2
 800781a:	d904      	bls.n	8007826 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800781c:	69ca      	ldr	r2, [r1, #28]
 800781e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007822:	4302      	orrs	r2, r0
 8007824:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007826:	06d8      	lsls	r0, r3, #27
 8007828:	d50b      	bpl.n	8007842 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800782a:	497c      	ldr	r1, [pc, #496]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 800782c:	69a0      	ldr	r0, [r4, #24]
 800782e:	69ca      	ldr	r2, [r1, #28]
 8007830:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007834:	4290      	cmp	r0, r2
 8007836:	d904      	bls.n	8007842 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007838:	69ca      	ldr	r2, [r1, #28]
 800783a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800783e:	4302      	orrs	r2, r0
 8007840:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007842:	0699      	lsls	r1, r3, #26
 8007844:	d50b      	bpl.n	800785e <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007846:	4975      	ldr	r1, [pc, #468]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 8007848:	69e0      	ldr	r0, [r4, #28]
 800784a:	6a0a      	ldr	r2, [r1, #32]
 800784c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007850:	4290      	cmp	r0, r2
 8007852:	d904      	bls.n	800785e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007854:	6a0a      	ldr	r2, [r1, #32]
 8007856:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800785a:	4302      	orrs	r2, r0
 800785c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800785e:	079a      	lsls	r2, r3, #30
 8007860:	d50b      	bpl.n	800787a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007862:	496e      	ldr	r1, [pc, #440]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 8007864:	68e0      	ldr	r0, [r4, #12]
 8007866:	698a      	ldr	r2, [r1, #24]
 8007868:	f002 020f 	and.w	r2, r2, #15
 800786c:	4290      	cmp	r0, r2
 800786e:	d904      	bls.n	800787a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007870:	698a      	ldr	r2, [r1, #24]
 8007872:	f022 020f 	bic.w	r2, r2, #15
 8007876:	4302      	orrs	r2, r0
 8007878:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787a:	07df      	lsls	r7, r3, #31
 800787c:	d46e      	bmi.n	800795c <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	079e      	lsls	r6, r3, #30
 8007882:	f100 80a1 	bmi.w	80079c8 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007886:	4964      	ldr	r1, [pc, #400]	@ (8007a18 <HAL_RCC_ClockConfig+0x234>)
 8007888:	680a      	ldr	r2, [r1, #0]
 800788a:	f002 020f 	and.w	r2, r2, #15
 800788e:	42aa      	cmp	r2, r5
 8007890:	f200 80a8 	bhi.w	80079e4 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007894:	0758      	lsls	r0, r3, #29
 8007896:	f100 80b1 	bmi.w	80079fc <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800789a:	0719      	lsls	r1, r3, #28
 800789c:	d50b      	bpl.n	80078b6 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800789e:	495f      	ldr	r1, [pc, #380]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 80078a0:	6960      	ldr	r0, [r4, #20]
 80078a2:	69ca      	ldr	r2, [r1, #28]
 80078a4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80078a8:	4290      	cmp	r0, r2
 80078aa:	d204      	bcs.n	80078b6 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078ac:	69ca      	ldr	r2, [r1, #28]
 80078ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80078b2:	4302      	orrs	r2, r0
 80078b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b6:	06da      	lsls	r2, r3, #27
 80078b8:	d50b      	bpl.n	80078d2 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078ba:	4958      	ldr	r1, [pc, #352]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 80078bc:	69a0      	ldr	r0, [r4, #24]
 80078be:	69ca      	ldr	r2, [r1, #28]
 80078c0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80078c4:	4290      	cmp	r0, r2
 80078c6:	d204      	bcs.n	80078d2 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078c8:	69ca      	ldr	r2, [r1, #28]
 80078ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078ce:	4302      	orrs	r2, r0
 80078d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078d2:	069b      	lsls	r3, r3, #26
 80078d4:	d50b      	bpl.n	80078ee <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078d6:	4a51      	ldr	r2, [pc, #324]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 80078d8:	69e1      	ldr	r1, [r4, #28]
 80078da:	6a13      	ldr	r3, [r2, #32]
 80078dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078e0:	4299      	cmp	r1, r3
 80078e2:	d204      	bcs.n	80078ee <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078e4:	6a13      	ldr	r3, [r2, #32]
 80078e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ea:	430b      	orrs	r3, r1
 80078ec:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078ee:	f7ff fed7 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 80078f2:	494a      	ldr	r1, [pc, #296]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 80078f4:	4a4a      	ldr	r2, [pc, #296]	@ (8007a20 <HAL_RCC_ClockConfig+0x23c>)
 80078f6:	698b      	ldr	r3, [r1, #24]
 80078f8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80078fc:	5cd3      	ldrb	r3, [r2, r3]
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007904:	698b      	ldr	r3, [r1, #24]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	5cd3      	ldrb	r3, [r2, r3]
 800790c:	4a45      	ldr	r2, [pc, #276]	@ (8007a24 <HAL_RCC_ClockConfig+0x240>)
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	fa20 f303 	lsr.w	r3, r0, r3
 8007916:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007918:	4b43      	ldr	r3, [pc, #268]	@ (8007a28 <HAL_RCC_ClockConfig+0x244>)
 800791a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800791c:	4b43      	ldr	r3, [pc, #268]	@ (8007a2c <HAL_RCC_ClockConfig+0x248>)
}
 800791e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	f7f9 bd10 	b.w	8001348 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007928:	6813      	ldr	r3, [r2, #0]
 800792a:	f023 030f 	bic.w	r3, r3, #15
 800792e:	430b      	orrs	r3, r1
 8007930:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	428b      	cmp	r3, r1
 800793a:	f47f af58 	bne.w	80077ee <HAL_RCC_ClockConfig+0xa>
 800793e:	e760      	b.n	8007802 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007940:	4936      	ldr	r1, [pc, #216]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 8007942:	6920      	ldr	r0, [r4, #16]
 8007944:	698a      	ldr	r2, [r1, #24]
 8007946:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800794a:	4290      	cmp	r0, r2
 800794c:	f67f af5d 	bls.w	800780a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007950:	698a      	ldr	r2, [r1, #24]
 8007952:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007956:	4302      	orrs	r2, r0
 8007958:	618a      	str	r2, [r1, #24]
 800795a:	e756      	b.n	800780a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800795c:	4b2f      	ldr	r3, [pc, #188]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 800795e:	68a1      	ldr	r1, [r4, #8]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8007966:	430a      	orrs	r2, r1
 8007968:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800796c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796e:	2902      	cmp	r1, #2
 8007970:	d11d      	bne.n	80079ae <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007972:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007976:	f43f af3a 	beq.w	80077ee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800797a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800797c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007980:	4f26      	ldr	r7, [pc, #152]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007982:	f022 0207 	bic.w	r2, r2, #7
 8007986:	430a      	orrs	r2, r1
 8007988:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800798a:	f7fd fce1 	bl	8005350 <HAL_GetTick>
 800798e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007998:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800799c:	f43f af6f 	beq.w	800787e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a0:	f7fd fcd6 	bl	8005350 <HAL_GetTick>
 80079a4:	1b80      	subs	r0, r0, r6
 80079a6:	4540      	cmp	r0, r8
 80079a8:	d9f2      	bls.n	8007990 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 80079aa:	2003      	movs	r0, #3
 80079ac:	e720      	b.n	80077f0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ae:	2903      	cmp	r1, #3
 80079b0:	d102      	bne.n	80079b8 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079b2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80079b6:	e7de      	b.n	8007976 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079b8:	2901      	cmp	r1, #1
 80079ba:	d102      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079bc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80079c0:	e7d9      	b.n	8007976 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079c2:	f012 0f04 	tst.w	r2, #4
 80079c6:	e7d6      	b.n	8007976 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079c8:	4914      	ldr	r1, [pc, #80]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 80079ca:	68e0      	ldr	r0, [r4, #12]
 80079cc:	698a      	ldr	r2, [r1, #24]
 80079ce:	f002 020f 	and.w	r2, r2, #15
 80079d2:	4290      	cmp	r0, r2
 80079d4:	f4bf af57 	bcs.w	8007886 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d8:	698a      	ldr	r2, [r1, #24]
 80079da:	f022 020f 	bic.w	r2, r2, #15
 80079de:	4302      	orrs	r2, r0
 80079e0:	618a      	str	r2, [r1, #24]
 80079e2:	e750      	b.n	8007886 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e4:	680a      	ldr	r2, [r1, #0]
 80079e6:	f022 020f 	bic.w	r2, r2, #15
 80079ea:	432a      	orrs	r2, r5
 80079ec:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ee:	680a      	ldr	r2, [r1, #0]
 80079f0:	f002 020f 	and.w	r2, r2, #15
 80079f4:	42aa      	cmp	r2, r5
 80079f6:	f47f aefa 	bne.w	80077ee <HAL_RCC_ClockConfig+0xa>
 80079fa:	e74b      	b.n	8007894 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079fc:	4907      	ldr	r1, [pc, #28]	@ (8007a1c <HAL_RCC_ClockConfig+0x238>)
 80079fe:	6920      	ldr	r0, [r4, #16]
 8007a00:	698a      	ldr	r2, [r1, #24]
 8007a02:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007a06:	4290      	cmp	r0, r2
 8007a08:	f4bf af47 	bcs.w	800789a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a0c:	698a      	ldr	r2, [r1, #24]
 8007a0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007a12:	4302      	orrs	r2, r0
 8007a14:	618a      	str	r2, [r1, #24]
 8007a16:	e740      	b.n	800789a <HAL_RCC_ClockConfig+0xb6>
 8007a18:	52002000 	.word	0x52002000
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	0802e500 	.word	0x0802e500
 8007a24:	2400003c 	.word	0x2400003c
 8007a28:	24000040 	.word	0x24000040
 8007a2c:	24000048 	.word	0x24000048

08007a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a30:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a32:	f7ff fe35 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 8007a36:	4a0b      	ldr	r2, [pc, #44]	@ (8007a64 <HAL_RCC_GetHCLKFreq+0x34>)
 8007a38:	490b      	ldr	r1, [pc, #44]	@ (8007a68 <HAL_RCC_GetHCLKFreq+0x38>)
 8007a3a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a3c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a3e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a42:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a46:	5ccb      	ldrb	r3, [r1, r3]
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a50:	5c88      	ldrb	r0, [r1, r2]
 8007a52:	4a06      	ldr	r2, [pc, #24]	@ (8007a6c <HAL_RCC_GetHCLKFreq+0x3c>)
 8007a54:	f000 001f 	and.w	r0, r0, #31
 8007a58:	fa23 f000 	lsr.w	r0, r3, r0
 8007a5c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a5e:	4a04      	ldr	r2, [pc, #16]	@ (8007a70 <HAL_RCC_GetHCLKFreq+0x40>)
 8007a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007a62:	bd08      	pop	{r3, pc}
 8007a64:	58024400 	.word	0x58024400
 8007a68:	0802e500 	.word	0x0802e500
 8007a6c:	2400003c 	.word	0x2400003c
 8007a70:	24000040 	.word	0x24000040

08007a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a74:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a76:	f7ff ffdb 	bl	8007a30 <HAL_RCC_GetHCLKFreq>
 8007a7a:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007a7c:	4a05      	ldr	r2, [pc, #20]	@ (8007a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007a84:	5cd3      	ldrb	r3, [r2, r3]
 8007a86:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a8a:	40d8      	lsrs	r0, r3
 8007a8c:	bd08      	pop	{r3, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	0802e500 	.word	0x0802e500

08007a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a9a:	f7ff ffc9 	bl	8007a30 <HAL_RCC_GetHCLKFreq>
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007aa0:	4a05      	ldr	r2, [pc, #20]	@ (8007ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
 8007aaa:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007aae:	40d8      	lsrs	r0, r3
 8007ab0:	bd08      	pop	{r3, pc}
 8007ab2:	bf00      	nop
 8007ab4:	58024400 	.word	0x58024400
 8007ab8:	0802e500 	.word	0x0802e500

08007abc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007abc:	233f      	movs	r3, #63	@ 0x3f
 8007abe:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ac0:	4b11      	ldr	r3, [pc, #68]	@ (8007b08 <HAL_RCC_GetClockConfig+0x4c>)
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	f002 0207 	and.w	r2, r2, #7
 8007ac8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007ad0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	f002 020f 	and.w	r2, r2, #15
 8007ad8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ada:	699a      	ldr	r2, [r3, #24]
 8007adc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007ae0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007ae8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007af0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007af8:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007afa:	4b04      	ldr	r3, [pc, #16]	@ (8007b0c <HAL_RCC_GetClockConfig+0x50>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	600b      	str	r3, [r1, #0]
}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	52002000 	.word	0x52002000

08007b10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b12:	4c3a      	ldr	r4, [pc, #232]	@ (8007bfc <RCCEx_PLL2_Config+0xec>)
{
 8007b14:	4606      	mov	r6, r0
 8007b16:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d069      	beq.n	8007bf6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b2a:	f7fd fc11 	bl	8005350 <HAL_GetTick>
 8007b2e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	011a      	lsls	r2, r3, #4
 8007b34:	d44b      	bmi.n	8007bce <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b38:	6832      	ldr	r2, [r6, #0]
 8007b3a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007b3e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007b42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b44:	68b3      	ldr	r3, [r6, #8]
 8007b46:	68f2      	ldr	r2, [r6, #12]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	3a01      	subs	r2, #1
 8007b4c:	025b      	lsls	r3, r3, #9
 8007b4e:	0412      	lsls	r2, r2, #16
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b56:	4313      	orrs	r3, r2
 8007b58:	6872      	ldr	r2, [r6, #4]
 8007b5a:	3a01      	subs	r2, #1
 8007b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b60:	4313      	orrs	r3, r2
 8007b62:	6932      	ldr	r2, [r6, #16]
 8007b64:	3a01      	subs	r2, #1
 8007b66:	0612      	lsls	r2, r2, #24
 8007b68:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007b72:	6972      	ldr	r2, [r6, #20]
 8007b74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007b7e:	69b2      	ldr	r2, [r6, #24]
 8007b80:	f023 0320 	bic.w	r3, r3, #32
 8007b84:	4313      	orrs	r3, r2
 8007b86:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007b8a:	f023 0310 	bic.w	r3, r3, #16
 8007b8e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b92:	69f2      	ldr	r2, [r6, #28]
 8007b94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b98:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007ba0:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ba2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007ba4:	f043 0310 	orr.w	r3, r3, #16
 8007ba8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007baa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007bac:	b9b5      	cbnz	r5, 8007bdc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bb4:	4c11      	ldr	r4, [pc, #68]	@ (8007bfc <RCCEx_PLL2_Config+0xec>)
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bbc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bbe:	f7fd fbc7 	bl	8005350 <HAL_GetTick>
 8007bc2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	d50f      	bpl.n	8007bea <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e005      	b.n	8007bda <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bce:	f7fd fbbf 	bl	8005350 <HAL_GetTick>
 8007bd2:	1bc0      	subs	r0, r0, r7
 8007bd4:	2802      	cmp	r0, #2
 8007bd6:	d9ab      	bls.n	8007b30 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8007bd8:	2003      	movs	r0, #3
}
 8007bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bdc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bde:	bf0c      	ite	eq
 8007be0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007be4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8007be8:	e7e3      	b.n	8007bb2 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bea:	f7fd fbb1 	bl	8005350 <HAL_GetTick>
 8007bee:	1b40      	subs	r0, r0, r5
 8007bf0:	2802      	cmp	r0, #2
 8007bf2:	d9e7      	bls.n	8007bc4 <RCCEx_PLL2_Config+0xb4>
 8007bf4:	e7f0      	b.n	8007bd8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7ef      	b.n	8007bda <RCCEx_PLL2_Config+0xca>
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400

08007c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c02:	4c3a      	ldr	r4, [pc, #232]	@ (8007cec <RCCEx_PLL3_Config+0xec>)
{
 8007c04:	4606      	mov	r6, r0
 8007c06:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d069      	beq.n	8007ce6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1a:	f7fd fb99 	bl	8005350 <HAL_GetTick>
 8007c1e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	009a      	lsls	r2, r3, #2
 8007c24:	d44b      	bmi.n	8007cbe <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007c28:	6832      	ldr	r2, [r6, #0]
 8007c2a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8007c2e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007c32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c34:	68b3      	ldr	r3, [r6, #8]
 8007c36:	68f2      	ldr	r2, [r6, #12]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	3a01      	subs	r2, #1
 8007c3c:	025b      	lsls	r3, r3, #9
 8007c3e:	0412      	lsls	r2, r2, #16
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c46:	4313      	orrs	r3, r2
 8007c48:	6872      	ldr	r2, [r6, #4]
 8007c4a:	3a01      	subs	r2, #1
 8007c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c50:	4313      	orrs	r3, r2
 8007c52:	6932      	ldr	r2, [r6, #16]
 8007c54:	3a01      	subs	r2, #1
 8007c56:	0612      	lsls	r2, r2, #24
 8007c58:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c62:	6972      	ldr	r2, [r6, #20]
 8007c64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c6e:	69b2      	ldr	r2, [r6, #24]
 8007c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c74:	4313      	orrs	r3, r2
 8007c76:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c7e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c80:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c82:	69f2      	ldr	r2, [r6, #28]
 8007c84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c88:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007c90:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c98:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007c9c:	b9b5      	cbnz	r5, 8007ccc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ca2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ca4:	4c11      	ldr	r4, [pc, #68]	@ (8007cec <RCCEx_PLL3_Config+0xec>)
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cae:	f7fd fb4f 	bl	8005350 <HAL_GetTick>
 8007cb2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	d50f      	bpl.n	8007cda <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8007cba:	2000      	movs	r0, #0
 8007cbc:	e005      	b.n	8007cca <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cbe:	f7fd fb47 	bl	8005350 <HAL_GetTick>
 8007cc2:	1bc0      	subs	r0, r0, r7
 8007cc4:	2802      	cmp	r0, #2
 8007cc6:	d9ab      	bls.n	8007c20 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8007cc8:	2003      	movs	r0, #3
}
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ccc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cce:	bf0c      	ite	eq
 8007cd0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cd4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8007cd8:	e7e3      	b.n	8007ca2 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cda:	f7fd fb39 	bl	8005350 <HAL_GetTick>
 8007cde:	1b40      	subs	r0, r0, r5
 8007ce0:	2802      	cmp	r0, #2
 8007ce2:	d9e7      	bls.n	8007cb4 <RCCEx_PLL3_Config+0xb4>
 8007ce4:	e7f0      	b.n	8007cc8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	e7ef      	b.n	8007cca <RCCEx_PLL3_Config+0xca>
 8007cea:	bf00      	nop
 8007cec:	58024400 	.word	0x58024400

08007cf0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cf4:	6803      	ldr	r3, [r0, #0]
{
 8007cf6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cf8:	011c      	lsls	r4, r3, #4
 8007cfa:	d51e      	bpl.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007cfc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d02:	d02a      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007d04:	d80f      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007d06:	b1d3      	cbz	r3, 8007d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d0c:	d01d      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8007d0e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	05d8      	lsls	r0, r3, #23
 8007d14:	d553      	bpl.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d16:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d84f      	bhi.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007d1c:	e8df f003 	tbb	[pc, r3]
 8007d20:	27484122 	.word	0x27484122
 8007d24:	27          	.byte	0x27
 8007d25:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d2a:	d1f0      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d2c:	4a98      	ldr	r2, [pc, #608]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007d2e:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8007d30:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007d32:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d36:	430b      	orrs	r3, r1
 8007d38:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	e7e8      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3e:	4a94      	ldr	r2, [pc, #592]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007d40:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d46:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007d48:	e7f0      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	3008      	adds	r0, #8
 8007d4e:	f7ff fedf 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d52:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d1db      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007d58:	e7e8      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	3028      	adds	r0, #40	@ 0x28
 8007d5e:	f7ff ff4f 	bl	8007c00 <RCCEx_PLL3_Config>
 8007d62:	e7f6      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d64:	4a8a      	ldr	r2, [pc, #552]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007d66:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d6e:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8007d70:	bb3c      	cbnz	r4, 8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d72:	4a87      	ldr	r2, [pc, #540]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007d74:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8007d76:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007d78:	f023 0307 	bic.w	r3, r3, #7
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	0559      	lsls	r1, r3, #21
 8007d84:	d530      	bpl.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d86:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 8007d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d8e:	d049      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8007d90:	d819      	bhi.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d039      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8007d96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d9a:	d03c      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8007d9c:	2601      	movs	r6, #1
 8007d9e:	4634      	mov	r4, r6
 8007da0:	e022      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007da2:	2100      	movs	r1, #0
 8007da4:	f105 0008 	add.w	r0, r5, #8
 8007da8:	f7ff feb2 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dac:	4604      	mov	r4, r0
        break;
 8007dae:	e7df      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007db0:	2100      	movs	r1, #0
 8007db2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007db6:	f7ff ff23 	bl	8007c00 <RCCEx_PLL3_Config>
 8007dba:	e7f7      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007dbc:	2601      	movs	r6, #1
 8007dbe:	4634      	mov	r4, r6
 8007dc0:	e7de      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dc2:	4626      	mov	r6, r4
 8007dc4:	e7dc      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007dc6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007dca:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8007dce:	d002      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8007dd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007dd4:	d1e2      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xac>
    if (ret == HAL_OK)
 8007dd6:	bb5c      	cbnz	r4, 8007e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007dd8:	4a6d      	ldr	r2, [pc, #436]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007dda:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8007dde:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007de0:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	051a      	lsls	r2, r3, #20
 8007dec:	d533      	bpl.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007dee:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8007df2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007df6:	d048      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8007df8:	d81c      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d038      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e02:	d03b      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e04:	2601      	movs	r6, #1
 8007e06:	4634      	mov	r4, r6
 8007e08:	e025      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0a:	4a61      	ldr	r2, [pc, #388]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007e0c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007e14:	e7df      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e16:	2100      	movs	r1, #0
 8007e18:	f105 0008 	add.w	r0, r5, #8
 8007e1c:	f7ff fe78 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e20:	4604      	mov	r4, r0
        break;
 8007e22:	e7d8      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e24:	2100      	movs	r1, #0
 8007e26:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007e2a:	f7ff fee9 	bl	8007c00 <RCCEx_PLL3_Config>
 8007e2e:	e7f7      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8007e30:	4626      	mov	r6, r4
 8007e32:	e7d9      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e38:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8007e3c:	d002      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007e3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e42:	d1df      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if (ret == HAL_OK)
 8007e44:	bb3c      	cbnz	r4, 8007e96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e46:	4a52      	ldr	r2, [pc, #328]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007e48:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8007e4c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007e4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	019b      	lsls	r3, r3, #6
 8007e5a:	d528      	bpl.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->OspiClockSelection)
 8007e5c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d03b      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007e62:	d81a      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007e64:	b1db      	cbz	r3, 8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d031      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8007e6a:	2601      	movs	r6, #1
 8007e6c:	4634      	mov	r4, r6
 8007e6e:	e01e      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e70:	4a47      	ldr	r2, [pc, #284]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007e72:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007e7a:	e7e3      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f105 0008 	add.w	r0, r5, #8
 8007e82:	f7ff fe45 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e86:	4604      	mov	r4, r0
        break;
 8007e88:	e7dc      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007e90:	f7ff feb6 	bl	8007c00 <RCCEx_PLL3_Config>
 8007e94:	e7f7      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e96:	4626      	mov	r6, r4
 8007e98:	e7dd      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->OspiClockSelection)
 8007e9a:	2b30      	cmp	r3, #48	@ 0x30
 8007e9c:	d1e5      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    if (ret == HAL_OK)
 8007e9e:	bb1c      	cbnz	r4, 8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007ea2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007ea4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007ea6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	04df      	lsls	r7, r3, #19
 8007eb2:	d52a      	bpl.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007eb4:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8007eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eba:	d078      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007ebc:	d816      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d068      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec6:	d06b      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ec8:	2601      	movs	r6, #1
 8007eca:	4634      	mov	r4, r6
 8007ecc:	e01d      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ece:	4a30      	ldr	r2, [pc, #192]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007ed0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007ed8:	e7e1      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eda:	2102      	movs	r1, #2
 8007edc:	f105 0008 	add.w	r0, r5, #8
 8007ee0:	f7ff fe16 	bl	8007b10 <RCCEx_PLL2_Config>
 8007ee4:	4604      	mov	r4, r0
        break;
 8007ee6:	e7da      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007ee8:	4626      	mov	r6, r4
 8007eea:	e7e0      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007eec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ef0:	d002      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8007ef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ef6:	d1e7      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 8007ef8:	2c00      	cmp	r4, #0
 8007efa:	d15e      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007efc:	4a24      	ldr	r2, [pc, #144]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007efe:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8007f00:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f06:	430b      	orrs	r3, r1
 8007f08:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	0498      	lsls	r0, r3, #18
 8007f0e:	d50b      	bpl.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f10:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f16:	d06a      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8007f18:	d851      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d057      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f22:	d05d      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8007f24:	2601      	movs	r6, #1
 8007f26:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	0459      	lsls	r1, r3, #17
 8007f2c:	d50c      	bpl.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f2e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8007f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f36:	d07b      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8007f38:	d861      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d067      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f42:	d06e      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f44:	2601      	movs	r6, #1
 8007f46:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	041a      	lsls	r2, r3, #16
 8007f4c:	d511      	bpl.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x282>
    switch (PeriphClkInit->FdcanClockSelection)
 8007f4e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8007f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f54:	d074      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f5a:	d077      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d17c      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    if (ret == HAL_OK)
 8007f60:	2c00      	cmp	r4, #0
 8007f62:	d17d      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f64:	4a0a      	ldr	r2, [pc, #40]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007f66:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 8007f68:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007f6a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	01db      	lsls	r3, r3, #7
 8007f76:	f140 8083 	bpl.w	8008080 <HAL_RCCEx_PeriphCLKConfig+0x390>
    switch (PeriphClkInit->FmcClockSelection)
 8007f7a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	f200 80db 	bhi.w	8008138 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8007f82:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007f86:	0074      	.short	0x0074
 8007f88:	00d2006f 	.word	0x00d2006f
 8007f8c:	0074      	.short	0x0074
 8007f8e:	bf00      	nop
 8007f90:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f94:	4a9e      	ldr	r2, [pc, #632]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007f96:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007f9e:	e7ab      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	f105 0008 	add.w	r0, r5, #8
 8007fa6:	f7ff fdb3 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007faa:	4604      	mov	r4, r0
        break;
 8007fac:	e7a4      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007fb4:	f7ff fe24 	bl	8007c00 <RCCEx_PLL3_Config>
 8007fb8:	e7f7      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007fba:	4626      	mov	r6, r4
 8007fbc:	e7a5      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007fbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fc2:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8007fc6:	d002      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007fc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007fcc:	d1aa      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x234>
    if (ret == HAL_OK)
 8007fce:	b9a4      	cbnz	r4, 8007ffa <HAL_RCCEx_PeriphCLKConfig+0x30a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fd0:	4a8f      	ldr	r2, [pc, #572]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007fd2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8007fd4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007fd6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007fda:	430b      	orrs	r3, r1
 8007fdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fde:	e7a3      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	f105 0008 	add.w	r0, r5, #8
 8007fe6:	f7ff fd93 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fea:	4604      	mov	r4, r0
        break;
 8007fec:	e7ef      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fee:	2101      	movs	r1, #1
 8007ff0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007ff4:	f7ff fe04 	bl	8007c00 <RCCEx_PLL3_Config>
 8007ff8:	e7f7      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8007ffa:	4626      	mov	r6, r4
 8007ffc:	e794      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ffe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008002:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008006:	d002      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8008008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800800c:	d19a      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x254>
    if (ret == HAL_OK)
 800800e:	b9ac      	cbnz	r4, 800803c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008010:	4a7f      	ldr	r2, [pc, #508]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8008012:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8008016:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008018:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800801c:	430b      	orrs	r3, r1
 800801e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008020:	e792      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x258>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008022:	2101      	movs	r1, #1
 8008024:	f105 0008 	add.w	r0, r5, #8
 8008028:	f7ff fd72 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800802c:	4604      	mov	r4, r0
        break;
 800802e:	e7ee      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008030:	2101      	movs	r1, #1
 8008032:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008036:	f7ff fde3 	bl	8007c00 <RCCEx_PLL3_Config>
 800803a:	e7f7      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800803c:	4626      	mov	r6, r4
 800803e:	e783      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x258>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008040:	4a73      	ldr	r2, [pc, #460]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8008042:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008048:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800804a:	e789      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800804c:	2101      	movs	r1, #1
 800804e:	f105 0008 	add.w	r0, r5, #8
 8008052:	f7ff fd5d 	bl	8007b10 <RCCEx_PLL2_Config>
 8008056:	4604      	mov	r4, r0
        break;
 8008058:	e782      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x270>
    switch (PeriphClkInit->FdcanClockSelection)
 800805a:	2601      	movs	r6, #1
 800805c:	4634      	mov	r4, r6
 800805e:	e788      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8008060:	4626      	mov	r6, r4
 8008062:	e786      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x282>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008064:	4a6a      	ldr	r2, [pc, #424]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8008066:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800806c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800806e:	2c00      	cmp	r4, #0
 8008070:	d165      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x44e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008072:	4a67      	ldr	r2, [pc, #412]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8008074:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8008076:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008078:	f023 0303 	bic.w	r3, r3, #3
 800807c:	430b      	orrs	r3, r1
 800807e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	025f      	lsls	r7, r3, #9
 8008084:	d539      	bpl.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008086:	4f63      	ldr	r7, [pc, #396]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800808e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008090:	f7fd f95e 	bl	8005350 <HAL_GetTick>
 8008094:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	05d8      	lsls	r0, r3, #23
 800809a:	d552      	bpl.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x452>
    if (ret == HAL_OK)
 800809c:	2c00      	cmp	r4, #0
 800809e:	d16e      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x48e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080a0:	4b5b      	ldr	r3, [pc, #364]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80080a2:	f8d5 00b0 	ldr.w	r0, [r5, #176]	@ 0xb0
 80080a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080a8:	4042      	eors	r2, r0
 80080aa:	f412 7f40 	tst.w	r2, #768	@ 0x300
 80080ae:	d00b      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80080b2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80080b8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80080bc:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80080c0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80080c4:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80080c6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080c8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80080cc:	d042      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ce:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80080d2:	494f      	ldr	r1, [pc, #316]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80080d4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80080d8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80080dc:	d14b      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80080de:	6908      	ldr	r0, [r1, #16]
 80080e0:	4a4d      	ldr	r2, [pc, #308]	@ (8008218 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80080e2:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 80080e6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80080ea:	4302      	orrs	r2, r0
 80080ec:	610a      	str	r2, [r1, #16]
 80080ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f2:	4a47      	ldr	r2, [pc, #284]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80080f4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	07da      	lsls	r2, r3, #31
 80080fe:	d509      	bpl.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart16ClockSelection)
 8008100:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8008102:	2b10      	cmp	r3, #16
 8008104:	d053      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8008106:	d83c      	bhi.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d040      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800810c:	2b08      	cmp	r3, #8
 800810e:	d047      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008110:	2601      	movs	r6, #1
 8008112:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	079b      	lsls	r3, r3, #30
 8008118:	d55f      	bpl.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800811a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800811c:	2b05      	cmp	r3, #5
 800811e:	d872      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008120:	e8df f003 	tbb	[pc, r3]
 8008124:	536b4d53 	.word	0x536b4d53
 8008128:	5353      	.short	0x5353
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800812a:	2102      	movs	r1, #2
 800812c:	f105 0008 	add.w	r0, r5, #8
 8008130:	f7ff fcee 	bl	8007b10 <RCCEx_PLL2_Config>
 8008134:	4604      	mov	r4, r0
        break;
 8008136:	e79a      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch (PeriphClkInit->FmcClockSelection)
 8008138:	2601      	movs	r6, #1
 800813a:	4634      	mov	r4, r6
 800813c:	e7a0      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800813e:	4626      	mov	r6, r4
 8008140:	e79e      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008142:	f7fd f905 	bl	8005350 <HAL_GetTick>
 8008146:	eba0 0008 	sub.w	r0, r0, r8
 800814a:	2864      	cmp	r0, #100	@ 0x64
 800814c:	d9a3      	bls.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        ret = HAL_TIMEOUT;
 800814e:	2603      	movs	r6, #3
 8008150:	4634      	mov	r4, r6
 8008152:	e7d2      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
        tickstart = HAL_GetTick();
 8008154:	f7fd f8fc 	bl	8005350 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008158:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>
        tickstart = HAL_GetTick();
 800815c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800815e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008162:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8008166:	0799      	lsls	r1, r3, #30
 8008168:	d4b1      	bmi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800816a:	f7fd f8f1 	bl	8005350 <HAL_GetTick>
 800816e:	1bc0      	subs	r0, r0, r7
 8008170:	4548      	cmp	r0, r9
 8008172:	d9f6      	bls.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x472>
 8008174:	e7eb      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008176:	690a      	ldr	r2, [r1, #16]
 8008178:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800817c:	e7b6      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800817e:	4626      	mov	r6, r4
 8008180:	e7bb      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Usart16ClockSelection)
 8008182:	f023 0208 	bic.w	r2, r3, #8
 8008186:	2a20      	cmp	r2, #32
 8008188:	d001      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800818a:	2b18      	cmp	r3, #24
 800818c:	d1c0      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x420>
    if (ret == HAL_OK)
 800818e:	b9a4      	cbnz	r4, 80081ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008190:	4a1f      	ldr	r2, [pc, #124]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8008192:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8008194:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008196:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800819a:	430b      	orrs	r3, r1
 800819c:	6553      	str	r3, [r2, #84]	@ 0x54
 800819e:	e7b9      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x424>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081a0:	2101      	movs	r1, #1
 80081a2:	f105 0008 	add.w	r0, r5, #8
 80081a6:	f7ff fcb3 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081aa:	4604      	mov	r4, r0
        break;
 80081ac:	e7ef      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081ae:	2101      	movs	r1, #1
 80081b0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80081b4:	f7ff fd24 	bl	8007c00 <RCCEx_PLL3_Config>
 80081b8:	e7f7      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80081ba:	4626      	mov	r6, r4
 80081bc:	e7aa      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x424>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081be:	2101      	movs	r1, #1
 80081c0:	f105 0008 	add.w	r0, r5, #8
 80081c4:	f7ff fca4 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081c8:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80081ca:	b9fc      	cbnz	r4, 800820c <HAL_RCCEx_PeriphCLKConfig+0x51c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081cc:	4a10      	ldr	r2, [pc, #64]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80081ce:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80081d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	430b      	orrs	r3, r1
 80081d8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081da:	682b      	ldr	r3, [r5, #0]
 80081dc:	075f      	lsls	r7, r3, #29
 80081de:	d52e      	bpl.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80081e0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80081e4:	2b05      	cmp	r3, #5
 80081e6:	f200 8166 	bhi.w	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80081ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80081ee:	001d      	.short	0x001d
 80081f0:	015e0017 	.word	0x015e0017
 80081f4:	001d001d 	.word	0x001d001d
 80081f8:	001d      	.short	0x001d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081fa:	2101      	movs	r1, #1
 80081fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008200:	f7ff fcfe 	bl	8007c00 <RCCEx_PLL3_Config>
 8008204:	e7e0      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008206:	2601      	movs	r6, #1
 8008208:	4634      	mov	r4, r6
 800820a:	e7e6      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800820c:	4626      	mov	r6, r4
 800820e:	e7e4      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8008210:	58024400 	.word	0x58024400
 8008214:	58024800 	.word	0x58024800
 8008218:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800821c:	2101      	movs	r1, #1
 800821e:	f105 0008 	add.w	r0, r5, #8
 8008222:	f7ff fc75 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008226:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8008228:	2c00      	cmp	r4, #0
 800822a:	f040 8147 	bne.w	80084bc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800822e:	4aa4      	ldr	r2, [pc, #656]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8008230:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8008234:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008236:	f023 0307 	bic.w	r3, r3, #7
 800823a:	430b      	orrs	r3, r1
 800823c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800823e:	682b      	ldr	r3, [r5, #0]
 8008240:	0698      	lsls	r0, r3, #26
 8008242:	d510      	bpl.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008244:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8008248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800824c:	f000 8154 	beq.w	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8008250:	f200 8138 	bhi.w	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 813e 	beq.w	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800825a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800825e:	f000 8144 	beq.w	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 8008262:	2601      	movs	r6, #1
 8008264:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008266:	682b      	ldr	r3, [r5, #0]
 8008268:	0659      	lsls	r1, r3, #25
 800826a:	d510      	bpl.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800826c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008274:	f000 8162 	beq.w	800853c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008278:	f200 8146 	bhi.w	8008508 <HAL_RCCEx_PeriphCLKConfig+0x818>
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 814c 	beq.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8008282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008286:	f000 8152 	beq.w	800852e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800828a:	2601      	movs	r6, #1
 800828c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	061a      	lsls	r2, r3, #24
 8008292:	d510      	bpl.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008294:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8008298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800829c:	f000 8170 	beq.w	8008580 <HAL_RCCEx_PeriphCLKConfig+0x890>
 80082a0:	f200 8154 	bhi.w	800854c <HAL_RCCEx_PeriphCLKConfig+0x85c>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 815a 	beq.w	800855e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 80082aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ae:	f000 8160 	beq.w	8008572 <HAL_RCCEx_PeriphCLKConfig+0x882>
 80082b2:	2601      	movs	r6, #1
 80082b4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	071b      	lsls	r3, r3, #28
 80082ba:	d514      	bpl.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80082bc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 80082c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c4:	d107      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082c6:	2102      	movs	r1, #2
 80082c8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80082cc:	f7ff fc98 	bl	8007c00 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80082d0:	2800      	cmp	r0, #0
 80082d2:	bf18      	it	ne
 80082d4:	2601      	movne	r6, #1
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80082d6:	4a7a      	ldr	r2, [pc, #488]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 80082d8:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 80082dc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80082de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80082e2:	430b      	orrs	r3, r1
 80082e4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	06df      	lsls	r7, r3, #27
 80082ea:	d514      	bpl.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x626>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80082ec:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80082f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f4:	d107      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x616>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082f6:	2102      	movs	r1, #2
 80082f8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80082fc:	f7ff fc80 	bl	8007c00 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8008300:	2800      	cmp	r0, #0
 8008302:	bf18      	it	ne
 8008304:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008306:	4a6e      	ldr	r2, [pc, #440]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8008308:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800830c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800830e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008312:	430b      	orrs	r3, r1
 8008314:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	0318      	lsls	r0, r3, #12
 800831a:	d51b      	bpl.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x664>
    switch (PeriphClkInit->AdcClockSelection)
 800831c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8008320:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8008324:	f000 8134 	beq.w	8008590 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8008328:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800832c:	d007      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800832e:	2900      	cmp	r1, #0
 8008330:	f040 8134 	bne.w	800859c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008334:	f105 0008 	add.w	r0, r5, #8
 8008338:	f7ff fbea 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800833c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800833e:	2c00      	cmp	r4, #0
 8008340:	f040 812f 	bne.w	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008344:	4a5e      	ldr	r2, [pc, #376]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8008346:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800834a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800834c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008350:	430b      	orrs	r3, r1
 8008352:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	0359      	lsls	r1, r3, #13
 8008358:	d50f      	bpl.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->UsbClockSelection)
 800835a:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800835e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008362:	f000 812f 	beq.w	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8008366:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800836a:	f000 8121 	beq.w	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800836e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008372:	f000 8118 	beq.w	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8008376:	2601      	movs	r6, #1
 8008378:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	03da      	lsls	r2, r3, #15
 800837e:	d509      	bpl.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8008380:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 8127 	beq.w	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8008388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800838c:	f000 8131 	beq.w	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8008390:	2601      	movs	r6, #1
 8008392:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	d507      	bpl.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800839a:	2102      	movs	r1, #2
 800839c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80083a0:	f7ff fc2e 	bl	8007c00 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 80083a4:	2800      	cmp	r0, #0
 80083a6:	bf18      	it	ne
 80083a8:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083aa:	e9d5 3100 	ldrd	r3, r1, [r5]
 80083ae:	039f      	lsls	r7, r3, #14
 80083b0:	f140 8137 	bpl.w	8008622 <HAL_RCCEx_PeriphCLKConfig+0x932>
    switch (PeriphClkInit->RngClockSelection)
 80083b4:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80083b6:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80083ba:	f000 8134 	beq.w	8008626 <HAL_RCCEx_PeriphCLKConfig+0x936>
 80083be:	f200 8121 	bhi.w	8008604 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f000 8124 	beq.w	8008610 <HAL_RCCEx_PeriphCLKConfig+0x920>
 80083c8:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083ca:	02de      	lsls	r6, r3, #11
 80083cc:	d506      	bpl.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083ce:	483c      	ldr	r0, [pc, #240]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 80083d0:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 80083d2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80083d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80083d8:	4332      	orrs	r2, r6
 80083da:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083dc:	0298      	lsls	r0, r3, #10
 80083de:	d506      	bpl.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083e0:	4837      	ldr	r0, [pc, #220]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 80083e2:	6eae      	ldr	r6, [r5, #104]	@ 0x68
 80083e4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80083e6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80083ea:	4332      	orrs	r2, r6
 80083ec:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ee:	005a      	lsls	r2, r3, #1
 80083f0:	d509      	bpl.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x716>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083f2:	4a33      	ldr	r2, [pc, #204]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 80083f4:	6910      	ldr	r0, [r2, #16]
 80083f6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80083fa:	6110      	str	r0, [r2, #16]
 80083fc:	6910      	ldr	r0, [r2, #16]
 80083fe:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8008402:	4330      	orrs	r0, r6
 8008404:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008406:	2b00      	cmp	r3, #0
 8008408:	da06      	bge.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800840a:	482d      	ldr	r0, [pc, #180]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800840c:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 800840e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8008410:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008414:	4332      	orrs	r2, r6
 8008416:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008418:	021f      	lsls	r7, r3, #8
 800841a:	d507      	bpl.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800841c:	4a28      	ldr	r2, [pc, #160]	@ (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800841e:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8008422:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008424:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008428:	4303      	orrs	r3, r0
 800842a:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800842c:	07ce      	lsls	r6, r1, #31
 800842e:	d506      	bpl.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x74e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008430:	2100      	movs	r1, #0
 8008432:	f105 0008 	add.w	r0, r5, #8
 8008436:	f7ff fb6b 	bl	8007b10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800843a:	4607      	mov	r7, r0
 800843c:	b900      	cbnz	r0, 8008440 <HAL_RCCEx_PeriphCLKConfig+0x750>
    switch (PeriphClkInit->RngClockSelection)
 800843e:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008440:	686b      	ldr	r3, [r5, #4]
 8008442:	079c      	lsls	r4, r3, #30
 8008444:	d506      	bpl.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x764>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008446:	2101      	movs	r1, #1
 8008448:	f105 0008 	add.w	r0, r5, #8
 800844c:	f7ff fb60 	bl	8007b10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8008450:	4606      	mov	r6, r0
 8008452:	b900      	cbnz	r0, 8008456 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch (PeriphClkInit->RngClockSelection)
 8008454:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008456:	686b      	ldr	r3, [r5, #4]
 8008458:	0758      	lsls	r0, r3, #29
 800845a:	d506      	bpl.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800845c:	2102      	movs	r1, #2
 800845e:	f105 0008 	add.w	r0, r5, #8
 8008462:	f7ff fb55 	bl	8007b10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8008466:	4604      	mov	r4, r0
 8008468:	b900      	cbnz	r0, 800846c <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (PeriphClkInit->RngClockSelection)
 800846a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800846c:	686b      	ldr	r3, [r5, #4]
 800846e:	0719      	lsls	r1, r3, #28
 8008470:	d506      	bpl.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x790>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008472:	2100      	movs	r1, #0
 8008474:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008478:	f7ff fbc2 	bl	8007c00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800847c:	4606      	mov	r6, r0
 800847e:	b900      	cbnz	r0, 8008482 <HAL_RCCEx_PeriphCLKConfig+0x792>
    switch (PeriphClkInit->RngClockSelection)
 8008480:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008482:	686b      	ldr	r3, [r5, #4]
 8008484:	06da      	lsls	r2, r3, #27
 8008486:	d506      	bpl.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008488:	2101      	movs	r1, #1
 800848a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800848e:	f7ff fbb7 	bl	8007c00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8008492:	4604      	mov	r4, r0
 8008494:	b900      	cbnz	r0, 8008498 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 8008496:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008498:	686b      	ldr	r3, [r5, #4]
 800849a:	069b      	lsls	r3, r3, #26
 800849c:	f100 80c9 	bmi.w	8008632 <HAL_RCCEx_PeriphCLKConfig+0x942>
  if (status == HAL_OK)
 80084a0:	1e20      	subs	r0, r4, #0
 80084a2:	bf18      	it	ne
 80084a4:	2001      	movne	r0, #1
}
 80084a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084aa:	2101      	movs	r1, #1
 80084ac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80084b0:	f7ff fba6 	bl	8007c00 <RCCEx_PLL3_Config>
 80084b4:	e6b7      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084b6:	2601      	movs	r6, #1
 80084b8:	4634      	mov	r4, r6
 80084ba:	e6c0      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80084bc:	4626      	mov	r6, r4
 80084be:	e6be      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80084c0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 80084c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80084c8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80084cc:	d003      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80084ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084d2:	f47f aec6 	bne.w	8008262 <HAL_RCCEx_PeriphCLKConfig+0x572>
    if (ret == HAL_OK)
 80084d6:	b9ac      	cbnz	r4, 8008504 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084d8:	4a5b      	ldr	r2, [pc, #364]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084da:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 80084de:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80084e0:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80084e8:	e6bd      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x576>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ea:	2100      	movs	r1, #0
 80084ec:	f105 0008 	add.w	r0, r5, #8
 80084f0:	f7ff fb0e 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084f4:	4604      	mov	r4, r0
        break;
 80084f6:	e7ee      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084f8:	2102      	movs	r1, #2
 80084fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80084fe:	f7ff fb7f 	bl	8007c00 <RCCEx_PLL3_Config>
 8008502:	e7f7      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8008504:	4626      	mov	r6, r4
 8008506:	e6ae      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008508:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800850c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8008510:	d003      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8008512:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008516:	f47f aeb8 	bne.w	800828a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    if (ret == HAL_OK)
 800851a:	b9ac      	cbnz	r4, 8008548 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800851c:	4a4a      	ldr	r2, [pc, #296]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800851e:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8008522:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008524:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8008528:	430b      	orrs	r3, r1
 800852a:	6593      	str	r3, [r2, #88]	@ 0x58
 800852c:	e6af      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x59e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800852e:	2100      	movs	r1, #0
 8008530:	f105 0008 	add.w	r0, r5, #8
 8008534:	f7ff faec 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008538:	4604      	mov	r4, r0
        break;
 800853a:	e7ee      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x82a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800853c:	2102      	movs	r1, #2
 800853e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008542:	f7ff fb5d 	bl	8007c00 <RCCEx_PLL3_Config>
 8008546:	e7f7      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008548:	4626      	mov	r6, r4
 800854a:	e6a0      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800854c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008550:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8008554:	d003      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8008556:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800855a:	f47f aeaa 	bne.w	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if (ret == HAL_OK)
 800855e:	b9ac      	cbnz	r4, 800858c <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008560:	4a39      	ldr	r2, [pc, #228]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008562:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8008566:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008568:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800856c:	430b      	orrs	r3, r1
 800856e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008570:	e6a1      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008572:	2100      	movs	r1, #0
 8008574:	f105 0008 	add.w	r0, r5, #8
 8008578:	f7ff faca 	bl	8007b10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800857c:	4604      	mov	r4, r0
        break;
 800857e:	e7ee      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x86e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008580:	2102      	movs	r1, #2
 8008582:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008586:	f7ff fb3b 	bl	8007c00 <RCCEx_PLL3_Config>
 800858a:	e7f7      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800858c:	4626      	mov	r6, r4
 800858e:	e692      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008590:	2102      	movs	r1, #2
 8008592:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008596:	f7ff fb33 	bl	8007c00 <RCCEx_PLL3_Config>
 800859a:	e6cf      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x64c>
    switch (PeriphClkInit->AdcClockSelection)
 800859c:	2601      	movs	r6, #1
 800859e:	4634      	mov	r4, r6
 80085a0:	e6d8      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80085a2:	4626      	mov	r6, r4
 80085a4:	e6d6      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x664>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a6:	4a28      	ldr	r2, [pc, #160]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80085b0:	b97c      	cbnz	r4, 80085d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085b2:	4a25      	ldr	r2, [pc, #148]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085b4:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 80085b8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80085ba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80085be:	430b      	orrs	r3, r1
 80085c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80085c2:	e6da      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085c4:	2101      	movs	r1, #1
 80085c6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80085ca:	f7ff fb19 	bl	8007c00 <RCCEx_PLL3_Config>
 80085ce:	4604      	mov	r4, r0
        break;
 80085d0:	e7ee      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80085d2:	4626      	mov	r6, r4
 80085d4:	e6d1      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80085da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80085e0:	b974      	cbnz	r4, 8008600 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085e2:	4a19      	ldr	r2, [pc, #100]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085e4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80085e6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80085e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085ec:	430b      	orrs	r3, r1
 80085ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085f0:	e6d0      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085f2:	2102      	movs	r1, #2
 80085f4:	f105 0008 	add.w	r0, r5, #8
 80085f8:	f7ff fa8a 	bl	8007b10 <RCCEx_PLL2_Config>
 80085fc:	4604      	mov	r4, r0
        break;
 80085fe:	e7ef      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008600:	4626      	mov	r6, r4
 8008602:	e6c7      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->RngClockSelection)
 8008604:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8008608:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800860c:	f47f aedc 	bne.w	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if (ret == HAL_OK)
 8008610:	2c00      	cmp	r4, #0
 8008612:	f47f aeda 	bne.w	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6da>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008616:	4c0c      	ldr	r4, [pc, #48]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800861a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800861e:	4302      	orrs	r2, r0
 8008620:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8008622:	4634      	mov	r4, r6
 8008624:	e6d1      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008626:	4f08      	ldr	r7, [pc, #32]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800862a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800862e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8008630:	e7ee      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x920>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008632:	2102      	movs	r1, #2
 8008634:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008638:	f7ff fae2 	bl	8007c00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800863c:	2800      	cmp	r0, #0
 800863e:	f43f af2f 	beq.w	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  return HAL_ERROR;
 8008642:	2001      	movs	r0, #1
 8008644:	e72f      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 8008646:	bf00      	nop
 8008648:	58024400 	.word	0x58024400

0800864c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800864c:	4770      	bx	lr
	...

08008650 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008650:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008654:	2b01      	cmp	r3, #1
 8008656:	d13b      	bne.n	80086d0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	2302      	movs	r3, #2
 800865a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800865e:	6803      	ldr	r3, [r0, #0]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008668:	4a1a      	ldr	r2, [pc, #104]	@ (80086d4 <HAL_TIM_Base_Start_IT+0x84>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d022      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008672:	d01f      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 8008674:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8008678:	4293      	cmp	r3, r2
 800867a:	d01b      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 800867c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008680:	4293      	cmp	r3, r2
 8008682:	d017      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 8008684:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008688:	4293      	cmp	r3, r2
 800868a:	d013      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 800868c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8008690:	4293      	cmp	r3, r2
 8008692:	d00f      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 8008694:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8008698:	4293      	cmp	r3, r2
 800869a:	d00b      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 800869c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d007      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 80086a4:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0x64>
 80086ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d107      	bne.n	80086c4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b4:	6899      	ldr	r1, [r3, #8]
 80086b6:	4a08      	ldr	r2, [pc, #32]	@ (80086d8 <HAL_TIM_Base_Start_IT+0x88>)
 80086b8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ba:	2a06      	cmp	r2, #6
 80086bc:	d006      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x7c>
 80086be:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80086c2:	d003      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80086cc:	2000      	movs	r0, #0
 80086ce:	4770      	bx	lr
    return HAL_ERROR;
 80086d0:	2001      	movs	r0, #1
}
 80086d2:	4770      	bx	lr
 80086d4:	40010000 	.word	0x40010000
 80086d8:	00010007 	.word	0x00010007

080086dc <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80086dc:	4770      	bx	lr

080086de <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80086de:	4770      	bx	lr

080086e0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80086e4:	6803      	ldr	r3, [r0, #0]
{
 80086e6:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80086e8:	68dd      	ldr	r5, [r3, #12]
{
 80086ea:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 80086ec:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80086ee:	07b2      	lsls	r2, r6, #30
 80086f0:	d50d      	bpl.n	800870e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80086f2:	07a9      	lsls	r1, r5, #30
 80086f4:	d50b      	bpl.n	800870e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80086f6:	f06f 0202 	mvn.w	r2, #2
 80086fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086fc:	2201      	movs	r2, #1
 80086fe:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	079a      	lsls	r2, r3, #30
 8008704:	d075      	beq.n	80087f2 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008706:	f7ff ffea 	bl	80086de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870a:	2300      	movs	r3, #0
 800870c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800870e:	0773      	lsls	r3, r6, #29
 8008710:	d510      	bpl.n	8008734 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008712:	0768      	lsls	r0, r5, #29
 8008714:	d50e      	bpl.n	8008734 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800871c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800871e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008720:	2202      	movs	r2, #2
 8008722:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800872a:	d068      	beq.n	80087fe <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800872c:	f7ff ffd7 	bl	80086de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008730:	2300      	movs	r3, #0
 8008732:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008734:	0731      	lsls	r1, r6, #28
 8008736:	d50f      	bpl.n	8008758 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008738:	072a      	lsls	r2, r5, #28
 800873a:	d50d      	bpl.n	8008758 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8008742:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008746:	2204      	movs	r2, #4
 8008748:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	079b      	lsls	r3, r3, #30
 800874e:	d05c      	beq.n	800880a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8008750:	f7ff ffc5 	bl	80086de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008754:	2300      	movs	r3, #0
 8008756:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008758:	06f1      	lsls	r1, r6, #27
 800875a:	d510      	bpl.n	800877e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800875c:	06ea      	lsls	r2, r5, #27
 800875e:	d50e      	bpl.n	800877e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8008766:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800876a:	2208      	movs	r2, #8
 800876c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008774:	d04f      	beq.n	8008816 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8008776:	f7ff ffb2 	bl	80086de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	2300      	movs	r3, #0
 800877c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800877e:	07f3      	lsls	r3, r6, #31
 8008780:	d508      	bpl.n	8008794 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008782:	07e8      	lsls	r0, r5, #31
 8008784:	d506      	bpl.n	8008794 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800878c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800878e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008790:	f7f8 fada 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008794:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8008798:	d008      	beq.n	80087ac <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800879a:	0629      	lsls	r1, r5, #24
 800879c:	d506      	bpl.n	80087ac <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 80087a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80087a8:	f000 f8e1 	bl	800896e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087ac:	05f2      	lsls	r2, r6, #23
 80087ae:	d508      	bpl.n	80087c2 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087b0:	062b      	lsls	r3, r5, #24
 80087b2:	d506      	bpl.n	80087c2 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80087ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80087be:	f000 f8d7 	bl	8008970 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087c2:	0670      	lsls	r0, r6, #25
 80087c4:	d508      	bpl.n	80087d8 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087c6:	0669      	lsls	r1, r5, #25
 80087c8:	d506      	bpl.n	80087d8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80087d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80087d4:	f7ff ff85 	bl	80086e2 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087d8:	06b2      	lsls	r2, r6, #26
 80087da:	d522      	bpl.n	8008822 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087dc:	06ab      	lsls	r3, r5, #26
 80087de:	d520      	bpl.n	8008822 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80087e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087e8:	611a      	str	r2, [r3, #16]
}
 80087ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80087ee:	f000 b8bd 	b.w	800896c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f2:	f7ff ff73 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff ff72 	bl	80086e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80087fc:	e785      	b.n	800870a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fe:	f7ff ff6d 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff ff6c 	bl	80086e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008808:	e792      	b.n	8008730 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800880a:	f7ff ff67 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff ff66 	bl	80086e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008814:	e79e      	b.n	8008754 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	f7ff ff61 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881a:	4620      	mov	r0, r4
 800881c:	f7ff ff60 	bl	80086e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008820:	e7ab      	b.n	800877a <HAL_TIM_IRQHandler+0x96>
}
 8008822:	bd70      	pop	{r4, r5, r6, pc}

08008824 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008824:	4a37      	ldr	r2, [pc, #220]	@ (8008904 <TIM_Base_SetConfig+0xe0>)
  tmpcr1 = TIMx->CR1;
 8008826:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008828:	4290      	cmp	r0, r2
 800882a:	d012      	beq.n	8008852 <TIM_Base_SetConfig+0x2e>
 800882c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008830:	d00f      	beq.n	8008852 <TIM_Base_SetConfig+0x2e>
 8008832:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8008836:	4290      	cmp	r0, r2
 8008838:	d00b      	beq.n	8008852 <TIM_Base_SetConfig+0x2e>
 800883a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800883e:	4290      	cmp	r0, r2
 8008840:	d007      	beq.n	8008852 <TIM_Base_SetConfig+0x2e>
 8008842:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008846:	4290      	cmp	r0, r2
 8008848:	d003      	beq.n	8008852 <TIM_Base_SetConfig+0x2e>
 800884a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800884e:	4290      	cmp	r0, r2
 8008850:	d119      	bne.n	8008886 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8008852:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008858:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800885a:	4a2a      	ldr	r2, [pc, #168]	@ (8008904 <TIM_Base_SetConfig+0xe0>)
 800885c:	4290      	cmp	r0, r2
 800885e:	d025      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 8008860:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008864:	d022      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 8008866:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800886a:	4290      	cmp	r0, r2
 800886c:	d01e      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 800886e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008872:	4290      	cmp	r0, r2
 8008874:	d01a      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 8008876:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800887a:	4290      	cmp	r0, r2
 800887c:	d016      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 800887e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8008882:	4290      	cmp	r0, r2
 8008884:	d012      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 8008886:	4a20      	ldr	r2, [pc, #128]	@ (8008908 <TIM_Base_SetConfig+0xe4>)
 8008888:	4290      	cmp	r0, r2
 800888a:	d00f      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 800888c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008890:	4290      	cmp	r0, r2
 8008892:	d00b      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 8008894:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008898:	4290      	cmp	r0, r2
 800889a:	d007      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 800889c:	f5a2 42d0 	sub.w	r2, r2, #26624	@ 0x6800
 80088a0:	4290      	cmp	r0, r2
 80088a2:	d003      	beq.n	80088ac <TIM_Base_SetConfig+0x88>
 80088a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80088a8:	4290      	cmp	r0, r2
 80088aa:	d103      	bne.n	80088b4 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b0:	68ca      	ldr	r2, [r1, #12]
 80088b2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b4:	694a      	ldr	r2, [r1, #20]
 80088b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80088bc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088be:	688b      	ldr	r3, [r1, #8]
 80088c0:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088c2:	680b      	ldr	r3, [r1, #0]
 80088c4:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008904 <TIM_Base_SetConfig+0xe0>)
 80088c8:	4298      	cmp	r0, r3
 80088ca:	d00f      	beq.n	80088ec <TIM_Base_SetConfig+0xc8>
 80088cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088d0:	4298      	cmp	r0, r3
 80088d2:	d00b      	beq.n	80088ec <TIM_Base_SetConfig+0xc8>
 80088d4:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 80088d8:	4298      	cmp	r0, r3
 80088da:	d007      	beq.n	80088ec <TIM_Base_SetConfig+0xc8>
 80088dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088e0:	4298      	cmp	r0, r3
 80088e2:	d003      	beq.n	80088ec <TIM_Base_SetConfig+0xc8>
 80088e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088e8:	4298      	cmp	r0, r3
 80088ea:	d101      	bne.n	80088f0 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088ec:	690b      	ldr	r3, [r1, #16]
 80088ee:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f0:	2301      	movs	r3, #1
 80088f2:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088f4:	6903      	ldr	r3, [r0, #16]
 80088f6:	07db      	lsls	r3, r3, #31
 80088f8:	d503      	bpl.n	8008902 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088fa:	6903      	ldr	r3, [r0, #16]
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	6103      	str	r3, [r0, #16]
  }
}
 8008902:	4770      	bx	lr
 8008904:	40010000 	.word	0x40010000
 8008908:	40014000 	.word	0x40014000

0800890c <HAL_TIM_Base_Init>:
{
 800890c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800890e:	4604      	mov	r4, r0
 8008910:	b350      	cbz	r0, 8008968 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008912:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008916:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800891a:	b91b      	cbnz	r3, 8008924 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800891c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008920:	f7ff fe94 	bl	800864c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008926:	6820      	ldr	r0, [r4, #0]
 8008928:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800892a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800892e:	f7ff ff79 	bl	8008824 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008932:	2301      	movs	r3, #1
  return HAL_OK;
 8008934:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008936:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800893e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008942:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008946:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800894a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800894e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008952:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008956:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800895a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800895e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008962:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8008966:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008968:	2001      	movs	r0, #1
 800896a:	e7fc      	b.n	8008966 <HAL_TIM_Base_Init+0x5a>

0800896c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800896c:	4770      	bx	lr

0800896e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800896e:	4770      	bx	lr

08008970 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8008970:	4770      	bx	lr

08008972 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008972:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008974:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008978:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800897a:	f001 ff11 	bl	800a7a0 <xTaskGetSchedulerState>
 800897e:	2801      	cmp	r0, #1
 8008980:	d003      	beq.n	800898a <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8008986:	f000 bc55 	b.w	8009234 <xPortSysTickHandler>
}
 800898a:	bd08      	pop	{r3, pc}

0800898c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800898c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008990:	b92b      	cbnz	r3, 800899e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008992:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <osKernelInitialize+0x20>)
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	b928      	cbnz	r0, 80089a4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008998:	2201      	movs	r2, #1
 800899a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800899c:	4770      	bx	lr
    stat = osErrorISR;
 800899e:	f06f 0005 	mvn.w	r0, #5
 80089a2:	4770      	bx	lr
    } else {
      stat = osError;
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	2400323c 	.word	0x2400323c

080089b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089b0:	b510      	push	{r4, lr}
 80089b2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80089b6:	b95c      	cbnz	r4, 80089d0 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80089b8:	4b08      	ldr	r3, [pc, #32]	@ (80089dc <osKernelStart+0x2c>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	2a01      	cmp	r2, #1
 80089be:	d10a      	bne.n	80089d6 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c0:	4a07      	ldr	r2, [pc, #28]	@ (80089e0 <osKernelStart+0x30>)
 80089c2:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089c4:	2202      	movs	r2, #2
 80089c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089c8:	f001 fd8a 	bl	800a4e0 <vTaskStartScheduler>
      stat = osOK;
 80089cc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80089ce:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80089d0:	f06f 0005 	mvn.w	r0, #5
 80089d4:	e7fb      	b.n	80089ce <osKernelStart+0x1e>
      stat = osError;
 80089d6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80089da:	e7f8      	b.n	80089ce <osKernelStart+0x1e>
 80089dc:	2400323c 	.word	0x2400323c
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e6:	4614      	mov	r4, r2
 80089e8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089ea:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089ec:	460b      	mov	r3, r1
  hTask = NULL;
 80089ee:	9205      	str	r2, [sp, #20]
 80089f0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80089f4:	b9ca      	cbnz	r2, 8008a2a <osThreadNew+0x46>
 80089f6:	b1c0      	cbz	r0, 8008a2a <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80089f8:	b36c      	cbz	r4, 8008a56 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80089fa:	69a5      	ldr	r5, [r4, #24]
 80089fc:	2d00      	cmp	r5, #0
 80089fe:	bf08      	it	eq
 8008a00:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a02:	1e69      	subs	r1, r5, #1
 8008a04:	46ac      	mov	ip, r5
 8008a06:	2937      	cmp	r1, #55	@ 0x37
 8008a08:	d82a      	bhi.n	8008a60 <osThreadNew+0x7c>
 8008a0a:	6861      	ldr	r1, [r4, #4]
 8008a0c:	07c9      	lsls	r1, r1, #31
 8008a0e:	d427      	bmi.n	8008a60 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008a10:	6966      	ldr	r6, [r4, #20]
 8008a12:	b16e      	cbz	r6, 8008a30 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a14:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8008a16:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a18:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008a1c:	b157      	cbz	r7, 8008a34 <osThreadNew+0x50>
 8008a1e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8008a22:	d902      	bls.n	8008a2a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a24:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a26:	b104      	cbz	r4, 8008a2a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a28:	b9e6      	cbnz	r6, 8008a64 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a2a:	9805      	ldr	r0, [sp, #20]
}
 8008a2c:	b007      	add	sp, #28
 8008a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008a30:	2280      	movs	r2, #128	@ 0x80
 8008a32:	e7f0      	b.n	8008a16 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a34:	f1be 0f00 	cmp.w	lr, #0
 8008a38:	d1f7      	bne.n	8008a2a <osThreadNew+0x46>
      if (mem == 0) {
 8008a3a:	6924      	ldr	r4, [r4, #16]
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	d1f4      	bne.n	8008a2a <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a40:	ac05      	add	r4, sp, #20
 8008a42:	b292      	uxth	r2, r2
 8008a44:	e9cd c400 	strd	ip, r4, [sp]
 8008a48:	f001 fbc3 	bl	800a1d2 <xTaskCreate>
 8008a4c:	2801      	cmp	r0, #1
            hTask = NULL;
 8008a4e:	bf1c      	itt	ne
 8008a50:	2300      	movne	r3, #0
 8008a52:	9305      	strne	r3, [sp, #20]
 8008a54:	e7e9      	b.n	8008a2a <osThreadNew+0x46>
    name = NULL;
 8008a56:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8008a58:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8008a5c:	2280      	movs	r2, #128	@ 0x80
 8008a5e:	e7ef      	b.n	8008a40 <osThreadNew+0x5c>
        return (NULL);
 8008a60:	4610      	mov	r0, r2
 8008a62:	e7e3      	b.n	8008a2c <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a64:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8008a68:	9500      	str	r5, [sp, #0]
 8008a6a:	f001 fb7a 	bl	800a162 <xTaskCreateStatic>
 8008a6e:	9005      	str	r0, [sp, #20]
 8008a70:	e7db      	b.n	8008a2a <osThreadNew+0x46>

08008a72 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a72:	b508      	push	{r3, lr}
 8008a74:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a78:	b922      	cbnz	r2, 8008a84 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008a7a:	b108      	cbz	r0, 8008a80 <osDelay+0xe>
      vTaskDelay(ticks);
 8008a7c:	f001 fcf0 	bl	800a460 <vTaskDelay>
    stat = osOK;
 8008a80:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8008a82:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8008a84:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8008a88:	e7fb      	b.n	8008a82 <osDelay+0x10>

08008a8a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a8a:	b570      	push	{r4, r5, r6, lr}
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8008a92:	b116      	cbz	r6, 8008a9a <osMutexNew+0x10>
  hMutex = NULL;
 8008a94:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8008a96:	4620      	mov	r0, r4
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 8008a9a:	b110      	cbz	r0, 8008aa2 <osMutexNew+0x18>
      type = attr->attr_bits;
 8008a9c:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8008a9e:	0733      	lsls	r3, r6, #28
 8008aa0:	d4f8      	bmi.n	8008a94 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008aa2:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8008aa6:	b17d      	cbz	r5, 8008ac8 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008aa8:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008aac:	b151      	cbz	r1, 8008ac4 <osMutexNew+0x3a>
 8008aae:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ab0:	d9f0      	bls.n	8008a94 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8008ab2:	b1de      	cbz	r6, 8008aec <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008ab4:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008ab6:	f000 fec6 	bl	8009846 <xQueueCreateMutexStatic>
 8008aba:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d0e9      	beq.n	8008a94 <osMutexNew+0xa>
          name = attr->name;
 8008ac0:	682d      	ldr	r5, [r5, #0]
 8008ac2:	e00a      	b.n	8008ada <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e5      	bne.n	8008a94 <osMutexNew+0xa>
            if (rmtx != 0U) {
 8008ac8:	b196      	cbz	r6, 8008af0 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008aca:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 8008acc:	f000 feef 	bl	80098ae <xQueueCreateMutex>
 8008ad0:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0de      	beq.n	8008a94 <osMutexNew+0xa>
        if (attr != NULL) {
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	d1f2      	bne.n	8008ac0 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 8008ada:	4629      	mov	r1, r5
 8008adc:	4620      	mov	r0, r4
 8008ade:	f001 f97b 	bl	8009dd8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	d0d7      	beq.n	8008a96 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008ae6:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8008aea:	e7d4      	b.n	8008a96 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008aec:	2001      	movs	r0, #1
 8008aee:	e7e2      	b.n	8008ab6 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 8008af0:	2001      	movs	r0, #1
 8008af2:	e7eb      	b.n	8008acc <osMutexNew+0x42>

08008af4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4603      	mov	r3, r0
 8008af8:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008afa:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8008afe:	f003 0201 	and.w	r2, r3, #1
 8008b02:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008b06:	b995      	cbnz	r5, 8008b2e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d913      	bls.n	8008b34 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008b0c:	b162      	cbz	r2, 8008b28 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008b0e:	f001 f8f4 	bl	8009cfa <xQueueTakeMutexRecursive>
 8008b12:	2801      	cmp	r0, #1
 8008b14:	d101      	bne.n	8008b1a <osMutexAcquire+0x26>
  stat = osOK;
 8008b16:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 8008b1a:	2c00      	cmp	r4, #0
 8008b1c:	bf14      	ite	ne
 8008b1e:	f06f 0001 	mvnne.w	r0, #1
 8008b22:	f06f 0002 	mvneq.w	r0, #2
 8008b26:	e7f7      	b.n	8008b18 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008b28:	f001 f82a 	bl	8009b80 <xQueueSemaphoreTake>
 8008b2c:	e7f1      	b.n	8008b12 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 8008b2e:	f06f 0005 	mvn.w	r0, #5
 8008b32:	e7f1      	b.n	8008b18 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 8008b34:	f06f 0003 	mvn.w	r0, #3
 8008b38:	e7ee      	b.n	8008b18 <osMutexAcquire+0x24>

08008b3a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008b3a:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b3c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008b40:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8008b42:	f002 0301 	and.w	r3, r2, #1
 8008b46:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008b4a:	b979      	cbnz	r1, 8008b6c <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008b4c:	2a01      	cmp	r2, #1
 8008b4e:	d910      	bls.n	8008b72 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008b50:	b13b      	cbz	r3, 8008b62 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008b52:	f000 fe8d 	bl	8009870 <xQueueGiveMutexRecursive>
 8008b56:	2801      	cmp	r0, #1
  stat = osOK;
 8008b58:	bf0c      	ite	eq
 8008b5a:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8008b5c:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8008b60:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008b62:	461a      	mov	r2, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	f000 fdbc 	bl	80096e2 <xQueueGenericSend>
 8008b6a:	e7f4      	b.n	8008b56 <osMutexRelease+0x1c>
    stat = osErrorISR;
 8008b6c:	f06f 0005 	mvn.w	r0, #5
 8008b70:	e7f6      	b.n	8008b60 <osMutexRelease+0x26>
    stat = osErrorParameter;
 8008b72:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008b76:	e7f3      	b.n	8008b60 <osMutexRelease+0x26>

08008b78 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	460e      	mov	r6, r1
 8008b7e:	4615      	mov	r5, r2
 8008b80:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008b84:	b942      	cbnz	r2, 8008b98 <osSemaphoreNew+0x20>
 8008b86:	b138      	cbz	r0, 8008b98 <osSemaphoreNew+0x20>
 8008b88:	4288      	cmp	r0, r1
 8008b8a:	d305      	bcc.n	8008b98 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8008b8c:	b155      	cbz	r5, 8008ba4 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b8e:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8008b92:	b12b      	cbz	r3, 8008ba0 <osSemaphoreNew+0x28>
 8008b94:	2f4f      	cmp	r7, #79	@ 0x4f
 8008b96:	d822      	bhi.n	8008bde <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8008b98:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	b003      	add	sp, #12
 8008b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	d1f9      	bne.n	8008b98 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8008ba4:	2c01      	cmp	r4, #1
 8008ba6:	d00c      	beq.n	8008bc2 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008ba8:	4620      	mov	r0, r4
 8008baa:	4631      	mov	r1, r6
 8008bac:	f000 fd7b 	bl	80096a6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d0f0      	beq.n	8008b98 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8008bb6:	b985      	cbnz	r5, 8008bda <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f001 f90c 	bl	8009dd8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8008bc0:	e7eb      	b.n	8008b9a <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	f000 fd24 	bl	8009614 <xQueueGenericCreate>
 8008bcc:	e00e      	b.n	8008bec <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f000 fd47 	bl	8009662 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d0de      	beq.n	8008b98 <osSemaphoreNew+0x20>
          name = attr->name;
 8008bda:	682d      	ldr	r5, [r5, #0]
 8008bdc:	e7ec      	b.n	8008bb8 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8008bde:	2801      	cmp	r0, #1
 8008be0:	d1f5      	bne.n	8008bce <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008be2:	2103      	movs	r1, #3
 8008be4:	9100      	str	r1, [sp, #0]
 8008be6:	4611      	mov	r1, r2
 8008be8:	f000 fcc6 	bl	8009578 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8008bec:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d0d2      	beq.n	8008b98 <osSemaphoreNew+0x20>
 8008bf2:	2e00      	cmp	r6, #0
 8008bf4:	d0df      	beq.n	8008bb6 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f000 fd71 	bl	80096e2 <xQueueGenericSend>
 8008c00:	2801      	cmp	r0, #1
 8008c02:	d0d8      	beq.n	8008bb6 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8008c04:	4620      	mov	r0, r4
 8008c06:	f001 f911 	bl	8009e2c <vQueueDelete>
      if (hSemaphore != NULL) {
 8008c0a:	e7c5      	b.n	8008b98 <osSemaphoreNew+0x20>

08008c0c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008c0c:	b513      	push	{r0, r1, r4, lr}
 8008c0e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008c10:	b328      	cbz	r0, 8008c5e <osSemaphoreAcquire+0x52>
 8008c12:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008c16:	b1cb      	cbz	r3, 8008c4c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8008c18:	bb09      	cbnz	r1, 8008c5e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008c1a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008c1c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008c1e:	f001 f88d 	bl	8009d3c <xQueueReceiveFromISR>
 8008c22:	2801      	cmp	r0, #1
 8008c24:	d003      	beq.n	8008c2e <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8008c26:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8008c2a:	b002      	add	sp, #8
 8008c2c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	b90b      	cbnz	r3, 8008c36 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8008c32:	2000      	movs	r0, #0
 8008c34:	e7f9      	b.n	8008c2a <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8008c36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	e7f2      	b.n	8008c32 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008c4c:	f000 ff98 	bl	8009b80 <xQueueSemaphoreTake>
 8008c50:	2801      	cmp	r0, #1
 8008c52:	d0ee      	beq.n	8008c32 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8008c54:	2c00      	cmp	r4, #0
 8008c56:	d0e6      	beq.n	8008c26 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8008c58:	f06f 0001 	mvn.w	r0, #1
 8008c5c:	e7e5      	b.n	8008c2a <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8008c5e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008c62:	e7e2      	b.n	8008c2a <osSemaphoreAcquire+0x1e>

08008c64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008c64:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008c66:	b318      	cbz	r0, 8008cb0 <osSemaphoreRelease+0x4c>
 8008c68:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008c6c:	b1cb      	cbz	r3, 8008ca2 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8008c6e:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c70:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8008c72:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c74:	f000 fe95 	bl	80099a2 <xQueueGiveFromISR>
 8008c78:	2801      	cmp	r0, #1
 8008c7a:	d004      	beq.n	8008c86 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8008c7c:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8008c80:	b003      	add	sp, #12
 8008c82:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	b14b      	cbz	r3, 8008c9e <osSemaphoreRelease+0x3a>
 8008c8a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c92:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e7ee      	b.n	8008c80 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f000 fd1c 	bl	80096e2 <xQueueGenericSend>
 8008caa:	2801      	cmp	r0, #1
 8008cac:	d0f7      	beq.n	8008c9e <osSemaphoreRelease+0x3a>
 8008cae:	e7e5      	b.n	8008c7c <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8008cb0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008cb4:	e7e4      	b.n	8008c80 <osSemaphoreRelease+0x1c>

08008cb6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb8:	4605      	mov	r5, r0
 8008cba:	460e      	mov	r6, r1
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cc2:	b11f      	cbz	r7, 8008ccc <osMessageQueueNew+0x16>
  hQueue = NULL;
 8008cc4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	b003      	add	sp, #12
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d0f9      	beq.n	8008cc4 <osMessageQueueNew+0xe>
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d0f7      	beq.n	8008cc4 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8008cd4:	b1da      	cbz	r2, 8008d0e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008cd6:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8008cda:	b183      	cbz	r3, 8008cfe <osMessageQueueNew+0x48>
 8008cdc:	2a4f      	cmp	r2, #79	@ 0x4f
 8008cde:	d9f1      	bls.n	8008cc4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ce0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d0ee      	beq.n	8008cc4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ce6:	434d      	muls	r5, r1
 8008ce8:	6966      	ldr	r6, [r4, #20]
 8008cea:	42ae      	cmp	r6, r5
 8008cec:	d3ea      	bcc.n	8008cc4 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008cee:	9700      	str	r7, [sp, #0]
 8008cf0:	f000 fc42 	bl	8009578 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d0e4      	beq.n	8008cc4 <osMessageQueueNew+0xe>
        name = attr->name;
 8008cfa:	6824      	ldr	r4, [r4, #0]
 8008cfc:	e011      	b.n	8008d22 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008cfe:	2a00      	cmp	r2, #0
 8008d00:	d1e0      	bne.n	8008cc4 <osMessageQueueNew+0xe>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1dd      	bne.n	8008cc4 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d08:	6963      	ldr	r3, [r4, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1da      	bne.n	8008cc4 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8008d0e:	4628      	mov	r0, r5
 8008d10:	2200      	movs	r2, #0
 8008d12:	4631      	mov	r1, r6
 8008d14:	f000 fc7e 	bl	8009614 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8008d18:	4605      	mov	r5, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0d2      	beq.n	8008cc4 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8008d1e:	2c00      	cmp	r4, #0
 8008d20:	d1eb      	bne.n	8008cfa <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f001 f857 	bl	8009dd8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8008d2a:	e7cc      	b.n	8008cc6 <osMessageQueueNew+0x10>

08008d2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d2e:	461c      	mov	r4, r3
 8008d30:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008d34:	b1de      	cbz	r6, 8008d6e <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d36:	b338      	cbz	r0, 8008d88 <osMessageQueuePut+0x5c>
 8008d38:	b331      	cbz	r1, 8008d88 <osMessageQueuePut+0x5c>
 8008d3a:	bb2b      	cbnz	r3, 8008d88 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d3c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008d3e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d40:	f000 fdd2 	bl	80098e8 <xQueueGenericSendFromISR>
 8008d44:	2801      	cmp	r0, #1
 8008d46:	d003      	beq.n	8008d50 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8008d48:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8008d4c:	b002      	add	sp, #8
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	b90b      	cbnz	r3, 8008d58 <osMessageQueuePut+0x2c>
  stat = osOK;
 8008d54:	2000      	movs	r0, #0
 8008d56:	e7f9      	b.n	8008d4c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8008d58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	e7f2      	b.n	8008d54 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d6e:	b158      	cbz	r0, 8008d88 <osMessageQueuePut+0x5c>
 8008d70:	b151      	cbz	r1, 8008d88 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d72:	4633      	mov	r3, r6
 8008d74:	4622      	mov	r2, r4
 8008d76:	f000 fcb4 	bl	80096e2 <xQueueGenericSend>
 8008d7a:	2801      	cmp	r0, #1
 8008d7c:	d0ea      	beq.n	8008d54 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8008d7e:	2c00      	cmp	r4, #0
 8008d80:	d0e2      	beq.n	8008d48 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8008d82:	f06f 0001 	mvn.w	r0, #1
 8008d86:	e7e1      	b.n	8008d4c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8008d88:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008d8c:	e7de      	b.n	8008d4c <osMessageQueuePut+0x20>

08008d8e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d90:	461c      	mov	r4, r3
 8008d92:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008d96:	b1db      	cbz	r3, 8008dd0 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d98:	b330      	cbz	r0, 8008de8 <osMessageQueueGet+0x5a>
 8008d9a:	b329      	cbz	r1, 8008de8 <osMessageQueueGet+0x5a>
 8008d9c:	bb24      	cbnz	r4, 8008de8 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d9e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008da0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008da2:	f000 ffcb 	bl	8009d3c <xQueueReceiveFromISR>
 8008da6:	2801      	cmp	r0, #1
 8008da8:	d003      	beq.n	8008db2 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8008daa:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8008dae:	b003      	add	sp, #12
 8008db0:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	b90b      	cbnz	r3, 8008dba <osMessageQueueGet+0x2c>
  stat = osOK;
 8008db6:	2000      	movs	r0, #0
 8008db8:	e7f9      	b.n	8008dae <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8008dba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	e7f2      	b.n	8008db6 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008dd0:	b150      	cbz	r0, 8008de8 <osMessageQueueGet+0x5a>
 8008dd2:	b149      	cbz	r1, 8008de8 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	f000 fe35 	bl	8009a44 <xQueueReceive>
 8008dda:	2801      	cmp	r0, #1
 8008ddc:	d0eb      	beq.n	8008db6 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8008dde:	2c00      	cmp	r4, #0
 8008de0:	d0e3      	beq.n	8008daa <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8008de2:	f06f 0001 	mvn.w	r0, #1
 8008de6:	e7e2      	b.n	8008dae <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8008de8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008dec:	e7df      	b.n	8008dae <osMessageQueueGet+0x20>
	...

08008df0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008df0:	4b03      	ldr	r3, [pc, #12]	@ (8008e00 <vApplicationGetIdleTaskMemory+0x10>)
 8008df2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008df4:	4b03      	ldr	r3, [pc, #12]	@ (8008e04 <vApplicationGetIdleTaskMemory+0x14>)
 8008df6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008df8:	2380      	movs	r3, #128	@ 0x80
 8008dfa:	6013      	str	r3, [r2, #0]
}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	240031dc 	.word	0x240031dc
 8008e04:	24002fdc 	.word	0x24002fdc

08008e08 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e08:	4b03      	ldr	r3, [pc, #12]	@ (8008e18 <vApplicationGetTimerTaskMemory+0x10>)
 8008e0a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e0c:	4b03      	ldr	r3, [pc, #12]	@ (8008e1c <vApplicationGetTimerTaskMemory+0x14>)
 8008e0e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e14:	6013      	str	r3, [r2, #0]
}
 8008e16:	4770      	bx	lr
 8008e18:	24002f7c 	.word	0x24002f7c
 8008e1c:	24002b7c 	.word	0x24002b7c

08008e20 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e20:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <prvInsertBlockIntoFreeList+0x44>)
{
 8008e22:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e24:	461a      	mov	r2, r3
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4283      	cmp	r3, r0
 8008e2a:	d3fb      	bcc.n	8008e24 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e2c:	6854      	ldr	r4, [r2, #4]
 8008e2e:	1911      	adds	r1, r2, r4
 8008e30:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e32:	bf01      	itttt	eq
 8008e34:	6841      	ldreq	r1, [r0, #4]
 8008e36:	4610      	moveq	r0, r2
 8008e38:	1909      	addeq	r1, r1, r4
 8008e3a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e3c:	6844      	ldr	r4, [r0, #4]
 8008e3e:	1901      	adds	r1, r0, r4
 8008e40:	428b      	cmp	r3, r1
 8008e42:	d10c      	bne.n	8008e5e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e44:	4908      	ldr	r1, [pc, #32]	@ (8008e68 <prvInsertBlockIntoFreeList+0x48>)
 8008e46:	6809      	ldr	r1, [r1, #0]
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	d003      	beq.n	8008e54 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e4c:	6859      	ldr	r1, [r3, #4]
 8008e4e:	4421      	add	r1, r4
 8008e50:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e52:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e54:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e56:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e58:	bf18      	it	ne
 8008e5a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e5e:	4619      	mov	r1, r3
 8008e60:	e7f8      	b.n	8008e54 <prvInsertBlockIntoFreeList+0x34>
 8008e62:	bf00      	nop
 8008e64:	24003258 	.word	0x24003258
 8008e68:	24003254 	.word	0x24003254

08008e6c <pvPortMalloc>:
{
 8008e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e70:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008e72:	f001 f9dd 	bl	800a230 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008e76:	4940      	ldr	r1, [pc, #256]	@ (8008f78 <pvPortMalloc+0x10c>)
 8008e78:	4d40      	ldr	r5, [pc, #256]	@ (8008f7c <pvPortMalloc+0x110>)
 8008e7a:	680b      	ldr	r3, [r1, #0]
 8008e7c:	b9f3      	cbnz	r3, 8008ebc <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8008e7e:	4a40      	ldr	r2, [pc, #256]	@ (8008f80 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8008e80:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e82:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e84:	4e3f      	ldr	r6, [pc, #252]	@ (8008f84 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e86:	bf1b      	ittet	ne
 8008e88:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e8a:	4b3f      	ldrne	r3, [pc, #252]	@ (8008f88 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e8c:	4b3f      	ldreq	r3, [pc, #252]	@ (8008f8c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e8e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008e92:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e94:	bf18      	it	ne
 8008e96:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e98:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e9a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008e9c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e9e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8008ea2:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ea6:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008ea8:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008eaa:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eae:	4b38      	ldr	r3, [pc, #224]	@ (8008f90 <pvPortMalloc+0x124>)
 8008eb0:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eb2:	4b38      	ldr	r3, [pc, #224]	@ (8008f94 <pvPortMalloc+0x128>)
 8008eb4:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008eb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008eba:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ebc:	682e      	ldr	r6, [r5, #0]
 8008ebe:	4226      	tst	r6, r4
 8008ec0:	d155      	bne.n	8008f6e <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	d046      	beq.n	8008f54 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 8008ec6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008eca:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ecc:	bf1c      	itt	ne
 8008ece:	f023 0307 	bicne.w	r3, r3, #7
 8008ed2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d04a      	beq.n	8008f6e <pvPortMalloc+0x102>
 8008ed8:	4f2e      	ldr	r7, [pc, #184]	@ (8008f94 <pvPortMalloc+0x128>)
 8008eda:	683c      	ldr	r4, [r7, #0]
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d346      	bcc.n	8008f6e <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 8008ee0:	4a28      	ldr	r2, [pc, #160]	@ (8008f84 <pvPortMalloc+0x118>)
 8008ee2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ee4:	6868      	ldr	r0, [r5, #4]
 8008ee6:	4298      	cmp	r0, r3
 8008ee8:	d204      	bcs.n	8008ef4 <pvPortMalloc+0x88>
 8008eea:	f8d5 c000 	ldr.w	ip, [r5]
 8008eee:	f1bc 0f00 	cmp.w	ip, #0
 8008ef2:	d115      	bne.n	8008f20 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8008ef4:	6809      	ldr	r1, [r1, #0]
 8008ef6:	42a9      	cmp	r1, r5
 8008ef8:	d039      	beq.n	8008f6e <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008efa:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008efc:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f00:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f02:	1ac2      	subs	r2, r0, r3
 8008f04:	2a10      	cmp	r2, #16
 8008f06:	d912      	bls.n	8008f2e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f08:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f0a:	0741      	lsls	r1, r0, #29
 8008f0c:	d00b      	beq.n	8008f26 <pvPortMalloc+0xba>
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	e7fe      	b.n	8008f1e <pvPortMalloc+0xb2>
 8008f20:	462a      	mov	r2, r5
 8008f22:	4665      	mov	r5, ip
 8008f24:	e7de      	b.n	8008ee4 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f26:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f28:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f2a:	f7ff ff79 	bl	8008e20 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f2e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f30:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f32:	4917      	ldr	r1, [pc, #92]	@ (8008f90 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f34:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f36:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f38:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8008f3a:	4a17      	ldr	r2, [pc, #92]	@ (8008f98 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f3c:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 8008f3e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8008f40:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f42:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 8008f44:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f48:	bf38      	it	cc
 8008f4a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f4c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f50:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8008f52:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8008f54:	f001 fa10 	bl	800a378 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f58:	0763      	lsls	r3, r4, #29
 8008f5a:	d00a      	beq.n	8008f72 <pvPortMalloc+0x106>
 8008f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	e7fe      	b.n	8008f6c <pvPortMalloc+0x100>
void *pvReturn = NULL;
 8008f6e:	2400      	movs	r4, #0
 8008f70:	e7f0      	b.n	8008f54 <pvPortMalloc+0xe8>
}
 8008f72:	4620      	mov	r0, r4
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	24003254 	.word	0x24003254
 8008f7c:	24003240 	.word	0x24003240
 8008f80:	24003260 	.word	0x24003260
 8008f84:	24003258 	.word	0x24003258
 8008f88:	24015758 	.word	0x24015758
 8008f8c:	000124f8 	.word	0x000124f8
 8008f90:	2400324c 	.word	0x2400324c
 8008f94:	24003250 	.word	0x24003250
 8008f98:	24003248 	.word	0x24003248

08008f9c <vPortFree>:
{
 8008f9c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	b390      	cbz	r0, 8009008 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800900c <vPortFree+0x70>)
 8008fa4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008fa8:	6812      	ldr	r2, [r2, #0]
 8008faa:	4213      	tst	r3, r2
 8008fac:	d108      	bne.n	8008fc0 <vPortFree+0x24>
 8008fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	e7fe      	b.n	8008fbe <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fc0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008fc4:	b141      	cbz	r1, 8008fd8 <vPortFree+0x3c>
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	e7fe      	b.n	8008fd6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fd8:	ea23 0302 	bic.w	r3, r3, r2
 8008fdc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008fe0:	f001 f926 	bl	800a230 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8009010 <vPortFree+0x74>)
 8008fe6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fea:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fee:	6811      	ldr	r1, [r2, #0]
 8008ff0:	440b      	add	r3, r1
 8008ff2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ff4:	f7ff ff14 	bl	8008e20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ff8:	4a06      	ldr	r2, [pc, #24]	@ (8009014 <vPortFree+0x78>)
 8008ffa:	6813      	ldr	r3, [r2, #0]
 8008ffc:	3301      	adds	r3, #1
}
 8008ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8009002:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8009004:	f001 b9b8 	b.w	800a378 <xTaskResumeAll>
}
 8009008:	bd10      	pop	{r4, pc}
 800900a:	bf00      	nop
 800900c:	24003240 	.word	0x24003240
 8009010:	24003250 	.word	0x24003250
 8009014:	24003244 	.word	0x24003244

08009018 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009018:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009020:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009022:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009024:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800902c:	4770      	bx	lr

0800902e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009032:	4770      	bx	lr

08009034 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009034:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009036:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009038:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800903a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800903c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800903e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009040:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009042:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009044:	3301      	adds	r3, #1
 8009046:	6003      	str	r3, [r0, #0]
}
 8009048:	4770      	bx	lr

0800904a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800904a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800904c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800904e:	1c63      	adds	r3, r4, #1
 8009050:	d10a      	bne.n	8009068 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009052:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009058:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800905a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800905c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800905e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009060:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009062:	3301      	adds	r3, #1
 8009064:	6003      	str	r3, [r0, #0]
}
 8009066:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009068:	f100 0208 	add.w	r2, r0, #8
 800906c:	4613      	mov	r3, r2
 800906e:	6852      	ldr	r2, [r2, #4]
 8009070:	6815      	ldr	r5, [r2, #0]
 8009072:	42a5      	cmp	r5, r4
 8009074:	d9fa      	bls.n	800906c <vListInsert+0x22>
 8009076:	e7ed      	b.n	8009054 <vListInsert+0xa>

08009078 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009078:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800907a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800907e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009080:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009082:	6859      	ldr	r1, [r3, #4]
 8009084:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009086:	bf08      	it	eq
 8009088:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800908a:	2200      	movs	r2, #0
 800908c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	3a01      	subs	r2, #1
 8009092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009094:	6818      	ldr	r0, [r3, #0]
}
 8009096:	4770      	bx	lr

08009098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009098:	4808      	ldr	r0, [pc, #32]	@ (80090bc <prvPortStartFirstTask+0x24>)
 800909a:	6800      	ldr	r0, [r0, #0]
 800909c:	6800      	ldr	r0, [r0, #0]
 800909e:	f380 8808 	msr	MSP, r0
 80090a2:	f04f 0000 	mov.w	r0, #0
 80090a6:	f380 8814 	msr	CONTROL, r0
 80090aa:	b662      	cpsie	i
 80090ac:	b661      	cpsie	f
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	df00      	svc	0
 80090b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090ba:	0000      	.short	0x0000
 80090bc:	e000ed08 	.word	0xe000ed08

080090c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090c0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090d0 <vPortEnableVFP+0x10>
 80090c4:	6801      	ldr	r1, [r0, #0]
 80090c6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090ca:	6001      	str	r1, [r0, #0]
 80090cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090ce:	0000      	.short	0x0000
 80090d0:	e000ed88 	.word	0xe000ed88

080090d4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80090d4:	2300      	movs	r3, #0
{
 80090d6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80090d8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80090da:	4b0d      	ldr	r3, [pc, #52]	@ (8009110 <prvTaskExitError+0x3c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3301      	adds	r3, #1
 80090e0:	d008      	beq.n	80090f4 <prvTaskExitError+0x20>
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	e7fe      	b.n	80090f2 <prvTaskExitError+0x1e>
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0fc      	beq.n	8009104 <prvTaskExitError+0x30>
}
 800910a:	b002      	add	sp, #8
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	2400004c 	.word	0x2400004c

08009114 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009118:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800911c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009120:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009122:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009124:	4b03      	ldr	r3, [pc, #12]	@ (8009134 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009126:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009128:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800912a:	f06f 0302 	mvn.w	r3, #2
 800912e:	6203      	str	r3, [r0, #32]
}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	080090d5 	.word	0x080090d5
	...

08009140 <SVC_Handler>:
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	@ (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	24015c98 	.word	0x24015c98

08009164 <vPortEnterCritical>:
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009174:	4a0a      	ldr	r2, [pc, #40]	@ (80091a0 <vPortEnterCritical+0x3c>)
 8009176:	6813      	ldr	r3, [r2, #0]
 8009178:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800917a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800917c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800917e:	d10e      	bne.n	800919e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009180:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009184:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009188:	b2db      	uxtb	r3, r3
 800918a:	b143      	cbz	r3, 800919e <vPortEnterCritical+0x3a>
 800918c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	e7fe      	b.n	800919c <vPortEnterCritical+0x38>
}
 800919e:	4770      	bx	lr
 80091a0:	2400004c 	.word	0x2400004c

080091a4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80091a4:	4a08      	ldr	r2, [pc, #32]	@ (80091c8 <vPortExitCritical+0x24>)
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	b943      	cbnz	r3, 80091bc <vPortExitCritical+0x18>
 80091aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	e7fe      	b.n	80091ba <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80091bc:	3b01      	subs	r3, #1
 80091be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091c0:	b90b      	cbnz	r3, 80091c6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091c2:	f383 8811 	msr	BASEPRI, r3
}
 80091c6:	4770      	bx	lr
 80091c8:	2400004c 	.word	0x2400004c
 80091cc:	00000000 	.word	0x00000000

080091d0 <PendSV_Handler>:
	__asm volatile
 80091d0:	f3ef 8009 	mrs	r0, PSP
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	4b15      	ldr	r3, [pc, #84]	@ (8009230 <pxCurrentTCBConst>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	f01e 0f10 	tst.w	lr, #16
 80091e0:	bf08      	it	eq
 80091e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80091f4:	f380 8811 	msr	BASEPRI, r0
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f001 f9bc 	bl	800a57c <vTaskSwitchContext>
 8009204:	f04f 0000 	mov.w	r0, #0
 8009208:	f380 8811 	msr	BASEPRI, r0
 800920c:	bc09      	pop	{r0, r3}
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	6808      	ldr	r0, [r1, #0]
 8009212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009216:	f01e 0f10 	tst.w	lr, #16
 800921a:	bf08      	it	eq
 800921c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009220:	f380 8809 	msr	PSP, r0
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst>:
 8009230:	24015c98 	.word	0x24015c98

08009234 <xPortSysTickHandler>:
{
 8009234:	b508      	push	{r3, lr}
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009246:	f001 f801 	bl	800a24c <xTaskIncrementTick>
 800924a:	b128      	cbz	r0, 8009258 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800924c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009254:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8009258:	2300      	movs	r3, #0
 800925a:	f383 8811 	msr	BASEPRI, r3
}
 800925e:	bd08      	pop	{r3, pc}

08009260 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009260:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009264:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009266:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800926a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800926c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800926e:	4b04      	ldr	r3, [pc, #16]	@ (8009280 <vPortSetupTimerInterrupt+0x20>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	fbb3 f3f1 	udiv	r3, r3, r1
 8009276:	3b01      	subs	r3, #1
 8009278:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800927a:	2307      	movs	r3, #7
 800927c:	6113      	str	r3, [r2, #16]
}
 800927e:	4770      	bx	lr
 8009280:	24000040 	.word	0x24000040

08009284 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009284:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8009288:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800928a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800928e:	4a38      	ldr	r2, [pc, #224]	@ (8009370 <xPortStartScheduler+0xec>)
 8009290:	4291      	cmp	r1, r2
 8009292:	d108      	bne.n	80092a6 <xPortStartScheduler+0x22>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	e7fe      	b.n	80092a4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80092aa:	4b32      	ldr	r3, [pc, #200]	@ (8009374 <xPortStartScheduler+0xf0>)
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d108      	bne.n	80092c2 <xPortStartScheduler+0x3e>
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	e7fe      	b.n	80092c0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009378 <xPortStartScheduler+0xf4>)
 80092c4:	781a      	ldrb	r2, [r3, #0]
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092ca:	22ff      	movs	r2, #255	@ 0xff
 80092cc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092ce:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092d0:	4a2a      	ldr	r2, [pc, #168]	@ (800937c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80092dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80092e0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092e2:	2307      	movs	r3, #7
 80092e4:	4a26      	ldr	r2, [pc, #152]	@ (8009380 <xPortStartScheduler+0xfc>)
 80092e6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80092ec:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ee:	0609      	lsls	r1, r1, #24
 80092f0:	d40a      	bmi.n	8009308 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d011      	beq.n	800931a <xPortStartScheduler+0x96>
 80092f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	e7fe      	b.n	8009306 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009308:	3b01      	subs	r3, #1
 800930a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800930c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f88d 3003 	strb.w	r3, [sp, #3]
 8009318:	e7e6      	b.n	80092e8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800931a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800931e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8009322:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009324:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	4a13      	ldr	r2, [pc, #76]	@ (8009378 <xPortStartScheduler+0xf4>)
 800932a:	b2db      	uxtb	r3, r3
 800932c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800932e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009336:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800933a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800933e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009342:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009346:	f7ff ff8b 	bl	8009260 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800934a:	4b0e      	ldr	r3, [pc, #56]	@ (8009384 <xPortStartScheduler+0x100>)
 800934c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800934e:	f7ff feb7 	bl	80090c0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009352:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009356:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800935a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800935e:	f7ff fe9b 	bl	8009098 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009362:	f001 f90b 	bl	800a57c <vTaskSwitchContext>
}
 8009366:	4628      	mov	r0, r5
	prvTaskExitError();
 8009368:	f7ff feb4 	bl	80090d4 <prvTaskExitError>
}
 800936c:	b003      	add	sp, #12
 800936e:	bd30      	pop	{r4, r5, pc}
 8009370:	410fc271 	.word	0x410fc271
 8009374:	410fc270 	.word	0x410fc270
 8009378:	e000e400 	.word	0xe000e400
 800937c:	2401575c 	.word	0x2401575c
 8009380:	24015758 	.word	0x24015758
 8009384:	2400004c 	.word	0x2400004c

08009388 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009388:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800938c:	2b0f      	cmp	r3, #15
 800938e:	d90e      	bls.n	80093ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009390:	4a11      	ldr	r2, [pc, #68]	@ (80093d8 <vPortValidateInterruptPriority+0x50>)
 8009392:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009394:	4a11      	ldr	r2, [pc, #68]	@ (80093dc <vPortValidateInterruptPriority+0x54>)
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d908      	bls.n	80093ae <vPortValidateInterruptPriority+0x26>
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	e7fe      	b.n	80093ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80093b2:	4a0b      	ldr	r2, [pc, #44]	@ (80093e0 <vPortValidateInterruptPriority+0x58>)
 80093b4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093be:	4293      	cmp	r3, r2
 80093c0:	d908      	bls.n	80093d4 <vPortValidateInterruptPriority+0x4c>
 80093c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	e7fe      	b.n	80093d2 <vPortValidateInterruptPriority+0x4a>
	}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	e000e3f0 	.word	0xe000e3f0
 80093dc:	2401575c 	.word	0x2401575c
 80093e0:	24015758 	.word	0x24015758

080093e4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093e4:	b510      	push	{r4, lr}
 80093e6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093e8:	f7ff febc 	bl	8009164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093ec:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80093ee:	f7ff fed9 	bl	80091a4 <vPortExitCritical>

	return xReturn;
}
 80093f2:	fab4 f084 	clz	r0, r4
 80093f6:	0940      	lsrs	r0, r0, #5
 80093f8:	bd10      	pop	{r4, pc}

080093fa <prvCopyDataToQueue>:
{
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8009400:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009402:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009404:	b942      	cbnz	r2, 8009418 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009406:	6806      	ldr	r6, [r0, #0]
 8009408:	b99e      	cbnz	r6, 8009432 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800940a:	6880      	ldr	r0, [r0, #8]
 800940c:	f001 fa16 	bl	800a83c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009410:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009412:	3501      	adds	r5, #1
 8009414:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8009416:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009418:	b96e      	cbnz	r6, 8009436 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800941a:	6840      	ldr	r0, [r0, #4]
 800941c:	f021 ff75 	bl	802b30a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009420:	6863      	ldr	r3, [r4, #4]
 8009422:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009424:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009426:	68a2      	ldr	r2, [r4, #8]
 8009428:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800942a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800942c:	bf24      	itt	cs
 800942e:	6823      	ldrcs	r3, [r4, #0]
 8009430:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009432:	2000      	movs	r0, #0
 8009434:	e7ed      	b.n	8009412 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009436:	68c0      	ldr	r0, [r0, #12]
 8009438:	f021 ff67 	bl	802b30a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800943c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800943e:	68e3      	ldr	r3, [r4, #12]
 8009440:	4251      	negs	r1, r2
 8009442:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009448:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800944a:	bf3e      	ittt	cc
 800944c:	68a3      	ldrcc	r3, [r4, #8]
 800944e:	185b      	addcc	r3, r3, r1
 8009450:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009452:	2e02      	cmp	r6, #2
 8009454:	d1ed      	bne.n	8009432 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009456:	b10d      	cbz	r5, 800945c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8009458:	3d01      	subs	r5, #1
 800945a:	e7ea      	b.n	8009432 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800945c:	4628      	mov	r0, r5
 800945e:	e7d8      	b.n	8009412 <prvCopyDataToQueue+0x18>

08009460 <prvCopyDataFromQueue>:
{
 8009460:	4603      	mov	r3, r0
 8009462:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8009466:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009468:	b162      	cbz	r2, 8009484 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800946a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800946c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800946e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009470:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009472:	60dc      	str	r4, [r3, #12]
}
 8009474:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009478:	bf24      	itt	cs
 800947a:	6819      	ldrcs	r1, [r3, #0]
 800947c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800947e:	68d9      	ldr	r1, [r3, #12]
 8009480:	f021 bf43 	b.w	802b30a <memcpy>
}
 8009484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009488:	4770      	bx	lr

0800948a <prvUnlockQueue>:
{
 800948a:	b570      	push	{r4, r5, r6, lr}
 800948c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800948e:	f7ff fe69 	bl	8009164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009492:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009496:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800949a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800949c:	2d00      	cmp	r5, #0
 800949e:	dc14      	bgt.n	80094ca <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80094a0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094a2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80094a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80094aa:	f7ff fe7b 	bl	80091a4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80094ae:	f7ff fe59 	bl	8009164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80094b2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 80094b6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	dc12      	bgt.n	80094e2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80094bc:	23ff      	movs	r3, #255	@ 0xff
 80094be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80094c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80094c6:	f7ff be6d 	b.w	80091a4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0e7      	beq.n	80094a0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094d0:	4630      	mov	r0, r6
 80094d2:	f001 f8cf 	bl	800a674 <xTaskRemoveFromEventList>
 80094d6:	b108      	cbz	r0, 80094dc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80094d8:	f001 f956 	bl	800a788 <vTaskMissedYield>
			--cTxLock;
 80094dc:	3d01      	subs	r5, #1
 80094de:	b26d      	sxtb	r5, r5
 80094e0:	e7dc      	b.n	800949c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0e9      	beq.n	80094bc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094e8:	4630      	mov	r0, r6
 80094ea:	f001 f8c3 	bl	800a674 <xTaskRemoveFromEventList>
 80094ee:	b108      	cbz	r0, 80094f4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80094f0:	f001 f94a 	bl	800a788 <vTaskMissedYield>
				--cRxLock;
 80094f4:	3d01      	subs	r5, #1
 80094f6:	b26d      	sxtb	r5, r5
 80094f8:	e7de      	b.n	80094b8 <prvUnlockQueue+0x2e>

080094fa <xQueueGenericReset>:
{
 80094fa:	b538      	push	{r3, r4, r5, lr}
 80094fc:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80094fe:	4604      	mov	r4, r0
 8009500:	b940      	cbnz	r0, 8009514 <xQueueGenericReset+0x1a>
 8009502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	e7fe      	b.n	8009512 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009514:	f7ff fe26 	bl	8009164 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800951e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009520:	434b      	muls	r3, r1
 8009522:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009524:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009526:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009528:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800952a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800952c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800952e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009530:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009532:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009536:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800953a:	b9a5      	cbnz	r5, 8009566 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	b173      	cbz	r3, 800955e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009540:	f104 0010 	add.w	r0, r4, #16
 8009544:	f001 f896 	bl	800a674 <xTaskRemoveFromEventList>
 8009548:	b148      	cbz	r0, 800955e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800954a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800954e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009552:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800955e:	f7ff fe21 	bl	80091a4 <vPortExitCritical>
}
 8009562:	2001      	movs	r0, #1
 8009564:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009566:	f104 0010 	add.w	r0, r4, #16
 800956a:	f7ff fd55 	bl	8009018 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800956e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009572:	f7ff fd51 	bl	8009018 <vListInitialise>
 8009576:	e7f2      	b.n	800955e <xQueueGenericReset+0x64>

08009578 <xQueueGenericCreateStatic>:
	{
 8009578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800957a:	460d      	mov	r5, r1
 800957c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800957e:	b940      	cbnz	r0, 8009592 <xQueueGenericCreateStatic+0x1a>
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	e7fe      	b.n	8009590 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8009592:	b943      	cbnz	r3, 80095a6 <xQueueGenericCreateStatic+0x2e>
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	e7fe      	b.n	80095a4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80095a6:	b14a      	cbz	r2, 80095bc <xQueueGenericCreateStatic+0x44>
 80095a8:	b991      	cbnz	r1, 80095d0 <xQueueGenericCreateStatic+0x58>
 80095aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	e7fe      	b.n	80095ba <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095bc:	b141      	cbz	r1, 80095d0 <xQueueGenericCreateStatic+0x58>
 80095be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	e7fe      	b.n	80095ce <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095d0:	2350      	movs	r3, #80	@ 0x50
 80095d2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	2b50      	cmp	r3, #80	@ 0x50
 80095d8:	d008      	beq.n	80095ec <xQueueGenericCreateStatic+0x74>
 80095da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	e7fe      	b.n	80095ea <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095ec:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	bf08      	it	eq
 80095f2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095f4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095f6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80095fa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80095fc:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009600:	4620      	mov	r0, r4
 8009602:	f7ff ff7a 	bl	80094fa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009606:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800960a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800960c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8009610:	b003      	add	sp, #12
 8009612:	bd30      	pop	{r4, r5, pc}

08009614 <xQueueGenericCreate>:
	{
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	460d      	mov	r5, r1
 8009618:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800961a:	4606      	mov	r6, r0
 800961c:	b940      	cbnz	r0, 8009630 <xQueueGenericCreate+0x1c>
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	e7fe      	b.n	800962e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009630:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009632:	3050      	adds	r0, #80	@ 0x50
 8009634:	f7ff fc1a 	bl	8008e6c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009638:	4604      	mov	r4, r0
 800963a:	b170      	cbz	r0, 800965a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800963c:	2300      	movs	r3, #0
 800963e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009642:	b165      	cbz	r5, 800965e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009644:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009648:	2101      	movs	r1, #1
 800964a:	4620      	mov	r0, r4
 800964c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800964e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009652:	f7ff ff52 	bl	80094fa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009656:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800965a:	4620      	mov	r0, r4
 800965c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800965e:	4603      	mov	r3, r0
 8009660:	e7f2      	b.n	8009648 <xQueueGenericCreate+0x34>

08009662 <xQueueCreateCountingSemaphoreStatic>:
	{
 8009662:	b513      	push	{r0, r1, r4, lr}
 8009664:	4613      	mov	r3, r2
 8009666:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009668:	b940      	cbnz	r0, 800967c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800966a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	e7fe      	b.n	800967a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800967c:	4288      	cmp	r0, r1
 800967e:	d208      	bcs.n	8009692 <xQueueCreateCountingSemaphoreStatic+0x30>
 8009680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	e7fe      	b.n	8009690 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009692:	2202      	movs	r2, #2
 8009694:	9200      	str	r2, [sp, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	4611      	mov	r1, r2
 800969a:	f7ff ff6d 	bl	8009578 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800969e:	b100      	cbz	r0, 80096a2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096a0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80096a2:	b002      	add	sp, #8
 80096a4:	bd10      	pop	{r4, pc}

080096a6 <xQueueCreateCountingSemaphore>:
	{
 80096a6:	b510      	push	{r4, lr}
 80096a8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80096aa:	b940      	cbnz	r0, 80096be <xQueueCreateCountingSemaphore+0x18>
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	e7fe      	b.n	80096bc <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80096be:	4288      	cmp	r0, r1
 80096c0:	d208      	bcs.n	80096d4 <xQueueCreateCountingSemaphore+0x2e>
 80096c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	e7fe      	b.n	80096d2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096d4:	2202      	movs	r2, #2
 80096d6:	2100      	movs	r1, #0
 80096d8:	f7ff ff9c 	bl	8009614 <xQueueGenericCreate>
		if( xHandle != NULL )
 80096dc:	b100      	cbz	r0, 80096e0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096de:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80096e0:	bd10      	pop	{r4, pc}

080096e2 <xQueueGenericSend>:
{
 80096e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80096e6:	460f      	mov	r7, r1
 80096e8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80096ea:	4604      	mov	r4, r0
{
 80096ec:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80096ee:	b940      	cbnz	r0, 8009702 <xQueueGenericSend+0x20>
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	e7fe      	b.n	8009700 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009702:	b951      	cbnz	r1, 800971a <xQueueGenericSend+0x38>
 8009704:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009706:	b143      	cbz	r3, 800971a <xQueueGenericSend+0x38>
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	e7fe      	b.n	8009718 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800971a:	2e02      	cmp	r6, #2
 800971c:	d10b      	bne.n	8009736 <xQueueGenericSend+0x54>
 800971e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009720:	2b01      	cmp	r3, #1
 8009722:	d008      	beq.n	8009736 <xQueueGenericSend+0x54>
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	e7fe      	b.n	8009734 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009736:	f001 f833 	bl	800a7a0 <xTaskGetSchedulerState>
 800973a:	4605      	mov	r5, r0
 800973c:	b330      	cbz	r0, 800978c <xQueueGenericSend+0xaa>
 800973e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8009740:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8009744:	f7ff fd0e 	bl	8009164 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009748:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800974a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800974c:	429a      	cmp	r2, r3
 800974e:	d301      	bcc.n	8009754 <xQueueGenericSend+0x72>
 8009750:	2e02      	cmp	r6, #2
 8009752:	d127      	bne.n	80097a4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009754:	4632      	mov	r2, r6
 8009756:	4639      	mov	r1, r7
 8009758:	4620      	mov	r0, r4
 800975a:	f7ff fe4e 	bl	80093fa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800975e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009760:	b11b      	cbz	r3, 800976a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009762:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009766:	f000 ff85 	bl	800a674 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800976a:	b148      	cbz	r0, 8009780 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800976c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009774:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009780:	f7ff fd10 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8009784:	2001      	movs	r0, #1
}
 8009786:	b004      	add	sp, #16
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0d6      	beq.n	8009740 <xQueueGenericSend+0x5e>
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	e7fe      	b.n	80097a2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	b91b      	cbnz	r3, 80097b0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80097a8:	f7ff fcfc 	bl	80091a4 <vPortExitCritical>
					return errQUEUE_FULL;
 80097ac:	2000      	movs	r0, #0
 80097ae:	e7ea      	b.n	8009786 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80097b0:	b915      	cbnz	r5, 80097b8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097b2:	a802      	add	r0, sp, #8
 80097b4:	f000 ffa0 	bl	800a6f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80097b8:	f7ff fcf4 	bl	80091a4 <vPortExitCritical>
		vTaskSuspendAll();
 80097bc:	f000 fd38 	bl	800a230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c0:	f7ff fcd0 	bl	8009164 <vPortEnterCritical>
 80097c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80097c8:	2bff      	cmp	r3, #255	@ 0xff
 80097ca:	d101      	bne.n	80097d0 <xQueueGenericSend+0xee>
 80097cc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80097d0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80097d4:	2bff      	cmp	r3, #255	@ 0xff
 80097d6:	d101      	bne.n	80097dc <xQueueGenericSend+0xfa>
 80097d8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 80097dc:	f7ff fce2 	bl	80091a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097e0:	a901      	add	r1, sp, #4
 80097e2:	a802      	add	r0, sp, #8
 80097e4:	f000 ff94 	bl	800a710 <xTaskCheckForTimeOut>
 80097e8:	bb38      	cbnz	r0, 800983a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097ea:	f7ff fcbb 	bl	8009164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097ee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80097f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d10e      	bne.n	8009814 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80097f6:	f7ff fcd5 	bl	80091a4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097fa:	9901      	ldr	r1, [sp, #4]
 80097fc:	f104 0010 	add.w	r0, r4, #16
 8009800:	f000 ff00 	bl	800a604 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff fe40 	bl	800948a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800980a:	f000 fdb5 	bl	800a378 <xTaskResumeAll>
 800980e:	b148      	cbz	r0, 8009824 <xQueueGenericSend+0x142>
 8009810:	2501      	movs	r5, #1
 8009812:	e797      	b.n	8009744 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8009814:	f7ff fcc6 	bl	80091a4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009818:	4620      	mov	r0, r4
 800981a:	f7ff fe36 	bl	800948a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800981e:	f000 fdab 	bl	800a378 <xTaskResumeAll>
 8009822:	e7f5      	b.n	8009810 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8009824:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800982c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	e7ea      	b.n	8009810 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800983a:	4620      	mov	r0, r4
 800983c:	f7ff fe25 	bl	800948a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009840:	f000 fd9a 	bl	800a378 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009844:	e7b2      	b.n	80097ac <xQueueGenericSend+0xca>

08009846 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009846:	2200      	movs	r2, #0
	{
 8009848:	460b      	mov	r3, r1
 800984a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800984c:	4611      	mov	r1, r2
 800984e:	9000      	str	r0, [sp, #0]
 8009850:	2001      	movs	r0, #1
 8009852:	f7ff fe91 	bl	8009578 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8009856:	4604      	mov	r4, r0
 8009858:	b138      	cbz	r0, 800986a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800985a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800985c:	461a      	mov	r2, r3
 800985e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009860:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009862:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009864:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009866:	f7ff ff3c 	bl	80096e2 <xQueueGenericSend>
	}
 800986a:	4620      	mov	r0, r4
 800986c:	b002      	add	sp, #8
 800986e:	bd10      	pop	{r4, pc}

08009870 <xQueueGiveMutexRecursive>:
	{
 8009870:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8009872:	4604      	mov	r4, r0
 8009874:	b940      	cbnz	r0, 8009888 <xQueueGiveMutexRecursive+0x18>
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	e7fe      	b.n	8009886 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009888:	6885      	ldr	r5, [r0, #8]
 800988a:	f000 ff83 	bl	800a794 <xTaskGetCurrentTaskHandle>
 800988e:	4285      	cmp	r5, r0
 8009890:	d10b      	bne.n	80098aa <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009892:	68e3      	ldr	r3, [r4, #12]
 8009894:	3b01      	subs	r3, #1
 8009896:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009898:	b10b      	cbz	r3, 800989e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800989a:	2001      	movs	r0, #1
	}
 800989c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800989e:	461a      	mov	r2, r3
 80098a0:	4619      	mov	r1, r3
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7ff ff1d 	bl	80096e2 <xQueueGenericSend>
 80098a8:	e7f7      	b.n	800989a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 80098aa:	2000      	movs	r0, #0
		return xReturn;
 80098ac:	e7f6      	b.n	800989c <xQueueGiveMutexRecursive+0x2c>

080098ae <xQueueCreateMutex>:
	{
 80098ae:	b570      	push	{r4, r5, r6, lr}
 80098b0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80098b2:	2050      	movs	r0, #80	@ 0x50
 80098b4:	f7ff fada 	bl	8008e6c <pvPortMalloc>
 80098b8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 80098ba:	b198      	cbz	r0, 80098e4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80098bc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80098be:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098c0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80098c2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80098c6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098ca:	f7ff fe16 	bl	80094fa <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80098ce:	462b      	mov	r3, r5
 80098d0:	462a      	mov	r2, r5
 80098d2:	4629      	mov	r1, r5
 80098d4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80098d6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80098da:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80098dc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80098de:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80098e0:	f7ff feff 	bl	80096e2 <xQueueGenericSend>
	}
 80098e4:	4620      	mov	r0, r4
 80098e6:	bd70      	pop	{r4, r5, r6, pc}

080098e8 <xQueueGenericSendFromISR>:
{
 80098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4689      	mov	r9, r1
 80098ee:	4617      	mov	r7, r2
 80098f0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80098f2:	4604      	mov	r4, r0
 80098f4:	b940      	cbnz	r0, 8009908 <xQueueGenericSendFromISR+0x20>
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	e7fe      	b.n	8009906 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009908:	b951      	cbnz	r1, 8009920 <xQueueGenericSendFromISR+0x38>
 800990a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800990c:	b143      	cbz	r3, 8009920 <xQueueGenericSendFromISR+0x38>
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	e7fe      	b.n	800991e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009920:	2e02      	cmp	r6, #2
 8009922:	d10b      	bne.n	800993c <xQueueGenericSendFromISR+0x54>
 8009924:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009926:	2b01      	cmp	r3, #1
 8009928:	d008      	beq.n	800993c <xQueueGenericSendFromISR+0x54>
 800992a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	e7fe      	b.n	800993a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800993c:	f7ff fd24 	bl	8009388 <vPortValidateInterruptPriority>
	__asm volatile
 8009940:	f3ef 8811 	mrs	r8, BASEPRI
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009954:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009956:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009958:	429a      	cmp	r2, r3
 800995a:	d301      	bcc.n	8009960 <xQueueGenericSendFromISR+0x78>
 800995c:	2e02      	cmp	r6, #2
 800995e:	d11e      	bne.n	800999e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009960:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009964:	4632      	mov	r2, r6
 8009966:	4649      	mov	r1, r9
 8009968:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800996a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800996c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800996e:	f7ff fd44 	bl	80093fa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009972:	1c6b      	adds	r3, r5, #1
 8009974:	d10e      	bne.n	8009994 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009976:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009978:	b13b      	cbz	r3, 800998a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800997a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800997e:	f000 fe79 	bl	800a674 <xTaskRemoveFromEventList>
 8009982:	b110      	cbz	r0, 800998a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8009984:	b10f      	cbz	r7, 800998a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009986:	2301      	movs	r3, #1
 8009988:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800998a:	2001      	movs	r0, #1
	__asm volatile
 800998c:	f388 8811 	msr	BASEPRI, r8
}
 8009990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009994:	3501      	adds	r5, #1
 8009996:	b26d      	sxtb	r5, r5
 8009998:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800999c:	e7f5      	b.n	800998a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800999e:	2000      	movs	r0, #0
 80099a0:	e7f4      	b.n	800998c <xQueueGenericSendFromISR+0xa4>

080099a2 <xQueueGiveFromISR>:
{
 80099a2:	b570      	push	{r4, r5, r6, lr}
 80099a4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80099a6:	4604      	mov	r4, r0
 80099a8:	b940      	cbnz	r0, 80099bc <xQueueGiveFromISR+0x1a>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	e7fe      	b.n	80099ba <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80099bc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80099be:	b143      	cbz	r3, 80099d2 <xQueueGiveFromISR+0x30>
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	e7fe      	b.n	80099d0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80099d2:	6803      	ldr	r3, [r0, #0]
 80099d4:	b953      	cbnz	r3, 80099ec <xQueueGiveFromISR+0x4a>
 80099d6:	6883      	ldr	r3, [r0, #8]
 80099d8:	b143      	cbz	r3, 80099ec <xQueueGiveFromISR+0x4a>
 80099da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	e7fe      	b.n	80099ea <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099ec:	f7ff fccc 	bl	8009388 <vPortValidateInterruptPriority>
	__asm volatile
 80099f0:	f3ef 8611 	mrs	r6, BASEPRI
 80099f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d919      	bls.n	8009a40 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a10:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009a12:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a14:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a16:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8009a18:	d10d      	bne.n	8009a36 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a1c:	b13b      	cbz	r3, 8009a2e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a1e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009a22:	f000 fe27 	bl	800a674 <xTaskRemoveFromEventList>
 8009a26:	b110      	cbz	r0, 8009a2e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009a28:	b10d      	cbz	r5, 8009a2e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8009a2e:	2001      	movs	r0, #1
	__asm volatile
 8009a30:	f386 8811 	msr	BASEPRI, r6
}
 8009a34:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a36:	3301      	adds	r3, #1
 8009a38:	b25b      	sxtb	r3, r3
 8009a3a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009a3e:	e7f6      	b.n	8009a2e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8009a40:	2000      	movs	r0, #0
 8009a42:	e7f5      	b.n	8009a30 <xQueueGiveFromISR+0x8e>

08009a44 <xQueueReceive>:
{
 8009a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009a48:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8009a4a:	4604      	mov	r4, r0
{
 8009a4c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009a4e:	b940      	cbnz	r0, 8009a62 <xQueueReceive+0x1e>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	e7fe      	b.n	8009a60 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a62:	b951      	cbnz	r1, 8009a7a <xQueueReceive+0x36>
 8009a64:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009a66:	b143      	cbz	r3, 8009a7a <xQueueReceive+0x36>
 8009a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	e7fe      	b.n	8009a78 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a7a:	f000 fe91 	bl	800a7a0 <xTaskGetSchedulerState>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	b318      	cbz	r0, 8009aca <xQueueReceive+0x86>
 8009a82:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8009a84:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8009a88:	f7ff fb6c 	bl	8009164 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a8c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a8e:	b347      	cbz	r7, 8009ae2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a90:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a92:	4631      	mov	r1, r6
 8009a94:	4620      	mov	r0, r4
 8009a96:	f7ff fce3 	bl	8009460 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a9a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a9c:	6923      	ldr	r3, [r4, #16]
 8009a9e:	b173      	cbz	r3, 8009abe <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa0:	f104 0010 	add.w	r0, r4, #16
 8009aa4:	f000 fde6 	bl	800a674 <xTaskRemoveFromEventList>
 8009aa8:	b148      	cbz	r0, 8009abe <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8009aaa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009abe:	f7ff fb71 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8009ac2:	2001      	movs	r0, #1
}
 8009ac4:	b004      	add	sp, #16
 8009ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0d9      	beq.n	8009a84 <xQueueReceive+0x40>
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	b91b      	cbnz	r3, 8009aee <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8009ae6:	f7ff fb5d 	bl	80091a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009aea:	2000      	movs	r0, #0
 8009aec:	e7ea      	b.n	8009ac4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8009aee:	b915      	cbnz	r5, 8009af6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009af0:	a802      	add	r0, sp, #8
 8009af2:	f000 fe01 	bl	800a6f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009af6:	f7ff fb55 	bl	80091a4 <vPortExitCritical>
		vTaskSuspendAll();
 8009afa:	f000 fb99 	bl	800a230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009afe:	f7ff fb31 	bl	8009164 <vPortEnterCritical>
 8009b02:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009b06:	2bff      	cmp	r3, #255	@ 0xff
 8009b08:	d101      	bne.n	8009b0e <xQueueReceive+0xca>
 8009b0a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8009b0e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009b12:	2bff      	cmp	r3, #255	@ 0xff
 8009b14:	d101      	bne.n	8009b1a <xQueueReceive+0xd6>
 8009b16:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8009b1a:	f7ff fb43 	bl	80091a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b1e:	a901      	add	r1, sp, #4
 8009b20:	a802      	add	r0, sp, #8
 8009b22:	f000 fdf5 	bl	800a710 <xTaskCheckForTimeOut>
 8009b26:	bb00      	cbnz	r0, 8009b6a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fc5b 	bl	80093e4 <prvIsQueueEmpty>
 8009b2e:	b1b0      	cbz	r0, 8009b5e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b30:	9901      	ldr	r1, [sp, #4]
 8009b32:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009b36:	f000 fd65 	bl	800a604 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff fca5 	bl	800948a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b40:	f000 fc1a 	bl	800a378 <xTaskResumeAll>
 8009b44:	b948      	cbnz	r0, 8009b5a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8009b46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	2501      	movs	r5, #1
 8009b5c:	e794      	b.n	8009a88 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f7ff fc93 	bl	800948a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b64:	f000 fc08 	bl	800a378 <xTaskResumeAll>
 8009b68:	e7f7      	b.n	8009b5a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7ff fc8d 	bl	800948a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b70:	f000 fc02 	bl	800a378 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7ff fc35 	bl	80093e4 <prvIsQueueEmpty>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d0ed      	beq.n	8009b5a <xQueueReceive+0x116>
 8009b7e:	e7b4      	b.n	8009aea <xQueueReceive+0xa6>

08009b80 <xQueueSemaphoreTake>:
{
 8009b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b82:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8009b84:	4604      	mov	r4, r0
{
 8009b86:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009b88:	b940      	cbnz	r0, 8009b9c <xQueueSemaphoreTake+0x1c>
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	e7fe      	b.n	8009b9a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b9c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8009b9e:	b145      	cbz	r5, 8009bb2 <xQueueSemaphoreTake+0x32>
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	e7fe      	b.n	8009bb0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bb2:	f000 fdf5 	bl	800a7a0 <xTaskGetSchedulerState>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	b320      	cbz	r0, 8009c04 <xQueueSemaphoreTake+0x84>
 8009bba:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8009bbc:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8009bbe:	f7ff fad1 	bl	8009164 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bc2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009bc4:	b353      	cbz	r3, 8009c1c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	b913      	cbnz	r3, 8009bd4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009bce:	f000 fec5 	bl	800a95c <pvTaskIncrementMutexHeldCount>
 8009bd2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	b173      	cbz	r3, 8009bf6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd8:	f104 0010 	add.w	r0, r4, #16
 8009bdc:	f000 fd4a 	bl	800a674 <xTaskRemoveFromEventList>
 8009be0:	b148      	cbz	r0, 8009bf6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8009be2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009bf6:	f7ff fad5 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8009bfa:	2001      	movs	r0, #1
}
 8009bfc:	b005      	add	sp, #20
 8009bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c00:	4635      	mov	r5, r6
 8009c02:	e7db      	b.n	8009bbc <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0fa      	beq.n	8009c00 <xQueueSemaphoreTake+0x80>
 8009c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	e7fe      	b.n	8009c1a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	b953      	cbnz	r3, 8009c36 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d066      	beq.n	8009cf2 <xQueueSemaphoreTake+0x172>
 8009c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	e7fe      	b.n	8009c34 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8009c36:	b916      	cbnz	r6, 8009c3e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c38:	a802      	add	r0, sp, #8
 8009c3a:	f000 fd5d 	bl	800a6f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009c3e:	f7ff fab1 	bl	80091a4 <vPortExitCritical>
		vTaskSuspendAll();
 8009c42:	f000 faf5 	bl	800a230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c46:	f7ff fa8d 	bl	8009164 <vPortEnterCritical>
 8009c4a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009c4e:	2bff      	cmp	r3, #255	@ 0xff
 8009c50:	d101      	bne.n	8009c56 <xQueueSemaphoreTake+0xd6>
 8009c52:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8009c56:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009c5a:	2bff      	cmp	r3, #255	@ 0xff
 8009c5c:	d101      	bne.n	8009c62 <xQueueSemaphoreTake+0xe2>
 8009c5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c62:	f7ff fa9f 	bl	80091a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c66:	a901      	add	r1, sp, #4
 8009c68:	a802      	add	r0, sp, #8
 8009c6a:	f000 fd51 	bl	800a710 <xTaskCheckForTimeOut>
 8009c6e:	bb50      	cbnz	r0, 8009cc6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c70:	4620      	mov	r0, r4
 8009c72:	f7ff fbb7 	bl	80093e4 <prvIsQueueEmpty>
 8009c76:	b300      	cbz	r0, 8009cba <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	b93b      	cbnz	r3, 8009c8c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8009c7c:	f7ff fa72 	bl	8009164 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c80:	68a0      	ldr	r0, [r4, #8]
 8009c82:	f000 fd9d 	bl	800a7c0 <xTaskPriorityInherit>
 8009c86:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009c88:	f7ff fa8c 	bl	80091a4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c8c:	9901      	ldr	r1, [sp, #4]
 8009c8e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009c92:	f000 fcb7 	bl	800a604 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff fbf7 	bl	800948a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c9c:	f000 fb6c 	bl	800a378 <xTaskResumeAll>
 8009ca0:	b948      	cbnz	r0, 8009cb6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8009ca2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009caa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	2601      	movs	r6, #1
 8009cb8:	e781      	b.n	8009bbe <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff fbe5 	bl	800948a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cc0:	f000 fb5a 	bl	800a378 <xTaskResumeAll>
 8009cc4:	e7f7      	b.n	8009cb6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7ff fbdf 	bl	800948a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ccc:	f000 fb54 	bl	800a378 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7ff fb87 	bl	80093e4 <prvIsQueueEmpty>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d0ed      	beq.n	8009cb6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8009cda:	b165      	cbz	r5, 8009cf6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8009cdc:	f7ff fa42 	bl	8009164 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009ce0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009ce2:	b119      	cbz	r1, 8009cec <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ce4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009ce6:	6819      	ldr	r1, [r3, #0]
 8009ce8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009cec:	68a0      	ldr	r0, [r4, #8]
 8009cee:	f000 fde7 	bl	800a8c0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009cf2:	f7ff fa57 	bl	80091a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e780      	b.n	8009bfc <xQueueSemaphoreTake+0x7c>

08009cfa <xQueueTakeMutexRecursive>:
	{
 8009cfa:	b570      	push	{r4, r5, r6, lr}
 8009cfc:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8009cfe:	4604      	mov	r4, r0
 8009d00:	b940      	cbnz	r0, 8009d14 <xQueueTakeMutexRecursive+0x1a>
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	e7fe      	b.n	8009d12 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d14:	6886      	ldr	r6, [r0, #8]
 8009d16:	f000 fd3d 	bl	800a794 <xTaskGetCurrentTaskHandle>
 8009d1a:	4286      	cmp	r6, r0
 8009d1c:	d104      	bne.n	8009d28 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d1e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8009d20:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d22:	3301      	adds	r3, #1
 8009d24:	60e3      	str	r3, [r4, #12]
	}
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f7ff ff28 	bl	8009b80 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d0f8      	beq.n	8009d26 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d34:	68e3      	ldr	r3, [r4, #12]
 8009d36:	3301      	adds	r3, #1
 8009d38:	60e3      	str	r3, [r4, #12]
 8009d3a:	e7f4      	b.n	8009d26 <xQueueTakeMutexRecursive+0x2c>

08009d3c <xQueueReceiveFromISR>:
{
 8009d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	4689      	mov	r9, r1
 8009d42:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8009d44:	4604      	mov	r4, r0
 8009d46:	b940      	cbnz	r0, 8009d5a <xQueueReceiveFromISR+0x1e>
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	e7fe      	b.n	8009d58 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d5a:	b951      	cbnz	r1, 8009d72 <xQueueReceiveFromISR+0x36>
 8009d5c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009d5e:	b143      	cbz	r3, 8009d72 <xQueueReceiveFromISR+0x36>
 8009d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	e7fe      	b.n	8009d70 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d72:	f7ff fb09 	bl	8009388 <vPortValidateInterruptPriority>
	__asm volatile
 8009d76:	f3ef 8711 	mrs	r7, BASEPRI
 8009d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d8a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d8c:	b30d      	cbz	r5, 8009dd2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d8e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d92:	4649      	mov	r1, r9
 8009d94:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d96:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d98:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d9a:	f7ff fb61 	bl	8009460 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d9e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8009da0:	1c73      	adds	r3, r6, #1
 8009da2:	d111      	bne.n	8009dc8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da4:	6923      	ldr	r3, [r4, #16]
 8009da6:	b153      	cbz	r3, 8009dbe <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da8:	f104 0010 	add.w	r0, r4, #16
 8009dac:	f000 fc62 	bl	800a674 <xTaskRemoveFromEventList>
 8009db0:	b128      	cbz	r0, 8009dbe <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8009db2:	f1b8 0f00 	cmp.w	r8, #0
 8009db6:	d002      	beq.n	8009dbe <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8009dbe:	2001      	movs	r0, #1
	__asm volatile
 8009dc0:	f387 8811 	msr	BASEPRI, r7
}
 8009dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009dc8:	3601      	adds	r6, #1
 8009dca:	b276      	sxtb	r6, r6
 8009dcc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8009dd0:	e7f5      	b.n	8009dbe <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	e7f4      	b.n	8009dc0 <xQueueReceiveFromISR+0x84>
	...

08009dd8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dd8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009dda:	4a07      	ldr	r2, [pc, #28]	@ (8009df8 <vQueueAddToRegistry+0x20>)
	{
 8009ddc:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009dde:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8009de2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8009de6:	b91d      	cbnz	r5, 8009df0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009de8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009dec:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009dee:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009df0:	3301      	adds	r3, #1
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d1f3      	bne.n	8009dde <vQueueAddToRegistry+0x6>
 8009df6:	e7fa      	b.n	8009dee <vQueueAddToRegistry+0x16>
 8009df8:	24015760 	.word	0x24015760

08009dfc <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dfc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009dfe:	4a09      	ldr	r2, [pc, #36]	@ (8009e24 <vQueueUnregisterQueue+0x28>)
	{
 8009e00:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009e02:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009e06:	00dc      	lsls	r4, r3, #3
 8009e08:	4281      	cmp	r1, r0
 8009e0a:	d106      	bne.n	8009e1a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009e0c:	4a06      	ldr	r2, [pc, #24]	@ (8009e28 <vQueueUnregisterQueue+0x2c>)
 8009e0e:	2100      	movs	r1, #0
 8009e10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009e14:	4422      	add	r2, r4
 8009e16:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009e18:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d1f0      	bne.n	8009e02 <vQueueUnregisterQueue+0x6>
 8009e20:	e7fa      	b.n	8009e18 <vQueueUnregisterQueue+0x1c>
 8009e22:	bf00      	nop
 8009e24:	24015764 	.word	0x24015764
 8009e28:	24015760 	.word	0x24015760

08009e2c <vQueueDelete>:
{
 8009e2c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8009e2e:	b940      	cbnz	r0, 8009e42 <vQueueDelete+0x16>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	e7fe      	b.n	8009e40 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8009e42:	f7ff ffdb 	bl	8009dfc <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e46:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8009e4a:	b91b      	cbnz	r3, 8009e54 <vQueueDelete+0x28>
}
 8009e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8009e50:	f7ff b8a4 	b.w	8008f9c <vPortFree>
}
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e56:	b570      	push	{r4, r5, r6, lr}
 8009e58:	4604      	mov	r4, r0
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e5e:	f7ff f981 	bl	8009164 <vPortEnterCritical>
 8009e62:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009e66:	2bff      	cmp	r3, #255	@ 0xff
 8009e68:	d102      	bne.n	8009e70 <vQueueWaitForMessageRestricted+0x1a>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009e70:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009e74:	2bff      	cmp	r3, #255	@ 0xff
 8009e76:	d102      	bne.n	8009e7e <vQueueWaitForMessageRestricted+0x28>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009e7e:	f7ff f991 	bl	80091a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e82:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009e84:	b92b      	cbnz	r3, 8009e92 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e86:	4632      	mov	r2, r6
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e8e:	f000 fbd3 	bl	800a638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e92:	4620      	mov	r0, r4
	}
 8009e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8009e98:	f7ff baf7 	b.w	800948a <prvUnlockQueue>

08009e9c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ea2:	f7ff f95f 	bl	8009164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8009f64 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8009ea8:	4e2f      	ldr	r6, [pc, #188]	@ (8009f68 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	4f2f      	ldr	r7, [pc, #188]	@ (8009f6c <prvAddNewTaskToReadyList+0xd0>)
 8009eae:	3201      	adds	r2, #1
 8009eb0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009eb2:	6835      	ldr	r5, [r6, #0]
 8009eb4:	2d00      	cmp	r5, #0
 8009eb6:	d14a      	bne.n	8009f4e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009eb8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d11f      	bne.n	8009f00 <prvAddNewTaskToReadyList+0x64>
 8009ec0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ec2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	f7ff f8a7 	bl	8009018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009eca:	f108 0814 	add.w	r8, r8, #20
 8009ece:	2d38      	cmp	r5, #56	@ 0x38
 8009ed0:	d1f7      	bne.n	8009ec2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ed2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8009f94 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8009ed6:	4d26      	ldr	r5, [pc, #152]	@ (8009f70 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8009ed8:	4640      	mov	r0, r8
 8009eda:	f7ff f89d 	bl	8009018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f7ff f89a 	bl	8009018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ee4:	4823      	ldr	r0, [pc, #140]	@ (8009f74 <prvAddNewTaskToReadyList+0xd8>)
 8009ee6:	f7ff f897 	bl	8009018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009eea:	4823      	ldr	r0, [pc, #140]	@ (8009f78 <prvAddNewTaskToReadyList+0xdc>)
 8009eec:	f7ff f894 	bl	8009018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ef0:	4822      	ldr	r0, [pc, #136]	@ (8009f7c <prvAddNewTaskToReadyList+0xe0>)
 8009ef2:	f7ff f891 	bl	8009018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ef6:	4b22      	ldr	r3, [pc, #136]	@ (8009f80 <prvAddNewTaskToReadyList+0xe4>)
 8009ef8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009efc:	4b21      	ldr	r3, [pc, #132]	@ (8009f84 <prvAddNewTaskToReadyList+0xe8>)
 8009efe:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8009f00:	4a21      	ldr	r2, [pc, #132]	@ (8009f88 <prvAddNewTaskToReadyList+0xec>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009f08:	4a20      	ldr	r2, [pc, #128]	@ (8009f8c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f0a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009f0c:	6811      	ldr	r1, [r2, #0]
 8009f0e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f10:	428b      	cmp	r3, r1
 8009f12:	d900      	bls.n	8009f16 <prvAddNewTaskToReadyList+0x7a>
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	2014      	movs	r0, #20
 8009f18:	1d21      	adds	r1, r4, #4
 8009f1a:	fb00 7003 	mla	r0, r0, r3, r7
 8009f1e:	f7ff f889 	bl	8009034 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009f22:	f7ff f93f 	bl	80091a4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009f26:	4b1a      	ldr	r3, [pc, #104]	@ (8009f90 <prvAddNewTaskToReadyList+0xf4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	b173      	cbz	r3, 8009f4a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f2c:	6833      	ldr	r3, [r6, #0]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d209      	bcs.n	8009f4a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8009f36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	f3bf 8f6f 	isb	sy
}
 8009f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009f4e:	4b10      	ldr	r3, [pc, #64]	@ (8009f90 <prvAddNewTaskToReadyList+0xf4>)
 8009f50:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	d1d3      	bne.n	8009f00 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f58:	6832      	ldr	r2, [r6, #0]
 8009f5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d8cf      	bhi.n	8009f00 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009f60:	6034      	str	r4, [r6, #0]
 8009f62:	e7cd      	b.n	8009f00 <prvAddNewTaskToReadyList+0x64>
 8009f64:	240157c4 	.word	0x240157c4
 8009f68:	24015c98 	.word	0x24015c98
 8009f6c:	24015838 	.word	0x24015838
 8009f70:	24015810 	.word	0x24015810
 8009f74:	240157f4 	.word	0x240157f4
 8009f78:	240157e0 	.word	0x240157e0
 8009f7c:	240157c8 	.word	0x240157c8
 8009f80:	2401580c 	.word	0x2401580c
 8009f84:	24015808 	.word	0x24015808
 8009f88:	240157a8 	.word	0x240157a8
 8009f8c:	240157bc 	.word	0x240157bc
 8009f90:	240157b8 	.word	0x240157b8
 8009f94:	24015824 	.word	0x24015824

08009f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f9a:	4b15      	ldr	r3, [pc, #84]	@ (8009ff0 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8009f9c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f9e:	4d15      	ldr	r5, [pc, #84]	@ (8009ff4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8009fa0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009fa2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa4:	6828      	ldr	r0, [r5, #0]
 8009fa6:	3004      	adds	r0, #4
 8009fa8:	f7ff f866 	bl	8009078 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fac:	1c73      	adds	r3, r6, #1
 8009fae:	d107      	bne.n	8009fc0 <prvAddCurrentTaskToDelayedList+0x28>
 8009fb0:	b137      	cbz	r7, 8009fc0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fb2:	6829      	ldr	r1, [r5, #0]
 8009fb4:	4810      	ldr	r0, [pc, #64]	@ (8009ff8 <prvAddCurrentTaskToDelayedList+0x60>)
 8009fb6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fbc:	f7ff b83a 	b.w	8009034 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fc0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fc2:	682b      	ldr	r3, [r5, #0]
 8009fc4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fc6:	d307      	bcc.n	8009fd8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8009ffc <prvAddCurrentTaskToDelayedList+0x64>)
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	6829      	ldr	r1, [r5, #0]
}
 8009fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fd2:	3104      	adds	r1, #4
 8009fd4:	f7ff b839 	b.w	800904a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fd8:	4b09      	ldr	r3, [pc, #36]	@ (800a000 <prvAddCurrentTaskToDelayedList+0x68>)
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	6829      	ldr	r1, [r5, #0]
 8009fde:	3104      	adds	r1, #4
 8009fe0:	f7ff f833 	bl	800904a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fe4:	4b07      	ldr	r3, [pc, #28]	@ (800a004 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	42a2      	cmp	r2, r4
 8009fea:	d900      	bls.n	8009fee <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8009fec:	601c      	str	r4, [r3, #0]
}
 8009fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff0:	240157c0 	.word	0x240157c0
 8009ff4:	24015c98 	.word	0x24015c98
 8009ff8:	240157c8 	.word	0x240157c8
 8009ffc:	24015808 	.word	0x24015808
 800a000:	2401580c 	.word	0x2401580c
 800a004:	240157a4 	.word	0x240157a4

0800a008 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a008:	4a06      	ldr	r2, [pc, #24]	@ (800a024 <prvResetNextTaskUnblockTime+0x1c>)
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	6819      	ldr	r1, [r3, #0]
 800a00e:	4b06      	ldr	r3, [pc, #24]	@ (800a028 <prvResetNextTaskUnblockTime+0x20>)
 800a010:	b919      	cbnz	r1, 800a01a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a012:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a016:	601a      	str	r2, [r3, #0]
}
 800a018:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a01e:	68d2      	ldr	r2, [r2, #12]
 800a020:	6852      	ldr	r2, [r2, #4]
 800a022:	e7f8      	b.n	800a016 <prvResetNextTaskUnblockTime+0xe>
 800a024:	2401580c 	.word	0x2401580c
 800a028:	240157a4 	.word	0x240157a4

0800a02c <prvDeleteTCB>:
	{
 800a02c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a02e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800a032:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a034:	b93b      	cbnz	r3, 800a046 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800a036:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a038:	f7fe ffb0 	bl	8008f9c <vPortFree>
				vPortFree( pxTCB );
 800a03c:	4620      	mov	r0, r4
	}
 800a03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a042:	f7fe bfab 	b.w	8008f9c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a046:	2b01      	cmp	r3, #1
 800a048:	d0f9      	beq.n	800a03e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d008      	beq.n	800a060 <prvDeleteTCB+0x34>
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	e7fe      	b.n	800a05e <prvDeleteTCB+0x32>
	}
 800a060:	bd10      	pop	{r4, pc}
	...

0800a064 <prvIdleTask>:
{
 800a064:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a066:	4c14      	ldr	r4, [pc, #80]	@ (800a0b8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a068:	4f14      	ldr	r7, [pc, #80]	@ (800a0bc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800a06a:	4d15      	ldr	r5, [pc, #84]	@ (800a0c0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	b983      	cbnz	r3, 800a092 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a070:	4b14      	ldr	r3, [pc, #80]	@ (800a0c4 <prvIdleTask+0x60>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d909      	bls.n	800a08c <prvIdleTask+0x28>
				taskYIELD();
 800a078:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a07c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a080:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800a08c:	f7f6 fb4c 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a090:	e7eb      	b.n	800a06a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800a092:	f7ff f867 	bl	8009164 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a09a:	1d30      	adds	r0, r6, #4
 800a09c:	f7fe ffec 	bl	8009078 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a0ac:	f7ff f87a 	bl	80091a4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7ff ffbb 	bl	800a02c <prvDeleteTCB>
 800a0b6:	e7d9      	b.n	800a06c <prvIdleTask+0x8>
 800a0b8:	240157dc 	.word	0x240157dc
 800a0bc:	240157e0 	.word	0x240157e0
 800a0c0:	240157c4 	.word	0x240157c4
 800a0c4:	24015838 	.word	0x24015838

0800a0c8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0cc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0d2:	21a5      	movs	r1, #165	@ 0xa5
 800a0d4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a0d6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0d8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a0da:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a0e0:	f021 f832 	bl	802b148 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a0e6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0e8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800a0ec:	b3b5      	cbz	r5, 800a15c <prvInitialiseNewTask.constprop.0+0x94>
 800a0ee:	1e6b      	subs	r3, r5, #1
 800a0f0:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800a0f4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a0fa:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800a0fe:	b109      	cbz	r1, 800a104 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a100:	42ab      	cmp	r3, r5
 800a102:	d1f8      	bne.n	800a0f6 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a104:	2300      	movs	r3, #0
 800a106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a10a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800a10c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a110:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a112:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a114:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a118:	bf28      	it	cs
 800a11a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a11c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a11e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a120:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a124:	f7fe ff83 	bl	800902e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a128:	f104 0018 	add.w	r0, r4, #24
 800a12c:	f7fe ff7f 	bl	800902e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800a130:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a134:	4642      	mov	r2, r8
 800a136:	4639      	mov	r1, r7
 800a138:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a13a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a13e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800a140:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a144:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a148:	f7fe ffe4 	bl	8009114 <pxPortInitialiseStack>
 800a14c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a14e:	f1b9 0f00 	cmp.w	r9, #0
 800a152:	d001      	beq.n	800a158 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a154:	f8c9 4000 	str.w	r4, [r9]
}
 800a158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a15c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800a160:	e7d3      	b.n	800a10a <prvInitialiseNewTask.constprop.0+0x42>

0800a162 <xTaskCreateStatic>:
	{
 800a162:	b570      	push	{r4, r5, r6, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a16a:	b945      	cbnz	r5, 800a17e <xTaskCreateStatic+0x1c>
 800a16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	e7fe      	b.n	800a17c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a17e:	b944      	cbnz	r4, 800a192 <xTaskCreateStatic+0x30>
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	e7fe      	b.n	800a190 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a192:	2660      	movs	r6, #96	@ 0x60
 800a194:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a196:	9e05      	ldr	r6, [sp, #20]
 800a198:	2e60      	cmp	r6, #96	@ 0x60
 800a19a:	d008      	beq.n	800a1ae <xTaskCreateStatic+0x4c>
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	e7fe      	b.n	800a1ac <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1ae:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1b0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1b2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1b4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1b8:	ad04      	add	r5, sp, #16
 800a1ba:	9402      	str	r4, [sp, #8]
 800a1bc:	9501      	str	r5, [sp, #4]
 800a1be:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a1c0:	9500      	str	r5, [sp, #0]
 800a1c2:	f7ff ff81 	bl	800a0c8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7ff fe68 	bl	8009e9c <prvAddNewTaskToReadyList>
	}
 800a1cc:	9804      	ldr	r0, [sp, #16]
 800a1ce:	b006      	add	sp, #24
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}

0800a1d2 <xTaskCreate>:
	{
 800a1d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1da:	0090      	lsls	r0, r2, #2
	{
 800a1dc:	4688      	mov	r8, r1
 800a1de:	4616      	mov	r6, r2
 800a1e0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1e2:	f7fe fe43 	bl	8008e6c <pvPortMalloc>
			if( pxStack != NULL )
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	b920      	cbnz	r0, 800a1f4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1ea:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a1ee:	b005      	add	sp, #20
 800a1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1f4:	2060      	movs	r0, #96	@ 0x60
 800a1f6:	f7fe fe39 	bl	8008e6c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	b198      	cbz	r0, 800a226 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1fe:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800a200:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a202:	4632      	mov	r2, r6
 800a204:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a206:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a20a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a20c:	9002      	str	r0, [sp, #8]
 800a20e:	4638      	mov	r0, r7
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	464b      	mov	r3, r9
 800a218:	f7ff ff56 	bl	800a0c8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7ff fe3d 	bl	8009e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a222:	2001      	movs	r0, #1
 800a224:	e7e3      	b.n	800a1ee <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800a226:	4628      	mov	r0, r5
 800a228:	f7fe feb8 	bl	8008f9c <vPortFree>
		if( pxNewTCB != NULL )
 800a22c:	e7dd      	b.n	800a1ea <xTaskCreate+0x18>
	...

0800a230 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a230:	4a02      	ldr	r2, [pc, #8]	@ (800a23c <vTaskSuspendAll+0xc>)
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	3301      	adds	r3, #1
 800a236:	6013      	str	r3, [r2, #0]
}
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	240157a0 	.word	0x240157a0

0800a240 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a240:	4b01      	ldr	r3, [pc, #4]	@ (800a248 <xTaskGetTickCount+0x8>)
 800a242:	6818      	ldr	r0, [r3, #0]
}
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	240157c0 	.word	0x240157c0

0800a24c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a24c:	4b3f      	ldr	r3, [pc, #252]	@ (800a34c <xTaskIncrementTick+0x100>)
 800a24e:	681b      	ldr	r3, [r3, #0]
{
 800a250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a254:	2b00      	cmp	r3, #0
 800a256:	d172      	bne.n	800a33e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a258:	4b3d      	ldr	r3, [pc, #244]	@ (800a350 <xTaskIncrementTick+0x104>)
 800a25a:	681c      	ldr	r4, [r3, #0]
 800a25c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800a25e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a260:	b9bc      	cbnz	r4, 800a292 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a262:	4b3c      	ldr	r3, [pc, #240]	@ (800a354 <xTaskIncrementTick+0x108>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	b142      	cbz	r2, 800a27c <xTaskIncrementTick+0x30>
 800a26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	e7fe      	b.n	800a27a <xTaskIncrementTick+0x2e>
 800a27c:	4a36      	ldr	r2, [pc, #216]	@ (800a358 <xTaskIncrementTick+0x10c>)
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	6810      	ldr	r0, [r2, #0]
 800a282:	6018      	str	r0, [r3, #0]
 800a284:	6011      	str	r1, [r2, #0]
 800a286:	4a35      	ldr	r2, [pc, #212]	@ (800a35c <xTaskIncrementTick+0x110>)
 800a288:	6813      	ldr	r3, [r2, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	f7ff febb 	bl	800a008 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a292:	4d33      	ldr	r5, [pc, #204]	@ (800a360 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800a294:	f04f 0b00 	mov.w	fp, #0
 800a298:	4e32      	ldr	r6, [pc, #200]	@ (800a364 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	4f32      	ldr	r7, [pc, #200]	@ (800a368 <xTaskIncrementTick+0x11c>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d212      	bcs.n	800a2c8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	2114      	movs	r1, #20
 800a2a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a2a8:	434a      	muls	r2, r1
 800a2aa:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800a2ac:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800a2ae:	4a2f      	ldr	r2, [pc, #188]	@ (800a36c <xTaskIncrementTick+0x120>)
 800a2b0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800a2b2:	bf28      	it	cs
 800a2b4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	bf18      	it	ne
 800a2bc:	f04f 0b01 	movne.w	fp, #1
}
 800a2c0:	4658      	mov	r0, fp
 800a2c2:	b003      	add	sp, #12
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2c8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800a354 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800a2cc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800a374 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2d4:	6812      	ldr	r2, [r2, #0]
 800a2d6:	b91a      	cbnz	r2, 800a2e0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	602a      	str	r2, [r5, #0]
					break;
 800a2de:	e7e0      	b.n	800a2a2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2e4:	68d2      	ldr	r2, [r2, #12]
 800a2e6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800a2ee:	428c      	cmp	r4, r1
 800a2f0:	d201      	bcs.n	800a2f6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800a2f2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2f4:	e7d5      	b.n	800a2a2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f6:	f108 0304 	add.w	r3, r8, #4
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	f7fe febb 	bl	8009078 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a302:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800a306:	b119      	cbz	r1, 800a310 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a308:	f108 0018 	add.w	r0, r8, #24
 800a30c:	f7fe feb4 	bl	8009078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a310:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800a314:	f8da 1000 	ldr.w	r1, [sl]
 800a318:	4288      	cmp	r0, r1
 800a31a:	d901      	bls.n	800a320 <xTaskIncrementTick+0xd4>
 800a31c:	f8ca 0000 	str.w	r0, [sl]
 800a320:	2314      	movs	r3, #20
 800a322:	9901      	ldr	r1, [sp, #4]
 800a324:	fb03 6000 	mla	r0, r3, r0, r6
 800a328:	f7fe fe84 	bl	8009034 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a32c:	6838      	ldr	r0, [r7, #0]
 800a32e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800a332:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800a334:	4291      	cmp	r1, r2
 800a336:	bf28      	it	cs
 800a338:	f04f 0b01 	movcs.w	fp, #1
 800a33c:	e7c8      	b.n	800a2d0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800a33e:	4a0c      	ldr	r2, [pc, #48]	@ (800a370 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800a340:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800a344:	6813      	ldr	r3, [r2, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	e7b9      	b.n	800a2c0 <xTaskIncrementTick+0x74>
 800a34c:	240157a0 	.word	0x240157a0
 800a350:	240157c0 	.word	0x240157c0
 800a354:	2401580c 	.word	0x2401580c
 800a358:	24015808 	.word	0x24015808
 800a35c:	240157ac 	.word	0x240157ac
 800a360:	240157a4 	.word	0x240157a4
 800a364:	24015838 	.word	0x24015838
 800a368:	24015c98 	.word	0x24015c98
 800a36c:	240157b0 	.word	0x240157b0
 800a370:	240157b4 	.word	0x240157b4
 800a374:	240157bc 	.word	0x240157bc

0800a378 <xTaskResumeAll>:
{
 800a378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800a37c:	4c30      	ldr	r4, [pc, #192]	@ (800a440 <xTaskResumeAll+0xc8>)
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	b943      	cbnz	r3, 800a394 <xTaskResumeAll+0x1c>
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	e7fe      	b.n	800a392 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800a394:	f7fe fee6 	bl	8009164 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a39e:	6824      	ldr	r4, [r4, #0]
 800a3a0:	b12c      	cbz	r4, 800a3ae <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a3a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a3a4:	f7fe fefe 	bl	80091a4 <vPortExitCritical>
}
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3ae:	4b25      	ldr	r3, [pc, #148]	@ (800a444 <xTaskResumeAll+0xcc>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0f5      	beq.n	800a3a2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3b6:	4d24      	ldr	r5, [pc, #144]	@ (800a448 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800a3b8:	4e24      	ldr	r6, [pc, #144]	@ (800a44c <xTaskResumeAll+0xd4>)
 800a3ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800a45c <xTaskResumeAll+0xe4>
 800a3be:	e01d      	b.n	800a3fc <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c0:	68eb      	ldr	r3, [r5, #12]
 800a3c2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3c4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3c6:	f104 0018 	add.w	r0, r4, #24
 800a3ca:	f7fe fe55 	bl	8009078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	f7fe fe52 	bl	8009078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a3d6:	6832      	ldr	r2, [r6, #0]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d900      	bls.n	800a3de <xTaskResumeAll+0x66>
 800a3dc:	6033      	str	r3, [r6, #0]
 800a3de:	2014      	movs	r0, #20
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	fb00 8003 	mla	r0, r0, r3, r8
 800a3e6:	f7fe fe25 	bl	8009034 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ea:	4b19      	ldr	r3, [pc, #100]	@ (800a450 <xTaskResumeAll+0xd8>)
 800a3ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d302      	bcc.n	800a3fc <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800a3f6:	4b17      	ldr	r3, [pc, #92]	@ (800a454 <xTaskResumeAll+0xdc>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1de      	bne.n	800a3c0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800a402:	b10c      	cbz	r4, 800a408 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800a404:	f7ff fe00 	bl	800a008 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a408:	4d13      	ldr	r5, [pc, #76]	@ (800a458 <xTaskResumeAll+0xe0>)
 800a40a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a40c:	b144      	cbz	r4, 800a420 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800a40e:	4e11      	ldr	r6, [pc, #68]	@ (800a454 <xTaskResumeAll+0xdc>)
 800a410:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a412:	f7ff ff1b 	bl	800a24c <xTaskIncrementTick>
 800a416:	b100      	cbz	r0, 800a41a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800a418:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a41a:	3c01      	subs	r4, #1
 800a41c:	d1f9      	bne.n	800a412 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800a41e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a420:	4b0c      	ldr	r3, [pc, #48]	@ (800a454 <xTaskResumeAll+0xdc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0bc      	beq.n	800a3a2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800a428:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a430:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a43c:	2401      	movs	r4, #1
 800a43e:	e7b1      	b.n	800a3a4 <xTaskResumeAll+0x2c>
 800a440:	240157a0 	.word	0x240157a0
 800a444:	240157c4 	.word	0x240157c4
 800a448:	240157f4 	.word	0x240157f4
 800a44c:	240157bc 	.word	0x240157bc
 800a450:	24015c98 	.word	0x24015c98
 800a454:	240157b0 	.word	0x240157b0
 800a458:	240157b4 	.word	0x240157b4
 800a45c:	24015838 	.word	0x24015838

0800a460 <vTaskDelay>:
	{
 800a460:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a462:	b950      	cbnz	r0, 800a47a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800a464:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a46c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	f3bf 8f6f 	isb	sy
	}
 800a478:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a47a:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a4 <vTaskDelay+0x44>)
 800a47c:	6819      	ldr	r1, [r3, #0]
 800a47e:	b141      	cbz	r1, 800a492 <vTaskDelay+0x32>
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	e7fe      	b.n	800a490 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a492:	f7ff fecd 	bl	800a230 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a496:	f7ff fd7f 	bl	8009f98 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a49a:	f7ff ff6d 	bl	800a378 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d0e0      	beq.n	800a464 <vTaskDelay+0x4>
 800a4a2:	e7e9      	b.n	800a478 <vTaskDelay+0x18>
 800a4a4:	240157a0 	.word	0x240157a0

0800a4a8 <vTaskSetApplicationTaskTag>:
	{
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	460d      	mov	r5, r1
		if( xTask == NULL )
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	b908      	cbnz	r0, 800a4b4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a4b0:	4b04      	ldr	r3, [pc, #16]	@ (800a4c4 <vTaskSetApplicationTaskTag+0x1c>)
 800a4b2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800a4b4:	f7fe fe56 	bl	8009164 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a4b8:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800a4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800a4be:	f7fe be71 	b.w	80091a4 <vPortExitCritical>
 800a4c2:	bf00      	nop
 800a4c4:	24015c98 	.word	0x24015c98

0800a4c8 <xTaskCallApplicationTaskHook>:
	{
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4608      	mov	r0, r1
		if( xTask == NULL )
 800a4cc:	b90b      	cbnz	r3, 800a4d2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800a4ce:	4b03      	ldr	r3, [pc, #12]	@ (800a4dc <xTaskCallApplicationTaskHook+0x14>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800a4d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d4:	b103      	cbz	r3, 800a4d8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800a4d6:	4718      	bx	r3
	}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4770      	bx	lr
 800a4dc:	24015c98 	.word	0x24015c98

0800a4e0 <vTaskStartScheduler>:
{
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4e4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4e6:	aa07      	add	r2, sp, #28
 800a4e8:	a906      	add	r1, sp, #24
 800a4ea:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4ec:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4f0:	f7fe fc7e 	bl	8008df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4f4:	9b05      	ldr	r3, [sp, #20]
 800a4f6:	9a07      	ldr	r2, [sp, #28]
 800a4f8:	9302      	str	r3, [sp, #8]
 800a4fa:	9b06      	ldr	r3, [sp, #24]
 800a4fc:	4919      	ldr	r1, [pc, #100]	@ (800a564 <vTaskStartScheduler+0x84>)
 800a4fe:	481a      	ldr	r0, [pc, #104]	@ (800a568 <vTaskStartScheduler+0x88>)
 800a500:	e9cd 4300 	strd	r4, r3, [sp]
 800a504:	4623      	mov	r3, r4
 800a506:	f7ff fe2c 	bl	800a162 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a50a:	b340      	cbz	r0, 800a55e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800a50c:	f000 fa84 	bl	800aa18 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a510:	2801      	cmp	r0, #1
 800a512:	d119      	bne.n	800a548 <vTaskStartScheduler+0x68>
 800a514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	4b10      	ldr	r3, [pc, #64]	@ (800a56c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800a52a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800a52c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <vTaskStartScheduler+0x90>)
 800a530:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a532:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <vTaskStartScheduler+0x94>)
 800a534:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800a536:	4b10      	ldr	r3, [pc, #64]	@ (800a578 <vTaskStartScheduler+0x98>)
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f7ff ffc5 	bl	800a4c8 <xTaskCallApplicationTaskHook>
}
 800a53e:	b008      	add	sp, #32
 800a540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800a544:	f7fe be9e 	b.w	8009284 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a548:	3001      	adds	r0, #1
 800a54a:	d108      	bne.n	800a55e <vTaskStartScheduler+0x7e>
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	e7fe      	b.n	800a55c <vTaskStartScheduler+0x7c>
}
 800a55e:	b008      	add	sp, #32
 800a560:	bd10      	pop	{r4, pc}
 800a562:	bf00      	nop
 800a564:	0802e510 	.word	0x0802e510
 800a568:	0800a065 	.word	0x0800a065
 800a56c:	240157a4 	.word	0x240157a4
 800a570:	240157b8 	.word	0x240157b8
 800a574:	240157c0 	.word	0x240157c0
 800a578:	24015c98 	.word	0x24015c98

0800a57c <vTaskSwitchContext>:
{
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a57e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f0 <vTaskSwitchContext+0x74>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f4 <vTaskSwitchContext+0x78>)
 800a584:	b112      	cbz	r2, 800a58c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a586:	2201      	movs	r2, #1
 800a588:	601a      	str	r2, [r3, #0]
}
 800a58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800a58c:	4c1a      	ldr	r4, [pc, #104]	@ (800a5f8 <vTaskSwitchContext+0x7c>)
 800a58e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a590:	4e1a      	ldr	r6, [pc, #104]	@ (800a5fc <vTaskSwitchContext+0x80>)
 800a592:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800a594:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	f7ff ff96 	bl	800a4c8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59c:	6832      	ldr	r2, [r6, #0]
 800a59e:	4918      	ldr	r1, [pc, #96]	@ (800a600 <vTaskSwitchContext+0x84>)
 800a5a0:	fb07 f302 	mul.w	r3, r7, r2
 800a5a4:	58cd      	ldr	r5, [r1, r3]
 800a5a6:	18c8      	adds	r0, r1, r3
 800a5a8:	b1ad      	cbz	r5, 800a5d6 <vTaskSwitchContext+0x5a>
 800a5aa:	6845      	ldr	r5, [r0, #4]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	686d      	ldr	r5, [r5, #4]
 800a5b0:	440b      	add	r3, r1
 800a5b2:	429d      	cmp	r5, r3
 800a5b4:	6045      	str	r5, [r0, #4]
 800a5b6:	bf04      	itt	eq
 800a5b8:	686b      	ldreq	r3, [r5, #4]
 800a5ba:	6043      	streq	r3, [r0, #4]
 800a5bc:	2314      	movs	r3, #20
 800a5be:	fb03 1102 	mla	r1, r3, r2, r1
 800a5c2:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800a5c4:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800a5cc:	6820      	ldr	r0, [r4, #0]
}
 800a5ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800a5d2:	f7ff bf79 	b.w	800a4c8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d6:	b942      	cbnz	r2, 800a5ea <vTaskSwitchContext+0x6e>
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	e7fe      	b.n	800a5e8 <vTaskSwitchContext+0x6c>
 800a5ea:	3a01      	subs	r2, #1
 800a5ec:	e7d8      	b.n	800a5a0 <vTaskSwitchContext+0x24>
 800a5ee:	bf00      	nop
 800a5f0:	240157a0 	.word	0x240157a0
 800a5f4:	240157b0 	.word	0x240157b0
 800a5f8:	24015c98 	.word	0x24015c98
 800a5fc:	240157bc 	.word	0x240157bc
 800a600:	24015838 	.word	0x24015838

0800a604 <vTaskPlaceOnEventList>:
{
 800a604:	b510      	push	{r4, lr}
 800a606:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800a608:	b940      	cbnz	r0, 800a61c <vTaskPlaceOnEventList+0x18>
 800a60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	e7fe      	b.n	800a61a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a61c:	4b05      	ldr	r3, [pc, #20]	@ (800a634 <vTaskPlaceOnEventList+0x30>)
 800a61e:	6819      	ldr	r1, [r3, #0]
 800a620:	3118      	adds	r1, #24
 800a622:	f7fe fd12 	bl	800904a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a626:	4620      	mov	r0, r4
 800a628:	2101      	movs	r1, #1
}
 800a62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a62e:	f7ff bcb3 	b.w	8009f98 <prvAddCurrentTaskToDelayedList>
 800a632:	bf00      	nop
 800a634:	24015c98 	.word	0x24015c98

0800a638 <vTaskPlaceOnEventListRestricted>:
	{
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	460d      	mov	r5, r1
 800a63c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800a63e:	b940      	cbnz	r0, 800a652 <vTaskPlaceOnEventListRestricted+0x1a>
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	e7fe      	b.n	800a650 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a652:	4b07      	ldr	r3, [pc, #28]	@ (800a670 <vTaskPlaceOnEventListRestricted+0x38>)
 800a654:	6819      	ldr	r1, [r3, #0]
 800a656:	3118      	adds	r1, #24
 800a658:	f7fe fcec 	bl	8009034 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800a65c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a65e:	4621      	mov	r1, r4
 800a660:	bf0c      	ite	eq
 800a662:	4628      	moveq	r0, r5
 800a664:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800a668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a66c:	f7ff bc94 	b.w	8009f98 <prvAddCurrentTaskToDelayedList>
 800a670:	24015c98 	.word	0x24015c98

0800a674 <xTaskRemoveFromEventList>:
{
 800a674:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a676:	68c3      	ldr	r3, [r0, #12]
 800a678:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a67a:	b944      	cbnz	r4, 800a68e <xTaskRemoveFromEventList+0x1a>
 800a67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	e7fe      	b.n	800a68c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a68e:	f104 0518 	add.w	r5, r4, #24
 800a692:	4628      	mov	r0, r5
 800a694:	f7fe fcf0 	bl	8009078 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a698:	4b11      	ldr	r3, [pc, #68]	@ (800a6e0 <xTaskRemoveFromEventList+0x6c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	b9d3      	cbnz	r3, 800a6d4 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a69e:	1d25      	adds	r5, r4, #4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f7fe fce9 	bl	8009078 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a6e4 <xTaskRemoveFromEventList+0x70>)
 800a6a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a6aa:	6811      	ldr	r1, [r2, #0]
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	d900      	bls.n	800a6b2 <xTaskRemoveFromEventList+0x3e>
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	2014      	movs	r0, #20
 800a6b4:	4a0c      	ldr	r2, [pc, #48]	@ (800a6e8 <xTaskRemoveFromEventList+0x74>)
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6bc:	f7fe fcba 	bl	8009034 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ec <xTaskRemoveFromEventList+0x78>)
 800a6c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d906      	bls.n	800a6da <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <xTaskRemoveFromEventList+0x7c>)
 800a6d0:	6018      	str	r0, [r3, #0]
}
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4807      	ldr	r0, [pc, #28]	@ (800a6f4 <xTaskRemoveFromEventList+0x80>)
 800a6d8:	e7f0      	b.n	800a6bc <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800a6da:	2000      	movs	r0, #0
	return xReturn;
 800a6dc:	e7f9      	b.n	800a6d2 <xTaskRemoveFromEventList+0x5e>
 800a6de:	bf00      	nop
 800a6e0:	240157a0 	.word	0x240157a0
 800a6e4:	240157bc 	.word	0x240157bc
 800a6e8:	24015838 	.word	0x24015838
 800a6ec:	24015c98 	.word	0x24015c98
 800a6f0:	240157b0 	.word	0x240157b0
 800a6f4:	240157f4 	.word	0x240157f4

0800a6f8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6f8:	4b03      	ldr	r3, [pc, #12]	@ (800a708 <vTaskInternalSetTimeOutState+0x10>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6fe:	4b03      	ldr	r3, [pc, #12]	@ (800a70c <vTaskInternalSetTimeOutState+0x14>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6043      	str	r3, [r0, #4]
}
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	240157ac 	.word	0x240157ac
 800a70c:	240157c0 	.word	0x240157c0

0800a710 <xTaskCheckForTimeOut>:
{
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800a714:	4605      	mov	r5, r0
 800a716:	b940      	cbnz	r0, 800a72a <xTaskCheckForTimeOut+0x1a>
 800a718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	e7fe      	b.n	800a728 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800a72a:	b941      	cbnz	r1, 800a73e <xTaskCheckForTimeOut+0x2e>
 800a72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	e7fe      	b.n	800a73c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800a73e:	f7fe fd11 	bl	8009164 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a742:	4b0f      	ldr	r3, [pc, #60]	@ (800a780 <xTaskCheckForTimeOut+0x70>)
 800a744:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	d010      	beq.n	800a76e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a74c:	480d      	ldr	r0, [pc, #52]	@ (800a784 <xTaskCheckForTimeOut+0x74>)
 800a74e:	682e      	ldr	r6, [r5, #0]
 800a750:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a752:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a754:	4286      	cmp	r6, r0
 800a756:	d001      	beq.n	800a75c <xTaskCheckForTimeOut+0x4c>
 800a758:	428a      	cmp	r2, r1
 800a75a:	d90f      	bls.n	800a77c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a75c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a75e:	4283      	cmp	r3, r0
 800a760:	d90a      	bls.n	800a778 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800a762:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a764:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800a766:	4413      	add	r3, r2
 800a768:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a76a:	f7ff ffc5 	bl	800a6f8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800a76e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a770:	f7fe fd18 	bl	80091a4 <vPortExitCritical>
}
 800a774:	4620      	mov	r0, r4
 800a776:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a77c:	2401      	movs	r4, #1
 800a77e:	e7f7      	b.n	800a770 <xTaskCheckForTimeOut+0x60>
 800a780:	240157c0 	.word	0x240157c0
 800a784:	240157ac 	.word	0x240157ac

0800a788 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a788:	4b01      	ldr	r3, [pc, #4]	@ (800a790 <vTaskMissedYield+0x8>)
 800a78a:	2201      	movs	r2, #1
 800a78c:	601a      	str	r2, [r3, #0]
}
 800a78e:	4770      	bx	lr
 800a790:	240157b0 	.word	0x240157b0

0800a794 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a794:	4b01      	ldr	r3, [pc, #4]	@ (800a79c <xTaskGetCurrentTaskHandle+0x8>)
 800a796:	6818      	ldr	r0, [r3, #0]
	}
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	24015c98 	.word	0x24015c98

0800a7a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a7a0:	4b05      	ldr	r3, [pc, #20]	@ (800a7b8 <xTaskGetSchedulerState+0x18>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	b133      	cbz	r3, 800a7b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a6:	4b05      	ldr	r3, [pc, #20]	@ (800a7bc <xTaskGetSchedulerState+0x1c>)
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	fab0 f080 	clz	r0, r0
 800a7ae:	0940      	lsrs	r0, r0, #5
 800a7b0:	0040      	lsls	r0, r0, #1
 800a7b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7b4:	2001      	movs	r0, #1
	}
 800a7b6:	4770      	bx	lr
 800a7b8:	240157b8 	.word	0x240157b8
 800a7bc:	240157a0 	.word	0x240157a0

0800a7c0 <xTaskPriorityInherit>:
	{
 800a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	b338      	cbz	r0, 800a816 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a7c6:	4d1a      	ldr	r5, [pc, #104]	@ (800a830 <xTaskPriorityInherit+0x70>)
 800a7c8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800a7ca:	682a      	ldr	r2, [r5, #0]
 800a7cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d226      	bcs.n	800a820 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7d2:	6982      	ldr	r2, [r0, #24]
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	db04      	blt.n	800a7e2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d8:	682a      	ldr	r2, [r5, #0]
 800a7da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a7dc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a7e0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a7e2:	2214      	movs	r2, #20
 800a7e4:	4e13      	ldr	r6, [pc, #76]	@ (800a834 <xTaskPriorityInherit+0x74>)
 800a7e6:	fb02 6303 	mla	r3, r2, r3, r6
 800a7ea:	6962      	ldr	r2, [r4, #20]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d113      	bne.n	800a818 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7f0:	1d27      	adds	r7, r4, #4
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f7fe fc40 	bl	8009078 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a7f8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a7fa:	4a0f      	ldr	r2, [pc, #60]	@ (800a838 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a7fe:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a800:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a802:	428b      	cmp	r3, r1
 800a804:	d900      	bls.n	800a808 <xTaskPriorityInherit+0x48>
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	2014      	movs	r0, #20
 800a80a:	4639      	mov	r1, r7
 800a80c:	fb00 6003 	mla	r0, r0, r3, r6
 800a810:	f7fe fc10 	bl	8009034 <vListInsertEnd>
				xReturn = pdTRUE;
 800a814:	2001      	movs	r0, #1
	}
 800a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a81e:	e7f9      	b.n	800a814 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	4298      	cmp	r0, r3
 800a828:	bf2c      	ite	cs
 800a82a:	2000      	movcs	r0, #0
 800a82c:	2001      	movcc	r0, #1
 800a82e:	e7f2      	b.n	800a816 <xTaskPriorityInherit+0x56>
 800a830:	24015c98 	.word	0x24015c98
 800a834:	24015838 	.word	0x24015838
 800a838:	240157bc 	.word	0x240157bc

0800a83c <xTaskPriorityDisinherit>:
	{
 800a83c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800a83e:	b908      	cbnz	r0, 800a844 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800a840:	2000      	movs	r0, #0
	}
 800a842:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a844:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b4 <xTaskPriorityDisinherit+0x78>)
 800a846:	681c      	ldr	r4, [r3, #0]
 800a848:	4284      	cmp	r4, r0
 800a84a:	d008      	beq.n	800a85e <xTaskPriorityDisinherit+0x22>
 800a84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	e7fe      	b.n	800a85c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a85e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a860:	b943      	cbnz	r3, 800a874 <xTaskPriorityDisinherit+0x38>
 800a862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	e7fe      	b.n	800a872 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a874:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800a876:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a878:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800a87a:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a87c:	4291      	cmp	r1, r2
 800a87e:	d0df      	beq.n	800a840 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1dd      	bne.n	800a840 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a884:	1d25      	adds	r5, r4, #4
 800a886:	4628      	mov	r0, r5
 800a888:	f7fe fbf6 	bl	8009078 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a88c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a88e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a892:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a894:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a896:	4a08      	ldr	r2, [pc, #32]	@ (800a8b8 <xTaskPriorityDisinherit+0x7c>)
 800a898:	6811      	ldr	r1, [r2, #0]
 800a89a:	428b      	cmp	r3, r1
 800a89c:	d900      	bls.n	800a8a0 <xTaskPriorityDisinherit+0x64>
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	4a06      	ldr	r2, [pc, #24]	@ (800a8bc <xTaskPriorityDisinherit+0x80>)
 800a8a2:	2014      	movs	r0, #20
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	fb00 2003 	mla	r0, r0, r3, r2
 800a8aa:	f7fe fbc3 	bl	8009034 <vListInsertEnd>
					xReturn = pdTRUE;
 800a8ae:	2001      	movs	r0, #1
		return xReturn;
 800a8b0:	e7c7      	b.n	800a842 <xTaskPriorityDisinherit+0x6>
 800a8b2:	bf00      	nop
 800a8b4:	24015c98 	.word	0x24015c98
 800a8b8:	240157bc 	.word	0x240157bc
 800a8bc:	24015838 	.word	0x24015838

0800a8c0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800a8c0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d042      	beq.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8c8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a8ca:	b942      	cbnz	r2, 800a8de <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	e7fe      	b.n	800a8dc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a8de:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	bf38      	it	cc
 800a8e4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a8e6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800a8e8:	428b      	cmp	r3, r1
 800a8ea:	d030      	beq.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a8ec:	2a01      	cmp	r2, #1
 800a8ee:	d12e      	bne.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800a8f0:	4a17      	ldr	r2, [pc, #92]	@ (800a950 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800a8f2:	6812      	ldr	r2, [r2, #0]
 800a8f4:	4282      	cmp	r2, r0
 800a8f6:	d108      	bne.n	800a90a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	e7fe      	b.n	800a908 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a90a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a90c:	4d11      	ldr	r5, [pc, #68]	@ (800a954 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a90e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a910:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800a914:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a916:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91a:	bfa8      	it	ge
 800a91c:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a920:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a922:	bfa8      	it	ge
 800a924:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a926:	429a      	cmp	r2, r3
 800a928:	d111      	bne.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a92a:	1d06      	adds	r6, r0, #4
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7fe fba3 	bl	8009078 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a932:	4a09      	ldr	r2, [pc, #36]	@ (800a958 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a934:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a936:	6811      	ldr	r1, [r2, #0]
 800a938:	428b      	cmp	r3, r1
 800a93a:	d900      	bls.n	800a93e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	2014      	movs	r0, #20
 800a940:	4631      	mov	r1, r6
 800a942:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800a946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800a94a:	f7fe bb73 	b.w	8009034 <vListInsertEnd>
	}
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	24015c98 	.word	0x24015c98
 800a954:	24015838 	.word	0x24015838
 800a958:	240157bc 	.word	0x240157bc

0800a95c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a95c:	4b04      	ldr	r3, [pc, #16]	@ (800a970 <pvTaskIncrementMutexHeldCount+0x14>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	b11a      	cbz	r2, 800a96a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a962:	6819      	ldr	r1, [r3, #0]
 800a964:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800a966:	3201      	adds	r2, #1
 800a968:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800a96a:	6818      	ldr	r0, [r3, #0]
	}
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	24015c98 	.word	0x24015c98

0800a974 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800a974:	4291      	cmp	r1, r2
{
 800a976:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a978:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a97a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800a97c:	d80a      	bhi.n	800a994 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	6983      	ldr	r3, [r0, #24]
 800a982:	429a      	cmp	r2, r3
 800a984:	d20d      	bcs.n	800a9a2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a986:	1d01      	adds	r1, r0, #4
 800a988:	4b07      	ldr	r3, [pc, #28]	@ (800a9a8 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	f7fe fb5d 	bl	800904a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a990:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800a992:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a994:	429a      	cmp	r2, r3
 800a996:	d201      	bcs.n	800a99c <prvInsertTimerInActiveList+0x28>
 800a998:	4299      	cmp	r1, r3
 800a99a:	d202      	bcs.n	800a9a2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a99c:	1d01      	adds	r1, r0, #4
 800a99e:	4b03      	ldr	r3, [pc, #12]	@ (800a9ac <prvInsertTimerInActiveList+0x38>)
 800a9a0:	e7f3      	b.n	800a98a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800a9a2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a9a4:	e7f5      	b.n	800a992 <prvInsertTimerInActiveList+0x1e>
 800a9a6:	bf00      	nop
 800a9a8:	24015d98 	.word	0x24015d98
 800a9ac:	24015d9c 	.word	0x24015d9c

0800a9b0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800a9b2:	4c11      	ldr	r4, [pc, #68]	@ (800a9f8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800a9b4:	f7fe fbd6 	bl	8009164 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800a9b8:	6825      	ldr	r5, [r4, #0]
 800a9ba:	b9bd      	cbnz	r5, 800a9ec <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9bc:	4f0f      	ldr	r7, [pc, #60]	@ (800a9fc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800a9be:	4e10      	ldr	r6, [pc, #64]	@ (800aa00 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7fe fb29 	bl	8009018 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7fe fb26 	bl	8009018 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9ce:	4a0e      	ldr	r2, [pc, #56]	@ (800aa08 <prvCheckForValidListAndQueue+0x58>)
 800a9d0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800a9d2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9d4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa0c <prvCheckForValidListAndQueue+0x5c>)
 800a9d8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9da:	4b0d      	ldr	r3, [pc, #52]	@ (800aa10 <prvCheckForValidListAndQueue+0x60>)
 800a9dc:	9500      	str	r5, [sp, #0]
 800a9de:	f7fe fdcb 	bl	8009578 <xQueueGenericCreateStatic>
 800a9e2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9e4:	b110      	cbz	r0, 800a9ec <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9e6:	490b      	ldr	r1, [pc, #44]	@ (800aa14 <prvCheckForValidListAndQueue+0x64>)
 800a9e8:	f7ff f9f6 	bl	8009dd8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800a9ec:	b003      	add	sp, #12
 800a9ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800a9f2:	f7fe bbd7 	b.w	80091a4 <vPortExitCritical>
 800a9f6:	bf00      	nop
 800a9f8:	24015d94 	.word	0x24015d94
 800a9fc:	24015db4 	.word	0x24015db4
 800aa00:	24015da0 	.word	0x24015da0
 800aa04:	24015d9c 	.word	0x24015d9c
 800aa08:	24015cec 	.word	0x24015cec
 800aa0c:	24015d98 	.word	0x24015d98
 800aa10:	24015c9c 	.word	0x24015c9c
 800aa14:	0802e515 	.word	0x0802e515

0800aa18 <xTimerCreateTimerTask>:
{
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800aa1c:	f7ff ffc8 	bl	800a9b0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800aa20:	4b12      	ldr	r3, [pc, #72]	@ (800aa6c <xTimerCreateTimerTask+0x54>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	b1b3      	cbz	r3, 800aa54 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa26:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa28:	aa07      	add	r2, sp, #28
 800aa2a:	a906      	add	r1, sp, #24
 800aa2c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa2e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa32:	f7fe f9e9 	bl	8008e08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa36:	9b05      	ldr	r3, [sp, #20]
 800aa38:	9a07      	ldr	r2, [sp, #28]
 800aa3a:	9302      	str	r3, [sp, #8]
 800aa3c:	9b06      	ldr	r3, [sp, #24]
 800aa3e:	490c      	ldr	r1, [pc, #48]	@ (800aa70 <xTimerCreateTimerTask+0x58>)
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	2302      	movs	r3, #2
 800aa44:	480b      	ldr	r0, [pc, #44]	@ (800aa74 <xTimerCreateTimerTask+0x5c>)
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	4623      	mov	r3, r4
 800aa4a:	f7ff fb8a 	bl	800a162 <xTaskCreateStatic>
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <xTimerCreateTimerTask+0x60>)
 800aa50:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800aa52:	b940      	cbnz	r0, 800aa66 <xTimerCreateTimerTask+0x4e>
 800aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800aa64:	e7fe      	b.n	800aa64 <xTimerCreateTimerTask+0x4c>
}
 800aa66:	2001      	movs	r0, #1
 800aa68:	b008      	add	sp, #32
 800aa6a:	bd10      	pop	{r4, pc}
 800aa6c:	24015d94 	.word	0x24015d94
 800aa70:	0802e51a 	.word	0x0802e51a
 800aa74:	0800ab75 	.word	0x0800ab75
 800aa78:	24015d90 	.word	0x24015d90

0800aa7c <xTimerGenericCommand>:
{
 800aa7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aa7e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800aa80:	4604      	mov	r4, r0
{
 800aa82:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800aa84:	b940      	cbnz	r0, 800aa98 <xTimerGenericCommand+0x1c>
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	e7fe      	b.n	800aa96 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800aa98:	4d0c      	ldr	r5, [pc, #48]	@ (800aacc <xTimerGenericCommand+0x50>)
 800aa9a:	6828      	ldr	r0, [r5, #0]
 800aa9c:	b178      	cbz	r0, 800aabe <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa9e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aaa0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aaa2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aaa6:	dc0c      	bgt.n	800aac2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaa8:	f7ff fe7a 	bl	800a7a0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aaac:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaae:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aab0:	4669      	mov	r1, sp
 800aab2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aab4:	bf0c      	ite	eq
 800aab6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aab8:	461a      	movne	r2, r3
 800aaba:	f7fe fe12 	bl	80096e2 <xQueueGenericSend>
}
 800aabe:	b004      	add	sp, #16
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aac2:	2300      	movs	r3, #0
 800aac4:	4669      	mov	r1, sp
 800aac6:	f7fe ff0f 	bl	80098e8 <xQueueGenericSendFromISR>
 800aaca:	e7f8      	b.n	800aabe <xTimerGenericCommand+0x42>
 800aacc:	24015d94 	.word	0x24015d94

0800aad0 <prvSampleTimeNow>:
{
 800aad0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800aad4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800ab70 <prvSampleTimeNow+0xa0>
{
 800aad8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800aada:	f7ff fbb1 	bl	800a240 <xTaskGetTickCount>
 800aade:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800aae0:	f8d8 3000 	ldr.w	r3, [r8]
 800aae4:	4283      	cmp	r3, r0
 800aae6:	d909      	bls.n	800aafc <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aae8:	4f1f      	ldr	r7, [pc, #124]	@ (800ab68 <prvSampleTimeNow+0x98>)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	b96a      	cbnz	r2, 800ab0c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800aaf0:	4a1e      	ldr	r2, [pc, #120]	@ (800ab6c <prvSampleTimeNow+0x9c>)
 800aaf2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800aaf8:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800aafa:	e000      	b.n	800aafe <prvSampleTimeNow+0x2e>
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800ab00:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800ab02:	f8c8 5000 	str.w	r5, [r8]
}
 800ab06:	b002      	add	sp, #8
 800ab08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab0c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab0e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab10:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab14:	f104 0a04 	add.w	sl, r4, #4
 800ab18:	4650      	mov	r0, sl
 800ab1a:	f7fe faad 	bl	8009078 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab1e:	6a23      	ldr	r3, [r4, #32]
 800ab20:	4620      	mov	r0, r4
 800ab22:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab24:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ab28:	075b      	lsls	r3, r3, #29
 800ab2a:	d5de      	bpl.n	800aaea <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab2c:	69a3      	ldr	r3, [r4, #24]
 800ab2e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800ab30:	4599      	cmp	r9, r3
 800ab32:	d206      	bcs.n	800ab42 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab34:	4651      	mov	r1, sl
 800ab36:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab38:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab3a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab3c:	f7fe fa85 	bl	800904a <vListInsert>
 800ab40:	e7d3      	b.n	800aaea <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab42:	2300      	movs	r3, #0
 800ab44:	464a      	mov	r2, r9
 800ab46:	4620      	mov	r0, r4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	f7ff ff96 	bl	800aa7c <xTimerGenericCommand>
				configASSERT( xResult );
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d1ca      	bne.n	800aaea <prvSampleTimeNow+0x1a>
 800ab54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	e7fe      	b.n	800ab64 <prvSampleTimeNow+0x94>
 800ab66:	bf00      	nop
 800ab68:	24015d9c 	.word	0x24015d9c
 800ab6c:	24015d98 	.word	0x24015d98
 800ab70:	24015d8c 	.word	0x24015d8c

0800ab74 <prvTimerTask>:
{
 800ab74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab78:	4d6e      	ldr	r5, [pc, #440]	@ (800ad34 <prvTimerTask+0x1c0>)
{
 800ab7a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab7c:	4e6e      	ldr	r6, [pc, #440]	@ (800ad38 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab7e:	682b      	ldr	r3, [r5, #0]
 800ab80:	f8d3 8000 	ldr.w	r8, [r3]
 800ab84:	f1b8 0f00 	cmp.w	r8, #0
 800ab88:	d035      	beq.n	800abf6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab8a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab8c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab8e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800ab92:	f7ff fb4d 	bl	800a230 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab96:	a804      	add	r0, sp, #16
 800ab98:	f7ff ff9a 	bl	800aad0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ab9c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab9e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d169      	bne.n	800ac78 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aba4:	2c00      	cmp	r4, #0
 800aba6:	d14c      	bne.n	800ac42 <prvTimerTask+0xce>
 800aba8:	4540      	cmp	r0, r8
 800abaa:	d350      	bcc.n	800ac4e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800abac:	f7ff fbe4 	bl	800a378 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abb6:	1d38      	adds	r0, r7, #4
 800abb8:	f7fe fa5e 	bl	8009078 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abc0:	0758      	lsls	r0, r3, #29
 800abc2:	d51a      	bpl.n	800abfa <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abc4:	69b9      	ldr	r1, [r7, #24]
 800abc6:	4643      	mov	r3, r8
 800abc8:	464a      	mov	r2, r9
 800abca:	4638      	mov	r0, r7
 800abcc:	4441      	add	r1, r8
 800abce:	f7ff fed1 	bl	800a974 <prvInsertTimerInActiveList>
 800abd2:	b1b0      	cbz	r0, 800ac02 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abd4:	4623      	mov	r3, r4
 800abd6:	4642      	mov	r2, r8
 800abd8:	4621      	mov	r1, r4
 800abda:	4638      	mov	r0, r7
 800abdc:	9400      	str	r4, [sp, #0]
 800abde:	f7ff ff4d 	bl	800aa7c <xTimerGenericCommand>
			configASSERT( xResult );
 800abe2:	b970      	cbnz	r0, 800ac02 <prvTimerTask+0x8e>
 800abe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	e7fe      	b.n	800abf4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abf6:	2401      	movs	r4, #1
 800abf8:	e7cb      	b.n	800ab92 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abfa:	f023 0301 	bic.w	r3, r3, #1
 800abfe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	4638      	mov	r0, r7
 800ac06:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac08:	2200      	movs	r2, #0
 800ac0a:	a904      	add	r1, sp, #16
 800ac0c:	6830      	ldr	r0, [r6, #0]
 800ac0e:	f7fe ff19 	bl	8009a44 <xQueueReceive>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0b3      	beq.n	800ab7e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac16:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac18:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	db2f      	blt.n	800ac7e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac1e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac20:	6963      	ldr	r3, [r4, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d132      	bne.n	800ac8c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac26:	a803      	add	r0, sp, #12
 800ac28:	f7ff ff52 	bl	800aad0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ac2c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac2e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800ac30:	2b09      	cmp	r3, #9
 800ac32:	d8e9      	bhi.n	800ac08 <prvTimerTask+0x94>
 800ac34:	e8df f003 	tbb	[pc, r3]
 800ac38:	572e2e2e 	.word	0x572e2e2e
 800ac3c:	2e2e765e 	.word	0x2e2e765e
 800ac40:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac42:	4b3e      	ldr	r3, [pc, #248]	@ (800ad3c <prvTimerTask+0x1c8>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681c      	ldr	r4, [r3, #0]
 800ac48:	fab4 f484 	clz	r4, r4
 800ac4c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac4e:	4622      	mov	r2, r4
 800ac50:	eba8 0109 	sub.w	r1, r8, r9
 800ac54:	6830      	ldr	r0, [r6, #0]
 800ac56:	f7ff f8fe 	bl	8009e56 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac5a:	f7ff fb8d 	bl	800a378 <xTaskResumeAll>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d1d2      	bne.n	800ac08 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800ac62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ac66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	e7c7      	b.n	800ac08 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800ac78:	f7ff fb7e 	bl	800a378 <xTaskResumeAll>
}
 800ac7c:	e7c4      	b.n	800ac08 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac7e:	9b05      	ldr	r3, [sp, #20]
 800ac80:	9907      	ldr	r1, [sp, #28]
 800ac82:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac84:	9b04      	ldr	r3, [sp, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	dbbe      	blt.n	800ac08 <prvTimerTask+0x94>
 800ac8a:	e7c8      	b.n	800ac1e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac8c:	1d20      	adds	r0, r4, #4
 800ac8e:	f7fe f9f3 	bl	8009078 <uxListRemove>
 800ac92:	e7c8      	b.n	800ac26 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac94:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac98:	4620      	mov	r0, r4
 800ac9a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac9c:	f043 0301 	orr.w	r3, r3, #1
 800aca0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aca4:	9b05      	ldr	r3, [sp, #20]
 800aca6:	4419      	add	r1, r3
 800aca8:	f7ff fe64 	bl	800a974 <prvInsertTimerInActiveList>
 800acac:	2800      	cmp	r0, #0
 800acae:	d0ab      	beq.n	800ac08 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acb0:	6a23      	ldr	r3, [r4, #32]
 800acb2:	4620      	mov	r0, r4
 800acb4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acb6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800acba:	0759      	lsls	r1, r3, #29
 800acbc:	d5a4      	bpl.n	800ac08 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800acbe:	69a2      	ldr	r2, [r4, #24]
 800acc0:	2300      	movs	r3, #0
 800acc2:	9905      	ldr	r1, [sp, #20]
 800acc4:	4620      	mov	r0, r4
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	440a      	add	r2, r1
 800acca:	4619      	mov	r1, r3
 800accc:	f7ff fed6 	bl	800aa7c <xTimerGenericCommand>
							configASSERT( xResult );
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d199      	bne.n	800ac08 <prvTimerTask+0x94>
 800acd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	e7fe      	b.n	800ace4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ace6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acea:	f023 0301 	bic.w	r3, r3, #1
 800acee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800acf2:	e789      	b.n	800ac08 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acf4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800acf8:	f043 0301 	orr.w	r3, r3, #1
 800acfc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad00:	9905      	ldr	r1, [sp, #20]
 800ad02:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad04:	b941      	cbnz	r1, 800ad18 <prvTimerTask+0x1a4>
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	e7fe      	b.n	800ad16 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad18:	4603      	mov	r3, r0
 800ad1a:	4401      	add	r1, r0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f7ff fe29 	bl	800a974 <prvInsertTimerInActiveList>
					break;
 800ad22:	e771      	b.n	800ac08 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad24:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ad28:	079a      	lsls	r2, r3, #30
 800ad2a:	d4de      	bmi.n	800acea <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f7fe f935 	bl	8008f9c <vPortFree>
 800ad32:	e769      	b.n	800ac08 <prvTimerTask+0x94>
 800ad34:	24015d9c 	.word	0x24015d9c
 800ad38:	24015d94 	.word	0x24015d94
 800ad3c:	24015d98 	.word	0x24015d98

0800ad40 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 800ad40:	6843      	ldr	r3, [r0, #4]
{
 800ad42:	b510      	push	{r4, lr}
 800ad44:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800ad46:	b14b      	cbz	r3, 800ad5c <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800ad48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	b12b      	cbz	r3, 800ad5e <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 800ad52:	23c8      	movs	r3, #200	@ 0xc8
 800ad54:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 800ad5c:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 800ad5e:	2364      	movs	r3, #100	@ 0x64
 800ad60:	6163      	str	r3, [r4, #20]
 800ad62:	e7fb      	b.n	800ad5c <jpeg_abort+0x1c>

0800ad64 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 800ad64:	6843      	ldr	r3, [r0, #4]
{
 800ad66:	b510      	push	{r4, lr}
 800ad68:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800ad6a:	b10b      	cbz	r3, 800ad70 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6e:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800ad70:	2300      	movs	r3, #0
 800ad72:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 800ad74:	6163      	str	r3, [r4, #20]
}
 800ad76:	bd10      	pop	{r4, pc}

0800ad78 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800ad78:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800ad7a:	6843      	ldr	r3, [r0, #4]
 800ad7c:	2284      	movs	r2, #132	@ 0x84
 800ad7e:	2100      	movs	r1, #0
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  return tbl;
}
 800ad8a:	bd08      	pop	{r3, pc}

0800ad8c <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800ad8c:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800ad8e:	6843      	ldr	r3, [r0, #4]
 800ad90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ad94:	2100      	movs	r1, #0
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
  return tbl;
}
 800ada0:	bd08      	pop	{r3, pc}

0800ada2 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800ada2:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 800ada4:	2950      	cmp	r1, #80	@ 0x50
{
 800ada6:	b570      	push	{r4, r5, r6, lr}
 800ada8:	4604      	mov	r4, r0
 800adaa:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800adac:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800adae:	d007      	beq.n	800adc0 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800adb0:	6803      	ldr	r3, [r0, #0]
 800adb2:	260d      	movs	r6, #13
 800adb4:	2250      	movs	r2, #80	@ 0x50
 800adb6:	61d9      	str	r1, [r3, #28]
 800adb8:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800adc0:	f5b5 7ff4 	cmp.w	r5, #488	@ 0x1e8
 800adc4:	d009      	beq.n	800adda <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	2116      	movs	r1, #22
 800adca:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800adce:	4620      	mov	r0, r4
 800add0:	61dd      	str	r5, [r3, #28]
 800add2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800adda:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800adde:	2100      	movs	r1, #0
 800ade0:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 800ade2:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 800ade4:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800ade6:	f020 f9af 	bl	802b148 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800adea:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 800adec:	4620      	mov	r0, r4
    cinfo->err = err;
 800adee:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 800adf0:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 800adf2:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 800adf4:	f00b fdbc 	bl	8016970 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800adf8:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800adfa:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 800adfc:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 800adfe:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800ae00:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800ae04:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800ae08:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800ae0c:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800ae10:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800ae14:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800ae18:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800ae1c:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  cinfo->marker_list = NULL;
 800ae20:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 800ae24:	e9c4 3329 	strd	r3, r3, [r4, #164]	@ 0xa4
 800ae28:	e9c4 332b 	strd	r3, r3, [r4, #172]	@ 0xac
  jinit_marker_reader(cinfo);
 800ae2c:	f005 f810 	bl	800fe50 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 800ae30:	4620      	mov	r0, r4
 800ae32:	f003 fd23 	bl	800e87c <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800ae36:	23c8      	movs	r3, #200	@ 0xc8
 800ae38:	6163      	str	r3, [r4, #20]
}
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}

0800ae3c <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800ae3c:	f7ff bf92 	b.w	800ad64 <jpeg_destroy>

0800ae40 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 800ae40:	6942      	ldr	r2, [r0, #20]
 800ae42:	f1a2 03c8 	sub.w	r3, r2, #200	@ 0xc8
{
 800ae46:	b510      	push	{r4, lr}
 800ae48:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800ae4a:	2b0a      	cmp	r3, #10
 800ae4c:	f200 8099 	bhi.w	800af82 <jpeg_consume_input+0x142>
 800ae50:	e8df f003 	tbb	[pc, r3]
 800ae54:	91671006 	.word	0x91671006
 800ae58:	91919191 	.word	0x91919191
 800ae5c:	9791      	.short	0x9791
 800ae5e:	91          	.byte	0x91
 800ae5f:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 800ae60:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800ae68:	69a3      	ldr	r3, [r4, #24]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 800ae70:	23c9      	movs	r3, #201	@ 0xc9
 800ae72:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ae74:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800ae78:	4620      	mov	r0, r4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800ae7e:	2801      	cmp	r0, #1
 800ae80:	d150      	bne.n	800af24 <jpeg_consume_input+0xe4>
  switch (cinfo->num_components) {
 800ae82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d005      	beq.n	800ae94 <jpeg_consume_input+0x54>
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d05d      	beq.n	800af48 <jpeg_consume_input+0x108>
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d170      	bne.n	800af72 <jpeg_consume_input+0x132>
 800ae90:	461a      	mov	r2, r3
 800ae92:	e023      	b.n	800aedc <jpeg_consume_input+0x9c>
    if (cinfo->saw_JFIF_marker) {
 800ae94:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 800ae98:	b9f3      	cbnz	r3, 800aed8 <jpeg_consume_input+0x98>
    } else if (cinfo->saw_Adobe_marker) {
 800ae9a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800ae9e:	b17b      	cbz	r3, 800aec0 <jpeg_consume_input+0x80>
      switch (cinfo->Adobe_transform) {
 800aea0:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d04d      	beq.n	800af44 <jpeg_consume_input+0x104>
 800aea8:	2a01      	cmp	r2, #1
 800aeaa:	d015      	beq.n	800aed8 <jpeg_consume_input+0x98>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	2174      	movs	r1, #116	@ 0x74
      switch (cinfo->Adobe_transform) {
 800aeb0:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f04f 31ff 	mov.w	r1, #4294967295
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800aeba:	4620      	mov	r0, r4
 800aebc:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800aebe:	e00b      	b.n	800aed8 <jpeg_consume_input+0x98>
      int cid0 = cinfo->comp_info[0].component_id;
 800aec0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800aec4:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 800aec6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800aec8:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800aeca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800aece:	d12a      	bne.n	800af26 <jpeg_consume_input+0xe6>
 800aed0:	2902      	cmp	r1, #2
 800aed2:	d12e      	bne.n	800af32 <jpeg_consume_input+0xf2>
 800aed4:	2a03      	cmp	r2, #3
 800aed6:	d12c      	bne.n	800af32 <jpeg_consume_input+0xf2>
{
 800aed8:	2303      	movs	r3, #3
    break;
 800aeda:	2202      	movs	r2, #2
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800aedc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  cinfo->dither_mode = JDITHER_FS;
 800aee0:	2102      	movs	r1, #2
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800aee2:	f8d4 31a8 	ldr.w	r3, [r4, #424]	@ 0x1a8
    cinfo->out_color_space = JCS_GRAYSCALE;
 800aee6:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  cinfo->output_gamma = 1.0;
 800aeea:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800aeec:	f884 1058 	strb.w	r1, [r4, #88]	@ 0x58
  cinfo->scale_denom = cinfo->block_size;
 800aef0:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  cinfo->output_gamma = 1.0;
 800aef4:	4b27      	ldr	r3, [pc, #156]	@ (800af94 <jpeg_consume_input+0x154>)
 800aef6:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
  cinfo->buffered_image = FALSE;
 800aefa:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 800aefc:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800aefe:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800af02:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  cinfo->quantize_colors = FALSE;
 800af06:	6563      	str	r3, [r4, #84]	@ 0x54
  cinfo->two_pass_quantize = TRUE;
 800af08:	65e2      	str	r2, [r4, #92]	@ 0x5c
  cinfo->colormap = NULL;
 800af0a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  cinfo->enable_2pass_quant = FALSE;
 800af0e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  cinfo->do_block_smoothing = TRUE;
 800af10:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  cinfo->enable_external_quant = FALSE;
 800af14:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
  cinfo->desired_number_of_colors = 256;
 800af18:	f44f 7280 	mov.w	r2, #256	@ 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 800af1c:	23ca      	movs	r3, #202	@ 0xca
  cinfo->desired_number_of_colors = 256;
 800af1e:	6622      	str	r2, [r4, #96]	@ 0x60
      cinfo->global_state = DSTATE_READY;
 800af20:	6163      	str	r3, [r4, #20]
  switch (cinfo->num_components) {
 800af22:	2001      	movs	r0, #1
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800af24:	bd10      	pop	{r4, pc}
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800af26:	2852      	cmp	r0, #82	@ 0x52
 800af28:	d103      	bne.n	800af32 <jpeg_consume_input+0xf2>
 800af2a:	2947      	cmp	r1, #71	@ 0x47
 800af2c:	d101      	bne.n	800af32 <jpeg_consume_input+0xf2>
 800af2e:	2a42      	cmp	r2, #66	@ 0x42
 800af30:	d008      	beq.n	800af44 <jpeg_consume_input+0x104>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	621a      	str	r2, [r3, #32]
 800af36:	2271      	movs	r2, #113	@ 0x71
 800af38:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800af3c:	615a      	str	r2, [r3, #20]
 800af3e:	2101      	movs	r1, #1
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	e7ba      	b.n	800aeba <jpeg_consume_input+0x7a>
 800af44:	2302      	movs	r3, #2
 800af46:	e7c8      	b.n	800aeda <jpeg_consume_input+0x9a>
    if (cinfo->saw_Adobe_marker) {
 800af48:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 800af4c:	b12a      	cbz	r2, 800af5a <jpeg_consume_input+0x11a>
      switch (cinfo->Adobe_transform) {
 800af4e:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 800af52:	b112      	cbz	r2, 800af5a <jpeg_consume_input+0x11a>
 800af54:	2a02      	cmp	r2, #2
 800af56:	d102      	bne.n	800af5e <jpeg_consume_input+0x11e>
 800af58:	2305      	movs	r3, #5
    break;
 800af5a:	2204      	movs	r2, #4
 800af5c:	e7be      	b.n	800aedc <jpeg_consume_input+0x9c>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	2174      	movs	r1, #116	@ 0x74
 800af62:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800af64:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f04f 31ff 	mov.w	r1, #4294967295
 800af6e:	4798      	blx	r3
	break;
 800af70:	e7f2      	b.n	800af58 <jpeg_consume_input+0x118>
  switch (cinfo->num_components) {
 800af72:	2300      	movs	r3, #0
 800af74:	e78c      	b.n	800ae90 <jpeg_consume_input+0x50>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800af76:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
}
 800af7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800af82:	6803      	ldr	r3, [r0, #0]
 800af84:	2115      	movs	r1, #21
 800af86:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4798      	blx	r3
  int retcode = JPEG_SUSPENDED;
 800af8e:	2000      	movs	r0, #0
  return retcode;
 800af90:	e7c8      	b.n	800af24 <jpeg_consume_input+0xe4>
 800af92:	bf00      	nop
 800af94:	3ff00000 	.word	0x3ff00000

0800af98 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 800af98:	6942      	ldr	r2, [r0, #20]
 800af9a:	f1a2 03c8 	sub.w	r3, r2, #200	@ 0xc8
 800af9e:	2b01      	cmp	r3, #1
{
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	4604      	mov	r4, r0
 800afa4:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800afa6:	d905      	bls.n	800afb4 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800afa8:	6803      	ldr	r3, [r0, #0]
 800afaa:	2115      	movs	r1, #21
 800afac:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7ff ff43 	bl	800ae40 <jpeg_consume_input>
  switch (retcode) {
 800afba:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800afbc:	4605      	mov	r5, r0
  switch (retcode) {
 800afbe:	d00b      	beq.n	800afd8 <jpeg_read_header+0x40>
 800afc0:	2802      	cmp	r0, #2
 800afc2:	d109      	bne.n	800afd8 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 800afc4:	b12e      	cbz	r6, 800afd2 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	2235      	movs	r2, #53	@ 0x35
 800afca:	4620      	mov	r0, r4
 800afcc:	615a      	str	r2, [r3, #20]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 800afd2:	4620      	mov	r0, r4
 800afd4:	f7ff feb4 	bl	800ad40 <jpeg_abort>
}
 800afd8:	4628      	mov	r0, r5
 800afda:	bd70      	pop	{r4, r5, r6, pc}

0800afdc <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800afdc:	6943      	ldr	r3, [r0, #20]
 800afde:	f1a3 02cd 	sub.w	r2, r3, #205	@ 0xcd
 800afe2:	2a01      	cmp	r2, #1
{
 800afe4:	b510      	push	{r4, lr}
 800afe6:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800afe8:	d81f      	bhi.n	800b02a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800afea:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800afec:	bb0a      	cbnz	r2, 800b032 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800afee:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800aff2:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d204      	bcs.n	800b002 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800aff8:	6803      	ldr	r3, [r0, #0]
 800affa:	2245      	movs	r2, #69	@ 0x45
 800affc:	615a      	str	r2, [r3, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 800b002:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800b006:	4620      	mov	r0, r4
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800b00c:	23d2      	movs	r3, #210	@ 0xd2
 800b00e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 800b010:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800b014:	695a      	ldr	r2, [r3, #20]
 800b016:	b1a2      	cbz	r2, 800b042 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 800b018:	69a3      	ldr	r3, [r4, #24]
 800b01a:	4620      	mov	r0, r4
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff fe8d 	bl	800ad40 <jpeg_abort>
  return TRUE;
 800b026:	2001      	movs	r0, #1
 800b028:	e010      	b.n	800b04c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800b02a:	2bcf      	cmp	r3, #207	@ 0xcf
 800b02c:	d0ee      	beq.n	800b00c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800b02e:	2bd2      	cmp	r3, #210	@ 0xd2
 800b030:	d0ee      	beq.n	800b010 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	2115      	movs	r1, #21
 800b036:	4620      	mov	r0, r4
 800b038:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800b03c:	6813      	ldr	r3, [r2, #0]
 800b03e:	4798      	blx	r3
 800b040:	e7e6      	b.n	800b010 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4620      	mov	r0, r4
 800b046:	4798      	blx	r3
 800b048:	2800      	cmp	r0, #0
 800b04a:	d1e1      	bne.n	800b010 <jpeg_finish_decompress+0x34>
}
 800b04c:	bd10      	pop	{r4, pc}

0800b04e <output_pass_setup>:
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
 800b04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800b050:	6943      	ldr	r3, [r0, #20]
{
 800b052:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800b054:	2bcc      	cmp	r3, #204	@ 0xcc
 800b056:	d008      	beq.n	800b06a <output_pass_setup+0x1c>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800b058:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 800b066:	23cc      	movs	r3, #204	@ 0xcc
 800b068:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800b06a:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
  while (cinfo->master->is_dummy_pass) {
 800b06e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	b9e3      	cbnz	r3, 800b0b0 <output_pass_setup+0x62>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800b076:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  return TRUE;
 800b078:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bf0c      	ite	eq
 800b07e:	23cd      	moveq	r3, #205	@ 0xcd
 800b080:	23ce      	movne	r3, #206	@ 0xce
 800b082:	6163      	str	r3, [r4, #20]
}
 800b084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cinfo->progress != NULL) {
 800b086:	68a3      	ldr	r3, [r4, #8]
 800b088:	b123      	cbz	r3, 800b094 <output_pass_setup+0x46>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b08a:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 800b08c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800b094:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800b098:	462a      	mov	r2, r5
 800b09a:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 800b09c:	f8d4 608c 	ldr.w	r6, [r4, #140]	@ 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800b0a0:	685f      	ldr	r7, [r3, #4]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	47b8      	blx	r7
      if (cinfo->output_scanline == last_scanline)
 800b0a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800b0ac:	42b3      	cmp	r3, r6
 800b0ae:	d012      	beq.n	800b0d6 <output_pass_setup+0x88>
    while (cinfo->output_scanline < cinfo->output_height) {
 800b0b0:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800b0b4:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800b0b6:	4291      	cmp	r1, r2
 800b0b8:	d3e5      	bcc.n	800b086 <output_pass_setup+0x38>
    (*cinfo->master->finish_output_pass) (cinfo);
 800b0ba:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800b0be:	4620      	mov	r0, r4
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800b0c4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800b0d4:	e7cb      	b.n	800b06e <output_pass_setup+0x20>
	return FALSE;		/* No progress made, must suspend */
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	e7d4      	b.n	800b084 <output_pass_setup+0x36>

0800b0da <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 800b0da:	6943      	ldr	r3, [r0, #20]
 800b0dc:	2bca      	cmp	r3, #202	@ 0xca
{
 800b0de:	b510      	push	{r4, lr}
 800b0e0:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800b0e2:	d109      	bne.n	800b0f8 <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800b0e4:	f005 f85e 	bl	80101a4 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 800b0e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0ea:	b11b      	cbz	r3, 800b0f4 <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 800b0ec:	23cf      	movs	r3, #207	@ 0xcf
      return TRUE;
 800b0ee:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800b0f0:	6163      	str	r3, [r4, #20]
}
 800b0f2:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800b0f4:	23cb      	movs	r3, #203	@ 0xcb
 800b0f6:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 800b0f8:	6962      	ldr	r2, [r4, #20]
 800b0fa:	2acb      	cmp	r2, #203	@ 0xcb
 800b0fc:	d12c      	bne.n	800b158 <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 800b0fe:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	b1fb      	cbz	r3, 800b146 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	b113      	cbz	r3, 800b110 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4620      	mov	r0, r4
 800b10e:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800b110:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800b114:	4620      	mov	r0, r4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d0e9      	beq.n	800b0f2 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 800b11e:	2802      	cmp	r0, #2
 800b120:	d011      	beq.n	800b146 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 800b122:	68a3      	ldr	r3, [r4, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0ee      	beq.n	800b106 <jpeg_start_decompress+0x2c>
 800b128:	f020 0002 	bic.w	r0, r0, #2
 800b12c:	2801      	cmp	r0, #1
 800b12e:	d1ea      	bne.n	800b106 <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	6899      	ldr	r1, [r3, #8]
 800b134:	3201      	adds	r2, #1
 800b136:	428a      	cmp	r2, r1
 800b138:	605a      	str	r2, [r3, #4]
 800b13a:	dbe4      	blt.n	800b106 <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 800b13c:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
 800b140:	440a      	add	r2, r1
 800b142:	609a      	str	r2, [r3, #8]
 800b144:	e7df      	b.n	800b106 <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800b146:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800b14a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  return output_pass_setup(cinfo);
 800b14e:	4620      	mov	r0, r4
}
 800b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800b154:	f7ff bf7b 	b.w	800b04e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800b158:	2acc      	cmp	r2, #204	@ 0xcc
 800b15a:	d0f8      	beq.n	800b14e <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	2115      	movs	r1, #21
 800b160:	4620      	mov	r0, r4
 800b162:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4798      	blx	r3
 800b16a:	e7f0      	b.n	800b14e <jpeg_start_decompress+0x74>

0800b16c <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800b16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16e:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800b170:	6942      	ldr	r2, [r0, #20]
{
 800b172:	4604      	mov	r4, r0
 800b174:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800b176:	2acd      	cmp	r2, #205	@ 0xcd
 800b178:	d005      	beq.n	800b186 <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b17a:	6803      	ldr	r3, [r0, #0]
 800b17c:	2115      	movs	r1, #21
 800b17e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800b186:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800b18a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d30a      	bcc.n	800b1a6 <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	227e      	movs	r2, #126	@ 0x7e
 800b194:	4620      	mov	r0, r4
 800b196:	f04f 31ff 	mov.w	r1, #4294967295
 800b19a:	615a      	str	r2, [r3, #20]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	4798      	blx	r3
    return 0;
 800b1a0:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 800b1a2:	b003      	add	sp, #12
 800b1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800b1a6:	68a0      	ldr	r0, [r4, #8]
 800b1a8:	b120      	cbz	r0, 800b1b4 <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 800b1aa:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b1ae:	6803      	ldr	r3, [r0, #0]
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	4798      	blx	r3
  row_ctr = 0;
 800b1b4:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	aa01      	add	r2, sp, #4
 800b1ba:	4629      	mov	r1, r5
  row_ctr = 0;
 800b1bc:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800b1be:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800b1c2:	685f      	ldr	r7, [r3, #4]
 800b1c4:	4633      	mov	r3, r6
 800b1c6:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 800b1c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800b1cc:	9801      	ldr	r0, [sp, #4]
 800b1ce:	4403      	add	r3, r0
 800b1d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  return row_ctr;
 800b1d4:	e7e5      	b.n	800b1a2 <jpeg_read_scanlines+0x36>

0800b1d6 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800b1d6:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800b1d8:	6984      	ldr	r4, [r0, #24]
{
 800b1da:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800b1dc:	6863      	ldr	r3, [r4, #4]
 800b1de:	b943      	cbnz	r3, 800b1f2 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800b1e0:	68e3      	ldr	r3, [r4, #12]
 800b1e2:	4798      	blx	r3
 800b1e4:	b928      	cbnz	r0, 800b1f2 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800b1e6:	682b      	ldr	r3, [r5, #0]
 800b1e8:	2219      	movs	r2, #25
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	615a      	str	r2, [r3, #20]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4798      	blx	r3
  src->bytes_in_buffer--;
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	6022      	str	r2, [r4, #0]
}
 800b1fe:	7818      	ldrb	r0, [r3, #0]
 800b200:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b204 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	4606      	mov	r6, r0
 800b208:	460d      	mov	r5, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800b20a:	f8d0 41d0 	ldr.w	r4, [r0, #464]	@ 0x1d0
  register INT32 qe, temp;
  register int sv, data;

  /* Renormalization & data input per section D.2.6 */
  while (e->a < 0x8000L) {
    if (--e->ct < 0) {
 800b20e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
  while (e->a < 0x8000L) {
 800b212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b216:	db20      	blt.n	800b25a <arith_decode+0x56>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800b218:	7828      	ldrb	r0, [r5, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800b21a:	492e      	ldr	r1, [pc, #184]	@ (800b2d4 <arith_decode+0xd0>)
 800b21c:	f000 067f 	and.w	r6, r0, #127	@ 0x7f
 800b220:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
 800b224:	eba3 432c 	sub.w	r3, r3, ip, asr #16
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800b228:	f3cc 2107 	ubfx	r1, ip, #8, #8
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 800b22c:	fa5f f68c 	uxtb.w	r6, ip
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800b230:	ea4f 472c 	mov.w	r7, ip, asr #16
  e->a = temp;
  temp <<= e->ct;
 800b234:	fa03 f202 	lsl.w	r2, r3, r2
  if (e->c >= temp) {
 800b238:	f8d4 c008 	ldr.w	ip, [r4, #8]
  e->a = temp;
 800b23c:	60e3      	str	r3, [r4, #12]
  if (e->c >= temp) {
 800b23e:	4594      	cmp	ip, r2
 800b240:	db3b      	blt.n	800b2ba <arith_decode+0xb6>
    e->c -= temp;
 800b242:	ebac 0202 	sub.w	r2, ip, r2
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800b246:	429f      	cmp	r7, r3
      e->a = qe;
 800b248:	60e7      	str	r7, [r4, #12]
    e->c -= temp;
 800b24a:	60a2      	str	r2, [r4, #8]
    if (e->a < qe) {
 800b24c:	f000 0280 	and.w	r2, r0, #128	@ 0x80
 800b250:	dd2e      	ble.n	800b2b0 <arith_decode+0xac>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b252:	404a      	eors	r2, r1
 800b254:	702a      	strb	r2, [r5, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800b256:	09c0      	lsrs	r0, r0, #7
 800b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (--e->ct < 0) {
 800b25a:	3a01      	subs	r2, #1
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	6122      	str	r2, [r4, #16]
 800b260:	da1a      	bge.n	800b298 <arith_decode+0x94>
      if (cinfo->unread_marker)
 800b262:	f8d6 31b4 	ldr.w	r3, [r6, #436]	@ 0x1b4
 800b266:	b96b      	cbnz	r3, 800b284 <arith_decode+0x80>
	data = get_byte(cinfo);	/* read next input byte */
 800b268:	4630      	mov	r0, r6
 800b26a:	f7ff ffb4 	bl	800b1d6 <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 800b26e:	28ff      	cmp	r0, #255	@ 0xff
	data = get_byte(cinfo);	/* read next input byte */
 800b270:	4607      	mov	r7, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800b272:	d108      	bne.n	800b286 <arith_decode+0x82>
	  do data = get_byte(cinfo);
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff ffae 	bl	800b1d6 <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800b27a:	28ff      	cmp	r0, #255	@ 0xff
 800b27c:	d0fa      	beq.n	800b274 <arith_decode+0x70>
	  if (data == 0)
 800b27e:	b110      	cbz	r0, 800b286 <arith_decode+0x82>
	    cinfo->unread_marker = data;
 800b280:	f8c6 01b4 	str.w	r0, [r6, #436]	@ 0x1b4
	data = 0;		/* stuff zero data */
 800b284:	2700      	movs	r7, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 800b292:	60a7      	str	r7, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800b294:	d404      	bmi.n	800b2a0 <arith_decode+0x9c>
 800b296:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800b298:	68e3      	ldr	r3, [r4, #12]
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	60e3      	str	r3, [r4, #12]
 800b29e:	e7b6      	b.n	800b20e <arith_decode+0xa>
	if (++e->ct == 0)
 800b2a0:	3309      	adds	r3, #9
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1f7      	bne.n	800b298 <arith_decode+0x94>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800b2a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2ac:	60e3      	str	r3, [r4, #12]
 800b2ae:	e7f3      	b.n	800b298 <arith_decode+0x94>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800b2b0:	4072      	eors	r2, r6
 800b2b2:	702a      	strb	r2, [r5, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800b2b4:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 800b2b8:	e7cd      	b.n	800b256 <arith_decode+0x52>
  } else if (e->a < 0x8000L) {
 800b2ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2be:	daca      	bge.n	800b256 <arith_decode+0x52>
    if (e->a < qe) {
 800b2c0:	429f      	cmp	r7, r3
 800b2c2:	f000 0280 	and.w	r2, r0, #128	@ 0x80
 800b2c6:	dd02      	ble.n	800b2ce <arith_decode+0xca>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800b2c8:	4056      	eors	r6, r2
 800b2ca:	702e      	strb	r6, [r5, #0]
 800b2cc:	e7f2      	b.n	800b2b4 <arith_decode+0xb0>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b2ce:	4051      	eors	r1, r2
 800b2d0:	7029      	strb	r1, [r5, #0]
 800b2d2:	e7c0      	b.n	800b256 <arith_decode+0x52>
 800b2d4:	0802e524 	.word	0x0802e524

0800b2d8 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800b2dc:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
{
 800b2e0:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b2e2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->progressive_mode) {
 800b2e6:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800b2ea:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
  if (cinfo->progressive_mode) {
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 8088 	beq.w	800b404 <start_pass+0x12c>
    if (cinfo->Ss == 0) {
 800b2f4:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	@ 0x19c
 800b2f8:	f8d0 01a4 	ldr.w	r0, [r0, #420]	@ 0x1a4
 800b2fc:	b962      	cbnz	r2, 800b318 <start_pass+0x40>
      if (cinfo->Se != 0)
 800b2fe:	b1a9      	cbz	r1, 800b32c <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	f04f 0c11 	mov.w	ip, #17
 800b306:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800b30a:	e9c3 c205 	strd	ip, r2, [r3, #20]
 800b30e:	6258      	str	r0, [r3, #36]	@ 0x24
 800b310:	4620      	mov	r0, r4
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4798      	blx	r3
 800b316:	e00f      	b.n	800b338 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800b318:	428a      	cmp	r2, r1
 800b31a:	dcf1      	bgt.n	800b300 <start_pass+0x28>
 800b31c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800b320:	428b      	cmp	r3, r1
 800b322:	dbed      	blt.n	800b300 <start_pass+0x28>
      if (cinfo->comps_in_scan != 1)
 800b324:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d1e9      	bne.n	800b300 <start_pass+0x28>
    if (cinfo->Ah != 0) {
 800b32c:	b117      	cbz	r7, 800b334 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800b32e:	1e7b      	subs	r3, r7, #1
 800b330:	4283      	cmp	r3, r0
 800b332:	d1e5      	bne.n	800b300 <start_pass+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800b334:	280d      	cmp	r0, #13
 800b336:	dce3      	bgt.n	800b300 <start_pass+0x28>
 800b338:	46b0      	mov	r8, r6
{
 800b33a:	f04f 0b00 	mov.w	fp, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b33e:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b342:	f8d4 1198 	ldr.w	r1, [r4, #408]	@ 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b346:	455b      	cmp	r3, fp
 800b348:	dc1d      	bgt.n	800b386 <start_pass+0xae>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800b34a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d155      	bne.n	800b3fe <start_pass+0x126>
      if (cinfo->Ss == 0)
 800b352:	4b64      	ldr	r3, [pc, #400]	@ (800b4e4 <start_pass+0x20c>)
 800b354:	4a64      	ldr	r2, [pc, #400]	@ (800b4e8 <start_pass+0x210>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
 800b356:	2900      	cmp	r1, #0
 800b358:	bf18      	it	ne
 800b35a:	4613      	movne	r3, r2
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800b35c:	2700      	movs	r7, #0
 800b35e:	f105 0814 	add.w	r8, r5, #20
 800b362:	46b1      	mov	r9, r6
 800b364:	606b      	str	r3, [r5, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800b366:	46ba      	mov	sl, r7
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b368:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800b36c:	42bb      	cmp	r3, r7
 800b36e:	dc62      	bgt.n	800b436 <start_pass+0x15e>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800b370:	2300      	movs	r3, #0
  entropy->a = 0;
 800b372:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800b376:	f06f 030f 	mvn.w	r3, #15
 800b37a:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b37c:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800b380:	636b      	str	r3, [r5, #52]	@ 0x34
}
 800b382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b386:	f858 3f04 	ldr.w	r3, [r8, #4]!
 800b38a:	f8d3 a004 	ldr.w	sl, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b38e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800b392:	ea4f 200a 	mov.w	r0, sl, lsl #8
 800b396:	eb03 290a 	add.w	r9, r3, sl, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b39a:	b169      	cbz	r1, 800b3b8 <start_pass+0xe0>
 800b39c:	581b      	ldr	r3, [r3, r0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	da0a      	bge.n	800b3b8 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	2176      	movs	r1, #118	@ 0x76
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	e9c3 1a05 	strd	r1, sl, [r3, #20]
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	61d9      	str	r1, [r3, #28]
 800b3b0:	f04f 31ff 	mov.w	r1, #4294967295
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b3b8:	f8d4 7198 	ldr.w	r7, [r4, #408]	@ 0x198
 800b3bc:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 800b3c0:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800b3c4:	42bb      	cmp	r3, r7
 800b3c6:	da02      	bge.n	800b3ce <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b3c8:	f10b 0b01 	add.w	fp, fp, #1
 800b3cc:	e7b7      	b.n	800b33e <start_pass+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b3ce:	f8d9 3000 	ldr.w	r3, [r9]
	if (cinfo->Ah != expected)
 800b3d2:	f8d4 11a0 	ldr.w	r1, [r4, #416]	@ 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b3d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	d009      	beq.n	800b3f2 <start_pass+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	2276      	movs	r2, #118	@ 0x76
 800b3e2:	f04f 31ff 	mov.w	r1, #4294967295
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	61df      	str	r7, [r3, #28]
 800b3ea:	e9c3 2a05 	strd	r2, sl, [r3, #20]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800b3f2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b3f6:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800b3f8:	f849 3b04 	str.w	r3, [r9], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b3fc:	e7e0      	b.n	800b3c0 <start_pass+0xe8>
      if (cinfo->Ss == 0)
 800b3fe:	4b3b      	ldr	r3, [pc, #236]	@ (800b4ec <start_pass+0x214>)
 800b400:	4a3b      	ldr	r2, [pc, #236]	@ (800b4f0 <start_pass+0x218>)
 800b402:	e7a8      	b.n	800b356 <start_pass+0x7e>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b404:	b96a      	cbnz	r2, 800b422 <start_pass+0x14a>
 800b406:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 800b40a:	b953      	cbnz	r3, 800b422 <start_pass+0x14a>
 800b40c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
 800b410:	b93b      	cbnz	r3, 800b422 <start_pass+0x14a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800b412:	f8d0 319c 	ldr.w	r3, [r0, #412]	@ 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b416:	2b3f      	cmp	r3, #63	@ 0x3f
 800b418:	dc0b      	bgt.n	800b432 <start_pass+0x15a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800b41a:	f8d0 21b0 	ldr.w	r2, [r0, #432]	@ 0x1b0
 800b41e:	4293      	cmp	r3, r2
 800b420:	d007      	beq.n	800b432 <start_pass+0x15a>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	227d      	movs	r2, #125	@ 0x7d
 800b426:	f04f 31ff 	mov.w	r1, #4294967295
 800b42a:	4620      	mov	r0, r4
 800b42c:	615a      	str	r2, [r3, #20]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800b432:	4b30      	ldr	r3, [pc, #192]	@ (800b4f4 <start_pass+0x21c>)
 800b434:	e792      	b.n	800b35c <start_pass+0x84>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b436:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800b43a:	f859 bf04 	ldr.w	fp, [r9, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b43e:	b133      	cbz	r3, 800b44e <start_pass+0x176>
 800b440:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b444:	bb43      	cbnz	r3, 800b498 <start_pass+0x1c0>
 800b446:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d13a      	bne.n	800b4c4 <start_pass+0x1ec>
      tbl = compptr->dc_tbl_no;
 800b44e:	f8db 6014 	ldr.w	r6, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800b452:	2e0f      	cmp	r6, #15
 800b454:	d906      	bls.n	800b464 <start_pass+0x18c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	2232      	movs	r2, #50	@ 0x32
 800b45a:	4620      	mov	r0, r4
 800b45c:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800b464:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800b468:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800b46a:	b933      	cbnz	r3, 800b47a <start_pass+0x1a2>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800b46c:	6863      	ldr	r3, [r4, #4]
 800b46e:	2240      	movs	r2, #64	@ 0x40
 800b470:	2101      	movs	r1, #1
 800b472:	4620      	mov	r0, r4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4798      	blx	r3
 800b478:	63b0      	str	r0, [r6, #56]	@ 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800b47a:	2240      	movs	r2, #64	@ 0x40
 800b47c:	2100      	movs	r1, #0
 800b47e:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 800b480:	f01f fe62 	bl	802b148 <memset>
      entropy->last_dc_val[ci] = 0;
 800b484:	f8c8 a000 	str.w	sl, [r8]
      entropy->dc_context[ci] = 0;
 800b488:	f8c8 a010 	str.w	sl, [r8, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800b48c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b490:	b9e3      	cbnz	r3, 800b4cc <start_pass+0x1f4>
 800b492:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800b496:	b1ab      	cbz	r3, 800b4c4 <start_pass+0x1ec>
      tbl = compptr->ac_tbl_no;
 800b498:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800b49c:	2e0f      	cmp	r6, #15
 800b49e:	d818      	bhi.n	800b4d2 <start_pass+0x1fa>
      if (entropy->ac_stats[tbl] == NULL)
 800b4a0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800b4a4:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 800b4a6:	b93b      	cbnz	r3, 800b4b8 <start_pass+0x1e0>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4798      	blx	r3
 800b4b6:	67b0      	str	r0, [r6, #120]	@ 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800b4b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4bc:	2100      	movs	r1, #0
 800b4be:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 800b4c0:	f01f fe42 	bl	802b148 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b4c4:	3701      	adds	r7, #1
 800b4c6:	f108 0804 	add.w	r8, r8, #4
 800b4ca:	e74d      	b.n	800b368 <start_pass+0x90>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800b4cc:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b4d0:	e7e1      	b.n	800b496 <start_pass+0x1be>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	2232      	movs	r2, #50	@ 0x32
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4798      	blx	r3
 800b4e0:	e7de      	b.n	800b4a0 <start_pass+0x1c8>
 800b4e2:	bf00      	nop
 800b4e4:	0800ba57 	.word	0x0800ba57
 800b4e8:	0800b92f 	.word	0x0800b92f
 800b4ec:	0800b8dd 	.word	0x0800b8dd
 800b4f0:	0800b7c7 	.word	0x0800b7c7
 800b4f4:	0800b59b 	.word	0x0800b59b

0800b4f8 <process_restart>:
{
 800b4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b4fc:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	@ 0x1cc
{
 800b500:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	4798      	blx	r3
 800b506:	b928      	cbnz	r0, 800b514 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	2219      	movs	r2, #25
 800b50c:	4620      	mov	r0, r4
 800b50e:	615a      	str	r2, [r3, #20]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4798      	blx	r3
{
 800b514:	2600      	movs	r6, #0
 800b516:	f105 0714 	add.w	r7, r5, #20
 800b51a:	f504 78a8 	add.w	r8, r4, #336	@ 0x150
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800b51e:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b520:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800b524:	42b3      	cmp	r3, r6
 800b526:	dc0a      	bgt.n	800b53e <process_restart+0x46>
  entropy->c = 0;
 800b528:	2300      	movs	r3, #0
  entropy->a = 0;
 800b52a:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800b52e:	f06f 030f 	mvn.w	r3, #15
 800b532:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b534:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800b538:	636b      	str	r3, [r5, #52]	@ 0x34
}
 800b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b53e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800b542:	f858 af04 	ldr.w	sl, [r8, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b546:	b12b      	cbz	r3, 800b554 <process_restart+0x5c>
 800b548:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b54c:	b9ab      	cbnz	r3, 800b57a <process_restart+0x82>
 800b54e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800b552:	b9e3      	cbnz	r3, 800b58e <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800b554:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b558:	2240      	movs	r2, #64	@ 0x40
 800b55a:	2100      	movs	r1, #0
 800b55c:	330e      	adds	r3, #14
 800b55e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b562:	f01f fdf1 	bl	802b148 <memset>
      entropy->last_dc_val[ci] = 0;
 800b566:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800b56a:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800b56e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b572:	b97b      	cbnz	r3, 800b594 <process_restart+0x9c>
 800b574:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800b578:	b14b      	cbz	r3, 800b58e <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800b57a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b57e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b582:	2100      	movs	r1, #0
 800b584:	331e      	adds	r3, #30
 800b586:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b58a:	f01f fddd 	bl	802b148 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b58e:	3601      	adds	r6, #1
 800b590:	3704      	adds	r7, #4
 800b592:	e7c5      	b.n	800b520 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800b594:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b598:	e7ee      	b.n	800b578 <process_restart+0x80>

0800b59a <decode_mcu>:
{
 800b59a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800b59e:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
{
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	4681      	mov	r9, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b5a6:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800b5aa:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b5ac:	b132      	cbz	r2, 800b5bc <decode_mcu+0x22>
    if (entropy->restarts_to_go == 0)
 800b5ae:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800b5b0:	b90a      	cbnz	r2, 800b5b6 <decode_mcu+0x1c>
      process_restart(cinfo);
 800b5b2:	f7ff ffa1 	bl	800b4f8 <process_restart>
    entropy->restarts_to_go--;
 800b5b6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800b5b8:	3a01      	subs	r2, #1
 800b5ba:	636a      	str	r2, [r5, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b5bc:	692a      	ldr	r2, [r5, #16]
 800b5be:	3201      	adds	r2, #1
 800b5c0:	f000 809d 	beq.w	800b6fe <decode_mcu+0x164>
  natural_order = cinfo->natural_order;
 800b5c4:	f8d9 31ac 	ldr.w	r3, [r9, #428]	@ 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5c8:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800b5ca:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5cc:	f509 73b6 	add.w	r3, r9, #364	@ 0x16c
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	f8d9 216c 	ldr.w	r2, [r9, #364]	@ 0x16c
 800b5d6:	42ba      	cmp	r2, r7
 800b5d8:	f340 8091 	ble.w	800b6fe <decode_mcu+0x164>
    block = MCU_data[blkn];
 800b5dc:	9b05      	ldr	r3, [sp, #20]
 800b5de:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b5e2:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    compptr = cinfo->cur_comp_info[ci];
 800b5ea:	eb09 0281 	add.w	r2, r9, r1, lsl #2
    ci = cinfo->MCU_membership[blkn];
 800b5ee:	9303      	str	r3, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800b5f0:	eb05 0b81 	add.w	fp, r5, r1, lsl #2
 800b5f4:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b5f8:	f8db 1024 	ldr.w	r1, [fp, #36]	@ 0x24
    compptr = cinfo->cur_comp_info[ci];
 800b5fc:	9301      	str	r3, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800b604:	9302      	str	r3, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b606:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 800b608:	eb00 0a01 	add.w	sl, r0, r1
    if (arith_decode(cinfo, st) == 0)
 800b60c:	4648      	mov	r0, r9
 800b60e:	4651      	mov	r1, sl
 800b610:	f7ff fdf8 	bl	800b204 <arith_decode>
 800b614:	bb48      	cbnz	r0, 800b66a <decode_mcu+0xd0>
      entropy->dc_context[ci] = 0;
 800b616:	f8cb 0024 	str.w	r0, [fp, #36]	@ 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800b61a:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b61e:	9b00      	ldr	r3, [sp, #0]
 800b620:	801a      	strh	r2, [r3, #0]
    if (cinfo->lim_Se == 0) continue;
 800b622:	f8d9 21b0 	ldr.w	r2, [r9, #432]	@ 0x1b0
 800b626:	2a00      	cmp	r2, #0
 800b628:	f000 80b7 	beq.w	800b79a <decode_mcu+0x200>
    tbl = compptr->ac_tbl_no;
 800b62c:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800b62e:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800b630:	f8d3 a018 	ldr.w	sl, [r3, #24]
    k = 0;
 800b634:	eb05 0b8a 	add.w	fp, r5, sl, lsl #2
      st = entropy->ac_stats[tbl] + 3 * k;
 800b638:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800b63c:	f8db 4078 	ldr.w	r4, [fp, #120]	@ 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b640:	4648      	mov	r0, r9
      st = entropy->ac_stats[tbl] + 3 * k;
 800b642:	4414      	add	r4, r2
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b644:	4621      	mov	r1, r4
 800b646:	f7ff fddd 	bl	800b204 <arith_decode>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	f040 80a5 	bne.w	800b79a <decode_mcu+0x200>
	if (arith_decode(cinfo, st + 1)) break;
 800b650:	1c61      	adds	r1, r4, #1
 800b652:	4648      	mov	r0, r9
	k++;
 800b654:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800b656:	f7ff fdd5 	bl	800b204 <arith_decode>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d164      	bne.n	800b728 <decode_mcu+0x18e>
	if (k >= cinfo->lim_Se) {
 800b65e:	f8d9 21b0 	ldr.w	r2, [r9, #432]	@ 0x1b0
	st += 3;
 800b662:	3403      	adds	r4, #3
	if (k >= cinfo->lim_Se) {
 800b664:	42b2      	cmp	r2, r6
 800b666:	dcf3      	bgt.n	800b650 <decode_mcu+0xb6>
 800b668:	e03d      	b.n	800b6e6 <decode_mcu+0x14c>
      sign = arith_decode(cinfo, st + 1);
 800b66a:	f10a 0101 	add.w	r1, sl, #1
 800b66e:	4648      	mov	r0, r9
 800b670:	f7ff fdc8 	bl	800b204 <arith_decode>
      st += 2; st += sign;
 800b674:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800b676:	4604      	mov	r4, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b678:	4648      	mov	r0, r9
      st += 2; st += sign;
 800b67a:	448a      	add	sl, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b67c:	4651      	mov	r1, sl
 800b67e:	f7ff fdc1 	bl	800b204 <arith_decode>
 800b682:	4680      	mov	r8, r0
 800b684:	b138      	cbz	r0, 800b696 <decode_mcu+0xfc>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800b686:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 800b688:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800b68c:	4651      	mov	r1, sl
 800b68e:	4648      	mov	r0, r9
 800b690:	f7ff fdb8 	bl	800b204 <arith_decode>
 800b694:	bb10      	cbnz	r0, 800b6dc <decode_mcu+0x142>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800b696:	9e02      	ldr	r6, [sp, #8]
 800b698:	2201      	movs	r2, #1
 800b69a:	444e      	add	r6, r9
 800b69c:	f896 00e8 	ldrb.w	r0, [r6, #232]	@ 0xe8
 800b6a0:	fa02 f000 	lsl.w	r0, r2, r0
 800b6a4:	ebb8 0f60 	cmp.w	r8, r0, asr #1
 800b6a8:	db30      	blt.n	800b70c <decode_mcu+0x172>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800b6aa:	f896 00f8 	ldrb.w	r0, [r6, #248]	@ 0xf8
 800b6ae:	4082      	lsls	r2, r0
 800b6b0:	ebb8 0f62 	cmp.w	r8, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800b6b4:	bfcc      	ite	gt
 800b6b6:	1ce2      	addgt	r2, r4, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800b6b8:	1c62      	addle	r2, r4, #1
 800b6ba:	0092      	lsls	r2, r2, #2
      st += 14;
 800b6bc:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800b6c0:	4646      	mov	r6, r8
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800b6c2:	f8cb 2024 	str.w	r2, [fp, #36]	@ 0x24
      while (m >>= 1)
 800b6c6:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b6ca:	d121      	bne.n	800b710 <decode_mcu+0x176>
      v += 1; if (sign) v = -v;
 800b6cc:	bb54      	cbnz	r4, 800b724 <decode_mcu+0x18a>
 800b6ce:	3601      	adds	r6, #1
      entropy->last_dc_val[ci] += v;
 800b6d0:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b6d4:	4432      	add	r2, r6
 800b6d6:	f8cb 2014 	str.w	r2, [fp, #20]
 800b6da:	e79e      	b.n	800b61a <decode_mcu+0x80>
	  if ((m <<= 1) == 0x8000) {
 800b6dc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b6e0:	f5b8 4f00 	cmp.w	r8, #32768	@ 0x8000
 800b6e4:	d10f      	bne.n	800b706 <decode_mcu+0x16c>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b6e6:	f8d9 2000 	ldr.w	r2, [r9]
 800b6ea:	2175      	movs	r1, #117	@ 0x75
 800b6ec:	4648      	mov	r0, r9
 800b6ee:	6151      	str	r1, [r2, #20]
 800b6f0:	f04f 31ff 	mov.w	r1, #4294967295
 800b6f4:	6852      	ldr	r2, [r2, #4]
 800b6f6:	4790      	blx	r2
	      entropy->ct = -1;			/* magnitude overflow */
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fc:	612b      	str	r3, [r5, #16]
}
 800b6fe:	2001      	movs	r0, #1
 800b700:	b007      	add	sp, #28
 800b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800b706:	f10a 0a01 	add.w	sl, sl, #1
 800b70a:	e7bf      	b.n	800b68c <decode_mcu+0xf2>
 800b70c:	2200      	movs	r2, #0
 800b70e:	e7d5      	b.n	800b6bc <decode_mcu+0x122>
	if (arith_decode(cinfo, st)) v |= m;
 800b710:	4648      	mov	r0, r9
 800b712:	9102      	str	r1, [sp, #8]
 800b714:	f7ff fd76 	bl	800b204 <arith_decode>
 800b718:	9902      	ldr	r1, [sp, #8]
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d0d3      	beq.n	800b6c6 <decode_mcu+0x12c>
 800b71e:	ea46 0608 	orr.w	r6, r6, r8
 800b722:	e7d0      	b.n	800b6c6 <decode_mcu+0x12c>
      v += 1; if (sign) v = -v;
 800b724:	43f6      	mvns	r6, r6
 800b726:	e7d3      	b.n	800b6d0 <decode_mcu+0x136>
      st += 2;
 800b728:	f104 0802 	add.w	r8, r4, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b72c:	f105 01b8 	add.w	r1, r5, #184	@ 0xb8
 800b730:	4648      	mov	r0, r9
 800b732:	f7ff fd67 	bl	800b204 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b736:	4641      	mov	r1, r8
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b738:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b73a:	4648      	mov	r0, r9
 800b73c:	f7ff fd62 	bl	800b204 <arith_decode>
 800b740:	4604      	mov	r4, r0
 800b742:	b1b0      	cbz	r0, 800b772 <decode_mcu+0x1d8>
	if (arith_decode(cinfo, st)) {
 800b744:	4641      	mov	r1, r8
 800b746:	4648      	mov	r0, r9
 800b748:	f7ff fd5c 	bl	800b204 <arith_decode>
 800b74c:	b188      	cbz	r0, 800b772 <decode_mcu+0x1d8>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b74e:	eb09 010a 	add.w	r1, r9, sl
	  st = entropy->ac_stats[tbl] +
 800b752:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
	  m <<= 1;
 800b756:	0064      	lsls	r4, r4, #1
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b758:	f891 1108 	ldrb.w	r1, [r1, #264]	@ 0x108
 800b75c:	42b1      	cmp	r1, r6
 800b75e:	bfac      	ite	ge
 800b760:	21bd      	movge	r1, #189	@ 0xbd
 800b762:	21d9      	movlt	r1, #217	@ 0xd9
	  st = entropy->ac_stats[tbl] +
 800b764:	eb02 0801 	add.w	r8, r2, r1
	  while (arith_decode(cinfo, st)) {
 800b768:	4641      	mov	r1, r8
 800b76a:	4648      	mov	r0, r9
 800b76c:	f7ff fd4a 	bl	800b204 <arith_decode>
 800b770:	b9a8      	cbnz	r0, 800b79e <decode_mcu+0x204>
      st += 14;
 800b772:	f108 010e 	add.w	r1, r8, #14
      v = m;
 800b776:	46a0      	mov	r8, r4
      while (m >>= 1)
 800b778:	1064      	asrs	r4, r4, #1
 800b77a:	d117      	bne.n	800b7ac <decode_mcu+0x212>
      v += 1; if (sign) v = -v;
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	b9fb      	cbnz	r3, 800b7c0 <decode_mcu+0x226>
 800b780:	f108 0201 	add.w	r2, r8, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800b784:	9b04      	ldr	r3, [sp, #16]
 800b786:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b78a:	9b00      	ldr	r3, [sp, #0]
 800b78c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    } while (k < cinfo->lim_Se);
 800b790:	f8d9 21b0 	ldr.w	r2, [r9, #432]	@ 0x1b0
 800b794:	42b2      	cmp	r2, r6
 800b796:	f73f af4f 	bgt.w	800b638 <decode_mcu+0x9e>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b79a:	3701      	adds	r7, #1
 800b79c:	e719      	b.n	800b5d2 <decode_mcu+0x38>
	    if ((m <<= 1) == 0x8000) {
 800b79e:	0064      	lsls	r4, r4, #1
 800b7a0:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800b7a4:	d09f      	beq.n	800b6e6 <decode_mcu+0x14c>
	    st += 1;
 800b7a6:	f108 0801 	add.w	r8, r8, #1
 800b7aa:	e7dd      	b.n	800b768 <decode_mcu+0x1ce>
	if (arith_decode(cinfo, st)) v |= m;
 800b7ac:	4648      	mov	r0, r9
 800b7ae:	9102      	str	r1, [sp, #8]
 800b7b0:	f7ff fd28 	bl	800b204 <arith_decode>
 800b7b4:	9902      	ldr	r1, [sp, #8]
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0de      	beq.n	800b778 <decode_mcu+0x1de>
 800b7ba:	ea48 0804 	orr.w	r8, r8, r4
 800b7be:	e7db      	b.n	800b778 <decode_mcu+0x1de>
      v += 1; if (sign) v = -v;
 800b7c0:	ea6f 0208 	mvn.w	r2, r8
 800b7c4:	e7de      	b.n	800b784 <decode_mcu+0x1ea>

0800b7c6 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800b7c6:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800b7ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b7d4:	f8d0 61d0 	ldr.w	r6, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800b7d8:	b133      	cbz	r3, 800b7e8 <decode_mcu_AC_refine+0x22>
    if (entropy->restarts_to_go == 0)
 800b7da:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b7dc:	b90b      	cbnz	r3, 800b7e2 <decode_mcu_AC_refine+0x1c>
      process_restart(cinfo);
 800b7de:	f7ff fe8b 	bl	800b4f8 <process_restart>
    entropy->restarts_to_go--;
 800b7e2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	6373      	str	r3, [r6, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b7e8:	6933      	ldr	r3, [r6, #16]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	d072      	beq.n	800b8d4 <decode_mcu_AC_refine+0x10e>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b7ee:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b7f2:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b7f4:	f04f 39ff 	mov.w	r9, #4294967295
  natural_order = cinfo->natural_order;
 800b7f8:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	@ 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b7fc:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b7fe:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
  block = MCU_data[0];
 800b802:	682f      	ldr	r7, [r5, #0]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b804:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800b806:	f8d4 819c 	ldr.w	r8, [r4, #412]	@ 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b80a:	fa09 f303 	lsl.w	r3, r9, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b80e:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b810:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800b812:	f1b8 0f00 	cmp.w	r8, #0
 800b816:	dc31      	bgt.n	800b87c <decode_mcu_AC_refine+0xb6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b818:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b81c:	f8d4 5198 	ldr.w	r5, [r4, #408]	@ 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b820:	9303      	str	r3, [sp, #12]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b822:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800b826:	42ab      	cmp	r3, r5
 800b828:	db54      	blt.n	800b8d4 <decode_mcu_AC_refine+0x10e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b82a:	1e6b      	subs	r3, r5, #1
 800b82c:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800b82e:	4545      	cmp	r5, r8
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b834:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b838:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800b83c:	dd05      	ble.n	800b84a <decode_mcu_AC_refine+0x84>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b83e:	4651      	mov	r1, sl
 800b840:	4620      	mov	r0, r4
 800b842:	f7ff fcdf 	bl	800b204 <arith_decode>
 800b846:	2800      	cmp	r0, #0
 800b848:	d144      	bne.n	800b8d4 <decode_mcu_AC_refine+0x10e>
      thiscoef = *block + natural_order[k];
 800b84a:	f85b 9025 	ldr.w	r9, [fp, r5, lsl #2]
      st += 3; k++;
 800b84e:	3501      	adds	r5, #1
      if (*thiscoef) {				/* previously nonzero coef */
 800b850:	f937 1019 	ldrsh.w	r1, [r7, r9, lsl #1]
 800b854:	b1d9      	cbz	r1, 800b88e <decode_mcu_AC_refine+0xc8>
	if (arith_decode(cinfo, st + 2)) {
 800b856:	f10a 0102 	add.w	r1, sl, #2
 800b85a:	4620      	mov	r0, r4
 800b85c:	f7ff fcd2 	bl	800b204 <arith_decode>
 800b860:	2800      	cmp	r0, #0
 800b862:	d0de      	beq.n	800b822 <decode_mcu_AC_refine+0x5c>
	  if (*thiscoef < 0)
 800b864:	f937 1019 	ldrsh.w	r1, [r7, r9, lsl #1]
	    *thiscoef += m1;
 800b868:	f837 3019 	ldrh.w	r3, [r7, r9, lsl #1]
	  if (*thiscoef < 0)
 800b86c:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800b86e:	bfb4      	ite	lt
 800b870:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800b872:	9a01      	ldrge	r2, [sp, #4]
 800b874:	4413      	add	r3, r2
 800b876:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
 800b87a:	e7d2      	b.n	800b822 <decode_mcu_AC_refine+0x5c>
    if ((*block)[natural_order[kex]]) break;
 800b87c:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800b880:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1c7      	bne.n	800b818 <decode_mcu_AC_refine+0x52>
  for (kex = cinfo->Se; kex > 0; kex--)
 800b888:	f108 38ff 	add.w	r8, r8, #4294967295
 800b88c:	e7c1      	b.n	800b812 <decode_mcu_AC_refine+0x4c>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800b88e:	f10a 0101 	add.w	r1, sl, #1
 800b892:	4620      	mov	r0, r4
 800b894:	f7ff fcb6 	bl	800b204 <arith_decode>
 800b898:	b158      	cbz	r0, 800b8b2 <decode_mcu_AC_refine+0xec>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800b89a:	f106 01b8 	add.w	r1, r6, #184	@ 0xb8
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff fcb0 	bl	800b204 <arith_decode>
 800b8a4:	b110      	cbz	r0, 800b8ac <decode_mcu_AC_refine+0xe6>
	  *thiscoef = m1;
 800b8a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b8aa:	e7e4      	b.n	800b876 <decode_mcu_AC_refine+0xb0>
	  *thiscoef = p1;
 800b8ac:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b8b0:	e7e1      	b.n	800b876 <decode_mcu_AC_refine+0xb0>
      if (k > cinfo->Se) {
 800b8b2:	f8d4 219c 	ldr.w	r2, [r4, #412]	@ 0x19c
      st += 3; k++;
 800b8b6:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800b8ba:	42aa      	cmp	r2, r5
 800b8bc:	dac5      	bge.n	800b84a <decode_mcu_AC_refine+0x84>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	2275      	movs	r2, #117	@ 0x75
 800b8c2:	f04f 31ff 	mov.w	r1, #4294967295
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	615a      	str	r2, [r3, #20]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800b8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d2:	6133      	str	r3, [r6, #16]
}
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	b005      	add	sp, #20
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8dc <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800b8dc:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b8e8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800b8ec:	b133      	cbz	r3, 800b8fc <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800b8ee:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b8f0:	b90b      	cbnz	r3, 800b8f6 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800b8f2:	f7ff fe01 	bl	800b4f8 <process_restart>
    entropy->restarts_to_go--;
 800b8f6:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	6373      	str	r3, [r6, #52]	@ 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b8fc:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 800b900:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800b902:	36b8      	adds	r6, #184	@ 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b904:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b906:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b908:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	dc02      	bgt.n	800b916 <decode_mcu_DC_refine+0x3a>
}
 800b910:	2001      	movs	r0, #1
 800b912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800b916:	4631      	mov	r1, r6
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff fc73 	bl	800b204 <arith_decode>
 800b91e:	b120      	cbz	r0, 800b92a <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800b920:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800b924:	8813      	ldrh	r3, [r2, #0]
 800b926:	433b      	orrs	r3, r7
 800b928:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b92a:	3501      	adds	r5, #1
 800b92c:	e7ec      	b.n	800b908 <decode_mcu_DC_refine+0x2c>

0800b92e <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800b92e:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
{
 800b932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b936:	4683      	mov	fp, r0
 800b938:	b085      	sub	sp, #20
 800b93a:	460c      	mov	r4, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b93c:	f8d0 61d0 	ldr.w	r6, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800b940:	b132      	cbz	r2, 800b950 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800b942:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 800b944:	b90a      	cbnz	r2, 800b94a <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800b946:	f7ff fdd7 	bl	800b4f8 <process_restart>
    entropy->restarts_to_go--;
 800b94a:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 800b94c:	3a01      	subs	r2, #1
 800b94e:	6372      	str	r2, [r6, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b950:	6932      	ldr	r2, [r6, #16]
 800b952:	3201      	adds	r2, #1
 800b954:	d01a      	beq.n	800b98c <decode_mcu_AC_first+0x5e>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b956:	f8db 2154 	ldr.w	r2, [fp, #340]	@ 0x154
  block = MCU_data[0];
 800b95a:	6823      	ldr	r3, [r4, #0]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b95c:	f8d2 8018 	ldr.w	r8, [r2, #24]
  natural_order = cinfo->natural_order;
 800b960:	f8db a1ac 	ldr.w	sl, [fp, #428]	@ 0x1ac
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b964:	f8db 5198 	ldr.w	r5, [fp, #408]	@ 0x198
 800b968:	eb06 0988 	add.w	r9, r6, r8, lsl #2
  block = MCU_data[0];
 800b96c:	9300      	str	r3, [sp, #0]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b96e:	f8db 219c 	ldr.w	r2, [fp, #412]	@ 0x19c
 800b972:	42aa      	cmp	r2, r5
 800b974:	db0a      	blt.n	800b98c <decode_mcu_AC_first+0x5e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b976:	1e6a      	subs	r2, r5, #1
 800b978:	f8d9 4078 	ldr.w	r4, [r9, #120]	@ 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800b97c:	4658      	mov	r0, fp
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b97e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b982:	4414      	add	r4, r2
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800b984:	4621      	mov	r1, r4
 800b986:	f7ff fc3d 	bl	800b204 <arith_decode>
 800b98a:	b1b0      	cbz	r0, 800b9ba <decode_mcu_AC_first+0x8c>
}
 800b98c:	2001      	movs	r0, #1
 800b98e:	b005      	add	sp, #20
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800b994:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800b996:	f8db 219c 	ldr.w	r2, [fp, #412]	@ 0x19c
      st += 3; k++;
 800b99a:	3403      	adds	r4, #3
      if (k > cinfo->Se) {
 800b99c:	42aa      	cmp	r2, r5
 800b99e:	da0c      	bge.n	800b9ba <decode_mcu_AC_first+0x8c>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b9a0:	f8db 2000 	ldr.w	r2, [fp]
 800b9a4:	2175      	movs	r1, #117	@ 0x75
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	6151      	str	r1, [r2, #20]
 800b9aa:	f04f 31ff 	mov.w	r1, #4294967295
 800b9ae:	6852      	ldr	r2, [r2, #4]
 800b9b0:	4790      	blx	r2
	    entropy->ct = -1;			/* magnitude overflow */
 800b9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b6:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800b9b8:	e7e8      	b.n	800b98c <decode_mcu_AC_first+0x5e>
    while (arith_decode(cinfo, st + 1) == 0) {
 800b9ba:	1c61      	adds	r1, r4, #1
 800b9bc:	4658      	mov	r0, fp
 800b9be:	f7ff fc21 	bl	800b204 <arith_decode>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d0e6      	beq.n	800b994 <decode_mcu_AC_first+0x66>
    st += 2;
 800b9c6:	1ca7      	adds	r7, r4, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b9c8:	f106 01b8 	add.w	r1, r6, #184	@ 0xb8
 800b9cc:	4658      	mov	r0, fp
 800b9ce:	f7ff fc19 	bl	800b204 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800b9d2:	4639      	mov	r1, r7
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b9d4:	9001      	str	r0, [sp, #4]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800b9d6:	4658      	mov	r0, fp
 800b9d8:	f7ff fc14 	bl	800b204 <arith_decode>
 800b9dc:	4604      	mov	r4, r0
 800b9de:	b1a8      	cbz	r0, 800ba0c <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) {
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	4658      	mov	r0, fp
 800b9e4:	f7ff fc0e 	bl	800b204 <arith_decode>
 800b9e8:	b180      	cbz	r0, 800ba0c <decode_mcu_AC_first+0xde>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b9ea:	eb0b 0108 	add.w	r1, fp, r8
	st = entropy->ac_stats[tbl] +
 800b9ee:	f8d9 2078 	ldr.w	r2, [r9, #120]	@ 0x78
	m <<= 1;
 800b9f2:	0064      	lsls	r4, r4, #1
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b9f4:	f891 1108 	ldrb.w	r1, [r1, #264]	@ 0x108
 800b9f8:	42a9      	cmp	r1, r5
 800b9fa:	bfac      	ite	ge
 800b9fc:	21bd      	movge	r1, #189	@ 0xbd
 800b9fe:	21d9      	movlt	r1, #217	@ 0xd9
	st = entropy->ac_stats[tbl] +
 800ba00:	1857      	adds	r7, r2, r1
	while (arith_decode(cinfo, st)) {
 800ba02:	4639      	mov	r1, r7
 800ba04:	4658      	mov	r0, fp
 800ba06:	f7ff fbfd 	bl	800b204 <arith_decode>
 800ba0a:	b988      	cbnz	r0, 800ba30 <decode_mcu_AC_first+0x102>
    st += 14;
 800ba0c:	f107 010e 	add.w	r1, r7, #14
    v = m;
 800ba10:	4622      	mov	r2, r4
    while (m >>= 1)
 800ba12:	1064      	asrs	r4, r4, #1
 800ba14:	d112      	bne.n	800ba3c <decode_mcu_AC_first+0x10e>
    v += 1; if (sign) v = -v;
 800ba16:	9b01      	ldr	r3, [sp, #4]
 800ba18:	b9db      	cbnz	r3, 800ba52 <decode_mcu_AC_first+0x124>
 800ba1a:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800ba1c:	f8db 01a4 	ldr.w	r0, [fp, #420]	@ 0x1a4
 800ba20:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800ba24:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800ba26:	4082      	lsls	r2, r0
 800ba28:	9b00      	ldr	r3, [sp, #0]
 800ba2a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800ba2e:	e79e      	b.n	800b96e <decode_mcu_AC_first+0x40>
	  if ((m <<= 1) == 0x8000) {
 800ba30:	0064      	lsls	r4, r4, #1
 800ba32:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800ba36:	d0b3      	beq.n	800b9a0 <decode_mcu_AC_first+0x72>
	  st += 1;
 800ba38:	3701      	adds	r7, #1
 800ba3a:	e7e2      	b.n	800ba02 <decode_mcu_AC_first+0xd4>
      if (arith_decode(cinfo, st)) v |= m;
 800ba3c:	4658      	mov	r0, fp
 800ba3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ba42:	f7ff fbdf 	bl	800b204 <arith_decode>
 800ba46:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0e1      	beq.n	800ba12 <decode_mcu_AC_first+0xe4>
 800ba4e:	4322      	orrs	r2, r4
 800ba50:	e7df      	b.n	800ba12 <decode_mcu_AC_first+0xe4>
    v += 1; if (sign) v = -v;
 800ba52:	43d2      	mvns	r2, r2
 800ba54:	e7e2      	b.n	800ba1c <decode_mcu_AC_first+0xee>

0800ba56 <decode_mcu_DC_first>:
{
 800ba56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800ba5a:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800ba5e:	b085      	sub	sp, #20
 800ba60:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800ba62:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800ba66:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800ba68:	b133      	cbz	r3, 800ba78 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800ba6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba6c:	b90b      	cbnz	r3, 800ba72 <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800ba6e:	f7ff fd43 	bl	800b4f8 <process_restart>
    entropy->restarts_to_go--;
 800ba72:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba74:	3b01      	subs	r3, #1
 800ba76:	636b      	str	r3, [r5, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800ba78:	692b      	ldr	r3, [r5, #16]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	d07a      	beq.n	800bb74 <decode_mcu_DC_first+0x11e>
 800ba7e:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ba82:	f04f 0900 	mov.w	r9, #0
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800ba8c:	454b      	cmp	r3, r9
 800ba8e:	dd71      	ble.n	800bb74 <decode_mcu_DC_first+0x11e>
    block = MCU_data[blkn];
 800ba90:	9b03      	ldr	r3, [sp, #12]
    ci = cinfo->MCU_membership[blkn];
 800ba92:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800ba94:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800ba98:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800ba9a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ba9e:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800baa0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800baa4:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 800baa8:	f8d2 2154 	ldr.w	r2, [r2, #340]	@ 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800baac:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800bab0:	6952      	ldr	r2, [r2, #20]
 800bab2:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 800bab6:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800bab8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800baba:	eb00 0b01 	add.w	fp, r0, r1
    if (arith_decode(cinfo, st) == 0)
 800babe:	4620      	mov	r0, r4
 800bac0:	4659      	mov	r1, fp
 800bac2:	f7ff fb9f 	bl	800b204 <arith_decode>
 800bac6:	b958      	cbnz	r0, 800bae0 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800bac8:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800bacc:	f8d4 21a4 	ldr.w	r2, [r4, #420]	@ 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bad0:	f109 0901 	add.w	r9, r9, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800bad4:	f8da 3014 	ldr.w	r3, [sl, #20]
 800bad8:	4093      	lsls	r3, r2
 800bada:	9a02      	ldr	r2, [sp, #8]
 800badc:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bade:	e7d3      	b.n	800ba88 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800bae0:	f10b 0101 	add.w	r1, fp, #1
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7ff fb8d 	bl	800b204 <arith_decode>
      st += 2; st += sign;
 800baea:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800baec:	4606      	mov	r6, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800baee:	4620      	mov	r0, r4
      st += 2; st += sign;
 800baf0:	448b      	add	fp, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800baf2:	4659      	mov	r1, fp
 800baf4:	f7ff fb86 	bl	800b204 <arith_decode>
 800baf8:	4680      	mov	r8, r0
 800bafa:	b138      	cbz	r0, 800bb0c <decode_mcu_DC_first+0xb6>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800bafc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bafe:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800bb02:	4659      	mov	r1, fp
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7ff fb7d 	bl	800b204 <arith_decode>
 800bb0a:	bb18      	cbnz	r0, 800bb54 <decode_mcu_DC_first+0xfe>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800bb0c:	9f00      	ldr	r7, [sp, #0]
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4427      	add	r7, r4
 800bb12:	f897 20e8 	ldrb.w	r2, [r7, #232]	@ 0xe8
 800bb16:	fa03 f202 	lsl.w	r2, r3, r2
 800bb1a:	ebb8 0f62 	cmp.w	r8, r2, asr #1
 800bb1e:	db30      	blt.n	800bb82 <decode_mcu_DC_first+0x12c>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800bb20:	f897 20f8 	ldrb.w	r2, [r7, #248]	@ 0xf8
 800bb24:	fa03 f202 	lsl.w	r2, r3, r2
 800bb28:	ebb8 0f62 	cmp.w	r8, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800bb2c:	bfcc      	ite	gt
 800bb2e:	1cf2      	addgt	r2, r6, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800bb30:	1c72      	addle	r2, r6, #1
 800bb32:	0092      	lsls	r2, r2, #2
      st += 14;
 800bb34:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800bb38:	4647      	mov	r7, r8
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800bb3a:	f8ca 2024 	str.w	r2, [sl, #36]	@ 0x24
      while (m >>= 1)
 800bb3e:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bb42:	d120      	bne.n	800bb86 <decode_mcu_DC_first+0x130>
      v += 1; if (sign) v = -v;
 800bb44:	bb4e      	cbnz	r6, 800bb9a <decode_mcu_DC_first+0x144>
 800bb46:	3701      	adds	r7, #1
      entropy->last_dc_val[ci] += v;
 800bb48:	f8da 2014 	ldr.w	r2, [sl, #20]
 800bb4c:	443a      	add	r2, r7
 800bb4e:	f8ca 2014 	str.w	r2, [sl, #20]
 800bb52:	e7bb      	b.n	800bacc <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800bb54:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800bb58:	f5b8 4f00 	cmp.w	r8, #32768	@ 0x8000
 800bb5c:	d10e      	bne.n	800bb7c <decode_mcu_DC_first+0x126>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	2275      	movs	r2, #117	@ 0x75
 800bb62:	f04f 31ff 	mov.w	r1, #4294967295
 800bb66:	4620      	mov	r0, r4
 800bb68:	615a      	str	r2, [r3, #20]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb72:	612b      	str	r3, [r5, #16]
}
 800bb74:	2001      	movs	r0, #1
 800bb76:	b005      	add	sp, #20
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800bb7c:	f10b 0b01 	add.w	fp, fp, #1
 800bb80:	e7bf      	b.n	800bb02 <decode_mcu_DC_first+0xac>
 800bb82:	2200      	movs	r2, #0
 800bb84:	e7d6      	b.n	800bb34 <decode_mcu_DC_first+0xde>
	if (arith_decode(cinfo, st)) v |= m;
 800bb86:	4620      	mov	r0, r4
 800bb88:	9100      	str	r1, [sp, #0]
 800bb8a:	f7ff fb3b 	bl	800b204 <arith_decode>
 800bb8e:	9900      	ldr	r1, [sp, #0]
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0d4      	beq.n	800bb3e <decode_mcu_DC_first+0xe8>
 800bb94:	ea47 0708 	orr.w	r7, r7, r8
 800bb98:	e7d1      	b.n	800bb3e <decode_mcu_DC_first+0xe8>
      v += 1; if (sign) v = -v;
 800bb9a:	43ff      	mvns	r7, r7
 800bb9c:	e7d4      	b.n	800bb48 <decode_mcu_DC_first+0xf2>
	...

0800bba0 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bba0:	6843      	ldr	r3, [r0, #4]
 800bba2:	22bc      	movs	r2, #188	@ 0xbc
 800bba4:	2101      	movs	r1, #1
 800bba6:	681b      	ldr	r3, [r3, #0]
{
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bbac:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800bbae:	4b14      	ldr	r3, [pc, #80]	@ (800bc00 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bbb0:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800bbb2:	f8c4 01d0 	str.w	r0, [r4, #464]	@ 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800bbb6:	2280      	movs	r2, #128	@ 0x80
  entropy->pub.start_pass = start_pass;
 800bbb8:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	f01f fac3 	bl	802b148 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800bbc2:	2371      	movs	r3, #113	@ 0x71
 800bbc4:	f885 30b8 	strb.w	r3, [r5, #184]	@ 0xb8

  if (cinfo->progressive_mode) {
 800bbc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800bbcc:	b17b      	cbz	r3, 800bbee <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bbce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	6863      	ldr	r3, [r4, #4]
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800bbd8:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4798      	blx	r3
 800bbde:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800bbe0:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800bbe4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bbe6:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800bbea:	42ab      	cmp	r3, r5
 800bbec:	dc00      	bgt.n	800bbf0 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800bbf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbf4:	21ff      	movs	r1, #255	@ 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800bbf6:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800bbf8:	f01f faa6 	bl	802b148 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800bbfc:	e7f2      	b.n	800bbe4 <jinit_arith_decoder+0x44>
 800bbfe:	bf00      	nop
 800bc00:	0800b2d9 	.word	0x0800b2d9

0800bc04 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800bc04:	4770      	bx	lr
	...

0800bc08 <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800bc08:	6803      	ldr	r3, [r0, #0]
 800bc0a:	227b      	movs	r2, #123	@ 0x7b
 800bc0c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800bc14:	615a      	str	r2, [r3, #20]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800bc1a:	69a3      	ldr	r3, [r4, #24]
 800bc1c:	4a02      	ldr	r2, [pc, #8]	@ (800bc28 <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800bc1e:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800bc20:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800bc22:	2202      	movs	r2, #2
 800bc24:	605a      	str	r2, [r3, #4]
}
 800bc26:	bd10      	pop	{r4, pc}
 800bc28:	0802e6ec 	.word	0x0802e6ec

0800bc2c <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800bc2c:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800bc2e:	1e0c      	subs	r4, r1, #0
{
 800bc30:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800bc32:	dd08      	ble.n	800bc46 <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800bc34:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800bc36:	686b      	ldr	r3, [r5, #4]
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	db05      	blt.n	800bc48 <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800bc3c:	682a      	ldr	r2, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800bc3e:	1b1b      	subs	r3, r3, r4
    src->next_input_byte += (size_t) num_bytes;
 800bc40:	4422      	add	r2, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800bc42:	606b      	str	r3, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800bc44:	602a      	str	r2, [r5, #0]
  }
}
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
      num_bytes -= (long) src->bytes_in_buffer;
 800bc48:	1ae4      	subs	r4, r4, r3
      (void) (*src->fill_input_buffer) (cinfo);
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	68eb      	ldr	r3, [r5, #12]
 800bc4e:	4798      	blx	r3
 800bc50:	e7f1      	b.n	800bc36 <skip_input_data+0xa>

0800bc52 <term_source>:
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr cinfo)
 800bc52:	4770      	bx	lr

0800bc54 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4604      	mov	r4, r0
 800bc58:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	b101      	cbz	r1, 800bc60 <jpeg_mem_src+0xc>
 800bc5e:	b92a      	cbnz	r2, 800bc6c <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	222b      	movs	r2, #43	@ 0x2b
 800bc64:	4620      	mov	r0, r4
 800bc66:	615a      	str	r2, [r3, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800bc6c:	69a1      	ldr	r1, [r4, #24]
 800bc6e:	b929      	cbnz	r1, 800bc7c <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800bc70:	6863      	ldr	r3, [r4, #4]
 800bc72:	221c      	movs	r2, #28
 800bc74:	4620      	mov	r0, r4
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800bc7a:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800bc7c:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800bc7e:	4a06      	ldr	r2, [pc, #24]	@ (800bc98 <jpeg_mem_src+0x44>)
 800bc80:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800bc82:	4a06      	ldr	r2, [pc, #24]	@ (800bc9c <jpeg_mem_src+0x48>)
 800bc84:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800bc86:	4a06      	ldr	r2, [pc, #24]	@ (800bca0 <jpeg_mem_src+0x4c>)
 800bc88:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800bc8a:	4a06      	ldr	r2, [pc, #24]	@ (800bca4 <jpeg_mem_src+0x50>)
 800bc8c:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800bc8e:	4a06      	ldr	r2, [pc, #24]	@ (800bca8 <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800bc90:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800bc94:	619a      	str	r2, [r3, #24]
}
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	0800bc05 	.word	0x0800bc05
 800bc9c:	0800bc09 	.word	0x0800bc09
 800bca0:	0800bc2d 	.word	0x0800bc2d
 800bca4:	0800fdb1 	.word	0x0800fdb1
 800bca8:	0800bc53 	.word	0x0800bc53

0800bcac <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800bcac:	f8d0 2150 	ldr.w	r2, [r0, #336]	@ 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bcb0:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800bcb4:	2a01      	cmp	r2, #1
 800bcb6:	dc0f      	bgt.n	800bcd8 <start_iMCU_row+0x2c>
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800bcb8:	f8d0 2148 	ldr.w	r2, [r0, #328]	@ 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800bcbc:	f8d0 1154 	ldr.w	r1, [r0, #340]	@ 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800bcc0:	3a01      	subs	r2, #1
 800bcc2:	f8d0 0094 	ldr.w	r0, [r0, #148]	@ 0x94
 800bcc6:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800bcc8:	bf34      	ite	cc
 800bcca:	68ca      	ldrcc	r2, [r1, #12]
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800bccc:	6cca      	ldrcs	r2, [r1, #76]	@ 0x4c
    coef->MCU_rows_per_iMCU_row = 1;
 800bcce:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800bcd0:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800bcd2:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800bcd6:	4770      	bx	lr
 800bcd8:	2201      	movs	r2, #1
 800bcda:	e7f8      	b.n	800bcce <start_iMCU_row+0x22>

0800bcdc <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
  start_iMCU_row(cinfo);
 800bce2:	f7ff bfe3 	b.w	800bcac <start_iMCU_row>

0800bce6 <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800bce6:	2000      	movs	r0, #0
 800bce8:	4770      	bx	lr

0800bcea <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800bcea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcee:	f500 7ba8 	add.w	fp, r0, #336	@ 0x150
 800bcf2:	b08f      	sub	sp, #60	@ 0x3c
 800bcf4:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bcf6:	f8d0 51c0 	ldr.w	r5, [r0, #448]	@ 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bcfa:	465f      	mov	r7, fp
 800bcfc:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800bcfe:	f04f 0801 	mov.w	r8, #1
 800bd02:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bd06:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800bd0a:	42b3      	cmp	r3, r6
 800bd0c:	dc13      	bgt.n	800bd36 <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bd0e:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800bd10:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bd14:	69eb      	ldr	r3, [r5, #28]
 800bd16:	42b3      	cmp	r3, r6
 800bd18:	dc22      	bgt.n	800bd60 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800bd1a:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800bd1e:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
 800bd22:	3301      	adds	r3, #1
 800bd24:	4293      	cmp	r3, r2
 800bd26:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800bd2a:	d271      	bcs.n	800be10 <consume_data+0x126>
    start_iMCU_row(cinfo);
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f7ff ffbd 	bl	800bcac <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800bd32:	2003      	movs	r0, #3
 800bd34:	e044      	b.n	800bdc0 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800bd36:	f857 1f04 	ldr.w	r1, [r7, #4]!
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800bd3a:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800bd3c:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800bd3e:	6849      	ldr	r1, [r1, #4]
 800bd40:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800bd44:	3112      	adds	r1, #18
 800bd46:	f8cd 8000 	str.w	r8, [sp]
 800bd4a:	435a      	muls	r2, r3
 800bd4c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800bd50:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bd54:	4620      	mov	r0, r4
 800bd56:	47d0      	blx	sl
 800bd58:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	e7d2      	b.n	800bd06 <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800bd60:	00b3      	lsls	r3, r6, #2
 800bd62:	696f      	ldr	r7, [r5, #20]
 800bd64:	9308      	str	r3, [sp, #32]
 800bd66:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 800bd6a:	42bb      	cmp	r3, r7
 800bd6c:	f04f 0300 	mov.w	r3, #0
 800bd70:	d94b      	bls.n	800be0a <consume_data+0x120>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bd72:	f8d4 2150 	ldr.w	r2, [r4, #336]	@ 0x150
 800bd76:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800bd78:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bd7a:	9206      	str	r2, [sp, #24]
 800bd7c:	e013      	b.n	800bda6 <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800bd7e:	f85a 2f04 	ldr.w	r2, [sl, #4]!
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bd82:	f04f 0c00 	mov.w	ip, #0
 800bd86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd8a:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	@ 0x38
 800bd8e:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800bd90:	fb07 f20e 	mul.w	r2, r7, lr
 800bd94:	01d2      	lsls	r2, r2, #7
 800bd96:	9204      	str	r2, [sp, #16]
 800bd98:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800bd9c:	9209      	str	r2, [sp, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bd9e:	9a05      	ldr	r2, [sp, #20]
 800bda0:	4562      	cmp	r2, ip
 800bda2:	dc10      	bgt.n	800bdc6 <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bda4:	3301      	adds	r3, #1
 800bda6:	9a06      	ldr	r2, [sp, #24]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	dce8      	bgt.n	800bd7e <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800bdac:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 800bdb0:	f105 0120 	add.w	r1, r5, #32
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	4798      	blx	r3
 800bdba:	bb20      	cbnz	r0, 800be06 <consume_data+0x11c>
	coef->MCU_ctr = MCU_col_num;
 800bdbc:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800bdc0:	b00f      	add	sp, #60	@ 0x3c
 800bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800bdc6:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800bdca:	9904      	ldr	r1, [sp, #16]
 800bdcc:	f852 2008 	ldr.w	r2, [r2, r8]
 800bdd0:	440a      	add	r2, r1
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800bdd2:	2100      	movs	r1, #0
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800bdd4:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800bdd6:	9a03      	ldr	r2, [sp, #12]
 800bdd8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800bddc:	3207      	adds	r2, #7
 800bdde:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800bde2:	9807      	ldr	r0, [sp, #28]
 800bde4:	458e      	cmp	lr, r1
 800bde6:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 800bdea:	dc08      	bgt.n	800bdfe <consume_data+0x114>
 800bdec:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bdee:	f10c 0c01 	add.w	ip, ip, #1
 800bdf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdf4:	f108 0804 	add.w	r8, r8, #4
 800bdf8:	4411      	add	r1, r2
 800bdfa:	9103      	str	r1, [sp, #12]
 800bdfc:	e7cf      	b.n	800bd9e <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800bdfe:	3101      	adds	r1, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800be00:	f842 0f04 	str.w	r0, [r2, #4]!
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800be04:	e7ed      	b.n	800bde2 <consume_data+0xf8>
	 MCU_col_num++) {
 800be06:	3701      	adds	r7, #1
 800be08:	e7ad      	b.n	800bd66 <consume_data+0x7c>
       yoffset++) {
 800be0a:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800be0c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800be0e:	e781      	b.n	800bd14 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800be10:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800be14:	4620      	mov	r0, r4
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800be1a:	2004      	movs	r0, #4
 800be1c:	e7d0      	b.n	800bdc0 <consume_data+0xd6>

0800be1e <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800be1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be22:	4604      	mov	r4, r0
 800be24:	b089      	sub	sp, #36	@ 0x24
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800be26:	f8d0 61c0 	ldr.w	r6, [r0, #448]	@ 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800be2a:	f8d0 5148 	ldr.w	r5, [r0, #328]	@ 0x148
{
 800be2e:	9105      	str	r1, [sp, #20]
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800be30:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800be34:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800be38:	429a      	cmp	r2, r3
 800be3a:	db1d      	blt.n	800be78 <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800be3c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800be40:	d103      	bne.n	800be4a <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800be42:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800be46:	429a      	cmp	r2, r3
 800be48:	d916      	bls.n	800be78 <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800be4a:	f105 3bff 	add.w	fp, r5, #4294967295
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800be4e:	f106 0348 	add.w	r3, r6, #72	@ 0x48
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be52:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
 800be56:	2700      	movs	r7, #0
    buffer = (*cinfo->mem->access_virt_barray)
 800be58:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800be5c:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be60:	42bb      	cmp	r3, r7
 800be62:	dc13      	bgt.n	800be8c <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800be64:	1c50      	adds	r0, r2, #1
 800be66:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800be6a:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
 800be6e:	4298      	cmp	r0, r3
 800be70:	bf34      	ite	cc
 800be72:	2003      	movcc	r0, #3
 800be74:	2004      	movcs	r0, #4
 800be76:	e006      	b.n	800be86 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800be78:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800be7c:	4620      	mov	r0, r4
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4798      	blx	r3
 800be82:	2800      	cmp	r0, #0
 800be84:	d1d4      	bne.n	800be30 <decompress_data+0x12>
}
 800be86:	b009      	add	sp, #36	@ 0x24
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800be8c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800be8e:	b913      	cbnz	r3, 800be96 <decompress_data+0x78>
       ci++, compptr++) {
 800be90:	3701      	adds	r7, #1
 800be92:	3558      	adds	r5, #88	@ 0x58
 800be94:	e7e1      	b.n	800be5a <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800be96:	6861      	ldr	r1, [r4, #4]
 800be98:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800be9a:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800be9c:	9000      	str	r0, [sp, #0]
 800be9e:	4620      	mov	r0, r4
 800bea0:	6a0e      	ldr	r6, [r1, #32]
 800bea2:	435a      	muls	r2, r3
 800bea4:	9906      	ldr	r1, [sp, #24]
 800bea6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800beaa:	47b0      	blx	r6
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800beac:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    buffer = (*cinfo->mem->access_virt_barray)
 800beb0:	9003      	str	r0, [sp, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800beb2:	455b      	cmp	r3, fp
 800beb4:	68eb      	ldr	r3, [r5, #12]
 800beb6:	d221      	bcs.n	800befc <decompress_data+0xde>
      block_rows = compptr->v_samp_factor;
 800beb8:	9302      	str	r3, [sp, #8]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800beba:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bebe:	f04f 0800 	mov.w	r8, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800bec2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	461e      	mov	r6, r3
    output_ptr = output_buf[ci];
 800beca:	9b05      	ldr	r3, [sp, #20]
 800becc:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bed0:	9a02      	ldr	r2, [sp, #8]
 800bed2:	4590      	cmp	r8, r2
 800bed4:	dadc      	bge.n	800be90 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800bed6:	9a03      	ldr	r2, [sp, #12]
      output_col = 0;
 800bed8:	f04f 0a00 	mov.w	sl, #0
      buffer_ptr = buffer[block_row];
 800bedc:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bee0:	46d1      	mov	r9, sl
      buffer_ptr = buffer[block_row];
 800bee2:	9204      	str	r2, [sp, #16]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bee4:	69e9      	ldr	r1, [r5, #28]
 800bee6:	9a04      	ldr	r2, [sp, #16]
 800bee8:	4549      	cmp	r1, r9
 800beea:	eb02 12c9 	add.w	r2, r2, r9, lsl #7
 800beee:	d80f      	bhi.n	800bf10 <decompress_data+0xf2>
      output_ptr += compptr->DCT_v_scaled_size;
 800bef0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bef2:	f108 0801 	add.w	r8, r8, #1
      output_ptr += compptr->DCT_v_scaled_size;
 800bef6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800befa:	e7e9      	b.n	800bed0 <decompress_data+0xb2>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800befc:	6a2e      	ldr	r6, [r5, #32]
 800befe:	fbb6 f2f3 	udiv	r2, r6, r3
 800bf02:	fb03 6212 	mls	r2, r3, r2, r6
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800bf06:	2a00      	cmp	r2, #0
 800bf08:	bf08      	it	eq
 800bf0a:	461a      	moveq	r2, r3
 800bf0c:	9202      	str	r2, [sp, #8]
 800bf0e:	e7d4      	b.n	800beba <decompress_data+0x9c>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800bf10:	f8cd a000 	str.w	sl, [sp]
 800bf14:	4629      	mov	r1, r5
 800bf16:	9307      	str	r3, [sp, #28]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	47b0      	blx	r6
	output_col += compptr->DCT_h_scaled_size;
 800bf1c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bf1e:	f109 0901 	add.w	r9, r9, #1
 800bf22:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800bf24:	4492      	add	sl, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bf26:	e7dd      	b.n	800bee4 <decompress_data+0xc6>

0800bf28 <start_output_pass>:
{
 800bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bf2c:	f8d0 51c0 	ldr.w	r5, [r0, #448]	@ 0x1c0
{
 800bf30:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800bf32:	692b      	ldr	r3, [r5, #16]
 800bf34:	b323      	cbz	r3, 800bf80 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800bf36:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d04b      	beq.n	800bfd4 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800bf3c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d047      	beq.n	800bfd4 <start_output_pass+0xac>
 800bf44:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d043      	beq.n	800bfd4 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800bf4c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bf4e:	b93b      	cbnz	r3, 800bf60 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bf50:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800bf52:	2118      	movs	r1, #24
 800bf54:	6843      	ldr	r3, [r0, #4]
 800bf56:	434a      	muls	r2, r1
 800bf58:	2101      	movs	r1, #1
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800bf5e:	6728      	str	r0, [r5, #112]	@ 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf60:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800bf62:	f8d5 c070 	ldr.w	ip, [r5, #112]	@ 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf66:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 800bf6a:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800bf6e:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf70:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800bf72:	fb0e c703 	mla	r7, lr, r3, ip
 800bf76:	4293      	cmp	r3, r2
 800bf78:	db07      	blt.n	800bf8a <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800bf7a:	b359      	cbz	r1, 800bfd4 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800bf7c:	4b16      	ldr	r3, [pc, #88]	@ (800bfd8 <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800bf7e:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
}
 800bf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800bf8a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bf8c:	b312      	cbz	r2, 800bfd4 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800bf8e:	8816      	ldrh	r6, [r2, #0]
 800bf90:	b306      	cbz	r6, 800bfd4 <start_output_pass+0xac>
 800bf92:	8856      	ldrh	r6, [r2, #2]
 800bf94:	b1f6      	cbz	r6, 800bfd4 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800bf96:	8a16      	ldrh	r6, [r2, #16]
 800bf98:	b1e6      	cbz	r6, 800bfd4 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800bf9a:	8c16      	ldrh	r6, [r2, #32]
 800bf9c:	b1d6      	cbz	r6, 800bfd4 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800bf9e:	8a56      	ldrh	r6, [r2, #18]
 800bfa0:	b1c6      	cbz	r6, 800bfd4 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800bfa2:	8892      	ldrh	r2, [r2, #4]
 800bfa4:	b1b2      	cbz	r2, 800bfd4 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800bfa6:	f8d4 60a0 	ldr.w	r6, [r4, #160]	@ 0xa0
 800bfaa:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800bfac:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800bfae:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	db0e      	blt.n	800bfd4 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800bfb6:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800bfb8:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800bfbc:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800bfbe:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800bfc2:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800bfc6:	bf18      	it	ne
 800bfc8:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800bfca:	2a06      	cmp	r2, #6
 800bfcc:	d1f4      	bne.n	800bfb8 <start_output_pass+0x90>
       ci++, compptr++) {
 800bfce:	3301      	adds	r3, #1
 800bfd0:	3058      	adds	r0, #88	@ 0x58
 800bfd2:	e7cd      	b.n	800bf70 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800bfd4:	4b01      	ldr	r3, [pc, #4]	@ (800bfdc <start_output_pass+0xb4>)
 800bfd6:	e7d2      	b.n	800bf7e <start_output_pass+0x56>
 800bfd8:	0800c157 	.word	0x0800c157
 800bfdc:	0800be1f 	.word	0x0800be1f

0800bfe0 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bfe0:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
{
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bfe8:	3b01      	subs	r3, #1
{
 800bfea:	b08f      	sub	sp, #60	@ 0x3c
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bfec:	f8d0 51c0 	ldr.w	r5, [r0, #448]	@ 0x1c0
{
 800bff0:	4604      	mov	r4, r0
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bff2:	9307      	str	r3, [sp, #28]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bff4:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
{
 800bff8:	910a      	str	r1, [sp, #40]	@ 0x28
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bffa:	3b01      	subs	r3, #1
 800bffc:	9308      	str	r3, [sp, #32]
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bffe:	69ab      	ldr	r3, [r5, #24]
 800c000:	9302      	str	r3, [sp, #8]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800c002:	f105 0320 	add.w	r3, r5, #32
 800c006:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800c008:	69eb      	ldr	r3, [r5, #28]
 800c00a:	9a02      	ldr	r2, [sp, #8]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	dc13      	bgt.n	800c038 <decompress_onepass+0x58>
  cinfo->output_iMCU_row++;
 800c010:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800c014:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
  cinfo->output_iMCU_row++;
 800c018:	3301      	adds	r3, #1
 800c01a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800c01e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800c022:	3301      	adds	r3, #1
 800c024:	4293      	cmp	r3, r2
 800c026:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800c02a:	f080 808d 	bcs.w	800c148 <decompress_onepass+0x168>
    start_iMCU_row(cinfo);
 800c02e:	4620      	mov	r0, r4
 800c030:	f7ff fe3c 	bl	800bcac <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800c034:	2003      	movs	r0, #3
 800c036:	e029      	b.n	800c08c <decompress_onepass+0xac>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800c038:	696f      	ldr	r7, [r5, #20]
 800c03a:	9b07      	ldr	r3, [sp, #28]
 800c03c:	429f      	cmp	r7, r3
 800c03e:	d905      	bls.n	800c04c <decompress_onepass+0x6c>
    coef->MCU_ctr = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	3301      	adds	r3, #1
 800c048:	9302      	str	r3, [sp, #8]
 800c04a:	e7dd      	b.n	800c008 <decompress_onepass+0x28>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800c04c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800c050:	b133      	cbz	r3, 800c060 <decompress_onepass+0x80>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800c052:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 800c056:	2100      	movs	r1, #0
 800c058:	6a28      	ldr	r0, [r5, #32]
 800c05a:	01d2      	lsls	r2, r2, #7
 800c05c:	f01f f874 	bl	802b148 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800c060:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 800c064:	4620      	mov	r0, r4
 800c066:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	4798      	blx	r3
 800c06c:	b158      	cbz	r0, 800c086 <decompress_onepass+0xa6>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c06e:	f04f 0b00 	mov.w	fp, #0
 800c072:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
      blkn = 0;			/* index of current DCT block within MCU */
 800c076:	46da      	mov	sl, fp
 800c078:	9304      	str	r3, [sp, #16]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c07a:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800c07e:	455b      	cmp	r3, fp
 800c080:	dc07      	bgt.n	800c092 <decompress_onepass+0xb2>
	 MCU_col_num++) {
 800c082:	3701      	adds	r7, #1
 800c084:	e7d9      	b.n	800c03a <decompress_onepass+0x5a>
	coef->MCU_vert_offset = yoffset;
 800c086:	9b02      	ldr	r3, [sp, #8]
	coef->MCU_ctr = MCU_col_num;
 800c088:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800c08c:	b00f      	add	sp, #60	@ 0x3c
 800c08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800c098:	9304      	str	r3, [sp, #16]
	if (! compptr->component_needed) {
 800c09a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c09c:	b923      	cbnz	r3, 800c0a8 <decompress_onepass+0xc8>
	  blkn += compptr->MCU_blocks;
 800c09e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0a0:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c0a2:	f10b 0b01 	add.w	fp, fp, #1
 800c0a6:	e7e8      	b.n	800c07a <decompress_onepass+0x9a>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800c0a8:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c0aa:	f04f 0900 	mov.w	r9, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800c0ae:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800c0b2:	9802      	ldr	r0, [sp, #8]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800c0b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800c0bc:	9b07      	ldr	r3, [sp, #28]
 800c0be:	429f      	cmp	r7, r3
 800c0c0:	bf34      	ite	cc
 800c0c2:	6b8b      	ldrcc	r3, [r1, #56]	@ 0x38
 800c0c4:	6c8b      	ldrcs	r3, [r1, #72]	@ 0x48
 800c0c6:	9305      	str	r3, [sp, #20]
	  yoffset * compptr->DCT_v_scaled_size;
 800c0c8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c0ca:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800c0cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c0d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800c0d6:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
 800c0d8:	437a      	muls	r2, r7
 800c0da:	9209      	str	r2, [sp, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c0dc:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800c0de:	454a      	cmp	r2, r9
 800c0e0:	dddf      	ble.n	800c0a2 <decompress_onepass+0xc2>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800c0e2:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800c0e6:	9808      	ldr	r0, [sp, #32]
 800c0e8:	4282      	cmp	r2, r0
 800c0ea:	d304      	bcc.n	800c0f6 <decompress_onepass+0x116>
 800c0ec:	9a02      	ldr	r2, [sp, #8]
 800c0ee:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 800c0f0:	444a      	add	r2, r9
 800c0f2:	4290      	cmp	r0, r2
 800c0f4:	dd0d      	ble.n	800c112 <decompress_onepass+0x132>
 800c0f6:	f10a 4880 	add.w	r8, sl, #1073741824	@ 0x40000000
 800c0fa:	f108 0807 	add.w	r8, r8, #7
 800c0fe:	eb05 0288 	add.w	r2, r5, r8, lsl #2
{
 800c102:	f04f 0800 	mov.w	r8, #0
 800c106:	9206      	str	r2, [sp, #24]
 800c108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c10a:	9203      	str	r2, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800c10c:	9a05      	ldr	r2, [sp, #20]
 800c10e:	4590      	cmp	r8, r2
 800c110:	db07      	blt.n	800c122 <decompress_onepass+0x142>
	  blkn += compptr->MCU_width;
 800c112:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c114:	f109 0901 	add.w	r9, r9, #1
	  blkn += compptr->MCU_width;
 800c118:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800c11a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800c11c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c120:	e7dc      	b.n	800c0dc <decompress_onepass+0xfc>
	      (*inverse_DCT) (cinfo, compptr,
 800c122:	9806      	ldr	r0, [sp, #24]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800c124:	f108 0801 	add.w	r8, r8, #1
	      (*inverse_DCT) (cinfo, compptr,
 800c128:	9a03      	ldr	r2, [sp, #12]
 800c12a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c12c:	9200      	str	r2, [sp, #0]
 800c12e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800c132:	910c      	str	r1, [sp, #48]	@ 0x30
 800c134:	9006      	str	r0, [sp, #24]
 800c136:	4620      	mov	r0, r4
 800c138:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800c13a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c13c:	9b03      	ldr	r3, [sp, #12]
 800c13e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800c140:	4413      	add	r3, r2
 800c142:	9303      	str	r3, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800c144:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c146:	e7e1      	b.n	800c10c <decompress_onepass+0x12c>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800c148:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800c14c:	4620      	mov	r0, r4
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800c152:	2004      	movs	r0, #4
 800c154:	e79a      	b.n	800c08c <decompress_onepass+0xac>

0800c156 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800c156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c15a:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
{
 800c15e:	b0c3      	sub	sp, #268	@ 0x10c
 800c160:	4605      	mov	r5, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c162:	f8d0 4148 	ldr.w	r4, [r0, #328]	@ 0x148
{
 800c166:	9120      	str	r1, [sp, #128]	@ 0x80
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c168:	931c      	str	r3, [sp, #112]	@ 0x70
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800c16a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800c16e:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800c172:	428b      	cmp	r3, r1
 800c174:	dc03      	bgt.n	800c17e <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800c176:	f8d5 21c8 	ldr.w	r2, [r5, #456]	@ 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800c17a:	6950      	ldr	r0, [r2, #20]
 800c17c:	b198      	cbz	r0, 800c1a6 <decompress_smooth_data+0x50>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c17e:	1e63      	subs	r3, r4, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c180:	f8d5 60d8 	ldr.w	r6, [r5, #216]	@ 0xd8
 800c184:	2700      	movs	r7, #0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c186:	931e      	str	r3, [sp, #120]	@ 0x78
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c188:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800c18a:	f8d5 209c 	ldr.w	r2, [r5, #156]	@ 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c18e:	42bb      	cmp	r3, r7
 800c190:	dc1e      	bgt.n	800c1d0 <decompress_smooth_data+0x7a>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800c192:	1c50      	adds	r0, r2, #1
 800c194:	f8d5 3148 	ldr.w	r3, [r5, #328]	@ 0x148
 800c198:	f8c5 009c 	str.w	r0, [r5, #156]	@ 0x9c
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
 800c19c:	4298      	cmp	r0, r3
 800c19e:	bf34      	ite	cc
 800c1a0:	2003      	movcc	r0, #3
 800c1a2:	2004      	movcs	r0, #4
 800c1a4:	e011      	b.n	800c1ca <decompress_smooth_data+0x74>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800c1a6:	428b      	cmp	r3, r1
 800c1a8:	d10a      	bne.n	800c1c0 <decompress_smooth_data+0x6a>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800c1aa:	f8d5 1198 	ldr.w	r1, [r5, #408]	@ 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800c1ae:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800c1b2:	2900      	cmp	r1, #0
 800c1b4:	bf08      	it	eq
 800c1b6:	3301      	addeq	r3, #1
 800c1b8:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800c1bc:	4299      	cmp	r1, r3
 800c1be:	d8de      	bhi.n	800c17e <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800c1c0:	6813      	ldr	r3, [r2, #0]
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	4798      	blx	r3
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d1cf      	bne.n	800c16a <decompress_smooth_data+0x14>
}
 800c1ca:	b043      	add	sp, #268	@ 0x10c
 800c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800c1d0:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800c1d2:	b913      	cbnz	r3, 800c1da <decompress_smooth_data+0x84>
       ci++, compptr++) {
 800c1d4:	3701      	adds	r7, #1
 800c1d6:	3658      	adds	r6, #88	@ 0x58
 800c1d8:	e7d6      	b.n	800c188 <decompress_smooth_data+0x32>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800c1da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      block_rows = compptr->v_samp_factor;
 800c1dc:	68f0      	ldr	r0, [r6, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	f240 8158 	bls.w	800c494 <decompress_smooth_data+0x33e>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800c1e4:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800c1e6:	4681      	mov	r9, r0
      last_row = FALSE;
 800c1e8:	2100      	movs	r1, #0
      last_row = TRUE;
 800c1ea:	910d      	str	r1, [sp, #52]	@ 0x34
      buffer = (*cinfo->mem->access_virt_barray)
 800c1ec:	6869      	ldr	r1, [r5, #4]
 800c1ee:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800c1f2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c1f4:	3148      	adds	r1, #72	@ 0x48
 800c1f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800c1fa:	2a00      	cmp	r2, #0
 800c1fc:	f000 8158 	beq.w	800c4b0 <decompress_smooth_data+0x35a>
      buffer = (*cinfo->mem->access_virt_barray)
 800c200:	2400      	movs	r4, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800c202:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800c204:	4403      	add	r3, r0
 800c206:	4342      	muls	r2, r0
 800c208:	4628      	mov	r0, r5
 800c20a:	9400      	str	r4, [sp, #0]
 800c20c:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800c20e:	68f3      	ldr	r3, [r6, #12]
      first_row = FALSE;
 800c210:	941b      	str	r4, [sp, #108]	@ 0x6c
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800c212:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800c216:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c218:	2218      	movs	r2, #24
 800c21a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c21c:	fb02 3307 	mla	r3, r2, r7, r3
 800c220:	9303      	str	r3, [sp, #12]
    quanttbl = compptr->quant_table;
 800c222:	6d33      	ldr	r3, [r6, #80]	@ 0x50
    Q00 = quanttbl->quantval[0];
 800c224:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800c226:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800c22a:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800c22e:	8c1c      	ldrh	r4, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800c230:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800c232:	9204      	str	r2, [sp, #16]
    Q02 = quanttbl->quantval[Q02_POS];
 800c234:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800c236:	f8d5 31d4 	ldr.w	r3, [r5, #468]	@ 0x1d4
 800c23a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	931f      	str	r3, [sp, #124]	@ 0x7c
    output_ptr = output_buf[ci];
 800c242:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c244:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800c248:	930c      	str	r3, [sp, #48]	@ 0x30
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c24a:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800c24e:	9311      	str	r3, [sp, #68]	@ 0x44
 800c250:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800c254:	9312      	str	r3, [sp, #72]	@ 0x48
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c256:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800c25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c25c:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c260:	9314      	str	r3, [sp, #80]	@ 0x50
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c262:	01e3      	lsls	r3, r4, #7
 800c264:	9315      	str	r3, [sp, #84]	@ 0x54
 800c266:	0223      	lsls	r3, r4, #8
 800c268:	9316      	str	r3, [sp, #88]	@ 0x58
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c26a:	01cb      	lsls	r3, r1, #7
 800c26c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c26e:	020b      	lsls	r3, r1, #8
 800c270:	9318      	str	r3, [sp, #96]	@ 0x60
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c272:	01d3      	lsls	r3, r2, #7
 800c274:	9319      	str	r3, [sp, #100]	@ 0x64
 800c276:	0213      	lsls	r3, r2, #8
 800c278:	931a      	str	r3, [sp, #104]	@ 0x68
 800c27a:	1f03      	subs	r3, r0, #4
 800c27c:	930b      	str	r3, [sp, #44]	@ 0x2c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c27e:	2300      	movs	r3, #0
 800c280:	9302      	str	r3, [sp, #8]
      if (last_row && block_row == block_rows-1)
 800c282:	f109 33ff 	add.w	r3, r9, #4294967295
 800c286:	9321      	str	r3, [sp, #132]	@ 0x84
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	454b      	cmp	r3, r9
 800c28c:	daa2      	bge.n	800c1d4 <decompress_smooth_data+0x7e>
      buffer_ptr = buffer[block_row];
 800c28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c290:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800c294:	930b      	str	r3, [sp, #44]	@ 0x2c
      if (first_row && block_row == 0)
 800c296:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c298:	b11b      	cbz	r3, 800c2a2 <decompress_smooth_data+0x14c>
 800c29a:	9b02      	ldr	r3, [sp, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f000 810d 	beq.w	800c4bc <decompress_smooth_data+0x366>
	prev_block_row = buffer[block_row-1];
 800c2a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c2a8:	9305      	str	r3, [sp, #20]
      if (last_row && block_row == block_rows-1)
 800c2aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2ac:	b123      	cbz	r3, 800c2b8 <decompress_smooth_data+0x162>
 800c2ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2b0:	9a02      	ldr	r2, [sp, #8]
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	f000 8105 	beq.w	800c4c2 <decompress_smooth_data+0x36c>
	next_block_row = buffer[block_row+1];
 800c2b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	9306      	str	r3, [sp, #24]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c2be:	9b05      	ldr	r3, [sp, #20]
      last_block_column = compptr->width_in_blocks - 1;
 800c2c0:	69f2      	ldr	r2, [r6, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c2c2:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800c2c6:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c2c8:	9310      	str	r3, [sp, #64]	@ 0x40
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c2ca:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800c2ce:	921d      	str	r2, [sp, #116]	@ 0x74
      output_col = 0;
 800c2d0:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c2d2:	461c      	mov	r4, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c2d4:	9b06      	ldr	r3, [sp, #24]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c2d6:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c2da:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c2de:	46a2      	mov	sl, r4
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c2e0:	9307      	str	r3, [sp, #28]
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c2e2:	e9cd 2209 	strd	r2, r2, [sp, #36]	@ 0x24
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	a922      	add	r1, sp, #136	@ 0x88
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	9308      	str	r3, [sp, #32]
 800c2ee:	f00b fd6c 	bl	8017dca <jcopy_block_row>
	if (block_num < last_block_column) {
 800c2f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	9b08      	ldr	r3, [sp, #32]
 800c2fa:	f240 80ec 	bls.w	800c4d6 <decompress_smooth_data+0x380>
	  DC3 = (int) prev_block_row[1][0];
 800c2fe:	9a05      	ldr	r2, [sp, #20]
 800c300:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	@ 0x80
 800c304:	920e      	str	r2, [sp, #56]	@ 0x38
	  DC6 = (int) buffer_ptr[1][0];
 800c306:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	@ 0x80
 800c30a:	9208      	str	r2, [sp, #32]
	  DC9 = (int) next_block_row[1][0];
 800c30c:	9a06      	ldr	r2, [sp, #24]
 800c30e:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	@ 0x80
 800c312:	920f      	str	r2, [sp, #60]	@ 0x3c
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800c314:	9a03      	ldr	r2, [sp, #12]
 800c316:	6851      	ldr	r1, [r2, #4]
 800c318:	b1c1      	cbz	r1, 800c34c <decompress_smooth_data+0x1f6>
 800c31a:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	@ 0x8a
 800c31e:	b9aa      	cbnz	r2, 800c34c <decompress_smooth_data+0x1f6>
	  num = 36 * Q00 * (DC4 - DC6);
 800c320:	9808      	ldr	r0, [sp, #32]
 800c322:	1a22      	subs	r2, r4, r0
 800c324:	9804      	ldr	r0, [sp, #16]
 800c326:	4342      	muls	r2, r0
	  if (num >= 0) {
 800c328:	2024      	movs	r0, #36	@ 0x24
 800c32a:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c32c:	9811      	ldr	r0, [sp, #68]	@ 0x44
	  if (num >= 0) {
 800c32e:	f100 80d9 	bmi.w	800c4e4 <decompress_smooth_data+0x38e>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c332:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c334:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c336:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c338:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c33c:	dd04      	ble.n	800c348 <decompress_smooth_data+0x1f2>
 800c33e:	2001      	movs	r0, #1
 800c340:	4088      	lsls	r0, r1
 800c342:	4290      	cmp	r0, r2
 800c344:	dc00      	bgt.n	800c348 <decompress_smooth_data+0x1f2>
	      pred = (1<<Al)-1;
 800c346:	1e42      	subs	r2, r0, #1
	  workspace[1] = (JCOEF) pred;
 800c348:	f8ad 208a 	strh.w	r2, [sp, #138]	@ 0x8a
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800c34c:	9a03      	ldr	r2, [sp, #12]
 800c34e:	6891      	ldr	r1, [r2, #8]
 800c350:	b1c9      	cbz	r1, 800c386 <decompress_smooth_data+0x230>
 800c352:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	@ 0x98
 800c356:	b9b2      	cbnz	r2, 800c386 <decompress_smooth_data+0x230>
	  num = 36 * Q00 * (DC2 - DC8);
 800c358:	9a07      	ldr	r2, [sp, #28]
 800c35a:	9804      	ldr	r0, [sp, #16]
 800c35c:	ebab 0202 	sub.w	r2, fp, r2
 800c360:	4342      	muls	r2, r0
	  if (num >= 0) {
 800c362:	2024      	movs	r0, #36	@ 0x24
 800c364:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c366:	9813      	ldr	r0, [sp, #76]	@ 0x4c
	  if (num >= 0) {
 800c368:	f100 80ca 	bmi.w	800c500 <decompress_smooth_data+0x3aa>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c36c:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c36e:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c370:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c372:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c376:	dd04      	ble.n	800c382 <decompress_smooth_data+0x22c>
 800c378:	2001      	movs	r0, #1
 800c37a:	4088      	lsls	r0, r1
 800c37c:	4290      	cmp	r0, r2
 800c37e:	dc00      	bgt.n	800c382 <decompress_smooth_data+0x22c>
	      pred = (1<<Al)-1;
 800c380:	1e42      	subs	r2, r0, #1
	  workspace[8] = (JCOEF) pred;
 800c382:	f8ad 2098 	strh.w	r2, [sp, #152]	@ 0x98
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800c386:	9a03      	ldr	r2, [sp, #12]
 800c388:	68d1      	ldr	r1, [r2, #12]
 800c38a:	b1d1      	cbz	r1, 800c3c2 <decompress_smooth_data+0x26c>
 800c38c:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	@ 0xa8
 800c390:	b9ba      	cbnz	r2, 800c3c2 <decompress_smooth_data+0x26c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800c392:	9a07      	ldr	r2, [sp, #28]
 800c394:	9804      	ldr	r0, [sp, #16]
 800c396:	445a      	add	r2, fp
 800c398:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800c39c:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c39e:	9815      	ldr	r0, [sp, #84]	@ 0x54
	  if (num >= 0) {
 800c3a0:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800c3a4:	f100 80ba 	bmi.w	800c51c <decompress_smooth_data+0x3c6>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c3a8:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c3aa:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c3ac:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c3ae:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c3b2:	dd04      	ble.n	800c3be <decompress_smooth_data+0x268>
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	4088      	lsls	r0, r1
 800c3b8:	4290      	cmp	r0, r2
 800c3ba:	dc00      	bgt.n	800c3be <decompress_smooth_data+0x268>
	      pred = (1<<Al)-1;
 800c3bc:	1e42      	subs	r2, r0, #1
	  workspace[16] = (JCOEF) pred;
 800c3be:	f8ad 20a8 	strh.w	r2, [sp, #168]	@ 0xa8
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800c3c2:	9a03      	ldr	r2, [sp, #12]
 800c3c4:	6912      	ldr	r2, [r2, #16]
 800c3c6:	b1ea      	cbz	r2, 800c404 <decompress_smooth_data+0x2ae>
 800c3c8:	f9bd 109a 	ldrsh.w	r1, [sp, #154]	@ 0x9a
 800c3cc:	b9d1      	cbnz	r1, 800c404 <decompress_smooth_data+0x2ae>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800c3ce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c3d0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c3d2:	1a09      	subs	r1, r1, r0
 800c3d4:	1acb      	subs	r3, r1, r3
 800c3d6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3d8:	440b      	add	r3, r1
 800c3da:	9904      	ldr	r1, [sp, #16]
 800c3dc:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c3de:	9917      	ldr	r1, [sp, #92]	@ 0x5c
	  if (num >= 0) {
 800c3e0:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800c3e4:	f100 80a8 	bmi.w	800c538 <decompress_smooth_data+0x3e2>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c3e8:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c3ea:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c3ec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c3ee:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c3f2:	dd05      	ble.n	800c400 <decompress_smooth_data+0x2aa>
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	fa01 f202 	lsl.w	r2, r1, r2
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	dc00      	bgt.n	800c400 <decompress_smooth_data+0x2aa>
	      pred = (1<<Al)-1;
 800c3fe:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800c400:	f8ad 309a 	strh.w	r3, [sp, #154]	@ 0x9a
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	b1e2      	cbz	r2, 800c444 <decompress_smooth_data+0x2ee>
 800c40a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800c40e:	b9cb      	cbnz	r3, 800c444 <decompress_smooth_data+0x2ee>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800c410:	9908      	ldr	r1, [sp, #32]
 800c412:	4623      	mov	r3, r4
 800c414:	440b      	add	r3, r1
 800c416:	9904      	ldr	r1, [sp, #16]
 800c418:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800c41c:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c41e:	9919      	ldr	r1, [sp, #100]	@ 0x64
	  if (num >= 0) {
 800c420:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800c424:	f100 8097 	bmi.w	800c556 <decompress_smooth_data+0x400>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c428:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c42a:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c42c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c42e:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c432:	dd05      	ble.n	800c440 <decompress_smooth_data+0x2ea>
 800c434:	2101      	movs	r1, #1
 800c436:	fa01 f202 	lsl.w	r2, r1, r2
 800c43a:	429a      	cmp	r2, r3
 800c43c:	dc00      	bgt.n	800c440 <decompress_smooth_data+0x2ea>
	      pred = (1<<Al)-1;
 800c43e:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800c440:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800c444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c446:	aa22      	add	r2, sp, #136	@ 0x88
 800c448:	4631      	mov	r1, r6
 800c44a:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4628      	mov	r0, r5
 800c450:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c452:	f108 0880 	add.w	r8, r8, #128	@ 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800c456:	47a0      	blx	r4
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c458:	9b05      	ldr	r3, [sp, #20]
	output_col += compptr->DCT_h_scaled_size;
 800c45a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c45c:	4654      	mov	r4, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c45e:	3380      	adds	r3, #128	@ 0x80
 800c460:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800c464:	9305      	str	r3, [sp, #20]
 800c466:	9b06      	ldr	r3, [sp, #24]
 800c468:	3380      	adds	r3, #128	@ 0x80
 800c46a:	9306      	str	r3, [sp, #24]
	output_col += compptr->DCT_h_scaled_size;
 800c46c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800c46e:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c470:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	output_col += compptr->DCT_h_scaled_size;
 800c472:	9309      	str	r3, [sp, #36]	@ 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c476:	3301      	adds	r3, #1
 800c478:	930a      	str	r3, [sp, #40]	@ 0x28
 800c47a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	428a      	cmp	r2, r1
 800c480:	d222      	bcs.n	800c4c8 <decompress_smooth_data+0x372>
      output_ptr += compptr->DCT_v_scaled_size;
 800c482:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c484:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800c486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c48a:	930c      	str	r3, [sp, #48]	@ 0x30
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c48c:	9b02      	ldr	r3, [sp, #8]
 800c48e:	3301      	adds	r3, #1
 800c490:	9302      	str	r3, [sp, #8]
 800c492:	e6f9      	b.n	800c288 <decompress_smooth_data+0x132>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c494:	6a33      	ldr	r3, [r6, #32]
 800c496:	fbb3 f1f0 	udiv	r1, r3, r0
 800c49a:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800c49e:	f1b9 0f00 	cmp.w	r9, #0
 800c4a2:	d103      	bne.n	800c4ac <decompress_smooth_data+0x356>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	4681      	mov	r9, r0
      last_row = TRUE;
 800c4a8:	2101      	movs	r1, #1
 800c4aa:	e69e      	b.n	800c1ea <decompress_smooth_data+0x94>
 800c4ac:	464b      	mov	r3, r9
 800c4ae:	e7fb      	b.n	800c4a8 <decompress_smooth_data+0x352>
      buffer = (*cinfo->mem->access_virt_barray)
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	9200      	str	r2, [sp, #0]
 800c4b4:	47c0      	blx	r8
      first_row = TRUE;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c4ba:	e6ac      	b.n	800c216 <decompress_smooth_data+0xc0>
      buffer_ptr = buffer[block_row];
 800c4bc:	f8cd 8014 	str.w	r8, [sp, #20]
 800c4c0:	e6f3      	b.n	800c2aa <decompress_smooth_data+0x154>
 800c4c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4c6:	e6fa      	b.n	800c2be <decompress_smooth_data+0x168>
	DC7 = DC8; DC8 = DC9;
 800c4c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	DC4 = DC5; DC5 = DC6;
 800c4ca:	f8dd a020 	ldr.w	sl, [sp, #32]
	DC1 = DC2; DC2 = DC3;
 800c4ce:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
	DC7 = DC8; DC8 = DC9;
 800c4d2:	9207      	str	r2, [sp, #28]
 800c4d4:	e707      	b.n	800c2e6 <decompress_smooth_data+0x190>
 800c4d6:	9a07      	ldr	r2, [sp, #28]
 800c4d8:	f8cd a020 	str.w	sl, [sp, #32]
 800c4dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4de:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c4e2:	e717      	b.n	800c314 <decompress_smooth_data+0x1be>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c4e4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c4e6:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c4e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c4ea:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c4ee:	dd05      	ble.n	800c4fc <decompress_smooth_data+0x3a6>
 800c4f0:	2001      	movs	r0, #1
 800c4f2:	4088      	lsls	r0, r1
 800c4f4:	4290      	cmp	r0, r2
	      pred = (1<<Al)-1;
 800c4f6:	bfd8      	it	le
 800c4f8:	f100 32ff 	addle.w	r2, r0, #4294967295
	    pred = -pred;
 800c4fc:	4252      	negs	r2, r2
 800c4fe:	e723      	b.n	800c348 <decompress_smooth_data+0x1f2>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c500:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c502:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c504:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c506:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c50a:	dd05      	ble.n	800c518 <decompress_smooth_data+0x3c2>
 800c50c:	2001      	movs	r0, #1
 800c50e:	4088      	lsls	r0, r1
 800c510:	4290      	cmp	r0, r2
	      pred = (1<<Al)-1;
 800c512:	bfd8      	it	le
 800c514:	f100 32ff 	addle.w	r2, r0, #4294967295
	    pred = -pred;
 800c518:	4252      	negs	r2, r2
 800c51a:	e732      	b.n	800c382 <decompress_smooth_data+0x22c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c51c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c51e:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c520:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c522:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c526:	dd05      	ble.n	800c534 <decompress_smooth_data+0x3de>
 800c528:	2001      	movs	r0, #1
 800c52a:	4088      	lsls	r0, r1
 800c52c:	4290      	cmp	r0, r2
	      pred = (1<<Al)-1;
 800c52e:	bfd8      	it	le
 800c530:	f100 32ff 	addle.w	r2, r0, #4294967295
	    pred = -pred;
 800c534:	4252      	negs	r2, r2
 800c536:	e742      	b.n	800c3be <decompress_smooth_data+0x268>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c538:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800c53a:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c53c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c53e:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c542:	dd06      	ble.n	800c552 <decompress_smooth_data+0x3fc>
 800c544:	2101      	movs	r1, #1
 800c546:	fa01 f202 	lsl.w	r2, r1, r2
 800c54a:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800c54c:	bfd8      	it	le
 800c54e:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800c552:	425b      	negs	r3, r3
 800c554:	e754      	b.n	800c400 <decompress_smooth_data+0x2aa>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c556:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800c558:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c55a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c55c:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c560:	dd06      	ble.n	800c570 <decompress_smooth_data+0x41a>
 800c562:	2101      	movs	r1, #1
 800c564:	fa01 f202 	lsl.w	r2, r1, r2
 800c568:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800c56a:	bfd8      	it	le
 800c56c:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800c570:	425b      	negs	r3, r3
 800c572:	e765      	b.n	800c440 <decompress_smooth_data+0x2ea>

0800c574 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c574:	6843      	ldr	r3, [r0, #4]
{
 800c576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c57a:	681b      	ldr	r3, [r3, #0]
{
 800c57c:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c57e:	2274      	movs	r2, #116	@ 0x74
 800c580:	2101      	movs	r1, #1
{
 800c582:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c584:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800c586:	4b2c      	ldr	r3, [pc, #176]	@ (800c638 <jinit_d_coef_controller+0xc4>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800c588:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800c58a:	f8c5 01c0 	str.w	r0, [r5, #448]	@ 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c58e:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800c590:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800c592:	f100 0844 	add.w	r8, r0, #68	@ 0x44
 800c596:	4b29      	ldr	r3, [pc, #164]	@ (800c63c <jinit_d_coef_controller+0xc8>)
  coef->coef_bits_latch = NULL;
 800c598:	6707      	str	r7, [r0, #112]	@ 0x70
  coef->pub.start_output_pass = start_output_pass;
 800c59a:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800c59c:	b386      	cbz	r6, 800c600 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c59e:	f8d5 60d8 	ldr.w	r6, [r5, #216]	@ 0xd8
 800c5a2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c5a4:	42bb      	cmp	r3, r7
 800c5a6:	dc09      	bgt.n	800c5bc <jinit_d_coef_controller+0x48>
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800c5a8:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800c5ac:	4924      	ldr	r1, [pc, #144]	@ (800c640 <jinit_d_coef_controller+0xcc>)
 800c5ae:	4a25      	ldr	r2, [pc, #148]	@ (800c644 <jinit_d_coef_controller+0xd0>)
    coef->pub.consume_data = consume_data;
 800c5b0:	6061      	str	r1, [r4, #4]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800c5b2:	e9c4 2303 	strd	r2, r3, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800c5b6:	b003      	add	sp, #12
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800c5bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
      access_rows = compptr->v_samp_factor;
 800c5c0:	f8d6 900c 	ldr.w	r9, [r6, #12]
      if (cinfo->progressive_mode)
 800c5c4:	b10b      	cbz	r3, 800c5ca <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800c5c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c5ca:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800c5cc:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c5ce:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800c5d0:	3658      	adds	r6, #88	@ 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c5d2:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c5d6:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c5da:	f00b fbdc 	bl	8017d96 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800c5de:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c5e2:	4682      	mov	sl, r0
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800c5e4:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800c5e8:	f00b fbd5 	bl	8017d96 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	4653      	mov	r3, sl
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	e9cd 0900 	strd	r0, r9, [sp]
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	47d8      	blx	fp
 800c5fa:	f848 0f04 	str.w	r0, [r8, #4]!
	 ci++, compptr++) {
 800c5fe:	e7d0      	b.n	800c5a2 <jinit_d_coef_controller+0x2e>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c600:	686b      	ldr	r3, [r5, #4]
 800c602:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800c606:	2101      	movs	r1, #1
 800c608:	4628      	mov	r0, r5
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c60e:	f104 031c 	add.w	r3, r4, #28
 800c612:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800c614:	f843 2f04 	str.w	r2, [r3, #4]!
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c618:	4543      	cmp	r3, r8
 800c61a:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 800c61e:	d1f9      	bne.n	800c614 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800c620:	f8d5 11b0 	ldr.w	r1, [r5, #432]	@ 0x1b0
 800c624:	b919      	cbnz	r1, 800c62e <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800c626:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800c62a:	f01e fd8d 	bl	802b148 <memset>
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800c62e:	4906      	ldr	r1, [pc, #24]	@ (800c648 <jinit_d_coef_controller+0xd4>)
 800c630:	2300      	movs	r3, #0
 800c632:	4a06      	ldr	r2, [pc, #24]	@ (800c64c <jinit_d_coef_controller+0xd8>)
 800c634:	e7bc      	b.n	800c5b0 <jinit_d_coef_controller+0x3c>
 800c636:	bf00      	nop
 800c638:	0800bcdd 	.word	0x0800bcdd
 800c63c:	0800bf29 	.word	0x0800bf29
 800c640:	0800bceb 	.word	0x0800bceb
 800c644:	0800be1f 	.word	0x0800be1f
 800c648:	0800bce7 	.word	0x0800bce7
 800c64c:	0800bfe1 	.word	0x0800bfe1

0800c650 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c650:	6843      	ldr	r3, [r0, #4]
 800c652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c656:	2101      	movs	r1, #1
 800c658:	681b      	ldr	r3, [r3, #0]
{
 800c65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c65e:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c660:	f8d0 51dc 	ldr.w	r5, [r0, #476]	@ 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c664:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c66a:	6863      	ldr	r3, [r4, #4]
 800c66c:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800c66e:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c670:	4620      	mov	r0, r4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c676:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800c678:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c67a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2101      	movs	r1, #1
 800c682:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c684:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800c704 <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c688:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c68a:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800c68c:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c68e:	2101      	movs	r1, #1
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4620      	mov	r0, r4
 800c694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c698:	4f17      	ldr	r7, [pc, #92]	@ (800c6f8 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c69a:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c69c:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800c69e:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c6a0:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c6a2:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800c708 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c6a6:	4915      	ldr	r1, [pc, #84]	@ (800c6fc <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800c6a8:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c6ac:	4d14      	ldr	r5, [pc, #80]	@ (800c700 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c6ae:	fb08 e203 	mla	r2, r8, r3, lr
 800c6b2:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800c6b4:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c6b8:	fb07 f203 	mul.w	r2, r7, r3
 800c6bc:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 800c6c0:	f5a2 42a2 	sub.w	r2, r2, #20736	@ 0x5100
 800c6c4:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800c6c6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c6ca:	fb05 f203 	mul.w	r2, r5, r3
 800c6ce:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 800c6d2:	f502 42d2 	add.w	r2, r2, #26880	@ 0x6900
 800c6d6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c6da:	fb01 f203 	mul.w	r2, r1, r3
 800c6de:	f502 1232 	add.w	r2, r2, #2916352	@ 0x2c8000
 800c6e2:	f502 6250 	add.w	r2, r2, #3328	@ 0xd00
 800c6e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6f0:	d1dd      	bne.n	800c6ae <build_ycc_rgb_table+0x5e>
  }
}
 800c6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0001c5a2 	.word	0x0001c5a2
 800c6fc:	ffffa7e6 	.word	0xffffa7e6
 800c700:	ffff492e 	.word	0xffff492e
 800c704:	000166e9 	.word	0x000166e9
 800c708:	ff4d0b80 	.word	0xff4d0b80

0800c70c <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800c70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c710:	f8d0 41dc 	ldr.w	r4, [r0, #476]	@ 0x1dc
{
 800c714:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c716:	6f05      	ldr	r5, [r0, #112]	@ 0x70
 800c718:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c71c:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c720:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c724:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800c726:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800c728:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c72a:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800c72e:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c730:	6920      	ldr	r0, [r4, #16]
 800c732:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c734:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c736:	3a01      	subs	r2, #1
 800c738:	9210      	str	r2, [sp, #64]	@ 0x40
 800c73a:	d502      	bpl.n	800c742 <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c73c:	b007      	add	sp, #28
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c742:	9a05      	ldr	r2, [sp, #20]
 800c744:	680c      	ldr	r4, [r1, #0]
 800c746:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800c748:	f853 0b04 	ldr.w	r0, [r3], #4
 800c74c:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800c750:	684c      	ldr	r4, [r1, #4]
 800c752:	5964      	ldr	r4, [r4, r5]
 800c754:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800c758:	688c      	ldr	r4, [r1, #8]
 800c75a:	5967      	ldr	r7, [r4, r5]
 800c75c:	9c01      	ldr	r4, [sp, #4]
 800c75e:	3f01      	subs	r7, #1
 800c760:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800c764:	45d0      	cmp	r8, sl
 800c766:	f100 0003 	add.w	r0, r0, #3
 800c76a:	d0e3      	beq.n	800c734 <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c76c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800c770:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c774:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800c776:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c77a:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800c77e:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c780:	fa0f fb8b 	sxth.w	fp, fp
 800c784:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c786:	5d65      	ldrb	r5, [r4, r5]
 800c788:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c78c:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800c790:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800c794:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c796:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c798:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800c79a:	5d65      	ldrb	r5, [r4, r5]
 800c79c:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c7a0:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800c7a4:	5d64      	ldrb	r4, [r4, r5]
 800c7a6:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800c7aa:	e7db      	b.n	800c764 <ycc_rgb_convert+0x58>

0800c7ac <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c7b0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	@ 0x1dc
 800c7b4:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800c7b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c7ba:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c7bc:	6f07      	ldr	r7, [r0, #112]	@ 0x70

  while (--num_rows >= 0) {
 800c7be:	3d01      	subs	r5, #1
 800c7c0:	d501      	bpl.n	800c7c6 <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c7c6:	189c      	adds	r4, r3, r2
 800c7c8:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800c7ca:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800c7ce:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800c7d2:	6848      	ldr	r0, [r1, #4]
 800c7d4:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800c7d8:	6888      	ldr	r0, [r1, #8]
 800c7da:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800c7de:	2000      	movs	r0, #0
 800c7e0:	42b8      	cmp	r0, r7
 800c7e2:	d0ec      	beq.n	800c7be <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800c7e4:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800c7e8:	f81c b000 	ldrb.w	fp, [ip, r0]
 800c7ec:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 800c7f0:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800c7f4:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800c7f8:	4454      	add	r4, sl
 800c7fa:	f818 a000 	ldrb.w	sl, [r8, r0]
 800c7fe:	f50a 7a00 	add.w	sl, sl, #512	@ 0x200
 800c802:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800c806:	4454      	add	r4, sl
		 >> SCALEBITS);
 800c808:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800c80a:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800c80e:	3001      	adds	r0, #1
 800c810:	e7e6      	b.n	800c7e0 <rgb_gray_convert+0x34>

0800c812 <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800c812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c816:	9d06      	ldr	r5, [sp, #24]
 800c818:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c81c:	6f06      	ldr	r6, [r0, #112]	@ 0x70

  while (--num_rows >= 0) {
 800c81e:	3d01      	subs	r5, #1
 800c820:	d501      	bpl.n	800c826 <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800c826:	1898      	adds	r0, r3, r2
 800c828:	680c      	ldr	r4, [r1, #0]
 800c82a:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800c82c:	684c      	ldr	r4, [r1, #4]
 800c82e:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800c832:	688c      	ldr	r4, [r1, #8]
 800c834:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800c838:	2000      	movs	r0, #0
 800c83a:	f853 4b04 	ldr.w	r4, [r3], #4
 800c83e:	42b0      	cmp	r0, r6
 800c840:	f104 0403 	add.w	r4, r4, #3
 800c844:	d0eb      	beq.n	800c81e <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800c846:	f817 8000 	ldrb.w	r8, [r7, r0]
 800c84a:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800c84e:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800c852:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800c856:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800c85a:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800c85c:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800c860:	e7ed      	b.n	800c83e <rgb_convert+0x2c>

0800c862 <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800c862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c866:	9e07      	ldr	r6, [sp, #28]
 800c868:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800c86c:	6a47      	ldr	r7, [r0, #36]	@ 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800c86e:	f8d0 e070 	ldr.w	lr, [r0, #112]	@ 0x70
  int ci;

  while (--num_rows >= 0) {
 800c872:	3e01      	subs	r6, #1
 800c874:	d418      	bmi.n	800c8a8 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800c876:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800c87a:	2000      	movs	r0, #0
 800c87c:	e00a      	b.n	800c894 <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800c87e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800c882:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800c886:	681c      	ldr	r4, [r3, #0]
 800c888:	eb05 080e 	add.w	r8, r5, lr
 800c88c:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800c88e:	4545      	cmp	r5, r8
 800c890:	d104      	bne.n	800c89c <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800c892:	3001      	adds	r0, #1
 800c894:	42b8      	cmp	r0, r7
 800c896:	dbf2      	blt.n	800c87e <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800c898:	3304      	adds	r3, #4
 800c89a:	e7ea      	b.n	800c872 <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800c89c:	f815 9b01 	ldrb.w	r9, [r5], #1
 800c8a0:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800c8a4:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800c8a6:	e7f2      	b.n	800c88e <null_convert+0x2c>
  }
}
 800c8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c8ac <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ae:	9d05      	ldr	r5, [sp, #20]
 800c8b0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c8b4:	6f07      	ldr	r7, [r0, #112]	@ 0x70

  while (--num_rows >= 0) {
 800c8b6:	3d01      	subs	r5, #1
 800c8b8:	d500      	bpl.n	800c8bc <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800c8bc:	6808      	ldr	r0, [r1, #0]
 800c8be:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800c8c0:	f853 0b04 	ldr.w	r0, [r3], #4
 800c8c4:	58a4      	ldr	r4, [r4, r2]
 800c8c6:	eb04 0c07 	add.w	ip, r4, r7
 800c8ca:	4564      	cmp	r4, ip
 800c8cc:	f100 0003 	add.w	r0, r0, #3
 800c8d0:	d0f1      	beq.n	800c8b6 <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800c8d2:	f814 6b01 	ldrb.w	r6, [r4], #1
 800c8d6:	f800 6c03 	strb.w	r6, [r0, #-3]
 800c8da:	f800 6c02 	strb.w	r6, [r0, #-2]
 800c8de:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800c8e2:	e7f2      	b.n	800c8ca <gray_rgb_convert+0x1e>

0800c8e4 <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c8e8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	@ 0x1dc
{
 800c8ec:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c8ee:	6f05      	ldr	r5, [r0, #112]	@ 0x70
 800c8f0:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c8f4:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c8f8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800c8fc:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c8fe:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800c902:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c904:	6920      	ldr	r0, [r4, #16]
 800c906:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c908:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c90a:	3a01      	subs	r2, #1
 800c90c:	9210      	str	r2, [sp, #64]	@ 0x40
 800c90e:	d502      	bpl.n	800c916 <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800c910:	b007      	add	sp, #28
 800c912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c916:	eb03 0008 	add.w	r0, r3, r8
 800c91a:	680a      	ldr	r2, [r1, #0]
 800c91c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c920:	5812      	ldr	r2, [r2, r0]
 800c922:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800c924:	684a      	ldr	r2, [r1, #4]
 800c926:	5812      	ldr	r2, [r2, r0]
 800c928:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800c92a:	688a      	ldr	r2, [r1, #8]
 800c92c:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800c930:	68ca      	ldr	r2, [r1, #12]
 800c932:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800c936:	2200      	movs	r2, #0
 800c938:	9800      	ldr	r0, [sp, #0]
 800c93a:	3504      	adds	r5, #4
 800c93c:	4282      	cmp	r2, r0
 800c93e:	d0e3      	beq.n	800c908 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c940:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800c944:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800c946:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800c948:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800c94c:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c94e:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c952:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c956:	4404      	add	r4, r0
 800c958:	f1c4 04ff 	rsb	r4, r4, #255	@ 0xff
 800c95c:	5d34      	ldrb	r4, [r6, r4]
 800c95e:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c962:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800c966:	9405      	str	r4, [sp, #20]
 800c968:	9c02      	ldr	r4, [sp, #8]
 800c96a:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800c96e:	9c05      	ldr	r4, [sp, #20]
 800c970:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800c972:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800c976:	f1c4 04ff 	rsb	r4, r4, #255	@ 0xff
 800c97a:	5d34      	ldrb	r4, [r6, r4]
 800c97c:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800c980:	9c01      	ldr	r4, [sp, #4]
 800c982:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800c986:	4420      	add	r0, r4
 800c988:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 800c98c:	5c30      	ldrb	r0, [r6, r0]
 800c98e:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c992:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800c996:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c998:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800c99c:	e7cc      	b.n	800c938 <ycck_cmyk_convert+0x54>

0800c99e <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800c99e:	4770      	bx	lr

0800c9a0 <grayscale_convert>:
{
 800c9a0:	b513      	push	{r0, r1, r4, lr}
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800c9a8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800c9aa:	9301      	str	r3, [sp, #4]
 800c9ac:	9b04      	ldr	r3, [sp, #16]
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	6820      	ldr	r0, [r4, #0]
 800c9b4:	f00b f9f7 	bl	8017da6 <jcopy_sample_rows>
}
 800c9b8:	b002      	add	sp, #8
 800c9ba:	bd10      	pop	{r4, pc}

0800c9bc <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c9bc:	6843      	ldr	r3, [r0, #4]
 800c9be:	221c      	movs	r2, #28
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	681b      	ldr	r3, [r3, #0]
{
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c9c8:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800c9ca:	4b4a      	ldr	r3, [pc, #296]	@ (800caf4 <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c9cc:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800c9ce:	f8c4 01dc 	str.w	r0, [r4, #476]	@ 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800c9d2:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800c9d4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c9d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d821      	bhi.n	800ca22 <jinit_color_deconverter+0x66>
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d82d      	bhi.n	800ca3e <jinit_color_deconverter+0x82>
 800c9e2:	d023      	beq.n	800ca2c <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	dd23      	ble.n	800ca30 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800c9e8:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c9ec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
  switch (cinfo->out_color_space) {
 800c9f0:	2902      	cmp	r1, #2
 800c9f2:	d055      	beq.n	800caa0 <jinit_color_deconverter+0xe4>
 800c9f4:	2904      	cmp	r1, #4
 800c9f6:	d066      	beq.n	800cac6 <jinit_color_deconverter+0x10a>
 800c9f8:	2901      	cmp	r1, #1
 800c9fa:	d16d      	bne.n	800cad8 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c9fc:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
    cinfo->out_color_components = 1;
 800ca00:	67a1      	str	r1, [r4, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800ca02:	2a01      	cmp	r2, #1
 800ca04:	d124      	bne.n	800ca50 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800ca06:	4b3c      	ldr	r3, [pc, #240]	@ (800caf8 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800ca08:	2058      	movs	r0, #88	@ 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ca0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800ca0c:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ca0e:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800ca10:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ca12:	4299      	cmp	r1, r3
 800ca14:	dc15      	bgt.n	800ca42 <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800ca16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d169      	bne.n	800caf0 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800ca1c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ca1e:	67e3      	str	r3, [r4, #124]	@ 0x7c
}
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800ca22:	3b04      	subs	r3, #4
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d8dd      	bhi.n	800c9e4 <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800ca28:	2a04      	cmp	r2, #4
 800ca2a:	e000      	b.n	800ca2e <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800ca2c:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800ca2e:	d0db      	beq.n	800c9e8 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	220b      	movs	r2, #11
 800ca34:	4620      	mov	r0, r4
 800ca36:	615a      	str	r2, [r3, #20]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4798      	blx	r3
 800ca3c:	e7d4      	b.n	800c9e8 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800ca3e:	2a03      	cmp	r2, #3
 800ca40:	e7f5      	b.n	800ca2e <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800ca42:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 800ca46:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ca4a:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800ca4c:	6355      	str	r5, [r2, #52]	@ 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ca4e:	e7e0      	b.n	800ca12 <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	d146      	bne.n	800cae2 <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800ca54:	4b29      	ldr	r3, [pc, #164]	@ (800cafc <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca56:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800ca5a:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800ca5c:	f644 468b 	movw	r6, #19595	@ 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800ca60:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca62:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800ca64:	f8d4 51dc 	ldr.w	r5, [r4, #476]	@ 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ca6c:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800ca6e:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ca70:	f641 512f 	movw	r1, #7471	@ 0x1d2f
 800ca74:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800ca76:	f249 6546 	movw	r5, #38470	@ 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800ca7a:	fb06 f203 	mul.w	r2, r6, r3
 800ca7e:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800ca82:	fb05 f203 	mul.w	r2, r5, r3
 800ca86:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ca8a:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ca8e:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ca90:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ca94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ca98:	f8c0 2800 	str.w	r2, [r0, #2048]	@ 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ca9c:	d1ed      	bne.n	800ca7a <jinit_color_deconverter+0xbe>
 800ca9e:	e7ba      	b.n	800ca16 <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800caa0:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800caa2:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800caa4:	67a2      	str	r2, [r4, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800caa6:	d105      	bne.n	800cab4 <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800caa8:	4b15      	ldr	r3, [pc, #84]	@ (800cb00 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800caaa:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800caac:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800caae:	f7ff fdcf 	bl	800c650 <build_ycc_rgb_table>
 800cab2:	e7b0      	b.n	800ca16 <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d102      	bne.n	800cabe <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800cab8:	4b12      	ldr	r3, [pc, #72]	@ (800cb04 <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800caba:	606b      	str	r3, [r5, #4]
 800cabc:	e7ab      	b.n	800ca16 <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d10f      	bne.n	800cae2 <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800cac2:	4b11      	ldr	r3, [pc, #68]	@ (800cb08 <jinit_color_deconverter+0x14c>)
 800cac4:	e7f9      	b.n	800caba <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800cac6:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800cac8:	67a1      	str	r1, [r4, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800caca:	d101      	bne.n	800cad0 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800cacc:	4b0f      	ldr	r3, [pc, #60]	@ (800cb0c <jinit_color_deconverter+0x150>)
 800cace:	e7ec      	b.n	800caaa <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800cad0:	2b04      	cmp	r3, #4
 800cad2:	d106      	bne.n	800cae2 <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800cad4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb10 <jinit_color_deconverter+0x154>)
 800cad6:	e7f0      	b.n	800caba <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800cad8:	4299      	cmp	r1, r3
 800cada:	d102      	bne.n	800cae2 <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800cadc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cade:	67a3      	str	r3, [r4, #120]	@ 0x78
 800cae0:	e7f8      	b.n	800cad4 <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	221c      	movs	r2, #28
 800cae6:	4620      	mov	r0, r4
 800cae8:	615a      	str	r2, [r3, #20]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4798      	blx	r3
 800caee:	e792      	b.n	800ca16 <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800caf0:	2301      	movs	r3, #1
 800caf2:	e794      	b.n	800ca1e <jinit_color_deconverter+0x62>
 800caf4:	0800c99f 	.word	0x0800c99f
 800caf8:	0800c9a1 	.word	0x0800c9a1
 800cafc:	0800c7ad 	.word	0x0800c7ad
 800cb00:	0800c70d 	.word	0x0800c70d
 800cb04:	0800c8ad 	.word	0x0800c8ad
 800cb08:	0800c813 	.word	0x0800c813
 800cb0c:	0800c8e5 	.word	0x0800c8e5
 800cb10:	0800c863 	.word	0x0800c863

0800cb14 <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800cb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800cb18:	2500      	movs	r5, #0
{
 800cb1a:	4606      	mov	r6, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cb1c:	f8d0 70d8 	ldr.w	r7, [r0, #216]	@ 0xd8
 800cb20:	f8d0 81d4 	ldr.w	r8, [r0, #468]	@ 0x1d4
  int method = 0;
 800cb24:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cb26:	46a9      	mov	r9, r5
 800cb28:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800cb2a:	454b      	cmp	r3, r9
 800cb2c:	dc02      	bgt.n	800cb34 <start_pass+0x20>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800cb2e:	b003      	add	sp, #12
 800cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cb34:	e9d7 1209 	ldrd	r1, r2, [r7, #36]	@ 0x24
 800cb38:	f240 700e 	movw	r0, #1806	@ 0x70e
 800cb3c:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800cb40:	4283      	cmp	r3, r0
 800cb42:	f000 80b9 	beq.w	800ccb8 <start_pass+0x1a4>
 800cb46:	dc58      	bgt.n	800cbfa <start_pass+0xe6>
 800cb48:	f240 4004 	movw	r0, #1028	@ 0x404
 800cb4c:	4283      	cmp	r3, r0
 800cb4e:	f000 80b6 	beq.w	800ccbe <start_pass+0x1aa>
 800cb52:	dc2f      	bgt.n	800cbb4 <start_pass+0xa0>
 800cb54:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800cb58:	f000 80b3 	beq.w	800ccc2 <start_pass+0x1ae>
 800cb5c:	dc1a      	bgt.n	800cb94 <start_pass+0x80>
 800cb5e:	f240 2001 	movw	r0, #513	@ 0x201
 800cb62:	4283      	cmp	r3, r0
 800cb64:	f000 80af 	beq.w	800ccc6 <start_pass+0x1b2>
 800cb68:	dc0e      	bgt.n	800cb88 <start_pass+0x74>
 800cb6a:	f240 1001 	movw	r0, #257	@ 0x101
 800cb6e:	4283      	cmp	r3, r0
 800cb70:	f000 80ab 	beq.w	800ccca <start_pass+0x1b6>
 800cb74:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800cb78:	f000 80a9 	beq.w	800ccce <start_pass+0x1ba>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800cb7c:	6833      	ldr	r3, [r6, #0]
 800cb7e:	2007      	movs	r0, #7
 800cb80:	61da      	str	r2, [r3, #28]
 800cb82:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800cb86:	e093      	b.n	800ccb0 <start_pass+0x19c>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cb88:	f240 2002 	movw	r0, #514	@ 0x202
 800cb8c:	4283      	cmp	r3, r0
 800cb8e:	d1f5      	bne.n	800cb7c <start_pass+0x68>
 800cb90:	4d89      	ldr	r5, [pc, #548]	@ (800cdb8 <start_pass+0x2a4>)
 800cb92:	e092      	b.n	800ccba <start_pass+0x1a6>
 800cb94:	f240 3006 	movw	r0, #774	@ 0x306
 800cb98:	4283      	cmp	r3, r0
 800cb9a:	f000 809a 	beq.w	800ccd2 <start_pass+0x1be>
 800cb9e:	f240 4002 	movw	r0, #1026	@ 0x402
 800cba2:	4283      	cmp	r3, r0
 800cba4:	f000 8097 	beq.w	800ccd6 <start_pass+0x1c2>
 800cba8:	f240 3003 	movw	r0, #771	@ 0x303
 800cbac:	4283      	cmp	r3, r0
 800cbae:	d1e5      	bne.n	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_3x3;
 800cbb0:	4d82      	ldr	r5, [pc, #520]	@ (800cdbc <start_pass+0x2a8>)
 800cbb2:	e082      	b.n	800ccba <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cbb4:	f240 6003 	movw	r0, #1539	@ 0x603
 800cbb8:	4283      	cmp	r3, r0
 800cbba:	f000 808e 	beq.w	800ccda <start_pass+0x1c6>
 800cbbe:	dc0e      	bgt.n	800cbde <start_pass+0xca>
 800cbc0:	f240 5005 	movw	r0, #1285	@ 0x505
 800cbc4:	4283      	cmp	r3, r0
 800cbc6:	f000 808a 	beq.w	800ccde <start_pass+0x1ca>
 800cbca:	f240 500a 	movw	r0, #1290	@ 0x50a
 800cbce:	4283      	cmp	r3, r0
 800cbd0:	f000 8087 	beq.w	800cce2 <start_pass+0x1ce>
 800cbd4:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 800cbd8:	d1d0      	bne.n	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_4x8;
 800cbda:	4d79      	ldr	r5, [pc, #484]	@ (800cdc0 <start_pass+0x2ac>)
 800cbdc:	e06d      	b.n	800ccba <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cbde:	f240 600c 	movw	r0, #1548	@ 0x60c
 800cbe2:	4283      	cmp	r3, r0
 800cbe4:	d07f      	beq.n	800cce6 <start_pass+0x1d2>
 800cbe6:	f240 7007 	movw	r0, #1799	@ 0x707
 800cbea:	4283      	cmp	r3, r0
 800cbec:	d07d      	beq.n	800ccea <start_pass+0x1d6>
 800cbee:	f240 6006 	movw	r0, #1542	@ 0x606
 800cbf2:	4283      	cmp	r3, r0
 800cbf4:	d1c2      	bne.n	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_6x6;
 800cbf6:	4d73      	ldr	r5, [pc, #460]	@ (800cdc4 <start_pass+0x2b0>)
 800cbf8:	e05f      	b.n	800ccba <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cbfa:	f640 4006 	movw	r0, #3078	@ 0xc06
 800cbfe:	4283      	cmp	r3, r0
 800cc00:	d075      	beq.n	800ccee <start_pass+0x1da>
 800cc02:	dc1f      	bgt.n	800cc44 <start_pass+0x130>
 800cc04:	f640 1009 	movw	r0, #2313	@ 0x909
 800cc08:	4283      	cmp	r3, r0
 800cc0a:	d072      	beq.n	800ccf2 <start_pass+0x1de>
 800cc0c:	dc0c      	bgt.n	800cc28 <start_pass+0x114>
 800cc0e:	f640 0008 	movw	r0, #2056	@ 0x808
 800cc12:	4283      	cmp	r3, r0
 800cc14:	d038      	beq.n	800cc88 <start_pass+0x174>
 800cc16:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 800cc1a:	d06c      	beq.n	800ccf6 <start_pass+0x1e2>
 800cc1c:	f640 0004 	movw	r0, #2052	@ 0x804
 800cc20:	4283      	cmp	r3, r0
 800cc22:	d1ab      	bne.n	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_8x4;
 800cc24:	4d68      	ldr	r5, [pc, #416]	@ (800cdc8 <start_pass+0x2b4>)
 800cc26:	e048      	b.n	800ccba <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cc28:	f640 200a 	movw	r0, #2570	@ 0xa0a
 800cc2c:	4283      	cmp	r3, r0
 800cc2e:	d064      	beq.n	800ccfa <start_pass+0x1e6>
 800cc30:	f640 300b 	movw	r0, #2827	@ 0xb0b
 800cc34:	4283      	cmp	r3, r0
 800cc36:	d062      	beq.n	800ccfe <start_pass+0x1ea>
 800cc38:	f640 2005 	movw	r0, #2565	@ 0xa05
 800cc3c:	4283      	cmp	r3, r0
 800cc3e:	d19d      	bne.n	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_10x5;
 800cc40:	4d62      	ldr	r5, [pc, #392]	@ (800cdcc <start_pass+0x2b8>)
 800cc42:	e03a      	b.n	800ccba <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cc44:	f640 600e 	movw	r0, #3598	@ 0xe0e
 800cc48:	4283      	cmp	r3, r0
 800cc4a:	d05a      	beq.n	800cd02 <start_pass+0x1ee>
 800cc4c:	dc0d      	bgt.n	800cc6a <start_pass+0x156>
 800cc4e:	f640 500d 	movw	r0, #3341	@ 0xd0d
 800cc52:	4283      	cmp	r3, r0
 800cc54:	d057      	beq.n	800cd06 <start_pass+0x1f2>
 800cc56:	f640 6007 	movw	r0, #3591	@ 0xe07
 800cc5a:	4283      	cmp	r3, r0
 800cc5c:	d055      	beq.n	800cd0a <start_pass+0x1f6>
 800cc5e:	f640 400c 	movw	r0, #3084	@ 0xc0c
 800cc62:	4283      	cmp	r3, r0
 800cc64:	d18a      	bne.n	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_12x12;
 800cc66:	4d5a      	ldr	r5, [pc, #360]	@ (800cdd0 <start_pass+0x2bc>)
 800cc68:	e027      	b.n	800ccba <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800cc6a:	f241 0008 	movw	r0, #4104	@ 0x1008
 800cc6e:	4283      	cmp	r3, r0
 800cc70:	d04d      	beq.n	800cd0e <start_pass+0x1fa>
 800cc72:	f241 0010 	movw	r0, #4112	@ 0x1010
 800cc76:	4283      	cmp	r3, r0
 800cc78:	d04b      	beq.n	800cd12 <start_pass+0x1fe>
 800cc7a:	f640 700f 	movw	r0, #3855	@ 0xf0f
 800cc7e:	4283      	cmp	r3, r0
 800cc80:	f47f af7c 	bne.w	800cb7c <start_pass+0x68>
      method_ptr = jpeg_idct_15x15;
 800cc84:	4d53      	ldr	r5, [pc, #332]	@ (800cdd4 <start_pass+0x2c0>)
 800cc86:	e018      	b.n	800ccba <start_pass+0x1a6>
      switch (cinfo->dct_method) {
 800cc88:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d80c      	bhi.n	800ccaa <start_pass+0x196>
 800cc90:	461c      	mov	r4, r3
 800cc92:	4b51      	ldr	r3, [pc, #324]	@ (800cdd8 <start_pass+0x2c4>)
 800cc94:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800cc98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800cc9a:	f848 5f04 	str.w	r5, [r8, #4]!
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d139      	bne.n	800cd16 <start_pass+0x202>
       ci++, compptr++) {
 800cca2:	f109 0901 	add.w	r9, r9, #1
 800cca6:	3758      	adds	r7, #88	@ 0x58
 800cca8:	e73e      	b.n	800cb28 <start_pass+0x14>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800ccaa:	6833      	ldr	r3, [r6, #0]
 800ccac:	2231      	movs	r2, #49	@ 0x31
 800ccae:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	4798      	blx	r3
      break;
 800ccb6:	e7ef      	b.n	800cc98 <start_pass+0x184>
      method_ptr = jpeg_idct_7x14;
 800ccb8:	4d48      	ldr	r5, [pc, #288]	@ (800cddc <start_pass+0x2c8>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccba:	2400      	movs	r4, #0
 800ccbc:	e7ec      	b.n	800cc98 <start_pass+0x184>
      method_ptr = jpeg_idct_4x4;
 800ccbe:	4d48      	ldr	r5, [pc, #288]	@ (800cde0 <start_pass+0x2cc>)
 800ccc0:	e7fb      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_2x4;
 800ccc2:	4d48      	ldr	r5, [pc, #288]	@ (800cde4 <start_pass+0x2d0>)
 800ccc4:	e7f9      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_2x1;
 800ccc6:	4d48      	ldr	r5, [pc, #288]	@ (800cde8 <start_pass+0x2d4>)
 800ccc8:	e7f7      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_1x1;
 800ccca:	4d48      	ldr	r5, [pc, #288]	@ (800cdec <start_pass+0x2d8>)
 800cccc:	e7f5      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_1x2;
 800ccce:	4d48      	ldr	r5, [pc, #288]	@ (800cdf0 <start_pass+0x2dc>)
 800ccd0:	e7f3      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_3x6;
 800ccd2:	4d48      	ldr	r5, [pc, #288]	@ (800cdf4 <start_pass+0x2e0>)
 800ccd4:	e7f1      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_4x2;
 800ccd6:	4d48      	ldr	r5, [pc, #288]	@ (800cdf8 <start_pass+0x2e4>)
 800ccd8:	e7ef      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_6x3;
 800ccda:	4d48      	ldr	r5, [pc, #288]	@ (800cdfc <start_pass+0x2e8>)
 800ccdc:	e7ed      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_5x5;
 800ccde:	4d48      	ldr	r5, [pc, #288]	@ (800ce00 <start_pass+0x2ec>)
 800cce0:	e7eb      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_5x10;
 800cce2:	4d48      	ldr	r5, [pc, #288]	@ (800ce04 <start_pass+0x2f0>)
 800cce4:	e7e9      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_6x12;
 800cce6:	4d48      	ldr	r5, [pc, #288]	@ (800ce08 <start_pass+0x2f4>)
 800cce8:	e7e7      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_7x7;
 800ccea:	4d48      	ldr	r5, [pc, #288]	@ (800ce0c <start_pass+0x2f8>)
 800ccec:	e7e5      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_12x6;
 800ccee:	4d48      	ldr	r5, [pc, #288]	@ (800ce10 <start_pass+0x2fc>)
 800ccf0:	e7e3      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_9x9;
 800ccf2:	4d48      	ldr	r5, [pc, #288]	@ (800ce14 <start_pass+0x300>)
 800ccf4:	e7e1      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_8x16;
 800ccf6:	4d48      	ldr	r5, [pc, #288]	@ (800ce18 <start_pass+0x304>)
 800ccf8:	e7df      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_10x10;
 800ccfa:	4d48      	ldr	r5, [pc, #288]	@ (800ce1c <start_pass+0x308>)
 800ccfc:	e7dd      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_11x11;
 800ccfe:	4d48      	ldr	r5, [pc, #288]	@ (800ce20 <start_pass+0x30c>)
 800cd00:	e7db      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_14x14;
 800cd02:	4d48      	ldr	r5, [pc, #288]	@ (800ce24 <start_pass+0x310>)
 800cd04:	e7d9      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_13x13;
 800cd06:	4d48      	ldr	r5, [pc, #288]	@ (800ce28 <start_pass+0x314>)
 800cd08:	e7d7      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_14x7;
 800cd0a:	4d48      	ldr	r5, [pc, #288]	@ (800ce2c <start_pass+0x318>)
 800cd0c:	e7d5      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_16x8;
 800cd0e:	4d48      	ldr	r5, [pc, #288]	@ (800ce30 <start_pass+0x31c>)
 800cd10:	e7d3      	b.n	800ccba <start_pass+0x1a6>
      method_ptr = jpeg_idct_16x16;
 800cd12:	4d48      	ldr	r5, [pc, #288]	@ (800ce34 <start_pass+0x320>)
 800cd14:	e7d1      	b.n	800ccba <start_pass+0x1a6>
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800cd16:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 800cd1a:	42a3      	cmp	r3, r4
 800cd1c:	d0c1      	beq.n	800cca2 <start_pass+0x18e>
    qtbl = compptr->quant_table;
 800cd1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d0be      	beq.n	800cca2 <start_pass+0x18e>
    switch (method) {
 800cd24:	2c01      	cmp	r4, #1
 800cd26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
    idct->cur_method[ci] = method;
 800cd28:	f8c8 4028 	str.w	r4, [r8, #40]	@ 0x28
    switch (method) {
 800cd2c:	d00a      	beq.n	800cd44 <start_pass+0x230>
 800cd2e:	2c02      	cmp	r4, #2
 800cd30:	d01a      	beq.n	800cd68 <start_pass+0x254>
	for (i = 0; i < DCTSIZE2; i++) {
 800cd32:	2200      	movs	r2, #0
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800cd34:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800cd38:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800cd3c:	3201      	adds	r2, #1
 800cd3e:	2a40      	cmp	r2, #64	@ 0x40
 800cd40:	d1f8      	bne.n	800cd34 <start_pass+0x220>
 800cd42:	e7ae      	b.n	800cca2 <start_pass+0x18e>
	for (i = 0; i < DCTSIZE2; i++) {
 800cd44:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 800ce38 <start_pass+0x324>
 800cd48:	2000      	movs	r0, #0
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800cd4a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 800cd4e:	f93c eb02 	ldrsh.w	lr, [ip], #2
 800cd52:	fb0e f202 	mul.w	r2, lr, r2
 800cd56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd5a:	1312      	asrs	r2, r2, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800cd5c:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800cd60:	3001      	adds	r0, #1
 800cd62:	2840      	cmp	r0, #64	@ 0x40
 800cd64:	d1f1      	bne.n	800cd4a <start_pass+0x236>
 800cd66:	e79c      	b.n	800cca2 <start_pass+0x18e>
	for (row = 0; row < DCTSIZE; row++) {
 800cd68:	f8df c0d0 	ldr.w	ip, [pc, #208]	@ 800ce3c <start_pass+0x328>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cd6c:	eeb4 5b00 	vmov.f64	d5, #64	@ 0x3e000000  0.125
	i = 0;
 800cd70:	2200      	movs	r2, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800cd72:	46e2      	mov	sl, ip
	  for (col = 0; col < DCTSIZE; col++) {
 800cd74:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 800cd78:	f103 0b10 	add.w	fp, r3, #16
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cd7c:	f8cd c004 	str.w	ip, [sp, #4]
 800cd80:	ecba 6b02 	vldmia	sl!, {d6}
	      ((double) qtbl->quantval[i] *
 800cd84:	f833 0b02 	ldrh.w	r0, [r3], #2
 800cd88:	ee07 0a10 	vmov	s14, r0
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cd8c:	9801      	ldr	r0, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800cd8e:	455b      	cmp	r3, fp
	      ((double) qtbl->quantval[i] *
 800cd90:	eeb8 7b47 	vcvt.f64.u32	d7, s14
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cd94:	ecb0 4b02 	vldmia	r0!, {d4}
	      ((double) qtbl->quantval[i] *
 800cd98:	ee27 7b06 	vmul.f64	d7, d7, d6
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cd9c:	9001      	str	r0, [sp, #4]
 800cd9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cda2:	ee27 7b05 	vmul.f64	d7, d7, d5
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800cda6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800cdaa:	ecae 7a01 	vstmia	lr!, {s14}
	  for (col = 0; col < DCTSIZE; col++) {
 800cdae:	d1e9      	bne.n	800cd84 <start_pass+0x270>
	    i++;
 800cdb0:	3208      	adds	r2, #8
	for (row = 0; row < DCTSIZE; row++) {
 800cdb2:	2a40      	cmp	r2, #64	@ 0x40
 800cdb4:	d1de      	bne.n	800cd74 <start_pass+0x260>
 800cdb6:	e774      	b.n	800cca2 <start_pass+0x18e>
 800cdb8:	08011ee1 	.word	0x08011ee1
 800cdbc:	08011ded 	.word	0x08011ded
 800cdc0:	08015d15 	.word	0x08015d15
 800cdc4:	08011991 	.word	0x08011991
 800cdc8:	08014c91 	.word	0x08014c91
 800cdcc:	08014a41 	.word	0x08014a41
 800cdd0:	08012945 	.word	0x08012945
 800cdd4:	080135f1 	.word	0x080135f1
 800cdd8:	0802e6f0 	.word	0x0802e6f0
 800cddc:	080154b5 	.word	0x080154b5
 800cde0:	08011cc1 	.word	0x08011cc1
 800cde4:	0801607d 	.word	0x0801607d
 800cde8:	080150a5 	.word	0x080150a5
 800cdec:	08011f5d 	.word	0x08011f5d
 800cdf0:	08016155 	.word	0x08016155
 800cdf4:	08015f2d 	.word	0x08015f2d
 800cdf8:	08014fd9 	.word	0x08014fd9
 800cdfc:	08014e7d 	.word	0x08014e7d
 800ce00:	08011b41 	.word	0x08011b41
 800ce04:	08015add 	.word	0x08015add
 800ce08:	08015825 	.word	0x08015825
 800ce0c:	080116fd 	.word	0x080116fd
 800ce10:	08014789 	.word	0x08014789
 800ce14:	08011f81 	.word	0x08011f81
 800ce18:	080150dd 	.word	0x080150dd
 800ce1c:	08012245 	.word	0x08012245
 800ce20:	08012549 	.word	0x08012549
 800ce24:	080131a9 	.word	0x080131a9
 800ce28:	08012d11 	.word	0x08012d11
 800ce2c:	080143fd 	.word	0x080143fd
 800ce30:	08013fc5 	.word	0x08013fc5
 800ce34:	08013a85 	.word	0x08013a85
 800ce38:	0802e740 	.word	0x0802e740
 800ce3c:	0802e700 	.word	0x0802e700

0800ce40 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce42:	6843      	ldr	r3, [r0, #4]
{
 800ce44:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce46:	2254      	movs	r2, #84	@ 0x54
 800ce48:	2101      	movs	r1, #1
 800ce4a:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce4c:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce4e:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800ce50:	4b0f      	ldr	r3, [pc, #60]	@ (800ce90 <jinit_inverse_dct+0x50>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce52:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce54:	f8d5 70d8 	ldr.w	r7, [r5, #216]	@ 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800ce58:	f8c5 01d4 	str.w	r0, [r5, #468]	@ 0x1d4
  idct->pub.start_pass = start_pass;
 800ce5c:	f844 3b28 	str.w	r3, [r4], #40
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce60:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ce62:	42b3      	cmp	r3, r6
 800ce64:	dc00      	bgt.n	800ce68 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800ce66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce68:	686b      	ldr	r3, [r5, #4]
 800ce6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce6e:	2101      	movs	r1, #1
 800ce70:	4628      	mov	r0, r5
 800ce72:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800ce74:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce76:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800ce78:	f44f 7280 	mov.w	r2, #256	@ 0x100
    compptr->dct_table =
 800ce7c:	6578      	str	r0, [r7, #84]	@ 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800ce7e:	2100      	movs	r1, #0
 800ce80:	f01e f962 	bl	802b148 <memset>
    idct->cur_method[ci] = -1;
 800ce84:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800ce88:	3758      	adds	r7, #88	@ 0x58
    idct->cur_method[ci] = -1;
 800ce8a:	f844 3f04 	str.w	r3, [r4, #4]!
       ci++, compptr++) {
 800ce8e:	e7e7      	b.n	800ce60 <jinit_inverse_dct+0x20>
 800ce90:	0800cb15 	.word	0x0800cb15

0800ce94 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800ce94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800ce98:	6905      	ldr	r5, [r0, #16]
{
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	460f      	mov	r7, r1
 800ce9e:	4692      	mov	sl, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800cea0:	f8d5 81b4 	ldr.w	r8, [r5, #436]	@ 0x1b4
{
 800cea4:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800cea6:	e9d0 4b00 	ldrd	r4, fp, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800ceaa:	f1b8 0f00 	cmp.w	r8, #0
 800ceae:	d044      	beq.n	800cf3a <jpeg_fill_bit_buffer+0xa6>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800ceb0:	45ca      	cmp	sl, r9
 800ceb2:	da45      	bge.n	800cf40 <jpeg_fill_bit_buffer+0xac>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800ceb4:	f8d5 31d0 	ldr.w	r3, [r5, #464]	@ 0x1d0
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceba:	b95b      	cbnz	r3, 800ced4 <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	2278      	movs	r2, #120	@ 0x78
 800cec0:	f04f 31ff 	mov.w	r1, #4294967295
 800cec4:	4628      	mov	r0, r5
 800cec6:	615a      	str	r2, [r3, #20]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800cecc:	f8d5 31d0 	ldr.w	r3, [r5, #464]	@ 0x1d0
 800ced0:	2201      	movs	r2, #1
 800ced2:	625a      	str	r2, [r3, #36]	@ 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800ced4:	f1ca 0a19 	rsb	sl, sl, #25
 800ced8:	fa07 f70a 	lsl.w	r7, r7, sl
      bits_left = MIN_GET_BITS;
 800cedc:	f04f 0a19 	mov.w	sl, #25
 800cee0:	e02e      	b.n	800cf40 <jpeg_fill_bit_buffer+0xac>
      if (bytes_in_buffer == 0) {
 800cee2:	f1bb 0f00 	cmp.w	fp, #0
 800cee6:	d107      	bne.n	800cef8 <jpeg_fill_bit_buffer+0x64>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800cee8:	69ab      	ldr	r3, [r5, #24]
 800ceea:	4628      	mov	r0, r5
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	4798      	blx	r3
 800cef0:	b360      	cbz	r0, 800cf4c <jpeg_fill_bit_buffer+0xb8>
	next_input_byte = cinfo->src->next_input_byte;
 800cef2:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800cef4:	e9d3 4b00 	ldrd	r4, fp, [r3]
      c = GETJOCTET(*next_input_byte++);
 800cef8:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800cefc:	f10b 3bff 	add.w	fp, fp, #4294967295
      if (c == 0xFF) {
 800cf00:	2aff      	cmp	r2, #255	@ 0xff
 800cf02:	d116      	bne.n	800cf32 <jpeg_fill_bit_buffer+0x9e>
	  if (bytes_in_buffer == 0) {
 800cf04:	f1bb 0f00 	cmp.w	fp, #0
 800cf08:	d109      	bne.n	800cf1e <jpeg_fill_bit_buffer+0x8a>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800cf0a:	69ab      	ldr	r3, [r5, #24]
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	9201      	str	r2, [sp, #4]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	4798      	blx	r3
 800cf14:	b1d0      	cbz	r0, 800cf4c <jpeg_fill_bit_buffer+0xb8>
	    next_input_byte = cinfo->src->next_input_byte;
 800cf16:	69ab      	ldr	r3, [r5, #24]
 800cf18:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800cf1a:	e9d3 4b00 	ldrd	r4, fp, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800cf1e:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800cf22:	f10b 3bff 	add.w	fp, fp, #4294967295
	} while (c == 0xFF);
 800cf26:	2bff      	cmp	r3, #255	@ 0xff
 800cf28:	d0ec      	beq.n	800cf04 <jpeg_fill_bit_buffer+0x70>
	if (c == 0) {
 800cf2a:	b113      	cbz	r3, 800cf32 <jpeg_fill_bit_buffer+0x9e>
	  cinfo->unread_marker = c;
 800cf2c:	f8c5 31b4 	str.w	r3, [r5, #436]	@ 0x1b4
	  goto no_more_bytes;
 800cf30:	e7be      	b.n	800ceb0 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800cf32:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
      bits_left += 8;
 800cf36:	f10a 0a08 	add.w	sl, sl, #8
    while (bits_left < MIN_GET_BITS) {
 800cf3a:	f1ba 0f18 	cmp.w	sl, #24
 800cf3e:	ddd0      	ble.n	800cee2 <jpeg_fill_bit_buffer+0x4e>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800cf40:	f04f 0801 	mov.w	r8, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800cf44:	e9c6 4b00 	strd	r4, fp, [r6]
  state->bits_left = bits_left;
 800cf48:	e9c6 7a02 	strd	r7, sl, [r6, #8]
}
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	b003      	add	sp, #12
 800cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf54 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800cf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf56:	9d06      	ldr	r5, [sp, #24]
 800cf58:	4606      	mov	r6, r0
 800cf5a:	468c      	mov	ip, r1
 800cf5c:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800cf5e:	4295      	cmp	r5, r2
{
 800cf60:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800cf62:	dd08      	ble.n	800cf76 <jpeg_huff_decode+0x22>
 800cf64:	462b      	mov	r3, r5
 800cf66:	f7ff ff95 	bl	800ce94 <jpeg_fill_bit_buffer>
 800cf6a:	b910      	cbnz	r0, 800cf72 <jpeg_huff_decode+0x1e>
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800cf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800cf72:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800cf76:	1b62      	subs	r2, r4, r5
 800cf78:	4b1b      	ldr	r3, [pc, #108]	@ (800cfe8 <jpeg_huff_decode+0x94>)
 800cf7a:	fa4c f002 	asr.w	r0, ip, r2
 800cf7e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cf82:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800cf84:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800cf88:	4283      	cmp	r3, r0
 800cf8a:	db0d      	blt.n	800cfa8 <jpeg_huff_decode+0x54>
  if (l > 16) {
 800cf8c:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800cf8e:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800cf92:	dd1f      	ble.n	800cfd4 <jpeg_huff_decode+0x80>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800cf94:	6930      	ldr	r0, [r6, #16]
 800cf96:	2279      	movs	r2, #121	@ 0x79
 800cf98:	f04f 31ff 	mov.w	r1, #4294967295
 800cf9c:	6803      	ldr	r3, [r0, #0]
 800cf9e:	615a      	str	r2, [r3, #20]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	e7e3      	b.n	800cf70 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800cfa8:	2a00      	cmp	r2, #0
    code <<= 1;
 800cfaa:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800cfae:	dc08      	bgt.n	800cfc2 <jpeg_huff_decode+0x6e>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4661      	mov	r1, ip
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7ff ff6d 	bl	800ce94 <jpeg_fill_bit_buffer>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d0d6      	beq.n	800cf6c <jpeg_huff_decode+0x18>
 800cfbe:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800cfc2:	3a01      	subs	r2, #1
    l++;
 800cfc4:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800cfc6:	fa4c f302 	asr.w	r3, ip, r2
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	ea43 0004 	orr.w	r0, r3, r4
    l++;
 800cfd2:	e7d7      	b.n	800cf84 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800cfd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cfd8:	3512      	adds	r5, #18
 800cfda:	4403      	add	r3, r0
 800cfdc:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	7c58      	ldrb	r0, [r3, #17]
 800cfe4:	e7c4      	b.n	800cf70 <jpeg_huff_decode+0x1c>
 800cfe6:	bf00      	nop
 800cfe8:	0802e7c0 	.word	0x0802e7c0

0800cfec <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800cfec:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cfee:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	@ 0x1cc
  entropy->bitstate.bits_left = 0;
 800cff2:	2600      	movs	r6, #0
{
 800cff4:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cff6:	68eb      	ldr	r3, [r5, #12]
 800cff8:	6991      	ldr	r1, [r2, #24]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bfb8      	it	lt
 800cffe:	3307      	addlt	r3, #7
 800d000:	eb01 01e3 	add.w	r1, r1, r3, asr #3

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800d004:	6893      	ldr	r3, [r2, #8]
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800d006:	6191      	str	r1, [r2, #24]
  entropy->bitstate.bits_left = 0;
 800d008:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800d00a:	4798      	blx	r3
 800d00c:	b188      	cbz	r0, 800d032 <process_restart+0x46>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800d00e:	f8d4 2150 	ldr.w	r2, [r4, #336]	@ 0x150
 800d012:	4631      	mov	r1, r6
 800d014:	f105 0014 	add.w	r0, r5, #20
 800d018:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800d01c:	0092      	lsls	r2, r2, #2
 800d01e:	f01e f893 	bl	802b148 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800d022:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
  entropy->saved.EOBRUN = 0;
 800d026:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800d028:	62ab      	str	r3, [r5, #40]	@ 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800d02a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	@ 0x1b4
 800d02e:	b10b      	cbz	r3, 800d034 <process_restart+0x48>
    entropy->insufficient_data = FALSE;

  return TRUE;
 800d030:	2001      	movs	r0, #1
}
 800d032:	bd70      	pop	{r4, r5, r6, pc}
    entropy->insufficient_data = FALSE;
 800d034:	626b      	str	r3, [r5, #36]	@ 0x24
 800d036:	e7fb      	b.n	800d030 <process_restart+0x44>

0800d038 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800d03c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
{   
 800d040:	b091      	sub	sp, #68	@ 0x44
 800d042:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d044:	f8d0 41d0 	ldr.w	r4, [r0, #464]	@ 0x1d0
  int Al = cinfo->Al;
 800d048:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d04a:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800d04e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800d050:	b933      	cbnz	r3, 800d060 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d052:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800d054:	b17e      	cbz	r6, 800d076 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d056:	6aa3      	ldr	r3, [r4, #40]	@ 0x28

  return TRUE;
 800d058:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d05a:	3b01      	subs	r3, #1
 800d05c:	62a3      	str	r3, [r4, #40]	@ 0x28
  return TRUE;
 800d05e:	e007      	b.n	800d070 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800d060:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1f5      	bne.n	800d052 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800d066:	f7ff ffc1 	bl	800cfec <process_restart>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d1f1      	bne.n	800d052 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800d06e:	2000      	movs	r0, #0
}
 800d070:	b011      	add	sp, #68	@ 0x44
 800d072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d076:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800d078:	f104 0810 	add.w	r8, r4, #16
 800d07c:	af0b      	add	r7, sp, #44	@ 0x2c
 800d07e:	f505 79b6 	add.w	r9, r5, #364	@ 0x16c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	f104 0b10 	add.w	fp, r4, #16
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	9206      	str	r2, [sp, #24]
 800d08c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800d08e:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800d1a8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d092:	950a      	str	r5, [sp, #40]	@ 0x28
    ASSIGN_STATE(state, entropy->saved);
 800d094:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d098:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d09c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d09e:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d0a4:	f8d5 316c 	ldr.w	r3, [r5, #364]	@ 0x16c
 800d0a8:	42b3      	cmp	r3, r6
 800d0aa:	dc0d      	bgt.n	800d0c8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d0ac:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d0ae:	ae0b      	add	r6, sp, #44	@ 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d0b0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d0b2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	9a07      	ldr	r2, [sp, #28]
 800d0b8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d0ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d0bc:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d0c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0c2:	6833      	ldr	r3, [r6, #0]
 800d0c4:	602b      	str	r3, [r5, #0]
 800d0c6:	e7c6      	b.n	800d056 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800d0c8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d0ca:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800d0ce:	f859 7f04 	ldr.w	r7, [r9, #4]!
      block = MCU_data[blkn];
 800d0d2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800d0d6:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800d0d8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800d0dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0e6:	f8d3 802c 	ldr.w	r8, [r3, #44]	@ 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d0ea:	dc0c      	bgt.n	800d106 <decode_mcu_DC_first+0xce>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	4662      	mov	r2, ip
 800d0f0:	4671      	mov	r1, lr
 800d0f2:	a806      	add	r0, sp, #24
 800d0f4:	f7ff fece 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d0b8      	beq.n	800d06e <decode_mcu_DC_first+0x36>
 800d0fc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d100:	f1bc 0f07 	cmp.w	ip, #7
 800d104:	dd3e      	ble.n	800d184 <decode_mcu_DC_first+0x14c>
 800d106:	f1ac 0308 	sub.w	r3, ip, #8
 800d10a:	fa4e f303 	asr.w	r3, lr, r3
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d114:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d042      	beq.n	800d1a2 <decode_mcu_DC_first+0x16a>
 800d11c:	4443      	add	r3, r8
 800d11e:	ebac 0c02 	sub.w	ip, ip, r2
 800d122:	f893 8490 	ldrb.w	r8, [r3, #1168]	@ 0x490
      if (s) {
 800d126:	f1b8 0f00 	cmp.w	r8, #0
 800d12a:	d01b      	beq.n	800d164 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d12c:	45e0      	cmp	r8, ip
 800d12e:	dd09      	ble.n	800d144 <decode_mcu_DC_first+0x10c>
 800d130:	4643      	mov	r3, r8
 800d132:	4662      	mov	r2, ip
 800d134:	4671      	mov	r1, lr
 800d136:	a806      	add	r0, sp, #24
 800d138:	f7ff feac 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d096      	beq.n	800d06e <decode_mcu_DC_first+0x36>
 800d140:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800d144:	ebac 0c08 	sub.w	ip, ip, r8
 800d148:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800d14c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800d150:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800d154:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800d158:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800d15a:	4299      	cmp	r1, r3
 800d15c:	bfac      	ite	ge
 800d15e:	eba3 0802 	subge.w	r8, r3, r2
 800d162:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800d164:	ab10      	add	r3, sp, #64	@ 0x40
      (*block)[0] = (JCOEF) (s << Al);
 800d166:	9a03      	ldr	r2, [sp, #12]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d168:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800d16a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d16e:	f857 3c10 	ldr.w	r3, [r7, #-16]
 800d172:	4443      	add	r3, r8
      (*block)[0] = (JCOEF) (s << Al);
 800d174:	fa03 f802 	lsl.w	r8, r3, r2
      state.last_dc_val[ci] = s;
 800d178:	f847 3c10 	str.w	r3, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d182:	e78f      	b.n	800d0a4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d184:	2301      	movs	r3, #1
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	4662      	mov	r2, ip
 800d18a:	4643      	mov	r3, r8
 800d18c:	4671      	mov	r1, lr
 800d18e:	a806      	add	r0, sp, #24
 800d190:	f7ff fee0 	bl	800cf54 <jpeg_huff_decode>
 800d194:	f1b0 0800 	subs.w	r8, r0, #0
 800d198:	f6ff af69 	blt.w	800d06e <decode_mcu_DC_first+0x36>
 800d19c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d1a0:	e7c1      	b.n	800d126 <decode_mcu_DC_first+0xee>
 800d1a2:	2309      	movs	r3, #9
 800d1a4:	e7ef      	b.n	800d186 <decode_mcu_DC_first+0x14e>
 800d1a6:	bf00      	nop
 800d1a8:	0802e7c0 	.word	0x0802e7c0

0800d1ac <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d1ac:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	4607      	mov	r7, r0
 800d1b6:	b08d      	sub	sp, #52	@ 0x34
 800d1b8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d1ba:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800d1be:	b933      	cbnz	r3, 800d1ce <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d1c0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d1c2:	b17b      	cbz	r3, 800d1e4 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d1c4:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  return TRUE;
 800d1c6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800d1cc:	e007      	b.n	800d1de <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800d1ce:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1f5      	bne.n	800d1c0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800d1d4:	f7ff ff0a 	bl	800cfec <process_restart>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d1f1      	bne.n	800d1c0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800d1dc:	2000      	movs	r0, #0
}
 800d1de:	b00d      	add	sp, #52	@ 0x34
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800d1e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800d1e8:	692e      	ldr	r6, [r5, #16]
    Se = cinfo->Se;
 800d1ea:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800d1ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    natural_order = cinfo->natural_order;
 800d1f0:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	@ 0x1ac
    Al = cinfo->Al;
 800d1f4:	9304      	str	r3, [sp, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800d1f6:	b116      	cbz	r6, 800d1fe <decode_mcu_AC_first+0x52>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800d1f8:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800d1fa:	612e      	str	r6, [r5, #16]
 800d1fc:	e7e2      	b.n	800d1c4 <decode_mcu_AC_first+0x18>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d1fe:	69bb      	ldr	r3, [r7, #24]
      tbl = entropy->ac_derived_tbl;
 800d200:	f8d5 903c 	ldr.w	r9, [r5, #60]	@ 0x3c
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	9207      	str	r2, [sp, #28]
 800d20a:	9308      	str	r3, [sp, #32]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d20c:	f8d7 8198 	ldr.w	r8, [r7, #408]	@ 0x198
      block = MCU_data[0];
 800d210:	6823      	ldr	r3, [r4, #0]
	  r = GET_BITS(s);
 800d212:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 800d308 <decode_mcu_AC_first+0x15c>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d216:	970b      	str	r7, [sp, #44]	@ 0x2c
      block = MCU_data[0];
 800d218:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d21a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d21e:	9b03      	ldr	r3, [sp, #12]
 800d220:	4598      	cmp	r8, r3
 800d222:	dc68      	bgt.n	800d2f6 <decode_mcu_AC_first+0x14a>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800d224:	2a07      	cmp	r2, #7
 800d226:	dc09      	bgt.n	800d23c <decode_mcu_AC_first+0x90>
 800d228:	2300      	movs	r3, #0
 800d22a:	a807      	add	r0, sp, #28
 800d22c:	f7ff fe32 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d230:	2800      	cmp	r0, #0
 800d232:	d0d3      	beq.n	800d1dc <decode_mcu_AC_first+0x30>
 800d234:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800d238:	2a07      	cmp	r2, #7
 800d23a:	dd32      	ble.n	800d2a2 <decode_mcu_AC_first+0xf6>
 800d23c:	f1a2 0308 	sub.w	r3, r2, #8
 800d240:	fa41 f303 	asr.w	r3, r1, r3
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d24a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d24e:	b398      	cbz	r0, 800d2b8 <decode_mcu_AC_first+0x10c>
 800d250:	444b      	add	r3, r9
 800d252:	1a12      	subs	r2, r2, r0
 800d254:	f893 4490 	ldrb.w	r4, [r3, #1168]	@ 0x490
	r = s >> 4;
 800d258:	1123      	asrs	r3, r4, #4
	if (s) {
 800d25a:	f014 040f 	ands.w	r4, r4, #15
 800d25e:	d02d      	beq.n	800d2bc <decode_mcu_AC_first+0x110>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d260:	42a2      	cmp	r2, r4
	  k += r;
 800d262:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d264:	da07      	bge.n	800d276 <decode_mcu_AC_first+0xca>
 800d266:	4623      	mov	r3, r4
 800d268:	a807      	add	r0, sp, #28
 800d26a:	f7ff fe13 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d0b4      	beq.n	800d1dc <decode_mcu_AC_first+0x30>
 800d272:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
	  r = GET_BITS(s);
 800d276:	1b12      	subs	r2, r2, r4
 800d278:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d27c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d27e:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800d282:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800d286:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800d288:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800d28a:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800d28c:	bfa8      	it	ge
 800d28e:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800d290:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800d294:	40a3      	lsls	r3, r4
 800d296:	9c05      	ldr	r4, [sp, #20]
 800d298:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d29c:	f108 0801 	add.w	r8, r8, #1
 800d2a0:	e7bd      	b.n	800d21e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	a807      	add	r0, sp, #28
 800d2a8:	464b      	mov	r3, r9
 800d2aa:	f7ff fe53 	bl	800cf54 <jpeg_huff_decode>
 800d2ae:	1e04      	subs	r4, r0, #0
 800d2b0:	db94      	blt.n	800d1dc <decode_mcu_AC_first+0x30>
 800d2b2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800d2b6:	e7cf      	b.n	800d258 <decode_mcu_AC_first+0xac>
 800d2b8:	2309      	movs	r3, #9
 800d2ba:	e7f3      	b.n	800d2a4 <decode_mcu_AC_first+0xf8>
	  if (r == 15) {	/* ZRL */
 800d2bc:	2b0f      	cmp	r3, #15
 800d2be:	d102      	bne.n	800d2c6 <decode_mcu_AC_first+0x11a>
	    k += 15;		/* skip 15 zeroes in band */
 800d2c0:	f108 080f 	add.w	r8, r8, #15
 800d2c4:	e7ea      	b.n	800d29c <decode_mcu_AC_first+0xf0>
	    EOBRUN = 1 << r;
 800d2c6:	2601      	movs	r6, #1
 800d2c8:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800d2ca:	b19b      	cbz	r3, 800d2f4 <decode_mcu_AC_first+0x148>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	da09      	bge.n	800d2e4 <decode_mcu_AC_first+0x138>
 800d2d0:	a807      	add	r0, sp, #28
 800d2d2:	9303      	str	r3, [sp, #12]
 800d2d4:	f7ff fdde 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	f43f af7f 	beq.w	800d1dc <decode_mcu_AC_first+0x30>
 800d2de:	9b03      	ldr	r3, [sp, #12]
 800d2e0:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
	      r = GET_BITS(r);
 800d2e4:	1ad2      	subs	r2, r2, r3
 800d2e6:	4808      	ldr	r0, [pc, #32]	@ (800d308 <decode_mcu_AC_first+0x15c>)
 800d2e8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d2ec:	fa41 f302 	asr.w	r3, r1, r2
 800d2f0:	4003      	ands	r3, r0
	      EOBRUN += r;
 800d2f2:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800d2f4:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	9807      	ldr	r0, [sp, #28]
 800d2fa:	6018      	str	r0, [r3, #0]
 800d2fc:	9808      	ldr	r0, [sp, #32]
 800d2fe:	6058      	str	r0, [r3, #4]
 800d300:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800d304:	e779      	b.n	800d1fa <decode_mcu_AC_first+0x4e>
 800d306:	bf00      	nop
 800d308:	0802e7c0 	.word	0x0802e7c0

0800d30c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d310:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
 800d314:	2701      	movs	r7, #1
{   
 800d316:	b087      	sub	sp, #28
 800d318:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d31a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d31c:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800d320:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d322:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800d326:	b9c3      	cbnz	r3, 800d35a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d328:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d32a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d32c:	9405      	str	r4, [sp, #20]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	9201      	str	r2, [sp, #4]
 800d334:	9302      	str	r3, [sp, #8]
 800d336:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d33a:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800d33e:	42b3      	cmp	r3, r6
 800d340:	dc16      	bgt.n	800d370 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d342:	69a3      	ldr	r3, [r4, #24]
 800d344:	9801      	ldr	r0, [sp, #4]
 800d346:	6018      	str	r0, [r3, #0]
 800d348:	9802      	ldr	r0, [sp, #8]
 800d34a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800d34c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d34e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d350:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d352:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800d356:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800d358:	e007      	b.n	800d36a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800d35a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e3      	bne.n	800d328 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800d360:	f7ff fe44 	bl	800cfec <process_restart>
 800d364:	2800      	cmp	r0, #0
 800d366:	d1df      	bne.n	800d328 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800d368:	2000      	movs	r0, #0
}
 800d36a:	b007      	add	sp, #28
 800d36c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800d370:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800d372:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800d376:	dc07      	bgt.n	800d388 <decode_mcu_DC_refine+0x7c>
 800d378:	2301      	movs	r3, #1
 800d37a:	a801      	add	r0, sp, #4
 800d37c:	f7ff fd8a 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d380:	2800      	cmp	r0, #0
 800d382:	d0f1      	beq.n	800d368 <decode_mcu_DC_refine+0x5c>
 800d384:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800d388:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d38a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800d38c:	fa41 f302 	asr.w	r3, r1, r2
 800d390:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800d392:	bf42      	ittt	mi
 800d394:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800d398:	433b      	orrmi	r3, r7
 800d39a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d39e:	e7cc      	b.n	800d33a <decode_mcu_DC_refine+0x2e>

0800d3a0 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d3a0:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	b0d1      	sub	sp, #324	@ 0x144
 800d3ac:	460e      	mov	r6, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d3ae:	f8d0 71d0 	ldr.w	r7, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800d3b2:	b94b      	cbnz	r3, 800d3c8 <decode_mcu_AC_refine+0x28>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800d3b4:	f8d7 a024 	ldr.w	sl, [r7, #36]	@ 0x24
 800d3b8:	f1ba 0f00 	cmp.w	sl, #0
 800d3bc:	d00f      	beq.n	800d3de <decode_mcu_AC_refine+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  return TRUE;
 800d3c0:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return TRUE;
 800d3c6:	e007      	b.n	800d3d8 <decode_mcu_AC_refine+0x38>
    if (entropy->restarts_to_go == 0)
 800d3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1f2      	bne.n	800d3b4 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800d3ce:	f7ff fe0d 	bl	800cfec <process_restart>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d1ee      	bne.n	800d3b4 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800d3d6:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800d3d8:	b051      	add	sp, #324	@ 0x144
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800d3de:	f8d5 319c 	ldr.w	r3, [r5, #412]	@ 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d3e2:	2201      	movs	r2, #1
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800d3e4:	f8d7 b010 	ldr.w	fp, [r7, #16]
    Se = cinfo->Se;
 800d3e8:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d3ea:	f8d5 31a4 	ldr.w	r3, [r5, #420]	@ 0x1a4
    block = MCU_data[0];
 800d3ee:	f8d6 8000 	ldr.w	r8, [r6]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d3f2:	409a      	lsls	r2, r3
    k = cinfo->Ss;
 800d3f4:	f8d5 6198 	ldr.w	r6, [r5, #408]	@ 0x198
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d3f8:	950f      	str	r5, [sp, #60]	@ 0x3c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d3fa:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800d3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d400:	fa02 f303 	lsl.w	r3, r2, r3
 800d404:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800d406:	f8d5 31ac 	ldr.w	r3, [r5, #428]	@ 0x1ac
 800d40a:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d40c:	69ab      	ldr	r3, [r5, #24]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d414:	930c      	str	r3, [sp, #48]	@ 0x30
    tbl = entropy->ac_derived_tbl;
 800d416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d418:	e9d7 4202 	ldrd	r4, r2, [r7, #8]
    tbl = entropy->ac_derived_tbl;
 800d41c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (EOBRUN == 0) {
 800d41e:	f1bb 0f00 	cmp.w	fp, #0
 800d422:	f000 80c3 	beq.w	800d5ac <decode_mcu_AC_refine+0x20c>
      for (; k <= Se; k++) {
 800d426:	9b06      	ldr	r3, [sp, #24]
 800d428:	429e      	cmp	r6, r3
 800d42a:	f340 80cd 	ble.w	800d5c8 <decode_mcu_AC_refine+0x228>
      EOBRUN--;
 800d42e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d432:	e0bf      	b.n	800d5b4 <decode_mcu_AC_refine+0x214>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d434:	2a07      	cmp	r2, #7
 800d436:	dc0a      	bgt.n	800d44e <decode_mcu_AC_refine+0xae>
 800d438:	2300      	movs	r3, #0
 800d43a:	4621      	mov	r1, r4
 800d43c:	a80b      	add	r0, sp, #44	@ 0x2c
 800d43e:	f7ff fd29 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d442:	2800      	cmp	r0, #0
 800d444:	d06e      	beq.n	800d524 <decode_mcu_AC_refine+0x184>
 800d446:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
 800d44a:	2a07      	cmp	r2, #7
 800d44c:	dd61      	ble.n	800d512 <decode_mcu_AC_refine+0x172>
 800d44e:	f1a2 0308 	sub.w	r3, r2, #8
 800d452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d454:	fa44 f303 	asr.w	r3, r4, r3
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d45e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800d462:	2900      	cmp	r1, #0
 800d464:	d06b      	beq.n	800d53e <decode_mcu_AC_refine+0x19e>
 800d466:	4403      	add	r3, r0
 800d468:	1a52      	subs	r2, r2, r1
 800d46a:	f893 0490 	ldrb.w	r0, [r3, #1168]	@ 0x490
	if (s) {
 800d46e:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800d472:	ea4f 1920 	mov.w	r9, r0, asr #4
	if (s) {
 800d476:	9304      	str	r3, [sp, #16]
 800d478:	d066      	beq.n	800d548 <decode_mcu_AC_refine+0x1a8>
	  if (s != 1)		/* size of new coef should always be 1 */
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d009      	beq.n	800d492 <decode_mcu_AC_refine+0xf2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800d47e:	682b      	ldr	r3, [r5, #0]
 800d480:	2179      	movs	r1, #121	@ 0x79
 800d482:	4628      	mov	r0, r5
 800d484:	9204      	str	r2, [sp, #16]
 800d486:	6159      	str	r1, [r3, #20]
 800d488:	f04f 31ff 	mov.w	r1, #4294967295
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	4798      	blx	r3
 800d490:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d492:	2a00      	cmp	r2, #0
 800d494:	dc08      	bgt.n	800d4a8 <decode_mcu_AC_refine+0x108>
 800d496:	2301      	movs	r3, #1
 800d498:	4621      	mov	r1, r4
 800d49a:	a80b      	add	r0, sp, #44	@ 0x2c
 800d49c:	f7ff fcfa 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d03f      	beq.n	800d524 <decode_mcu_AC_refine+0x184>
 800d4a4:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	  if (GET_BITS(1))
 800d4a8:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800d4aa:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800d4ac:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800d4b0:	f013 0f01 	tst.w	r3, #1
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	bf08      	it	eq
 800d4b8:	460b      	moveq	r3, r1
 800d4ba:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800d4bc:	9b08      	ldr	r3, [sp, #32]
 800d4be:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800d4c2:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800d4c4:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d05e      	beq.n	800d58a <decode_mcu_AC_refine+0x1ea>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d4cc:	2a00      	cmp	r2, #0
 800d4ce:	dc07      	bgt.n	800d4e0 <decode_mcu_AC_refine+0x140>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	a80b      	add	r0, sp, #44	@ 0x2c
 800d4d6:	f7ff fcdd 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d4da:	b318      	cbz	r0, 800d524 <decode_mcu_AC_refine+0x184>
 800d4dc:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	    if (GET_BITS(1)) {
 800d4e0:	3a01      	subs	r2, #1
 800d4e2:	fa44 f302 	asr.w	r3, r4, r2
 800d4e6:	07d9      	lsls	r1, r3, #31
 800d4e8:	d50e      	bpl.n	800d508 <decode_mcu_AC_refine+0x168>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800d4ea:	9b05      	ldr	r3, [sp, #20]
 800d4ec:	f938 1013 	ldrsh.w	r1, [r8, r3, lsl #1]
 800d4f0:	9b03      	ldr	r3, [sp, #12]
 800d4f2:	4219      	tst	r1, r3
 800d4f4:	d108      	bne.n	800d508 <decode_mcu_AC_refine+0x168>
		if (*thiscoef >= 0)
 800d4f6:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800d4f8:	b28b      	uxth	r3, r1
 800d4fa:	bfac      	ite	ge
 800d4fc:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800d4fe:	9907      	ldrlt	r1, [sp, #28]
 800d500:	440b      	add	r3, r1
 800d502:	9905      	ldr	r1, [sp, #20]
 800d504:	f828 3011 	strh.w	r3, [r8, r1, lsl #1]
	  k++;
 800d508:	3601      	adds	r6, #1
	} while (k <= Se);
 800d50a:	9b06      	ldr	r3, [sp, #24]
 800d50c:	42b3      	cmp	r3, r6
 800d50e:	dad5      	bge.n	800d4bc <decode_mcu_AC_refine+0x11c>
 800d510:	e03e      	b.n	800d590 <decode_mcu_AC_refine+0x1f0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d512:	2301      	movs	r3, #1
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	4621      	mov	r1, r4
 800d518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51a:	a80b      	add	r0, sp, #44	@ 0x2c
 800d51c:	f7ff fd1a 	bl	800cf54 <jpeg_huff_decode>
 800d520:	2800      	cmp	r0, #0
 800d522:	da0e      	bge.n	800d542 <decode_mcu_AC_refine+0x1a2>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800d524:	ab10      	add	r3, sp, #64	@ 0x40
 800d526:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800d528:	f1ba 0f00 	cmp.w	sl, #0
 800d52c:	f43f af53 	beq.w	800d3d6 <decode_mcu_AC_refine+0x36>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800d530:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d534:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d538:	f828 2011 	strh.w	r2, [r8, r1, lsl #1]
 800d53c:	e7f4      	b.n	800d528 <decode_mcu_AC_refine+0x188>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d53e:	2309      	movs	r3, #9
 800d540:	e7e8      	b.n	800d514 <decode_mcu_AC_refine+0x174>
 800d542:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
 800d546:	e792      	b.n	800d46e <decode_mcu_AC_refine+0xce>
	  if (r != 15) {
 800d548:	f1b9 0f0f 	cmp.w	r9, #15
 800d54c:	d0b6      	beq.n	800d4bc <decode_mcu_AC_refine+0x11c>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800d54e:	2301      	movs	r3, #1
 800d550:	fa03 fb09 	lsl.w	fp, r3, r9
	    if (r) {
 800d554:	f1b9 0f00 	cmp.w	r9, #0
 800d558:	d013      	beq.n	800d582 <decode_mcu_AC_refine+0x1e2>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800d55a:	454a      	cmp	r2, r9
 800d55c:	da08      	bge.n	800d570 <decode_mcu_AC_refine+0x1d0>
 800d55e:	464b      	mov	r3, r9
 800d560:	4621      	mov	r1, r4
 800d562:	a80b      	add	r0, sp, #44	@ 0x2c
 800d564:	f7ff fc96 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d0db      	beq.n	800d524 <decode_mcu_AC_refine+0x184>
 800d56c:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	      r = GET_BITS(r);
 800d570:	4b28      	ldr	r3, [pc, #160]	@ (800d614 <decode_mcu_AC_refine+0x274>)
 800d572:	eba2 0209 	sub.w	r2, r2, r9
 800d576:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 800d57a:	fa44 f302 	asr.w	r3, r4, r2
 800d57e:	400b      	ands	r3, r1
	      EOBRUN += r;
 800d580:	449b      	add	fp, r3
    if (EOBRUN > 0) {
 800d582:	f1bb 0f00 	cmp.w	fp, #0
 800d586:	d015      	beq.n	800d5b4 <decode_mcu_AC_refine+0x214>
 800d588:	e74d      	b.n	800d426 <decode_mcu_AC_refine+0x86>
	    if (--r < 0)
 800d58a:	f1b9 0901 	subs.w	r9, r9, #1
 800d58e:	d2bb      	bcs.n	800d508 <decode_mcu_AC_refine+0x168>
	if (s) {
 800d590:	9b04      	ldr	r3, [sp, #16]
 800d592:	b153      	cbz	r3, 800d5aa <decode_mcu_AC_refine+0x20a>
	  int pos = natural_order[k];
 800d594:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800d596:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800d598:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800d59c:	f828 1013 	strh.w	r1, [r8, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800d5a0:	a910      	add	r1, sp, #64	@ 0x40
 800d5a2:	f841 302a 	str.w	r3, [r1, sl, lsl #2]
 800d5a6:	f10a 0a01 	add.w	sl, sl, #1
      for (; k <= Se; k++) {
 800d5aa:	3601      	adds	r6, #1
 800d5ac:	9b06      	ldr	r3, [sp, #24]
 800d5ae:	429e      	cmp	r6, r3
 800d5b0:	f77f af40 	ble.w	800d434 <decode_mcu_AC_refine+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d5b4:	69ab      	ldr	r3, [r5, #24]
 800d5b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5b8:	6019      	str	r1, [r3, #0]
 800d5ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d5bc:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800d5be:	f8c7 b010 	str.w	fp, [r7, #16]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d5c2:	e9c7 4202 	strd	r4, r2, [r7, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800d5c6:	e6fa      	b.n	800d3be <decode_mcu_AC_refine+0x1e>
	thiscoef = *block + natural_order[k];
 800d5c8:	9b08      	ldr	r3, [sp, #32]
 800d5ca:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
	if (*thiscoef != 0) {
 800d5ce:	f938 3019 	ldrsh.w	r3, [r8, r9, lsl #1]
 800d5d2:	b1e3      	cbz	r3, 800d60e <decode_mcu_AC_refine+0x26e>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d5d4:	2a00      	cmp	r2, #0
 800d5d6:	dc08      	bgt.n	800d5ea <decode_mcu_AC_refine+0x24a>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	4621      	mov	r1, r4
 800d5dc:	a80b      	add	r0, sp, #44	@ 0x2c
 800d5de:	f7ff fc59 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d09e      	beq.n	800d524 <decode_mcu_AC_refine+0x184>
 800d5e6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	  if (GET_BITS(1)) {
 800d5ea:	3a01      	subs	r2, #1
 800d5ec:	fa44 f302 	asr.w	r3, r4, r2
 800d5f0:	07db      	lsls	r3, r3, #31
 800d5f2:	d50c      	bpl.n	800d60e <decode_mcu_AC_refine+0x26e>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800d5f4:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	4219      	tst	r1, r3
 800d5fc:	d107      	bne.n	800d60e <decode_mcu_AC_refine+0x26e>
	      if (*thiscoef >= 0)
 800d5fe:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800d600:	b28b      	uxth	r3, r1
 800d602:	bfac      	ite	ge
 800d604:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800d606:	9907      	ldrlt	r1, [sp, #28]
 800d608:	440b      	add	r3, r1
 800d60a:	f828 3019 	strh.w	r3, [r8, r9, lsl #1]
      for (; k <= Se; k++) {
 800d60e:	3601      	adds	r6, #1
 800d610:	e709      	b.n	800d426 <decode_mcu_AC_refine+0x86>
 800d612:	bf00      	nop
 800d614:	0802e7c0 	.word	0x0802e7c0

0800d618 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d61c:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800d620:	b093      	sub	sp, #76	@ 0x4c
 800d622:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d624:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800d628:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800d62a:	b933      	cbnz	r3, 800d63a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d62c:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 800d62e:	b17f      	cbz	r7, 800d650 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d630:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  return TRUE;
 800d632:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d634:	3b01      	subs	r3, #1
 800d636:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800d638:	e007      	b.n	800d64a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800d63a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1f5      	bne.n	800d62c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800d640:	f7ff fcd4 	bl	800cfec <process_restart>
 800d644:	2800      	cmp	r0, #0
 800d646:	d1f1      	bne.n	800d62c <decode_mcu_sub+0x14>
	return FALSE;
 800d648:	2000      	movs	r0, #0
}
 800d64a:	b013      	add	sp, #76	@ 0x4c
 800d64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800d650:	f8d6 31ac 	ldr.w	r3, [r6, #428]	@ 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800d654:	f105 0810 	add.w	r8, r5, #16
 800d658:	ac0d      	add	r4, sp, #52	@ 0x34
 800d65a:	f105 095c 	add.w	r9, r5, #92	@ 0x5c
    natural_order = cinfo->natural_order;
 800d65e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800d660:	f8d6 31b0 	ldr.w	r3, [r6, #432]	@ 0x1b0
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d664:	960c      	str	r6, [sp, #48]	@ 0x30
    Se = cinfo->lim_Se;
 800d666:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d668:	69b3      	ldr	r3, [r6, #24]
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	9208      	str	r2, [sp, #32]
 800d670:	9309      	str	r3, [sp, #36]	@ 0x24
    ASSIGN_STATE(state, entropy->saved);
 800d672:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d676:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d67a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d67c:	f8d8 3000 	ldr.w	r3, [r8]
 800d680:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d682:	f8d6 316c 	ldr.w	r3, [r6, #364]	@ 0x16c
 800d686:	42bb      	cmp	r3, r7
 800d688:	dc0e      	bgt.n	800d6a8 <decode_mcu_sub+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d68a:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d68c:	ae0d      	add	r6, sp, #52	@ 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d68e:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800d690:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d694:	601a      	str	r2, [r3, #0]
 800d696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d698:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d69a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d69c:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d6a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6a2:	6833      	ldr	r3, [r6, #0]
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	e7c3      	b.n	800d630 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800d6a8:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d6aa:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800d6ae:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800d6b2:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d6b6:	dc0c      	bgt.n	800d6d2 <decode_mcu_sub+0xba>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	4662      	mov	r2, ip
 800d6bc:	4671      	mov	r1, lr
 800d6be:	a808      	add	r0, sp, #32
 800d6c0:	f7ff fbe8 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d0bf      	beq.n	800d648 <decode_mcu_sub+0x30>
 800d6c8:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d6cc:	f1bc 0f07 	cmp.w	ip, #7
 800d6d0:	dd4c      	ble.n	800d76c <decode_mcu_sub+0x154>
 800d6d2:	f1ac 0308 	sub.w	r3, ip, #8
 800d6d6:	fa4e f303 	asr.w	r3, lr, r3
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d6e0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	d04f      	beq.n	800d788 <decode_mcu_sub+0x170>
 800d6e8:	4423      	add	r3, r4
 800d6ea:	ebac 0c02 	sub.w	ip, ip, r2
 800d6ee:	f893 4490 	ldrb.w	r4, [r3, #1168]	@ 0x490
      coef_limit = entropy->coef_limit[blkn];
 800d6f2:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800d6f6:	f8d9 8028 	ldr.w	r8, [r9, #40]	@ 0x28
      coef_limit = entropy->coef_limit[blkn];
 800d6fa:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f000 80a1 	beq.w	800d844 <decode_mcu_sub+0x22c>
	if (s) {
 800d702:	b1d4      	cbz	r4, 800d73a <decode_mcu_sub+0x122>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d704:	45a4      	cmp	ip, r4
 800d706:	da09      	bge.n	800d71c <decode_mcu_sub+0x104>
 800d708:	4623      	mov	r3, r4
 800d70a:	4662      	mov	r2, ip
 800d70c:	4671      	mov	r1, lr
 800d70e:	a808      	add	r0, sp, #32
 800d710:	f7ff fbc0 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d714:	2800      	cmp	r0, #0
 800d716:	d097      	beq.n	800d648 <decode_mcu_sub+0x30>
 800d718:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	  r = GET_BITS(s);
 800d71c:	ebac 0c04 	sub.w	ip, ip, r4
 800d720:	4977      	ldr	r1, [pc, #476]	@ (800d900 <decode_mcu_sub+0x2e8>)
 800d722:	fa4e f30c 	asr.w	r3, lr, ip
 800d726:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d72a:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d72c:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800d72e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800d732:	4299      	cmp	r1, r3
 800d734:	bfac      	ite	ge
 800d736:	1a9c      	subge	r4, r3, r2
 800d738:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800d73a:	f506 73b8 	add.w	r3, r6, #368	@ 0x170
	    r = GET_BITS(s);
 800d73e:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 800d900 <decode_mcu_sub+0x2e8>
	ci = cinfo->MCU_membership[blkn];
 800d742:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800d746:	ab12      	add	r3, sp, #72	@ 0x48
 800d748:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d74c:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800d750:	4423      	add	r3, r4
      k = 1;
 800d752:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800d754:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800d758:	f8aa 3000 	strh.w	r3, [sl]
	for (; k < coef_limit; k++) {
 800d75c:	9b03      	ldr	r3, [sp, #12]
 800d75e:	429c      	cmp	r4, r3
 800d760:	db14      	blt.n	800d78c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800d762:	9b05      	ldr	r3, [sp, #20]
 800d764:	429c      	cmp	r4, r3
 800d766:	dd7f      	ble.n	800d868 <decode_mcu_sub+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d768:	3701      	adds	r7, #1
 800d76a:	e78a      	b.n	800d682 <decode_mcu_sub+0x6a>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d76c:	2301      	movs	r3, #1
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	4662      	mov	r2, ip
 800d772:	4623      	mov	r3, r4
 800d774:	4671      	mov	r1, lr
 800d776:	a808      	add	r0, sp, #32
 800d778:	f7ff fbec 	bl	800cf54 <jpeg_huff_decode>
 800d77c:	1e04      	subs	r4, r0, #0
 800d77e:	f6ff af63 	blt.w	800d648 <decode_mcu_sub+0x30>
 800d782:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d786:	e7b4      	b.n	800d6f2 <decode_mcu_sub+0xda>
 800d788:	2309      	movs	r3, #9
 800d78a:	e7f0      	b.n	800d76e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d78c:	f1bc 0f07 	cmp.w	ip, #7
 800d790:	dc0d      	bgt.n	800d7ae <decode_mcu_sub+0x196>
 800d792:	2300      	movs	r3, #0
 800d794:	4662      	mov	r2, ip
 800d796:	4671      	mov	r1, lr
 800d798:	a808      	add	r0, sp, #32
 800d79a:	f7ff fb7b 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	f43f af52 	beq.w	800d648 <decode_mcu_sub+0x30>
 800d7a4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d7a8:	f1bc 0f07 	cmp.w	ip, #7
 800d7ac:	dd36      	ble.n	800d81c <decode_mcu_sub+0x204>
 800d7ae:	f1ac 0308 	sub.w	r3, ip, #8
 800d7b2:	fa4e f303 	asr.w	r3, lr, r3
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d7bc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d7c0:	2a00      	cmp	r2, #0
 800d7c2:	d039      	beq.n	800d838 <decode_mcu_sub+0x220>
 800d7c4:	4443      	add	r3, r8
 800d7c6:	ebac 0c02 	sub.w	ip, ip, r2
 800d7ca:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
	  r = s >> 4;
 800d7ce:	111a      	asrs	r2, r3, #4
	  if (s) {
 800d7d0:	f013 030f 	ands.w	r3, r3, #15
 800d7d4:	d032      	beq.n	800d83c <decode_mcu_sub+0x224>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d7d6:	459c      	cmp	ip, r3
	    k += r;
 800d7d8:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d7da:	da0b      	bge.n	800d7f4 <decode_mcu_sub+0x1dc>
 800d7dc:	4662      	mov	r2, ip
 800d7de:	4671      	mov	r1, lr
 800d7e0:	a808      	add	r0, sp, #32
 800d7e2:	9307      	str	r3, [sp, #28]
 800d7e4:	f7ff fb56 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	f43f af2d 	beq.w	800d648 <decode_mcu_sub+0x30>
 800d7ee:	9b07      	ldr	r3, [sp, #28]
 800d7f0:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	    r = GET_BITS(s);
 800d7f4:	ebac 0c03 	sub.w	ip, ip, r3
 800d7f8:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800d7fc:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800d7fe:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800d802:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
	    r = GET_BITS(s);
 800d806:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800d808:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800d80a:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800d80c:	bfa8      	it	ge
 800d80e:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800d810:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d814:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800d818:	3401      	adds	r4, #1
 800d81a:	e79f      	b.n	800d75c <decode_mcu_sub+0x144>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d81c:	2301      	movs	r3, #1
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	4662      	mov	r2, ip
 800d822:	4643      	mov	r3, r8
 800d824:	4671      	mov	r1, lr
 800d826:	a808      	add	r0, sp, #32
 800d828:	f7ff fb94 	bl	800cf54 <jpeg_huff_decode>
 800d82c:	1e03      	subs	r3, r0, #0
 800d82e:	f6ff af0b 	blt.w	800d648 <decode_mcu_sub+0x30>
 800d832:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d836:	e7ca      	b.n	800d7ce <decode_mcu_sub+0x1b6>
 800d838:	2309      	movs	r3, #9
 800d83a:	e7f0      	b.n	800d81e <decode_mcu_sub+0x206>
	    if (r != 15)
 800d83c:	2a0f      	cmp	r2, #15
 800d83e:	d193      	bne.n	800d768 <decode_mcu_sub+0x150>
	    k += 15;
 800d840:	340f      	adds	r4, #15
 800d842:	e7e9      	b.n	800d818 <decode_mcu_sub+0x200>
	if (s) {
 800d844:	b174      	cbz	r4, 800d864 <decode_mcu_sub+0x24c>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d846:	45a4      	cmp	ip, r4
 800d848:	da0a      	bge.n	800d860 <decode_mcu_sub+0x248>
 800d84a:	4623      	mov	r3, r4
 800d84c:	4662      	mov	r2, ip
 800d84e:	4671      	mov	r1, lr
 800d850:	a808      	add	r0, sp, #32
 800d852:	f7ff fb1f 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d856:	2800      	cmp	r0, #0
 800d858:	f43f aef6 	beq.w	800d648 <decode_mcu_sub+0x30>
 800d85c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	  DROP_BITS(s);
 800d860:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800d864:	2401      	movs	r4, #1
 800d866:	e77c      	b.n	800d762 <decode_mcu_sub+0x14a>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d868:	f1bc 0f07 	cmp.w	ip, #7
 800d86c:	dc0d      	bgt.n	800d88a <decode_mcu_sub+0x272>
 800d86e:	2300      	movs	r3, #0
 800d870:	4662      	mov	r2, ip
 800d872:	4671      	mov	r1, lr
 800d874:	a808      	add	r0, sp, #32
 800d876:	f7ff fb0d 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	f43f aee4 	beq.w	800d648 <decode_mcu_sub+0x30>
 800d880:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d884:	f1bc 0f07 	cmp.w	ip, #7
 800d888:	dd25      	ble.n	800d8d6 <decode_mcu_sub+0x2be>
 800d88a:	f1ac 0308 	sub.w	r3, ip, #8
 800d88e:	fa4e f303 	asr.w	r3, lr, r3
 800d892:	b2db      	uxtb	r3, r3
 800d894:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d898:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d89c:	b34a      	cbz	r2, 800d8f2 <decode_mcu_sub+0x2da>
 800d89e:	4443      	add	r3, r8
 800d8a0:	ebac 0c02 	sub.w	ip, ip, r2
 800d8a4:	f893 0490 	ldrb.w	r0, [r3, #1168]	@ 0x490
	if (s) {
 800d8a8:	f010 0a0f 	ands.w	sl, r0, #15
	r = s >> 4;
 800d8ac:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d8b0:	d021      	beq.n	800d8f6 <decode_mcu_sub+0x2de>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d8b2:	45d4      	cmp	ip, sl
	  k += r;
 800d8b4:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d8b6:	da0a      	bge.n	800d8ce <decode_mcu_sub+0x2b6>
 800d8b8:	4653      	mov	r3, sl
 800d8ba:	4662      	mov	r2, ip
 800d8bc:	4671      	mov	r1, lr
 800d8be:	a808      	add	r0, sp, #32
 800d8c0:	f7ff fae8 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	f43f aebf 	beq.w	800d648 <decode_mcu_sub+0x30>
 800d8ca:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	  DROP_BITS(s);
 800d8ce:	ebac 0c0a 	sub.w	ip, ip, sl
      for (; k <= Se; k++) {
 800d8d2:	3401      	adds	r4, #1
 800d8d4:	e745      	b.n	800d762 <decode_mcu_sub+0x14a>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4662      	mov	r2, ip
 800d8dc:	4643      	mov	r3, r8
 800d8de:	4671      	mov	r1, lr
 800d8e0:	a808      	add	r0, sp, #32
 800d8e2:	f7ff fb37 	bl	800cf54 <jpeg_huff_decode>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	f6ff aeae 	blt.w	800d648 <decode_mcu_sub+0x30>
 800d8ec:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d8f0:	e7da      	b.n	800d8a8 <decode_mcu_sub+0x290>
 800d8f2:	2309      	movs	r3, #9
 800d8f4:	e7f0      	b.n	800d8d8 <decode_mcu_sub+0x2c0>
	  if (r != 15)
 800d8f6:	2b0f      	cmp	r3, #15
 800d8f8:	f47f af36 	bne.w	800d768 <decode_mcu_sub+0x150>
	  k += 15;
 800d8fc:	340f      	adds	r4, #15
 800d8fe:	e7e8      	b.n	800d8d2 <decode_mcu_sub+0x2ba>
 800d900:	0802e7c0 	.word	0x0802e7c0

0800d904 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800d904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d908:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800d90c:	b091      	sub	sp, #68	@ 0x44
 800d90e:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d910:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800d914:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800d916:	b933      	cbnz	r3, 800d926 <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d918:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 800d91a:	b17f      	cbz	r7, 800d93c <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d91c:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  return TRUE;
 800d91e:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d920:	3b01      	subs	r3, #1
 800d922:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800d924:	e007      	b.n	800d936 <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800d926:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1f5      	bne.n	800d918 <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800d92c:	f7ff fb5e 	bl	800cfec <process_restart>
 800d930:	2800      	cmp	r0, #0
 800d932:	d1f1      	bne.n	800d918 <decode_mcu+0x14>
	return FALSE;
 800d934:	2000      	movs	r0, #0
}
 800d936:	b011      	add	sp, #68	@ 0x44
 800d938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d93c:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800d93e:	f105 0810 	add.w	r8, r5, #16
 800d942:	ac0b      	add	r4, sp, #44	@ 0x2c
 800d944:	f105 095c 	add.w	r9, r5, #92	@ 0x5c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	9206      	str	r2, [sp, #24]
 800d94e:	9307      	str	r3, [sp, #28]
 800d950:	960a      	str	r6, [sp, #40]	@ 0x28
    ASSIGN_STATE(state, entropy->saved);
 800d952:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d956:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d95a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d95c:	f8d8 3000 	ldr.w	r3, [r8]
 800d960:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d962:	f8d6 316c 	ldr.w	r3, [r6, #364]	@ 0x16c
 800d966:	42bb      	cmp	r3, r7
 800d968:	dc0e      	bgt.n	800d988 <decode_mcu+0x84>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d96a:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d96c:	ae0b      	add	r6, sp, #44	@ 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d96e:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d970:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	9a07      	ldr	r2, [sp, #28]
 800d978:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d97a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d97c:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d982:	6833      	ldr	r3, [r6, #0]
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	e7c9      	b.n	800d91c <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800d988:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d98a:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800d98e:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800d992:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d996:	9302      	str	r3, [sp, #8]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d998:	dc0c      	bgt.n	800d9b4 <decode_mcu+0xb0>
 800d99a:	2300      	movs	r3, #0
 800d99c:	4662      	mov	r2, ip
 800d99e:	4671      	mov	r1, lr
 800d9a0:	a806      	add	r0, sp, #24
 800d9a2:	f7ff fa77 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d0c4      	beq.n	800d934 <decode_mcu+0x30>
 800d9aa:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d9ae:	f1bc 0f07 	cmp.w	ip, #7
 800d9b2:	dd4d      	ble.n	800da50 <decode_mcu+0x14c>
 800d9b4:	f1ac 0308 	sub.w	r3, ip, #8
 800d9b8:	fa4e f303 	asr.w	r3, lr, r3
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9c6:	2a00      	cmp	r2, #0
 800d9c8:	d050      	beq.n	800da6c <decode_mcu+0x168>
 800d9ca:	4423      	add	r3, r4
 800d9cc:	ebac 0c02 	sub.w	ip, ip, r2
 800d9d0:	f893 4490 	ldrb.w	r4, [r3, #1168]	@ 0x490
      coef_limit = entropy->coef_limit[blkn];
 800d9d4:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800d9d8:	f8d9 8028 	ldr.w	r8, [r9, #40]	@ 0x28
      coef_limit = entropy->coef_limit[blkn];
 800d9dc:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f000 80a2 	beq.w	800db28 <decode_mcu+0x224>
	if (s) {
 800d9e4:	b1d4      	cbz	r4, 800da1c <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d9e6:	45a4      	cmp	ip, r4
 800d9e8:	da09      	bge.n	800d9fe <decode_mcu+0xfa>
 800d9ea:	4623      	mov	r3, r4
 800d9ec:	4662      	mov	r2, ip
 800d9ee:	4671      	mov	r1, lr
 800d9f0:	a806      	add	r0, sp, #24
 800d9f2:	f7ff fa4f 	bl	800ce94 <jpeg_fill_bit_buffer>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d09c      	beq.n	800d934 <decode_mcu+0x30>
 800d9fa:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800d9fe:	ebac 0c04 	sub.w	ip, ip, r4
 800da02:	4978      	ldr	r1, [pc, #480]	@ (800dbe4 <decode_mcu+0x2e0>)
 800da04:	fa4e f30c 	asr.w	r3, lr, ip
 800da08:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800da0c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800da0e:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800da10:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800da14:	4299      	cmp	r1, r3
 800da16:	bfac      	ite	ge
 800da18:	1a9c      	subge	r4, r3, r2
 800da1a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800da1c:	f506 73b8 	add.w	r3, r6, #368	@ 0x170
	    r = GET_BITS(s);
 800da20:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 800dbe4 <decode_mcu+0x2e0>
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800da24:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 800dbe8 <decode_mcu+0x2e4>
	ci = cinfo->MCU_membership[blkn];
 800da28:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800da2c:	ab10      	add	r3, sp, #64	@ 0x40
 800da2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800da32:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800da36:	4423      	add	r3, r4
      k = 1;
 800da38:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800da3a:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800da3e:	9a02      	ldr	r2, [sp, #8]
 800da40:	8013      	strh	r3, [r2, #0]
	for (; k < coef_limit; k++) {
 800da42:	9b03      	ldr	r3, [sp, #12]
 800da44:	429c      	cmp	r4, r3
 800da46:	db13      	blt.n	800da70 <decode_mcu+0x16c>
      for (; k < DCTSIZE2; k++) {
 800da48:	2c3f      	cmp	r4, #63	@ 0x3f
 800da4a:	dd7f      	ble.n	800db4c <decode_mcu+0x248>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800da4c:	3701      	adds	r7, #1
 800da4e:	e788      	b.n	800d962 <decode_mcu+0x5e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800da50:	2301      	movs	r3, #1
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	4662      	mov	r2, ip
 800da56:	4623      	mov	r3, r4
 800da58:	4671      	mov	r1, lr
 800da5a:	a806      	add	r0, sp, #24
 800da5c:	f7ff fa7a 	bl	800cf54 <jpeg_huff_decode>
 800da60:	1e04      	subs	r4, r0, #0
 800da62:	f6ff af67 	blt.w	800d934 <decode_mcu+0x30>
 800da66:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800da6a:	e7b3      	b.n	800d9d4 <decode_mcu+0xd0>
 800da6c:	2309      	movs	r3, #9
 800da6e:	e7f0      	b.n	800da52 <decode_mcu+0x14e>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800da70:	f1bc 0f07 	cmp.w	ip, #7
 800da74:	dc0d      	bgt.n	800da92 <decode_mcu+0x18e>
 800da76:	2300      	movs	r3, #0
 800da78:	4662      	mov	r2, ip
 800da7a:	4671      	mov	r1, lr
 800da7c:	a806      	add	r0, sp, #24
 800da7e:	f7ff fa09 	bl	800ce94 <jpeg_fill_bit_buffer>
 800da82:	2800      	cmp	r0, #0
 800da84:	f43f af56 	beq.w	800d934 <decode_mcu+0x30>
 800da88:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800da8c:	f1bc 0f07 	cmp.w	ip, #7
 800da90:	dd36      	ble.n	800db00 <decode_mcu+0x1fc>
 800da92:	f1ac 0308 	sub.w	r3, ip, #8
 800da96:	fa4e f303 	asr.w	r3, lr, r3
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800daa0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800daa4:	2a00      	cmp	r2, #0
 800daa6:	d039      	beq.n	800db1c <decode_mcu+0x218>
 800daa8:	4443      	add	r3, r8
 800daaa:	ebac 0c02 	sub.w	ip, ip, r2
 800daae:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
	  r = s >> 4;
 800dab2:	111a      	asrs	r2, r3, #4
	  if (s) {
 800dab4:	f013 030f 	ands.w	r3, r3, #15
 800dab8:	d032      	beq.n	800db20 <decode_mcu+0x21c>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800daba:	459c      	cmp	ip, r3
	    k += r;
 800dabc:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800dabe:	da0b      	bge.n	800dad8 <decode_mcu+0x1d4>
 800dac0:	4662      	mov	r2, ip
 800dac2:	4671      	mov	r1, lr
 800dac4:	a806      	add	r0, sp, #24
 800dac6:	9305      	str	r3, [sp, #20]
 800dac8:	f7ff f9e4 	bl	800ce94 <jpeg_fill_bit_buffer>
 800dacc:	2800      	cmp	r0, #0
 800dace:	f43f af31 	beq.w	800d934 <decode_mcu+0x30>
 800dad2:	9b05      	ldr	r3, [sp, #20]
 800dad4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800dad8:	ebac 0c03 	sub.w	ip, ip, r3
 800dadc:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800dae0:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800dae2:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800dae6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800daea:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800daec:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800daee:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800daf2:	bfa8      	it	ge
 800daf4:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800daf6:	9902      	ldr	r1, [sp, #8]
 800daf8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800dafc:	3401      	adds	r4, #1
 800dafe:	e7a0      	b.n	800da42 <decode_mcu+0x13e>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800db00:	2301      	movs	r3, #1
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	4662      	mov	r2, ip
 800db06:	4643      	mov	r3, r8
 800db08:	4671      	mov	r1, lr
 800db0a:	a806      	add	r0, sp, #24
 800db0c:	f7ff fa22 	bl	800cf54 <jpeg_huff_decode>
 800db10:	1e03      	subs	r3, r0, #0
 800db12:	f6ff af0f 	blt.w	800d934 <decode_mcu+0x30>
 800db16:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800db1a:	e7ca      	b.n	800dab2 <decode_mcu+0x1ae>
 800db1c:	2309      	movs	r3, #9
 800db1e:	e7f0      	b.n	800db02 <decode_mcu+0x1fe>
	    if (r != 15)
 800db20:	2a0f      	cmp	r2, #15
 800db22:	d193      	bne.n	800da4c <decode_mcu+0x148>
	    k += 15;
 800db24:	340f      	adds	r4, #15
 800db26:	e7e9      	b.n	800dafc <decode_mcu+0x1f8>
	if (s) {
 800db28:	b174      	cbz	r4, 800db48 <decode_mcu+0x244>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800db2a:	45a4      	cmp	ip, r4
 800db2c:	da0a      	bge.n	800db44 <decode_mcu+0x240>
 800db2e:	4623      	mov	r3, r4
 800db30:	4662      	mov	r2, ip
 800db32:	4671      	mov	r1, lr
 800db34:	a806      	add	r0, sp, #24
 800db36:	f7ff f9ad 	bl	800ce94 <jpeg_fill_bit_buffer>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	f43f aefa 	beq.w	800d934 <decode_mcu+0x30>
 800db40:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800db44:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800db48:	2401      	movs	r4, #1
 800db4a:	e77d      	b.n	800da48 <decode_mcu+0x144>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800db4c:	f1bc 0f07 	cmp.w	ip, #7
 800db50:	dc0d      	bgt.n	800db6e <decode_mcu+0x26a>
 800db52:	2300      	movs	r3, #0
 800db54:	4662      	mov	r2, ip
 800db56:	4671      	mov	r1, lr
 800db58:	a806      	add	r0, sp, #24
 800db5a:	f7ff f99b 	bl	800ce94 <jpeg_fill_bit_buffer>
 800db5e:	2800      	cmp	r0, #0
 800db60:	f43f aee8 	beq.w	800d934 <decode_mcu+0x30>
 800db64:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800db68:	f1bc 0f07 	cmp.w	ip, #7
 800db6c:	dd25      	ble.n	800dbba <decode_mcu+0x2b6>
 800db6e:	f1ac 0308 	sub.w	r3, ip, #8
 800db72:	fa4e f303 	asr.w	r3, lr, r3
 800db76:	b2db      	uxtb	r3, r3
 800db78:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800db7c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800db80:	b34a      	cbz	r2, 800dbd6 <decode_mcu+0x2d2>
 800db82:	4443      	add	r3, r8
 800db84:	ebac 0c02 	sub.w	ip, ip, r2
 800db88:	f893 0490 	ldrb.w	r0, [r3, #1168]	@ 0x490
	if (s) {
 800db8c:	f010 0a0f 	ands.w	sl, r0, #15
	r = s >> 4;
 800db90:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800db94:	d021      	beq.n	800dbda <decode_mcu+0x2d6>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800db96:	45d4      	cmp	ip, sl
	  k += r;
 800db98:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800db9a:	da0a      	bge.n	800dbb2 <decode_mcu+0x2ae>
 800db9c:	4653      	mov	r3, sl
 800db9e:	4662      	mov	r2, ip
 800dba0:	4671      	mov	r1, lr
 800dba2:	a806      	add	r0, sp, #24
 800dba4:	f7ff f976 	bl	800ce94 <jpeg_fill_bit_buffer>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f43f aec3 	beq.w	800d934 <decode_mcu+0x30>
 800dbae:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800dbb2:	ebac 0c0a 	sub.w	ip, ip, sl
      for (; k < DCTSIZE2; k++) {
 800dbb6:	3401      	adds	r4, #1
 800dbb8:	e746      	b.n	800da48 <decode_mcu+0x144>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800dbba:	2301      	movs	r3, #1
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	4662      	mov	r2, ip
 800dbc0:	4643      	mov	r3, r8
 800dbc2:	4671      	mov	r1, lr
 800dbc4:	a806      	add	r0, sp, #24
 800dbc6:	f7ff f9c5 	bl	800cf54 <jpeg_huff_decode>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f6ff aeb2 	blt.w	800d934 <decode_mcu+0x30>
 800dbd0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800dbd4:	e7da      	b.n	800db8c <decode_mcu+0x288>
 800dbd6:	2309      	movs	r3, #9
 800dbd8:	e7f0      	b.n	800dbbc <decode_mcu+0x2b8>
	  if (r != 15)
 800dbda:	2b0f      	cmp	r3, #15
 800dbdc:	f47f af36 	bne.w	800da4c <decode_mcu+0x148>
	  k += 15;
 800dbe0:	340f      	adds	r4, #15
 800dbe2:	e7e8      	b.n	800dbb6 <decode_mcu+0x2b2>
 800dbe4:	0802e7c0 	.word	0x0802e7c0
 800dbe8:	08030444 	.word	0x08030444

0800dbec <jpeg_make_d_derived_tbl>:
{
 800dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800dbf0:	2a03      	cmp	r2, #3
{
 800dbf2:	f2ad 5d24 	subw	sp, sp, #1316	@ 0x524
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4616      	mov	r6, r2
 800dbfa:	461f      	mov	r7, r3
 800dbfc:	9102      	str	r1, [sp, #8]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800dbfe:	d905      	bls.n	800dc0c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800dc00:	6803      	ldr	r3, [r0, #0]
 800dc02:	2234      	movs	r2, #52	@ 0x34
 800dc04:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800dc0c:	9b02      	ldr	r3, [sp, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d042      	beq.n	800dc98 <jpeg_make_d_derived_tbl+0xac>
 800dc12:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dc16:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
  if (htbl == NULL)
 800dc1a:	b935      	cbnz	r5, 800dc2a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	2234      	movs	r2, #52	@ 0x34
 800dc20:	4620      	mov	r0, r4
 800dc22:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4798      	blx	r3
  if (*pdtbl == NULL)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	b93b      	cbnz	r3, 800dc3e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dc2e:	6863      	ldr	r3, [r4, #4]
 800dc30:	f44f 62b2 	mov.w	r2, #1424	@ 0x590
 800dc34:	2101      	movs	r1, #1
 800dc36:	4620      	mov	r0, r4
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800dc3c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800dc3e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800dc42:	2601      	movs	r6, #1
  p = 0;
 800dc44:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800dc46:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800dc4a:	f8c8 508c 	str.w	r5, [r8, #140]	@ 0x8c
    i = (int) htbl->bits[l];
 800dc4e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800dc52:	46ba      	mov	sl, r7
 800dc54:	444f      	add	r7, r9
 800dc56:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
 800dc5a:	dd05      	ble.n	800dc68 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f8c3 b014 	str.w	fp, [r3, #20]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4798      	blx	r3
 800dc68:	f10a 0318 	add.w	r3, sl, #24
 800dc6c:	446b      	add	r3, sp
    while (i--)
 800dc6e:	f1b9 0901 	subs.w	r9, r9, #1
 800dc72:	d216      	bcs.n	800dca2 <jpeg_make_d_derived_tbl+0xb6>
  for (l = 1; l <= 16; l++) {
 800dc74:	3601      	adds	r6, #1
 800dc76:	2e11      	cmp	r6, #17
 800dc78:	d1e9      	bne.n	800dc4e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800dc7e:	f50d 7a8e 	add.w	sl, sp, #284	@ 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800dc82:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800dc86:	55da      	strb	r2, [r3, r7]
  p = 0;
 800dc88:	4616      	mov	r6, r2
  si = huffsize[0];
 800dc8a:	f89d 9018 	ldrb.w	r9, [sp, #24]
  while (huffsize[p]) {
 800dc8e:	ab06      	add	r3, sp, #24
 800dc90:	5d9b      	ldrb	r3, [r3, r6]
 800dc92:	b30b      	cbz	r3, 800dcd8 <jpeg_make_d_derived_tbl+0xec>
 800dc94:	1b92      	subs	r2, r2, r6
 800dc96:	e00a      	b.n	800dcae <jpeg_make_d_derived_tbl+0xc2>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800dc98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dc9c:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 800dca0:	e7bb      	b.n	800dc1a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800dca2:	f803 6b01 	strb.w	r6, [r3], #1
 800dca6:	e7e2      	b.n	800dc6e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800dca8:	f84a 3026 	str.w	r3, [sl, r6, lsl #2]
      code++;
 800dcac:	3601      	adds	r6, #1
    while (((int) huffsize[p]) == si) {
 800dcae:	a906      	add	r1, sp, #24
 800dcb0:	18b3      	adds	r3, r6, r2
 800dcb2:	5d89      	ldrb	r1, [r1, r6]
 800dcb4:	4549      	cmp	r1, r9
 800dcb6:	d0f7      	beq.n	800dca8 <jpeg_make_d_derived_tbl+0xbc>
    if (((INT32) code) >= (((INT32) 1) << si))
 800dcb8:	fa0b f209 	lsl.w	r2, fp, r9
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	dc07      	bgt.n	800dcd0 <jpeg_make_d_derived_tbl+0xe4>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800dcc0:	6822      	ldr	r2, [r4, #0]
 800dcc2:	2109      	movs	r1, #9
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	6151      	str	r1, [r2, #20]
 800dcca:	6812      	ldr	r2, [r2, #0]
 800dccc:	4790      	blx	r2
 800dcce:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800dcd0:	005a      	lsls	r2, r3, #1
    si++;
 800dcd2:	f109 0901 	add.w	r9, r9, #1
 800dcd6:	e7da      	b.n	800dc8e <jpeg_make_d_derived_tbl+0xa2>
 800dcd8:	f105 0210 	add.w	r2, r5, #16
 800dcdc:	4628      	mov	r0, r5
 800dcde:	4646      	mov	r6, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800dce0:	f50d 7c8e 	add.w	ip, sp, #284	@ 0x11c
 800dce4:	9201      	str	r2, [sp, #4]
    if (htbl->bits[l]) {
 800dce6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800dcea:	b349      	cbz	r1, 800dd40 <jpeg_make_d_derived_tbl+0x154>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800dcec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800dcf0:	1a9a      	subs	r2, r3, r2
      p += htbl->bits[l];
 800dcf2:	440b      	add	r3, r1
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800dcf4:	64f2      	str	r2, [r6, #76]	@ 0x4c
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800dcf6:	1e5a      	subs	r2, r3, #1
 800dcf8:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800dcfc:	f846 2f04 	str.w	r2, [r6, #4]!
  for (l = 1; l <= 16; l++) {
 800dd00:	9a01      	ldr	r2, [sp, #4]
 800dd02:	4290      	cmp	r0, r2
 800dd04:	d1ef      	bne.n	800dce6 <jpeg_make_d_derived_tbl+0xfa>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800dd06:	4b2d      	ldr	r3, [pc, #180]	@ (800ddbc <jpeg_make_d_derived_tbl+0x1d0>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800dd08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	f108 0090 	add.w	r0, r8, #144	@ 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800dd12:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800dd16:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800dd18:	f01d fa16 	bl	802b148 <memset>
  p = 0;
 800dd1c:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800dd20:	ab47      	add	r3, sp, #284	@ 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800dd22:	5daa      	ldrb	r2, [r5, r6]
 800dd24:	f1c6 0b08 	rsb	fp, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dd28:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800dd2a:	9200      	str	r2, [sp, #0]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	9900      	ldr	r1, [sp, #0]
 800dd30:	fa02 f20b 	lsl.w	r2, r2, fp
 800dd34:	4451      	add	r1, sl
 800dd36:	9103      	str	r1, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800dd38:	f105 0111 	add.w	r1, r5, #17
 800dd3c:	9104      	str	r1, [sp, #16]
 800dd3e:	e01f      	b.n	800dd80 <jpeg_make_d_derived_tbl+0x194>
 800dd40:	f04f 32ff 	mov.w	r2, #4294967295
 800dd44:	e7da      	b.n	800dcfc <jpeg_make_d_derived_tbl+0x110>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800dd46:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dd4a:	4696      	mov	lr, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800dd4c:	9904      	ldr	r1, [sp, #16]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800dd4e:	fa00 f00b 	lsl.w	r0, r0, fp
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800dd52:	f811 1009 	ldrb.w	r1, [r1, r9]
 800dd56:	f100 4c80 	add.w	ip, r0, #1073741824	@ 0x40000000
 800dd5a:	f10c 0c23 	add.w	ip, ip, #35	@ 0x23
 800dd5e:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dd62:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800dd66:	f84c 6f04 	str.w	r6, [ip, #4]!
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dd6a:	d1fa      	bne.n	800dd62 <jpeg_make_d_derived_tbl+0x176>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800dd6c:	f500 6092 	add.w	r0, r0, #1168	@ 0x490
 800dd70:	9205      	str	r2, [sp, #20]
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800dd72:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800dd76:	4440      	add	r0, r8
 800dd78:	f01d f9e6 	bl	802b148 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800dd7c:	ab47      	add	r3, sp, #284	@ 0x11c
 800dd7e:	9a05      	ldr	r2, [sp, #20]
 800dd80:	9903      	ldr	r1, [sp, #12]
 800dd82:	4589      	cmp	r9, r1
 800dd84:	d1df      	bne.n	800dd46 <jpeg_make_d_derived_tbl+0x15a>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800dd86:	3601      	adds	r6, #1
 800dd88:	9a00      	ldr	r2, [sp, #0]
 800dd8a:	2e09      	cmp	r6, #9
 800dd8c:	4492      	add	sl, r2
 800dd8e:	d1c8      	bne.n	800dd22 <jpeg_make_d_derived_tbl+0x136>
  if (isDC) {
 800dd90:	9b02      	ldr	r3, [sp, #8]
 800dd92:	b123      	cbz	r3, 800dd9e <jpeg_make_d_derived_tbl+0x1b2>
 800dd94:	9b01      	ldr	r3, [sp, #4]
 800dd96:	3510      	adds	r5, #16
 800dd98:	441f      	add	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800dd9a:	42af      	cmp	r7, r5
 800dd9c:	d103      	bne.n	800dda6 <jpeg_make_d_derived_tbl+0x1ba>
}
 800dd9e:	f20d 5d24 	addw	sp, sp, #1316	@ 0x524
 800dda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sym < 0 || sym > 15)
 800dda6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800ddaa:	2b0f      	cmp	r3, #15
 800ddac:	d9f5      	bls.n	800dd9a <jpeg_make_d_derived_tbl+0x1ae>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	615e      	str	r6, [r3, #20]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800ddb8:	e7ef      	b.n	800dd9a <jpeg_make_d_derived_tbl+0x1ae>
 800ddba:	bf00      	nop
 800ddbc:	000fffff 	.word	0x000fffff

0800ddc0 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800ddc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800ddc4:	f8d0 70e0 	ldr.w	r7, [r0, #224]	@ 0xe0
{
 800ddc8:	4604      	mov	r4, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ddca:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->progressive_mode) {
 800ddce:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800ddd2:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
  if (cinfo->progressive_mode) {
 800ddd6:	2f00      	cmp	r7, #0
 800ddd8:	f000 80ad 	beq.w	800df36 <start_pass_huff_decoder+0x176>
    if (cinfo->Ss == 0) {
 800dddc:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	@ 0x19c
 800dde0:	f8d0 01a4 	ldr.w	r0, [r0, #420]	@ 0x1a4
 800dde4:	b962      	cbnz	r2, 800de00 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800dde6:	b1a9      	cbz	r1, 800de14 <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	f04f 0c11 	mov.w	ip, #17
 800ddee:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800ddf2:	e9c3 c205 	strd	ip, r2, [r3, #20]
 800ddf6:	6258      	str	r0, [r3, #36]	@ 0x24
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4798      	blx	r3
 800ddfe:	e00f      	b.n	800de20 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800de00:	428a      	cmp	r2, r1
 800de02:	dcf1      	bgt.n	800dde8 <start_pass_huff_decoder+0x28>
 800de04:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800de08:	428b      	cmp	r3, r1
 800de0a:	dbed      	blt.n	800dde8 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800de0c:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800de10:	2b01      	cmp	r3, #1
 800de12:	d1e9      	bne.n	800dde8 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800de14:	b117      	cbz	r7, 800de1c <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800de16:	1e7b      	subs	r3, r7, #1
 800de18:	4283      	cmp	r3, r0
 800de1a:	d1e5      	bne.n	800dde8 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800de1c:	280d      	cmp	r0, #13
 800de1e:	dce3      	bgt.n	800dde8 <start_pass_huff_decoder+0x28>
{
 800de20:	46b3      	mov	fp, r6
 800de22:	f04f 0a00 	mov.w	sl, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de26:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800de2a:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de2e:	4553      	cmp	r3, sl
 800de30:	dc1d      	bgt.n	800de6e <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800de32:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d155      	bne.n	800dee6 <start_pass_huff_decoder+0x126>
      if (cinfo->Ss == 0)
 800de3a:	4bbc      	ldr	r3, [pc, #752]	@ (800e12c <start_pass_huff_decoder+0x36c>)
 800de3c:	49bc      	ldr	r1, [pc, #752]	@ (800e130 <start_pass_huff_decoder+0x370>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800de3e:	f04f 0800 	mov.w	r8, #0
    } else {
      if (cinfo->Ss == 0)
 800de42:	2a00      	cmp	r2, #0
 800de44:	bf18      	it	ne
 800de46:	460b      	movne	r3, r1
 800de48:	f105 0910 	add.w	r9, r5, #16
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800de4c:	46c2      	mov	sl, r8
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800de4e:	606b      	str	r3, [r5, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de50:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800de54:	4543      	cmp	r3, r8
 800de56:	dc49      	bgt.n	800deec <start_pass_huff_decoder+0x12c>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800de58:	2300      	movs	r3, #0
 800de5a:	612b      	str	r3, [r5, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800de5c:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800de5e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->insufficient_data = FALSE;
 800de62:	626b      	str	r3, [r5, #36]	@ 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800de64:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800de68:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 800de6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800de6e:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800de72:	f8d3 9004 	ldr.w	r9, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800de76:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800de7a:	ea4f 2109 	mov.w	r1, r9, lsl #8
 800de7e:	eb03 2809 	add.w	r8, r3, r9, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800de82:	b16a      	cbz	r2, 800dea0 <start_pass_huff_decoder+0xe0>
 800de84:	585b      	ldr	r3, [r3, r1]
 800de86:	2b00      	cmp	r3, #0
 800de88:	da0a      	bge.n	800dea0 <start_pass_huff_decoder+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	2276      	movs	r2, #118	@ 0x76
 800de8e:	f04f 31ff 	mov.w	r1, #4294967295
 800de92:	4620      	mov	r0, r4
 800de94:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800de98:	2200      	movs	r2, #0
 800de9a:	61da      	str	r2, [r3, #28]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800dea0:	f8d4 7198 	ldr.w	r7, [r4, #408]	@ 0x198
 800dea4:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800dea8:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800deac:	42bb      	cmp	r3, r7
 800deae:	da02      	bge.n	800deb6 <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800deb0:	f10a 0a01 	add.w	sl, sl, #1
 800deb4:	e7b7      	b.n	800de26 <start_pass_huff_decoder+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800deb6:	f8d8 3000 	ldr.w	r3, [r8]
	if (cinfo->Ah != expected)
 800deba:	f8d4 21a0 	ldr.w	r2, [r4, #416]	@ 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800debe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d009      	beq.n	800deda <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	2276      	movs	r2, #118	@ 0x76
 800deca:	f04f 31ff 	mov.w	r1, #4294967295
 800dece:	4620      	mov	r0, r4
 800ded0:	61df      	str	r7, [r3, #28]
 800ded2:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800deda:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800dede:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800dee0:	f848 3b04 	str.w	r3, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800dee4:	e7e0      	b.n	800dea8 <start_pass_huff_decoder+0xe8>
      if (cinfo->Ss == 0)
 800dee6:	4b93      	ldr	r3, [pc, #588]	@ (800e134 <start_pass_huff_decoder+0x374>)
 800dee8:	4993      	ldr	r1, [pc, #588]	@ (800e138 <start_pass_huff_decoder+0x378>)
 800deea:	e7a8      	b.n	800de3e <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800deec:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
      compptr = cinfo->cur_comp_info[ci];
 800def0:	f856 3f04 	ldr.w	r3, [r6, #4]!
      if (cinfo->Ss == 0) {
 800def4:	b982      	cbnz	r2, 800df18 <start_pass_huff_decoder+0x158>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800def6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	@ 0x1a0
 800defa:	b942      	cbnz	r2, 800df0e <start_pass_huff_decoder+0x14e>
	  tbl = compptr->dc_tbl_no;
 800defc:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800defe:	2101      	movs	r1, #1
 800df00:	4620      	mov	r0, r4
 800df02:	f102 030b 	add.w	r3, r2, #11
 800df06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800df0a:	f7ff fe6f 	bl	800dbec <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800df0e:	f108 0801 	add.w	r8, r8, #1
      entropy->saved.last_dc_val[ci] = 0;
 800df12:	f849 af04 	str.w	sl, [r9, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800df16:	e79b      	b.n	800de50 <start_pass_huff_decoder+0x90>
	tbl = compptr->ac_tbl_no;
 800df18:	699f      	ldr	r7, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800df1a:	2100      	movs	r1, #0
 800df1c:	4620      	mov	r0, r4
 800df1e:	f107 030b 	add.w	r3, r7, #11
 800df22:	463a      	mov	r2, r7
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800df24:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800df28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800df2c:	f7ff fe5e 	bl	800dbec <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800df30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df32:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800df34:	e7eb      	b.n	800df0e <start_pass_huff_decoder+0x14e>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800df36:	b982      	cbnz	r2, 800df5a <start_pass_huff_decoder+0x19a>
 800df38:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 800df3c:	b96b      	cbnz	r3, 800df5a <start_pass_huff_decoder+0x19a>
 800df3e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
 800df42:	b953      	cbnz	r3, 800df5a <start_pass_huff_decoder+0x19a>
 800df44:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
      if (cinfo->Se != 0)
 800df48:	f8d0 319c 	ldr.w	r3, [r0, #412]	@ 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800df4c:	b90a      	cbnz	r2, 800df52 <start_pass_huff_decoder+0x192>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800df4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800df50:	dc0b      	bgt.n	800df6a <start_pass_huff_decoder+0x1aa>
 800df52:	f8d4 21b0 	ldr.w	r2, [r4, #432]	@ 0x1b0
 800df56:	429a      	cmp	r2, r3
 800df58:	d007      	beq.n	800df6a <start_pass_huff_decoder+0x1aa>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	227d      	movs	r2, #125	@ 0x7d
 800df5e:	f04f 31ff 	mov.w	r1, #4294967295
 800df62:	4620      	mov	r0, r4
 800df64:	615a      	str	r2, [r3, #20]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800df6a:	f8d4 11b0 	ldr.w	r1, [r4, #432]	@ 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800df6e:	f04f 0800 	mov.w	r8, #0
      entropy->pub.decode_mcu = decode_mcu_sub;
 800df72:	4b72      	ldr	r3, [pc, #456]	@ (800e13c <start_pass_huff_decoder+0x37c>)
 800df74:	f105 0910 	add.w	r9, r5, #16
 800df78:	4a71      	ldr	r2, [pc, #452]	@ (800e140 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800df7a:	46c2      	mov	sl, r8
      entropy->pub.decode_mcu = decode_mcu_sub;
 800df7c:	293f      	cmp	r1, #63	@ 0x3f
 800df7e:	bf18      	it	ne
 800df80:	4613      	movne	r3, r2
 800df82:	606b      	str	r3, [r5, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800df84:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800df88:	4543      	cmp	r3, r8
 800df8a:	dc39      	bgt.n	800e000 <start_pass_huff_decoder+0x240>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800df8c:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
 800df90:	f105 025c 	add.w	r2, r5, #92	@ 0x5c
 800df94:	f504 71b6 	add.w	r1, r4, #364	@ 0x16c
 800df98:	42b8      	cmp	r0, r7
 800df9a:	f77f af5f 	ble.w	800de5c <start_pass_huff_decoder+0x9c>
      compptr = cinfo->cur_comp_info[ci];
 800df9e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800dfa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dfa6:	f8d3 6154 	ldr.w	r6, [r3, #340]	@ 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800dfaa:	6973      	ldr	r3, [r6, #20]
 800dfac:	3310      	adds	r3, #16
 800dfae:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800dfb2:	f842 3f04 	str.w	r3, [r2, #4]!
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800dfb6:	69b3      	ldr	r3, [r6, #24]
 800dfb8:	3314      	adds	r3, #20
 800dfba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800dfbe:	6293      	str	r3, [r2, #40]	@ 0x28
      if (compptr->component_needed) {
 800dfc0:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d067      	beq.n	800e096 <start_pass_huff_decoder+0x2d6>
	i = compptr->DCT_h_scaled_size;
 800dfc6:	e9d6 c309 	ldrd	ip, r3, [r6, #36]	@ 0x24
	switch (cinfo->lim_Se) {
 800dfca:	f8d4 61b0 	ldr.w	r6, [r4, #432]	@ 0x1b0
 800dfce:	2e0f      	cmp	r6, #15
 800dfd0:	d077      	beq.n	800e0c2 <start_pass_huff_decoder+0x302>
 800dfd2:	dc33      	bgt.n	800e03c <start_pass_huff_decoder+0x27c>
 800dfd4:	2e03      	cmp	r6, #3
 800dfd6:	d04d      	beq.n	800e074 <start_pass_huff_decoder+0x2b4>
 800dfd8:	2e08      	cmp	r6, #8
 800dfda:	d05f      	beq.n	800e09c <start_pass_huff_decoder+0x2dc>
 800dfdc:	2e00      	cmp	r6, #0
 800dfde:	f000 80a3 	beq.w	800e128 <start_pass_huff_decoder+0x368>
	  if (ci <= 0 || ci > 8) ci = 8;
 800dfe2:	1e5e      	subs	r6, r3, #1
 800dfe4:	2e08      	cmp	r6, #8
	  if (i <= 0 || i > 8) i = 8;
 800dfe6:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800dfea:	bf28      	it	cs
 800dfec:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800dfee:	2e08      	cmp	r6, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800dff0:	4e54      	ldr	r6, [pc, #336]	@ (800e144 <start_pass_huff_decoder+0x384>)
	  if (i <= 0 || i > 8) i = 8;
 800dff2:	bf28      	it	cs
 800dff4:	f04f 0c08 	movcs.w	ip, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800dff8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800dffc:	3b09      	subs	r3, #9
 800dffe:	e047      	b.n	800e090 <start_pass_huff_decoder+0x2d0>
      compptr = cinfo->cur_comp_info[ci];
 800e000:	f856 bf04 	ldr.w	fp, [r6, #4]!
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800e004:	2101      	movs	r1, #1
 800e006:	4620      	mov	r0, r4
      tbl = compptr->dc_tbl_no;
 800e008:	f8db 2014 	ldr.w	r2, [fp, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800e00c:	f102 0310 	add.w	r3, r2, #16
 800e010:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e014:	f7ff fdea 	bl	800dbec <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800e018:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800e01c:	b14b      	cbz	r3, 800e032 <start_pass_huff_decoder+0x272>
	tbl = compptr->ac_tbl_no;
 800e01e:	f8db 2018 	ldr.w	r2, [fp, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800e022:	2100      	movs	r1, #0
 800e024:	4620      	mov	r0, r4
 800e026:	f102 0314 	add.w	r3, r2, #20
 800e02a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e02e:	f7ff fddd 	bl	800dbec <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e032:	f108 0801 	add.w	r8, r8, #1
      entropy->saved.last_dc_val[ci] = 0;
 800e036:	f849 af04 	str.w	sl, [r9, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e03a:	e7a3      	b.n	800df84 <start_pass_huff_decoder+0x1c4>
	switch (cinfo->lim_Se) {
 800e03c:	2e23      	cmp	r6, #35	@ 0x23
 800e03e:	f103 38ff 	add.w	r8, r3, #4294967295
 800e042:	f10c 3eff 	add.w	lr, ip, #4294967295
 800e046:	d04b      	beq.n	800e0e0 <start_pass_huff_decoder+0x320>
 800e048:	2e30      	cmp	r6, #48	@ 0x30
 800e04a:	d05b      	beq.n	800e104 <start_pass_huff_decoder+0x344>
 800e04c:	2e18      	cmp	r6, #24
 800e04e:	d1c8      	bne.n	800dfe2 <start_pass_huff_decoder+0x222>
	  if (ci <= 0 || ci > 5) ci = 5;
 800e050:	f1b8 0f05 	cmp.w	r8, #5
 800e054:	bf28      	it	cs
 800e056:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800e058:	f1be 0f05 	cmp.w	lr, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800e05c:	f103 36ff 	add.w	r6, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800e060:	bf28      	it	cs
 800e062:	f04f 0c05 	movcs.w	ip, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800e066:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800e06a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800e06e:	4433      	add	r3, r6
 800e070:	4e35      	ldr	r6, [pc, #212]	@ (800e148 <start_pass_huff_decoder+0x388>)
 800e072:	e00d      	b.n	800e090 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 2) ci = 2;
 800e074:	1e5e      	subs	r6, r3, #1
 800e076:	2e02      	cmp	r6, #2
	  if (i <= 0 || i > 2) i = 2;
 800e078:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800e07c:	bf28      	it	cs
 800e07e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800e080:	2e02      	cmp	r6, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800e082:	4e32      	ldr	r6, [pc, #200]	@ (800e14c <start_pass_huff_decoder+0x38c>)
	  if (i <= 0 || i > 2) i = 2;
 800e084:	bf28      	it	cs
 800e086:	f04f 0c02 	movcs.w	ip, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800e08a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800e08e:	3b03      	subs	r3, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800e090:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800e094:	3301      	adds	r3, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e096:	3701      	adds	r7, #1
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800e098:	6513      	str	r3, [r2, #80]	@ 0x50
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e09a:	e77d      	b.n	800df98 <start_pass_huff_decoder+0x1d8>
	  if (ci <= 0 || ci > 3) ci = 3;
 800e09c:	1e5e      	subs	r6, r3, #1
 800e09e:	2e03      	cmp	r6, #3
	  if (i <= 0 || i > 3) i = 3;
 800e0a0:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800e0a4:	bf28      	it	cs
 800e0a6:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800e0a8:	2e03      	cmp	r6, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800e0aa:	f103 36ff 	add.w	r6, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800e0ae:	bf28      	it	cs
 800e0b0:	f04f 0c03 	movcs.w	ip, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800e0b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800e0b8:	f10c 33ff 	add.w	r3, ip, #4294967295
 800e0bc:	4433      	add	r3, r6
 800e0be:	4e24      	ldr	r6, [pc, #144]	@ (800e150 <start_pass_huff_decoder+0x390>)
 800e0c0:	e7e6      	b.n	800e090 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 4) ci = 4;
 800e0c2:	1e5e      	subs	r6, r3, #1
 800e0c4:	2e04      	cmp	r6, #4
	  if (i <= 0 || i > 4) i = 4;
 800e0c6:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800e0ca:	bf28      	it	cs
 800e0cc:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800e0ce:	2e04      	cmp	r6, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800e0d0:	4e20      	ldr	r6, [pc, #128]	@ (800e154 <start_pass_huff_decoder+0x394>)
	  if (i <= 0 || i > 4) i = 4;
 800e0d2:	bf28      	it	cs
 800e0d4:	f04f 0c04 	movcs.w	ip, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800e0d8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800e0dc:	3b05      	subs	r3, #5
 800e0de:	e7d7      	b.n	800e090 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 6) ci = 6;
 800e0e0:	f1b8 0f06 	cmp.w	r8, #6
 800e0e4:	bf28      	it	cs
 800e0e6:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800e0e8:	f1be 0f06 	cmp.w	lr, #6
 800e0ec:	bf28      	it	cs
 800e0ee:	f04f 0c06 	movcs.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800e0f2:	1e5e      	subs	r6, r3, #1
 800e0f4:	f10c 33ff 	add.w	r3, ip, #4294967295
 800e0f8:	f04f 0c06 	mov.w	ip, #6
 800e0fc:	fb0c 3306 	mla	r3, ip, r6, r3
 800e100:	4e15      	ldr	r6, [pc, #84]	@ (800e158 <start_pass_huff_decoder+0x398>)
 800e102:	e7c5      	b.n	800e090 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 7) ci = 7;
 800e104:	f1b8 0f07 	cmp.w	r8, #7
 800e108:	bf28      	it	cs
 800e10a:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800e10c:	f1be 0f07 	cmp.w	lr, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800e110:	f103 36ff 	add.w	r6, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800e114:	bf28      	it	cs
 800e116:	f04f 0c07 	movcs.w	ip, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800e11a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e11e:	f10c 33ff 	add.w	r3, ip, #4294967295
 800e122:	4433      	add	r3, r6
 800e124:	4e0d      	ldr	r6, [pc, #52]	@ (800e15c <start_pass_huff_decoder+0x39c>)
 800e126:	e7b3      	b.n	800e090 <start_pass_huff_decoder+0x2d0>
	switch (cinfo->lim_Se) {
 800e128:	2301      	movs	r3, #1
 800e12a:	e7b4      	b.n	800e096 <start_pass_huff_decoder+0x2d6>
 800e12c:	0800d039 	.word	0x0800d039
 800e130:	0800d1ad 	.word	0x0800d1ad
 800e134:	0800d30d 	.word	0x0800d30d
 800e138:	0800d3a1 	.word	0x0800d3a1
 800e13c:	0800d905 	.word	0x0800d905
 800e140:	0800d619 	.word	0x0800d619
 800e144:	0802ea2c 	.word	0x0802ea2c
 800e148:	0802e874 	.word	0x0802e874
 800e14c:	0802e800 	.word	0x0802e800
 800e150:	0802e810 	.word	0x0802e810
 800e154:	0802e834 	.word	0x0802e834
 800e158:	0802e8d8 	.word	0x0802e8d8
 800e15c:	0802e968 	.word	0x0802e968

0800e160 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e162:	6843      	ldr	r3, [r0, #4]
 800e164:	22d8      	movs	r2, #216	@ 0xd8
 800e166:	2101      	movs	r1, #1
{
 800e168:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800e16e:	4b17      	ldr	r3, [pc, #92]	@ (800e1cc <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800e170:	f8c5 01d0 	str.w	r0, [r5, #464]	@ 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e174:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800e176:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800e178:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800e17c:	b943      	cbnz	r3, 800e190 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800e17e:	6503      	str	r3, [r0, #80]	@ 0x50
 800e180:	6403      	str	r3, [r0, #64]	@ 0x40
 800e182:	6543      	str	r3, [r0, #84]	@ 0x54
 800e184:	6443      	str	r3, [r0, #68]	@ 0x44
 800e186:	6583      	str	r3, [r0, #88]	@ 0x58
 800e188:	6483      	str	r3, [r0, #72]	@ 0x48
 800e18a:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800e18c:	64c3      	str	r3, [r0, #76]	@ 0x4c
    }
  }
}
 800e18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e190:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800e192:	2101      	movs	r1, #1
 800e194:	686b      	ldr	r3, [r5, #4]
 800e196:	4628      	mov	r0, r5
 800e198:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e19a:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4798      	blx	r3
 800e1a0:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800e1a2:	f8c5 00a0 	str.w	r0, [r5, #160]	@ 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e1a6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800e1a8:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800e1ac:	42b3      	cmp	r3, r6
 800e1ae:	dd06      	ble.n	800e1be <jinit_huff_decoder+0x5e>
	*coef_bit_ptr++ = -1;
 800e1b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e1b4:	21ff      	movs	r1, #255	@ 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e1b6:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800e1b8:	f01c ffc6 	bl	802b148 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e1bc:	e7f3      	b.n	800e1a6 <jinit_huff_decoder+0x46>
      entropy->derived_tbls[i] = NULL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 800e1c4:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
}
 800e1c8:	e7e1      	b.n	800e18e <jinit_huff_decoder+0x2e>
 800e1ca:	bf00      	nop
 800e1cc:	0800ddc1 	.word	0x0800ddc1

0800e1d0 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800e1d0:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
 800e1d4:	4a01      	ldr	r2, [pc, #4]	@ (800e1dc <finish_input_pass+0xc>)
 800e1d6:	601a      	str	r2, [r3, #0]
}
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	0800e399 	.word	0x0800e399

0800e1e0 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800e1e0:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800e1e2:	4a0a      	ldr	r2, [pc, #40]	@ (800e20c <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800e1e4:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800e1e6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
{
 800e1ea:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800e1ec:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800e1ee:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800e1f0:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800e1f4:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800e1f6:	6803      	ldr	r3, [r0, #0]
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800e1fc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800e200:	4620      	mov	r0, r4
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800e206:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
}
 800e20a:	bd38      	pop	{r3, r4, r5, pc}
 800e20c:	0800e399 	.word	0x0800e399

0800e210 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800e210:	f8d0 2150 	ldr.w	r2, [r0, #336]	@ 0x150
 800e214:	2a01      	cmp	r2, #1
{
 800e216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21a:	4604      	mov	r4, r0
 800e21c:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
  if (cinfo->comps_in_scan == 1) {
 800e220:	d135      	bne.n	800e28e <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800e222:	f8d0 3154 	ldr.w	r3, [r0, #340]	@ 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800e226:	69d9      	ldr	r1, [r3, #28]
 800e228:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800e22c:	6a19      	ldr	r1, [r3, #32]
 800e22e:	f8c0 1168 	str.w	r1, [r0, #360]	@ 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800e232:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    compptr->MCU_blocks = 1;
 800e234:	641a      	str	r2, [r3, #64]	@ 0x40
    compptr->last_col_width = 1;
 800e236:	e9c3 0211 	strd	r0, r2, [r3, #68]	@ 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800e23a:	68d8      	ldr	r0, [r3, #12]
 800e23c:	fbb1 f5f0 	udiv	r5, r1, r0
 800e240:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800e244:	2900      	cmp	r1, #0
 800e246:	bf08      	it	eq
 800e248:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800e24a:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
    compptr->last_row_height = tmp;
 800e24e:	64d9      	str	r1, [r3, #76]	@ 0x4c
    cinfo->MCU_membership[0] = 0;
 800e250:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800e252:	f8c4 216c 	str.w	r2, [r4, #364]	@ 0x16c
    cinfo->MCU_membership[0] = 0;
 800e256:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
 800e25a:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e25c:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800e25e:	f04f 0a36 	mov.w	sl, #54	@ 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e262:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e266:	429f      	cmp	r7, r3
 800e268:	db71      	blt.n	800e34e <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800e26a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 800e26e:	4620      	mov	r0, r4
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800e274:	f8d4 31c0 	ldr.w	r3, [r4, #448]	@ 0x1c0
 800e278:	4620      	mov	r0, r4
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800e27e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	@ 0x1c0
 800e282:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800e286:	6852      	ldr	r2, [r2, #4]
 800e288:	601a      	str	r2, [r3, #0]
}
 800e28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800e28e:	1e53      	subs	r3, r2, #1
 800e290:	2b03      	cmp	r3, #3
 800e292:	d907      	bls.n	800e2a4 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800e294:	6803      	ldr	r3, [r0, #0]
 800e296:	211b      	movs	r1, #27
 800e298:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e29c:	2204      	movs	r2, #4
 800e29e:	61da      	str	r2, [r3, #28]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e2a4:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
    cinfo->blocks_in_MCU = 0;
 800e2a8:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e2aa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e2ae:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800e2b0:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800e2b2:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800e2b6:	4359      	muls	r1, r3
 800e2b8:	f009 fd68 	bl	8017d8c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e2bc:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 800e2c0:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800e2c4:	f8c4 0164 	str.w	r0, [r4, #356]	@ 0x164
      jdiv_round_up((long) cinfo->image_height,
 800e2c8:	4359      	muls	r1, r3
 800e2ca:	6a20      	ldr	r0, [r4, #32]
 800e2cc:	f009 fd5e 	bl	8017d8c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800e2d0:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800e2d4:	f8c4 0168 	str.w	r0, [r4, #360]	@ 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e2d8:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e2dc:	429d      	cmp	r5, r3
 800e2de:	dabc      	bge.n	800e25a <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800e2e0:	f858 3f04 	ldr.w	r3, [r8, #4]!
      compptr->MCU_width = compptr->h_samp_factor;
 800e2e4:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e2e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800e2e8:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e2ea:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800e2ec:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e2f0:	645a      	str	r2, [r3, #68]	@ 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800e2f2:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800e2f4:	6399      	str	r1, [r3, #56]	@ 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800e2f6:	63d8      	str	r0, [r3, #60]	@ 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800e2f8:	641f      	str	r7, [r3, #64]	@ 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800e2fa:	fbb2 fcf1 	udiv	ip, r2, r1
 800e2fe:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800e302:	2a00      	cmp	r2, #0
 800e304:	bf08      	it	eq
 800e306:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800e308:	649a      	str	r2, [r3, #72]	@ 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800e30a:	6a1a      	ldr	r2, [r3, #32]
 800e30c:	fbb2 f1f0 	udiv	r1, r2, r0
 800e310:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800e314:	2a00      	cmp	r2, #0
 800e316:	bf08      	it	eq
 800e318:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800e31a:	64da      	str	r2, [r3, #76]	@ 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800e31c:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800e320:	443b      	add	r3, r7
 800e322:	2b0a      	cmp	r3, #10
 800e324:	dd05      	ble.n	800e332 <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	4620      	mov	r0, r4
 800e32a:	f8c3 9014 	str.w	r9, [r3, #20]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4798      	blx	r3
      while (mcublks-- > 0) {
 800e332:	2f00      	cmp	r7, #0
 800e334:	dc01      	bgt.n	800e33a <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e336:	3501      	adds	r5, #1
 800e338:	e7ce      	b.n	800e2d8 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800e33a:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800e33e:	3f01      	subs	r7, #1
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	335c      	adds	r3, #92	@ 0x5c
 800e344:	f8c4 216c 	str.w	r2, [r4, #364]	@ 0x16c
 800e348:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800e34c:	e7f1      	b.n	800e332 <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800e34e:	f859 6f04 	ldr.w	r6, [r9, #4]!
    if (compptr->quant_table != NULL)
 800e352:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800e354:	b9eb      	cbnz	r3, 800e392 <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800e356:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800e358:	2a03      	cmp	r2, #3
 800e35a:	f102 0528 	add.w	r5, r2, #40	@ 0x28
 800e35e:	d803      	bhi.n	800e368 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800e360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	b92b      	cbnz	r3, 800e374 <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	4620      	mov	r0, r4
 800e36c:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e374:	6863      	ldr	r3, [r4, #4]
 800e376:	2284      	movs	r2, #132	@ 0x84
 800e378:	2101      	movs	r1, #1
 800e37a:	4620      	mov	r0, r4
 800e37c:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800e37e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e382:	4798      	blx	r3
 800e384:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800e386:	2284      	movs	r2, #132	@ 0x84
 800e388:	6869      	ldr	r1, [r5, #4]
 800e38a:	f01c ffbe 	bl	802b30a <memcpy>
    compptr->quant_table = qtbl;
 800e38e:	f8c6 8050 	str.w	r8, [r6, #80]	@ 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e392:	3701      	adds	r7, #1
 800e394:	e765      	b.n	800e262 <start_input_pass+0x52>
	...

0800e398 <consume_markers>:
{
 800e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800e39c:	f8d0 61c8 	ldr.w	r6, [r0, #456]	@ 0x1c8
{
 800e3a0:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800e3a2:	6973      	ldr	r3, [r6, #20]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f040 8168 	bne.w	800e67a <consume_markers+0x2e2>
    val = (*cinfo->marker->read_markers) (cinfo);
 800e3aa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	4798      	blx	r3
    switch (val) {
 800e3b4:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800e3b6:	4607      	mov	r7, r0
    switch (val) {
 800e3b8:	d005      	beq.n	800e3c6 <consume_markers+0x2e>
 800e3ba:	2802      	cmp	r0, #2
 800e3bc:	f000 814f 	beq.w	800e65e <consume_markers+0x2c6>
}
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800e3c6:	69b3      	ldr	r3, [r6, #24]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 8137 	beq.w	800e63c <consume_markers+0x2a4>
	if (inputctl->inheaders == 1)
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	f040 80db 	bne.w	800e58a <consume_markers+0x1f2>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800e3d4:	6a22      	ldr	r2, [r4, #32]
 800e3d6:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	dc02      	bgt.n	800e3e4 <consume_markers+0x4c>
 800e3de:	69e2      	ldr	r2, [r4, #28]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	dd08      	ble.n	800e3f6 <consume_markers+0x5e>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	212a      	movs	r1, #42	@ 0x2a
 800e3e8:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800e3f6:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
 800e3fa:	2a08      	cmp	r2, #8
 800e3fc:	d006      	beq.n	800e40c <consume_markers+0x74>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	2110      	movs	r1, #16
 800e402:	4620      	mov	r0, r4
 800e404:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800e40c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e40e:	2a0a      	cmp	r2, #10
 800e410:	dd08      	ble.n	800e424 <consume_markers+0x8c>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	211b      	movs	r1, #27
 800e416:	4620      	mov	r0, r4
 800e418:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e41c:	220a      	movs	r2, #10
 800e41e:	61da      	str	r2, [r3, #28]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4798      	blx	r3
  cinfo->max_h_samp_factor = 1;
 800e424:	2301      	movs	r3, #1
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e426:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
 800e42a:	f04f 0800 	mov.w	r8, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800e42e:	f04f 0913 	mov.w	r9, #19
  cinfo->max_v_samp_factor = 1;
 800e432:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e436:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e438:	4598      	cmp	r8, r3
 800e43a:	db10      	blt.n	800e45e <consume_markers+0xc6>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800e43c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 800e440:	b92b      	cbnz	r3, 800e44e <consume_markers+0xb6>
 800e442:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800e446:	b37b      	cbz	r3, 800e4a8 <consume_markers+0x110>
 800e448:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e44c:	b363      	cbz	r3, 800e4a8 <consume_markers+0x110>
    cinfo->block_size = DCTSIZE;
 800e44e:	2308      	movs	r3, #8
      cinfo->block_size = 16;
 800e450:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800e454:	4b8e      	ldr	r3, [pc, #568]	@ (800e690 <consume_markers+0x2f8>)
 800e456:	f8c4 31ac 	str.w	r3, [r4, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800e45a:	233f      	movs	r3, #63	@ 0x3f
 800e45c:	e06f      	b.n	800e53e <consume_markers+0x1a6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800e45e:	68ab      	ldr	r3, [r5, #8]
 800e460:	3b01      	subs	r3, #1
 800e462:	2b03      	cmp	r3, #3
 800e464:	d803      	bhi.n	800e46e <consume_markers+0xd6>
 800e466:	68eb      	ldr	r3, [r5, #12]
 800e468:	3b01      	subs	r3, #1
 800e46a:	2b03      	cmp	r3, #3
 800e46c:	d905      	bls.n	800e47a <consume_markers+0xe2>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	4620      	mov	r0, r4
 800e472:	f8c3 9014 	str.w	r9, [r3, #20]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e47a:	68ab      	ldr	r3, [r5, #8]
       ci++, compptr++) {
 800e47c:	f108 0801 	add.w	r8, r8, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e480:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
       ci++, compptr++) {
 800e484:	3558      	adds	r5, #88	@ 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e486:	429a      	cmp	r2, r3
 800e488:	bfac      	ite	ge
 800e48a:	f8c4 2138 	strge.w	r2, [r4, #312]	@ 0x138
 800e48e:	f8c4 3138 	strlt.w	r3, [r4, #312]	@ 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800e492:	f8d4 213c 	ldr.w	r2, [r4, #316]	@ 0x13c
 800e496:	f855 3c4c 	ldr.w	r3, [r5, #-76]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	bfac      	ite	ge
 800e49e:	f8c4 213c 	strge.w	r2, [r4, #316]	@ 0x13c
 800e4a2:	f8c4 313c 	strlt.w	r3, [r4, #316]	@ 0x13c
       ci++, compptr++) {
 800e4a6:	e7c6      	b.n	800e436 <consume_markers+0x9e>
    switch (cinfo->Se) {
 800e4a8:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800e4ac:	2b50      	cmp	r3, #80	@ 0x50
 800e4ae:	f000 8089 	beq.w	800e5c4 <consume_markers+0x22c>
 800e4b2:	dc2b      	bgt.n	800e50c <consume_markers+0x174>
 800e4b4:	2b18      	cmp	r3, #24
 800e4b6:	d079      	beq.n	800e5ac <consume_markers+0x214>
 800e4b8:	dc1d      	bgt.n	800e4f6 <consume_markers+0x15e>
 800e4ba:	2b08      	cmp	r3, #8
 800e4bc:	d071      	beq.n	800e5a2 <consume_markers+0x20a>
 800e4be:	dc13      	bgt.n	800e4e8 <consume_markers+0x150>
 800e4c0:	b3bb      	cbz	r3, 800e532 <consume_markers+0x19a>
 800e4c2:	2b03      	cmp	r3, #3
 800e4c4:	d068      	beq.n	800e598 <consume_markers+0x200>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800e4c6:	6822      	ldr	r2, [r4, #0]
 800e4c8:	2111      	movs	r1, #17
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	6151      	str	r1, [r2, #20]
 800e4ce:	f8d4 1198 	ldr.w	r1, [r4, #408]	@ 0x198
 800e4d2:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800e4d6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800e4da:	6213      	str	r3, [r2, #32]
 800e4dc:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 800e4e0:	6253      	str	r3, [r2, #36]	@ 0x24
 800e4e2:	6813      	ldr	r3, [r2, #0]
 800e4e4:	4798      	blx	r3
      break;
 800e4e6:	e02c      	b.n	800e542 <consume_markers+0x1aa>
    switch (cinfo->Se) {
 800e4e8:	2b0f      	cmp	r3, #15
 800e4ea:	d1ec      	bne.n	800e4c6 <consume_markers+0x12e>
      cinfo->block_size = 4;
 800e4ec:	2204      	movs	r2, #4
 800e4ee:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800e4f2:	4a68      	ldr	r2, [pc, #416]	@ (800e694 <consume_markers+0x2fc>)
 800e4f4:	e021      	b.n	800e53a <consume_markers+0x1a2>
    switch (cinfo->Se) {
 800e4f6:	2b30      	cmp	r3, #48	@ 0x30
 800e4f8:	d05d      	beq.n	800e5b6 <consume_markers+0x21e>
 800e4fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800e4fc:	d060      	beq.n	800e5c0 <consume_markers+0x228>
 800e4fe:	2b23      	cmp	r3, #35	@ 0x23
 800e500:	d1e1      	bne.n	800e4c6 <consume_markers+0x12e>
      cinfo->block_size = 6;
 800e502:	2206      	movs	r2, #6
 800e504:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800e508:	4a63      	ldr	r2, [pc, #396]	@ (800e698 <consume_markers+0x300>)
 800e50a:	e016      	b.n	800e53a <consume_markers+0x1a2>
    switch (cinfo->Se) {
 800e50c:	2ba8      	cmp	r3, #168	@ 0xa8
 800e50e:	d05f      	beq.n	800e5d0 <consume_markers+0x238>
 800e510:	dc07      	bgt.n	800e522 <consume_markers+0x18a>
 800e512:	2b78      	cmp	r3, #120	@ 0x78
 800e514:	d058      	beq.n	800e5c8 <consume_markers+0x230>
 800e516:	2b8f      	cmp	r3, #143	@ 0x8f
 800e518:	d058      	beq.n	800e5cc <consume_markers+0x234>
 800e51a:	2b63      	cmp	r3, #99	@ 0x63
 800e51c:	d1d3      	bne.n	800e4c6 <consume_markers+0x12e>
      cinfo->block_size = 10;
 800e51e:	230a      	movs	r3, #10
 800e520:	e796      	b.n	800e450 <consume_markers+0xb8>
    switch (cinfo->Se) {
 800e522:	2be0      	cmp	r3, #224	@ 0xe0
 800e524:	d056      	beq.n	800e5d4 <consume_markers+0x23c>
 800e526:	2bff      	cmp	r3, #255	@ 0xff
 800e528:	d056      	beq.n	800e5d8 <consume_markers+0x240>
 800e52a:	2bc3      	cmp	r3, #195	@ 0xc3
 800e52c:	d1cb      	bne.n	800e4c6 <consume_markers+0x12e>
      cinfo->block_size = 14;
 800e52e:	230e      	movs	r3, #14
 800e530:	e78e      	b.n	800e450 <consume_markers+0xb8>
      cinfo->block_size = 1;
 800e532:	2201      	movs	r2, #1
 800e534:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800e538:	4a55      	ldr	r2, [pc, #340]	@ (800e690 <consume_markers+0x2f8>)
 800e53a:	f8c4 21ac 	str.w	r2, [r4, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800e53e:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e542:	f04f 0800 	mov.w	r8, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800e546:	f8d4 31a8 	ldr.w	r3, [r4, #424]	@ 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e54a:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
    compptr->component_needed = TRUE;
 800e54e:	f04f 0a01 	mov.w	sl, #1
    compptr->quant_table = NULL;
 800e552:	46c1      	mov	r9, r8
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800e554:	e9c4 3350 	strd	r3, r3, [r4, #320]	@ 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e558:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800e55a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e55e:	4598      	cmp	r8, r3
 800e560:	db3c      	blt.n	800e5dc <consume_markers+0x244>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e562:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800e566:	6a20      	ldr	r0, [r4, #32]
 800e568:	4359      	muls	r1, r3
 800e56a:	f009 fc0f 	bl	8017d8c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800e56e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e570:	f8d4 2150 	ldr.w	r2, [r4, #336]	@ 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800e574:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800e578:	429a      	cmp	r2, r3
 800e57a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800e57e:	db02      	blt.n	800e586 <consume_markers+0x1ee>
 800e580:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800e584:	b102      	cbz	r2, 800e588 <consume_markers+0x1f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800e586:	2201      	movs	r2, #1
    cinfo->inputctl->has_multiple_scans = FALSE;
 800e588:	611a      	str	r2, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800e58a:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d151      	bne.n	800e636 <consume_markers+0x29e>
	  inputctl->inheaders = 2;
 800e592:	2302      	movs	r3, #2
 800e594:	61b3      	str	r3, [r6, #24]
	  break;
 800e596:	e708      	b.n	800e3aa <consume_markers+0x12>
      cinfo->block_size = 2;
 800e598:	2202      	movs	r2, #2
 800e59a:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800e59e:	4a3f      	ldr	r2, [pc, #252]	@ (800e69c <consume_markers+0x304>)
 800e5a0:	e7cb      	b.n	800e53a <consume_markers+0x1a2>
      cinfo->block_size = 3;
 800e5a2:	2203      	movs	r2, #3
 800e5a4:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800e5a8:	4a3d      	ldr	r2, [pc, #244]	@ (800e6a0 <consume_markers+0x308>)
 800e5aa:	e7c6      	b.n	800e53a <consume_markers+0x1a2>
      cinfo->block_size = 5;
 800e5ac:	2205      	movs	r2, #5
 800e5ae:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800e5b2:	4a3c      	ldr	r2, [pc, #240]	@ (800e6a4 <consume_markers+0x30c>)
 800e5b4:	e7c1      	b.n	800e53a <consume_markers+0x1a2>
      cinfo->block_size = 7;
 800e5b6:	2207      	movs	r2, #7
 800e5b8:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800e5bc:	4a3a      	ldr	r2, [pc, #232]	@ (800e6a8 <consume_markers+0x310>)
 800e5be:	e7bc      	b.n	800e53a <consume_markers+0x1a2>
      cinfo->block_size = 8;
 800e5c0:	2208      	movs	r2, #8
 800e5c2:	e7b7      	b.n	800e534 <consume_markers+0x19c>
      cinfo->block_size = 9;
 800e5c4:	2309      	movs	r3, #9
 800e5c6:	e743      	b.n	800e450 <consume_markers+0xb8>
      cinfo->block_size = 11;
 800e5c8:	230b      	movs	r3, #11
 800e5ca:	e741      	b.n	800e450 <consume_markers+0xb8>
      cinfo->block_size = 12;
 800e5cc:	230c      	movs	r3, #12
 800e5ce:	e73f      	b.n	800e450 <consume_markers+0xb8>
      cinfo->block_size = 13;
 800e5d0:	230d      	movs	r3, #13
 800e5d2:	e73d      	b.n	800e450 <consume_markers+0xb8>
      cinfo->block_size = 15;
 800e5d4:	230f      	movs	r3, #15
 800e5d6:	e73b      	b.n	800e450 <consume_markers+0xb8>
      cinfo->block_size = 16;
 800e5d8:	2310      	movs	r3, #16
 800e5da:	e739      	b.n	800e450 <consume_markers+0xb8>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800e5dc:	e9c5 1109 	strd	r1, r1, [r5, #36]	@ 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e5e0:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800e5e2:	f108 0801 	add.w	r8, r8, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e5e6:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e5ea:	69e3      	ldr	r3, [r4, #28]
 800e5ec:	4351      	muls	r1, r2
 800e5ee:	4358      	muls	r0, r3
 800e5f0:	f009 fbcc 	bl	8017d8c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800e5f4:	61e8      	str	r0, [r5, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e5f6:	68e8      	ldr	r0, [r5, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e5f8:	f8d4 213c 	ldr.w	r2, [r4, #316]	@ 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e5fc:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e5fe:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e602:	4358      	muls	r0, r3
 800e604:	4351      	muls	r1, r2
 800e606:	f009 fbc1 	bl	8017d8c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800e60a:	6228      	str	r0, [r5, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e60c:	68a8      	ldr	r0, [r5, #8]
 800e60e:	69e3      	ldr	r3, [r4, #28]
 800e610:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
 800e614:	4358      	muls	r0, r3
 800e616:	f009 fbb9 	bl	8017d8c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800e61a:	62e8      	str	r0, [r5, #44]	@ 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e61c:	68e8      	ldr	r0, [r5, #12]
 800e61e:	6a23      	ldr	r3, [r4, #32]
 800e620:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
 800e624:	4358      	muls	r0, r3
 800e626:	f009 fbb1 	bl	8017d8c <jdiv_round_up>
    compptr->quant_table = NULL;
 800e62a:	f8c5 9050 	str.w	r9, [r5, #80]	@ 0x50
    compptr->component_needed = TRUE;
 800e62e:	e9c5 0a0c 	strd	r0, sl, [r5, #48]	@ 0x30
       ci++, compptr++) {
 800e632:	3558      	adds	r5, #88	@ 0x58
 800e634:	e790      	b.n	800e558 <consume_markers+0x1c0>
	inputctl->inheaders = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	61b3      	str	r3, [r6, #24]
 800e63a:	e6c1      	b.n	800e3c0 <consume_markers+0x28>
	if (! inputctl->pub.has_multiple_scans)
 800e63c:	6933      	ldr	r3, [r6, #16]
 800e63e:	b92b      	cbnz	r3, 800e64c <consume_markers+0x2b4>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	2224      	movs	r2, #36	@ 0x24
 800e644:	4620      	mov	r0, r4
 800e646:	615a      	str	r2, [r3, #20]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800e64c:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e650:	2b00      	cmp	r3, #0
 800e652:	f43f aeaa 	beq.w	800e3aa <consume_markers+0x12>
	start_input_pass(cinfo);
 800e656:	4620      	mov	r0, r4
 800e658:	f7ff fdda 	bl	800e210 <start_input_pass>
 800e65c:	e6b0      	b.n	800e3c0 <consume_markers+0x28>
      inputctl->pub.eoi_reached = TRUE;
 800e65e:	2301      	movs	r3, #1
 800e660:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800e662:	69b3      	ldr	r3, [r6, #24]
 800e664:	b15b      	cbz	r3, 800e67e <consume_markers+0x2e6>
	if (cinfo->marker->saw_SOF)
 800e666:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	b12b      	cbz	r3, 800e67a <consume_markers+0x2e2>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	223d      	movs	r2, #61	@ 0x3d
 800e672:	4620      	mov	r0, r4
 800e674:	615a      	str	r2, [r3, #20]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4798      	blx	r3
    return JPEG_REACHED_EOI;
 800e67a:	2702      	movs	r7, #2
 800e67c:	e6a0      	b.n	800e3c0 <consume_markers+0x28>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800e67e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e682:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800e686:	429a      	cmp	r2, r3
 800e688:	ddf7      	ble.n	800e67a <consume_markers+0x2e2>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800e68a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800e68e:	e7f4      	b.n	800e67a <consume_markers+0x2e2>
 800e690:	08030444 	.word	0x08030444
 800e694:	0803014c 	.word	0x0803014c
 800e698:	08030270 	.word	0x08030270
 800e69c:	08030098 	.word	0x08030098
 800e6a0:	080300e8 	.word	0x080300e8
 800e6a4:	080301cc 	.word	0x080301cc
 800e6a8:	08030340 	.word	0x08030340

0800e6ac <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800e6ac:	f8d0 11a8 	ldr.w	r1, [r0, #424]	@ 0x1a8
 800e6b0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e6b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e6b4:	434a      	muls	r2, r1
 800e6b6:	429a      	cmp	r2, r3
{
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800e6bc:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800e6be:	d813      	bhi.n	800e6e8 <jpeg_core_output_dimensions+0x3c>
    cinfo->output_width = (JDIMENSION)
 800e6c0:	2501      	movs	r5, #1
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800e6c2:	f009 fb63 	bl	8017d8c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800e6c6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
    cinfo->output_width = (JDIMENSION)
 800e6ca:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800e6cc:	6a20      	ldr	r0, [r4, #32]
 800e6ce:	f009 fb5d 	bl	8017d8c <jdiv_round_up>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e6d2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    cinfo->output_height = (JDIMENSION)
 800e6da:	6760      	str	r0, [r4, #116]	@ 0x74
    cinfo->min_DCT_v_scaled_size = 1;
 800e6dc:	e9c4 5550 	strd	r5, r5, [r4, #320]	@ 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e6e0:	4291      	cmp	r1, r2
 800e6e2:	f300 80bf 	bgt.w	800e864 <jpeg_core_output_dimensions+0x1b8>
}
 800e6e6:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800e6e8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800e6ec:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e6f0:	d80b      	bhi.n	800e70a <jpeg_core_output_dimensions+0x5e>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800e6f2:	0040      	lsls	r0, r0, #1
 800e6f4:	2502      	movs	r5, #2
 800e6f6:	f009 fb49 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e6fa:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800e6fc:	6a20      	ldr	r0, [r4, #32]
 800e6fe:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e702:	0040      	lsls	r0, r0, #1
 800e704:	f009 fb42 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 2;
 800e708:	e7e3      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800e70a:	441d      	add	r5, r3
 800e70c:	42aa      	cmp	r2, r5
 800e70e:	d80d      	bhi.n	800e72c <jpeg_core_output_dimensions+0x80>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800e710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e714:	2503      	movs	r5, #3
 800e716:	f009 fb39 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e71a:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800e71c:	6a20      	ldr	r0, [r4, #32]
 800e71e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e722:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e726:	f009 fb31 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 3;
 800e72a:	e7d2      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800e72c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800e730:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800e734:	d80b      	bhi.n	800e74e <jpeg_core_output_dimensions+0xa2>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800e736:	0080      	lsls	r0, r0, #2
 800e738:	2504      	movs	r5, #4
 800e73a:	f009 fb27 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e73e:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800e740:	6a20      	ldr	r0, [r4, #32]
 800e742:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e746:	0080      	lsls	r0, r0, #2
 800e748:	f009 fb20 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 4;
 800e74c:	e7c1      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800e74e:	441d      	add	r5, r3
 800e750:	42aa      	cmp	r2, r5
 800e752:	d80d      	bhi.n	800e770 <jpeg_core_output_dimensions+0xc4>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800e754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e758:	2505      	movs	r5, #5
 800e75a:	f009 fb17 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e75e:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800e760:	6a20      	ldr	r0, [r4, #32]
 800e762:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e766:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e76a:	f009 fb0f 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 5;
 800e76e:	e7b0      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800e770:	2506      	movs	r5, #6
 800e772:	fb05 f603 	mul.w	r6, r5, r3
 800e776:	42b2      	cmp	r2, r6
 800e778:	d80a      	bhi.n	800e790 <jpeg_core_output_dimensions+0xe4>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800e77a:	4368      	muls	r0, r5
 800e77c:	f009 fb06 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e780:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800e782:	6a20      	ldr	r0, [r4, #32]
 800e784:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e788:	4368      	muls	r0, r5
 800e78a:	f009 faff 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 14;
 800e78e:	e7a0      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800e790:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800e794:	00dd      	lsls	r5, r3, #3
 800e796:	42b2      	cmp	r2, r6
 800e798:	d80d      	bhi.n	800e7b6 <jpeg_core_output_dimensions+0x10a>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800e79a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800e79e:	2507      	movs	r5, #7
 800e7a0:	f009 faf4 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e7a4:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800e7a6:	6a20      	ldr	r0, [r4, #32]
 800e7a8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e7ac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800e7b0:	f009 faec 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 7;
 800e7b4:	e78d      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800e7b6:	42aa      	cmp	r2, r5
 800e7b8:	d80b      	bhi.n	800e7d2 <jpeg_core_output_dimensions+0x126>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800e7ba:	00c0      	lsls	r0, r0, #3
 800e7bc:	2508      	movs	r5, #8
 800e7be:	f009 fae5 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e7c2:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800e7c4:	6a20      	ldr	r0, [r4, #32]
 800e7c6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e7ca:	00c0      	lsls	r0, r0, #3
 800e7cc:	f009 fade 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 8;
 800e7d0:	e77f      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800e7d2:	441d      	add	r5, r3
 800e7d4:	42aa      	cmp	r2, r5
 800e7d6:	d80d      	bhi.n	800e7f4 <jpeg_core_output_dimensions+0x148>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800e7d8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800e7dc:	2509      	movs	r5, #9
 800e7de:	f009 fad5 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e7e2:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800e7e4:	6a20      	ldr	r0, [r4, #32]
 800e7e6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e7ea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800e7ee:	f009 facd 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 9;
 800e7f2:	e76e      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800e7f4:	250a      	movs	r5, #10
 800e7f6:	fb05 f603 	mul.w	r6, r5, r3
 800e7fa:	42b2      	cmp	r2, r6
 800e7fc:	d9bd      	bls.n	800e77a <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800e7fe:	250b      	movs	r5, #11
 800e800:	fb05 f603 	mul.w	r6, r5, r3
 800e804:	42b2      	cmp	r2, r6
 800e806:	d9b8      	bls.n	800e77a <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800e808:	250c      	movs	r5, #12
 800e80a:	fb05 f603 	mul.w	r6, r5, r3
 800e80e:	42b2      	cmp	r2, r6
 800e810:	d9b3      	bls.n	800e77a <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800e812:	250d      	movs	r5, #13
 800e814:	fb05 f603 	mul.w	r6, r5, r3
 800e818:	42b2      	cmp	r2, r6
 800e81a:	d9ae      	bls.n	800e77a <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800e81c:	250e      	movs	r5, #14
 800e81e:	fb05 f603 	mul.w	r6, r5, r3
 800e822:	42b2      	cmp	r2, r6
 800e824:	d9a9      	bls.n	800e77a <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800e826:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800e82a:	429a      	cmp	r2, r3
 800e82c:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800e830:	d80c      	bhi.n	800e84c <jpeg_core_output_dimensions+0x1a0>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800e832:	1a18      	subs	r0, r3, r0
 800e834:	250f      	movs	r5, #15
 800e836:	f009 faa9 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e83a:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800e83c:	6a20      	ldr	r0, [r4, #32]
 800e83e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e842:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800e846:	f009 faa1 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 15;
 800e84a:	e742      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800e84c:	4618      	mov	r0, r3
    cinfo->output_height = (JDIMENSION)
 800e84e:	2510      	movs	r5, #16
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800e850:	f009 fa9c 	bl	8017d8c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e854:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800e856:	6a20      	ldr	r0, [r4, #32]
 800e858:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e85c:	0100      	lsls	r0, r0, #4
 800e85e:	f009 fa95 	bl	8017d8c <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 16;
 800e862:	e736      	b.n	800e6d2 <jpeg_core_output_dimensions+0x26>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800e864:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
       ci++, compptr++) {
 800e868:	3201      	adds	r2, #1
 800e86a:	3358      	adds	r3, #88	@ 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800e86c:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800e870:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
 800e874:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800e878:	e732      	b.n	800e6e0 <jpeg_core_output_dimensions+0x34>
	...

0800e87c <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e87c:	6843      	ldr	r3, [r0, #4]
 800e87e:	221c      	movs	r2, #28
 800e880:	2100      	movs	r1, #0
 800e882:	681b      	ldr	r3, [r3, #0]
{
 800e884:	b510      	push	{r4, lr}
 800e886:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e888:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800e88a:	4b08      	ldr	r3, [pc, #32]	@ (800e8ac <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800e88c:	f8c4 01c8 	str.w	r0, [r4, #456]	@ 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800e890:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800e892:	4b07      	ldr	r3, [pc, #28]	@ (800e8b0 <jinit_input_controller+0x34>)
 800e894:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800e896:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <jinit_input_controller+0x38>)
 800e898:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800e89a:	4b07      	ldr	r3, [pc, #28]	@ (800e8b8 <jinit_input_controller+0x3c>)
 800e89c:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800e89e:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800e8a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	6183      	str	r3, [r0, #24]
}
 800e8a8:	bd10      	pop	{r4, pc}
 800e8aa:	bf00      	nop
 800e8ac:	0800e399 	.word	0x0800e399
 800e8b0:	0800e1e1 	.word	0x0800e1e1
 800e8b4:	0800e211 	.word	0x0800e211
 800e8b8:	0800e1d1 	.word	0x0800e1d1

0800e8bc <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800e8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e8c0:	f8d0 41bc 	ldr.w	r4, [r0, #444]	@ 0x1bc
{
 800e8c4:	4698      	mov	r8, r3
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	460e      	mov	r6, r1
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800e8ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
{
 800e8cc:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800e8ce:	f104 0a08 	add.w	sl, r4, #8
  if (! main->buffer_full) {
 800e8d2:	b93b      	cbnz	r3, 800e8e4 <process_data_simple_main+0x28>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800e8d4:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
 800e8d8:	4651      	mov	r1, sl
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	4798      	blx	r3
 800e8de:	b1a8      	cbz	r0, 800e90c <process_data_simple_main+0x50>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	6323      	str	r3, [r4, #48]	@ 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800e8e4:	f8d5 9144 	ldr.w	r9, [r5, #324]	@ 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800e8e8:	f104 0234 	add.w	r2, r4, #52	@ 0x34
 800e8ec:	f8d5 31c4 	ldr.w	r3, [r5, #452]	@ 0x1c4
 800e8f0:	4651      	mov	r1, sl
 800e8f2:	9600      	str	r6, [sp, #0]
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e8fa:	685e      	ldr	r6, [r3, #4]
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800e900:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e902:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800e904:	bf24      	itt	cs
 800e906:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800e908:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	@ 0x30
  }
}
 800e90c:	b004      	add	sp, #16
 800e90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e912 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800e912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e916:	f8d0 41bc 	ldr.w	r4, [r0, #444]	@ 0x1bc
{
 800e91a:	4698      	mov	r8, r3
 800e91c:	b08b      	sub	sp, #44	@ 0x2c
 800e91e:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800e920:	6b23      	ldr	r3, [r4, #48]	@ 0x30
{
 800e922:	4689      	mov	r9, r1
 800e924:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800e926:	b973      	cbnz	r3, 800e946 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800e928:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e92a:	f8d0 21c0 	ldr.w	r2, [r0, #448]	@ 0x1c0
 800e92e:	330e      	adds	r3, #14
 800e930:	68d2      	ldr	r2, [r2, #12]
 800e932:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800e936:	4790      	blx	r2
 800e938:	2800      	cmp	r0, #0
 800e93a:	d05a      	beq.n	800e9f2 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800e93c:	2301      	movs	r3, #1
 800e93e:	6323      	str	r3, [r4, #48]	@ 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800e940:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e942:	3301      	adds	r3, #1
 800e944:	64e3      	str	r3, [r4, #76]	@ 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800e946:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d011      	beq.n	800e970 <process_data_context_main+0x5e>
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d036      	beq.n	800e9be <process_data_context_main+0xac>
 800e950:	2b00      	cmp	r3, #0
 800e952:	d14e      	bne.n	800e9f2 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e954:	f8d5 c144 	ldr.w	ip, [r5, #324]	@ 0x144
    main->rowgroup_ctr = 0;
 800e958:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800e95a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e95c:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800e960:	6366      	str	r6, [r4, #52]	@ 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e962:	64a3      	str	r3, [r4, #72]	@ 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800e964:	f8d5 3148 	ldr.w	r3, [r5, #328]	@ 0x148
 800e968:	429a      	cmp	r2, r3
 800e96a:	d045      	beq.n	800e9f8 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800e96c:	2301      	movs	r3, #1
 800e96e:	6463      	str	r3, [r4, #68]	@ 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800e970:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e972:	f104 0234 	add.w	r2, r4, #52	@ 0x34
 800e976:	4628      	mov	r0, r5
 800e978:	f103 010e 	add.w	r1, r3, #14
 800e97c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	@ 0x1c4
 800e980:	f8cd 9000 	str.w	r9, [sp]
 800e984:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e988:	685e      	ldr	r6, [r3, #4]
 800e98a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e98e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e990:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800e992:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e994:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e996:	429a      	cmp	r2, r3
 800e998:	d32b      	bcc.n	800e9f2 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800e99a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800e99c:	f8d5 0144 	ldr.w	r0, [r5, #324]	@ 0x144
    if (main->iMCU_row_ctr == 1)
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d063      	beq.n	800ea6c <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800e9a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9a6:	f083 0301 	eor.w	r3, r3, #1
 800e9aa:	6423      	str	r3, [r4, #64]	@ 0x40
    main->buffer_full = FALSE;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	6323      	str	r3, [r4, #48]	@ 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e9b0:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800e9b2:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e9b4:	6363      	str	r3, [r4, #52]	@ 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800e9b6:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800e9b8:	64a0      	str	r0, [r4, #72]	@ 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800e9ba:	6463      	str	r3, [r4, #68]	@ 0x44
 800e9bc:	e019      	b.n	800e9f2 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800e9be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9c0:	f104 0234 	add.w	r2, r4, #52	@ 0x34
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f103 010e 	add.w	r1, r3, #14
 800e9ca:	f8d5 31c4 	ldr.w	r3, [r5, #452]	@ 0x1c4
 800e9ce:	f8cd 9000 	str.w	r9, [sp]
 800e9d2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e9d6:	685e      	ldr	r6, [r3, #4]
 800e9d8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e9dc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e9de:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800e9e0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e9e2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d304      	bcc.n	800e9f2 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	6463      	str	r3, [r4, #68]	@ 0x44
    if (*out_row_ctr >= out_rows_avail)
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	4543      	cmp	r3, r8
 800e9f0:	d3b0      	bcc.n	800e954 <process_data_context_main+0x42>
  }
}
 800e9f2:	b00b      	add	sp, #44	@ 0x2c
 800e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e9f8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e9fa:	f06f 4e40 	mvn.w	lr, #3221225472	@ 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e9fe:	f8d5 11bc 	ldr.w	r1, [r5, #444]	@ 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea02:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 800ea06:	9206      	str	r2, [sp, #24]
 800ea08:	9a06      	ldr	r2, [sp, #24]
 800ea0a:	4296      	cmp	r6, r2
 800ea0c:	daae      	bge.n	800e96c <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800ea0e:	68d8      	ldr	r0, [r3, #12]
 800ea10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea12:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800ea14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ea16:	fbb0 fbf2 	udiv	fp, r0, r2
 800ea1a:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800ea1e:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800ea22:	2800      	cmp	r0, #0
 800ea24:	bf08      	it	eq
 800ea26:	4610      	moveq	r0, r2
    if (ci == 0) {
 800ea28:	b926      	cbnz	r6, 800ea34 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800ea2a:	1e42      	subs	r2, r0, #1
 800ea2c:	fb92 f2fa 	sdiv	r2, r2, sl
 800ea30:	3201      	adds	r2, #1
 800ea32:	648a      	str	r2, [r1, #72]	@ 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800ea34:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800ea36:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800ea38:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800ea3c:	320e      	adds	r2, #14
 800ea3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ea42:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800ea46:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	465a      	mov	r2, fp
 800ea4e:	3204      	adds	r2, #4
 800ea50:	9005      	str	r0, [sp, #20]
 800ea52:	9805      	ldr	r0, [sp, #20]
 800ea54:	4550      	cmp	r0, sl
 800ea56:	db02      	blt.n	800ea5e <process_data_context_main+0x14c>
       ci++, compptr++) {
 800ea58:	3601      	adds	r6, #1
 800ea5a:	3358      	adds	r3, #88	@ 0x58
 800ea5c:	e7d4      	b.n	800ea08 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800ea5e:	f8db 0000 	ldr.w	r0, [fp]
 800ea62:	f842 0b04 	str.w	r0, [r2], #4
    for (i = 0; i < rgroup * 2; i++) {
 800ea66:	9805      	ldr	r0, [sp, #20]
 800ea68:	3001      	adds	r0, #1
 800ea6a:	e7f1      	b.n	800ea50 <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea6c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ea70:	f8d5 81bc 	ldr.w	r8, [r5, #444]	@ 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea74:	9305      	str	r3, [sp, #20]
 800ea76:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ea78:	2500      	movs	r5, #0
 800ea7a:	9307      	str	r3, [sp, #28]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	9309      	str	r3, [sp, #36]	@ 0x24
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea80:	9b07      	ldr	r3, [sp, #28]
 800ea82:	429d      	cmp	r5, r3
 800ea84:	da8e      	bge.n	800e9a4 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ea86:	9b05      	ldr	r3, [sp, #20]
 800ea88:	68da      	ldr	r2, [r3, #12]
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea8c:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800ea8e:	f8d8 3038 	ldr.w	r3, [r8, #56]	@ 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ea92:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800ea96:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800ea9a:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
 800ea9e:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800eaa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa4:	4353      	muls	r3, r2
 800eaa6:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800eaaa:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800eaae:	4413      	add	r3, r2
 800eab0:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800eab2:	2100      	movs	r1, #0
 800eab4:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800eab8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800eabc:	461e      	mov	r6, r3
 800eabe:	f06f 0303 	mvn.w	r3, #3
 800eac2:	fb03 fe02 	mul.w	lr, r3, r2
 800eac6:	eb07 030e 	add.w	r3, r7, lr
 800eaca:	44e6      	add	lr, ip
 800eacc:	9308      	str	r3, [sp, #32]
 800eace:	428a      	cmp	r2, r1
 800ead0:	dc04      	bgt.n	800eadc <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800ead2:	9b05      	ldr	r3, [sp, #20]
 800ead4:	3501      	adds	r5, #1
 800ead6:	3358      	adds	r3, #88	@ 0x58
 800ead8:	9305      	str	r3, [sp, #20]
 800eada:	e7d1      	b.n	800ea80 <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800eadc:	9b06      	ldr	r3, [sp, #24]
 800eade:	f853 bb04 	ldr.w	fp, [r3], #4
 800eae2:	9306      	str	r3, [sp, #24]
 800eae4:	9b08      	ldr	r3, [sp, #32]
 800eae6:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800eaea:	f85a bb04 	ldr.w	fp, [sl], #4
 800eaee:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800eaf2:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800eaf6:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800eafa:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800eafe:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800eb00:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800eb04:	e7e3      	b.n	800eace <process_data_context_main+0x1bc>

0800eb06 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800eb06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800eb08:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
 800eb0c:	9100      	str	r1, [sp, #0]
 800eb0e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800eb12:	2300      	movs	r3, #0
 800eb14:	6864      	ldr	r4, [r4, #4]
 800eb16:	461a      	mov	r2, r3
 800eb18:	4619      	mov	r1, r3
 800eb1a:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800eb1c:	b004      	add	sp, #16
 800eb1e:	bd10      	pop	{r4, pc}

0800eb20 <start_pass_main>:
{
 800eb20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800eb24:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
{
 800eb28:	4602      	mov	r2, r0
  switch (pass_mode) {
 800eb2a:	b149      	cbz	r1, 800eb40 <start_pass_main+0x20>
 800eb2c:	2902      	cmp	r1, #2
 800eb2e:	d071      	beq.n	800ec14 <start_pass_main+0xf4>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800eb30:	6803      	ldr	r3, [r0, #0]
 800eb32:	2203      	movs	r2, #3
 800eb34:	615a      	str	r2, [r3, #20]
 800eb36:	681b      	ldr	r3, [r3, #0]
}
 800eb38:	b003      	add	sp, #12
 800eb3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800eb3e:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800eb40:	f8d0 01d8 	ldr.w	r0, [r0, #472]	@ 0x1d8
 800eb44:	6880      	ldr	r0, [r0, #8]
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d061      	beq.n	800ec0e <start_pass_main+0xee>
  int M = cinfo->min_DCT_v_scaled_size;
 800eb4a:	f8d2 c144 	ldr.w	ip, [r2, #324]	@ 0x144
      main->pub.process_data = process_data_context_main;
 800eb4e:	461f      	mov	r7, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb50:	f8d2 60d8 	ldr.w	r6, [r2, #216]	@ 0xd8
 800eb54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      main->pub.process_data = process_data_context_main;
 800eb56:	4831      	ldr	r0, [pc, #196]	@ (800ec1c <start_pass_main+0xfc>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb58:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800eb5a:	f10c 0202 	add.w	r2, ip, #2
      main->pub.process_data = process_data_context_main;
 800eb5e:	f847 0f04 	str.w	r0, [r7, #4]!
    for (i = 0; i < rgroup * (M + 2); i++) {
 800eb62:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb64:	9a00      	ldr	r2, [sp, #0]
 800eb66:	4291      	cmp	r1, r2
 800eb68:	db09      	blt.n	800eb7e <start_pass_main+0x5e>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800eb6a:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800eb6c:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
      main->iMCU_row_ctr = 0;
 800eb70:	64da      	str	r2, [r3, #76]	@ 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800eb72:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800eb74:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
}
 800eb78:	b003      	add	sp, #12
 800eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eb7e:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800eb80:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800eb82:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eb84:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800eb86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    buf = main->buffer[ci];
 800eb88:	f857 4f04 	ldr.w	r4, [r7, #4]!
    xbuf0 = main->xbuffer[0][ci];
 800eb8c:	f850 e021 	ldr.w	lr, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800eb90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eb92:	fb92 f2fc 	sdiv	r2, r2, ip
    xbuf1 = main->xbuffer[1][ci];
 800eb96:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800eb9a:	fb02 f905 	mul.w	r9, r2, r5
 800eb9e:	2500      	movs	r5, #0
 800eba0:	454d      	cmp	r5, r9
 800eba2:	db1c      	blt.n	800ebde <start_pass_main+0xbe>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800eba4:	fb02 fb0c 	mul.w	fp, r2, ip
 800eba8:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800ebac:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ebb0:	fb05 b502 	mla	r5, r5, r2, fp
 800ebb4:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800ebb8:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800ebbc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800ebc0:	2400      	movs	r4, #0
 800ebc2:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800ebc6:	4554      	cmp	r4, sl
 800ebc8:	db11      	blt.n	800ebee <start_pass_main+0xce>
 800ebca:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800ebce:	2400      	movs	r4, #0
 800ebd0:	fb00 e502 	mla	r5, r0, r2, lr
 800ebd4:	42a2      	cmp	r2, r4
 800ebd6:	dc14      	bgt.n	800ec02 <start_pass_main+0xe2>
       ci++, compptr++) {
 800ebd8:	3101      	adds	r1, #1
 800ebda:	3658      	adds	r6, #88	@ 0x58
 800ebdc:	e7c2      	b.n	800eb64 <start_pass_main+0x44>
      xbuf0[i] = xbuf1[i] = buf[i];
 800ebde:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800ebe2:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800ebe6:	f84e 8025 	str.w	r8, [lr, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ebea:	3501      	adds	r5, #1
 800ebec:	e7d8      	b.n	800eba0 <start_pass_main+0x80>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ebee:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800ebf2:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ebf4:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800ebf8:	f855 bb04 	ldr.w	fp, [r5], #4
 800ebfc:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800ec00:	e7e1      	b.n	800ebc6 <start_pass_main+0xa6>
      xbuf0[i - rgroup] = xbuf0[0];
 800ec02:	f8de 0000 	ldr.w	r0, [lr]
 800ec06:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800ec0a:	3401      	adds	r4, #1
 800ec0c:	e7e2      	b.n	800ebd4 <start_pass_main+0xb4>
      main->pub.process_data = process_data_simple_main;
 800ec0e:	4a04      	ldr	r2, [pc, #16]	@ (800ec20 <start_pass_main+0x100>)
 800ec10:	605a      	str	r2, [r3, #4]
 800ec12:	e7ae      	b.n	800eb72 <start_pass_main+0x52>
    main->pub.process_data = process_data_crank_post;
 800ec14:	4a03      	ldr	r2, [pc, #12]	@ (800ec24 <start_pass_main+0x104>)
 800ec16:	605a      	str	r2, [r3, #4]
    break;
 800ec18:	e7ae      	b.n	800eb78 <start_pass_main+0x58>
 800ec1a:	bf00      	nop
 800ec1c:	0800e913 	.word	0x0800e913
 800ec20:	0800e8bd 	.word	0x0800e8bd
 800ec24:	0800eb07 	.word	0x0800eb07

0800ec28 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800ec28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec2c:	6843      	ldr	r3, [r0, #4]
{
 800ec2e:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec30:	2250      	movs	r2, #80	@ 0x50
 800ec32:	2101      	movs	r1, #1
 800ec34:	681b      	ldr	r3, [r3, #0]
{
 800ec36:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec38:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800ec3a:	4b3a      	ldr	r3, [pc, #232]	@ (800ed24 <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800ec3c:	f8c4 01bc 	str.w	r0, [r4, #444]	@ 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec40:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800ec42:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800ec44:	b12d      	cbz	r5, 800ec52 <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	2203      	movs	r2, #3
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	615a      	str	r2, [r3, #20]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800ec52:	f8d4 31d8 	ldr.w	r3, [r4, #472]	@ 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800ec56:	f8d4 5144 	ldr.w	r5, [r4, #324]	@ 0x144
  if (cinfo->upsample->need_context_rows) {
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	b31b      	cbz	r3, 800eca6 <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800ec5e:	2d01      	cmp	r5, #1
 800ec60:	dc05      	bgt.n	800ec6e <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	2230      	movs	r2, #48	@ 0x30
 800ec66:	4620      	mov	r0, r4
 800ec68:	615a      	str	r2, [r3, #20]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ec70:	2101      	movs	r1, #1
 800ec72:	6863      	ldr	r3, [r4, #4]
 800ec74:	4620      	mov	r0, r4
 800ec76:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ec78:	f8d4 71bc 	ldr.w	r7, [r4, #444]	@ 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec7c:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec7e:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800ec82:	f8d4 9144 	ldr.w	r9, [r4, #324]	@ 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec86:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ec88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800ec8a:	63b8      	str	r0, [r7, #56]	@ 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800ec8c:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ec90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec94:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ec98:	63f8      	str	r0, [r7, #60]	@ 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec9a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800ec9c:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eca0:	4590      	cmp	r8, r2
 800eca2:	db0a      	blt.n	800ecba <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800eca4:	1c9d      	adds	r5, r3, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eca6:	f8d4 70d8 	ldr.w	r7, [r4, #216]	@ 0xd8
 800ecaa:	3604      	adds	r6, #4
 800ecac:	f04f 0800 	mov.w	r8, #0
 800ecb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ecb2:	4543      	cmp	r3, r8
 800ecb4:	dc1d      	bgt.n	800ecf2 <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800ecb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ecba:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ecbc:	4620      	mov	r0, r4
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ecbe:	68ea      	ldr	r2, [r5, #12]
       ci++, compptr++) {
 800ecc0:	3558      	adds	r5, #88	@ 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ecc2:	434a      	muls	r2, r1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ecc4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ecc6:	fb92 fbf3 	sdiv	fp, r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ecca:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800eccc:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ecd6:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800ecd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800ecda:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800ecde:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800ece2:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800ece6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ece8:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800ecec:	f108 0801 	add.w	r8, r8, #1
 800ecf0:	e7d3      	b.n	800ec9a <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ecf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
       ci++, compptr++) {
 800ecf4:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ecf8:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800ecfa:	3758      	adds	r7, #88	@ 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800ecfc:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ed00:	4353      	muls	r3, r2
 800ed02:	f8d4 2144 	ldr.w	r2, [r4, #324]	@ 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800ed06:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ed08:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800ed0c:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800ed10:	436b      	muls	r3, r5
 800ed12:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800ed16:	4620      	mov	r0, r4
 800ed18:	434a      	muls	r2, r1
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	47c8      	blx	r9
 800ed1e:	f846 0f04 	str.w	r0, [r6, #4]!
       ci++, compptr++) {
 800ed22:	e7c5      	b.n	800ecb0 <jinit_d_main_controller+0x88>
 800ed24:	0800eb21 	.word	0x0800eb21

0800ed28 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800ed2c:	6986      	ldr	r6, [r0, #24]
{
 800ed2e:	4617      	mov	r7, r2
 800ed30:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800ed32:	e9d6 2500 	ldrd	r2, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800ed36:	e9c0 1737 	strd	r1, r7, [r0, #220]	@ 0xdc
  cinfo->arith_code = is_arith;
 800ed3a:	f8c0 30e4 	str.w	r3, [r0, #228]	@ 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed3e:	b93d      	cbnz	r5, 800ed50 <get_sof+0x28>
 800ed40:	68f3      	ldr	r3, [r6, #12]
 800ed42:	4798      	blx	r3
 800ed44:	b910      	cbnz	r0, 800ed4c <get_sof+0x24>
 800ed46:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800ed48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed4c:	e9d6 2500 	ldrd	r2, r5, [r6]
 800ed50:	1e6b      	subs	r3, r5, #1
 800ed52:	7817      	ldrb	r7, [r2, #0]
 800ed54:	f000 8087 	beq.w	800ee66 <get_sof+0x13e>
 800ed58:	1c55      	adds	r5, r2, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ed5a:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed5c:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ed60:	f000 808a 	beq.w	800ee78 <get_sof+0x150>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed64:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ed66:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ed68:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ed6a:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ed6e:	f000 808c 	beq.w	800ee8a <get_sof+0x162>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ed72:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ed74:	782a      	ldrb	r2, [r5, #0]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ed7c:	6222      	str	r2, [r4, #32]
 800ed7e:	f000 808d 	beq.w	800ee9c <get_sof+0x174>
 800ed82:	3501      	adds	r5, #1
 800ed84:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800ed86:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ed88:	6a22      	ldr	r2, [r4, #32]
 800ed8a:	440a      	add	r2, r1
 800ed8c:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800ed8e:	f000 808e 	beq.w	800eeae <get_sof+0x186>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ed92:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800ed94:	782a      	ldrb	r2, [r5, #0]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ed9c:	61e2      	str	r2, [r4, #28]
 800ed9e:	f000 808f 	beq.w	800eec0 <get_sof+0x198>
 800eda2:	3501      	adds	r5, #1
 800eda4:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800eda6:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eda8:	69e2      	ldr	r2, [r4, #28]
 800edaa:	440a      	add	r2, r1
 800edac:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800edae:	f000 8090 	beq.w	800eed2 <get_sof+0x1aa>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800edb2:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800edb4:	f103 39ff 	add.w	r9, r3, #4294967295
 800edb8:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800edbc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	@ 0x1b4
 800edc0:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800edc2:	6263      	str	r3, [r4, #36]	@ 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800edc4:	4620      	mov	r0, r4
 800edc6:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800edc8:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800edcc:	619a      	str	r2, [r3, #24]
  length -= 8;
 800edce:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800edd2:	69e2      	ldr	r2, [r4, #28]
 800edd4:	61da      	str	r2, [r3, #28]
 800edd6:	6a22      	ldr	r2, [r4, #32]
 800edd8:	621a      	str	r2, [r3, #32]
 800edda:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800eddc:	625a      	str	r2, [r3, #36]	@ 0x24
 800edde:	2266      	movs	r2, #102	@ 0x66
 800ede0:	615a      	str	r2, [r3, #20]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800ede6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	b12b      	cbz	r3, 800edfa <get_sof+0xd2>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	223c      	movs	r2, #60	@ 0x3c
 800edf2:	4620      	mov	r0, r4
 800edf4:	615a      	str	r2, [r3, #20]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800edfa:	6a23      	ldr	r3, [r4, #32]
 800edfc:	b123      	cbz	r3, 800ee08 <get_sof+0xe0>
 800edfe:	69e3      	ldr	r3, [r4, #28]
 800ee00:	b113      	cbz	r3, 800ee08 <get_sof+0xe0>
      || cinfo->num_components <= 0)
 800ee02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	dc05      	bgt.n	800ee14 <get_sof+0xec>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	2221      	movs	r2, #33	@ 0x21
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	615a      	str	r2, [r3, #20]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800ee14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ee16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ee1a:	4543      	cmp	r3, r8
 800ee1c:	d005      	beq.n	800ee2a <get_sof+0x102>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	220c      	movs	r2, #12
 800ee22:	4620      	mov	r0, r4
 800ee24:	615a      	str	r2, [r3, #20]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800ee2a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800ee2e:	b94b      	cbnz	r3, 800ee44 <get_sof+0x11c>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800ee30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ee32:	2158      	movs	r1, #88	@ 0x58
 800ee34:	6863      	ldr	r3, [r4, #4]
 800ee36:	4620      	mov	r0, r4
 800ee38:	434a      	muls	r2, r1
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4798      	blx	r3
 800ee40:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ee44:	f8d4 70d8 	ldr.w	r7, [r4, #216]	@ 0xd8
 800ee48:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ee4c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ee50:	3758      	adds	r7, #88	@ 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ee52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ee54:	4543      	cmp	r3, r8
 800ee56:	dc45      	bgt.n	800eee4 <get_sof+0x1bc>
  cinfo->marker->saw_SOF = TRUE;
 800ee58:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800ee5c:	2001      	movs	r0, #1
 800ee5e:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800ee60:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800ee64:	e770      	b.n	800ed48 <get_sof+0x20>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee66:	68f3      	ldr	r3, [r6, #12]
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4798      	blx	r3
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	f43f af6a 	beq.w	800ed46 <get_sof+0x1e>
 800ee72:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ee76:	e770      	b.n	800ed5a <get_sof+0x32>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ee78:	68f3      	ldr	r3, [r6, #12]
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	4798      	blx	r3
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	f43f af61 	beq.w	800ed46 <get_sof+0x1e>
 800ee84:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ee88:	e76d      	b.n	800ed66 <get_sof+0x3e>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ee8a:	68f3      	ldr	r3, [r6, #12]
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	4798      	blx	r3
 800ee90:	2800      	cmp	r0, #0
 800ee92:	f43f af58 	beq.w	800ed46 <get_sof+0x1e>
 800ee96:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ee9a:	e76b      	b.n	800ed74 <get_sof+0x4c>
 800ee9c:	68f3      	ldr	r3, [r6, #12]
 800ee9e:	4620      	mov	r0, r4
 800eea0:	4798      	blx	r3
 800eea2:	2800      	cmp	r0, #0
 800eea4:	f43f af4f 	beq.w	800ed46 <get_sof+0x1e>
 800eea8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eeac:	e76a      	b.n	800ed84 <get_sof+0x5c>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eeae:	68f3      	ldr	r3, [r6, #12]
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	4798      	blx	r3
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	f43f af46 	beq.w	800ed46 <get_sof+0x1e>
 800eeba:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eebe:	e769      	b.n	800ed94 <get_sof+0x6c>
 800eec0:	68f3      	ldr	r3, [r6, #12]
 800eec2:	4620      	mov	r0, r4
 800eec4:	4798      	blx	r3
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f43f af3d 	beq.w	800ed46 <get_sof+0x1e>
 800eecc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eed0:	e768      	b.n	800eda4 <get_sof+0x7c>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800eed2:	68f3      	ldr	r3, [r6, #12]
 800eed4:	4620      	mov	r0, r4
 800eed6:	4798      	blx	r3
 800eed8:	2800      	cmp	r0, #0
 800eeda:	f43f af34 	beq.w	800ed46 <get_sof+0x1e>
 800eede:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eee2:	e767      	b.n	800edb4 <get_sof+0x8c>
    compptr->component_index = ci;
 800eee4:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800eee8:	f1b9 0f00 	cmp.w	r9, #0
 800eeec:	d107      	bne.n	800eefe <get_sof+0x1d6>
 800eeee:	68f3      	ldr	r3, [r6, #12]
 800eef0:	4620      	mov	r0, r4
 800eef2:	4798      	blx	r3
 800eef4:	2800      	cmp	r0, #0
 800eef6:	f43f af26 	beq.w	800ed46 <get_sof+0x1e>
 800eefa:	e9d6 5900 	ldrd	r5, r9, [r6]
 800eefe:	782b      	ldrb	r3, [r5, #0]
 800ef00:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800ef04:	f1b9 0301 	subs.w	r3, r9, #1
 800ef08:	d029      	beq.n	800ef5e <get_sof+0x236>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800ef0a:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800ef0c:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ef0e:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800ef10:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800ef14:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800ef18:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800ef1c:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ef20:	d026      	beq.n	800ef70 <get_sof+0x248>
    INPUT_BYTE(cinfo, c, return FALSE);
 800ef22:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ef24:	f103 39ff 	add.w	r9, r3, #4294967295
 800ef28:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ef2c:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800ef30:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ef32:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ef36:	4620      	mov	r0, r4
 800ef38:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800ef3a:	f108 0801 	add.w	r8, r8, #1
 800ef3e:	3758      	adds	r7, #88	@ 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ef40:	619a      	str	r2, [r3, #24]
 800ef42:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800ef46:	61da      	str	r2, [r3, #28]
 800ef48:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800ef4c:	621a      	str	r2, [r3, #32]
 800ef4e:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800ef52:	f8c3 a014 	str.w	sl, [r3, #20]
 800ef56:	625a      	str	r2, [r3, #36]	@ 0x24
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	4798      	blx	r3
       ci++, compptr++) {
 800ef5c:	e779      	b.n	800ee52 <get_sof+0x12a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800ef5e:	68f3      	ldr	r3, [r6, #12]
 800ef60:	4620      	mov	r0, r4
 800ef62:	4798      	blx	r3
 800ef64:	2800      	cmp	r0, #0
 800ef66:	f43f aeee 	beq.w	800ed46 <get_sof+0x1e>
 800ef6a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ef6e:	e7cd      	b.n	800ef0c <get_sof+0x1e4>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ef70:	68f3      	ldr	r3, [r6, #12]
 800ef72:	4620      	mov	r0, r4
 800ef74:	4798      	blx	r3
 800ef76:	2800      	cmp	r0, #0
 800ef78:	f43f aee5 	beq.w	800ed46 <get_sof+0x1e>
 800ef7c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ef80:	e7d0      	b.n	800ef24 <get_sof+0x1fc>

0800ef82 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800ef82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800ef86:	2a0d      	cmp	r2, #13
{
 800ef88:	460d      	mov	r5, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800ef8a:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800ef8c:	eb02 0603 	add.w	r6, r2, r3
{
 800ef90:	4604      	mov	r4, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800ef92:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800ef94:	d967      	bls.n	800f066 <examine_app0+0xe4>
 800ef96:	782a      	ldrb	r2, [r5, #0]
 800ef98:	2a4a      	cmp	r2, #74	@ 0x4a
 800ef9a:	f040 8089 	bne.w	800f0b0 <examine_app0+0x12e>
      GETJOCTET(data[0]) == 0x4A &&
 800ef9e:	786a      	ldrb	r2, [r5, #1]
 800efa0:	2a46      	cmp	r2, #70	@ 0x46
 800efa2:	f040 8085 	bne.w	800f0b0 <examine_app0+0x12e>
      GETJOCTET(data[1]) == 0x46 &&
 800efa6:	78aa      	ldrb	r2, [r5, #2]
 800efa8:	2a49      	cmp	r2, #73	@ 0x49
 800efaa:	d164      	bne.n	800f076 <examine_app0+0xf4>
      GETJOCTET(data[2]) == 0x49 &&
 800efac:	78ea      	ldrb	r2, [r5, #3]
 800efae:	2a46      	cmp	r2, #70	@ 0x46
 800efb0:	d161      	bne.n	800f076 <examine_app0+0xf4>
      GETJOCTET(data[3]) == 0x46 &&
 800efb2:	792a      	ldrb	r2, [r5, #4]
 800efb4:	2a00      	cmp	r2, #0
 800efb6:	d15e      	bne.n	800f076 <examine_app0+0xf4>
    cinfo->saw_JFIF_marker = TRUE;
 800efb8:	2201      	movs	r2, #1
 800efba:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800efbe:	796a      	ldrb	r2, [r5, #5]
 800efc0:	f880 2120 	strb.w	r2, [r0, #288]	@ 0x120
    if (cinfo->JFIF_major_version != 1)
 800efc4:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800efc6:	f895 c006 	ldrb.w	ip, [r5, #6]
 800efca:	f880 c121 	strb.w	ip, [r0, #289]	@ 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800efce:	79ef      	ldrb	r7, [r5, #7]
 800efd0:	f880 7122 	strb.w	r7, [r0, #290]	@ 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800efd4:	892f      	ldrh	r7, [r5, #8]
 800efd6:	ba7f      	rev16	r7, r7
 800efd8:	f8a0 7124 	strh.w	r7, [r0, #292]	@ 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800efdc:	896f      	ldrh	r7, [r5, #10]
 800efde:	ba7f      	rev16	r7, r7
 800efe0:	f8a0 7126 	strh.w	r7, [r0, #294]	@ 0x126
    if (cinfo->JFIF_major_version != 1)
 800efe4:	d007      	beq.n	800eff6 <examine_app0+0x74>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800efe6:	277a      	movs	r7, #122	@ 0x7a
 800efe8:	f8c1 c01c 	str.w	ip, [r1, #28]
 800efec:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800eff0:	f04f 31ff 	mov.w	r1, #4294967295
 800eff4:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	2101      	movs	r1, #1
 800effa:	f894 2120 	ldrb.w	r2, [r4, #288]	@ 0x120
 800effe:	4620      	mov	r0, r4
 800f000:	619a      	str	r2, [r3, #24]
 800f002:	f894 2121 	ldrb.w	r2, [r4, #289]	@ 0x121
 800f006:	61da      	str	r2, [r3, #28]
 800f008:	f8b4 2124 	ldrh.w	r2, [r4, #292]	@ 0x124
 800f00c:	621a      	str	r2, [r3, #32]
 800f00e:	f8b4 2126 	ldrh.w	r2, [r4, #294]	@ 0x126
 800f012:	625a      	str	r2, [r3, #36]	@ 0x24
 800f014:	f894 2122 	ldrb.w	r2, [r4, #290]	@ 0x122
 800f018:	629a      	str	r2, [r3, #40]	@ 0x28
 800f01a:	2259      	movs	r2, #89	@ 0x59
 800f01c:	615a      	str	r2, [r3, #20]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800f022:	7b2b      	ldrb	r3, [r5, #12]
 800f024:	7b6a      	ldrb	r2, [r5, #13]
 800f026:	4313      	orrs	r3, r2
 800f028:	d00a      	beq.n	800f040 <examine_app0+0xbe>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	225c      	movs	r2, #92	@ 0x5c
 800f02e:	2101      	movs	r1, #1
 800f030:	4620      	mov	r0, r4
 800f032:	615a      	str	r2, [r3, #20]
 800f034:	7b2a      	ldrb	r2, [r5, #12]
 800f036:	619a      	str	r2, [r3, #24]
 800f038:	7b6a      	ldrb	r2, [r5, #13]
 800f03a:	61da      	str	r2, [r3, #28]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800f040:	7b2b      	ldrb	r3, [r5, #12]
    totallen -= APP0_DATA_LEN;
 800f042:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800f044:	7b6a      	ldrb	r2, [r5, #13]
 800f046:	fb13 f302 	smulbb	r3, r3, r2
 800f04a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (totallen !=
 800f04e:	42b3      	cmp	r3, r6
 800f050:	d030      	beq.n	800f0b4 <examine_app0+0x132>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	225a      	movs	r2, #90	@ 0x5a
 800f056:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800f05a:	685b      	ldr	r3, [r3, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f05c:	4620      	mov	r0, r4
 800f05e:	2101      	movs	r1, #1
  }
}
 800f060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f064:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800f066:	2a05      	cmp	r2, #5
 800f068:	d922      	bls.n	800f0b0 <examine_app0+0x12e>
 800f06a:	782a      	ldrb	r2, [r5, #0]
 800f06c:	2a4a      	cmp	r2, #74	@ 0x4a
 800f06e:	d11f      	bne.n	800f0b0 <examine_app0+0x12e>
      GETJOCTET(data[0]) == 0x4A &&
 800f070:	786a      	ldrb	r2, [r5, #1]
 800f072:	2a46      	cmp	r2, #70	@ 0x46
 800f074:	d11c      	bne.n	800f0b0 <examine_app0+0x12e>
      GETJOCTET(data[1]) == 0x46 &&
 800f076:	78aa      	ldrb	r2, [r5, #2]
 800f078:	2a58      	cmp	r2, #88	@ 0x58
 800f07a:	d119      	bne.n	800f0b0 <examine_app0+0x12e>
      GETJOCTET(data[2]) == 0x58 &&
 800f07c:	78ea      	ldrb	r2, [r5, #3]
 800f07e:	2a58      	cmp	r2, #88	@ 0x58
 800f080:	d116      	bne.n	800f0b0 <examine_app0+0x12e>
      GETJOCTET(data[3]) == 0x58 &&
 800f082:	792a      	ldrb	r2, [r5, #4]
 800f084:	b9a2      	cbnz	r2, 800f0b0 <examine_app0+0x12e>
    switch (GETJOCTET(data[5])) {
 800f086:	796a      	ldrb	r2, [r5, #5]
 800f088:	2a11      	cmp	r2, #17
 800f08a:	d007      	beq.n	800f09c <examine_app0+0x11a>
 800f08c:	2a13      	cmp	r2, #19
 800f08e:	d007      	beq.n	800f0a0 <examine_app0+0x11e>
 800f090:	2a10      	cmp	r2, #16
 800f092:	d107      	bne.n	800f0a4 <examine_app0+0x122>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800f094:	226e      	movs	r2, #110	@ 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f096:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800f09a:	e7df      	b.n	800f05c <examine_app0+0xda>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800f09c:	226f      	movs	r2, #111	@ 0x6f
 800f09e:	e7fa      	b.n	800f096 <examine_app0+0x114>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800f0a0:	2270      	movs	r2, #112	@ 0x70
 800f0a2:	e7f8      	b.n	800f096 <examine_app0+0x114>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800f0a4:	225b      	movs	r2, #91	@ 0x5b
 800f0a6:	614a      	str	r2, [r1, #20]
 800f0a8:	796a      	ldrb	r2, [r5, #5]
 800f0aa:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800f0ae:	e7d5      	b.n	800f05c <examine_app0+0xda>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f0b0:	224f      	movs	r2, #79	@ 0x4f
 800f0b2:	e7f0      	b.n	800f096 <examine_app0+0x114>
}
 800f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f0b8 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800f0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800f0bc:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f0be:	6804      	ldr	r4, [r0, #0]
{
 800f0c0:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f0c2:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800f0c4:	d92a      	bls.n	800f11c <examine_app14+0x64>
 800f0c6:	780f      	ldrb	r7, [r1, #0]
 800f0c8:	2f41      	cmp	r7, #65	@ 0x41
 800f0ca:	d127      	bne.n	800f11c <examine_app14+0x64>
      GETJOCTET(data[0]) == 0x41 &&
 800f0cc:	784f      	ldrb	r7, [r1, #1]
 800f0ce:	2f64      	cmp	r7, #100	@ 0x64
 800f0d0:	d124      	bne.n	800f11c <examine_app14+0x64>
      GETJOCTET(data[1]) == 0x64 &&
 800f0d2:	788f      	ldrb	r7, [r1, #2]
 800f0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0d6:	d121      	bne.n	800f11c <examine_app14+0x64>
      GETJOCTET(data[2]) == 0x6F &&
 800f0d8:	78cf      	ldrb	r7, [r1, #3]
 800f0da:	2f62      	cmp	r7, #98	@ 0x62
 800f0dc:	d11e      	bne.n	800f11c <examine_app14+0x64>
      GETJOCTET(data[3]) == 0x62 &&
 800f0de:	790f      	ldrb	r7, [r1, #4]
 800f0e0:	2f65      	cmp	r7, #101	@ 0x65
 800f0e2:	d11b      	bne.n	800f11c <examine_app14+0x64>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800f0e4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 800f0e8:	f8b1 2007 	ldrh.w	r2, [r1, #7]
    transform = GETJOCTET(data[11]);
 800f0ec:	7acf      	ldrb	r7, [r1, #11]
 800f0ee:	ba5b      	rev16	r3, r3
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f0f0:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800f0f4:	ba52      	rev16	r2, r2
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	ba49      	rev16	r1, r1
 800f0fa:	b292      	uxth	r2, r2
 800f0fc:	b289      	uxth	r1, r1
 800f0fe:	e9c4 3708 	strd	r3, r7, [r4, #32]
 800f102:	234e      	movs	r3, #78	@ 0x4e
 800f104:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800f108:	6163      	str	r3, [r4, #20]
 800f10a:	2101      	movs	r1, #1
 800f10c:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800f10e:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800f110:	f885 712c 	strb.w	r7, [r5, #300]	@ 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800f114:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800f11c:	2150      	movs	r1, #80	@ 0x50
 800f11e:	4413      	add	r3, r2
 800f120:	4628      	mov	r0, r5
 800f122:	6161      	str	r1, [r4, #20]
 800f124:	2101      	movs	r1, #1
 800f126:	61a3      	str	r3, [r4, #24]
 800f128:	4633      	mov	r3, r6
}
 800f12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800f12e:	4718      	bx	r3

0800f130 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800f130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800f134:	6986      	ldr	r6, [r0, #24]
{
 800f136:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800f138:	e9d6 4700 	ldrd	r4, r7, [r6]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800f13c:	b947      	cbnz	r7, 800f150 <get_interesting_appn+0x20>
 800f13e:	68f3      	ldr	r3, [r6, #12]
 800f140:	4798      	blx	r3
 800f142:	b918      	cbnz	r0, 800f14c <get_interesting_appn+0x1c>
 800f144:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800f146:	b004      	add	sp, #16
 800f148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f14c:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f150:	f894 9000 	ldrb.w	r9, [r4]
 800f154:	3f01      	subs	r7, #1
 800f156:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f15a:	d01f      	beq.n	800f19c <get_interesting_appn+0x6c>
 800f15c:	3401      	adds	r4, #1
 800f15e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f162:	3f01      	subs	r7, #1
 800f164:	444d      	add	r5, r9
  length -= 2;
 800f166:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800f168:	2d0d      	cmp	r5, #13
 800f16a:	dc1f      	bgt.n	800f1ac <get_interesting_appn+0x7c>
  else if (length > 0)
 800f16c:	2d00      	cmp	r5, #0
 800f16e:	dd30      	ble.n	800f1d2 <get_interesting_appn+0xa2>
    numtoread = (unsigned int) length;
 800f170:	46a9      	mov	r9, r5
  for (i = 0; i < numtoread; i++)
 800f172:	f04f 0a00 	mov.w	sl, #0
 800f176:	45ca      	cmp	sl, r9
 800f178:	d11b      	bne.n	800f1b2 <get_interesting_appn+0x82>
  switch (cinfo->unread_marker) {
 800f17a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	@ 0x1b4
  length -= numtoread;
 800f17e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800f182:	2ae0      	cmp	r2, #224	@ 0xe0
 800f184:	d028      	beq.n	800f1d8 <get_interesting_appn+0xa8>
 800f186:	2aee      	cmp	r2, #238	@ 0xee
 800f188:	d032      	beq.n	800f1f0 <get_interesting_appn+0xc0>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f18a:	f8d8 3000 	ldr.w	r3, [r8]
 800f18e:	2146      	movs	r1, #70	@ 0x46
 800f190:	4640      	mov	r0, r8
 800f192:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4798      	blx	r3
    break;
 800f19a:	e023      	b.n	800f1e4 <get_interesting_appn+0xb4>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f19c:	68f3      	ldr	r3, [r6, #12]
 800f19e:	4640      	mov	r0, r8
 800f1a0:	4798      	blx	r3
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d0ce      	beq.n	800f144 <get_interesting_appn+0x14>
 800f1a6:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f1aa:	e7d8      	b.n	800f15e <get_interesting_appn+0x2e>
    numtoread = APPN_DATA_LEN;
 800f1ac:	f04f 090e 	mov.w	r9, #14
 800f1b0:	e7df      	b.n	800f172 <get_interesting_appn+0x42>
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800f1b2:	b937      	cbnz	r7, 800f1c2 <get_interesting_appn+0x92>
 800f1b4:	68f3      	ldr	r3, [r6, #12]
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	4798      	blx	r3
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d0c2      	beq.n	800f144 <get_interesting_appn+0x14>
 800f1be:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f1c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1c6:	3f01      	subs	r7, #1
 800f1c8:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800f1cc:	f10a 0a01 	add.w	sl, sl, #1
 800f1d0:	e7d1      	b.n	800f176 <get_interesting_appn+0x46>
    numtoread = 0;
 800f1d2:	f04f 0900 	mov.w	r9, #0
 800f1d6:	e7d0      	b.n	800f17a <get_interesting_appn+0x4a>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800f1d8:	462b      	mov	r3, r5
 800f1da:	464a      	mov	r2, r9
 800f1dc:	4669      	mov	r1, sp
 800f1de:	4640      	mov	r0, r8
 800f1e0:	f7ff fecf 	bl	800ef82 <examine_app0>
  if (length > 0)
 800f1e4:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800f1e6:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800f1ea:	dc08      	bgt.n	800f1fe <get_interesting_appn+0xce>
  return TRUE;
 800f1ec:	2001      	movs	r0, #1
 800f1ee:	e7aa      	b.n	800f146 <get_interesting_appn+0x16>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	464a      	mov	r2, r9
 800f1f4:	4669      	mov	r1, sp
 800f1f6:	4640      	mov	r0, r8
 800f1f8:	f7ff ff5e 	bl	800f0b8 <examine_app14>
    break;
 800f1fc:	e7f2      	b.n	800f1e4 <get_interesting_appn+0xb4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800f1fe:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f202:	4629      	mov	r1, r5
 800f204:	4640      	mov	r0, r8
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	4798      	blx	r3
 800f20a:	e7ef      	b.n	800f1ec <get_interesting_appn+0xbc>

0800f20c <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800f20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800f210:	6984      	ldr	r4, [r0, #24]
{
 800f212:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800f214:	e9d4 5300 	ldrd	r5, r3, [r4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800f218:	b93b      	cbnz	r3, 800f22a <skip_variable+0x1e>
 800f21a:	68e3      	ldr	r3, [r4, #12]
 800f21c:	4798      	blx	r3
 800f21e:	b910      	cbnz	r0, 800f226 <skip_variable+0x1a>
 800f220:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800f222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f226:	e9d4 5300 	ldrd	r5, r3, [r4]
 800f22a:	f895 9000 	ldrb.w	r9, [r5]
 800f22e:	f1b3 0801 	subs.w	r8, r3, #1
 800f232:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f236:	d017      	beq.n	800f268 <skip_variable+0x5c>
 800f238:	3501      	adds	r5, #1
 800f23a:	f815 6b01 	ldrb.w	r6, [r5], #1
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f23e:	235d      	movs	r3, #93	@ 0x5d
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f244:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f246:	4638      	mov	r0, r7
 800f248:	6153      	str	r3, [r2, #20]
  length -= 2;
 800f24a:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f24c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800f250:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800f254:	6853      	ldr	r3, [r2, #4]
 800f256:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f258:	f108 33ff 	add.w	r3, r8, #4294967295
  if (length > 0)
 800f25c:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800f25e:	6025      	str	r5, [r4, #0]
 800f260:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800f262:	dc09      	bgt.n	800f278 <skip_variable+0x6c>
  return TRUE;
 800f264:	2001      	movs	r0, #1
 800f266:	e7dc      	b.n	800f222 <skip_variable+0x16>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f268:	68e3      	ldr	r3, [r4, #12]
 800f26a:	4638      	mov	r0, r7
 800f26c:	4798      	blx	r3
 800f26e:	2800      	cmp	r0, #0
 800f270:	d0d6      	beq.n	800f220 <skip_variable+0x14>
 800f272:	e9d4 5800 	ldrd	r5, r8, [r4]
 800f276:	e7e0      	b.n	800f23a <skip_variable+0x2e>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	4631      	mov	r1, r6
 800f27c:	4638      	mov	r0, r7
 800f27e:	691b      	ldr	r3, [r3, #16]
 800f280:	4798      	blx	r3
 800f282:	e7ef      	b.n	800f264 <skip_variable+0x58>

0800f284 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800f284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800f288:	6986      	ldr	r6, [r0, #24]
{
 800f28a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800f28c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800f290:	b987      	cbnz	r7, 800f2b4 <next_marker+0x30>
 800f292:	68f3      	ldr	r3, [r6, #12]
 800f294:	4640      	mov	r0, r8
 800f296:	4798      	blx	r3
 800f298:	b950      	cbnz	r0, 800f2b0 <next_marker+0x2c>
 800f29a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800f2a0:	f8d8 21cc 	ldr.w	r2, [r8, #460]	@ 0x1cc
 800f2a4:	6993      	ldr	r3, [r2, #24]
 800f2a6:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800f2a8:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800f2aa:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f2ae:	e7ef      	b.n	800f290 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800f2b0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f2b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f2b8:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800f2ba:	2bff      	cmp	r3, #255	@ 0xff
 800f2bc:	d1f0      	bne.n	800f2a0 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800f2be:	b937      	cbnz	r7, 800f2ce <next_marker+0x4a>
 800f2c0:	68f3      	ldr	r3, [r6, #12]
 800f2c2:	4640      	mov	r0, r8
 800f2c4:	4798      	blx	r3
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d0e7      	beq.n	800f29a <next_marker+0x16>
 800f2ca:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f2ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f2d2:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800f2d4:	2dff      	cmp	r5, #255	@ 0xff
 800f2d6:	d0f2      	beq.n	800f2be <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800f2d8:	f8d8 21cc 	ldr.w	r2, [r8, #460]	@ 0x1cc
 800f2dc:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800f2de:	b90d      	cbnz	r5, 800f2e4 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800f2e0:	3302      	adds	r3, #2
 800f2e2:	e7e1      	b.n	800f2a8 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800f2e4:	b173      	cbz	r3, 800f304 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800f2e6:	f8d8 2000 	ldr.w	r2, [r8]
 800f2ea:	2177      	movs	r1, #119	@ 0x77
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	61d5      	str	r5, [r2, #28]
 800f2f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f2f4:	6853      	ldr	r3, [r2, #4]
 800f2f6:	f04f 31ff 	mov.w	r1, #4294967295
 800f2fa:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800f2fc:	f8d8 31cc 	ldr.w	r3, [r8, #460]	@ 0x1cc
 800f300:	2200      	movs	r2, #0
 800f302:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800f304:	f8c8 51b4 	str.w	r5, [r8, #436]	@ 0x1b4
  return TRUE;
 800f308:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f30a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800f30e:	e7c5      	b.n	800f29c <next_marker+0x18>

0800f310 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800f310:	f8d0 31b4 	ldr.w	r3, [r0, #436]	@ 0x1b4
{
 800f314:	b510      	push	{r4, lr}
 800f316:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800f318:	b1e3      	cbz	r3, 800f354 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800f31a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
  if (cinfo->unread_marker ==
 800f31e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	@ 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800f322:	6959      	ldr	r1, [r3, #20]
 800f324:	f101 03d0 	add.w	r3, r1, #208	@ 0xd0
  if (cinfo->unread_marker ==
 800f328:	429a      	cmp	r2, r3
 800f32a:	d119      	bne.n	800f360 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800f32c:	6823      	ldr	r3, [r4, #0]
 800f32e:	2264      	movs	r2, #100	@ 0x64
 800f330:	4620      	mov	r0, r4
 800f332:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	2103      	movs	r1, #3
 800f33a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800f33c:	2300      	movs	r3, #0
 800f33e:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800f342:	f8d4 21cc 	ldr.w	r2, [r4, #460]	@ 0x1cc

  return TRUE;
 800f346:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800f348:	6953      	ldr	r3, [r2, #20]
 800f34a:	3301      	adds	r3, #1
 800f34c:	f003 0307 	and.w	r3, r3, #7
 800f350:	6153      	str	r3, [r2, #20]
  return TRUE;
 800f352:	e004      	b.n	800f35e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800f354:	f7ff ff96 	bl	800f284 <next_marker>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d1de      	bne.n	800f31a <read_restart_marker+0xa>
      return FALSE;
 800f35c:	2000      	movs	r0, #0
}
 800f35e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800f360:	69a3      	ldr	r3, [r4, #24]
 800f362:	4620      	mov	r0, r4
 800f364:	695b      	ldr	r3, [r3, #20]
 800f366:	4798      	blx	r3
 800f368:	2800      	cmp	r0, #0
 800f36a:	d1ea      	bne.n	800f342 <read_restart_marker+0x32>
 800f36c:	e7f6      	b.n	800f35c <read_restart_marker+0x4c>

0800f36e <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800f36e:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800f370:	f8d0 21cc 	ldr.w	r2, [r0, #460]	@ 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800f374:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800f378:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800f37c:	f8c0 31b4 	str.w	r3, [r0, #436]	@ 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800f380:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800f382:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  marker->pub.saw_SOF = FALSE;
 800f386:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800f38a:	4770      	bx	lr

0800f38c <get_dht>:
{
 800f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800f390:	6987      	ldr	r7, [r0, #24]
{
 800f392:	b0c9      	sub	sp, #292	@ 0x124
 800f394:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800f396:	e9d7 4600 	ldrd	r4, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f39a:	b946      	cbnz	r6, 800f3ae <get_dht+0x22>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	4798      	blx	r3
 800f3a0:	b918      	cbnz	r0, 800f3aa <get_dht+0x1e>
 800f3a2:	2000      	movs	r0, #0
}
 800f3a4:	b049      	add	sp, #292	@ 0x124
 800f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f3aa:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f3ae:	f894 8000 	ldrb.w	r8, [r4]
 800f3b2:	3e01      	subs	r6, #1
 800f3b4:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800f3b8:	d018      	beq.n	800f3ec <get_dht+0x60>
 800f3ba:	3401      	adds	r4, #1
 800f3bc:	f814 9b01 	ldrb.w	r9, [r4], #1
 800f3c0:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800f3c2:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f3c6:	44c1      	add	r9, r8
  length -= 2;
 800f3c8:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800f3cc:	f1b9 0f10 	cmp.w	r9, #16
 800f3d0:	dc14      	bgt.n	800f3fc <get_dht+0x70>
  if (length != 0)
 800f3d2:	f1b9 0f00 	cmp.w	r9, #0
 800f3d6:	d005      	beq.n	800f3e4 <get_dht+0x58>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	220c      	movs	r2, #12
 800f3dc:	4628      	mov	r0, r5
 800f3de:	615a      	str	r2, [r3, #20]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4798      	blx	r3
  return TRUE;
 800f3e4:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f3e6:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800f3ea:	e7db      	b.n	800f3a4 <get_dht+0x18>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	4798      	blx	r3
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d0d5      	beq.n	800f3a2 <get_dht+0x16>
 800f3f6:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f3fa:	e7df      	b.n	800f3bc <get_dht+0x30>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f3fc:	b936      	cbnz	r6, 800f40c <get_dht+0x80>
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	4628      	mov	r0, r5
 800f402:	4790      	blx	r2
 800f404:	2800      	cmp	r0, #0
 800f406:	d0cc      	beq.n	800f3a2 <get_dht+0x16>
 800f408:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f40c:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800f410:	2152      	movs	r1, #82	@ 0x52
 800f412:	682a      	ldr	r2, [r5, #0]
 800f414:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800f416:	f8cd 8000 	str.w	r8, [sp]
 800f41a:	3e01      	subs	r6, #1
    count = 0;
 800f41c:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800f420:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800f424:	6852      	ldr	r2, [r2, #4]
 800f426:	2101      	movs	r1, #1
 800f428:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800f42a:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800f42c:	b946      	cbnz	r6, 800f440 <get_dht+0xb4>
 800f42e:	68f9      	ldr	r1, [r7, #12]
 800f430:	4628      	mov	r0, r5
 800f432:	9201      	str	r2, [sp, #4]
 800f434:	4788      	blx	r1
 800f436:	2800      	cmp	r0, #0
 800f438:	d0b3      	beq.n	800f3a2 <get_dht+0x16>
 800f43a:	9a01      	ldr	r2, [sp, #4]
 800f43c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f444:	3e01      	subs	r6, #1
 800f446:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800f44a:	3201      	adds	r2, #1
      count += bits[i];
 800f44c:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800f44e:	2a11      	cmp	r2, #17
 800f450:	d1ec      	bne.n	800f42c <get_dht+0xa0>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f452:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800f454:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f458:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800f45c:	f04f 0958 	mov.w	r9, #88	@ 0x58
 800f460:	4628      	mov	r0, r5
    length -= 1 + 16;
 800f462:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f464:	6191      	str	r1, [r2, #24]
 800f466:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800f46a:	f8c2 9014 	str.w	r9, [r2, #20]
 800f46e:	61d1      	str	r1, [r2, #28]
 800f470:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800f474:	6211      	str	r1, [r2, #32]
 800f476:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800f47a:	6251      	str	r1, [r2, #36]	@ 0x24
 800f47c:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800f480:	6291      	str	r1, [r2, #40]	@ 0x28
 800f482:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800f486:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800f488:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800f48c:	6311      	str	r1, [r2, #48]	@ 0x30
 800f48e:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800f492:	6351      	str	r1, [r2, #52]	@ 0x34
 800f494:	2102      	movs	r1, #2
 800f496:	6852      	ldr	r2, [r2, #4]
 800f498:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f49a:	682a      	ldr	r2, [r5, #0]
 800f49c:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f8c2 9014 	str.w	r9, [r2, #20]
 800f4a6:	6191      	str	r1, [r2, #24]
 800f4a8:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800f4ac:	61d1      	str	r1, [r2, #28]
 800f4ae:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800f4b2:	6211      	str	r1, [r2, #32]
 800f4b4:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800f4b8:	6251      	str	r1, [r2, #36]	@ 0x24
 800f4ba:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800f4be:	6291      	str	r1, [r2, #40]	@ 0x28
 800f4c0:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800f4c4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800f4c6:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800f4ca:	6311      	str	r1, [r2, #48]	@ 0x30
 800f4cc:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800f4d0:	6351      	str	r1, [r2, #52]	@ 0x34
 800f4d2:	2102      	movs	r1, #2
 800f4d4:	6852      	ldr	r2, [r2, #4]
 800f4d6:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800f4d8:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
 800f4dc:	dc02      	bgt.n	800f4e4 <get_dht+0x158>
 800f4de:	9b01      	ldr	r3, [sp, #4]
 800f4e0:	4553      	cmp	r3, sl
 800f4e2:	da05      	bge.n	800f4f0 <get_dht+0x164>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800f4e4:	682a      	ldr	r2, [r5, #0]
 800f4e6:	2109      	movs	r1, #9
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	6151      	str	r1, [r2, #20]
 800f4ec:	6812      	ldr	r2, [r2, #0]
 800f4ee:	4790      	blx	r2
 800f4f0:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800f4f4:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800f4f6:	45d1      	cmp	r9, sl
 800f4f8:	d13f      	bne.n	800f57a <get_dht+0x1ee>
    if (index & 0x10) {		/* AC table definition */
 800f4fa:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800f4fe:	9b01      	ldr	r3, [sp, #4]
 800f500:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800f504:	bf17      	itett	ne
 800f506:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800f50a:	f108 082d 	addeq.w	r8, r8, #45	@ 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800f50e:	f108 0821 	addne.w	r8, r8, #33	@ 0x21
      index -= 0x10;
 800f512:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800f514:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800f516:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	dd06      	ble.n	800f52c <get_dht+0x1a0>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800f51e:	682a      	ldr	r2, [r5, #0]
 800f520:	211f      	movs	r1, #31
 800f522:	4628      	mov	r0, r5
 800f524:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f528:	6812      	ldr	r2, [r2, #0]
 800f52a:	4790      	blx	r2
    if (*htblptr == NULL)
 800f52c:	f8d8 2000 	ldr.w	r2, [r8]
 800f530:	b922      	cbnz	r2, 800f53c <get_dht+0x1b0>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800f532:	4628      	mov	r0, r5
 800f534:	f7fb fc2a 	bl	800ad8c <jpeg_alloc_huff_table>
 800f538:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800f53c:	2200      	movs	r2, #0
 800f53e:	46de      	mov	lr, fp
 800f540:	f10d 0a1c 	add.w	sl, sp, #28
 800f544:	f88b 2000 	strb.w	r2, [fp]
 800f548:	f8d8 2000 	ldr.w	r2, [r8]
 800f54c:	46f4      	mov	ip, lr
 800f54e:	3208      	adds	r2, #8
 800f550:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800f554:	45d4      	cmp	ip, sl
 800f556:	f842 0c08 	str.w	r0, [r2, #-8]
 800f55a:	f842 1c04 	str.w	r1, [r2, #-4]
 800f55e:	46e6      	mov	lr, ip
 800f560:	d1f4      	bne.n	800f54c <get_dht+0x1c0>
 800f562:	f89c 1000 	ldrb.w	r1, [ip]
 800f566:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800f568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f56c:	f8d8 0000 	ldr.w	r0, [r8]
 800f570:	a908      	add	r1, sp, #32
 800f572:	3011      	adds	r0, #17
 800f574:	f01b fec9 	bl	802b30a <memcpy>
 800f578:	e728      	b.n	800f3cc <get_dht+0x40>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800f57a:	b946      	cbnz	r6, 800f58e <get_dht+0x202>
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	4628      	mov	r0, r5
 800f580:	4790      	blx	r2
 800f582:	2800      	cmp	r0, #0
 800f584:	f43f af0d 	beq.w	800f3a2 <get_dht+0x16>
 800f588:	a908      	add	r1, sp, #32
 800f58a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f58e:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f592:	3e01      	subs	r6, #1
 800f594:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800f598:	f109 0901 	add.w	r9, r9, #1
 800f59c:	e7ab      	b.n	800f4f6 <get_dht+0x16a>
	...

0800f5a0 <read_markers>:
{
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800f5a8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	@ 0x1b4
 800f5ac:	bb4b      	cbnz	r3, 800f602 <read_markers+0x62>
      if (! cinfo->marker->saw_SOI) {
 800f5ae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d179      	bne.n	800f6ac <read_markers+0x10c>
  INPUT_VARS(cinfo);
 800f5b8:	69a6      	ldr	r6, [r4, #24]
 800f5ba:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f5be:	b933      	cbnz	r3, 800f5ce <read_markers+0x2e>
 800f5c0:	68f3      	ldr	r3, [r6, #12]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	4798      	blx	r3
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d075      	beq.n	800f6b6 <read_markers+0x116>
 800f5ca:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f5ce:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f5d0:	782f      	ldrb	r7, [r5, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f5d2:	d064      	beq.n	800f69e <read_markers+0xfe>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f5d4:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800f5d6:	2fff      	cmp	r7, #255	@ 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f5d8:	f103 38ff 	add.w	r8, r3, #4294967295
 800f5dc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800f5e0:	d102      	bne.n	800f5e8 <read_markers+0x48>
 800f5e2:	f1b9 0fd8 	cmp.w	r9, #216	@ 0xd8
 800f5e6:	d008      	beq.n	800f5fa <read_markers+0x5a>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	2237      	movs	r2, #55	@ 0x37
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f8c3 901c 	str.w	r9, [r3, #28]
 800f5f2:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800f5fa:	f8c4 91b4 	str.w	r9, [r4, #436]	@ 0x1b4
  INPUT_SYNC(cinfo);
 800f5fe:	e9c6 5800 	strd	r5, r8, [r6]
    switch (cinfo->unread_marker) {
 800f602:	f8d4 31b4 	ldr.w	r3, [r4, #436]	@ 0x1b4
 800f606:	2b01      	cmp	r3, #1
 800f608:	f000 83b4 	beq.w	800fd74 <read_markers+0x7d4>
 800f60c:	f1a3 02c0 	sub.w	r2, r3, #192	@ 0xc0
 800f610:	2a3e      	cmp	r2, #62	@ 0x3e
 800f612:	f200 83bc 	bhi.w	800fd8e <read_markers+0x7ee>
 800f616:	2a3e      	cmp	r2, #62	@ 0x3e
 800f618:	f200 83b9 	bhi.w	800fd8e <read_markers+0x7ee>
 800f61c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f620:	0094008b 	.word	0x0094008b
 800f624:	00a00097 	.word	0x00a00097
 800f628:	00a00232 	.word	0x00a00232
 800f62c:	00a000a0 	.word	0x00a000a0
 800f630:	009b00a0 	.word	0x009b00a0
 800f634:	00a0009d 	.word	0x00a0009d
 800f638:	00a001b9 	.word	0x00a001b9
 800f63c:	00a000a0 	.word	0x00a000a0
 800f640:	03aa03aa 	.word	0x03aa03aa
 800f644:	03aa03aa 	.word	0x03aa03aa
 800f648:	03aa03aa 	.word	0x03aa03aa
 800f64c:	03aa03aa 	.word	0x03aa03aa
 800f650:	01ad004d 	.word	0x01ad004d
 800f654:	023600a8 	.word	0x023600a8
 800f658:	034c03b3 	.word	0x034c03b3
 800f65c:	03b703b7 	.word	0x03b703b7
 800f660:	039e039e 	.word	0x039e039e
 800f664:	039e039e 	.word	0x039e039e
 800f668:	039e039e 	.word	0x039e039e
 800f66c:	039e039e 	.word	0x039e039e
 800f670:	039e039e 	.word	0x039e039e
 800f674:	039e039e 	.word	0x039e039e
 800f678:	039e039e 	.word	0x039e039e
 800f67c:	039e039e 	.word	0x039e039e
 800f680:	03b703b7 	.word	0x03b703b7
 800f684:	03b703b7 	.word	0x03b703b7
 800f688:	03b703b7 	.word	0x03b703b7
 800f68c:	03b703b7 	.word	0x03b703b7
 800f690:	03b703b7 	.word	0x03b703b7
 800f694:	03b703b7 	.word	0x03b703b7
 800f698:	03b703b7 	.word	0x03b703b7
 800f69c:	03a6      	.short	0x03a6
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f69e:	68f3      	ldr	r3, [r6, #12]
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	4798      	blx	r3
 800f6a4:	b138      	cbz	r0, 800f6b6 <read_markers+0x116>
 800f6a6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f6aa:	e794      	b.n	800f5d6 <read_markers+0x36>
	if (! next_marker(cinfo))
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f7ff fde9 	bl	800f284 <next_marker>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d1a5      	bne.n	800f602 <read_markers+0x62>
	  return JPEG_SUSPENDED;
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	e0ea      	b.n	800f890 <read_markers+0x2f0>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	2268      	movs	r2, #104	@ 0x68
 800f6be:	2101      	movs	r1, #1
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	615a      	str	r2, [r3, #20]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800f6c8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	b12b      	cbz	r3, 800f6dc <read_markers+0x13c>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800f6d0:	6823      	ldr	r3, [r4, #0]
 800f6d2:	223f      	movs	r2, #63	@ 0x3f
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	615a      	str	r2, [r3, #20]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800f6dc:	2210      	movs	r2, #16
 800f6de:	2100      	movs	r1, #0
 800f6e0:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800f6e4:	f01b fd30 	bl	802b148 <memset>
    cinfo->arith_dc_U[i] = 1;
 800f6e8:	2210      	movs	r2, #16
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 800f6f0:	f01b fd2a 	bl	802b148 <memset>
    cinfo->arith_ac_K[i] = 5;
 800f6f4:	2210      	movs	r2, #16
 800f6f6:	2105      	movs	r1, #5
 800f6f8:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 800f6fc:	f01b fd24 	bl	802b148 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800f700:	f240 1201 	movw	r2, #257	@ 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800f704:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800f706:	f8a4 2120 	strh.w	r2, [r4, #288]	@ 0x120
  cinfo->X_density = 1;
 800f70a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800f70e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800f712:	f8c4 3130 	str.w	r3, [r4, #304]	@ 0x130
  cinfo->density_unit = 0;
 800f716:	f884 3122 	strb.w	r3, [r4, #290]	@ 0x122
  cinfo->Adobe_transform = 0;
 800f71a:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800f71e:	e9c4 2349 	strd	r2, r3, [r4, #292]	@ 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800f722:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
  cinfo->marker->saw_SOI = TRUE;
 800f726:	2201      	movs	r2, #1
 800f728:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f72c:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
    if (cinfo->unread_marker == 0) {
 800f734:	e738      	b.n	800f5a8 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800f736:	2300      	movs	r3, #0
 800f738:	2101      	movs	r1, #1
 800f73a:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f73c:	4620      	mov	r0, r4
 800f73e:	f7ff faf3 	bl	800ed28 <get_sof>
      if (! skip_variable(cinfo))
 800f742:	2800      	cmp	r0, #0
 800f744:	d1f3      	bne.n	800f72e <read_markers+0x18e>
 800f746:	e7b6      	b.n	800f6b6 <read_markers+0x116>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800f748:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f74a:	2200      	movs	r2, #0
 800f74c:	e001      	b.n	800f752 <read_markers+0x1b2>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800f74e:	2300      	movs	r3, #0
 800f750:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f752:	2100      	movs	r1, #0
 800f754:	e7f2      	b.n	800f73c <read_markers+0x19c>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f756:	2301      	movs	r3, #1
 800f758:	e7f7      	b.n	800f74a <read_markers+0x1aa>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f75a:	2301      	movs	r3, #1
 800f75c:	461a      	mov	r2, r3
 800f75e:	e7f8      	b.n	800f752 <read_markers+0x1b2>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800f760:	6822      	ldr	r2, [r4, #0]
 800f762:	213e      	movs	r1, #62	@ 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f764:	4620      	mov	r0, r4
 800f766:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f76a:	6813      	ldr	r3, [r2, #0]
 800f76c:	4798      	blx	r3
      break;
 800f76e:	e7de      	b.n	800f72e <read_markers+0x18e>
  if (! cinfo->marker->saw_SOF)
 800f770:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
  INPUT_VARS(cinfo);
 800f774:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800f776:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800f778:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800f77c:	b92b      	cbnz	r3, 800f78a <read_markers+0x1ea>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	2240      	movs	r2, #64	@ 0x40
 800f782:	4620      	mov	r0, r4
 800f784:	615a      	str	r2, [r3, #20]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f78a:	b936      	cbnz	r6, 800f79a <read_markers+0x1fa>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	4620      	mov	r0, r4
 800f790:	4798      	blx	r3
 800f792:	2800      	cmp	r0, #0
 800f794:	d08f      	beq.n	800f6b6 <read_markers+0x116>
 800f796:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f79a:	f895 9000 	ldrb.w	r9, [r5]
 800f79e:	3e01      	subs	r6, #1
 800f7a0:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f7a4:	d077      	beq.n	800f896 <read_markers+0x2f6>
 800f7a6:	3501      	adds	r5, #1
 800f7a8:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f7ac:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f7ae:	44c8      	add	r8, r9
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f7b0:	d07a      	beq.n	800f8a8 <read_markers+0x308>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f7b2:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f7b4:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800f7b8:	2269      	movs	r2, #105	@ 0x69
 800f7ba:	6823      	ldr	r3, [r4, #0]
 800f7bc:	2101      	movs	r1, #1
 800f7be:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f7c0:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800f7c2:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800f7ca:	f109 0303 	add.w	r3, r9, #3
 800f7ce:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800f7d2:	d108      	bne.n	800f7e6 <read_markers+0x246>
 800f7d4:	f1b9 0f04 	cmp.w	r9, #4
 800f7d8:	dc05      	bgt.n	800f7e6 <read_markers+0x246>
 800f7da:	f1b9 0f00 	cmp.w	r9, #0
 800f7de:	d108      	bne.n	800f7f2 <read_markers+0x252>
      (n == 0 && !cinfo->progressive_mode))
 800f7e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800f7e4:	b92b      	cbnz	r3, 800f7f2 <read_markers+0x252>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	220c      	movs	r2, #12
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	615a      	str	r2, [r3, #20]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800f7f2:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
  for (i = 0; i < n; i++) {
 800f7f6:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800f7fa:	f8c4 9150 	str.w	r9, [r4, #336]	@ 0x150
  for (i = 0; i < n; i++) {
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	45d1      	cmp	r9, sl
 800f802:	dc5a      	bgt.n	800f8ba <read_markers+0x31a>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f804:	b93e      	cbnz	r6, 800f816 <read_markers+0x276>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	4620      	mov	r0, r4
 800f80a:	4798      	blx	r3
 800f80c:	2800      	cmp	r0, #0
 800f80e:	f43f af52 	beq.w	800f6b6 <read_markers+0x116>
 800f812:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f816:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f818:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f81a:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800f81e:	f000 809a 	beq.w	800f956 <read_markers+0x3b6>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f822:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f824:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f826:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f828:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800f82c:	f000 809c 	beq.w	800f968 <read_markers+0x3c8>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f830:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f832:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800f836:	2101      	movs	r1, #1
 800f838:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800f83a:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800f83c:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800f83e:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800f842:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
  cinfo->Al = (c     ) & 15;
 800f846:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800f84a:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	619a      	str	r2, [r3, #24]
 800f852:	f8d4 219c 	ldr.w	r2, [r4, #412]	@ 0x19c
 800f856:	61da      	str	r2, [r3, #28]
 800f858:	f8d4 21a0 	ldr.w	r2, [r4, #416]	@ 0x1a0
 800f85c:	621a      	str	r2, [r3, #32]
 800f85e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	@ 0x1a4
 800f862:	625a      	str	r2, [r3, #36]	@ 0x24
 800f864:	226b      	movs	r2, #107	@ 0x6b
 800f866:	615a      	str	r2, [r3, #20]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800f86c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f870:	2200      	movs	r2, #0
 800f872:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800f874:	f1b9 0f00 	cmp.w	r9, #0
 800f878:	d004      	beq.n	800f884 <read_markers+0x2e4>
 800f87a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800f87e:	3301      	adds	r3, #1
 800f880:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800f884:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800f886:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f888:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800f88c:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
}
 800f890:	b005      	add	sp, #20
 800f892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4620      	mov	r0, r4
 800f89a:	4798      	blx	r3
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f43f af0a 	beq.w	800f6b6 <read_markers+0x116>
 800f8a2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f8a6:	e77f      	b.n	800f7a8 <read_markers+0x208>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4798      	blx	r3
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f43f af01 	beq.w	800f6b6 <read_markers+0x116>
 800f8b4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f8b8:	e77c      	b.n	800f7b4 <read_markers+0x214>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f8ba:	b93e      	cbnz	r6, 800f8cc <read_markers+0x32c>
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	4620      	mov	r0, r4
 800f8c0:	4798      	blx	r3
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	f43f aef7 	beq.w	800f6b6 <read_markers+0x116>
 800f8c8:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f8cc:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f8ce:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f8d2:	d02f      	beq.n	800f934 <read_markers+0x394>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f8d4:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800f8d6:	3e01      	subs	r6, #1
 800f8d8:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f8dc:	f8d4 80d8 	ldr.w	r8, [r4, #216]	@ 0xd8
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f8e4:	4290      	cmp	r0, r2
 800f8e6:	db2e      	blt.n	800f946 <read_markers+0x3a6>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800f8e8:	6821      	ldr	r1, [r4, #0]
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	9302      	str	r3, [sp, #8]
 800f8ee:	2304      	movs	r3, #4
 800f8f0:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800f8f4:	6809      	ldr	r1, [r1, #0]
 800f8f6:	4788      	blx	r1
 800f8f8:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800f8fa:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800f8fc:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800f8fe:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f902:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800f904:	f842 8f04 	str.w	r8, [r2, #4]!
  for (i = 0; i < n; i++) {
 800f908:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800f90c:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f910:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800f912:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f916:	f8c1 b018 	str.w	fp, [r1, #24]
 800f91a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800f91e:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f920:	61cb      	str	r3, [r1, #28]
 800f922:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f926:	620b      	str	r3, [r1, #32]
 800f928:	236a      	movs	r3, #106	@ 0x6a
 800f92a:	614b      	str	r3, [r1, #20]
 800f92c:	684b      	ldr	r3, [r1, #4]
 800f92e:	2101      	movs	r1, #1
 800f930:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800f932:	e765      	b.n	800f800 <read_markers+0x260>
    INPUT_BYTE(cinfo, c, return FALSE);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	4620      	mov	r0, r4
 800f938:	4798      	blx	r3
 800f93a:	2800      	cmp	r0, #0
 800f93c:	f43f aebb 	beq.w	800f6b6 <read_markers+0x116>
 800f940:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f944:	e7c7      	b.n	800f8d6 <read_markers+0x336>
      if (cc == compptr->component_id)
 800f946:	f8d8 1000 	ldr.w	r1, [r8]
 800f94a:	458b      	cmp	fp, r1
 800f94c:	d0d5      	beq.n	800f8fa <read_markers+0x35a>
	 ci++, compptr++) {
 800f94e:	3001      	adds	r0, #1
 800f950:	f108 0858 	add.w	r8, r8, #88	@ 0x58
 800f954:	e7c6      	b.n	800f8e4 <read_markers+0x344>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	4620      	mov	r0, r4
 800f95a:	4798      	blx	r3
 800f95c:	2800      	cmp	r0, #0
 800f95e:	f43f aeaa 	beq.w	800f6b6 <read_markers+0x116>
 800f962:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f966:	e75d      	b.n	800f824 <read_markers+0x284>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	4620      	mov	r0, r4
 800f96c:	4798      	blx	r3
 800f96e:	2800      	cmp	r0, #0
 800f970:	f43f aea1 	beq.w	800f6b6 <read_markers+0x116>
 800f974:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f978:	e75b      	b.n	800f832 <read_markers+0x292>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	2257      	movs	r2, #87	@ 0x57
 800f97e:	4620      	mov	r0, r4
 800f980:	2101      	movs	r1, #1
 800f982:	615a      	str	r2, [r3, #20]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800f988:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800f98a:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800f98c:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
      return JPEG_REACHED_EOI;
 800f990:	e77e      	b.n	800f890 <read_markers+0x2f0>
  INPUT_VARS(cinfo);
 800f992:	69a7      	ldr	r7, [r4, #24]
 800f994:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f998:	b93e      	cbnz	r6, 800f9aa <read_markers+0x40a>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	4620      	mov	r0, r4
 800f99e:	4798      	blx	r3
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f43f ae88 	beq.w	800f6b6 <read_markers+0x116>
 800f9a6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f9aa:	f895 9000 	ldrb.w	r9, [r5]
 800f9ae:	3e01      	subs	r6, #1
 800f9b0:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f9b4:	d013      	beq.n	800f9de <read_markers+0x43e>
 800f9b6:	3501      	adds	r5, #1
 800f9b8:	f815 8b01 	ldrb.w	r8, [r5], #1
 800f9bc:	3e01      	subs	r6, #1
 800f9be:	44c8      	add	r8, r9
  length -= 2;
 800f9c0:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800f9c4:	f1b8 0f00 	cmp.w	r8, #0
 800f9c8:	dc12      	bgt.n	800f9f0 <read_markers+0x450>
  if (length != 0)
 800f9ca:	d005      	beq.n	800f9d8 <read_markers+0x438>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f9cc:	6823      	ldr	r3, [r4, #0]
 800f9ce:	220c      	movs	r2, #12
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	615a      	str	r2, [r3, #20]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800f9d8:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800f9da:	607e      	str	r6, [r7, #4]
  return TRUE;
 800f9dc:	e6a7      	b.n	800f72e <read_markers+0x18e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	4798      	blx	r3
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	f43f ae66 	beq.w	800f6b6 <read_markers+0x116>
 800f9ea:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f9ee:	e7e3      	b.n	800f9b8 <read_markers+0x418>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f9f0:	b93e      	cbnz	r6, 800fa02 <read_markers+0x462>
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	4798      	blx	r3
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	f43f ae5c 	beq.w	800f6b6 <read_markers+0x116>
 800f9fe:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800fa02:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800fa04:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800fa08:	d01e      	beq.n	800fa48 <read_markers+0x4a8>
    INPUT_BYTE(cinfo, index, return FALSE);
 800fa0a:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800fa0c:	6822      	ldr	r2, [r4, #0]
 800fa0e:	2351      	movs	r3, #81	@ 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800fa10:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800fa14:	2101      	movs	r1, #1
 800fa16:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800fa18:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800fa1a:	f8c2 901c 	str.w	r9, [r2, #28]
    length -= 2;
 800fa1e:	f1a8 0802 	sub.w	r8, r8, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800fa22:	eb04 0a0b 	add.w	sl, r4, fp
 800fa26:	e9c2 3b05 	strd	r3, fp, [r2, #20]
 800fa2a:	6852      	ldr	r2, [r2, #4]
 800fa2c:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800fa2e:	f1bb 0f1f 	cmp.w	fp, #31
 800fa32:	d912      	bls.n	800fa5a <read_markers+0x4ba>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800fa34:	6821      	ldr	r1, [r4, #0]
 800fa36:	231d      	movs	r3, #29
 800fa38:	4620      	mov	r0, r4
 800fa3a:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800fa3e:	680b      	ldr	r3, [r1, #0]
 800fa40:	4798      	blx	r3
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800fa42:	f88a 90f8 	strb.w	r9, [sl, #248]	@ 0xf8
 800fa46:	e7bd      	b.n	800f9c4 <read_markers+0x424>
    INPUT_BYTE(cinfo, val, return FALSE);
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	4790      	blx	r2
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	f43f ae31 	beq.w	800f6b6 <read_markers+0x116>
 800fa54:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fa58:	e7d8      	b.n	800fa0c <read_markers+0x46c>
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800fa5a:	f1bb 0f0f 	cmp.w	fp, #15
 800fa5e:	dcf0      	bgt.n	800fa42 <read_markers+0x4a2>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800fa60:	f009 010f 	and.w	r1, r9, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800fa64:	ea4f 1319 	mov.w	r3, r9, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800fa68:	4299      	cmp	r1, r3
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800fa6a:	f88a 10e8 	strb.w	r1, [sl, #232]	@ 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800fa6e:	f88a 30f8 	strb.w	r3, [sl, #248]	@ 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800fa72:	d9a7      	bls.n	800f9c4 <read_markers+0x424>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	221e      	movs	r2, #30
 800fa78:	4620      	mov	r0, r4
 800fa7a:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4798      	blx	r3
 800fa82:	e79f      	b.n	800f9c4 <read_markers+0x424>
      if (! get_dht(cinfo))
 800fa84:	4620      	mov	r0, r4
 800fa86:	f7ff fc81 	bl	800f38c <get_dht>
 800fa8a:	e65a      	b.n	800f742 <read_markers+0x1a2>
  INPUT_VARS(cinfo);
 800fa8c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800fa90:	e9d8 5700 	ldrd	r5, r7, [r8]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fa94:	b947      	cbnz	r7, 800faa8 <read_markers+0x508>
 800fa96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	4798      	blx	r3
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	f43f ae09 	beq.w	800f6b6 <read_markers+0x116>
 800faa4:	e9d8 5700 	ldrd	r5, r7, [r8]
 800faa8:	782e      	ldrb	r6, [r5, #0]
 800faaa:	3f01      	subs	r7, #1
 800faac:	ea4f 2606 	mov.w	r6, r6, lsl #8
 800fab0:	d013      	beq.n	800fada <read_markers+0x53a>
 800fab2:	3501      	adds	r5, #1
 800fab4:	f815 9b01 	ldrb.w	r9, [r5], #1
 800fab8:	3f01      	subs	r7, #1
 800faba:	44b1      	add	r9, r6
  length -= 2;
 800fabc:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800fac0:	f1b9 0f00 	cmp.w	r9, #0
 800fac4:	dc13      	bgt.n	800faee <read_markers+0x54e>
  if (length != 0)
 800fac6:	d005      	beq.n	800fad4 <read_markers+0x534>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	220c      	movs	r2, #12
 800facc:	4620      	mov	r0, r4
 800face:	615a      	str	r2, [r3, #20]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800fad4:	e9c8 5700 	strd	r5, r7, [r8]
  return TRUE;
 800fad8:	e629      	b.n	800f72e <read_markers+0x18e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fade:	4620      	mov	r0, r4
 800fae0:	4798      	blx	r3
 800fae2:	2800      	cmp	r0, #0
 800fae4:	f43f ade7 	beq.w	800f6b6 <read_markers+0x116>
 800fae8:	e9d8 5700 	ldrd	r5, r7, [r8]
 800faec:	e7e2      	b.n	800fab4 <read_markers+0x514>
    length--;
 800faee:	f109 39ff 	add.w	r9, r9, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800faf2:	b947      	cbnz	r7, 800fb06 <read_markers+0x566>
 800faf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800faf8:	4620      	mov	r0, r4
 800fafa:	4798      	blx	r3
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f43f adda 	beq.w	800f6b6 <read_markers+0x116>
 800fb02:	e9d8 5700 	ldrd	r5, r7, [r8]
 800fb06:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800fb0a:	2253      	movs	r2, #83	@ 0x53
 800fb0c:	2101      	movs	r1, #1
 800fb0e:	4620      	mov	r0, r4
    prec = n >> 4;
 800fb10:	ea4f 132a 	mov.w	r3, sl, asr #4
 800fb14:	f00a 060f 	and.w	r6, sl, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800fb18:	3f01      	subs	r7, #1
    prec = n >> 4;
 800fb1a:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800fb22:	9a01      	ldr	r2, [sp, #4]
 800fb24:	61da      	str	r2, [r3, #28]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	4798      	blx	r3
    if (n >= NUM_QUANT_TBLS)
 800fb2a:	f01a 0f0c 	tst.w	sl, #12
 800fb2e:	d006      	beq.n	800fb3e <read_markers+0x59e>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800fb30:	6823      	ldr	r3, [r4, #0]
 800fb32:	2220      	movs	r2, #32
 800fb34:	4620      	mov	r0, r4
 800fb36:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4798      	blx	r3
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800fb3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800fb42:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 800fb46:	b923      	cbnz	r3, 800fb52 <read_markers+0x5b2>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f7fb f915 	bl	800ad78 <jpeg_alloc_quant_table>
 800fb4e:	f8c6 00a4 	str.w	r0, [r6, #164]	@ 0xa4
    if (prec) {
 800fb52:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800fb54:	f8d6 60a4 	ldr.w	r6, [r6, #164]	@ 0xa4
    if (prec) {
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d055      	beq.n	800fc08 <read_markers+0x668>
      if (length < DCTSIZE2 * 2) {
 800fb5c:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800fb60:	dc69      	bgt.n	800fc36 <read_markers+0x696>
 800fb62:	1eb3      	subs	r3, r6, #2
 800fb64:	f106 027e 	add.w	r2, r6, #126	@ 0x7e
	  quant_ptr->quantval[i] = 1;
 800fb68:	2101      	movs	r1, #1
 800fb6a:	f823 1f02 	strh.w	r1, [r3, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d1fb      	bne.n	800fb6a <read_markers+0x5ca>
	count = length >> 1;
 800fb72:	ea4f 0b69 	mov.w	fp, r9, asr #1
    switch (count) {
 800fb76:	f1bb 0f19 	cmp.w	fp, #25
 800fb7a:	d060      	beq.n	800fc3e <read_markers+0x69e>
 800fb7c:	dc51      	bgt.n	800fc22 <read_markers+0x682>
 800fb7e:	f1bb 0f09 	cmp.w	fp, #9
 800fb82:	d05e      	beq.n	800fc42 <read_markers+0x6a2>
 800fb84:	f1bb 0f10 	cmp.w	fp, #16
 800fb88:	d05d      	beq.n	800fc46 <read_markers+0x6a6>
    default:    natural_order = jpeg_natural_order;  break;
 800fb8a:	4b82      	ldr	r3, [pc, #520]	@ (800fd94 <read_markers+0x7f4>)
 800fb8c:	4a82      	ldr	r2, [pc, #520]	@ (800fd98 <read_markers+0x7f8>)
 800fb8e:	f1bb 0f04 	cmp.w	fp, #4
 800fb92:	bf18      	it	ne
 800fb94:	4613      	movne	r3, r2
    for (i = 0; i < count; i++) {
 800fb96:	469a      	mov	sl, r3
 800fb98:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 800fb9c:	9302      	str	r3, [sp, #8]
 800fb9e:	9b02      	ldr	r3, [sp, #8]
 800fba0:	4553      	cmp	r3, sl
 800fba2:	d154      	bne.n	800fc4e <read_markers+0x6ae>
    if (cinfo->err->trace_level >= 2) {
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	dd24      	ble.n	800fbf6 <read_markers+0x656>
 800fbac:	f106 0a80 	add.w	sl, r6, #128	@ 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800fbb0:	225f      	movs	r2, #95	@ 0x5f
 800fbb2:	8831      	ldrh	r1, [r6, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800fbb4:	3610      	adds	r6, #16
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	4620      	mov	r0, r4
 800fbba:	6199      	str	r1, [r3, #24]
 800fbbc:	f836 1c0e 	ldrh.w	r1, [r6, #-14]
 800fbc0:	61d9      	str	r1, [r3, #28]
 800fbc2:	f836 1c0c 	ldrh.w	r1, [r6, #-12]
 800fbc6:	6219      	str	r1, [r3, #32]
 800fbc8:	f836 1c0a 	ldrh.w	r1, [r6, #-10]
 800fbcc:	6259      	str	r1, [r3, #36]	@ 0x24
 800fbce:	f836 1c08 	ldrh.w	r1, [r6, #-8]
 800fbd2:	6299      	str	r1, [r3, #40]	@ 0x28
 800fbd4:	f836 1c06 	ldrh.w	r1, [r6, #-6]
 800fbd8:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800fbda:	f836 1c04 	ldrh.w	r1, [r6, #-4]
 800fbde:	6319      	str	r1, [r3, #48]	@ 0x30
 800fbe0:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 800fbe4:	615a      	str	r2, [r3, #20]
 800fbe6:	6359      	str	r1, [r3, #52]	@ 0x34
 800fbe8:	2102      	movs	r1, #2
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	4798      	blx	r3
      for (i = 0; i < DCTSIZE2; i += 8) {
 800fbee:	4556      	cmp	r6, sl
 800fbf0:	f04f 025f 	mov.w	r2, #95	@ 0x5f
 800fbf4:	d1dd      	bne.n	800fbb2 <read_markers+0x612>
    if (prec) length -= count;
 800fbf6:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800fbf8:	eba9 090b 	sub.w	r9, r9, fp
    if (prec) length -= count;
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f43f af5f 	beq.w	800fac0 <read_markers+0x520>
 800fc02:	eba9 090b 	sub.w	r9, r9, fp
 800fc06:	e75b      	b.n	800fac0 <read_markers+0x520>
      if (length < DCTSIZE2) {
 800fc08:	f1b9 0f3f 	cmp.w	r9, #63	@ 0x3f
 800fc0c:	dc13      	bgt.n	800fc36 <read_markers+0x696>
 800fc0e:	1eb3      	subs	r3, r6, #2
 800fc10:	f106 027e 	add.w	r2, r6, #126	@ 0x7e
	  quant_ptr->quantval[i] = 1;
 800fc14:	2101      	movs	r1, #1
 800fc16:	f823 1f02 	strh.w	r1, [r3, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d1fb      	bne.n	800fc16 <read_markers+0x676>
 800fc1e:	46cb      	mov	fp, r9
 800fc20:	e7a9      	b.n	800fb76 <read_markers+0x5d6>
    switch (count) {
 800fc22:	f1bb 0f24 	cmp.w	fp, #36	@ 0x24
 800fc26:	d010      	beq.n	800fc4a <read_markers+0x6aa>
    default:    natural_order = jpeg_natural_order;  break;
 800fc28:	4b5c      	ldr	r3, [pc, #368]	@ (800fd9c <read_markers+0x7fc>)
 800fc2a:	4a5b      	ldr	r2, [pc, #364]	@ (800fd98 <read_markers+0x7f8>)
 800fc2c:	f1bb 0f31 	cmp.w	fp, #49	@ 0x31
 800fc30:	bf18      	it	ne
 800fc32:	4613      	movne	r3, r2
 800fc34:	e7af      	b.n	800fb96 <read_markers+0x5f6>
	count = DCTSIZE2;
 800fc36:	f04f 0b40 	mov.w	fp, #64	@ 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800fc3a:	4b57      	ldr	r3, [pc, #348]	@ (800fd98 <read_markers+0x7f8>)
 800fc3c:	e7ab      	b.n	800fb96 <read_markers+0x5f6>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800fc3e:	4b58      	ldr	r3, [pc, #352]	@ (800fda0 <read_markers+0x800>)
 800fc40:	e7a9      	b.n	800fb96 <read_markers+0x5f6>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800fc42:	4b58      	ldr	r3, [pc, #352]	@ (800fda4 <read_markers+0x804>)
 800fc44:	e7a7      	b.n	800fb96 <read_markers+0x5f6>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800fc46:	4b58      	ldr	r3, [pc, #352]	@ (800fda8 <read_markers+0x808>)
 800fc48:	e7a5      	b.n	800fb96 <read_markers+0x5f6>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800fc4a:	4b58      	ldr	r3, [pc, #352]	@ (800fdac <read_markers+0x80c>)
 800fc4c:	e7a3      	b.n	800fb96 <read_markers+0x5f6>
      if (prec)
 800fc4e:	9b01      	ldr	r3, [sp, #4]
 800fc50:	b323      	cbz	r3, 800fc9c <read_markers+0x6fc>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fc52:	b947      	cbnz	r7, 800fc66 <read_markers+0x6c6>
 800fc54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4798      	blx	r3
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	f43f ad2a 	beq.w	800f6b6 <read_markers+0x116>
 800fc62:	e9d8 5700 	ldrd	r5, r7, [r8]
 800fc66:	782a      	ldrb	r2, [r5, #0]
 800fc68:	3f01      	subs	r7, #1
 800fc6a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800fc6e:	d009      	beq.n	800fc84 <read_markers+0x6e4>
 800fc70:	3501      	adds	r5, #1
 800fc72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc76:	3f01      	subs	r7, #1
 800fc78:	4413      	add	r3, r2
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800fc7a:	f85a 2b04 	ldr.w	r2, [sl], #4
 800fc7e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
    for (i = 0; i < count; i++) {
 800fc82:	e78c      	b.n	800fb9e <read_markers+0x5fe>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fc84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc88:	4620      	mov	r0, r4
 800fc8a:	9203      	str	r2, [sp, #12]
 800fc8c:	4798      	blx	r3
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	f43f ad11 	beq.w	800f6b6 <read_markers+0x116>
 800fc94:	9a03      	ldr	r2, [sp, #12]
 800fc96:	e9d8 5700 	ldrd	r5, r7, [r8]
 800fc9a:	e7ea      	b.n	800fc72 <read_markers+0x6d2>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800fc9c:	b947      	cbnz	r7, 800fcb0 <read_markers+0x710>
 800fc9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fca2:	4620      	mov	r0, r4
 800fca4:	4798      	blx	r3
 800fca6:	2800      	cmp	r0, #0
 800fca8:	f43f ad05 	beq.w	800f6b6 <read_markers+0x116>
 800fcac:	e9d8 5700 	ldrd	r5, r7, [r8]
 800fcb0:	3f01      	subs	r7, #1
 800fcb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fcb6:	e7e0      	b.n	800fc7a <read_markers+0x6da>
  INPUT_VARS(cinfo);
 800fcb8:	69a7      	ldr	r7, [r4, #24]
 800fcba:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fcbe:	b93e      	cbnz	r6, 800fcd0 <read_markers+0x730>
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	4798      	blx	r3
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f43f acf5 	beq.w	800f6b6 <read_markers+0x116>
 800fccc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fcd0:	f895 8000 	ldrb.w	r8, [r5]
 800fcd4:	3e01      	subs	r6, #1
 800fcd6:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800fcda:	d024      	beq.n	800fd26 <read_markers+0x786>
 800fcdc:	3501      	adds	r5, #1
 800fcde:	782b      	ldrb	r3, [r5, #0]
 800fce0:	3e01      	subs	r6, #1
 800fce2:	4443      	add	r3, r8
  if (length != 4)
 800fce4:	2b04      	cmp	r3, #4
 800fce6:	d005      	beq.n	800fcf4 <read_markers+0x754>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800fce8:	6823      	ldr	r3, [r4, #0]
 800fcea:	220c      	movs	r2, #12
 800fcec:	4620      	mov	r0, r4
 800fcee:	615a      	str	r2, [r3, #20]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fcf4:	b306      	cbz	r6, 800fd38 <read_markers+0x798>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fcf6:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fcf8:	f895 9000 	ldrb.w	r9, [r5]
 800fcfc:	3e01      	subs	r6, #1
 800fcfe:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800fd02:	d022      	beq.n	800fd4a <read_markers+0x7aa>
 800fd04:	3501      	adds	r5, #1
 800fd06:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800fd0a:	2254      	movs	r2, #84	@ 0x54
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fd10:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800fd12:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fd14:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800fd16:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800fd1e:	f8c4 8118 	str.w	r8, [r4, #280]	@ 0x118
  INPUT_SYNC(cinfo);
 800fd22:	603d      	str	r5, [r7, #0]
 800fd24:	e659      	b.n	800f9da <read_markers+0x43a>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4620      	mov	r0, r4
 800fd2a:	4798      	blx	r3
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f43f acc2 	beq.w	800f6b6 <read_markers+0x116>
 800fd32:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fd36:	e7d2      	b.n	800fcde <read_markers+0x73e>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	4798      	blx	r3
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f43f acb9 	beq.w	800f6b6 <read_markers+0x116>
 800fd44:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fd48:	e7d6      	b.n	800fcf8 <read_markers+0x758>
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	4798      	blx	r3
 800fd50:	2800      	cmp	r0, #0
 800fd52:	f43f acb0 	beq.w	800f6b6 <read_markers+0x116>
 800fd56:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fd5a:	e7d4      	b.n	800fd06 <read_markers+0x766>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800fd5c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	@ 0x1cc
 800fd60:	3bd8      	subs	r3, #216	@ 0xd8
 800fd62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800fd66:	4620      	mov	r0, r4
 800fd68:	4798      	blx	r3
 800fd6a:	e4ea      	b.n	800f742 <read_markers+0x1a2>
 800fd6c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800fd70:	69db      	ldr	r3, [r3, #28]
 800fd72:	e7f8      	b.n	800fd66 <read_markers+0x7c6>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800fd74:	6822      	ldr	r2, [r4, #0]
 800fd76:	215e      	movs	r1, #94	@ 0x5e
 800fd78:	4620      	mov	r0, r4
 800fd7a:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800fd7e:	6853      	ldr	r3, [r2, #4]
 800fd80:	2101      	movs	r1, #1
 800fd82:	4798      	blx	r3
      break;
 800fd84:	e4d3      	b.n	800f72e <read_markers+0x18e>
      if (! skip_variable(cinfo))
 800fd86:	4620      	mov	r0, r4
 800fd88:	f7ff fa40 	bl	800f20c <skip_variable>
 800fd8c:	e4d9      	b.n	800f742 <read_markers+0x1a2>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800fd8e:	6822      	ldr	r2, [r4, #0]
 800fd90:	2146      	movs	r1, #70	@ 0x46
 800fd92:	e4e7      	b.n	800f764 <read_markers+0x1c4>
 800fd94:	08030098 	.word	0x08030098
 800fd98:	08030444 	.word	0x08030444
 800fd9c:	08030340 	.word	0x08030340
 800fda0:	080301cc 	.word	0x080301cc
 800fda4:	080300e8 	.word	0x080300e8
 800fda8:	0803014c 	.word	0x0803014c
 800fdac:	08030270 	.word	0x08030270

0800fdb0 <jpeg_resync_to_restart>:
{
 800fdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fdb4:	6803      	ldr	r3, [r0, #0]
 800fdb6:	227c      	movs	r2, #124	@ 0x7c
  int marker = cinfo->unread_marker;
 800fdb8:	f8d0 51b4 	ldr.w	r5, [r0, #436]	@ 0x1b4
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800fdbc:	f04f 0863 	mov.w	r8, #99	@ 0x63
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fdc0:	61d9      	str	r1, [r3, #28]
{
 800fdc2:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fdc4:	f04f 31ff 	mov.w	r1, #4294967295
{
 800fdc8:	4606      	mov	r6, r0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fdca:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800fdd2:	2dbf      	cmp	r5, #191	@ 0xbf
 800fdd4:	dd31      	ble.n	800fe3a <jpeg_resync_to_restart+0x8a>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800fdd6:	f1a5 03d0 	sub.w	r3, r5, #208	@ 0xd0
 800fdda:	2b07      	cmp	r3, #7
 800fddc:	d82b      	bhi.n	800fe36 <jpeg_resync_to_restart+0x86>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800fdde:	1c7b      	adds	r3, r7, #1
 800fde0:	f003 0307 	and.w	r3, r3, #7
 800fde4:	33d0      	adds	r3, #208	@ 0xd0
 800fde6:	429d      	cmp	r5, r3
 800fde8:	d025      	beq.n	800fe36 <jpeg_resync_to_restart+0x86>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800fdea:	1cbb      	adds	r3, r7, #2
 800fdec:	f003 0307 	and.w	r3, r3, #7
 800fdf0:	33d0      	adds	r3, #208	@ 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800fdf2:	429d      	cmp	r5, r3
 800fdf4:	d01f      	beq.n	800fe36 <jpeg_resync_to_restart+0x86>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800fdf6:	1e7b      	subs	r3, r7, #1
 800fdf8:	f003 0307 	and.w	r3, r3, #7
 800fdfc:	33d0      	adds	r3, #208	@ 0xd0
 800fdfe:	429d      	cmp	r5, r3
 800fe00:	d01b      	beq.n	800fe3a <jpeg_resync_to_restart+0x8a>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800fe02:	1ebc      	subs	r4, r7, #2
 800fe04:	f004 0407 	and.w	r4, r4, #7
 800fe08:	34d0      	adds	r4, #208	@ 0xd0
      action = 2;		/* invalid marker */
 800fe0a:	42a5      	cmp	r5, r4
 800fe0c:	bf14      	ite	ne
 800fe0e:	2401      	movne	r4, #1
 800fe10:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800fe12:	6833      	ldr	r3, [r6, #0]
 800fe14:	2104      	movs	r1, #4
 800fe16:	4630      	mov	r0, r6
 800fe18:	61dc      	str	r4, [r3, #28]
 800fe1a:	e9c3 8505 	strd	r8, r5, [r3, #20]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	4798      	blx	r3
    switch (action) {
 800fe22:	2c02      	cmp	r4, #2
 800fe24:	d00b      	beq.n	800fe3e <jpeg_resync_to_restart+0x8e>
 800fe26:	2c03      	cmp	r4, #3
 800fe28:	d002      	beq.n	800fe30 <jpeg_resync_to_restart+0x80>
      cinfo->unread_marker = 0;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	f8c6 31b4 	str.w	r3, [r6, #436]	@ 0x1b4
      return TRUE;
 800fe30:	2001      	movs	r0, #1
}
 800fe32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800fe36:	2403      	movs	r4, #3
 800fe38:	e7eb      	b.n	800fe12 <jpeg_resync_to_restart+0x62>
      action = 2;		/* invalid marker */
 800fe3a:	2402      	movs	r4, #2
 800fe3c:	e7e9      	b.n	800fe12 <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800fe3e:	4630      	mov	r0, r6
 800fe40:	f7ff fa20 	bl	800f284 <next_marker>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d0f4      	beq.n	800fe32 <jpeg_resync_to_restart+0x82>
      marker = cinfo->unread_marker;
 800fe48:	f8d6 51b4 	ldr.w	r5, [r6, #436]	@ 0x1b4
      break;
 800fe4c:	e7c1      	b.n	800fdd2 <jpeg_resync_to_restart+0x22>
	...

0800fe50 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800fe50:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fe52:	6843      	ldr	r3, [r0, #4]
 800fe54:	22ac      	movs	r2, #172	@ 0xac
 800fe56:	2100      	movs	r1, #0
{
 800fe58:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800fe5e:	4b11      	ldr	r3, [pc, #68]	@ (800fea4 <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800fe60:	f8c5 01cc 	str.w	r0, [r5, #460]	@ 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fe64:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800fe66:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800fe68:	f100 015c 	add.w	r1, r0, #92	@ 0x5c
 800fe6c:	4b0e      	ldr	r3, [pc, #56]	@ (800fea8 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800fe6e:	4a0f      	ldr	r2, [pc, #60]	@ (800feac <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800fe70:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800fe72:	4b0f      	ldr	r3, [pc, #60]	@ (800feb0 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800fe74:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800fe76:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	6603      	str	r3, [r0, #96]	@ 0x60
  for (i = 0; i < 16; i++) {
 800fe7c:	f100 031c 	add.w	r3, r0, #28
    marker->process_APPn[i] = skip_variable;
 800fe80:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i < 16; i++) {
 800fe84:	4299      	cmp	r1, r3
 800fe86:	d1fb      	bne.n	800fe80 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800fe88:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800fe8c:	2240      	movs	r2, #64	@ 0x40
 800fe8e:	2100      	movs	r1, #0
 800fe90:	f01b f95a 	bl	802b148 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800fe94:	4b07      	ldr	r3, [pc, #28]	@ (800feb4 <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800fe96:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800fe98:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800fe9a:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800fe9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800fea0:	f7ff ba65 	b.w	800f36e <reset_marker_reader>
 800fea4:	0800f36f 	.word	0x0800f36f
 800fea8:	0800f5a1 	.word	0x0800f5a1
 800feac:	0800f20d 	.word	0x0800f20d
 800feb0:	0800f311 	.word	0x0800f311
 800feb4:	0800f131 	.word	0x0800f131

0800feb8 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800feb8:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800feba:	f8d0 51b8 	ldr.w	r5, [r0, #440]	@ 0x1b8
{
 800febe:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800fec0:	68ab      	ldr	r3, [r5, #8]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d02a      	beq.n	800ff1c <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800fec6:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800fec8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800fecc:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800fed2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 800fed6:	2102      	movs	r1, #2
 800fed8:	4620      	mov	r0, r4
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800fede:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800fee2:	2102      	movs	r1, #2
 800fee4:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800fee6:	4620      	mov	r0, r4
 800fee8:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800feea:	68a2      	ldr	r2, [r4, #8]
 800feec:	b1aa      	cbz	r2, 800ff1a <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800feee:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800fef0:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800fef2:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800fef4:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800fef6:	bf0c      	ite	eq
 800fef8:	2101      	moveq	r1, #1
 800fefa:	2102      	movne	r1, #2
    cinfo->progress->total_passes = master->pass_number +
 800fefc:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800fefe:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    cinfo->progress->total_passes = master->pass_number +
 800ff00:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ff02:	b151      	cbz	r1, 800ff1a <prepare_for_output_pass+0x62>
 800ff04:	f8d4 11c8 	ldr.w	r1, [r4, #456]	@ 0x1c8
 800ff08:	6949      	ldr	r1, [r1, #20]
 800ff0a:	b931      	cbnz	r1, 800ff1a <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800ff0c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800ff0e:	2900      	cmp	r1, #0
 800ff10:	bf0c      	ite	eq
 800ff12:	2101      	moveq	r1, #1
 800ff14:	2102      	movne	r1, #2
 800ff16:	440b      	add	r3, r1
 800ff18:	6113      	str	r3, [r2, #16]
    }
  }
}
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800ff1c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ff1e:	b16b      	cbz	r3, 800ff3c <prepare_for_output_pass+0x84>
 800ff20:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800ff24:	b953      	cbnz	r3, 800ff3c <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800ff26:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d037      	beq.n	800ff9c <prepare_for_output_pass+0xe4>
 800ff2c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d034      	beq.n	800ff9c <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800ff32:	69ab      	ldr	r3, [r5, #24]
 800ff34:	f8c0 31e0 	str.w	r3, [r0, #480]	@ 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800ff3c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
 800ff40:	4620      	mov	r0, r4
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800ff46:	f8d4 31c0 	ldr.w	r3, [r4, #448]	@ 0x1c0
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800ff50:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1c9      	bne.n	800feea <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800ff56:	692b      	ldr	r3, [r5, #16]
 800ff58:	b923      	cbnz	r3, 800ff64 <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800ff5a:	f8d4 31dc 	ldr.w	r3, [r4, #476]	@ 0x1dc
 800ff5e:	4620      	mov	r0, r4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800ff64:	f8d4 31d8 	ldr.w	r3, [r4, #472]	@ 0x1d8
 800ff68:	4620      	mov	r0, r4
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800ff6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ff70:	b12b      	cbz	r3, 800ff7e <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800ff72:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 800ff76:	4620      	mov	r0, r4
 800ff78:	68a9      	ldr	r1, [r5, #8]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800ff7e:	68aa      	ldr	r2, [r5, #8]
 800ff80:	4620      	mov	r0, r4
 800ff82:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 800ff86:	2a00      	cmp	r2, #0
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	bf14      	ite	ne
 800ff8c:	2103      	movne	r1, #3
 800ff8e:	2100      	moveq	r1, #0
 800ff90:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ff92:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800ff96:	2100      	movs	r1, #0
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	e7a4      	b.n	800fee6 <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800ff9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff9e:	b11b      	cbz	r3, 800ffa8 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800ffa0:	696b      	ldr	r3, [r5, #20]
 800ffa2:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
 800ffa6:	e7c9      	b.n	800ff3c <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800ffa8:	6823      	ldr	r3, [r4, #0]
 800ffaa:	222f      	movs	r2, #47	@ 0x2f
 800ffac:	4620      	mov	r0, r4
 800ffae:	615a      	str	r2, [r3, #20]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4798      	blx	r3
 800ffb4:	e7c2      	b.n	800ff3c <prepare_for_output_pass+0x84>

0800ffb6 <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800ffb6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
{
 800ffb8:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ffba:	f8d0 41b8 	ldr.w	r4, [r0, #440]	@ 0x1b8
  if (cinfo->quantize_colors)
 800ffbe:	b11a      	cbz	r2, 800ffc8 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800ffc0:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	4798      	blx	r3
  master->pass_number++;
 800ffc8:	68e3      	ldr	r3, [r4, #12]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	60e3      	str	r3, [r4, #12]
}
 800ffce:	bd10      	pop	{r4, pc}

0800ffd0 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ffd0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
{
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d142      	bne.n	8010060 <use_merged_upsample+0x90>
 800ffda:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d140      	bne.n	8010064 <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800ffe2:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800ffe6:	2b03      	cmp	r3, #3
 800ffe8:	d139      	bne.n	801005e <use_merged_upsample+0x8e>
 800ffea:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800ffec:	2b03      	cmp	r3, #3
 800ffee:	d136      	bne.n	801005e <use_merged_upsample+0x8e>
 800fff0:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	d132      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->out_color_space != JCS_RGB ||
 800fff8:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 800fffa:	2b03      	cmp	r3, #3
 800fffc:	d12f      	bne.n	801005e <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800fffe:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 8010002:	6899      	ldr	r1, [r3, #8]
 8010004:	2902      	cmp	r1, #2
 8010006:	d12a      	bne.n	801005e <use_merged_upsample+0x8e>
 8010008:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 801000a:	2901      	cmp	r1, #1
 801000c:	d127      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 801000e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8010012:	2901      	cmp	r1, #1
 8010014:	d123      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 8010016:	68d9      	ldr	r1, [r3, #12]
 8010018:	2902      	cmp	r1, #2
 801001a:	dc20      	bgt.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 801001c:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 801001e:	2901      	cmp	r1, #1
 8010020:	d11d      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 8010022:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8010026:	2901      	cmp	r1, #1
 8010028:	d119      	bne.n	801005e <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 801002a:	f8d2 4140 	ldr.w	r4, [r2, #320]	@ 0x140
 801002e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010030:	42a1      	cmp	r1, r4
 8010032:	d114      	bne.n	801005e <use_merged_upsample+0x8e>
 8010034:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 8010036:	42a1      	cmp	r1, r4
 8010038:	d111      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 801003a:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
 801003e:	42a1      	cmp	r1, r4
 8010040:	d10d      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8010042:	f8d2 1144 	ldr.w	r1, [r2, #324]	@ 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8010046:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010048:	428a      	cmp	r2, r1
 801004a:	d108      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 801004c:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8010050:	428a      	cmp	r2, r1
 8010052:	d104      	bne.n	801005e <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8010054:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8010058:	1a83      	subs	r3, r0, r2
 801005a:	4258      	negs	r0, r3
 801005c:	4158      	adcs	r0, r3
}
 801005e:	bd10      	pop	{r4, pc}
    return FALSE;
 8010060:	2000      	movs	r0, #0
 8010062:	e7fc      	b.n	801005e <use_merged_upsample+0x8e>
 8010064:	4618      	mov	r0, r3
 8010066:	e7fa      	b.n	801005e <use_merged_upsample+0x8e>

08010068 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 8010068:	6942      	ldr	r2, [r0, #20]
 801006a:	2aca      	cmp	r2, #202	@ 0xca
{
 801006c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010070:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 8010072:	d005      	beq.n	8010080 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8010074:	6803      	ldr	r3, [r0, #0]
 8010076:	2115      	movs	r1, #21
 8010078:	e9c3 1205 	strd	r1, r2, [r3, #20]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 8010080:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010082:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 8010084:	f7fe fb12 	bl	800e6ac <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010088:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
 801008c:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 8010090:	462b      	mov	r3, r5
 8010092:	45b4      	cmp	ip, r6
 8010094:	dd79      	ble.n	801018a <jpeg_calc_output_dimensions+0x122>
 8010096:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
    int ssize = 1;
 8010098:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 801009a:	f8d4 8140 	ldr.w	r8, [r4, #320]	@ 0x140
 801009e:	2a00      	cmp	r2, #0
 80100a0:	bf14      	ite	ne
 80100a2:	2708      	movne	r7, #8
 80100a4:	2704      	moveq	r7, #4
 80100a6:	e000      	b.n	80100aa <jpeg_calc_output_dimensions+0x42>
      ssize = ssize * 2;
 80100a8:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 80100aa:	fb01 f008 	mul.w	r0, r1, r8
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 80100ae:	42b8      	cmp	r0, r7
 80100b0:	dc0a      	bgt.n	80100c8 <jpeg_calc_output_dimensions+0x60>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 80100b2:	689a      	ldr	r2, [r3, #8]
 80100b4:	f8d4 e138 	ldr.w	lr, [r4, #312]	@ 0x138
 80100b8:	434a      	muls	r2, r1
 80100ba:	0052      	lsls	r2, r2, #1
 80100bc:	fb9e f9f2 	sdiv	r9, lr, r2
 80100c0:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 80100c4:	2a00      	cmp	r2, #0
 80100c6:	d0ef      	beq.n	80100a8 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 80100c8:	6258      	str	r0, [r3, #36]	@ 0x24
    ssize = 1;
 80100ca:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 80100ce:	f8d4 9144 	ldr.w	r9, [r4, #324]	@ 0x144
 80100d2:	fb08 f109 	mul.w	r1, r8, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 80100d6:	42b9      	cmp	r1, r7
 80100d8:	dc0a      	bgt.n	80100f0 <jpeg_calc_output_dimensions+0x88>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 80100da:	68da      	ldr	r2, [r3, #12]
 80100dc:	f8d4 e13c 	ldr.w	lr, [r4, #316]	@ 0x13c
 80100e0:	fb02 f208 	mul.w	r2, r2, r8
 80100e4:	0052      	lsls	r2, r2, #1
 80100e6:	fb9e faf2 	sdiv	sl, lr, r2
 80100ea:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 80100ee:	b14a      	cbz	r2, 8010104 <jpeg_calc_output_dimensions+0x9c>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 80100f0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 80100f4:	6299      	str	r1, [r3, #40]	@ 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 80100f6:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80100fa:	dd06      	ble.n	801010a <jpeg_calc_output_dimensions+0xa2>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 80100fc:	625a      	str	r2, [r3, #36]	@ 0x24
       ci++, compptr++) {
 80100fe:	3601      	adds	r6, #1
 8010100:	3358      	adds	r3, #88	@ 0x58
 8010102:	e7c6      	b.n	8010092 <jpeg_calc_output_dimensions+0x2a>
      ssize = ssize * 2;
 8010104:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010108:	e7e3      	b.n	80100d2 <jpeg_calc_output_dimensions+0x6a>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 801010a:	0042      	lsls	r2, r0, #1
 801010c:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 8010110:	bfc8      	it	gt
 8010112:	629a      	strgt	r2, [r3, #40]	@ 0x28
 8010114:	e7f3      	b.n	80100fe <jpeg_calc_output_dimensions+0x96>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 8010116:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
       ci++, compptr++) {
 8010118:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 801011a:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 801011c:	3558      	adds	r5, #88	@ 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 801011e:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
 8010122:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 8010126:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 8010128:	69e3      	ldr	r3, [r4, #28]
 801012a:	4351      	muls	r1, r2
 801012c:	4358      	muls	r0, r3
 801012e:	f007 fe2d 	bl	8017d8c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 8010132:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 8010136:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 801013a:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 801013e:	f8d4 213c 	ldr.w	r2, [r4, #316]	@ 0x13c
 8010142:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 8010146:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 8010148:	6a23      	ldr	r3, [r4, #32]
 801014a:	4351      	muls	r1, r2
 801014c:	4358      	muls	r0, r3
 801014e:	f007 fe1d 	bl	8017d8c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 8010152:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010158:	42b3      	cmp	r3, r6
 801015a:	dcdc      	bgt.n	8010116 <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 801015c:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8010160:	2a03      	cmp	r2, #3
 8010162:	d814      	bhi.n	801018e <jpeg_calc_output_dimensions+0x126>
 8010164:	2a01      	cmp	r2, #1
 8010166:	d817      	bhi.n	8010198 <jpeg_calc_output_dimensions+0x130>
 8010168:	d018      	beq.n	801019c <jpeg_calc_output_dimensions+0x134>
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 801016a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if (use_merged_upsample(cinfo))
 801016c:	4620      	mov	r0, r4
    cinfo->out_color_components = 1;
 801016e:	67a3      	str	r3, [r4, #120]	@ 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 8010170:	2a00      	cmp	r2, #0
 8010172:	bf18      	it	ne
 8010174:	2301      	movne	r3, #1
 8010176:	67e3      	str	r3, [r4, #124]	@ 0x7c
  if (use_merged_upsample(cinfo))
 8010178:	f7ff ff2a 	bl	800ffd0 <use_merged_upsample>
 801017c:	b180      	cbz	r0, 80101a0 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 801017e:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 8010182:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
}
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 801018a:	2600      	movs	r6, #0
 801018c:	e7e3      	b.n	8010156 <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 801018e:	3a04      	subs	r2, #4
 8010190:	2a01      	cmp	r2, #1
 8010192:	bf98      	it	ls
 8010194:	2304      	movls	r3, #4
 8010196:	e7e8      	b.n	801016a <jpeg_calc_output_dimensions+0x102>
 8010198:	2303      	movs	r3, #3
 801019a:	e7e6      	b.n	801016a <jpeg_calc_output_dimensions+0x102>
 801019c:	4613      	mov	r3, r2
 801019e:	e7e4      	b.n	801016a <jpeg_calc_output_dimensions+0x102>
    cinfo->rec_outbuf_height = 1;
 80101a0:	2301      	movs	r3, #1
 80101a2:	e7ee      	b.n	8010182 <jpeg_calc_output_dimensions+0x11a>

080101a4 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 80101a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101a6:	6843      	ldr	r3, [r0, #4]
 80101a8:	221c      	movs	r2, #28
 80101aa:	2101      	movs	r1, #1
{
 80101ac:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101ae:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 80101b0:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101b2:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 80101b4:	4b6d      	ldr	r3, [pc, #436]	@ (801036c <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 80101b6:	f8c4 01b8 	str.w	r0, [r4, #440]	@ 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101ba:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 80101bc:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 80101be:	4b6c      	ldr	r3, [pc, #432]	@ (8010370 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 80101c0:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 80101c2:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 80101c4:	4620      	mov	r0, r4
 80101c6:	f7ff ff4f 	bl	8010068 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101ca:	6863      	ldr	r3, [r4, #4]
 80101cc:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80101d0:	2101      	movs	r1, #1
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4620      	mov	r0, r4
 80101d6:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 80101d8:	f500 7380 	add.w	r3, r0, #256	@ 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101dc:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 80101de:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 80101e0:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 80101e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80101e8:	f01a ffae 	bl	802b148 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 80101ec:	f107 03ff 	add.w	r3, r7, #255	@ 0xff
 80101f0:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 80101f2:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 80101f6:	3101      	adds	r1, #1
 80101f8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80101fc:	d1f9      	bne.n	80101f2 <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 80101fe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8010202:	21ff      	movs	r1, #255	@ 0xff
 8010204:	f507 7000 	add.w	r0, r7, #512	@ 0x200
  master->pass_number = 0;
 8010208:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 801020a:	f01a ff9d 	bl	802b148 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 801020e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8010212:	2100      	movs	r1, #0
 8010214:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 8010218:	f01a ff96 	bl	802b148 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 801021c:	2280      	movs	r2, #128	@ 0x80
 801021e:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8010222:	f507 60a0 	add.w	r0, r7, #1280	@ 0x500
 8010226:	f01b f870 	bl	802b30a <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 801022a:	4620      	mov	r0, r4
  master->pass_number = 0;
 801022c:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 801022e:	f7ff fecf 	bl	800ffd0 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 8010232:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  master->quantizer_2pass = NULL;
 8010234:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 8010236:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 801023a:	b1b3      	cbz	r3, 801026a <jinit_master_decompress+0xc6>
 801023c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801023e:	b1a2      	cbz	r2, 801026a <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 8010240:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010242:	2b00      	cmp	r3, #0
 8010244:	d166      	bne.n	8010314 <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 8010246:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010248:	2b03      	cmp	r3, #3
 801024a:	f04f 0301 	mov.w	r3, #1
 801024e:	d068      	beq.n	8010322 <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 8010250:	6663      	str	r3, [r4, #100]	@ 0x64
      cinfo->enable_external_quant = FALSE;
 8010252:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 8010254:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
      cinfo->colormap = NULL;
 8010258:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      jinit_1pass_quantizer(cinfo);
 801025c:	4620      	mov	r0, r4
 801025e:	f006 fea9 	bl	8016fb4 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 8010262:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 8010266:	616b      	str	r3, [r5, #20]
 8010268:	e062      	b.n	8010330 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 801026a:	e9c4 6619 	strd	r6, r6, [r4, #100]	@ 0x64
    cinfo->enable_2pass_quant = FALSE;
 801026e:	66e6      	str	r6, [r4, #108]	@ 0x6c
  if (cinfo->quantize_colors) {
 8010270:	2b00      	cmp	r3, #0
 8010272:	d1e5      	bne.n	8010240 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 8010274:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010276:	b94b      	cbnz	r3, 801028c <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 8010278:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 801027a:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 801027c:	2b00      	cmp	r3, #0
 801027e:	d069      	beq.n	8010354 <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 8010280:	f000 fa1c 	bl	80106bc <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 8010284:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8010286:	4620      	mov	r0, r4
 8010288:	f000 fb98 	bl	80109bc <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 801028c:	4620      	mov	r0, r4
 801028e:	f7fc fdd7 	bl	800ce40 <jinit_inverse_dct>
  if (cinfo->arith_code)
 8010292:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
    jinit_arith_decoder(cinfo);
 8010296:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 8010298:	2b00      	cmp	r3, #0
 801029a:	d061      	beq.n	8010360 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 801029c:	f7fb fc80 	bl	800bba0 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 80102a0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 80102a4:	691b      	ldr	r3, [r3, #16]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d15d      	bne.n	8010366 <jinit_master_decompress+0x1c2>
 80102aa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80102ac:	3900      	subs	r1, #0
 80102ae:	bf18      	it	ne
 80102b0:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 80102b2:	4620      	mov	r0, r4
 80102b4:	f7fc f95e 	bl	800c574 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 80102b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80102ba:	b911      	cbnz	r1, 80102c2 <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 80102bc:	4620      	mov	r0, r4
 80102be:	f7fe fcb3 	bl	800ec28 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 80102c2:	6863      	ldr	r3, [r4, #4]
 80102c4:	4620      	mov	r0, r4
 80102c6:	699b      	ldr	r3, [r3, #24]
 80102c8:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 80102ca:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 80102ce:	4620      	mov	r0, r4
 80102d0:	689b      	ldr	r3, [r3, #8]
 80102d2:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 80102d4:	68a2      	ldr	r2, [r4, #8]
 80102d6:	b1e2      	cbz	r2, 8010312 <jinit_master_decompress+0x16e>
 80102d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80102da:	b9d3      	cbnz	r3, 8010312 <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 80102dc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 80102e0:	691b      	ldr	r3, [r3, #16]
 80102e2:	b1b3      	cbz	r3, 8010312 <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 80102e4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 80102e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (cinfo->progressive_mode) {
 80102ea:	b111      	cbz	r1, 80102f2 <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 80102ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80102f0:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 80102f2:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
    cinfo->progress->pass_counter = 0L;
 80102f6:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 80102f8:	4359      	muls	r1, r3
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 80102fa:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    cinfo->progress->pass_counter = 0L;
 80102fc:	6050      	str	r0, [r2, #4]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 80102fe:	4283      	cmp	r3, r0
 8010300:	bf0c      	ite	eq
 8010302:	2302      	moveq	r3, #2
 8010304:	2303      	movne	r3, #3
 8010306:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 8010308:	68eb      	ldr	r3, [r5, #12]
 801030a:	3301      	adds	r3, #1
    cinfo->progress->completed_passes = 0;
 801030c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    master->pass_number++;
 8010310:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 8010312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 8010314:	6823      	ldr	r3, [r4, #0]
 8010316:	2230      	movs	r2, #48	@ 0x30
 8010318:	4620      	mov	r0, r4
 801031a:	615a      	str	r2, [r3, #20]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4798      	blx	r3
 8010320:	e791      	b.n	8010246 <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 8010322:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8010326:	b17a      	cbz	r2, 8010348 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 8010328:	66a3      	str	r3, [r4, #104]	@ 0x68
    if (cinfo->enable_1pass_quant) {
 801032a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801032c:	2b00      	cmp	r3, #0
 801032e:	d195      	bne.n	801025c <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 8010330:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010332:	b913      	cbnz	r3, 801033a <jinit_master_decompress+0x196>
 8010334:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8010336:	2b00      	cmp	r3, #0
 8010338:	d09c      	beq.n	8010274 <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 801033a:	4620      	mov	r0, r4
 801033c:	f007 fcba 	bl	8017cb4 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 8010340:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 8010344:	61ab      	str	r3, [r5, #24]
 8010346:	e795      	b.n	8010274 <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 8010348:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 801034a:	b10a      	cbz	r2, 8010350 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 801034c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 801034e:	e7ec      	b.n	801032a <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 8010350:	6663      	str	r3, [r4, #100]	@ 0x64
 8010352:	e783      	b.n	801025c <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 8010354:	f7fc fb32 	bl	800c9bc <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 8010358:	4620      	mov	r0, r4
 801035a:	f000 fc4f 	bl	8010bfc <jinit_upsampler>
 801035e:	e791      	b.n	8010284 <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 8010360:	f7fd fefe 	bl	800e160 <jinit_huff_decoder>
 8010364:	e79c      	b.n	80102a0 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 8010366:	2101      	movs	r1, #1
 8010368:	e7a3      	b.n	80102b2 <jinit_master_decompress+0x10e>
 801036a:	bf00      	nop
 801036c:	0800feb9 	.word	0x0800feb9
 8010370:	0800ffb7 	.word	0x0800ffb7

08010374 <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010374:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 8010378:	2200      	movs	r2, #0
 801037a:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 801037c:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 801037e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010380:	4770      	bx	lr

08010382 <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 8010382:	b570      	push	{r4, r5, r6, lr}
 8010384:	9d05      	ldr	r5, [sp, #20]
 8010386:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 8010388:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
			 output_buf + *out_row_ctr);
 801038c:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 801038e:	68de      	ldr	r6, [r3, #12]
 8010390:	9b04      	ldr	r3, [sp, #16]
 8010392:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010396:	6822      	ldr	r2, [r4, #0]
 8010398:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 801039a:	682b      	ldr	r3, [r5, #0]
 801039c:	3301      	adds	r3, #1
 801039e:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 80103a0:	6823      	ldr	r3, [r4, #0]
 80103a2:	3301      	adds	r3, #1
 80103a4:	6023      	str	r3, [r4, #0]
}
 80103a6:	bd70      	pop	{r4, r5, r6, pc}

080103a8 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 80103a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80103ac:	f8d0 51d8 	ldr.w	r5, [r0, #472]	@ 0x1d8
{
 80103b0:	b089      	sub	sp, #36	@ 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 80103b2:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 80103b6:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 80103b8:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80103bc:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 80103be:	9601      	str	r6, [sp, #4]
  int * Cbbtab = upsample->Cb_b_tab;
 80103c0:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 80103c2:	f8d0 414c 	ldr.w	r4, [r0, #332]	@ 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 80103c6:	9602      	str	r6, [sp, #8]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80103c8:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 80103ca:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80103cc:	9603      	str	r6, [sp, #12]
  inptr0 = input_buf[0][in_row_group_ctr];
 80103ce:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80103d2:	9504      	str	r5, [sp, #16]
  inptr1 = input_buf[1][in_row_group_ctr];
 80103d4:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 80103d6:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 80103d8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 80103dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80103e0:	9904      	ldr	r1, [sp, #16]
 80103e2:	9205      	str	r2, [sp, #20]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80103e4:	6f02      	ldr	r2, [r0, #112]	@ 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 80103e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80103ea:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80103ee:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 80103f2:	9206      	str	r2, [sp, #24]
 80103f4:	9a06      	ldr	r2, [sp, #24]
 80103f6:	3306      	adds	r3, #6
 80103f8:	3102      	adds	r1, #2
 80103fa:	4295      	cmp	r5, r2
 80103fc:	d128      	bne.n	8010450 <h2v1_merged_upsample+0xa8>
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 80103fe:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010400:	07db      	lsls	r3, r3, #31
 8010402:	d522      	bpl.n	801044a <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 8010404:	9b05      	ldr	r3, [sp, #20]
 8010406:	2106      	movs	r1, #6
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 8010408:	9f01      	ldr	r7, [sp, #4]
    cred = Crrtab[cr];
 801040a:	f813 600e 	ldrb.w	r6, [r3, lr]
 801040e:	fb01 f10e 	mul.w	r1, r1, lr
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010412:	782b      	ldrb	r3, [r5, #0]
 8010414:	9d03      	ldr	r5, [sp, #12]
 8010416:	eb0c 0001 	add.w	r0, ip, r1
 801041a:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 801041e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010422:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010426:	442a      	add	r2, r5
    cblue = Cbbtab[cb];
 8010428:	9d02      	ldr	r5, [sp, #8]
 801042a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 801042e:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0);
 8010432:	9b04      	ldr	r3, [sp, #16]
 8010434:	f813 301e 	ldrb.w	r3, [r3, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010438:	18e7      	adds	r7, r4, r3
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 801043a:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 801043c:	5dbe      	ldrb	r6, [r7, r6]
 801043e:	7086      	strb	r6, [r0, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010440:	5cd2      	ldrb	r2, [r2, r3]
 8010442:	7042      	strb	r2, [r0, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010444:	5ce3      	ldrb	r3, [r4, r3]
 8010446:	f80c 3001 	strb.w	r3, [ip, r1]
  }
}
 801044a:	b009      	add	sp, #36	@ 0x24
 801044c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010450:	f815 ab01 	ldrb.w	sl, [r5], #1
    cred = Crrtab[cr];
 8010454:	f819 2b01 	ldrb.w	r2, [r9], #1
 8010458:	9e01      	ldr	r6, [sp, #4]
 801045a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801045e:	f858 602a 	ldr.w	r6, [r8, sl, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010462:	4427      	add	r7, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010464:	9607      	str	r6, [sp, #28]
 8010466:	9e03      	ldr	r6, [sp, #12]
 8010468:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801046c:	9e07      	ldr	r6, [sp, #28]
 801046e:	4432      	add	r2, r6
    cblue = Cbbtab[cb];
 8010470:	9e02      	ldr	r6, [sp, #8]
 8010472:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010476:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0++);
 801047a:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 801047e:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 8010480:	f817 b00a 	ldrb.w	fp, [r7, sl]
 8010484:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010488:	f812 b00a 	ldrb.w	fp, [r2, sl]
 801048c:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010490:	f816 a00a 	ldrb.w	sl, [r6, sl]
 8010494:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 8010498:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 801049c:	f817 700a 	ldrb.w	r7, [r7, sl]
 80104a0:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 80104a4:	f812 200a 	ldrb.w	r2, [r2, sl]
 80104a8:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 80104ac:	f816 200a 	ldrb.w	r2, [r6, sl]
 80104b0:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80104b4:	e79e      	b.n	80103f4 <h2v1_merged_upsample+0x4c>

080104b6 <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 80104b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80104ba:	f8d0 51d8 	ldr.w	r5, [r0, #472]	@ 0x1d8
{
 80104be:	b08d      	sub	sp, #52	@ 0x34
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 80104c0:	f8d0 414c 	ldr.w	r4, [r0, #332]	@ 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 80104c4:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 80104c6:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 80104ca:	9604      	str	r6, [sp, #16]
  int * Cbbtab = upsample->Cb_b_tab;
 80104cc:	696e      	ldr	r6, [r5, #20]
 80104ce:	9605      	str	r6, [sp, #20]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80104d0:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 80104d2:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80104d4:	9606      	str	r6, [sp, #24]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 80104d6:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 80104da:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80104de:	686d      	ldr	r5, [r5, #4]
 80104e0:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 80104e2:	9607      	str	r6, [sp, #28]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 80104e4:	9508      	str	r5, [sp, #32]
  inptr1 = input_buf[1][in_row_group_ctr];
 80104e6:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 80104e8:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 80104ea:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 80104ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80104f2:	6f01      	ldr	r1, [r0, #112]	@ 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 80104f4:	9209      	str	r2, [sp, #36]	@ 0x24
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80104f6:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010504:	910a      	str	r1, [sp, #40]	@ 0x28
  inptr2 = input_buf[2][in_row_group_ctr];
 8010506:	9909      	ldr	r1, [sp, #36]	@ 0x24
  outptr0 = output_buf[0];
 8010508:	9201      	str	r2, [sp, #4]
  outptr1 = output_buf[1];
 801050a:	9302      	str	r3, [sp, #8]
  inptr2 = input_buf[2][in_row_group_ctr];
 801050c:	9103      	str	r1, [sp, #12]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 801050e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010510:	3206      	adds	r2, #6
 8010512:	3306      	adds	r3, #6
 8010514:	f10e 0e02 	add.w	lr, lr, #2
 8010518:	4588      	cmp	r8, r1
 801051a:	f10c 0c02 	add.w	ip, ip, #2
 801051e:	d138      	bne.n	8010592 <h2v2_merged_upsample+0xdc>
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 8010520:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010522:	07db      	lsls	r3, r3, #31
 8010524:	d532      	bpl.n	801058c <h2v2_merged_upsample+0xd6>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 8010526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010528:	2306      	movs	r3, #6
 801052a:	9d04      	ldr	r5, [sp, #16]
 801052c:	5dc0      	ldrb	r0, [r0, r7]
 801052e:	437b      	muls	r3, r7
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010530:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 8010534:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010538:	9d06      	ldr	r5, [sp, #24]
 801053a:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 801053e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
 8010542:	9d05      	ldr	r5, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010544:	4460      	add	r0, ip
 8010546:	9a01      	ldr	r2, [sp, #4]
    cblue = Cbbtab[cb];
 8010548:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
    y  = GETJSAMPLE(*inptr00);
 801054c:	9d07      	ldr	r5, [sp, #28]
 801054e:	18d1      	adds	r1, r2, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010550:	eb04 4020 	add.w	r0, r4, r0, asr #16
 8010554:	9a02      	ldr	r2, [sp, #8]
    y  = GETJSAMPLE(*inptr00);
 8010556:	f815 6017 	ldrb.w	r6, [r5, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 801055a:	eb0e 0504 	add.w	r5, lr, r4
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 801055e:	4464      	add	r4, ip
 8010560:	441a      	add	r2, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010562:	f815 e006 	ldrb.w	lr, [r5, r6]
 8010566:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 801056a:	f810 e006 	ldrb.w	lr, [r0, r6]
 801056e:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010572:	5da1      	ldrb	r1, [r4, r6]
 8010574:	9e01      	ldr	r6, [sp, #4]
 8010576:	54f1      	strb	r1, [r6, r3]
    y  = GETJSAMPLE(*inptr01);
 8010578:	9908      	ldr	r1, [sp, #32]
 801057a:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 801057e:	5c6d      	ldrb	r5, [r5, r1]
 8010580:	7095      	strb	r5, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010582:	5c40      	ldrb	r0, [r0, r1]
 8010584:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010586:	5c62      	ldrb	r2, [r4, r1]
 8010588:	9902      	ldr	r1, [sp, #8]
 801058a:	54ca      	strb	r2, [r1, r3]
  }
}
 801058c:	b00d      	add	sp, #52	@ 0x34
 801058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 8010592:	9d03      	ldr	r5, [sp, #12]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010594:	f818 9b01 	ldrb.w	r9, [r8], #1
    cred = Crrtab[cr];
 8010598:	f815 1b01 	ldrb.w	r1, [r5], #1
 801059c:	9503      	str	r5, [sp, #12]
 801059e:	9d04      	ldr	r5, [sp, #16]
 80105a0:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80105a4:	f85a 5029 	ldr.w	r5, [sl, r9, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 80105a8:	4426      	add	r6, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80105aa:	950b      	str	r5, [sp, #44]	@ 0x2c
 80105ac:	9d06      	ldr	r5, [sp, #24]
 80105ae:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80105b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80105b4:	4429      	add	r1, r5
    cblue = Cbbtab[cb];
 80105b6:	9d05      	ldr	r5, [sp, #20]
 80105b8:	f855 5029 	ldr.w	r5, [r5, r9, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80105bc:	eb04 4121 	add.w	r1, r4, r1, asr #16
    y  = GETJSAMPLE(*inptr00++);
 80105c0:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80105c4:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 80105c6:	f816 b009 	ldrb.w	fp, [r6, r9]
 80105ca:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80105ce:	f811 b009 	ldrb.w	fp, [r1, r9]
 80105d2:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80105d6:	f815 9009 	ldrb.w	r9, [r5, r9]
 80105da:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 80105de:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 80105e2:	f816 b009 	ldrb.w	fp, [r6, r9]
 80105e6:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80105ea:	f811 b009 	ldrb.w	fp, [r1, r9]
 80105ee:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80105f2:	f815 9009 	ldrb.w	r9, [r5, r9]
 80105f6:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 80105fa:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 80105fe:	f816 b009 	ldrb.w	fp, [r6, r9]
 8010602:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010606:	f811 b009 	ldrb.w	fp, [r1, r9]
 801060a:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 801060e:	f815 9009 	ldrb.w	r9, [r5, r9]
 8010612:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 8010616:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 801061a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801061e:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010622:	f811 1009 	ldrb.w	r1, [r1, r9]
 8010626:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 801062a:	f815 1009 	ldrb.w	r1, [r5, r9]
 801062e:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010632:	e76c      	b.n	801050e <h2v2_merged_upsample+0x58>

08010634 <merged_2v_upsample>:
{
 8010634:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010638:	f8d0 51d8 	ldr.w	r5, [r0, #472]	@ 0x1d8
{
 801063c:	4616      	mov	r6, r2
 801063e:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	@ 0x28
  if (upsample->spare_full) {
 8010642:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 8010644:	f8d8 3000 	ldr.w	r3, [r8]
 8010648:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 801064c:	b1dc      	cbz	r4, 8010686 <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 801064e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8010650:	2401      	movs	r4, #1
 8010652:	f105 0020 	add.w	r0, r5, #32
 8010656:	9301      	str	r3, [sp, #4]
 8010658:	2300      	movs	r3, #0
 801065a:	9400      	str	r4, [sp, #0]
 801065c:	4619      	mov	r1, r3
 801065e:	f007 fba2 	bl	8017da6 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 8010662:	2300      	movs	r3, #0
 8010664:	626b      	str	r3, [r5, #36]	@ 0x24
  *out_row_ctr += num_rows;
 8010666:	f8d8 3000 	ldr.w	r3, [r8]
 801066a:	4423      	add	r3, r4
 801066c:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 8010670:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8010672:	1b1b      	subs	r3, r3, r4
 8010674:	62eb      	str	r3, [r5, #44]	@ 0x2c
  if (! upsample->spare_full)
 8010676:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010678:	b913      	cbnz	r3, 8010680 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 801067a:	6833      	ldr	r3, [r6, #0]
 801067c:	3301      	adds	r3, #1
 801067e:	6033      	str	r3, [r6, #0]
}
 8010680:	b004      	add	sp, #16
 8010682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    out_rows_avail -= *out_row_ctr;
 8010686:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010688:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801068a:	1ae4      	subs	r4, r4, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 801068c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8010690:	2c02      	cmp	r4, #2
 8010692:	9302      	str	r3, [sp, #8]
 8010694:	bf28      	it	cs
 8010696:	2402      	movcs	r4, #2
 8010698:	42bc      	cmp	r4, r7
 801069a:	bf28      	it	cs
 801069c:	463c      	movcs	r4, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 801069e:	68ef      	ldr	r7, [r5, #12]
    if (num_rows > 1) {
 80106a0:	2c02      	cmp	r4, #2
      work_ptrs[1] = upsample->spare_row;
 80106a2:	bf17      	itett	ne
 80106a4:	6a2b      	ldrne	r3, [r5, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 80106a6:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 80106a8:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 80106aa:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 80106ac:	bf0c      	ite	eq
 80106ae:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 80106b0:	626b      	strne	r3, [r5, #36]	@ 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 80106b2:	ab02      	add	r3, sp, #8
 80106b4:	6832      	ldr	r2, [r6, #0]
 80106b6:	47b8      	blx	r7
 80106b8:	e7d5      	b.n	8010666 <merged_2v_upsample+0x32>
	...

080106bc <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80106bc:	6843      	ldr	r3, [r0, #4]
 80106be:	2230      	movs	r2, #48	@ 0x30
 80106c0:	2101      	movs	r1, #1
 80106c2:	681b      	ldr	r3, [r3, #0]
{
 80106c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c8:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80106ca:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 80106cc:	4b37      	ldr	r3, [pc, #220]	@ (80107ac <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80106ce:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 80106d0:	f8c4 01d8 	str.w	r0, [r4, #472]	@ 0x1d8
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80106d4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
  upsample->pub.start_pass = start_pass_merged_upsample;
 80106d6:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 80106d8:	2000      	movs	r0, #0
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80106da:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
  upsample->pub.need_context_rows = FALSE;
 80106dc:	60a8      	str	r0, [r5, #8]
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80106de:	435a      	muls	r2, r3

  if (cinfo->max_v_samp_factor == 2) {
 80106e0:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 80106e4:	2b02      	cmp	r3, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80106e6:	62aa      	str	r2, [r5, #40]	@ 0x28
  if (cinfo->max_v_samp_factor == 2) {
 80106e8:	d15a      	bne.n	80107a0 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 80106ea:	4b31      	ldr	r3, [pc, #196]	@ (80107b0 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80106ec:	2101      	movs	r1, #1
 80106ee:	4620      	mov	r0, r4
    upsample->pub.upsample = merged_2v_upsample;
 80106f0:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v2_merged_upsample;
 80106f2:	4b30      	ldr	r3, [pc, #192]	@ (80107b4 <jinit_merged_upsampler+0xf8>)
 80106f4:	60eb      	str	r3, [r5, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80106f6:	6863      	ldr	r3, [r4, #4]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80106fc:	6863      	ldr	r3, [r4, #4]
 80106fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    upsample->spare_row = (JSAMPROW)
 8010702:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010704:	2101      	movs	r1, #1
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4620      	mov	r0, r4
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 801070a:	f8d4 51d8 	ldr.w	r5, [r4, #472]	@ 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801070e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010710:	6863      	ldr	r3, [r4, #4]
 8010712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  upsample->Cr_r_tab = (int *)
 8010716:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010718:	2101      	movs	r1, #1
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4620      	mov	r0, r4
 801071e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010720:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 8010722:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2101      	movs	r1, #1
 801072c:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 801072e:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 80107cc <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010732:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010734:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 8010736:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010738:	2101      	movs	r1, #1
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4620      	mov	r0, r4
 801073e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8010742:	4f1d      	ldr	r7, [pc, #116]	@ (80107b8 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010744:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010746:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 8010748:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 801074a:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 801074c:	f8df e080 	ldr.w	lr, [pc, #128]	@ 80107d0 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8010750:	491a      	ldr	r1, [pc, #104]	@ (80107bc <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 8010752:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010756:	4d1a      	ldr	r5, [pc, #104]	@ (80107c0 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010758:	fb08 e203 	mla	r2, r8, r3, lr
 801075c:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 801075e:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8010762:	fb07 f203 	mul.w	r2, r7, r3
 8010766:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 801076a:	f5a2 42a2 	sub.w	r2, r2, #20736	@ 0x5100
 801076e:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 8010770:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010774:	fb05 f203 	mul.w	r2, r5, r3
 8010778:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 801077c:	f502 42d2 	add.w	r2, r2, #26880	@ 0x6900
 8010780:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8010784:	fb01 f203 	mul.w	r2, r1, r3
 8010788:	f502 1232 	add.w	r2, r2, #2916352	@ 0x2c8000
 801078c:	f502 6250 	add.w	r2, r2, #3328	@ 0xd00
 8010790:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8010794:	3301      	adds	r3, #1
 8010796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801079a:	d1dd      	bne.n	8010758 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 801079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 80107a0:	4b08      	ldr	r3, [pc, #32]	@ (80107c4 <jinit_merged_upsampler+0x108>)
 80107a2:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v1_merged_upsample;
 80107a4:	4b08      	ldr	r3, [pc, #32]	@ (80107c8 <jinit_merged_upsampler+0x10c>)
 80107a6:	60eb      	str	r3, [r5, #12]
    upsample->spare_row = NULL;
 80107a8:	e7a8      	b.n	80106fc <jinit_merged_upsampler+0x40>
 80107aa:	bf00      	nop
 80107ac:	08010375 	.word	0x08010375
 80107b0:	08010635 	.word	0x08010635
 80107b4:	080104b7 	.word	0x080104b7
 80107b8:	0001c5a2 	.word	0x0001c5a2
 80107bc:	ffffa7e6 	.word	0xffffa7e6
 80107c0:	ffff492e 	.word	0xffff492e
 80107c4:	08010383 	.word	0x08010383
 80107c8:	080103a9 	.word	0x080103a9
 80107cc:	000166e9 	.word	0x000166e9
 80107d0:	ff4d0b80 	.word	0xff4d0b80

080107d4 <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 80107d4:	2902      	cmp	r1, #2
{
 80107d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 80107d8:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
  switch (pass_mode) {
 80107dc:	d023      	beq.n	8010826 <start_pass_dpost+0x52>
 80107de:	2903      	cmp	r1, #3
 80107e0:	d019      	beq.n	8010816 <start_pass_dpost+0x42>
 80107e2:	2900      	cmp	r1, #0
 80107e4:	d128      	bne.n	8010838 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 80107e6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80107e8:	b182      	cbz	r2, 801080c <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 80107ea:	4a16      	ldr	r2, [pc, #88]	@ (8010844 <start_pass_dpost+0x70>)
 80107ec:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 80107ee:	68e2      	ldr	r2, [r4, #12]
 80107f0:	b93a      	cbnz	r2, 8010802 <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 80107f2:	6843      	ldr	r3, [r0, #4]
 80107f4:	2101      	movs	r1, #1
 80107f6:	9100      	str	r1, [sp, #0]
 80107f8:	69dd      	ldr	r5, [r3, #28]
 80107fa:	68a1      	ldr	r1, [r4, #8]
 80107fc:	6923      	ldr	r3, [r4, #16]
 80107fe:	47a8      	blx	r5
 8010800:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 8010808:	b003      	add	sp, #12
 801080a:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 801080c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
 8010810:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 8010812:	6063      	str	r3, [r4, #4]
    break;
 8010814:	e7f5      	b.n	8010802 <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 8010816:	68a2      	ldr	r2, [r4, #8]
 8010818:	b91a      	cbnz	r2, 8010822 <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 801081a:	6803      	ldr	r3, [r0, #0]
 801081c:	6159      	str	r1, [r3, #20]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 8010822:	4b09      	ldr	r3, [pc, #36]	@ (8010848 <start_pass_dpost+0x74>)
 8010824:	e7f5      	b.n	8010812 <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 8010826:	68a2      	ldr	r2, [r4, #8]
 8010828:	b922      	cbnz	r2, 8010834 <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 801082a:	6803      	ldr	r3, [r0, #0]
 801082c:	2203      	movs	r2, #3
 801082e:	615a      	str	r2, [r3, #20]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 8010834:	4b05      	ldr	r3, [pc, #20]	@ (801084c <start_pass_dpost+0x78>)
 8010836:	e7ec      	b.n	8010812 <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010838:	6803      	ldr	r3, [r0, #0]
 801083a:	2203      	movs	r2, #3
 801083c:	615a      	str	r2, [r3, #20]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4798      	blx	r3
    break;
 8010842:	e7de      	b.n	8010802 <start_pass_dpost+0x2e>
 8010844:	08010851 	.word	0x08010851
 8010848:	080108b1 	.word	0x080108b1
 801084c:	0801093f 	.word	0x0801093f

08010850 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010854:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010856:	f8d0 81c4 	ldr.w	r8, [r0, #452]	@ 0x1c4
{
 801085a:	4604      	mov	r4, r0
 801085c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 801085e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010860:	682f      	ldr	r7, [r5, #0]
 8010862:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 8010864:	2700      	movs	r7, #0
 8010866:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 8010868:	f8d0 71d8 	ldr.w	r7, [r0, #472]	@ 0x1d8
 801086c:	9705      	str	r7, [sp, #20]
 801086e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010872:	42be      	cmp	r6, r7
 8010874:	bf94      	ite	ls
 8010876:	9602      	strls	r6, [sp, #8]
 8010878:	9702      	strhi	r7, [sp, #8]
 801087a:	ae07      	add	r6, sp, #28
 801087c:	9601      	str	r6, [sp, #4]
 801087e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010882:	9600      	str	r6, [sp, #0]
 8010884:	9e05      	ldr	r6, [sp, #20]
 8010886:	6876      	ldr	r6, [r6, #4]
 8010888:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 801088a:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 801088c:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 8010890:	4620      	mov	r0, r4
 8010892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010894:	685e      	ldr	r6, [r3, #4]
 8010896:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801089a:	9b07      	ldr	r3, [sp, #28]
 801089c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80108a0:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 80108a2:	682b      	ldr	r3, [r5, #0]
 80108a4:	9a07      	ldr	r2, [sp, #28]
 80108a6:	4413      	add	r3, r2
 80108a8:	602b      	str	r3, [r5, #0]
}
 80108aa:	b008      	add	sp, #32
 80108ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108b0 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 80108b4:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
{
 80108b8:	b085      	sub	sp, #20
 80108ba:	469a      	mov	sl, r3
 80108bc:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 80108be:	69a3      	ldr	r3, [r4, #24]
{
 80108c0:	460e      	mov	r6, r1
 80108c2:	4691      	mov	r9, r2
 80108c4:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
  if (post->next_row == 0) {
 80108c8:	b943      	cbnz	r3, 80108dc <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 80108ca:	6843      	ldr	r3, [r0, #4]
 80108cc:	2201      	movs	r2, #1
 80108ce:	9200      	str	r2, [sp, #0]
 80108d0:	69df      	ldr	r7, [r3, #28]
 80108d2:	68a1      	ldr	r1, [r4, #8]
 80108d4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80108d8:	47b8      	blx	r7
 80108da:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 80108dc:	6922      	ldr	r2, [r4, #16]
 80108de:	4631      	mov	r1, r6
 80108e0:	f8d5 31d8 	ldr.w	r3, [r5, #472]	@ 0x1d8
 80108e4:	4628      	mov	r0, r5
  old_next_row = post->next_row;
 80108e6:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 80108e8:	9202      	str	r2, [sp, #8]
 80108ea:	f104 0218 	add.w	r2, r4, #24
 80108ee:	9201      	str	r2, [sp, #4]
 80108f0:	68e2      	ldr	r2, [r4, #12]
 80108f2:	9200      	str	r2, [sp, #0]
 80108f4:	464a      	mov	r2, r9
 80108f6:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80108fa:	4653      	mov	r3, sl
 80108fc:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 80108fe:	69a6      	ldr	r6, [r4, #24]
 8010900:	42be      	cmp	r6, r7
 8010902:	d910      	bls.n	8010926 <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 8010904:	f8d5 31e0 	ldr.w	r3, [r5, #480]	@ 0x1e0
    num_rows = post->next_row - old_next_row;
 8010908:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 801090a:	68e1      	ldr	r1, [r4, #12]
 801090c:	2200      	movs	r2, #0
 801090e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010912:	4628      	mov	r0, r5
 8010914:	4633      	mov	r3, r6
 8010916:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 801091a:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 801091c:	f8d8 3000 	ldr.w	r3, [r8]
 8010920:	4433      	add	r3, r6
 8010922:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 8010926:	6922      	ldr	r2, [r4, #16]
 8010928:	69a3      	ldr	r3, [r4, #24]
 801092a:	4293      	cmp	r3, r2
 801092c:	d304      	bcc.n	8010938 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 801092e:	6963      	ldr	r3, [r4, #20]
 8010930:	4413      	add	r3, r2
 8010932:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	61a3      	str	r3, [r4, #24]
  }
}
 8010938:	b005      	add	sp, #20
 801093a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801093e <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 801093e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010942:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
{
 8010946:	4606      	mov	r6, r0
 8010948:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 801094a:	69a3      	ldr	r3, [r4, #24]
 801094c:	b93b      	cbnz	r3, 801095e <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 801094e:	6842      	ldr	r2, [r0, #4]
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	69d5      	ldr	r5, [r2, #28]
 8010954:	68a1      	ldr	r1, [r4, #8]
 8010956:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801095a:	47a8      	blx	r5
 801095c:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 801095e:	6963      	ldr	r3, [r4, #20]
 8010960:	6f75      	ldr	r5, [r6, #116]	@ 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 8010962:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 8010964:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 8010966:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 8010968:	683a      	ldr	r2, [r7, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 801096a:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 801096c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801096e:	429d      	cmp	r5, r3
 8010970:	bf28      	it	cs
 8010972:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 8010974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010976:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010978:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801097c:	429d      	cmp	r5, r3
 801097e:	bf28      	it	cs
 8010980:	461d      	movcs	r5, r3
 8010982:	68e3      	ldr	r3, [r4, #12]
 8010984:	9303      	str	r3, [sp, #12]
 8010986:	9803      	ldr	r0, [sp, #12]
 8010988:	f8d6 31e0 	ldr.w	r3, [r6, #480]	@ 0x1e0
 801098c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010990:	4630      	mov	r0, r6
 8010992:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8010996:	462b      	mov	r3, r5
 8010998:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	442b      	add	r3, r5
 801099e:	603b      	str	r3, [r7, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 80109a0:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 80109a2:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 80109a4:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 80109a6:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 80109a8:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 80109aa:	d304      	bcc.n	80109b6 <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 80109ac:	6963      	ldr	r3, [r4, #20]
 80109ae:	4413      	add	r3, r2
 80109b0:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	61a3      	str	r3, [r4, #24]
  }
}
 80109b6:	b004      	add	sp, #16
 80109b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109bc <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80109bc:	6843      	ldr	r3, [r0, #4]
 80109be:	221c      	movs	r2, #28
{
 80109c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80109c4:	681b      	ldr	r3, [r3, #0]
{
 80109c6:	4688      	mov	r8, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80109c8:	2101      	movs	r1, #1
{
 80109ca:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80109cc:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 80109ce:	4b16      	ldr	r3, [pc, #88]	@ (8010a28 <jinit_d_post_controller+0x6c>)
  cinfo->post = (struct jpeg_d_post_controller *) post;
 80109d0:	f8c4 01c4 	str.w	r0, [r4, #452]	@ 0x1c4
  post->whole_image = NULL;	/* flag for no virtual arrays */
 80109d4:	2700      	movs	r7, #0
  post->pub.start_pass = start_pass_dpost;
 80109d6:	6003      	str	r3, [r0, #0]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80109d8:	4605      	mov	r5, r0
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 80109da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 80109dc:	e9c0 7702 	strd	r7, r7, [r0, #8]
  if (cinfo->quantize_colors) {
 80109e0:	b1c3      	cbz	r3, 8010a14 <jinit_d_post_controller+0x58>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 80109e2:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80109e6:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 80109e8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80109ea:	6862      	ldr	r2, [r4, #4]
 80109ec:	434e      	muls	r6, r1
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 80109ee:	6103      	str	r3, [r0, #16]
    if (need_full_buffer) {
 80109f0:	f1b8 0f00 	cmp.w	r8, #0
 80109f4:	d011      	beq.n	8010a1a <jinit_d_post_controller+0x5e>
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 80109f6:	4619      	mov	r1, r3
 80109f8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80109fa:	f8d2 8010 	ldr.w	r8, [r2, #16]
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 80109fe:	f007 f9ca 	bl	8017d96 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8010a02:	692b      	ldr	r3, [r5, #16]
 8010a04:	463a      	mov	r2, r7
 8010a06:	2101      	movs	r1, #1
 8010a08:	e9cd 0300 	strd	r0, r3, [sp]
 8010a0c:	4633      	mov	r3, r6
 8010a0e:	4620      	mov	r0, r4
 8010a10:	47c0      	blx	r8
 8010a12:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 8010a14:	b002      	add	sp, #8
 8010a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 8010a1a:	6897      	ldr	r7, [r2, #8]
 8010a1c:	2101      	movs	r1, #1
 8010a1e:	4632      	mov	r2, r6
 8010a20:	4620      	mov	r0, r4
 8010a22:	47b8      	blx	r7
 8010a24:	60e8      	str	r0, [r5, #12]
}
 8010a26:	e7f5      	b.n	8010a14 <jinit_d_post_controller+0x58>
 8010a28:	080107d5 	.word	0x080107d5

08010a2c <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8010a2c:	f8d0 213c 	ldr.w	r2, [r0, #316]	@ 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010a30:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8010a34:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 8010a36:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8010a38:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8010a3a:	4770      	bx	lr

08010a3c <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 8010a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010a40:	f8d0 41d8 	ldr.w	r4, [r0, #472]	@ 0x1d8
{
 8010a44:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010a46:	f8d0 313c 	ldr.w	r3, [r0, #316]	@ 0x13c
{
 8010a4a:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010a4c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
{
 8010a4e:	4683      	mov	fp, r0
 8010a50:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010a52:	429a      	cmp	r2, r3
 8010a54:	db10      	blt.n	8010a78 <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010a56:	f8d0 30d8 	ldr.w	r3, [r0, #216]	@ 0xd8
 8010a5a:	2600      	movs	r6, #0
 8010a5c:	f04f 0a58 	mov.w	sl, #88	@ 0x58
 8010a60:	9303      	str	r3, [sp, #12]
 8010a62:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8010a66:	9a03      	ldr	r2, [sp, #12]
 8010a68:	fb0a 2106 	mla	r1, sl, r6, r2
 8010a6c:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 8010a70:	42b2      	cmp	r2, r6
 8010a72:	dc31      	bgt.n	8010ad8 <sep_upsample+0x9c>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 8010a74:	2300      	movs	r3, #0
 8010a76:	65e3      	str	r3, [r4, #92]	@ 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 8010a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010a7a:	4658      	mov	r0, fp
  out_rows_avail -= *out_row_ctr;
 8010a7c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8010a82:	1af6      	subs	r6, r6, r3
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 8010a84:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
  if (num_rows > out_rows_avail)
 8010a86:	428e      	cmp	r6, r1
 8010a88:	bf28      	it	cs
 8010a8a:	460e      	movcs	r6, r1
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 8010a8c:	f8db 113c 	ldr.w	r1, [fp, #316]	@ 0x13c
 8010a90:	1a89      	subs	r1, r1, r2
 8010a92:	428e      	cmp	r6, r1
 8010a94:	bf28      	it	cs
 8010a96:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010a98:	f8db 11dc 	ldr.w	r1, [fp, #476]	@ 0x1dc
 8010a9c:	9600      	str	r6, [sp, #0]
 8010a9e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8010aa2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010aa4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010aa8:	f104 010c 	add.w	r1, r4, #12
 8010aac:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 8010aae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ab0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4433      	add	r3, r6
 8010ab6:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 8010ab8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8010aba:	1b9b      	subs	r3, r3, r6
 8010abc:	6623      	str	r3, [r4, #96]	@ 0x60
  upsample->next_row_out += num_rows;
 8010abe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010ac0:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 8010ac2:	f8db 313c 	ldr.w	r3, [fp, #316]	@ 0x13c
 8010ac6:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 8010ac8:	65e6      	str	r6, [r4, #92]	@ 0x5c
    (*in_row_group_ctr)++;
 8010aca:	bfa2      	ittt	ge
 8010acc:	682b      	ldrge	r3, [r5, #0]
 8010ace:	3301      	addge	r3, #1
 8010ad0:	602b      	strge	r3, [r5, #0]
}
 8010ad2:	b005      	add	sp, #20
 8010ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 8010ad8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      (*upsample->methods[ci]) (cinfo, compptr,
 8010ada:	f103 0904 	add.w	r9, r3, #4
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 8010ade:	682a      	ldr	r2, [r5, #0]
      (*upsample->methods[ci]) (cinfo, compptr,
 8010ae0:	3b24      	subs	r3, #36	@ 0x24
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 8010ae2:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 8010ae4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8010ae6:	4607      	mov	r7, r0
 8010ae8:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 8010aec:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 8010aee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010af2:	4658      	mov	r0, fp
 8010af4:	47b8      	blx	r7
	 ci++, compptr++) {
 8010af6:	464b      	mov	r3, r9
 8010af8:	e7b5      	b.n	8010a66 <sep_upsample+0x2a>

08010afa <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 8010afa:	601a      	str	r2, [r3, #0]
}
 8010afc:	4770      	bx	lr

08010afe <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]
}
 8010b02:	4770      	bx	lr

08010b04 <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 8010b06:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 8010b08:	2300      	movs	r3, #0
 8010b0a:	f8d0 113c 	ldr.w	r1, [r0, #316]	@ 0x13c
 8010b0e:	4299      	cmp	r1, r3
 8010b10:	dc00      	bgt.n	8010b14 <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 8010b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 8010b14:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 8010b18:	6f04      	ldr	r4, [r0, #112]	@ 0x70
    inptr = input_data[outrow];
 8010b1a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 8010b1e:	440c      	add	r4, r1
    while (outptr < outend) {
 8010b20:	42a1      	cmp	r1, r4
 8010b22:	d301      	bcc.n	8010b28 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 8010b24:	3301      	adds	r3, #1
 8010b26:	e7f0      	b.n	8010b0a <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8010b28:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 8010b2c:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 8010b30:	f801 6c01 	strb.w	r6, [r1, #-1]
 8010b34:	e7f4      	b.n	8010b20 <h2v1_upsample+0x1c>

08010b36 <int_upsample>:
{
 8010b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3a:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 8010b3c:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010b3e:	f8d0 01d8 	ldr.w	r0, [r0, #472]	@ 0x1d8
{
 8010b42:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 8010b44:	684b      	ldr	r3, [r1, #4]
 8010b46:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 8010b48:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 8010b4a:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 8010b4c:	f893 8096 	ldrb.w	r8, [r3, #150]	@ 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 8010b50:	f893 a08c 	ldrb.w	sl, [r3, #140]	@ 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010b54:	f108 33ff 	add.w	r3, r8, #4294967295
 8010b58:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 8010b5a:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8010b5e:	42a3      	cmp	r3, r4
 8010b60:	dc02      	bgt.n	8010b68 <int_upsample+0x32>
}
 8010b62:	b005      	add	sp, #20
 8010b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 8010b68:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 8010b6c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    inptr = input_data[inrow];
 8010b6e:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 8010b72:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 8010b76:	454b      	cmp	r3, r9
 8010b78:	d30e      	bcc.n	8010b98 <int_upsample+0x62>
    if (v_expand > 1) {
 8010b7a:	f1b8 0f01 	cmp.w	r8, #1
 8010b7e:	dd09      	ble.n	8010b94 <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010b80:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010b82:	463a      	mov	r2, r7
 8010b84:	4621      	mov	r1, r4
 8010b86:	4638      	mov	r0, r7
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	1c63      	adds	r3, r4, #1
 8010b90:	f007 f909 	bl	8017da6 <jcopy_sample_rows>
    outrow += v_expand;
 8010b94:	4444      	add	r4, r8
 8010b96:	e7e0      	b.n	8010b5a <int_upsample+0x24>
	*outptr++ = invalue;
 8010b98:	4618      	mov	r0, r3
 8010b9a:	4652      	mov	r2, sl
 8010b9c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010ba0:	f01a fad2 	bl	802b148 <memset>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	4453      	add	r3, sl
 8010ba8:	e7e5      	b.n	8010b76 <int_upsample+0x40>

08010baa <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010baa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010bae:	4605      	mov	r5, r0
 8010bb0:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 8010bb2:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 8010bb4:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010bb6:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 8010bba:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8010bbe:	42a3      	cmp	r3, r4
 8010bc0:	dc02      	bgt.n	8010bc8 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 8010bc2:	b002      	add	sp, #8
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 8010bc8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 8010bcc:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    inptr = input_data[inrow];
 8010bce:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 8010bd2:	441a      	add	r2, r3
    while (outptr < outend) {
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d30a      	bcc.n	8010bee <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010bd8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010bda:	4621      	mov	r1, r4
 8010bdc:	4632      	mov	r2, r6
 8010bde:	4630      	mov	r0, r6
 8010be0:	e9cd 8300 	strd	r8, r3, [sp]
 8010be4:	1c63      	adds	r3, r4, #1
    outrow += 2;
 8010be6:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010be8:	f007 f8dd 	bl	8017da6 <jcopy_sample_rows>
    outrow += 2;
 8010bec:	e7e5      	b.n	8010bba <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8010bee:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 8010bf2:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 8010bf6:	f803 0c01 	strb.w	r0, [r3, #-1]
 8010bfa:	e7eb      	b.n	8010bd4 <h2v2_upsample+0x2a>

08010bfc <jinit_upsampler>:
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010bfc:	6843      	ldr	r3, [r0, #4]
 8010bfe:	22a0      	movs	r2, #160	@ 0xa0
 8010c00:	2101      	movs	r1, #1
 8010c02:	681b      	ldr	r3, [r3, #0]
{
 8010c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c08:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010c0a:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 8010c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8010d08 <jinit_upsampler+0x10c>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010c0e:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8010c10:	f8c4 01d8 	str.w	r0, [r4, #472]	@ 0x1d8
  upsample->pub.start_pass = start_pass_upsample;
 8010c14:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 8010c16:	4b3d      	ldr	r3, [pc, #244]	@ (8010d0c <jinit_upsampler+0x110>)
 8010c18:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 8010c1e:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8010c22:	b12b      	cbz	r3, 8010c30 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	221a      	movs	r2, #26
 8010c28:	4620      	mov	r0, r4
 8010c2a:	615a      	str	r2, [r3, #20]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010c30:	f105 060c 	add.w	r6, r5, #12
 8010c34:	f105 088c 	add.w	r8, r5, #140	@ 0x8c
 8010c38:	f1c5 25ff 	rsb	r5, r5, #4278255360	@ 0xff00ff00
 8010c3c:	f8d4 70d8 	ldr.w	r7, [r4, #216]	@ 0xd8
    v_out_group = cinfo->max_v_samp_factor;
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
    need_buffer = TRUE;
    if (! compptr->component_needed) {
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
 8010c40:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8010d20 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010c44:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010c48:	3574      	adds	r5, #116	@ 0x74
 8010c4a:	eb05 0308 	add.w	r3, r5, r8
 8010c4e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010c50:	429a      	cmp	r2, r3
 8010c52:	dc01      	bgt.n	8010c58 <jinit_upsampler+0x5c>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 8010c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c5a:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010c5c:	f8d7 c008 	ldr.w	ip, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010c60:	434b      	muls	r3, r1
 8010c62:	f8d4 1144 	ldr.w	r1, [r4, #324]	@ 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010c66:	f8d7 e024 	ldr.w	lr, [r7, #36]	@ 0x24
		 cinfo->min_DCT_h_scaled_size;
 8010c6a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010c6e:	fb93 f3f1 	sdiv	r3, r3, r1
    v_out_group = cinfo->max_v_samp_factor;
 8010c72:	e9d4 a14e 	ldrd	sl, r1, [r4, #312]	@ 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 8010c76:	65b3      	str	r3, [r6, #88]	@ 0x58
    if (! compptr->component_needed) {
 8010c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c7a:	b932      	cbnz	r2, 8010c8a <jinit_upsampler+0x8e>
      upsample->methods[ci] = noop_upsample;
 8010c7c:	f8c6 9028 	str.w	r9, [r6, #40]	@ 0x28
       ci++, compptr++) {
 8010c80:	3758      	adds	r7, #88	@ 0x58
 8010c82:	3604      	adds	r6, #4
 8010c84:	f108 0801 	add.w	r8, r8, #1
 8010c88:	e7df      	b.n	8010c4a <jinit_upsampler+0x4e>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010c8a:	fb0e f20c 	mul.w	r2, lr, ip
 8010c8e:	fb92 f2f0 	sdiv	r2, r2, r0
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 8010c92:	4552      	cmp	r2, sl
 8010c94:	d104      	bne.n	8010ca0 <jinit_upsampler+0xa4>
 8010c96:	428b      	cmp	r3, r1
 8010c98:	d102      	bne.n	8010ca0 <jinit_upsampler+0xa4>
      upsample->methods[ci] = fullsize_upsample;
 8010c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8010d10 <jinit_upsampler+0x114>)
 8010c9c:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (need_buffer) {
 8010c9e:	e7ef      	b.n	8010c80 <jinit_upsampler+0x84>
    } else if (h_in_group * 2 == h_out_group &&
 8010ca0:	ebba 0f42 	cmp.w	sl, r2, lsl #1
 8010ca4:	d118      	bne.n	8010cd8 <jinit_upsampler+0xdc>
 8010ca6:	428b      	cmp	r3, r1
 8010ca8:	d111      	bne.n	8010cce <jinit_upsampler+0xd2>
      upsample->methods[ci] = h2v1_upsample;
 8010caa:	4b1a      	ldr	r3, [pc, #104]	@ (8010d14 <jinit_upsampler+0x118>)
      upsample->methods[ci] = h2v2_upsample;
 8010cac:	62b3      	str	r3, [r6, #40]	@ 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010cae:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010cb0:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
 8010cb4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010cb6:	f8d3 a008 	ldr.w	sl, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010cba:	f007 f86c 	bl	8017d96 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010cbe:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010cc2:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	47d0      	blx	sl
 8010cca:	6030      	str	r0, [r6, #0]
 8010ccc:	e7d8      	b.n	8010c80 <jinit_upsampler+0x84>
    } else if (h_in_group * 2 == h_out_group &&
 8010cce:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8010cd2:	d101      	bne.n	8010cd8 <jinit_upsampler+0xdc>
      upsample->methods[ci] = h2v2_upsample;
 8010cd4:	4b10      	ldr	r3, [pc, #64]	@ (8010d18 <jinit_upsampler+0x11c>)
 8010cd6:	e7e9      	b.n	8010cac <jinit_upsampler+0xb0>
    } else if ((h_out_group % h_in_group) == 0 &&
 8010cd8:	fb9a f0f2 	sdiv	r0, sl, r2
 8010cdc:	fb02 a210 	mls	r2, r2, r0, sl
 8010ce0:	b95a      	cbnz	r2, 8010cfa <jinit_upsampler+0xfe>
	       (v_out_group % v_in_group) == 0) {
 8010ce2:	fb91 f2f3 	sdiv	r2, r1, r3
 8010ce6:	fb03 1112 	mls	r1, r3, r2, r1
    } else if ((h_out_group % h_in_group) == 0 &&
 8010cea:	b931      	cbnz	r1, 8010cfa <jinit_upsampler+0xfe>
      upsample->methods[ci] = int_upsample;
 8010cec:	4b0b      	ldr	r3, [pc, #44]	@ (8010d1c <jinit_upsampler+0x120>)
 8010cee:	62b3      	str	r3, [r6, #40]	@ 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 8010cf0:	f888 0000 	strb.w	r0, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 8010cf4:	f888 200a 	strb.w	r2, [r8, #10]
    if (need_buffer) {
 8010cf8:	e7d9      	b.n	8010cae <jinit_upsampler+0xb2>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 8010cfa:	6823      	ldr	r3, [r4, #0]
 8010cfc:	2227      	movs	r2, #39	@ 0x27
 8010cfe:	4620      	mov	r0, r4
 8010d00:	615a      	str	r2, [r3, #20]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4798      	blx	r3
    if (need_buffer) {
 8010d06:	e7d2      	b.n	8010cae <jinit_upsampler+0xb2>
 8010d08:	08010a2d 	.word	0x08010a2d
 8010d0c:	08010a3d 	.word	0x08010a3d
 8010d10:	08010afb 	.word	0x08010afb
 8010d14:	08010b05 	.word	0x08010b05
 8010d18:	08010bab 	.word	0x08010bab
 8010d1c:	08010b37 	.word	0x08010b37
 8010d20:	08010aff 	.word	0x08010aff

08010d24 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 8010d24:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 8010d26:	6803      	ldr	r3, [r0, #0]
{
 8010d28:	b0b3      	sub	sp, #204	@ 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	4669      	mov	r1, sp
 8010d2e:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 8010d30:	b033      	add	sp, #204	@ 0xcc
 8010d32:	f85d fb04 	ldr.w	pc, [sp], #4

08010d36 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 8010d36:	2900      	cmp	r1, #0
{
 8010d38:	4603      	mov	r3, r0
 8010d3a:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 8010d3c:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 8010d3e:	da0b      	bge.n	8010d58 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 8010d40:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8010d42:	b112      	cbz	r2, 8010d4a <emit_message+0x14>
 8010d44:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8010d46:	2a02      	cmp	r2, #2
 8010d48:	dd02      	ble.n	8010d50 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 8010d4a:	68a2      	ldr	r2, [r4, #8]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 8010d50:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010d52:	3301      	adds	r3, #1
 8010d54:	66e3      	str	r3, [r4, #108]	@ 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 8010d56:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 8010d58:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8010d5a:	428b      	cmp	r3, r1
 8010d5c:	dbfb      	blt.n	8010d56 <emit_message+0x20>
      (*err->output_message) (cinfo);
 8010d5e:	68a3      	ldr	r3, [r4, #8]
}
 8010d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 8010d64:	4718      	bx	r3

08010d66 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 8010d66:	6803      	ldr	r3, [r0, #0]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 8010d6c:	615a      	str	r2, [r3, #20]
}
 8010d6e:	4770      	bx	lr

08010d70 <format_message>:
{
 8010d70:	4603      	mov	r3, r0
 8010d72:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 8010d74:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 8010d76:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010d78:	2b00      	cmp	r3, #0
{
 8010d7a:	b530      	push	{r4, r5, lr}
 8010d7c:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010d7e:	dd1f      	ble.n	8010dc0 <format_message+0x50>
 8010d80:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8010d82:	4299      	cmp	r1, r3
 8010d84:	db1c      	blt.n	8010dc0 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 8010d86:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8010d88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 8010d8c:	b911      	cbnz	r1, 8010d94 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 8010d8e:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 8010d90:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8010d92:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 8010d94:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 8010d96:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010d9a:	b9fc      	cbnz	r4, 8010ddc <format_message+0x6c>
    sprintf(buffer, msgtext,
 8010d9c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8010d9e:	9305      	str	r3, [sp, #20]
 8010da0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8010da2:	9304      	str	r3, [sp, #16]
 8010da4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010da6:	9303      	str	r3, [sp, #12]
 8010da8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010daa:	9302      	str	r3, [sp, #8]
 8010dac:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8010dae:	9301      	str	r3, [sp, #4]
 8010db0:	6a13      	ldr	r3, [r2, #32]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 8010db8:	f01a f8ce 	bl	802af58 <siprintf>
}
 8010dbc:	b007      	add	sp, #28
 8010dbe:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 8010dc0:	6f94      	ldr	r4, [r2, #120]	@ 0x78
 8010dc2:	2c00      	cmp	r4, #0
 8010dc4:	d0e3      	beq.n	8010d8e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010dc6:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
  } else if (err->addon_message_table != NULL &&
 8010dc8:	4299      	cmp	r1, r3
 8010dca:	dce0      	bgt.n	8010d8e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010dcc:	f8d2 5080 	ldr.w	r5, [r2, #128]	@ 0x80
 8010dd0:	429d      	cmp	r5, r3
 8010dd2:	dbdc      	blt.n	8010d8e <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 8010dd4:	1a59      	subs	r1, r3, r1
 8010dd6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8010dda:	e7d7      	b.n	8010d8c <format_message+0x1c>
    if (ch == '%') {
 8010ddc:	2c25      	cmp	r4, #37	@ 0x25
 8010dde:	d1da      	bne.n	8010d96 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b73      	cmp	r3, #115	@ 0x73
 8010de4:	d1da      	bne.n	8010d9c <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 8010de6:	3218      	adds	r2, #24
}
 8010de8:	b007      	add	sp, #28
 8010dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 8010dee:	f01a b8b3 	b.w	802af58 <siprintf>

08010df2 <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 8010df2:	6803      	ldr	r3, [r0, #0]
{
 8010df4:	b510      	push	{r4, lr}
 8010df6:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 8010df8:	689b      	ldr	r3, [r3, #8]
 8010dfa:	4798      	blx	r3
  jpeg_destroy(cinfo);
 8010dfc:	4620      	mov	r0, r4
}
 8010dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 8010e02:	f7f9 bfaf 	b.w	800ad64 <jpeg_destroy>
	...

08010e08 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 8010e08:	4a0a      	ldr	r2, [pc, #40]	@ (8010e34 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 8010e0a:	490b      	ldr	r1, [pc, #44]	@ (8010e38 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 8010e0c:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 8010e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8010e3c <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 8010e10:	6701      	str	r1, [r0, #112]	@ 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 8010e12:	217e      	movs	r1, #126	@ 0x7e
  err->emit_message = emit_message;
 8010e14:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 8010e16:	4a0a      	ldr	r2, [pc, #40]	@ (8010e40 <jpeg_std_error+0x38>)
 8010e18:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 8010e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8010e44 <jpeg_std_error+0x3c>)
 8010e1c:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 8010e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8010e48 <jpeg_std_error+0x40>)
 8010e20:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 8010e22:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 8010e24:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 8010e28:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 8010e2a:	e9c0 121d 	strd	r1, r2, [r0, #116]	@ 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 8010e2e:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c

  return err;
}
 8010e32:	4770      	bx	lr
 8010e34:	08010df3 	.word	0x08010df3
 8010e38:	0802fd7c 	.word	0x0802fd7c
 8010e3c:	08010d37 	.word	0x08010d37
 8010e40:	08010d25 	.word	0x08010d25
 8010e44:	08010d71 	.word	0x08010d71
 8010e48:	08010d67 	.word	0x08010d67

08010e4c <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e50:	4699      	mov	r9, r3
 8010e52:	b0c1      	sub	sp, #260	@ 0x104
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 8010e54:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8010e56:	3a02      	subs	r2, #2
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8010e58:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
  wsptr = workspace;
 8010e5c:	466c      	mov	r4, sp
 8010e5e:	f103 0a20 	add.w	sl, r3, #32

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010e62:	ed9f 5abd 	vldr	s10, [pc, #756]	@ 8011158 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010e66:	ed9f 4abd 	vldr	s8, [pc, #756]	@ 801115c <jpeg_idct_float+0x310>
 8010e6a:	eddf 4abd 	vldr	s9, [pc, #756]	@ 8011160 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010e6e:	eddf 3abd 	vldr	s7, [pc, #756]	@ 8011164 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010e72:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
      wsptr++;
 8010e76:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010e78:	f9b2 8022 	ldrsh.w	r8, [r2, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010e7c:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	@ 0x32
 8010e80:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010e84:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	@ 0x52
 8010e88:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8010e8c:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	@ 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010e90:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 8010e94:	ecb3 7a01 	vldmia	r3!, {s14}
 8010e98:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010e9c:	ea4c 0b08 	orr.w	fp, ip, r8
 8010ea0:	ea4e 0b0b 	orr.w	fp, lr, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010ea8:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010eac:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010eb0:	ea41 0b0b 	orr.w	fp, r1, fp
 8010eb4:	ea45 0b0b 	orr.w	fp, r5, fp
 8010eb8:	ea50 0b0b 	orrs.w	fp, r0, fp
 8010ebc:	f040 80c1 	bne.w	8011042 <jpeg_idct_float+0x1f6>
      wsptr[DCTSIZE*0] = dcval;
 8010ec0:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010ec4:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010ec8:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010ecc:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8010ed0:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010ed4:	edc4 7a27 	vstr	s15, [r4, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010ed8:	edc4 7a2f 	vstr	s15, [r4, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010edc:	edc4 7a37 	vstr	s15, [r4, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010ee0:	459a      	cmp	sl, r3
 8010ee2:	d1c6      	bne.n	8010e72 <jpeg_idct_float+0x26>
 8010ee4:	f1a9 0404 	sub.w	r4, r9, #4
 8010ee8:	f109 031c 	add.w	r3, r9, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 8010eec:	4669      	mov	r1, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010eee:	eddf 2a9e 	vldr	s5, [pc, #632]	@ 8011168 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010ef2:	eddf 4a99 	vldr	s9, [pc, #612]	@ 8011158 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010ef6:	ed9f 3a99 	vldr	s6, [pc, #612]	@ 801115c <jpeg_idct_float+0x310>
 8010efa:	ed9f 4a99 	vldr	s8, [pc, #612]	@ 8011160 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010efe:	eddf 3a99 	vldr	s7, [pc, #612]	@ 8011164 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010f02:	edd1 6a00 	vldr	s13, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010f06:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 8010f08:	ed11 7a04 	vldr	s14, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010f0c:	ee76 6aa2 	vadd.f32	s13, s13, s5
    tmp13 = wsptr[2] + wsptr[6];
 8010f10:	ed51 5a02 	vldr	s11, [r1, #-8]
    z11 = wsptr[1] + wsptr[7];
 8010f14:	ed11 1a01 	vldr	s2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8010f18:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 8010f1c:	ee77 7a26 	vadd.f32	s15, s14, s13
    outptr = output_buf[ctr] + output_col;
 8010f20:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
    tmp11 = z5 - wsptr[4];
 8010f22:	ee76 6ac7 	vsub.f32	s13, s13, s14
    tmp13 = wsptr[2] + wsptr[6];
 8010f26:	ed11 7a06 	vldr	s14, [r1, #-24]	@ 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 8010f2a:	18a8      	adds	r0, r5, r2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010f2c:	9f4a      	ldr	r7, [sp, #296]	@ 0x128
    tmp13 = wsptr[2] + wsptr[6];
 8010f2e:	ee37 6a25 	vadd.f32	s12, s14, s11
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010f32:	42a3      	cmp	r3, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010f34:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010f38:	eeb0 2a46 	vmov.f32	s4, s12
    tmp0 = tmp10 + tmp13;
 8010f3c:	ee77 5a86 	vadd.f32	s11, s15, s12
    tmp3 = tmp10 - tmp13;
 8010f40:	ee37 5ac6 	vsub.f32	s10, s15, s12
    z13 = wsptr[5] + wsptr[3];
 8010f44:	ed51 7a03 	vldr	s15, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010f48:	ee97 2a24 	vfnms.f32	s4, s14, s9
    z13 = wsptr[5] + wsptr[3];
 8010f4c:	ed11 7a05 	vldr	s14, [r1, #-20]	@ 0xffffffec
 8010f50:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 8010f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 8010f58:	ed11 7a07 	vldr	s14, [r1, #-28]	@ 0xffffffe4
    tmp1 = tmp11 + tmp12;
 8010f5c:	ee36 6a82 	vadd.f32	s12, s13, s4
    tmp2 = tmp11 - tmp12;
 8010f60:	ee76 6ac2 	vsub.f32	s13, s13, s4
    z11 = wsptr[1] + wsptr[7];
 8010f64:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 8010f68:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 8010f6c:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 8010f70:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010f74:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010f78:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010f7c:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010f80:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010f84:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 8010f88:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 8010f8c:	eef0 1a67 	vmov.f32	s3, s15
 8010f90:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010f94:	ee35 2a81 	vadd.f32	s4, s11, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010f98:	ee75 5ac1 	vsub.f32	s11, s11, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010f9c:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010fa0:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tmp4 = tmp10 - tmp5;
 8010fa4:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010fa8:	ee12 2a10 	vmov	r2, s4
 8010fac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8010fb0:	5cb2      	ldrb	r2, [r6, r2]
 8010fb2:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010fb4:	ee15 2a90 	vmov	r2, s11
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010fb8:	ee76 5a27 	vadd.f32	s11, s12, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010fbc:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010fc0:	ee36 6a67 	vsub.f32	s12, s12, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010fc4:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010fc8:	5cb2      	ldrb	r2, [r6, r2]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010fca:	eefd 7ac6 	vcvt.s32.f32	s15, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010fce:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010fd0:	ee15 2a90 	vmov	r2, s11
 8010fd4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8010fd8:	5cb2      	ldrb	r2, [r6, r2]
 8010fda:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010fdc:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010fe0:	ee76 7aa1 	vadd.f32	s15, s13, s3
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010fe4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010fe8:	ee76 6ae1 	vsub.f32	s13, s13, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010ff0:	5cb2      	ldrb	r2, [r6, r2]
 8010ff2:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010ff4:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010ff8:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010ffc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8011000:	5cb2      	ldrb	r2, [r6, r2]
 8011002:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8011004:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011008:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 801100c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8011014:	5cb2      	ldrb	r2, [r6, r2]
 8011016:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011018:	ee17 2a90 	vmov	r2, s15
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 801101c:	ee75 7a47 	vsub.f32	s15, s10, s14
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011020:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8011024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011028:	5cb2      	ldrb	r2, [r6, r2]
 801102a:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 801102c:	ee17 2a90 	vmov	r2, s15
 8011030:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8011034:	5cb2      	ldrb	r2, [r6, r2]
 8011036:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8011038:	f47f af63 	bne.w	8010f02 <jpeg_idct_float+0xb6>
  }
}
 801103c:	b041      	add	sp, #260	@ 0x104
 801103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011042:	ee07 8a10 	vmov	s14, r8
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011046:	ed93 3a2f 	vldr	s6, [r3, #188]	@ 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801104a:	edd3 2a1f 	vldr	s5, [r3, #124]	@ 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801104e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011052:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011056:	edd3 5a0f 	vldr	s11, [r3, #60]	@ 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801105a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801105e:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011062:	ed93 1a37 	vldr	s2, [r3, #220]	@ 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801106a:	edd3 1a07 	vldr	s3, [r3, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801106e:	edd3 0a17 	vldr	s1, [r3, #92]	@ 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011072:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8011076:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 801107a:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 801107e:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8011082:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8011086:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 801108a:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 801108e:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8011092:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 8011096:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 801109a:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801109e:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
    tmp1 = tmp11 + tmp12;
 80110a2:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 80110a6:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110aa:	ee07 ca90 	vmov	s15, ip
 80110ae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110b2:	ee07 ea90 	vmov	s15, lr
 80110b6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110ba:	ee07 1a90 	vmov	s15, r1
 80110be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110c6:	ee07 0a10 	vmov	s14, r0
 80110ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80110ce:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 80110d2:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 80110d6:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 80110da:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 80110de:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 80110e2:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 80110e6:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 80110ea:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80110ee:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 80110f2:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80110f6:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80110fa:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 80110fe:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8011102:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8011106:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 801110a:	eeb0 6a67 	vmov.f32	s12, s15
 801110e:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8011112:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8011116:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 801111a:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 801111e:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8011122:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8011126:	ed84 2a37 	vstr	s4, [r4, #220]	@ 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 801112a:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 801112e:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8011132:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8011136:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 801113a:	edc4 2a2f 	vstr	s5, [r4, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 801113e:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8011142:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8011146:	edc4 6a27 	vstr	s13, [r4, #156]	@ 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 801114a:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 801114e:	ee73 7a47 	vsub.f32	s15, s6, s14
 8011152:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
    wsptr++;
 8011156:	e6c3      	b.n	8010ee0 <jpeg_idct_float+0x94>
 8011158:	3fb504f3 	.word	0x3fb504f3
 801115c:	3f8a8bd4 	.word	0x3f8a8bd4
 8011160:	3fec835e 	.word	0x3fec835e
 8011164:	40273d75 	.word	0x40273d75
 8011168:	43008000 	.word	0x43008000

0801116c <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	b0c5      	sub	sp, #276	@ 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 8011172:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011174:	3a02      	subs	r2, #2
{
 8011176:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011178:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 801117c:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011180:	f105 0320 	add.w	r3, r5, #32
 8011184:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8011186:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011188:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 801118c:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801118e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011192:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	@ 0x32
 8011196:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801119a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	@ 0x52
 801119e:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 80111a2:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	@ 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111a6:	f855 0b04 	ldr.w	r0, [r5], #4
 80111aa:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80111ae:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80111b0:	ea46 000c 	orr.w	r0, r6, ip
 80111b4:	4338      	orrs	r0, r7
 80111b6:	ea4a 0000 	orr.w	r0, sl, r0
 80111ba:	4308      	orrs	r0, r1
 80111bc:	ea4e 0000 	orr.w	r0, lr, r0
 80111c0:	ea58 0000 	orrs.w	r0, r8, r0
 80111c4:	d13f      	bne.n	8011246 <jpeg_idct_ifast+0xda>
      wsptr[DCTSIZE*0] = dcval;
 80111c6:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80111ca:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 80111cc:	63dc      	str	r4, [r3, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80111ce:	65dc      	str	r4, [r3, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80111d0:	67dc      	str	r4, [r3, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80111d2:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 80111d6:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 80111da:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80111de:	9903      	ldr	r1, [sp, #12]
 80111e0:	42a9      	cmp	r1, r5
 80111e2:	d1d1      	bne.n	8011188 <jpeg_idct_ifast+0x1c>
 80111e4:	9b02      	ldr	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80111e6:	ad04      	add	r5, sp, #16
 80111e8:	f1a3 0b04 	sub.w	fp, r3, #4
 80111ec:	331c      	adds	r3, #28
 80111ee:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80111f0:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 80111f2:	f85b af04 	ldr.w	sl, [fp, #4]!
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80111f6:	69ea      	ldr	r2, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 80111f8:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80111fc:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
 8011200:	e9d5 4703 	ldrd	r4, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011204:	ea4e 0608 	orr.w	r6, lr, r8
 8011208:	4326      	orrs	r6, r4
 801120a:	e9d5 3c05 	ldrd	r3, ip, [r5, #20]
 801120e:	433e      	orrs	r6, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8011210:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011214:	431e      	orrs	r6, r3
 8011216:	ea46 060c 	orr.w	r6, r6, ip
 801121a:	4316      	orrs	r6, r2
 801121c:	d17e      	bne.n	801131c <jpeg_idct_ifast+0x1b0>
				  & RANGE_MASK];
 801121e:	f3c1 1149 	ubfx	r1, r1, #5, #10
      
      outptr[0] = dcval;
 8011222:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8011224:	f819 3001 	ldrb.w	r3, [r9, r1]
      outptr[0] = dcval;
 8011228:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 801122c:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 801122e:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 8011230:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 8011232:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 8011234:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 8011236:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 8011238:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	455b      	cmp	r3, fp
 801123e:	d1d7      	bne.n	80111f0 <jpeg_idct_ifast+0x84>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8011240:	b045      	add	sp, #276	@ 0x114
 8011242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011246:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8011248:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801124c:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 801124e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011252:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
 8011256:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 801125a:	eb0a 0004 	add.w	r0, sl, r4
    tmp11 = tmp0 - tmp2;
 801125e:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8011262:	ebac 0b0e 	sub.w	fp, ip, lr
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8011266:	eb0c 0a0e 	add.w	sl, ip, lr
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 801126a:	f44f 7cb5 	mov.w	ip, #362	@ 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 801126e:	eb00 0e0a 	add.w	lr, r0, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8011272:	fb0c fb0b 	mul.w	fp, ip, fp
 8011276:	ebca 2b2b 	rsb	fp, sl, fp, asr #8
    tmp3 = tmp10 - tmp13;
 801127a:	eba0 0a0a 	sub.w	sl, r0, sl
    tmp2 = tmp11 - tmp12;
 801127e:	eba4 000b 	sub.w	r0, r4, fp
    tmp1 = tmp11 + tmp12;
 8011282:	eb04 0c0b 	add.w	ip, r4, fp
    tmp2 = tmp11 - tmp12;
 8011286:	9001      	str	r0, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011288:	69e8      	ldr	r0, [r5, #28]
 801128a:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801128c:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 801128e:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011290:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
 8011294:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011296:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 801129a:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 801129e:	eb07 0801 	add.w	r8, r7, r1
    z10 = tmp6 - tmp5;
 80112a2:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 80112a4:	1837      	adds	r7, r6, r0
    z12 = tmp4 - tmp7;
 80112a6:	1a30      	subs	r0, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80112a8:	180e      	adds	r6, r1, r0
    z12 = tmp4 - tmp7;
 80112aa:	4604      	mov	r4, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80112ac:	f240 10d9 	movw	r0, #473	@ 0x1d9
    tmp7 = z11 + z13;		/* phase 5 */
 80112b0:	eb08 0b07 	add.w	fp, r8, r7
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80112b4:	eba7 0708 	sub.w	r7, r7, r8
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80112b8:	4346      	muls	r6, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80112ba:	f46f 7027 	mvn.w	r0, #668	@ 0x29c
 80112be:	4341      	muls	r1, r0
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80112c0:	f44f 70b5 	mov.w	r0, #362	@ 0x16a
 80112c4:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80112c6:	f240 1015 	movw	r0, #277	@ 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80112ca:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80112cc:	4344      	muls	r4, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80112ce:	eb01 2126 	add.w	r1, r1, r6, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80112d2:	1220      	asrs	r0, r4, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80112d4:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80112d8:	eba0 2026 	sub.w	r0, r0, r6, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80112dc:	eb0e 060b 	add.w	r6, lr, fp
    tmp5 = tmp11 - tmp6;
 80112e0:	ebc1 2727 	rsb	r7, r1, r7, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80112e4:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 80112e8:	ebae 060b 	sub.w	r6, lr, fp
    tmp4 = tmp10 + tmp5;
 80112ec:	4438      	add	r0, r7
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 80112ee:	f8c3 60dc 	str.w	r6, [r3, #220]	@ 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 80112f2:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 80112f6:	ebac 0101 	sub.w	r1, ip, r1
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 80112fa:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 80112fc:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8011300:	9901      	ldr	r1, [sp, #4]
 8011302:	4439      	add	r1, r7
 8011304:	63d9      	str	r1, [r3, #60]	@ 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8011306:	9901      	ldr	r1, [sp, #4]
 8011308:	1bcc      	subs	r4, r1, r7
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 801130a:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 801130e:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8011312:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8011316:	67d9      	str	r1, [r3, #124]	@ 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8011318:	65d8      	str	r0, [r3, #92]	@ 0x5c
    wsptr++;
 801131a:	e760      	b.n	80111de <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 801131c:	187e      	adds	r6, r7, r1
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 801131e:	1bc9      	subs	r1, r1, r7
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 8011320:	eb08 070c 	add.w	r7, r8, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011324:	eba8 080c 	sub.w	r8, r8, ip
 8011328:	f44f 7cb5 	mov.w	ip, #362	@ 0x16a
 801132c:	fb0c f808 	mul.w	r8, ip, r8
    tmp0 = tmp10 + tmp13;
 8011330:	eb06 0c07 	add.w	ip, r6, r7
    tmp3 = tmp10 - tmp13;
 8011334:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011336:	ebc7 2828 	rsb	r8, r7, r8, asr #8
    tmp1 = tmp11 + tmp12;
 801133a:	eb01 0708 	add.w	r7, r1, r8
    tmp2 = tmp11 - tmp12;
 801133e:	eba1 0108 	sub.w	r1, r1, r8
 8011342:	9101      	str	r1, [sp, #4]
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8011344:	18e1      	adds	r1, r4, r3
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 8011346:	1b1b      	subs	r3, r3, r4
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8011348:	eb0e 0402 	add.w	r4, lr, r2
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 801134c:	ebae 0202 	sub.w	r2, lr, r2
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8011350:	9102      	str	r1, [sp, #8]
    tmp7 = z11 + z13;		/* phase 5 */
 8011352:	eb01 0804 	add.w	r8, r1, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011356:	f240 11d9 	movw	r1, #473	@ 0x1d9
 801135a:	eb03 0e02 	add.w	lr, r3, r2
 801135e:	fb01 fe0e 	mul.w	lr, r1, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011362:	f46f 7127 	mvn.w	r1, #668	@ 0x29c
 8011366:	434b      	muls	r3, r1
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011368:	9902      	ldr	r1, [sp, #8]
 801136a:	1a64      	subs	r4, r4, r1
 801136c:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011370:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011372:	434c      	muls	r4, r1
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011374:	f240 1115 	movw	r1, #277	@ 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011378:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801137c:	434a      	muls	r2, r1
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801137e:	994e      	ldr	r1, [sp, #312]	@ 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8011380:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011384:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 8011386:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801138a:	eba2 222e 	sub.w	r2, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801138e:	eb0c 0e08 	add.w	lr, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8011392:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 8011396:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    tmp4 = tmp10 + tmp5;
 801139a:	4422      	add	r2, r4
			    & RANGE_MASK];
 801139c:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 80113a0:	f819 e00e 	ldrb.w	lr, [r9, lr]
 80113a4:	f80a e001 	strb.w	lr, [sl, r1]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 80113a8:	f819 c00c 	ldrb.w	ip, [r9, ip]
 80113ac:	f880 c007 	strb.w	ip, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 80113b0:	eb07 0c03 	add.w	ip, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80113b4:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 80113b6:	f3cc 1c49 	ubfx	ip, ip, #5, #10
			    & RANGE_MASK];
 80113ba:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 80113be:	f819 c00c 	ldrb.w	ip, [r9, ip]
 80113c2:	f880 c001 	strb.w	ip, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80113c6:	f819 3007 	ldrb.w	r3, [r9, r7]
 80113ca:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80113cc:	9b01      	ldr	r3, [sp, #4]
 80113ce:	4423      	add	r3, r4
			    & RANGE_MASK];
 80113d0:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80113d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80113d8:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80113da:	9b01      	ldr	r3, [sp, #4]
 80113dc:	1b19      	subs	r1, r3, r4
			    & RANGE_MASK];
 80113de:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80113e2:	f819 3001 	ldrb.w	r3, [r9, r1]
 80113e6:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 80113e8:	18b3      	adds	r3, r6, r2
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 80113ea:	1ab6      	subs	r6, r6, r2
			    & RANGE_MASK];
 80113ec:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 80113f0:	f3c6 1649 	ubfx	r6, r6, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 80113f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80113f8:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 80113fa:	f819 3006 	ldrb.w	r3, [r9, r6]
 80113fe:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011400:	e71b      	b.n	801123a <jpeg_idct_ifast+0xce>
	...

08011404 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011408:	b0c7      	sub	sp, #284	@ 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801140a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
{
 801140c:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 801140e:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011410:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8011414:	3380      	adds	r3, #128	@ 0x80
 8011416:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011418:	1e93      	subs	r3, r2, #2
 801141a:	9300      	str	r3, [sp, #0]
 801141c:	f105 0320 	add.w	r3, r5, #32
 8011420:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011422:	9b00      	ldr	r3, [sp, #0]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8011424:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011426:	f855 0b04 	ldr.w	r0, [r5], #4
 801142a:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801142c:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8011430:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011434:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	@ 0x32
 8011438:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801143c:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	@ 0x52
 8011440:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8011444:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	@ 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011448:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 801144c:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801144e:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011452:	9200      	str	r2, [sp, #0]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011454:	ea4e 0000 	orr.w	r0, lr, r0
 8011458:	4330      	orrs	r0, r6
 801145a:	ea48 0000 	orr.w	r0, r8, r0
 801145e:	4320      	orrs	r0, r4
 8011460:	ea59 0000 	orrs.w	r0, r9, r0
 8011464:	d146      	bne.n	80114f4 <jpeg_idct_islow+0xf0>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011466:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 8011468:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 801146c:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 801146e:	63cb      	str	r3, [r1, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8011470:	65cb      	str	r3, [r1, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8011472:	67cb      	str	r3, [r1, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8011474:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011478:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 801147c:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011480:	9b04      	ldr	r3, [sp, #16]
 8011482:	42ab      	cmp	r3, r5
 8011484:	d1cd      	bne.n	8011422 <jpeg_idct_islow+0x1e>
 8011486:	9b03      	ldr	r3, [sp, #12]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8011488:	ad06      	add	r5, sp, #24
 801148a:	f1a3 0904 	sub.w	r9, r3, #4
 801148e:	331c      	adds	r3, #28
 8011490:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011492:	f859 3f04 	ldr.w	r3, [r9, #4]!
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011496:	f8d5 b01c 	ldr.w	fp, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	9a00      	ldr	r2, [sp, #0]
 801149e:	9b50      	ldr	r3, [sp, #320]	@ 0x140
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80114a0:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 80114a4:	e9d5 e603 	ldrd	lr, r6, [r5, #12]
    outptr = output_buf[ctr] + output_col;
 80114a8:	4413      	add	r3, r2
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80114aa:	ea4a 0200 	orr.w	r2, sl, r0
 80114ae:	ea42 020e 	orr.w	r2, r2, lr
 80114b2:	e9d5 8405 	ldrd	r8, r4, [r5, #20]
 80114b6:	4332      	orrs	r2, r6
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80114b8:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80114bc:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80114c0:	3110      	adds	r1, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80114c2:	4322      	orrs	r2, r4
 80114c4:	ea52 020b 	orrs.w	r2, r2, fp
 80114c8:	f040 8092 	bne.w	80115f0 <jpeg_idct_islow+0x1ec>
				  & RANGE_MASK];
 80114cc:	f3c1 1149 	ubfx	r1, r1, #5, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80114d0:	9a01      	ldr	r2, [sp, #4]

      outptr[0] = dcval;
 80114d2:	9800      	ldr	r0, [sp, #0]
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80114d4:	5c52      	ldrb	r2, [r2, r1]
      outptr[0] = dcval;
 80114d6:	9950      	ldr	r1, [sp, #320]	@ 0x140
 80114d8:	5442      	strb	r2, [r0, r1]
      outptr[1] = dcval;
 80114da:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 80114dc:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 80114de:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 80114e0:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 80114e2:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 80114e4:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 80114e6:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80114e8:	9b05      	ldr	r3, [sp, #20]
 80114ea:	454b      	cmp	r3, r9
 80114ec:	d1d1      	bne.n	8011492 <jpeg_idct_islow+0x8e>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 80114ee:	b047      	add	sp, #284	@ 0x11c
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80114f4:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80114f6:	f241 1251 	movw	r2, #4433	@ 0x1151
    z2 <<= CONST_BITS;
 80114fa:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80114fc:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80114fe:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011506:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011508:	183c      	adds	r4, r7, r0
 801150a:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801150c:	f641 027e 	movw	r2, #6270	@ 0x187e
 8011510:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011514:	4a74      	ldr	r2, [pc, #464]	@ (80116e8 <jpeg_idct_islow+0x2e4>)
 8011516:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801151a:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 801151c:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 801151e:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8011522:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8011526:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 801152a:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801152c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
    tmp11 = tmp1 + tmp3;
 8011530:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8011532:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011534:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011536:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801153a:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801153e:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011542:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011546:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
    tmp13 = tmp0 - tmp2;
 8011548:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801154a:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801154e:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8011552:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8011556:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801155a:	1930      	adds	r0, r6, r4
 801155c:	4350      	muls	r0, r2
    z2 += z1;
 801155e:	4a63      	ldr	r2, [pc, #396]	@ (80116ec <jpeg_idct_islow+0x2e8>)
 8011560:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8011564:	4a62      	ldr	r2, [pc, #392]	@ (80116f0 <jpeg_idct_islow+0x2ec>)
 8011566:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801156a:	eb09 040a 	add.w	r4, r9, sl
 801156e:	4a61      	ldr	r2, [pc, #388]	@ (80116f4 <jpeg_idct_islow+0x2f0>)
 8011570:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8011572:	f640 128e 	movw	r2, #2446	@ 0x98e
 8011576:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801157a:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801157c:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8011580:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011584:	4a5c      	ldr	r2, [pc, #368]	@ (80116f8 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 8011586:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801158a:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801158e:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011592:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8011596:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8011598:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801159a:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 801159e:	f246 2854 	movw	r8, #25172	@ 0x6254
 80115a2:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80115a6:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80115aa:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80115ae:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80115b0:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80115b4:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80115b8:	f8c1 40dc 	str.w	r4, [r1, #220]	@ 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80115bc:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80115c0:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80115c4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80115c6:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80115c8:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80115ca:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80115cc:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80115ce:	f8c1 70bc 	str.w	r7, [r1, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80115d2:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80115d4:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80115d6:	63cc      	str	r4, [r1, #60]	@ 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80115d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80115dc:	9b02      	ldr	r3, [sp, #8]
 80115de:	444b      	add	r3, r9
 80115e0:	12db      	asrs	r3, r3, #11
 80115e2:	65cb      	str	r3, [r1, #92]	@ 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80115e4:	9b02      	ldr	r3, [sp, #8]
 80115e6:	eba3 0309 	sub.w	r3, r3, r9
 80115ea:	12db      	asrs	r3, r3, #11
 80115ec:	67cb      	str	r3, [r1, #124]	@ 0x7c
    wsptr++;
 80115ee:	e747      	b.n	8011480 <jpeg_idct_islow+0x7c>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80115f0:	1902      	adds	r2, r0, r4
 80115f2:	f241 1751 	movw	r7, #4433	@ 0x1151
 80115f6:	437a      	muls	r2, r7
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80115f8:	f641 077e 	movw	r7, #6270	@ 0x187e
 80115fc:	fb07 2000 	mla	r0, r7, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011600:	4f39      	ldr	r7, [pc, #228]	@ (80116e8 <jpeg_idct_islow+0x2e4>)
 8011602:	fb07 2204 	mla	r2, r7, r4, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 8011606:	1874      	adds	r4, r6, r1
    tmp1 = (z2 - z3) << CONST_BITS;
 8011608:	1b89      	subs	r1, r1, r6
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801160a:	f242 57a1 	movw	r7, #9633	@ 0x25a1
    tmp10 = tmp0 + tmp2;
 801160e:	eb00 3644 	add.w	r6, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8011612:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 8011616:	eb0e 040b 	add.w	r4, lr, fp
    tmp10 = tmp0 + tmp2;
 801161a:	9602      	str	r6, [sp, #8]
    tmp11 = tmp1 + tmp3;
 801161c:	eb02 3641 	add.w	r6, r2, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 8011620:	9003      	str	r0, [sp, #12]
    z3 = tmp1 + tmp3;
 8011622:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 8011626:	ebc2 3241 	rsb	r2, r2, r1, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801162a:	1821      	adds	r1, r4, r0
    tmp12 = tmp1 - tmp3;
 801162c:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801162e:	4379      	muls	r1, r7
    z2 += z1;
 8011630:	4f2e      	ldr	r7, [pc, #184]	@ (80116ec <jpeg_idct_islow+0x2e8>)
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011632:	9a00      	ldr	r2, [sp, #0]
    z2 += z1;
 8011634:	fb07 1404 	mla	r4, r7, r4, r1
    z3 += z1;
 8011638:	4f2d      	ldr	r7, [pc, #180]	@ (80116f0 <jpeg_idct_islow+0x2ec>)
 801163a:	fb07 1100 	mla	r1, r7, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801163e:	eb0a 000b 	add.w	r0, sl, fp
 8011642:	4f2c      	ldr	r7, [pc, #176]	@ (80116f4 <jpeg_idct_islow+0x2f0>)
 8011644:	4378      	muls	r0, r7
    tmp0 += z1 + z2;
 8011646:	f640 178e 	movw	r7, #2446	@ 0x98e
 801164a:	eb04 0c00 	add.w	ip, r4, r0
    tmp3 += z1 + z3;
 801164e:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8011650:	fb07 cc0b 	mla	ip, r7, fp, ip
    tmp3 += z1 + z3;
 8011654:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011658:	4f27      	ldr	r7, [pc, #156]	@ (80116f8 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 801165a:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801165e:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 8011662:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011666:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801166a:	9f02      	ldr	r7, [sp, #8]
    tmp1 += z1 + z3;
 801166c:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 801166e:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8011670:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 8011674:	f246 2854 	movw	r8, #25172	@ 0x6254
 8011678:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801167c:	eb07 0e00 	add.w	lr, r7, r0
 8011680:	9f01      	ldr	r7, [sp, #4]
			    & RANGE_MASK];
 8011682:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011686:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801168a:	9f50      	ldr	r7, [sp, #320]	@ 0x140
 801168c:	f802 e007 	strb.w	lr, [r2, r7]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011690:	9f02      	ldr	r7, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8011692:	9a04      	ldr	r2, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011694:	1a3f      	subs	r7, r7, r0
 8011696:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8011698:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801169c:	5dc0      	ldrb	r0, [r0, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801169e:	9f01      	ldr	r7, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80116a0:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80116a2:	1930      	adds	r0, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80116a4:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 80116a6:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80116aa:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80116ae:	5c38      	ldrb	r0, [r7, r0]
 80116b0:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80116b2:	5db8      	ldrb	r0, [r7, r6]
 80116b4:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80116b6:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80116b8:	1a52      	subs	r2, r2, r1
			    & RANGE_MASK];
 80116ba:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80116be:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80116c2:	5c38      	ldrb	r0, [r7, r0]
 80116c4:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80116c6:	5cba      	ldrb	r2, [r7, r2]
 80116c8:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80116ca:	9a03      	ldr	r2, [sp, #12]
 80116cc:	4462      	add	r2, ip
			    & RANGE_MASK];
 80116ce:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80116d2:	5cba      	ldrb	r2, [r7, r2]
 80116d4:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80116d6:	9a03      	ldr	r2, [sp, #12]
 80116d8:	eba2 020c 	sub.w	r2, r2, ip
			    & RANGE_MASK];
 80116dc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80116e0:	5cba      	ldrb	r2, [r7, r2]
 80116e2:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80116e4:	e700      	b.n	80114e8 <jpeg_idct_islow+0xe4>
 80116e6:	bf00      	nop
 80116e8:	ffffc4df 	.word	0xffffc4df
 80116ec:	ffffc13b 	.word	0xffffc13b
 80116f0:	fffff384 	.word	0xfffff384
 80116f4:	ffffe333 	.word	0xffffe333
 80116f8:	ffffadfd 	.word	0xffffadfd

080116fc <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80116fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	b0b9      	sub	sp, #228	@ 0xe4
 8011702:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011704:	1e96      	subs	r6, r2, #2
 8011706:	9303      	str	r3, [sp, #12]
 8011708:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801170a:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801170e:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011712:	f103 0880 	add.w	r8, r3, #128	@ 0x80
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011716:	f102 030c 	add.w	r3, r2, #12
 801171a:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801171c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011720:	f640 2112 	movw	r1, #2578	@ 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011724:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011728:	f642 09c6 	movw	r9, #10438	@ 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801172c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011730:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011734:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011736:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801173a:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	@ 0x60
    tmp13 <<= CONST_BITS;
 801173e:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011744:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011746:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8011748:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801174a:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 801174e:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011752:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 8011756:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011758:	f641 4337 	movw	r3, #7223	@ 0x1c37
 801175c:	ebae 0702 	sub.w	r7, lr, r2
 8011760:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011762:	eba4 030e 	sub.w	r3, r4, lr
 8011766:	434b      	muls	r3, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011768:	9901      	ldr	r1, [sp, #4]
 801176a:	18f8      	adds	r0, r7, r3
 801176c:	4408      	add	r0, r1
 801176e:	4985      	ldr	r1, [pc, #532]	@ (8011984 <jpeg_idct_7x7+0x288>)
 8011770:	fb01 010e 	mla	r1, r1, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011774:	18a0      	adds	r0, r4, r2
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011776:	9102      	str	r1, [sp, #8]
    tmp0 = z1 + z3;
 8011778:	18a1      	adds	r1, r4, r2
 801177a:	9104      	str	r1, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801177c:	9901      	ldr	r1, [sp, #4]
 801177e:	fb09 1100 	mla	r1, r9, r0, r1
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011782:	f46f 701f 	mvn.w	r0, #636	@ 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011786:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	@ 0x50
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801178a:	fb00 1202 	mla	r2, r0, r2, r1
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801178e:	487e      	ldr	r0, [pc, #504]	@ (8011988 <jpeg_idct_7x7+0x28c>)
 8011790:	fb00 1104 	mla	r1, r0, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011794:	6a2c      	ldr	r4, [r5, #32]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011796:	443a      	add	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011798:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801179a:	4419      	add	r1, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801179c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80117a0:	f641 50ef 	movw	r0, #7663	@ 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80117a4:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80117a6:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	@ 0x30
 80117aa:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80117ac:	f8d5 70a0 	ldr.w	r7, [r5, #160]	@ 0xa0
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80117b0:	eb03 0b04 	add.w	fp, r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80117b4:	fb07 f909 	mul.w	r9, r7, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80117b8:	1b1f      	subs	r7, r3, r4
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80117ba:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80117be:	f240 5073 	movw	r0, #1395	@ 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80117c2:	444b      	add	r3, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80117c4:	444c      	add	r4, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80117c6:	4347      	muls	r7, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80117c8:	4870      	ldr	r0, [pc, #448]	@ (801198c <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 80117ca:	ebab 0a07 	sub.w	sl, fp, r7
    tmp1 += tmp2;
 80117ce:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80117d0:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80117d4:	4344      	muls	r4, r0
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80117d6:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80117da:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp1 += tmp2;
 80117de:	4427      	add	r7, r4
    tmp0 += z2;
 80117e0:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80117e2:	fb0b 3309 	mla	r3, fp, r9, r3
 80117e6:	4423      	add	r3, r4

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80117e8:	eb02 040a 	add.w	r4, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80117ec:	eba2 020a 	sub.w	r2, r2, sl
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80117f0:	12e4      	asrs	r4, r4, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80117f2:	12d2      	asrs	r2, r2, #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80117f4:	f84c 4c04 	str.w	r4, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80117f8:	f8cc 20a4 	str.w	r2, [ip, #164]	@ 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80117fc:	9a02      	ldr	r2, [sp, #8]
 80117fe:	443a      	add	r2, r7
 8011800:	12d2      	asrs	r2, r2, #11
 8011802:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011806:	9a02      	ldr	r2, [sp, #8]
 8011808:	1bd0      	subs	r0, r2, r7
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801180a:	18ca      	adds	r2, r1, r3
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801180c:	1ac9      	subs	r1, r1, r3
    z2 -= tmp0;
 801180e:	9b04      	ldr	r3, [sp, #16]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011810:	12d2      	asrs	r2, r2, #11
    z2 -= tmp0;
 8011812:	ebae 0e03 	sub.w	lr, lr, r3
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011816:	f642 5341 	movw	r3, #11585	@ 0x2d41
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801181a:	f8cc 2034 	str.w	r2, [ip, #52]	@ 0x34
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801181e:	12c0      	asrs	r0, r0, #11
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011820:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011822:	12c9      	asrs	r1, r1, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011824:	f8cc 0088 	str.w	r0, [ip, #136]	@ 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011828:	fb03 230e 	mla	r3, r3, lr, r2
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801182c:	f8cc 106c 	str.w	r1, [ip, #108]	@ 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 8011830:	12db      	asrs	r3, r3, #11
 8011832:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011836:	9b05      	ldr	r3, [sp, #20]
 8011838:	42b3      	cmp	r3, r6
 801183a:	f47f af6f 	bne.w	801171c <jpeg_idct_7x7+0x20>
 801183e:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 8011840:	ac07      	add	r4, sp, #28
 8011842:	f1a3 0904 	sub.w	r9, r3, #4
 8011846:	3318      	adds	r3, #24
 8011848:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801184a:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801184e:	341c      	adds	r4, #28
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011850:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 8011854:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8011856:	9303      	str	r3, [sp, #12]
 8011858:	189e      	adds	r6, r3, r2
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801185a:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 801185e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011862:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011864:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 8011868:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801186c:	eba3 0c01 	sub.w	ip, r3, r1
 8011870:	f641 4337 	movw	r3, #7223	@ 0x1c37
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011874:	4f43      	ldr	r7, [pc, #268]	@ (8011984 <jpeg_idct_7x7+0x288>)
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011876:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801187a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 801187e:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011882:	1aea      	subs	r2, r5, r3
 8011884:	f640 2312 	movw	r3, #2578	@ 0xa12
    z3 = (INT32) wsptr[5];
 8011888:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801188c:	435a      	muls	r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801188e:	9b01      	ldr	r3, [sp, #4]
 8011890:	eb0c 0002 	add.w	r0, ip, r2
 8011894:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 8011898:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801189c:	fb07 0003 	mla	r0, r7, r3, r0
    tmp0 = z1 + z3;
 80118a0:	186b      	adds	r3, r5, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80118a2:	f642 07c6 	movw	r7, #10438	@ 0x28c6
    tmp0 = z1 + z3;
 80118a6:	9304      	str	r3, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80118a8:	437b      	muls	r3, r7
 80118aa:	9f01      	ldr	r7, [sp, #4]
 80118ac:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80118b0:	f46f 771f 	mvn.w	r7, #636	@ 0x27c
 80118b4:	fb07 3101 	mla	r1, r7, r1, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80118b8:	4f33      	ldr	r7, [pc, #204]	@ (8011988 <jpeg_idct_7x7+0x28c>)
 80118ba:	fb07 3305 	mla	r3, r7, r5, r3
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80118be:	f240 5773 	movw	r7, #1395	@ 0x573
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80118c2:	4461      	add	r1, ip
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80118c4:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 80118c6:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80118ca:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80118cc:	eb02 0b0a 	add.w	fp, r2, sl
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80118d0:	eba2 050a 	sub.w	r5, r2, sl
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80118d4:	f641 53ef 	movw	r3, #7663	@ 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80118d8:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80118da:	44f2      	add	sl, lr
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80118dc:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80118e0:	9b42      	ldr	r3, [sp, #264]	@ 0x108
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80118e2:	437d      	muls	r5, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80118e4:	4f29      	ldr	r7, [pc, #164]	@ (801198c <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 80118e6:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 80118ea:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80118ec:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80118f0:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80118f4:	9f03      	ldr	r7, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80118f6:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80118fa:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp1 += tmp2;
 80118fe:	4455      	add	r5, sl
    tmp0 += z2;
 8011900:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011902:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011906:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801190a:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801190e:	4452      	add	r2, sl
			    & RANGE_MASK];
 8011910:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8011914:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011918:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801191c:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011920:	f818 1001 	ldrb.w	r1, [r8, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011924:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011926:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011928:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801192a:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 801192c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8011930:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011934:	f818 1001 	ldrb.w	r1, [r8, r1]
 8011938:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801193a:	f818 1000 	ldrb.w	r1, [r8, r0]
 801193e:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011940:	1899      	adds	r1, r3, r2
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011942:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8011944:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8011948:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801194c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8011950:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011952:	f818 3003 	ldrb.w	r3, [r8, r3]
 8011956:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 8011958:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801195c:	9a04      	ldr	r2, [sp, #16]
 801195e:	1a9b      	subs	r3, r3, r2
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011960:	f642 5241 	movw	r2, #11585	@ 0x2d41
 8011964:	4353      	muls	r3, r2
 8011966:	9a01      	ldr	r2, [sp, #4]
 8011968:	eb03 3342 	add.w	r3, r3, r2, lsl #13
			    & RANGE_MASK];
 801196c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8011970:	f818 3003 	ldrb.w	r3, [r8, r3]
 8011974:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 8011976:	9b05      	ldr	r3, [sp, #20]
 8011978:	454b      	cmp	r3, r9
 801197a:	f47f af66 	bne.w	801184a <jpeg_idct_7x7+0x14e>
  }
}
 801197e:	b039      	add	sp, #228	@ 0xe4
 8011980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011984:	ffffc515 	.word	0xffffc515
 8011988:	ffffb0f1 	.word	0xffffb0f1
 801198c:	ffffd3e1 	.word	0xffffd3e1

08011990 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011994:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8011998:	b0a7      	sub	sp, #156	@ 0x9c
 801199a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801199c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801199e:	3080      	adds	r0, #128	@ 0x80
 80119a0:	320a      	adds	r2, #10
 80119a2:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80119a4:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80119a6:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80119a8:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119aa:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80119ae:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119b2:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80119b6:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119b8:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	@ 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119bc:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119be:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119c2:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119c6:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 80119c8:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80119ca:	f241 64a1 	movw	r4, #5793	@ 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119ce:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	@ 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80119d2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119d6:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	@ 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80119da:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 80119dc:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80119de:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119e2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80119e4:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80119e8:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119ea:	6a28      	ldr	r0, [r5, #32]
    tmp10 = tmp1 + tmp0;
 80119ec:	eb04 0e02 	add.w	lr, r4, r2
    tmp12 = tmp1 - tmp0;
 80119f0:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119f2:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 80119f6:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119f8:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 80119fa:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119fe:	f8d5 00a0 	ldr.w	r0, [r5, #160]	@ 0xa0
 8011a02:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011a06:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011a0a:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011a0e:	eb02 0c08 	add.w	ip, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8011a12:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011a16:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011a1a:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8011a1e:	eba2 0208 	sub.w	r2, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011a22:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8011a26:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a28:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a2c:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011a30:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a34:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a38:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a3c:	f8c7 e074 	str.w	lr, [r7, #116]	@ 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8011a40:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8011a44:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a48:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8011a4c:	f8c7 e014 	str.w	lr, [r7, #20]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8011a50:	65fa      	str	r2, [r7, #92]	@ 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011a52:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011a56:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011a5a:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011a5c:	12e4      	asrs	r4, r4, #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8011a60:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011a62:	647c      	str	r4, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8011a64:	42b2      	cmp	r2, r6
 8011a66:	d1a0      	bne.n	80119aa <jpeg_idct_6x6+0x1a>
 8011a68:	f1a3 0e04 	sub.w	lr, r3, #4
 8011a6c:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8011a70:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011a72:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011a76:	f241 60a1 	movw	r0, #5793	@ 0x16a1
    outptr = output_buf[ctr] + output_col;
 8011a7a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8011a7c:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011a7e:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8011a82:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8011a84:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a88:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011a8c:	fb00 f402 	mul.w	r4, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011a90:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a94:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8011a98:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = tmp0 + tmp10;
 8011a9c:	eb04 3243 	add.w	r2, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8011aa0:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 8011aa4:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011aa8:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8011aac:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011ab0:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp10 = tmp1 + tmp0;
 8011ab4:	eb02 0604 	add.w	r6, r2, r4
    tmp12 = tmp1 - tmp0;
 8011ab8:	eba2 0204 	sub.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8011abc:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011ac0:	eb04 0508 	add.w	r5, r4, r8
 8011ac4:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011ac8:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8011acc:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8011ad0:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011ad4:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011ad8:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011ada:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8011ade:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011ae2:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011ae6:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011aea:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8011aee:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8011af2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011af6:	f810 8008 	ldrb.w	r8, [r0, r8]
 8011afa:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8011afc:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011b00:	9800      	ldr	r0, [sp, #0]
 8011b02:	5d86      	ldrb	r6, [r0, r6]
 8011b04:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011b06:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011b0a:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 8011b0e:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8011b12:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011b16:	5d86      	ldrb	r6, [r0, r6]
 8011b18:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011b1a:	5cc3      	ldrb	r3, [r0, r3]
 8011b1c:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011b1e:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011b22:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8011b26:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8011b2a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011b2e:	5cc3      	ldrb	r3, [r0, r3]
 8011b30:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011b32:	5c83      	ldrb	r3, [r0, r2]
 8011b34:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 8011b36:	d19c      	bne.n	8011a72 <jpeg_idct_6x6+0xe2>
  }
}
 8011b38:	b027      	add	sp, #156	@ 0x9c
 8011b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011b40 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b44:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8011b48:	b09d      	sub	sp, #116	@ 0x74
 8011b4a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011b4c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b4e:	3080      	adds	r0, #128	@ 0x80
 8011b50:	3208      	adds	r2, #8
 8011b52:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011b54:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011b56:	f641 1e4c 	movw	lr, #6476	@ 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011b5a:	f44f 6c35 	mov.w	ip, #2896	@ 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b5e:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011b60:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b62:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011b66:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b68:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b6c:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	@ 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b70:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b72:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
 8011b74:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b78:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8011b7a:	0352      	lsls	r2, r2, #13
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b7c:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b7e:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b82:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b8a:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b8e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	@ 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b92:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b96:	6e28      	ldr	r0, [r5, #96]	@ 0x60
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011b98:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011b9c:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b9e:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011ba2:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011ba6:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011baa:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8011bae:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8011bb0:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8011bb4:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8011bb8:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011bbc:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8011bc0:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011bc2:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011bc6:	f241 0071 	movw	r0, #4209	@ 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8011bca:	627a      	str	r2, [r7, #36]	@ 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011bcc:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011bd0:	483a      	ldr	r0, [pc, #232]	@ (8011cbc <jpeg_idct_5x5+0x17c>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011bd2:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011bd4:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011bd8:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011bdc:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011be0:	42b2      	cmp	r2, r6
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011be2:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011be6:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011bea:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011bee:	f8c7 904c 	str.w	r9, [r7, #76]	@ 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011bf2:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011bf6:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011bfa:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011bfe:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011c02:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011c06:	63bc      	str	r4, [r7, #56]	@ 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011c08:	d1ab      	bne.n	8011b62 <jpeg_idct_5x5+0x22>
 8011c0a:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8011c0e:	a903      	add	r1, sp, #12
 8011c10:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011c12:	f641 1a4c 	movw	sl, #6476	@ 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011c16:	f44f 6935 	mov.w	r9, #2896	@ 0xb50
 8011c1a:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8011c1c:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011c20:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8011c24:	9b26      	ldr	r3, [sp, #152]	@ 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8011c26:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 8011c28:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8011c2c:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011c30:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 8011c34:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011c38:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8011c3c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8011c40:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011c44:	189c      	adds	r4, r3, r2
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011c46:	1a9b      	subs	r3, r3, r2
 8011c48:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011c4c:	fb0a f404 	mul.w	r4, sl, r4
    z3 = tmp12 + z2;
 8011c50:	eb03 324c 	add.w	r2, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 8011c54:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 8011c56:	18a5      	adds	r5, r4, r2
    tmp11 = z3 - z1;
 8011c58:	1b12      	subs	r2, r2, r4
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011c5a:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8011c5e:	ebc3 334c 	rsb	r3, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011c62:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011c64:	f241 0071 	movw	r0, #4209	@ 0x1071
			    & RANGE_MASK];
 8011c68:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011c6c:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011c70:	4812      	ldr	r0, [pc, #72]	@ (8011cbc <jpeg_idct_5x5+0x17c>)
 8011c72:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011c76:	eb05 0b06 	add.w	fp, r5, r6
 8011c7a:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011c7c:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8011c7e:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8011c82:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011c86:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8011c8a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8011c8c:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011c90:	9800      	ldr	r0, [sp, #0]
 8011c92:	5d45      	ldrb	r5, [r0, r5]
 8011c94:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011c96:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011c98:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8011c9a:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8011c9e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011ca2:	5d45      	ldrb	r5, [r0, r5]
 8011ca4:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011ca6:	5c82      	ldrb	r2, [r0, r2]
 8011ca8:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8011caa:	5cc3      	ldrb	r3, [r0, r3]
 8011cac:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8011cae:	9b01      	ldr	r3, [sp, #4]
 8011cb0:	4573      	cmp	r3, lr
 8011cb2:	d1b3      	bne.n	8011c1c <jpeg_idct_5x5+0xdc>
  }
}
 8011cb4:	b01d      	add	sp, #116	@ 0x74
 8011cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cba:	bf00      	nop
 8011cbc:	ffffba5c 	.word	0xffffba5c

08011cc0 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011cc4:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
{
 8011cc8:	b093      	sub	sp, #76	@ 0x4c
 8011cca:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011ccc:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011cce:	3680      	adds	r6, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011cd0:	3206      	adds	r2, #6
 8011cd2:	3d04      	subs	r5, #4
  wsptr = workspace;
 8011cd4:	a802      	add	r0, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8011cd6:	f241 1851 	movw	r8, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011cda:	f641 0e7e 	movw	lr, #6270	@ 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011cde:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8011de8 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ce2:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011ce6:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ce8:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011cec:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011cf0:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011cf2:	fb01 f404 	mul.w	r4, r1, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011cf6:	6c29      	ldr	r1, [r5, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011cf8:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011cfc:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d00:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	@ 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8011d04:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8011d08:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d0c:	6a29      	ldr	r1, [r5, #32]
 8011d0e:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d12:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8011d14:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8011d18:	eb0a 010b 	add.w	r1, sl, fp
 8011d1c:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011d20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011d24:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011d28:	fb0c 110b 	mla	r1, ip, fp, r1
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011d2c:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011d30:	ea4f 21e1 	mov.w	r1, r1, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8011d34:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011d38:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011d3c:	eb01 0984 	add.w	r9, r1, r4, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8011d40:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8011d44:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011d48:	f8c0 a02c 	str.w	sl, [r0, #44]	@ 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011d4c:	f8c0 900c 	str.w	r9, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8011d50:	61c1      	str	r1, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011d52:	d1c6      	bne.n	8011ce2 <jpeg_idct_4x4+0x22>
 8011d54:	1f1d      	subs	r5, r3, #4
 8011d56:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8011d5a:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011d5c:	f241 1951 	movw	r9, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011d60:	f641 087e 	movw	r8, #6270	@ 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011d64:	f8df e080 	ldr.w	lr, [pc, #128]	@ 8011de8 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8011d68:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8011d6c:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8011d6e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011d70:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8011d74:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 8011d76:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8011d7a:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8011d7e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011d82:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8011d86:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8011d8a:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8011d8e:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011d92:	eb01 020b 	add.w	r2, r1, fp
 8011d96:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011d9a:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011d9e:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011da2:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011da6:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011daa:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8011dac:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011db0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
			    & RANGE_MASK];
 8011db2:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011db6:	f816 b00b 	ldrb.w	fp, [r6, fp]
 8011dba:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011dbe:	5c73      	ldrb	r3, [r6, r1]
 8011dc0:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011dc2:	9b01      	ldr	r3, [sp, #4]
 8011dc4:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8011dc8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011dcc:	5cf3      	ldrb	r3, [r6, r3]
 8011dce:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011dd0:	9b01      	ldr	r3, [sp, #4]
 8011dd2:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 8011dd6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011dda:	5cb3      	ldrb	r3, [r6, r2]
 8011ddc:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8011dde:	d1c3      	bne.n	8011d68 <jpeg_idct_4x4+0xa8>
  }
}
 8011de0:	b013      	add	sp, #76	@ 0x4c
 8011de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de6:	bf00      	nop
 8011de8:	ffffc4df 	.word	0xffffc4df

08011dec <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df0:	b08b      	sub	sp, #44	@ 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011df2:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8011df6:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8011df8:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011dfc:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011dfe:	f100 0e80 	add.w	lr, r0, #128	@ 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011e02:	f1a1 0c04 	sub.w	ip, r1, #4
 8011e06:	3204      	adds	r2, #4
 8011e08:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011e0a:	f241 6aa1 	movw	sl, #5793	@ 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011e0e:	f242 7931 	movw	r9, #10033	@ 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e12:	f938 1f02 	ldrsh.w	r1, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011e16:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e18:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e1c:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011e20:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e22:	fb05 f101 	mul.w	r1, r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011e26:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
 8011e2a:	f9b8 5020 	ldrsh.w	r5, [r8, #32]
    tmp0 <<= CONST_BITS;
 8011e2e:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e32:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011e36:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011e3a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e3e:	fb07 f70b 	mul.w	r7, r7, fp
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011e42:	fb0a f505 	mul.w	r5, sl, r5
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011e46:	fb09 f707 	mul.w	r7, r9, r7
    tmp10 = tmp0 + tmp12;
 8011e4a:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8011e4e:	eba1 0145 	sub.w	r1, r1, r5, lsl #1

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011e52:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011e56:	eba6 0607 	sub.w	r6, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011e5a:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011e5e:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011e62:	ea4f 26e6 	mov.w	r6, r6, asr #11
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011e66:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011e68:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011e6c:	6166      	str	r6, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011e6e:	d1d0      	bne.n	8011e12 <jpeg_idct_3x3+0x26>
 8011e70:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011e72:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
 8011e76:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011e78:	f242 7b31 	movw	fp, #10033	@ 0x2731
    outptr = output_buf[ctr] + output_col;
 8011e7c:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8011e80:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 8011e82:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011e84:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8011e88:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8011e8a:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e8e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011e92:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011e96:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e9a:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011e9e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011ea0:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8011ea4:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8011ea8:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011eac:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011eb0:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8011eb4:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 8011eb8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8011ebc:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8011ec0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011ec4:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8011ec8:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011ecc:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8011ed0:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8011ed2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8011ed6:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8011ed8:	d1d0      	bne.n	8011e7c <jpeg_idct_3x3+0x90>
  }
}
 8011eda:	b00b      	add	sp, #44	@ 0x2c
 8011edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ee0 <jpeg_idct_2x2>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011ee0:	f8d1 c054 	ldr.w	ip, [r1, #84]	@ 0x54

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ee4:	f9b2 1000 	ldrsh.w	r1, [r2]
{
 8011ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011eea:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011eee:	f8dc 0000 	ldr.w	r0, [ip]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011ef2:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011ef6:	3680      	adds	r6, #128	@ 0x80
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ef8:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011efa:	f8dc 0020 	ldr.w	r0, [ip, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011efe:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f02:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8011f04:	3104      	adds	r1, #4
{
 8011f06:	9f05      	ldr	r7, [sp, #20]
  tmp0 = tmp4 + tmp5;
 8011f08:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8011f0a:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011f0c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011f10:	4365      	muls	r5, r4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8011f12:	f9b2 4012 	ldrsh.w	r4, [r2, #18]
 8011f16:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
 8011f1a:	4354      	muls	r4, r2

  tmp1 = tmp4 + tmp5;
 8011f1c:	eb05 0c04 	add.w	ip, r5, r4
  tmp3 = tmp4 - tmp5;
 8011f20:	1b2a      	subs	r2, r5, r4

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8011f22:	681d      	ldr	r5, [r3, #0]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011f24:	eb00 040c 	add.w	r4, r0, ip
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011f28:	eba0 000c 	sub.w	r0, r0, ip
  outptr = output_buf[0] + output_col;
 8011f2c:	eb05 0e07 	add.w	lr, r5, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011f30:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011f34:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011f38:	5d34      	ldrb	r4, [r6, r4]
 8011f3a:	55ec      	strb	r4, [r5, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011f3c:	5c30      	ldrb	r0, [r6, r0]
 8011f3e:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8011f42:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011f44:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011f46:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011f48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 8011f4c:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011f4e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011f52:	5cf3      	ldrb	r3, [r6, r3]
 8011f54:	55c3      	strb	r3, [r0, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011f56:	5c73      	ldrb	r3, [r6, r1]
 8011f58:	7063      	strb	r3, [r4, #1]
}
 8011f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f5c <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8011f5c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8011f5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011f62:	6809      	ldr	r1, [r1, #0]
 8011f64:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011f66:	f8d0 114c 	ldr.w	r1, [r0, #332]	@ 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8011f6a:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011f6c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8011f70:	440a      	add	r2, r1
 8011f72:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	9b00      	ldr	r3, [sp, #0]
 8011f7a:	54d1      	strb	r1, [r2, r3]
}
 8011f7c:	4770      	bx	lr
	...

08011f80 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	b0d1      	sub	sp, #324	@ 0x144
 8011f86:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8011f88:	f1a2 0e02 	sub.w	lr, r2, #2
 8011f8c:	9306      	str	r3, [sp, #24]
 8011f8e:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011f90:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011f94:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011f96:	f103 0a80 	add.w	sl, r3, #128	@ 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f9a:	f102 030e 	add.w	r3, r2, #14
 8011f9e:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011fa0:	f93e 5f02 	ldrsh.w	r5, [lr, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011fa4:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011fa6:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011faa:	f9be 1020 	ldrsh.w	r1, [lr, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011fae:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fb2:	f9be 2040 	ldrsh.w	r2, [lr, #64]	@ 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011fb6:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fbc:	f9be 6060 	ldrsh.w	r6, [lr, #96]	@ 0x60
    tmp0 <<= CONST_BITS;
 8011fc0:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fc2:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fc4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011fc8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011fcc:	f9be c050 	ldrsh.w	ip, [lr, #80]	@ 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fd0:	4373      	muls	r3, r6
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011fd2:	f241 66a1 	movw	r6, #5793	@ 0x16a1
 8011fd6:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 8011fd8:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8011fda:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8011fde:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011fe0:	1a8b      	subs	r3, r1, r2
 8011fe2:	4373      	muls	r3, r6
 8011fe4:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011fe6:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8011fea:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011fec:	188b      	adds	r3, r1, r2
 8011fee:	f642 2587 	movw	r5, #10887	@ 0x2a87
 8011ff2:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011ff4:	f242 25ab 	movw	r5, #8875	@ 0x22ab
 8011ff8:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011ffa:	f240 75dc 	movw	r5, #2012	@ 0x7dc
 8011ffe:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8012000:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8012002:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 8012004:	1a7f      	subs	r7, r7, r1
    tmp10 = tmp1 + tmp0 - tmp3;
 8012006:	1aad      	subs	r5, r5, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 8012008:	18ba      	adds	r2, r7, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 801200a:	440b      	add	r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801200c:	f9be 1010 	ldrsh.w	r1, [lr, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8012010:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012012:	6a22      	ldr	r2, [r4, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012014:	6e27      	ldr	r7, [r4, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012016:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012018:	f9be 2030 	ldrsh.w	r2, [lr, #48]	@ 0x30
    tmp12 = tmp1 - tmp0 + tmp2;
 801201c:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801201e:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012020:	f8d4 70a0 	ldr.w	r7, [r4, #160]	@ 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012024:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012028:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801202c:	f9be 7070 	ldrsh.w	r7, [lr, #112]	@ 0x70
    tmp10 = tmp1 + tmp0 - tmp3;
 8012030:	9503      	str	r5, [sp, #12]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012032:	f642 4591 	movw	r5, #11409	@ 0x2c91
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012036:	435f      	muls	r7, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8012038:	4b81      	ldr	r3, [pc, #516]	@ (8012240 <jpeg_idct_9x9+0x2c0>)
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801203a:	eb01 0b0c 	add.w	fp, r1, ip
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801203e:	435a      	muls	r2, r3
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8012040:	f641 5317 	movw	r3, #7447	@ 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012044:	eb01 0907 	add.w	r9, r1, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012048:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801204c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012050:	f640 737a 	movw	r3, #3962	@ 0xf7a
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012054:	1bc9      	subs	r1, r1, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012056:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801205a:	ebac 0307 	sub.w	r3, ip, r7
 801205e:	436b      	muls	r3, r5
    tmp0 = tmp2 + tmp3 - z2;
 8012060:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012064:	461d      	mov	r5, r3
    tmp2 += z2 - tmp1;
 8012066:	1ad3      	subs	r3, r2, r3
    tmp0 = tmp2 + tmp3 - z2;
 8012068:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 801206c:	449b      	add	fp, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801206e:	f242 7331 	movw	r3, #10033	@ 0x2731
    tmp3 += z2 + tmp1;
 8012072:	442a      	add	r2, r5
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012074:	4359      	muls	r1, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8012076:	9b03      	ldr	r3, [sp, #12]
    tmp3 += z2 + tmp1;
 8012078:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801207a:	eba3 0508 	sub.w	r5, r3, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801207e:	eb03 0708 	add.w	r7, r3, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8012082:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012084:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8012086:	12ff      	asrs	r7, r7, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012088:	f8c0 50fc 	str.w	r5, [r0, #252]	@ 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801208c:	1875      	adds	r5, r6, r1
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801208e:	1a76      	subs	r6, r6, r1
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8012090:	eb03 010b 	add.w	r1, r3, fp
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8012094:	eba3 030b 	sub.w	r3, r3, fp
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8012098:	12ed      	asrs	r5, r5, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801209a:	12f6      	asrs	r6, r6, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801209c:	f840 7c04 	str.w	r7, [r0, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80120a0:	12db      	asrs	r3, r3, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80120a2:	61c5      	str	r5, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80120a4:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80120a6:	f8c0 60dc 	str.w	r6, [r0, #220]	@ 0xdc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80120aa:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 80120ae:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80120b0:	63c1      	str	r1, [r0, #60]	@ 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 80120b2:	4413      	add	r3, r2
 80120b4:	12db      	asrs	r3, r3, #11
 80120b6:	65c3      	str	r3, [r0, #92]	@ 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 80120b8:	9b05      	ldr	r3, [sp, #20]
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	12db      	asrs	r3, r3, #11
 80120be:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 80120c2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80120c6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 80120ca:	12db      	asrs	r3, r3, #11
 80120cc:	67c3      	str	r3, [r0, #124]	@ 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80120ce:	9b07      	ldr	r3, [sp, #28]
 80120d0:	4573      	cmp	r3, lr
 80120d2:	f47f af65 	bne.w	8011fa0 <jpeg_idct_9x9+0x20>
 80120d6:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 80120d8:	aa08      	add	r2, sp, #32
 80120da:	f1a3 0904 	sub.w	r9, r3, #4
 80120de:	3320      	adds	r3, #32
 80120e0:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80120e2:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80120e6:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
    outptr = output_buf[ctr] + output_col;
 80120ea:	995a      	ldr	r1, [sp, #360]	@ 0x168
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80120ec:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80120ee:	9305      	str	r3, [sp, #20]
 80120f0:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80120f2:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 80120f6:	f852 0c18 	ldr.w	r0, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80120fa:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80120fe:	f852 3c08 	ldr.w	r3, [r2, #-8]
    z2 = (INT32) wsptr[4];
 8012102:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8012106:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 801210a:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 801210e:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 8012112:	1b9b      	subs	r3, r3, r6
 8012114:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8012116:	1a43      	subs	r3, r0, r1
 8012118:	fb0c f303 	mul.w	r3, ip, r3
 801211c:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 801211e:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8012122:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8012124:	1843      	adds	r3, r0, r1
 8012126:	f642 2587 	movw	r5, #10887	@ 0x2a87
 801212a:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 801212c:	f242 25ab 	movw	r5, #8875	@ 0x22ab
 8012130:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8012132:	f240 75dc 	movw	r5, #2012	@ 0x7dc
 8012136:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8012138:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 801213a:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 801213c:	1a3f      	subs	r7, r7, r0
    tmp10 = tmp1 + tmp0 - tmp3;
 801213e:	1a6d      	subs	r5, r5, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8012140:	1879      	adds	r1, r7, r1
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8012142:	4f3f      	ldr	r7, [pc, #252]	@ (8012240 <jpeg_idct_9x9+0x2c0>)
    tmp12 = tmp1 - tmp0 + tmp2;
 8012144:	4403      	add	r3, r0
    z1 = (INT32) wsptr[1];
 8012146:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 801214a:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 801214c:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp12 = tmp1 - tmp0 + tmp2;
 8012150:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8012152:	f641 5317 	movw	r3, #7447	@ 0x1d17
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8012156:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8012158:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 801215c:	eb00 0b07 	add.w	fp, r0, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012160:	f852 7c04 	ldr.w	r7, [r2, #-4]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8012164:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012168:	eb00 0e07 	add.w	lr, r0, r7
 801216c:	f640 737a 	movw	r3, #3962	@ 0xf7a
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012170:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012174:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012178:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801217c:	eba7 0803 	sub.w	r8, r7, r3
 8012180:	f642 4391 	movw	r3, #11409	@ 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8012184:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012188:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801218c:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8012190:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8012194:	eba1 0708 	sub.w	r7, r1, r8
    tmp3 += z2 + tmp1;
 8012198:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801219a:	1ac0      	subs	r0, r0, r3
 801219c:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp3 += z2 + tmp1;
 80121a0:	eb01 080e 	add.w	r8, r1, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80121a4:	eb05 0e0c 	add.w	lr, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80121a8:	1ac0      	subs	r0, r0, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80121aa:	eba5 050c 	sub.w	r5, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80121ae:	f242 7331 	movw	r3, #10033	@ 0x2731
			    & RANGE_MASK];
 80121b2:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80121b6:	995a      	ldr	r1, [sp, #360]	@ 0x168
			    & RANGE_MASK];
 80121b8:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80121bc:	f81a e00e 	ldrb.w	lr, [sl, lr]
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80121c0:	4358      	muls	r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80121c2:	9b05      	ldr	r3, [sp, #20]
    tmp2 += z2 - tmp1;
 80121c4:	445f      	add	r7, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80121c6:	f803 e001 	strb.w	lr, [r3, r1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80121ca:	f81a 5005 	ldrb.w	r5, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80121ce:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80121d0:	7225      	strb	r5, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80121d2:	1835      	adds	r5, r6, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80121d4:	1a36      	subs	r6, r6, r0
			    & RANGE_MASK];
 80121d6:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80121da:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80121de:	f81a 5005 	ldrb.w	r5, [sl, r5]
 80121e2:	7065      	strb	r5, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80121e4:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80121e8:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80121ea:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80121ec:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 80121ee:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80121f2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80121f6:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80121fa:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80121fc:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8012200:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8012202:	9b04      	ldr	r3, [sp, #16]
 8012204:	4443      	add	r3, r8
			    & RANGE_MASK];
 8012206:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801220a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801220e:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8012210:	9b04      	ldr	r3, [sp, #16]
 8012212:	eba3 0308 	sub.w	r3, r3, r8
			    & RANGE_MASK];
 8012216:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 801221a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801221e:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8012220:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8012224:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
			    & RANGE_MASK];
 8012228:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 801222c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8012230:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 8012232:	9b06      	ldr	r3, [sp, #24]
 8012234:	454b      	cmp	r3, r9
 8012236:	f47f af54 	bne.w	80120e2 <jpeg_idct_9x9+0x162>
  }
}
 801223a:	b051      	add	sp, #324	@ 0x144
 801223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012240:	ffffd8cf 	.word	0xffffd8cf

08012244 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012248:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 801224c:	b0d9      	sub	sp, #356	@ 0x164
 801224e:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8012250:	f1a2 0b02 	sub.w	fp, r2, #2
 8012254:	9304      	str	r3, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012256:	f100 0380 	add.w	r3, r0, #128	@ 0x80
 801225a:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801225c:	a908      	add	r1, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801225e:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012260:	f102 030e 	add.w	r3, r2, #14
 8012264:	9306      	str	r3, [sp, #24]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012266:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801226a:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801226e:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012272:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012274:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012278:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801227a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801227e:	f9bb e050 	ldrsh.w	lr, [fp, #80]	@ 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012282:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012284:	f242 429d 	movw	r2, #9373	@ 0x249d
    z3 <<= CONST_BITS;
 8012288:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801228a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801228e:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012292:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012296:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8012298:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801229a:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 801229c:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801229e:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122a2:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80122a6:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	@ 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80122aa:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122ae:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80122b0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80122b4:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80122b6:	19f3      	adds	r3, r6, r7
 80122b8:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80122ba:	f241 0071 	movw	r0, #4209	@ 0x1071
 80122be:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80122c2:	48a0      	ldr	r0, [pc, #640]	@ (8012544 <jpeg_idct_10x10+0x300>)
 80122c4:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 80122c8:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 80122cc:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80122ce:	6e25      	ldr	r5, [r4, #96]	@ 0x60
    tmp21 = tmp11 + tmp13;
 80122d0:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80122d2:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80122d4:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 80122d8:	9303      	str	r3, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80122da:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80122dc:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	@ 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80122e0:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80122e2:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	@ 0x30
    tmp24 = tmp10 - tmp12;
 80122e6:	9002      	str	r0, [sp, #8]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80122e8:	f640 10e3 	movw	r0, #2531	@ 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80122ec:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80122ee:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 80122f2:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80122f6:	f8d4 50e0 	ldr.w	r5, [r4, #224]	@ 0xe0
 80122fa:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 80122fc:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8012300:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012302:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012306:	f641 606f 	movw	r0, #7791	@ 0x1e6f
 801230a:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801230e:	f642 40b3 	movw	r0, #11443	@ 0x2cb3
    z4 = z5 + tmp12;
 8012312:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012316:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801231a:	f240 7014 	movw	r0, #1812	@ 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801231e:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012322:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012324:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012326:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801232a:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801232c:	1b86      	subs	r6, r0, r6

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801232e:	9805      	ldr	r0, [sp, #20]
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8012330:	eba3 030e 	sub.w	r3, r3, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012334:	f642 0e53 	movw	lr, #10323	@ 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012338:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801233a:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801233e:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8012342:	009b      	lsls	r3, r3, #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012344:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012348:	f241 4a8c 	movw	sl, #5260	@ 0x148c
 801234c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012350:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012354:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012358:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801235c:	442a      	add	r2, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801235e:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012362:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012366:	12ed      	asrs	r5, r5, #11
 8012368:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801236c:	ea4f 25ec 	mov.w	r5, ip, asr #11
 8012370:	f8c1 511c 	str.w	r5, [r1, #284]	@ 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012374:	eb07 050e 	add.w	r5, r7, lr
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012378:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801237c:	12ed      	asrs	r5, r5, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801237e:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012380:	61cd      	str	r5, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8012382:	eb03 25e0 	add.w	r5, r3, r0, asr #11
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8012386:	ebc3 23e0 	rsb	r3, r3, r0, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801238a:	f8c1 70fc 	str.w	r7, [r1, #252]	@ 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801238e:	63cd      	str	r5, [r1, #60]	@ 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8012390:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012394:	9b03      	ldr	r3, [sp, #12]
 8012396:	4413      	add	r3, r2
 8012398:	12db      	asrs	r3, r3, #11
 801239a:	65cb      	str	r3, [r1, #92]	@ 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801239c:	9b03      	ldr	r3, [sp, #12]
 801239e:	1a9b      	subs	r3, r3, r2
 80123a0:	12db      	asrs	r3, r3, #11
 80123a2:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80123a6:	9b02      	ldr	r3, [sp, #8]
 80123a8:	4433      	add	r3, r6
 80123aa:	12db      	asrs	r3, r3, #11
 80123ac:	67cb      	str	r3, [r1, #124]	@ 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80123ae:	9b02      	ldr	r3, [sp, #8]
 80123b0:	1b9b      	subs	r3, r3, r6
 80123b2:	12db      	asrs	r3, r3, #11
 80123b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123b8:	9b06      	ldr	r3, [sp, #24]
 80123ba:	455b      	cmp	r3, fp
 80123bc:	f47f af53 	bne.w	8012266 <jpeg_idct_10x10+0x22>
 80123c0:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 80123c2:	a908      	add	r1, sp, #32
 80123c4:	f1a3 0b04 	sub.w	fp, r3, #4
 80123c8:	3324      	adds	r3, #36	@ 0x24
 80123ca:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80123cc:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80123d0:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80123d4:	9a62      	ldr	r2, [sp, #392]	@ 0x188
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80123d6:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 80123d8:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80123dc:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80123de:	f242 429d 	movw	r2, #9373	@ 0x249d
    outptr = output_buf[ctr] + output_col;
 80123e2:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80123e4:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80123e8:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80123ec:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80123f0:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80123f2:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80123f4:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80123f8:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80123fa:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 80123fe:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012402:	006d      	lsls	r5, r5, #1
 8012404:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8012408:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801240c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801240e:	19eb      	adds	r3, r5, r7
 8012410:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012412:	f241 0071 	movw	r0, #4209	@ 0x1071
 8012416:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801241a:	484a      	ldr	r0, [pc, #296]	@ (8012544 <jpeg_idct_10x10+0x300>)
 801241c:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8012420:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8012424:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8012426:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 801242a:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801242c:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 801242e:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012430:	f640 10e3 	movw	r0, #2531	@ 0x9e3
    tmp23 = tmp11 - tmp13;
 8012434:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8012436:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 801243a:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 801243e:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8012442:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012444:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012448:	f641 606f 	movw	r0, #7791	@ 0x1e6f
 801244c:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8012450:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8012454:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012458:	f642 40b3 	movw	r0, #11443	@ 0x2cb3
 801245c:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012460:	f240 7014 	movw	r0, #1812	@ 0x714
 8012464:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012468:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801246a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801246e:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012472:	f642 0853 	movw	r8, #10323	@ 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012476:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801247a:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801247c:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012480:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012484:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012488:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801248c:	f241 4a8c 	movw	sl, #5260	@ 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012490:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012492:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012496:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801249a:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801249c:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80124a0:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80124a4:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124a8:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80124aa:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124ac:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80124b0:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124b2:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124b6:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80124b8:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80124bc:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124c0:	5d5d      	ldrb	r5, [r3, r5]
 80124c2:	9b62      	ldr	r3, [sp, #392]	@ 0x188
 80124c4:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124c6:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124c8:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124ca:	f813 500c 	ldrb.w	r5, [r3, ip]
 80124ce:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124d0:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124d4:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 80124d8:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80124dc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124e0:	5d5d      	ldrb	r5, [r3, r5]
 80124e2:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124e4:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124e6:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124e8:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124ea:	181d      	adds	r5, r3, r0
 80124ec:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80124ee:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124f2:	5d5d      	ldrb	r5, [r3, r5]
 80124f4:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80124f6:	9b02      	ldr	r3, [sp, #8]
 80124f8:	1a1b      	subs	r3, r3, r0
 80124fa:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80124fc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012500:	5cc3      	ldrb	r3, [r0, r3]
 8012502:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012504:	9b04      	ldr	r3, [sp, #16]
 8012506:	4413      	add	r3, r2
			    & RANGE_MASK];
 8012508:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801250c:	5cc3      	ldrb	r3, [r0, r3]
 801250e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012510:	9b04      	ldr	r3, [sp, #16]
 8012512:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8012514:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012518:	5cc3      	ldrb	r3, [r0, r3]
 801251a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	4433      	add	r3, r6
			    & RANGE_MASK];
 8012520:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012524:	5cc3      	ldrb	r3, [r0, r3]
 8012526:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012528:	9b03      	ldr	r3, [sp, #12]
 801252a:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 801252c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012530:	5cc3      	ldrb	r3, [r0, r3]
 8012532:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8012534:	9b07      	ldr	r3, [sp, #28]
 8012536:	455b      	cmp	r3, fp
 8012538:	f47f af48 	bne.w	80123cc <jpeg_idct_10x10+0x188>
  }
}
 801253c:	b059      	add	sp, #356	@ 0x164
 801253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012542:	bf00      	nop
 8012544:	ffffba5c 	.word	0xffffba5c

08012548 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	b0e5      	sub	sp, #404	@ 0x194
 801254e:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8012550:	f1a2 0b02 	sub.w	fp, r2, #2
 8012554:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012556:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 801255a:	3380      	adds	r3, #128	@ 0x80
 801255c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801255e:	1f0b      	subs	r3, r1, #4
 8012560:	9302      	str	r3, [sp, #8]
 8012562:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8012566:	aa0c      	add	r2, sp, #48	@ 0x30
 8012568:	930a      	str	r3, [sp, #40]	@ 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801256a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801256c:	f642 3e6c 	movw	lr, #11116	@ 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012570:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012574:	f244 2958 	movw	r9, #16984	@ 0x4258
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012578:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801257c:	3204      	adds	r2, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801257e:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012582:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012584:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012586:	f9bb 0020 	ldrsh.w	r0, [fp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801258a:	f8d1 5080 	ldr.w	r5, [r1, #128]	@ 0x80
    tmp10 <<= CONST_BITS;
 801258e:	035b      	lsls	r3, r3, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012590:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012592:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	@ 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012596:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012598:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801259c:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801259e:	f8d1 50c0 	ldr.w	r5, [r1, #192]	@ 0xc0
 80125a2:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80125a4:	f245 157e 	movw	r5, #20862	@ 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80125a8:	1a27      	subs	r7, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80125aa:	eba4 0c06 	sub.w	ip, r4, r6
 80125ae:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80125b2:	f640 55c9 	movw	r5, #3529	@ 0xdc9
 80125b6:	436f      	muls	r7, r5
    z4 = z1 + z3;
 80125b8:	1985      	adds	r5, r0, r6
    z4 -= z2;
 80125ba:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80125bc:	fb0e 3301 	mla	r3, lr, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80125c0:	eb0c 0e07 	add.w	lr, ip, r7
    z4 -= z2;
 80125c4:	9109      	str	r1, [sp, #36]	@ 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 80125c6:	449e      	add	lr, r3
 80125c8:	49d0      	ldr	r1, [pc, #832]	@ (801290c <jpeg_idct_11x11+0x3c4>)
 80125ca:	fb01 e104 	mla	r1, r1, r4, lr
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80125ce:	f244 3eb5 	movw	lr, #17333	@ 0x43b5
 80125d2:	fb0e 3e06 	mla	lr, lr, r6, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80125d6:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80125d8:	eb0e 010c 	add.w	r1, lr, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80125dc:	f44f 6e4c 	mov.w	lr, #3264	@ 0xcc0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80125e0:	9104      	str	r1, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80125e2:	49cb      	ldr	r1, [pc, #812]	@ (8012910 <jpeg_idct_11x11+0x3c8>)
 80125e4:	fb01 3c00 	mla	ip, r1, r0, r3
 80125e8:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125ec:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	@ 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125f0:	f9bb c050 	ldrsh.w	ip, [fp, #80]	@ 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80125f4:	9105      	str	r1, [sp, #20]
    tmp24 += tmp25;
 80125f6:	49c7      	ldr	r1, [pc, #796]	@ (8012914 <jpeg_idct_11x11+0x3cc>)
 80125f8:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80125fc:	f601 31be 	addw	r1, r1, #3006	@ 0xbbe
 8012600:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012604:	f643 6639 	movw	r6, #15929	@ 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012608:	9106      	str	r1, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 801260a:	49c3      	ldr	r1, [pc, #780]	@ (8012918 <jpeg_idct_11x11+0x3d0>)
 801260c:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801260e:	fb06 0004 	mla	r0, r6, r4, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012612:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012616:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	@ 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801261a:	1941      	adds	r1, r0, r5
 801261c:	9107      	str	r1, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801261e:	9902      	ldr	r1, [sp, #8]
 8012620:	6a08      	ldr	r0, [r1, #32]
 8012622:	4344      	muls	r4, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012624:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 8012626:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012628:	f8d1 00a0 	ldr.w	r0, [r1, #160]	@ 0xa0
 801262c:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012630:	f8d1 00e0 	ldr.w	r0, [r1, #224]	@ 0xe0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012634:	49b9      	ldr	r1, [pc, #740]	@ (801291c <jpeg_idct_11x11+0x3d4>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012636:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8012638:	19e0      	adds	r0, r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801263a:	eb04 0a0c 	add.w	sl, r4, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801263e:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012642:	eb04 0806 	add.w	r8, r4, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012646:	4435      	add	r5, r6
 8012648:	fb0e f505 	mul.w	r5, lr, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 801264c:	f641 4e6a 	movw	lr, #7274	@ 0x1c6a
 8012650:	fb0e f000 	mul.w	r0, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012654:	f241 5e74 	movw	lr, #5492	@ 0x1574
 8012658:	fb0e fa0a 	mul.w	sl, lr, sl
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801265c:	f640 3eb8 	movw	lr, #3000	@ 0xbb8
 8012660:	fb0e 5808 	mla	r8, lr, r8, r5
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012664:	eb00 0e0a 	add.w	lr, r0, sl
 8012668:	44c6      	add	lr, r8
 801266a:	fb01 ee04 	mla	lr, r1, r4, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 801266e:	eb07 040c 	add.w	r4, r7, ip
 8012672:	f2a1 71ad 	subw	r1, r1, #1965	@ 0x7ad
 8012676:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801267a:	39ef      	subs	r1, #239	@ 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801267c:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012680:	fb01 440c 	mla	r4, r1, ip, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012684:	49a6      	ldr	r1, [pc, #664]	@ (8012920 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012686:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012688:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801268a:	4454      	add	r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801268c:	f244 3a47 	movw	sl, #17223	@ 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012690:	4348      	muls	r0, r1
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012692:	9904      	ldr	r1, [sp, #16]
    tmp11 += z1;
 8012694:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012696:	fb0a 0006 	mla	r0, sl, r6, r0
 801269a:	4440      	add	r0, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801269c:	f242 080b 	movw	r8, #8203	@ 0x200b
 80126a0:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80126a4:	f8df 8280 	ldr.w	r8, [pc, #640]	@ 8012928 <jpeg_idct_11x11+0x3e0>
 80126a8:	fb08 cc07 	mla	ip, r8, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80126ac:	4f9d      	ldr	r7, [pc, #628]	@ (8012924 <jpeg_idct_11x11+0x3dc>)
 80126ae:	fb07 cc06 	mla	ip, r7, r6, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80126b2:	44ac      	add	ip, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80126b4:	eb01 050e 	add.w	r5, r1, lr
 80126b8:	12ed      	asrs	r5, r5, #11
 80126ba:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80126be:	eba1 050e 	sub.w	r5, r1, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80126c2:	9903      	ldr	r1, [sp, #12]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80126c4:	12ed      	asrs	r5, r5, #11
 80126c6:	f8c2 513c 	str.w	r5, [r2, #316]	@ 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80126ca:	eb01 0509 	add.w	r5, r1, r9
 80126ce:	12ed      	asrs	r5, r5, #11
 80126d0:	61d5      	str	r5, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80126d2:	eba1 0509 	sub.w	r5, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80126d6:	9906      	ldr	r1, [sp, #24]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80126d8:	12ed      	asrs	r5, r5, #11
 80126da:	f8c2 511c 	str.w	r5, [r2, #284]	@ 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80126de:	190d      	adds	r5, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80126e0:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80126e2:	12ed      	asrs	r5, r5, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80126e4:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80126e6:	63d5      	str	r5, [r2, #60]	@ 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126e8:	9905      	ldr	r1, [sp, #20]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80126ea:	f8c2 40fc 	str.w	r4, [r2, #252]	@ 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126ee:	180c      	adds	r4, r1, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126f0:	1a08      	subs	r0, r1, r0
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80126f2:	9907      	ldr	r1, [sp, #28]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126f4:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126f6:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126f8:	f8c2 00dc 	str.w	r0, [r2, #220]	@ 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80126fc:	eb01 000c 	add.w	r0, r1, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012700:	65d4      	str	r4, [r2, #92]	@ 0x5c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012702:	12c0      	asrs	r0, r0, #11
 8012704:	67d0      	str	r0, [r2, #124]	@ 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012706:	eba1 000c 	sub.w	r0, r1, ip
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 801270a:	9909      	ldr	r1, [sp, #36]	@ 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801270c:	12c0      	asrs	r0, r0, #11
 801270e:	f8c2 00bc 	str.w	r0, [r2, #188]	@ 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012712:	f645 00ad 	movw	r0, #22701	@ 0x58ad
 8012716:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 801271a:	12db      	asrs	r3, r3, #11
 801271c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012722:	455b      	cmp	r3, fp
 8012724:	f47f af21 	bne.w	801256a <jpeg_idct_11x11+0x22>
 8012728:	9b08      	ldr	r3, [sp, #32]
 801272a:	3b04      	subs	r3, #4
 801272c:	9303      	str	r3, [sp, #12]
 801272e:	9b08      	ldr	r3, [sp, #32]
 8012730:	3328      	adds	r3, #40	@ 0x28
 8012732:	930b      	str	r3, [sp, #44]	@ 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8012734:	ab0c      	add	r3, sp, #48	@ 0x30
 8012736:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012738:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801273a:	f245 107e 	movw	r0, #20862	@ 0x517e
    z1 = (INT32) wsptr[2];
 801273e:	9a02      	ldr	r2, [sp, #8]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012740:	f244 2a58 	movw	sl, #16984	@ 0x4258
    outptr = output_buf[ctr] + output_col;
 8012744:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z2 = (INT32) wsptr[4];
 8012748:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 801274a:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 801274c:	9109      	str	r1, [sp, #36]	@ 0x24
 801274e:	9303      	str	r3, [sp, #12]
 8012750:	460b      	mov	r3, r1
 8012752:	996e      	ldr	r1, [sp, #440]	@ 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012754:	eba6 0e07 	sub.w	lr, r6, r7
    z1 = (INT32) wsptr[2];
 8012758:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 801275a:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801275c:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 801275e:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012760:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012764:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012768:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801276a:	f640 50c9 	movw	r0, #3529	@ 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801276e:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012770:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012772:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 8012776:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8012778:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 801277a:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801277c:	f642 306c 	movw	r0, #11116	@ 0x2b6c
 8012780:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012784:	eb0e 000c 	add.w	r0, lr, ip
 8012788:	4a60      	ldr	r2, [pc, #384]	@ (801290c <jpeg_idct_11x11+0x3c4>)
 801278a:	4418      	add	r0, r3
 801278c:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012790:	f244 30b5 	movw	r0, #17333	@ 0x43b5
 8012794:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012798:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801279a:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801279e:	986e      	ldr	r0, [sp, #440]	@ 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80127a0:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80127a2:	4a5b      	ldr	r2, [pc, #364]	@ (8012910 <jpeg_idct_11x11+0x3c8>)
 80127a4:	fb02 3e04 	mla	lr, r2, r4, r3
 80127a8:	eb0e 020c 	add.w	r2, lr, ip
 80127ac:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 80127ae:	4a59      	ldr	r2, [pc, #356]	@ (8012914 <jpeg_idct_11x11+0x3cc>)
 80127b0:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80127b4:	f602 32be 	addw	r2, r2, #3006	@ 0xbbe
 80127b8:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80127bc:	f643 6739 	movw	r7, #15929	@ 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80127c0:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80127c2:	4a55      	ldr	r2, [pc, #340]	@ (8012918 <jpeg_idct_11x11+0x3d0>)
 80127c4:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80127c6:	fb07 4406 	mla	r4, r7, r6, r4
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80127ca:	f44f 674c 	mov.w	r7, #3264	@ 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80127ce:	1962      	adds	r2, r4, r5
 80127d0:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 80127d2:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 80127d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 80127d8:	6855      	ldr	r5, [r2, #4]
    z3 = (INT32) wsptr[5];
 80127da:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 80127de:	eb05 040e 	add.w	r4, r5, lr
    z4 = (INT32) wsptr[7];
 80127e2:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80127e6:	eb05 0b08 	add.w	fp, r5, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 80127ea:	4a4c      	ldr	r2, [pc, #304]	@ (801291c <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80127ec:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80127f0:	eb05 090c 	add.w	r9, r5, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80127f4:	4466      	add	r6, ip
 80127f6:	437e      	muls	r6, r7
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80127f8:	f641 476a 	movw	r7, #7274	@ 0x1c6a
 80127fc:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80127fe:	f241 5774 	movw	r7, #5492	@ 0x1574
 8012802:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012806:	f640 37b8 	movw	r7, #3000	@ 0xbb8
 801280a:	fb07 6909 	mla	r9, r7, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 801280e:	eb04 070b 	add.w	r7, r4, fp
 8012812:	444f      	add	r7, r9
 8012814:	fb02 7705 	mla	r7, r2, r5, r7
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012818:	eb0e 0508 	add.w	r5, lr, r8
 801281c:	f2a2 72ad 	subw	r2, r2, #1965	@ 0x7ad
 8012820:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012824:	3aef      	subs	r2, #239	@ 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012826:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801282a:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801282e:	4a3c      	ldr	r2, [pc, #240]	@ (8012920 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012830:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012832:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012836:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012838:	f244 3b47 	movw	fp, #17223	@ 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801283c:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801283e:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8012840:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012842:	fb0b 440c 	mla	r4, fp, ip, r4
 8012846:	444c      	add	r4, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012848:	f242 090b 	movw	r9, #8203	@ 0x200b
 801284c:	fb09 f808 	mul.w	r8, r9, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012850:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8012928 <jpeg_idct_11x11+0x3e0>
 8012854:	fb09 880e 	mla	r8, r9, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012858:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 8012924 <jpeg_idct_11x11+0x3dc>
 801285c:	fb0e 880c 	mla	r8, lr, ip, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012860:	44b0      	add	r8, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012862:	19d6      	adds	r6, r2, r7
 8012864:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012866:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801286a:	5d96      	ldrb	r6, [r2, r6]
 801286c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801286e:	5416      	strb	r6, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012870:	9a05      	ldr	r2, [sp, #20]
 8012872:	1bd0      	subs	r0, r2, r7
 8012874:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012876:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801287a:	5c10      	ldrb	r0, [r2, r0]
 801287c:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801287e:	9a04      	ldr	r2, [sp, #16]
 8012880:	eb02 000a 	add.w	r0, r2, sl
 8012884:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012886:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801288a:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801288c:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801288e:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012890:	eba2 000a 	sub.w	r0, r2, sl
 8012894:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012896:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801289a:	5c10      	ldrb	r0, [r2, r0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801289c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801289e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80128a0:	1950      	adds	r0, r2, r5
 80128a2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128a4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80128a8:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80128aa:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80128ac:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80128ae:	1b50      	subs	r0, r2, r5
 80128b0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128b2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80128b6:	5c10      	ldrb	r0, [r2, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128b8:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80128ba:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128bc:	1910      	adds	r0, r2, r4
 80128be:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128c0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128c4:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128c6:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128c8:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128ca:	1b10      	subs	r0, r2, r4
 80128cc:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128ce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128d2:	5c10      	ldrb	r0, [r2, r0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128d4:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128d6:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128d8:	eb02 0008 	add.w	r0, r2, r8
 80128dc:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128de:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128e2:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80128e4:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128e6:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80128e8:	eba2 0008 	sub.w	r0, r2, r8
 80128ec:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128ee:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80128f2:	5c10      	ldrb	r0, [r2, r0]
 80128f4:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80128f6:	f645 00ad 	movw	r0, #22701	@ 0x58ad
 80128fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128fc:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8012900:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012902:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8012906:	5cd3      	ldrb	r3, [r2, r3]
 8012908:	e010      	b.n	801292c <jpeg_idct_11x11+0x3e4>
 801290a:	bf00      	nop
 801290c:	ffffc5b4 	.word	0xffffc5b4
 8012910:	ffffcf91 	.word	0xffffcf91
 8012914:	ffffdb05 	.word	0xffffdb05
 8012918:	ffffd37d 	.word	0xffffd37d
 801291c:	ffffe276 	.word	0xffffe276
 8012920:	ffffc675 	.word	0xffffc675
 8012924:	ffffca16 	.word	0xffffca16
 8012928:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 801292c:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801292e:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 8012930:	9b02      	ldr	r3, [sp, #8]
 8012932:	3320      	adds	r3, #32
 8012934:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8012936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012938:	4293      	cmp	r3, r2
 801293a:	f47f aefd 	bne.w	8012738 <jpeg_idct_11x11+0x1f0>
  }
}
 801293e:	b065      	add	sp, #404	@ 0x194
 8012940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012944 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012948:	b0eb      	sub	sp, #428	@ 0x1ac
 801294a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 801294c:	f1a2 0802 	sub.w	r8, r2, #2
 8012950:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012952:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8012956:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801295a:	1f0b      	subs	r3, r1, #4
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	f102 030e 	add.w	r3, r2, #14
 8012962:	9309      	str	r3, [sp, #36]	@ 0x24
  wsptr = workspace;
 8012964:	ab0a      	add	r3, sp, #40	@ 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012966:	9900      	ldr	r1, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012968:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801296a:	f938 cf02 	ldrsh.w	ip, [r8, #2]!
 801296e:	f851 2f04 	ldr.w	r2, [r1, #4]!
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012972:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012976:	f8d1 0080 	ldr.w	r0, [r1, #128]	@ 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801297a:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801297e:	f9b8 2040 	ldrsh.w	r2, [r8, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012982:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 8012984:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012988:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801298a:	f242 7031 	movw	r0, #10033	@ 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801298e:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	@ 0x60
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012992:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012996:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012998:	6c08      	ldr	r0, [r1, #64]	@ 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801299a:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801299e:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 80129a0:	eb0c 0702 	add.w	r7, ip, r2
    tmp11 = z3 - z4;
 80129a4:	ebac 0202 	sub.w	r2, ip, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80129a8:	fb01 f006 	mul.w	r0, r1, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80129ac:	9900      	ldr	r1, [sp, #0]
 80129ae:	f8d1 50c0 	ldr.w	r5, [r1, #192]	@ 0xc0
 80129b2:	436c      	muls	r4, r5
    z2 <<= CONST_BITS;
 80129b4:	0364      	lsls	r4, r4, #13

    tmp12 = z1 - z2;
 80129b6:	ebc4 3546 	rsb	r5, r4, r6, lsl #13

    tmp21 = z3 + tmp12;
 80129ba:	eb0c 0105 	add.w	r1, ip, r5
 80129be:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 80129c0:	ebac 0105 	sub.w	r1, ip, r5

    tmp12 = z4 + z2;
 80129c4:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 80129c6:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 80129ca:	9102      	str	r1, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80129cc:	f641 368d 	movw	r6, #7053	@ 0x1b8d
    tmp25 = tmp10 - tmp12;
 80129d0:	1b79      	subs	r1, r7, r5
    tmp12 = z4 - z1 - z2;
 80129d2:	1b00      	subs	r0, r0, r4
    tmp20 = tmp10 + tmp12;
 80129d4:	eb07 0b05 	add.w	fp, r7, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80129d8:	f9b8 7010 	ldrsh.w	r7, [r8, #16]
    tmp25 = tmp10 - tmp12;
 80129dc:	9103      	str	r1, [sp, #12]
    tmp22 = tmp11 + tmp12;
 80129de:	1811      	adds	r1, r2, r0
    tmp23 = tmp11 - tmp12;
 80129e0:	1a12      	subs	r2, r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80129e2:	f9b8 c030 	ldrsh.w	ip, [r8, #48]	@ 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80129e6:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	@ 0x50
    tmp23 = tmp11 - tmp12;
 80129ea:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80129ec:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80129ee:	9104      	str	r1, [sp, #16]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80129f0:	6a12      	ldr	r2, [r2, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80129f2:	9900      	ldr	r1, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80129f4:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80129f6:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80129f8:	f8d1 00e0 	ldr.w	r0, [r1, #224]	@ 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80129fc:	f642 11cf 	movw	r1, #10703	@ 0x29cf
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a00:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8012a02:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a06:	9a00      	ldr	r2, [sp, #0]
 8012a08:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012a0c:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012a10:	49b9      	ldr	r1, [pc, #740]	@ (8012cf8 <jpeg_idct_12x12+0x3b4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a12:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a14:	f9b8 2070 	ldrsh.w	r2, [r8, #112]	@ 0x70
    tmp10 = z1 + z3;
 8012a18:	eb07 0a05 	add.w	sl, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a1c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012a1e:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012a22:	eb02 0e0a 	add.w	lr, r2, sl
 8012a26:	fb06 fe0e 	mul.w	lr, r6, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012a2a:	f640 065b 	movw	r6, #2139	@ 0x85b
 8012a2e:	fb06 ea0a 	mla	sl, r6, sl, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012a32:	f640 06f7 	movw	r6, #2295	@ 0x8f7
 8012a36:	eb04 010a 	add.w	r1, r4, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012a3a:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012a3e:	fb06 1107 	mla	r1, r6, r7, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012a42:	18ae      	adds	r6, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012a44:	9106      	str	r1, [sp, #24]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012a46:	49ad      	ldr	r1, [pc, #692]	@ (8012cfc <jpeg_idct_12x12+0x3b8>)
 8012a48:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012a4a:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012a4c:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012a4e:	49ac      	ldr	r1, [pc, #688]	@ (8012d00 <jpeg_idct_12x12+0x3bc>)
 8012a50:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012a54:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8012a56:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012a5a:	f241 1c51 	movw	ip, #4433	@ 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012a5e:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012a60:	f243 2ac6 	movw	sl, #12998	@ 0x32c6
 8012a64:	fb0a 4402 	mla	r4, sl, r2, r4
 8012a68:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012a6a:	49a6      	ldr	r1, [pc, #664]	@ (8012d04 <jpeg_idct_12x12+0x3c0>)
 8012a6c:	fb01 0007 	mla	r0, r1, r7, r0
 8012a70:	49a5      	ldr	r1, [pc, #660]	@ (8012d08 <jpeg_idct_12x12+0x3c4>)
 8012a72:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8012a76:	1aba      	subs	r2, r7, r2
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012a78:	1957      	adds	r7, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012a7a:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012a7c:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012a80:	f641 0c7e 	movw	ip, #6270	@ 0x187e
 8012a84:	fb0c 7c02 	mla	ip, ip, r2, r7
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012a88:	4aa0      	ldr	r2, [pc, #640]	@ (8012d0c <jpeg_idct_12x12+0x3c8>)
 8012a8a:	fb02 7705 	mla	r7, r2, r5, r7

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012a8e:	9a06      	ldr	r2, [sp, #24]
 8012a90:	445a      	add	r2, fp
 8012a92:	12d2      	asrs	r2, r2, #11
 8012a94:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012a98:	9a06      	ldr	r2, [sp, #24]
 8012a9a:	ebab 0b02 	sub.w	fp, fp, r2
 8012a9e:	ea4f 22eb 	mov.w	r2, fp, asr #11
 8012aa2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012aa6:	9a01      	ldr	r2, [sp, #4]
 8012aa8:	4462      	add	r2, ip
 8012aaa:	12d2      	asrs	r2, r2, #11
 8012aac:	61da      	str	r2, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012aae:	9a01      	ldr	r2, [sp, #4]
 8012ab0:	eba2 020c 	sub.w	r2, r2, ip
 8012ab4:	12d2      	asrs	r2, r2, #11
 8012ab6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012aba:	9a04      	ldr	r2, [sp, #16]
 8012abc:	4432      	add	r2, r6
 8012abe:	12d2      	asrs	r2, r2, #11
 8012ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012ac2:	9a04      	ldr	r2, [sp, #16]
 8012ac4:	1b92      	subs	r2, r2, r6
 8012ac6:	12d2      	asrs	r2, r2, #11
 8012ac8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012acc:	9a05      	ldr	r2, [sp, #20]
 8012ace:	4422      	add	r2, r4
 8012ad0:	12d2      	asrs	r2, r2, #11
 8012ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012ad4:	9a05      	ldr	r2, [sp, #20]
 8012ad6:	1b12      	subs	r2, r2, r4
 8012ad8:	12d2      	asrs	r2, r2, #11
 8012ada:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012ade:	9a02      	ldr	r2, [sp, #8]
 8012ae0:	443a      	add	r2, r7
 8012ae2:	12d2      	asrs	r2, r2, #11
 8012ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012ae6:	9a02      	ldr	r2, [sp, #8]
 8012ae8:	1bd2      	subs	r2, r2, r7
 8012aea:	12d2      	asrs	r2, r2, #11
 8012aec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012af0:	9a03      	ldr	r2, [sp, #12]
 8012af2:	4402      	add	r2, r0
 8012af4:	12d2      	asrs	r2, r2, #11
 8012af6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012afa:	9a03      	ldr	r2, [sp, #12]
 8012afc:	1a12      	subs	r2, r2, r0
 8012afe:	12d2      	asrs	r2, r2, #11
 8012b00:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b06:	4542      	cmp	r2, r8
 8012b08:	f47f af2d 	bne.w	8012966 <jpeg_idct_12x12+0x22>
 8012b0c:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8012b0e:	aa0a      	add	r2, sp, #40	@ 0x28
 8012b10:	f1a3 0a04 	sub.w	sl, r3, #4
 8012b14:	332c      	adds	r3, #44	@ 0x2c
 8012b16:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012b18:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012b1c:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8012b1e:	9974      	ldr	r1, [sp, #464]	@ 0x1d0
    z2 = (INT32) wsptr[6];
 8012b20:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 8012b24:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 8012b28:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8012b2a:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b2c:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8012b30:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8012b32:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 8012b36:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b3a:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8012b3c:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012b3e:	f242 7131 	movw	r1, #10033	@ 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012b42:	f642 33b6 	movw	r3, #11190	@ 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012b46:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012b48:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8012b4c:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8012b50:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 8012b54:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 8012b56:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8012b5a:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8012b5e:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8012b62:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 8012b66:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8012b68:	1b09      	subs	r1, r1, r4
    tmp25 = tmp10 - tmp12;
 8012b6a:	eba6 030c 	sub.w	r3, r6, ip
    z3 = (INT32) wsptr[5];
 8012b6e:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 8012b72:	eb06 070c 	add.w	r7, r6, ip
    tmp25 = tmp10 - tmp12;
 8012b76:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8012b78:	1843      	adds	r3, r0, r1
    z4 = (INT32) wsptr[7];
 8012b7a:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012b7e:	f641 368d 	movw	r6, #7053	@ 0x1b8d
    tmp22 = tmp11 + tmp12;
 8012b82:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8012b84:	1a43      	subs	r3, r0, r1
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012b86:	f642 11cf 	movw	r1, #10703	@ 0x29cf
    tmp23 = tmp11 - tmp12;
 8012b8a:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012b8c:	f852 3c14 	ldr.w	r3, [r2, #-20]
 8012b90:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012b94:	4958      	ldr	r1, [pc, #352]	@ (8012cf8 <jpeg_idct_12x12+0x3b4>)
 8012b96:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8012b98:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8012b9c:	eb03 0b05 	add.w	fp, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012ba0:	eb04 0c0b 	add.w	ip, r4, fp
 8012ba4:	fb06 fc0c 	mul.w	ip, r6, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012ba8:	f640 065b 	movw	r6, #2139	@ 0x85b
 8012bac:	fb06 cb0b 	mla	fp, r6, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012bb0:	f640 06f7 	movw	r6, #2295	@ 0x8f7
 8012bb4:	eb00 0e0b 	add.w	lr, r0, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012bb8:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012bbc:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012bc0:	192e      	adds	r6, r5, r4
 8012bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8012cfc <jpeg_idct_12x12+0x3b8>)
 8012bc4:	fb03 f806 	mul.w	r8, r3, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012bc8:	f6a3 53db 	subw	r3, r3, #3547	@ 0xddb
 8012bcc:	eb01 0608 	add.w	r6, r1, r8
 8012bd0:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012bd4:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012bd8:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012bda:	f243 2bc6 	movw	fp, #12998	@ 0x32c6
 8012bde:	fb0b 0004 	mla	r0, fp, r4, r0
 8012be2:	eb00 0b08 	add.w	fp, r0, r8
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012be6:	4847      	ldr	r0, [pc, #284]	@ (8012d04 <jpeg_idct_12x12+0x3c0>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012be8:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012bec:	fb00 1103 	mla	r1, r0, r3, r1
 8012bf0:	4b45      	ldr	r3, [pc, #276]	@ (8012d08 <jpeg_idct_12x12+0x3c4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012bf2:	9874      	ldr	r0, [sp, #464]	@ 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012bf4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8012bf8:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8012bfc:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 8012bfe:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012c02:	4461      	add	r1, ip
    z2 -= z3;
 8012c04:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012c06:	4b41      	ldr	r3, [pc, #260]	@ (8012d0c <jpeg_idct_12x12+0x3c8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012c08:	eb04 0c05 	add.w	ip, r4, r5
 8012c0c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012c10:	f641 087e 	movw	r8, #6270	@ 0x187e
 8012c14:	fb08 c804 	mla	r8, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c18:	eb07 040e 	add.w	r4, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c1c:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012c20:	fb03 cc05 	mla	ip, r3, r5, ip
			     & RANGE_MASK];
 8012c24:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c28:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012c2a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c2e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012c32:	541c      	strb	r4, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c34:	9b00      	ldr	r3, [sp, #0]
 8012c36:	f819 4007 	ldrb.w	r4, [r9, r7]
 8012c3a:	72dc      	strb	r4, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c3c:	9b01      	ldr	r3, [sp, #4]
 8012c3e:	eb03 0408 	add.w	r4, r3, r8
 8012c42:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012c44:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c48:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012c4c:	705c      	strb	r4, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012c4e:	9b01      	ldr	r3, [sp, #4]
 8012c50:	eba3 0408 	sub.w	r4, r3, r8
			     & RANGE_MASK];
 8012c54:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012c58:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012c5c:	9b00      	ldr	r3, [sp, #0]
 8012c5e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012c60:	9b04      	ldr	r3, [sp, #16]
 8012c62:	199c      	adds	r4, r3, r6
 8012c64:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012c66:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012c6a:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012c6e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012c70:	9b04      	ldr	r3, [sp, #16]
 8012c72:	1b9c      	subs	r4, r3, r6
 8012c74:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012c76:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012c7a:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012c7e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012c80:	9b05      	ldr	r3, [sp, #20]
 8012c82:	eb03 040b 	add.w	r4, r3, fp
 8012c86:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012c88:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012c8c:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012c90:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012c92:	9b05      	ldr	r3, [sp, #20]
 8012c94:	eba3 000b 	sub.w	r0, r3, fp
 8012c98:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012c9a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012c9e:	f819 0000 	ldrb.w	r0, [r9, r0]
 8012ca2:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012ca4:	9b02      	ldr	r3, [sp, #8]
 8012ca6:	eb03 000c 	add.w	r0, r3, ip
 8012caa:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012cac:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012cb0:	f819 0000 	ldrb.w	r0, [r9, r0]
 8012cb4:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012cb6:	9b02      	ldr	r3, [sp, #8]
 8012cb8:	eba3 000c 	sub.w	r0, r3, ip
 8012cbc:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012cbe:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012cc2:	f819 0000 	ldrb.w	r0, [r9, r0]
 8012cc6:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012cc8:	9b03      	ldr	r3, [sp, #12]
 8012cca:	1858      	adds	r0, r3, r1
 8012ccc:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012cce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012cd2:	f819 0000 	ldrb.w	r0, [r9, r0]
 8012cd6:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012cd8:	9b03      	ldr	r3, [sp, #12]
 8012cda:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8012cdc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012ce0:	f819 1001 	ldrb.w	r1, [r9, r1]
 8012ce4:	9b00      	ldr	r3, [sp, #0]
 8012ce6:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8012ce8:	9b07      	ldr	r3, [sp, #28]
 8012cea:	4553      	cmp	r3, sl
 8012cec:	f47f af14 	bne.w	8012b18 <jpeg_idct_12x12+0x1d4>
  }
}
 8012cf0:	b06b      	add	sp, #428	@ 0x1ac
 8012cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf6:	bf00      	nop
 8012cf8:	ffffeeaf 	.word	0xffffeeaf
 8012cfc:	ffffde8b 	.word	0xffffde8b
 8012d00:	ffffd0b0 	.word	0xffffd0b0
 8012d04:	ffffea5c 	.word	0xffffea5c
 8012d08:	ffffc08c 	.word	0xffffc08c
 8012d0c:	ffffc4df 	.word	0xffffc4df

08012d10 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d14:	b0f7      	sub	sp, #476	@ 0x1dc
 8012d16:	f1a2 0902 	sub.w	r9, r2, #2
 8012d1a:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d1c:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8012d20:	f103 0880 	add.w	r8, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d24:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8012d26:	f1a3 0e04 	sub.w	lr, r3, #4
 8012d2a:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8012d2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d30:	930d      	str	r3, [sp, #52]	@ 0x34
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d32:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012d36:	f242 45f9 	movw	r5, #9465	@ 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d3a:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d3e:	3204      	adds	r2, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012d40:	f9b9 4020 	ldrsh.w	r4, [r9, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d44:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d46:	f9b9 1040 	ldrsh.w	r1, [r9, #64]	@ 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012d4a:	f9b9 0060 	ldrsh.w	r0, [r9, #96]	@ 0x60
    z1 <<= CONST_BITS;
 8012d4e:	035b      	lsls	r3, r3, #13

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012d50:	f9b9 7050 	ldrsh.w	r7, [r9, #80]	@ 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012d54:	f9b9 c070 	ldrsh.w	ip, [r9, #112]	@ 0x70
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012d5c:	9303      	str	r3, [sp, #12]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012d5e:	f8de 3040 	ldr.w	r3, [lr, #64]	@ 0x40
 8012d62:	4363      	muls	r3, r4
 8012d64:	9301      	str	r3, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d66:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012d6a:	9c01      	ldr	r4, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d6c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012d6e:	f8de 30c0 	ldr.w	r3, [lr, #192]	@ 0xc0
 8012d72:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8012d74:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8012d76:	1a09      	subs	r1, r1, r0
 8012d78:	9102      	str	r1, [sp, #8]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012d7a:	f240 3119 	movw	r1, #793	@ 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012d7e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012d80:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
 8012d84:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012d88:	f642 30f1 	movw	r0, #11249	@ 0x2bf1
 8012d8c:	fb00 5004 	mla	r0, r0, r4, r5
 8012d90:	4408      	add	r0, r1
 8012d92:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012d94:	f241 000c 	movw	r0, #4108	@ 0x100c
 8012d98:	4360      	muls	r0, r4
 8012d9a:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012d9c:	f640 457c 	movw	r5, #3196	@ 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012da0:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012da2:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012da6:	f242 15e0 	movw	r5, #8672	@ 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012daa:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012dac:	f44f 6022 	mov.w	r0, #2592	@ 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012db0:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012db2:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012db4:	1a2d      	subs	r5, r5, r0
 8012db6:	440d      	add	r5, r1
 8012db8:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012dba:	4dd9      	ldr	r5, [pc, #868]	@ (8013120 <jpeg_idct_13x13+0x410>)
 8012dbc:	fb05 0004 	mla	r0, r5, r4, r0
 8012dc0:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012dc2:	9803      	ldr	r0, [sp, #12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012dc4:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8012dc6:	f640 51f2 	movw	r1, #3570	@ 0xdf2
 8012dca:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012dcc:	f641 51fe 	movw	r1, #7678	@ 0x1dfe
 8012dd0:	4371      	muls	r1, r6

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012dd2:	4ed4      	ldr	r6, [pc, #848]	@ (8013124 <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012dd4:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8012dd6:	48d4      	ldr	r0, [pc, #848]	@ (8013128 <jpeg_idct_13x13+0x418>)
 8012dd8:	4360      	muls	r0, r4
 8012dda:	1ac0      	subs	r0, r0, r3
 8012ddc:	1a40      	subs	r0, r0, r1
 8012dde:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012de0:	48d2      	ldr	r0, [pc, #840]	@ (801312c <jpeg_idct_13x13+0x41c>)
 8012de2:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012de6:	f8de 0060 	ldr.w	r0, [lr, #96]	@ 0x60
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012dea:	f641 6402 	movw	r4, #7682	@ 0x1e02
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012dee:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012df0:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012df4:	9309      	str	r3, [sp, #36]	@ 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012df6:	f8de 3020 	ldr.w	r3, [lr, #32]
 8012dfa:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012dfc:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	@ 0x30
 8012e00:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e02:	f8de 00a0 	ldr.w	r0, [lr, #160]	@ 0xa0
 8012e06:	4347      	muls	r7, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e08:	f8de 00e0 	ldr.w	r0, [lr, #224]	@ 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012e0c:	eb01 0b03 	add.w	fp, r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e10:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012e14:	f642 2050 	movw	r0, #10832	@ 0x2a50
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012e18:	19cd      	adds	r5, r1, r7
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012e1a:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012e1e:	f242 503e 	movw	r0, #9534	@ 0x253e
 8012e22:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8012e24:	eb01 000c 	add.w	r0, r1, ip
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012e28:	fb04 fa00 	mul.w	sl, r4, r0
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e2c:	4cc0      	ldr	r4, [pc, #768]	@ (8013130 <jpeg_idct_13x13+0x420>)
    tmp15 = z1 + z4;
 8012e2e:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012e30:	eb0b 0005 	add.w	r0, fp, r5
 8012e34:	4450      	add	r0, sl
 8012e36:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012e3a:	4ebe      	ldr	r6, [pc, #760]	@ (8013134 <jpeg_idct_13x13+0x424>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012e3c:	900b      	str	r0, [sp, #44]	@ 0x2c
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012e3e:	19d8      	adds	r0, r3, r7
 8012e40:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012e42:	f641 26cb 	movw	r6, #6859	@ 0x1acb
 8012e46:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e4a:	fb04 0007 	mla	r0, r4, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012e4e:	f604 5411 	addw	r4, r4, #3345	@ 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012e52:	445e      	add	r6, fp
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012e54:	f244 6b94 	movw	fp, #18068	@ 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e58:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012e5a:	eb03 050c 	add.w	r5, r3, ip
 8012e5e:	4365      	muls	r5, r4
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012e60:	4cb5      	ldr	r4, [pc, #724]	@ (8013138 <jpeg_idct_13x13+0x428>)
    tmp11 += tmp14;
 8012e62:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012e64:	fb0b 550c 	mla	r5, fp, ip, r5
    tmp12 += tmp14;
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012e68:	f640 2b33 	movw	fp, #2611	@ 0xa33
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012e6c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012e6e:	eb07 0a0c 	add.w	sl, r7, ip
 8012e72:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012e76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    tmp12 += tmp14;
 8012e78:	4450      	add	r0, sl
    tmp13 += tmp14;
 8012e7a:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012e7c:	f640 25d5 	movw	r5, #2773	@ 0xad5
 8012e80:	4365      	muls	r5, r4
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012e82:	4cae      	ldr	r4, [pc, #696]	@ (801313c <jpeg_idct_13x13+0x42c>)
 8012e84:	fb0b 5101 	mla	r1, fp, r1, r5
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012e88:	f640 4b4e 	movw	fp, #3150	@ 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012e8c:	fb04 1103 	mla	r1, r4, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012e90:	1afb      	subs	r3, r7, r3
 8012e92:	f641 6402 	movw	r4, #7682	@ 0x1e02
 8012e96:	4363      	muls	r3, r4
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012e98:	9c04      	ldr	r4, [sp, #16]
    tmp14 += z1;
 8012e9a:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012e9c:	fb0b 3307 	mla	r3, fp, r7, r3
 8012ea0:	f46f 575f 	mvn.w	r7, #14272	@ 0x37c0
 8012ea4:	fb07 330c 	mla	r3, r7, ip, r3
 8012ea8:	442b      	add	r3, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012eaa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012eac:	1965      	adds	r5, r4, r5
 8012eae:	12ed      	asrs	r5, r5, #11
 8012eb0:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012eb4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012eb6:	1b65      	subs	r5, r4, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012eb8:	9c06      	ldr	r4, [sp, #24]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012eba:	12ed      	asrs	r5, r5, #11
 8012ebc:	f8c2 517c 	str.w	r5, [r2, #380]	@ 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012ec0:	19a5      	adds	r5, r4, r6
 8012ec2:	12ed      	asrs	r5, r5, #11
 8012ec4:	61d5      	str	r5, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012ec6:	1ba5      	subs	r5, r4, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012ec8:	9c05      	ldr	r4, [sp, #20]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012eca:	12ed      	asrs	r5, r5, #11
 8012ecc:	f8c2 515c 	str.w	r5, [r2, #348]	@ 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012ed0:	1825      	adds	r5, r4, r0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012ed2:	1a20      	subs	r0, r4, r0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012ed4:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012ed6:	12c0      	asrs	r0, r0, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012ed8:	63d5      	str	r5, [r2, #60]	@ 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012eda:	f8c2 013c 	str.w	r0, [r2, #316]	@ 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012ede:	9808      	ldr	r0, [sp, #32]
 8012ee0:	4450      	add	r0, sl
 8012ee2:	12c0      	asrs	r0, r0, #11
 8012ee4:	65d0      	str	r0, [r2, #92]	@ 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012ee6:	9808      	ldr	r0, [sp, #32]
 8012ee8:	eba0 000a 	sub.w	r0, r0, sl
 8012eec:	12c0      	asrs	r0, r0, #11
 8012eee:	f8c2 011c 	str.w	r0, [r2, #284]	@ 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ef4:	4408      	add	r0, r1
 8012ef6:	12c0      	asrs	r0, r0, #11
 8012ef8:	67d0      	str	r0, [r2, #124]	@ 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012efc:	1a41      	subs	r1, r0, r1
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012efe:	9803      	ldr	r0, [sp, #12]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012f00:	12c9      	asrs	r1, r1, #11
 8012f02:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012f06:	9907      	ldr	r1, [sp, #28]
 8012f08:	4419      	add	r1, r3
 8012f0a:	12c9      	asrs	r1, r1, #11
 8012f0c:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012f10:	9907      	ldr	r1, [sp, #28]
 8012f12:	1acb      	subs	r3, r1, r3
 8012f14:	12db      	asrs	r3, r3, #11
 8012f16:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012f1a:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8012f1e:	1a5b      	subs	r3, r3, r1
 8012f20:	f642 5141 	movw	r1, #11585	@ 0x2d41
 8012f24:	fb01 0303 	mla	r3, r1, r3, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8012f28:	12db      	asrs	r3, r3, #11
 8012f2a:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012f30:	454b      	cmp	r3, r9
 8012f32:	f47f aefe 	bne.w	8012d32 <jpeg_idct_13x13+0x22>
 8012f36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8012f38:	ac0e      	add	r4, sp, #56	@ 0x38
 8012f3a:	3b04      	subs	r3, #4
 8012f3c:	9303      	str	r3, [sp, #12]
 8012f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f40:	3330      	adds	r3, #48	@ 0x30
 8012f42:	930c      	str	r3, [sp, #48]	@ 0x30
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012f44:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012f46:	f242 45f9 	movw	r5, #9465	@ 0x24f9
    z3 = (INT32) wsptr[4];
 8012f4a:	6920      	ldr	r0, [r4, #16]
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012f4c:	f641 6702 	movw	r7, #7682	@ 0x1e02
    outptr = output_buf[ctr] + output_col;
 8012f50:	f853 2f04 	ldr.w	r2, [r3, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012f54:	3420      	adds	r4, #32
    z4 = (INT32) wsptr[6];
 8012f56:	f854 1c08 	ldr.w	r1, [r4, #-8]
    outptr = output_buf[ctr] + output_col;
 8012f5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012f5c:	9303      	str	r3, [sp, #12]
 8012f5e:	4613      	mov	r3, r2
 8012f60:	9a80      	ldr	r2, [sp, #512]	@ 0x200
    z2 = (INT32) wsptr[2];
 8012f62:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8012f66:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f68:	f854 3c20 	ldr.w	r3, [r4, #-32]
    z3 = (INT32) wsptr[5];
 8012f6c:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f70:	3310      	adds	r3, #16
 8012f72:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8012f74:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8012f76:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012f78:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8012f7a:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012f7c:	f240 3119 	movw	r1, #793	@ 0x319
 8012f80:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012f82:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012f84:	4341      	muls	r1, r0
 8012f86:	9802      	ldr	r0, [sp, #8]
 8012f88:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012f8c:	f642 30f1 	movw	r0, #11249	@ 0x2bf1
 8012f90:	fb00 500e 	mla	r0, r0, lr, r5
 8012f94:	4408      	add	r0, r1
 8012f96:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012f98:	f241 000c 	movw	r0, #4108	@ 0x100c
 8012f9c:	fb00 f00e 	mul.w	r0, r0, lr
 8012fa0:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012fa2:	f640 457c 	movw	r5, #3196	@ 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012fa6:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012fa8:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012fac:	f242 15e0 	movw	r5, #8672	@ 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012fb0:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012fb2:	f44f 6022 	mov.w	r0, #2592	@ 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012fb6:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012fba:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012fbc:	1a2d      	subs	r5, r5, r0
 8012fbe:	440d      	add	r5, r1
 8012fc0:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012fc2:	4d57      	ldr	r5, [pc, #348]	@ (8013120 <jpeg_idct_13x13+0x410>)
 8012fc4:	fb05 000e 	mla	r0, r5, lr, r0
 8012fc8:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012fca:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012fcc:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8012fce:	f640 51f2 	movw	r1, #3570	@ 0xdf2
 8012fd2:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012fd4:	f641 51fe 	movw	r1, #7678	@ 0x1dfe
 8012fd8:	4371      	muls	r1, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012fda:	4e56      	ldr	r6, [pc, #344]	@ (8013134 <jpeg_idct_13x13+0x424>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012fdc:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8012fe0:	4851      	ldr	r0, [pc, #324]	@ (8013128 <jpeg_idct_13x13+0x418>)
 8012fe2:	fb00 f00e 	mul.w	r0, r0, lr
 8012fe6:	1ac0      	subs	r0, r0, r3
 8012fe8:	1a40      	subs	r0, r0, r1
 8012fea:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012fec:	484f      	ldr	r0, [pc, #316]	@ (801312c <jpeg_idct_13x13+0x41c>)
 8012fee:	fb00 330e 	mla	r3, r0, lr, r3
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012ff2:	f642 2050 	movw	r0, #10832	@ 0x2a50
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012ff6:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8012ff8:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012ffc:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012ffe:	eb01 050c 	add.w	r5, r1, ip
    z2 = (INT32) wsptr[3];
 8013002:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8013006:	eb01 0b03 	add.w	fp, r1, r3
 801300a:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801300e:	f242 503e 	movw	r0, #9534	@ 0x253e
 8013012:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8013014:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8013018:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 801301c:	4841      	ldr	r0, [pc, #260]	@ (8013124 <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801301e:	fb07 fa09 	mul.w	sl, r7, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8013022:	eb0b 0705 	add.w	r7, fp, r5
 8013026:	4457      	add	r7, sl
 8013028:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801302c:	4f40      	ldr	r7, [pc, #256]	@ (8013130 <jpeg_idct_13x13+0x420>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 801302e:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8013030:	eb03 000c 	add.w	r0, r3, ip
 8013034:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8013036:	f641 26cb 	movw	r6, #6859	@ 0x1acb
 801303a:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801303e:	fb07 000c 	mla	r0, r7, ip, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8013042:	f607 5711 	addw	r7, r7, #3345	@ 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8013046:	445e      	add	r6, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8013048:	f244 6b94 	movw	fp, #18068	@ 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801304c:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801304e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8013052:	195d      	adds	r5, r3, r5
 8013054:	437d      	muls	r5, r7
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8013056:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp11 += tmp14;
 801305a:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801305c:	fb0b 5507 	mla	r5, fp, r7, r5
 8013060:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8013062:	eb0c 0a07 	add.w	sl, ip, r7
 8013066:	4f34      	ldr	r7, [pc, #208]	@ (8013138 <jpeg_idct_13x13+0x428>)
 8013068:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801306c:	f207 671e 	addw	r7, r7, #1566	@ 0x61e
    tmp12 += tmp14;
 8013070:	4450      	add	r0, sl
    tmp13 += tmp14;
 8013072:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8013074:	f640 25d5 	movw	r5, #2773	@ 0xad5
 8013078:	fb05 f509 	mul.w	r5, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801307c:	f640 2933 	movw	r9, #2611	@ 0xa33
 8013080:	fb09 5101 	mla	r1, r9, r1, r5
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8013084:	f640 494e 	movw	r9, #3150	@ 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8013088:	fb07 1103 	mla	r1, r7, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801308c:	ebac 0303 	sub.w	r3, ip, r3
 8013090:	f641 6702 	movw	r7, #7682	@ 0x1e02
 8013094:	437b      	muls	r3, r7
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8013096:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp14 += z1;
 801309a:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801309c:	fb09 330c 	mla	r3, r9, ip, r3
 80130a0:	f46f 5c5f 	mvn.w	ip, #14272	@ 0x37c0
 80130a4:	fb0c 3307 	mla	r3, ip, r7, r3
 80130a8:	eb03 0c05 	add.w	ip, r3, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80130ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130ae:	9d04      	ldr	r5, [sp, #16]
 80130b0:	441d      	add	r5, r3
			     & RANGE_MASK];
 80130b2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80130b6:	f818 5005 	ldrb.w	r5, [r8, r5]
 80130ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80130bc:	9b80      	ldr	r3, [sp, #512]	@ 0x200
 80130be:	54fd      	strb	r5, [r7, r3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80130c0:	9b04      	ldr	r3, [sp, #16]
 80130c2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80130c4:	1b5d      	subs	r5, r3, r5
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130c6:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80130c8:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80130cc:	f818 5005 	ldrb.w	r5, [r8, r5]
 80130d0:	7315      	strb	r5, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130d2:	199d      	adds	r5, r3, r6
			     & RANGE_MASK];
 80130d4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130d8:	f818 5005 	ldrb.w	r5, [r8, r5]
 80130dc:	7055      	strb	r5, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80130de:	1b9d      	subs	r5, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130e0:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80130e2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80130e6:	f818 5005 	ldrb.w	r5, [r8, r5]
 80130ea:	72d5      	strb	r5, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130ec:	181d      	adds	r5, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80130ee:	1a18      	subs	r0, r3, r0
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80130f0:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80130f2:	f3c5 4589 	ubfx	r5, r5, #18, #10
			     & RANGE_MASK];
 80130f6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130fa:	f818 5005 	ldrb.w	r5, [r8, r5]
 80130fe:	7095      	strb	r5, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013100:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013104:	7290      	strb	r0, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013106:	eb03 000a 	add.w	r0, r3, sl
			     & RANGE_MASK];
 801310a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801310e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013112:	70d0      	strb	r0, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013114:	eba3 000a 	sub.w	r0, r3, sl
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			     & RANGE_MASK];
 801311a:	f3c0 4089 	ubfx	r0, r0, #18, #10
 801311e:	e00f      	b.n	8013140 <jpeg_idct_13x13+0x430>
 8013120:	ffffd7ee 	.word	0xffffd7ee
 8013124:	ffffbf5b 	.word	0xffffbf5b
 8013128:	fffffa8c 	.word	0xfffffa8c
 801312c:	ffffe64b 	.word	0xffffe64b
 8013130:	ffffcdb1 	.word	0xffffcdb1
 8013134:	fffff52b 	.word	0xfffff52b
 8013138:	ffffeaf8 	.word	0xffffeaf8
 801313c:	fffff116 	.word	0xfffff116
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013140:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013144:	7250      	strb	r0, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013146:	1858      	adds	r0, r3, r1
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013148:	1a59      	subs	r1, r3, r1
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801314a:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 801314c:	f3c0 4089 	ubfx	r0, r0, #18, #10
			     & RANGE_MASK];
 8013150:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013154:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013158:	7110      	strb	r0, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801315a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801315e:	7211      	strb	r1, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013160:	eb03 010c 	add.w	r1, r3, ip
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013164:	eba3 030c 	sub.w	r3, r3, ip
			     & RANGE_MASK];
 8013168:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 801316c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013170:	f818 1001 	ldrb.w	r1, [r8, r1]
 8013174:	7151      	strb	r1, [r2, #5]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8013176:	f642 5141 	movw	r1, #11585	@ 0x2d41
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801317a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801317e:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8013180:	9b01      	ldr	r3, [sp, #4]
 8013182:	eba3 030e 	sub.w	r3, r3, lr
 8013186:	434b      	muls	r3, r1
 8013188:	9902      	ldr	r1, [sp, #8]
 801318a:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 801318e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8013192:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013196:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8013198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801319a:	9a03      	ldr	r2, [sp, #12]
 801319c:	4293      	cmp	r3, r2
 801319e:	f47f aed1 	bne.w	8012f44 <jpeg_idct_13x13+0x234>
  }
}
 80131a2:	b077      	add	sp, #476	@ 0x1dc
 80131a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131a8 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80131a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	b0fd      	sub	sp, #500	@ 0x1f4
 80131ae:	f1a2 0b02 	sub.w	fp, r2, #2
 80131b2:	9309      	str	r3, [sp, #36]	@ 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80131b4:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80131b8:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 80131ba:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80131be:	1f03      	subs	r3, r0, #4
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	f102 030e 	add.w	r3, r2, #14
 80131c6:	930b      	str	r3, [sp, #44]	@ 0x2c
  wsptr = workspace;
 80131c8:	ab0c      	add	r3, sp, #48	@ 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131ca:	9900      	ldr	r1, [sp, #0]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80131cc:	f241 3ea3 	movw	lr, #5027	@ 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131d0:	f93b 4f02 	ldrsh.w	r4, [fp, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80131d4:	f640 68f2 	movw	r8, #3826	@ 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131d8:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80131dc:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131de:	9100      	str	r1, [sp, #0]
 80131e0:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80131e2:	9a00      	ldr	r2, [sp, #0]
 80131e4:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	@ 0x40
 80131e8:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
    z1 <<= CONST_BITS;
 80131ec:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80131ee:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80131f0:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80131f2:	f642 01c6 	movw	r1, #10438	@ 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80131f6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80131fa:	fb01 f702 	mul.w	r7, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80131fe:	f640 2112 	movw	r1, #2578	@ 0xa12
 8013202:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013206:	f641 4137 	movw	r1, #7223	@ 0x1c37
    tmp10 = z1 + z2;
 801320a:	19e6      	adds	r6, r4, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801320c:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801320e:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8013210:	eb04 050c 	add.w	r5, r4, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013214:	f9bb c020 	ldrsh.w	ip, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013218:	1abf      	subs	r7, r7, r2
    tmp12 = z1 - z4;
 801321a:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801321c:	eba4 0247 	sub.w	r2, r4, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013220:	f8d0 40c0 	ldr.w	r4, [r0, #192]	@ 0xc0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013224:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013228:	48d6      	ldr	r0, [pc, #856]	@ (8013584 <jpeg_idct_14x14+0x3dc>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801322a:	920a      	str	r2, [sp, #40]	@ 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801322c:	9a00      	ldr	r2, [sp, #0]
 801322e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8013230:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013234:	f9bb 2060 	ldrsh.w	r2, [fp, #96]	@ 0x60
 8013238:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801323a:	eb0c 0402 	add.w	r4, ip, r2
 801323e:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013240:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 8013244:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013248:	fb00 4402 	mla	r4, r0, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801324c:	f600 20e5 	addw	r0, r0, #2789	@ 0xae5
 8013250:	4342      	muls	r2, r0
    tmp20 = tmp10 + tmp13;
 8013252:	19f0      	adds	r0, r6, r7
 8013254:	9001      	str	r0, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8013256:	1bf0      	subs	r0, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013258:	fb0e 220c 	mla	r2, lr, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801325c:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	@ 0x30
    tmp26 = tmp10 - tmp13;
 8013260:	9002      	str	r0, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8013262:	1928      	adds	r0, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013264:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	@ 0x50
    tmp21 = tmp11 + tmp14;
 8013268:	9003      	str	r0, [sp, #12]
    tmp25 = tmp11 - tmp14;
 801326a:	1b28      	subs	r0, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801326c:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013270:	f242 6552 	movw	r5, #9810	@ 0x2652
    tmp25 = tmp11 - tmp14;
 8013274:	9004      	str	r0, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8013276:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8013278:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801327a:	9900      	ldr	r1, [sp, #0]
    tmp22 = tmp12 + tmp15;
 801327c:	9005      	str	r0, [sp, #20]
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801327e:	f46f 60a2 	mvn.w	r0, #1296	@ 0x510
    tmp24 = tmp12 - tmp15;
 8013282:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013284:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013286:	f8d1 10e0 	ldr.w	r1, [r1, #224]	@ 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801328a:	6a12      	ldr	r2, [r2, #32]
 801328c:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801328e:	9a00      	ldr	r2, [sp, #0]
 8013290:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8013292:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013294:	9a00      	ldr	r2, [sp, #0]
 8013296:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801329a:	eb04 0c07 	add.w	ip, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801329e:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80132a0:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	@ 0x70
    tmp14 = z1 + z3;
 80132a4:	eb04 0a06 	add.w	sl, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80132a8:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132aa:	f642 21b7 	movw	r1, #10935	@ 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80132ae:	fb05 f50a 	mul.w	r5, r5, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132b2:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80132b6:	49b4      	ldr	r1, [pc, #720]	@ (8013588 <jpeg_idct_14x14+0x3e0>)
 80132b8:	eb0c 0e05 	add.w	lr, ip, r5
 80132bc:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 80132c0:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80132c4:	f641 0114 	movw	r1, #6164	@ 0x1814
 80132c8:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80132cc:	49af      	ldr	r1, [pc, #700]	@ (801358c <jpeg_idct_14x14+0x3e4>)
 80132ce:	fb01 a104 	mla	r1, r1, r4, sl
    z1    -= z2;
 80132d2:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80132d4:	fb08 f804 	mul.w	r8, r8, r4
 80132d8:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 80132dc:	4441      	add	r1, r8
 80132de:	9107      	str	r1, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80132e0:	19b9      	adds	r1, r7, r6
 80132e2:	4341      	muls	r1, r0
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80132e4:	f6a0 0081 	subw	r0, r0, #2177	@ 0x881
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80132e8:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80132ec:	fb00 1007 	mla	r0, r0, r7, r1
 80132f0:	4460      	add	r0, ip
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80132f2:	f642 4cf8 	movw	ip, #11512	@ 0x2cf8
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80132f6:	9008      	str	r0, [sp, #32]
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80132f8:	48a5      	ldr	r0, [pc, #660]	@ (8013590 <jpeg_idct_14x14+0x3e8>)
 80132fa:	fb00 1106 	mla	r1, r0, r6, r1
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80132fe:	48a5      	ldr	r0, [pc, #660]	@ (8013594 <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013300:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013302:	1bf5      	subs	r5, r6, r7
 8013304:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013308:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 801330c:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801330e:	fb00 cc06 	mla	ip, r0, r6, ip

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013312:	9801      	ldr	r0, [sp, #4]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013314:	1b92      	subs	r2, r2, r6
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013316:	eb00 040e 	add.w	r4, r0, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801331a:	44d4      	add	ip, sl
    tmp13 = (z1 - z3) << PASS1_BITS;
 801331c:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801331e:	f241 5a99 	movw	sl, #5529	@ 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013322:	12e4      	asrs	r4, r4, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013324:	fb0a 5507 	mla	r5, sl, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013328:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801332c:	eba0 040e 	sub.w	r4, r0, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013330:	9803      	ldr	r0, [sp, #12]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013332:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013334:	12e4      	asrs	r4, r4, #11
 8013336:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801333a:	9c08      	ldr	r4, [sp, #32]
 801333c:	1904      	adds	r4, r0, r4
 801333e:	12e4      	asrs	r4, r4, #11
 8013340:	61dc      	str	r4, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013342:	9c08      	ldr	r4, [sp, #32]
 8013344:	1b04      	subs	r4, r0, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013346:	9805      	ldr	r0, [sp, #20]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013348:	12e4      	asrs	r4, r4, #11
 801334a:	f8c3 417c 	str.w	r4, [r3, #380]	@ 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801334e:	1844      	adds	r4, r0, r1
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013350:	1a41      	subs	r1, r0, r1
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013352:	12e4      	asrs	r4, r4, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013354:	12c9      	asrs	r1, r1, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013356:	63dc      	str	r4, [r3, #60]	@ 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013358:	f8c3 115c 	str.w	r1, [r3, #348]	@ 0x15c
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 801335c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801335e:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 8013362:	65d9      	str	r1, [r3, #92]	@ 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8013364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013366:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801336a:	9907      	ldr	r1, [sp, #28]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 801336c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013370:	9a06      	ldr	r2, [sp, #24]
 8013372:	4462      	add	r2, ip
 8013374:	12d2      	asrs	r2, r2, #11
 8013376:	67da      	str	r2, [r3, #124]	@ 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013378:	9a06      	ldr	r2, [sp, #24]
 801337a:	eba2 020c 	sub.w	r2, r2, ip
 801337e:	12d2      	asrs	r2, r2, #11
 8013380:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013384:	9a04      	ldr	r2, [sp, #16]
 8013386:	442a      	add	r2, r5
 8013388:	12d2      	asrs	r2, r2, #11
 801338a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801338e:	9a04      	ldr	r2, [sp, #16]
 8013390:	1b52      	subs	r2, r2, r5
 8013392:	12d2      	asrs	r2, r2, #11
 8013394:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013398:	9a02      	ldr	r2, [sp, #8]
 801339a:	440a      	add	r2, r1
 801339c:	12d2      	asrs	r2, r2, #11
 801339e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80133a2:	9a02      	ldr	r2, [sp, #8]
 80133a4:	1a52      	subs	r2, r2, r1
 80133a6:	12d2      	asrs	r2, r2, #11
 80133a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80133ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80133ae:	455a      	cmp	r2, fp
 80133b0:	f47f af0b 	bne.w	80131ca <jpeg_idct_14x14+0x22>
 80133b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 80133b6:	a80c      	add	r0, sp, #48	@ 0x30
 80133b8:	3b04      	subs	r3, #4
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133be:	3334      	adds	r3, #52	@ 0x34
 80133c0:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80133c2:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80133c4:	f640 2412 	movw	r4, #2578	@ 0xa12
    z4 = (INT32) wsptr[4];
 80133c8:	6906      	ldr	r6, [r0, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80133ca:	f241 3ea3 	movw	lr, #5027	@ 0x13a3
    outptr = output_buf[ctr] + output_col;
 80133ce:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80133d2:	f46f 6aa2 	mvn.w	sl, #1296	@ 0x510
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80133d6:	6801      	ldr	r1, [r0, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80133d8:	fb04 f706 	mul.w	r7, r4, r6
    outptr = output_buf[ctr] + output_col;
 80133dc:	920a      	str	r2, [sp, #40]	@ 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80133de:	f641 4437 	movw	r4, #7223	@ 0x1c37
    outptr = output_buf[ctr] + output_col;
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	4613      	mov	r3, r2
 80133e6:	9a86      	ldr	r2, [sp, #536]	@ 0x218
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80133e8:	3110      	adds	r1, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80133ea:	3020      	adds	r0, #32
    outptr = output_buf[ctr] + output_col;
 80133ec:	189a      	adds	r2, r3, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80133ee:	f642 03c6 	movw	r3, #10438	@ 0x28c6
    tmp11 = z1 + z3;
 80133f2:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80133f6:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80133f8:	4366      	muls	r6, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80133fa:	4c62      	ldr	r4, [pc, #392]	@ (8013584 <jpeg_idct_14x14+0x3dc>)
    tmp10 = z1 + z2;
 80133fc:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013400:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8013402:	ebc6 3841 	rsb	r8, r6, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013406:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801340a:	1b9b      	subs	r3, r3, r6
    z1 = (INT32) wsptr[2];
 801340c:	f850 6c18 	ldr.w	r6, [r0, #-24]
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013410:	005b      	lsls	r3, r3, #1
 8013412:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8013416:	9301      	str	r3, [sp, #4]
    z2 = (INT32) wsptr[6];
 8013418:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801341c:	18f1      	adds	r1, r6, r3
 801341e:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013420:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 8013424:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013428:	fb04 1103 	mla	r1, r4, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801342c:	f604 24e5 	addw	r4, r4, #2789	@ 0xae5
 8013430:	4363      	muls	r3, r4
    tmp20 = tmp10 + tmp13;
 8013432:	eb0c 0407 	add.w	r4, ip, r7
 8013436:	9402      	str	r4, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8013438:	ebac 0407 	sub.w	r4, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801343c:	fb0e 3306 	mla	r3, lr, r6, r3
    z3 = (INT32) wsptr[5];
 8013440:	f850 cc0c 	ldr.w	ip, [r0, #-12]
    tmp26 = tmp10 - tmp13;
 8013444:	9403      	str	r4, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8013446:	186c      	adds	r4, r5, r1
    tmp25 = tmp11 - tmp14;
 8013448:	1a69      	subs	r1, r5, r1
    z4 = (INT32) wsptr[7];
 801344a:	f850 6c04 	ldr.w	r6, [r0, #-4]
    tmp21 = tmp11 + tmp14;
 801344e:	9404      	str	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013450:	f242 6452 	movw	r4, #9810	@ 0x2652
    tmp25 = tmp11 - tmp14;
 8013454:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8013456:	eb08 0103 	add.w	r1, r8, r3
    tmp24 = tmp12 - tmp15;
 801345a:	eba8 0303 	sub.w	r3, r8, r3
    z2 = (INT32) wsptr[3];
 801345e:	f850 8c14 	ldr.w	r8, [r0, #-20]
    tmp22 = tmp12 + tmp15;
 8013462:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013464:	f642 21b7 	movw	r1, #10935	@ 0x2ab7
    tmp24 = tmp12 - tmp15;
 8013468:	9307      	str	r3, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801346a:	f640 6ef2 	movw	lr, #3826	@ 0xef2
    z1 = (INT32) wsptr[1];
 801346e:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    tmp14 = z1 + z3;
 8013472:	eb03 0b0c 	add.w	fp, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013476:	eb03 0508 	add.w	r5, r3, r8
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801347a:	fb04 f40b 	mul.w	r4, r4, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801347e:	434d      	muls	r5, r1
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013480:	4941      	ldr	r1, [pc, #260]	@ (8013588 <jpeg_idct_14x14+0x3e0>)
 8013482:	192f      	adds	r7, r5, r4
 8013484:	eb07 3746 	add.w	r7, r7, r6, lsl #13
 8013488:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801348c:	f641 0114 	movw	r1, #6164	@ 0x1814
 8013490:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013494:	493d      	ldr	r1, [pc, #244]	@ (801358c <jpeg_idct_14x14+0x3e4>)
 8013496:	fb01 b103 	mla	r1, r1, r3, fp
    z1    -= z2;
 801349a:	eba3 0308 	sub.w	r3, r3, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801349e:	fb0e fe03 	mul.w	lr, lr, r3
    z1    -= z2;
 80134a2:	9308      	str	r3, [sp, #32]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80134a4:	ebae 3e46 	sub.w	lr, lr, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80134a8:	4b3b      	ldr	r3, [pc, #236]	@ (8013598 <jpeg_idct_14x14+0x3f0>)
    tmp16 += tmp15;
 80134aa:	4471      	add	r1, lr
 80134ac:	9109      	str	r1, [sp, #36]	@ 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80134ae:	eb08 010c 	add.w	r1, r8, ip
 80134b2:	fb0a f101 	mul.w	r1, sl, r1
 80134b6:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80134ba:	fb03 1a08 	mla	sl, r3, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80134be:	4b34      	ldr	r3, [pc, #208]	@ (8013590 <jpeg_idct_14x14+0x3e8>)
 80134c0:	fb03 110c 	mla	r1, r3, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80134c4:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80134c6:	f642 45f8 	movw	r5, #11512	@ 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80134ca:	4b32      	ldr	r3, [pc, #200]	@ (8013594 <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80134cc:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80134ce:	ebac 0408 	sub.w	r4, ip, r8
 80134d2:	436c      	muls	r4, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80134d4:	eb04 3546 	add.w	r5, r4, r6, lsl #13
 80134d8:	fb03 550c 	mla	r5, r3, ip, r5
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80134dc:	9b08      	ldr	r3, [sp, #32]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80134de:	445d      	add	r5, fp
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80134e0:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80134e4:	f241 5b99 	movw	fp, #5529	@ 0x1599
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80134e8:	035b      	lsls	r3, r3, #13
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80134ea:	fb0b 4408 	mla	r4, fp, r8, r4
 80134ee:	4474      	add	r4, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80134f0:	eb03 3e46 	add.w	lr, r3, r6, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80134f4:	9e02      	ldr	r6, [sp, #8]
 80134f6:	9b86      	ldr	r3, [sp, #536]	@ 0x218
 80134f8:	eb06 0c07 	add.w	ip, r6, r7
 80134fc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
			     & RANGE_MASK];
 80134fe:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013502:	f819 c00c 	ldrb.w	ip, [r9, ip]
 8013506:	f806 c003 	strb.w	ip, [r6, r3]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801350a:	9b02      	ldr	r3, [sp, #8]
 801350c:	1bde      	subs	r6, r3, r7
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801350e:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8013510:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013514:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013518:	7356      	strb	r6, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801351a:	eb03 060a 	add.w	r6, r3, sl
			     & RANGE_MASK];
 801351e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013522:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013526:	7056      	strb	r6, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013528:	eba3 060a 	sub.w	r6, r3, sl
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801352c:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801352e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013532:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013536:	7316      	strb	r6, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013538:	185e      	adds	r6, r3, r1
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801353a:	1a59      	subs	r1, r3, r1
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801353c:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801353e:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8013542:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013546:	f819 6006 	ldrb.w	r6, [r9, r6]
 801354a:	7096      	strb	r6, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801354c:	f819 1001 	ldrb.w	r1, [r9, r1]
 8013550:	72d1      	strb	r1, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013552:	eb03 010e 	add.w	r1, r3, lr
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013556:	eba3 030e 	sub.w	r3, r3, lr
			     & RANGE_MASK];
 801355a:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 801355e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013562:	f819 1001 	ldrb.w	r1, [r9, r1]
 8013566:	70d1      	strb	r1, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013568:	f819 3003 	ldrb.w	r3, [r9, r3]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801356c:	9909      	ldr	r1, [sp, #36]	@ 0x24
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801356e:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013570:	9b07      	ldr	r3, [sp, #28]
 8013572:	442b      	add	r3, r5
			     & RANGE_MASK];
 8013574:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013578:	f819 3003 	ldrb.w	r3, [r9, r3]
 801357c:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801357e:	9b07      	ldr	r3, [sp, #28]
 8013580:	1b5b      	subs	r3, r3, r5
 8013582:	e00b      	b.n	801359c <jpeg_idct_14x14+0x3f4>
 8013584:	ffffc8fc 	.word	0xffffc8fc
 8013588:	ffffdbf0 	.word	0xffffdbf0
 801358c:	ffffde0b 	.word	0xffffde0b
 8013590:	ffffb409 	.word	0xffffb409
 8013594:	ffffc9e6 	.word	0xffffc9e6
 8013598:	fffff26e 	.word	0xfffff26e
			     & RANGE_MASK];
 801359c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80135a4:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80135a6:	9b05      	ldr	r3, [sp, #20]
 80135a8:	4423      	add	r3, r4
			     & RANGE_MASK];
 80135aa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80135ae:	f819 3003 	ldrb.w	r3, [r9, r3]
 80135b2:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80135b4:	9b05      	ldr	r3, [sp, #20]
 80135b6:	1b1b      	subs	r3, r3, r4
			     & RANGE_MASK];
 80135b8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80135bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80135c0:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80135c2:	9b03      	ldr	r3, [sp, #12]
 80135c4:	440b      	add	r3, r1
			     & RANGE_MASK];
 80135c6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80135ca:	f819 3003 	ldrb.w	r3, [r9, r3]
 80135ce:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80135d0:	9b03      	ldr	r3, [sp, #12]
 80135d2:	1a5b      	subs	r3, r3, r1
			     & RANGE_MASK];
 80135d4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80135d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80135dc:	71d3      	strb	r3, [r2, #7]
  for (ctr = 0; ctr < 14; ctr++) {
 80135de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135e0:	9a00      	ldr	r2, [sp, #0]
 80135e2:	4293      	cmp	r3, r2
 80135e4:	f47f aeed 	bne.w	80133c2 <jpeg_idct_14x14+0x21a>
  }
}
 80135e8:	b07d      	add	sp, #500	@ 0x1f4
 80135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ee:	bf00      	nop

080135f0 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80135f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f4:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80135f8:	f1a2 0a02 	sub.w	sl, r2, #2
 80135fc:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80135fe:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8013602:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 8013604:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013608:	1f03      	subs	r3, r0, #4
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	f102 030e 	add.w	r3, r2, #14
 8013610:	930d      	str	r3, [sp, #52]	@ 0x34
  wsptr = workspace;
 8013612:	ab0e      	add	r3, sp, #56	@ 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013614:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013616:	f642 6e13 	movw	lr, #11795	@ 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801361a:	f93a 5f02 	ldrsh.w	r5, [sl, #2]!
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801361e:	f241 2b68 	movw	fp, #4712	@ 0x1268
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013622:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013626:	f644 68a3 	movw	r8, #20131	@ 0x4ea3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801362a:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	@ 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801362e:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013630:	9100      	str	r1, [sp, #0]
 8013632:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013634:	9a00      	ldr	r2, [sp, #0]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013636:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
    z1 <<= CONST_BITS;
 801363a:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801363c:	f9ba 1020 	ldrsh.w	r1, [sl, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013640:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013644:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013648:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801364a:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	@ 0x40
 801364e:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013650:	f8d0 40c0 	ldr.w	r4, [r0, #192]	@ 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013654:	f640 50fc 	movw	r0, #3580	@ 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013658:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801365a:	f242 469d 	movw	r6, #9373	@ 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801365e:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013662:	f642 20ce 	movw	r0, #10958	@ 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8013666:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8013668:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 801366c:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801366e:	eba4 040c 	sub.w	r4, r4, ip
 8013672:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8013676:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8013678:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801367a:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801367e:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013680:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8013684:	f44f 70bb 	mov.w	r0, #374	@ 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8013688:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801368c:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013690:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8013692:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013696:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8013698:	f640 4cc7 	movw	ip, #3271	@ 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 801369c:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801369e:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80136a0:	f241 1482 	movw	r4, #4482	@ 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80136a4:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80136a8:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80136aa:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 80136ac:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80136b0:	443c      	add	r4, r7
 80136b2:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80136b6:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80136ba:	f641 2c9a 	movw	ip, #6810	@ 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80136be:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 80136c0:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80136c2:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80136c4:	f641 114c 	movw	r1, #6476	@ 0x194c
 80136c8:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80136ca:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80136ce:	440f      	add	r7, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80136d0:	436a      	muls	r2, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 80136d2:	1a76      	subs	r6, r6, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 80136d4:	18b8      	adds	r0, r7, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80136d6:	18b2      	adds	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80136d8:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	@ 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 80136dc:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80136de:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80136e0:	f44f 52b5 	mov.w	r2, #5792	@ 0x16a0
 80136e4:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80136e6:	f9ba 5030 	ldrsh.w	r5, [sl, #48]	@ 0x30
    tmp11 += tmp11;
 80136ea:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80136ec:	9908      	ldr	r1, [sp, #32]
 80136ee:	9a01      	ldr	r2, [sp, #4]
 80136f0:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136f2:	9900      	ldr	r1, [sp, #0]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80136f4:	9209      	str	r2, [sp, #36]	@ 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136f6:	6a09      	ldr	r1, [r1, #32]
 80136f8:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 80136fc:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80136fe:	9900      	ldr	r1, [sp, #0]
 8013700:	6e09      	ldr	r1, [r1, #96]	@ 0x60
 8013702:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013704:	9900      	ldr	r1, [sp, #0]
 8013706:	f8d1 10a0 	ldr.w	r1, [r1, #160]	@ 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801370a:	f9ba e070 	ldrsh.w	lr, [sl, #112]	@ 0x70
 801370e:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013710:	434e      	muls	r6, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013712:	f242 7131 	movw	r1, #10033	@ 0x2731
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013716:	f8d0 40e0 	ldr.w	r4, [r0, #224]	@ 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801371a:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801371c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp13 = z2 - z4;
 8013720:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013724:	1917      	adds	r7, r2, r4
 8013726:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801372a:	f241 0c71 	movw	ip, #4209	@ 0x1071
 801372e:	fb0c 7002 	mla	r0, ip, r2, r7
    z2 = z1 - z4;
 8013732:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013736:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013738:	48cd      	ldr	r0, [pc, #820]	@ (8013a70 <jpeg_idct_15x15+0x480>)
 801373a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801373e:	48cd      	ldr	r0, [pc, #820]	@ (8013a74 <jpeg_idct_15x15+0x484>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013740:	f642 5402 	movw	r4, #11522	@ 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013744:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013746:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801374a:	900b      	str	r0, [sp, #44]	@ 0x2c
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801374c:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8013750:	48c9      	ldr	r0, [pc, #804]	@ (8013a78 <jpeg_idct_15x15+0x488>)
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8013752:	eb02 010e 	add.w	r1, r2, lr
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013756:	fb08 480e 	mla	r8, r8, lr, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801375a:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801375c:	f200 7071 	addw	r0, r0, #1905	@ 0x771
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8013760:	fb0b f101 	mul.w	r1, fp, r1
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8013764:	f640 7b39 	movw	fp, #3897	@ 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013768:	fb00 4402 	mla	r4, r0, r2, r4
 801376c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801376e:	fb0b 1202 	mla	r2, fp, r2, r1
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013772:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013776:	4404      	add	r4, r0
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013778:	ebac 0c06 	sub.w	ip, ip, r6
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801377c:	1b92      	subs	r2, r2, r6
 801377e:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013780:	48be      	ldr	r0, [pc, #760]	@ (8013a7c <jpeg_idct_15x15+0x48c>)
 8013782:	fb00 110e 	mla	r1, r0, lr, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013786:	9802      	ldr	r0, [sp, #8]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013788:	4431      	add	r1, r6
 801378a:	4429      	add	r1, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801378c:	eb00 0508 	add.w	r5, r0, r8
 8013790:	12ed      	asrs	r5, r5, #11
 8013792:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013796:	eba0 0508 	sub.w	r5, r0, r8
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801379a:	9806      	ldr	r0, [sp, #24]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801379c:	12ed      	asrs	r5, r5, #11
 801379e:	f8c3 51bc 	str.w	r5, [r3, #444]	@ 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80137a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80137a4:	1945      	adds	r5, r0, r5
 80137a6:	12ed      	asrs	r5, r5, #11
 80137a8:	61dd      	str	r5, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80137aa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80137ac:	1b45      	subs	r5, r0, r5
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80137ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80137b0:	12ed      	asrs	r5, r5, #11
 80137b2:	f8c3 519c 	str.w	r5, [r3, #412]	@ 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80137b6:	eb00 050c 	add.w	r5, r0, ip
 80137ba:	12ed      	asrs	r5, r5, #11
 80137bc:	63dd      	str	r5, [r3, #60]	@ 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80137be:	eba0 050c 	sub.w	r5, r0, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80137c2:	9803      	ldr	r0, [sp, #12]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80137c4:	12ed      	asrs	r5, r5, #11
 80137c6:	f8c3 517c 	str.w	r5, [r3, #380]	@ 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80137ca:	1885      	adds	r5, r0, r2
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80137cc:	1a82      	subs	r2, r0, r2
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80137ce:	12ed      	asrs	r5, r5, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80137d0:	12d2      	asrs	r2, r2, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80137d2:	65dd      	str	r5, [r3, #92]	@ 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80137d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80137d8:	9a07      	ldr	r2, [sp, #28]
 80137da:	443a      	add	r2, r7
 80137dc:	12d2      	asrs	r2, r2, #11
 80137de:	67da      	str	r2, [r3, #124]	@ 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80137e0:	9a07      	ldr	r2, [sp, #28]
 80137e2:	1bd2      	subs	r2, r2, r7
 80137e4:	12d2      	asrs	r2, r2, #11
 80137e6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80137ea:	9a04      	ldr	r2, [sp, #16]
 80137ec:	440a      	add	r2, r1
 80137ee:	12d2      	asrs	r2, r2, #11
 80137f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80137f4:	9a04      	ldr	r2, [sp, #16]
 80137f6:	1a52      	subs	r2, r2, r1
 80137f8:	12d2      	asrs	r2, r2, #11
 80137fa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80137fe:	9a05      	ldr	r2, [sp, #20]
 8013800:	4422      	add	r2, r4
 8013802:	12d2      	asrs	r2, r2, #11
 8013804:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013808:	9a05      	ldr	r2, [sp, #20]
 801380a:	1b12      	subs	r2, r2, r4
 801380c:	12d2      	asrs	r2, r2, #11
 801380e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013812:	9a01      	ldr	r2, [sp, #4]
 8013814:	9908      	ldr	r1, [sp, #32]
 8013816:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 801381a:	12d2      	asrs	r2, r2, #11
 801381c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013822:	4552      	cmp	r2, sl
 8013824:	f47f aef6 	bne.w	8013614 <jpeg_idct_15x15+0x24>
 8013828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801382a:	3b04      	subs	r3, #4
 801382c:	9301      	str	r3, [sp, #4]
 801382e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013830:	3338      	adds	r3, #56	@ 0x38
 8013832:	930d      	str	r3, [sp, #52]	@ 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8013834:	ab0e      	add	r3, sp, #56	@ 0x38
 8013836:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013838:	9b01      	ldr	r3, [sp, #4]

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801383a:	f640 51fc 	movw	r1, #3580	@ 0xdfc
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801383e:	f44f 74bb 	mov.w	r4, #374	@ 0x176
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013842:	f642 6e13 	movw	lr, #11795	@ 0x2e13
    outptr = output_buf[ctr] + output_col;
 8013846:	f853 2f04 	ldr.w	r2, [r3, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801384a:	f242 7a31 	movw	sl, #10033	@ 0x2731
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801384e:	f241 0871 	movw	r8, #4209	@ 0x1071
    outptr = output_buf[ctr] + output_col;
 8013852:	920c      	str	r2, [sp, #48]	@ 0x30
 8013854:	9301      	str	r3, [sp, #4]
 8013856:	4613      	mov	r3, r2
 8013858:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 801385a:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801385c:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[2];
 801385e:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8013860:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013862:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8013864:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013866:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013868:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801386c:	f242 419d 	movw	r1, #9373	@ 0x249d
 8013870:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8013872:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8013876:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801387a:	eba2 020c 	sub.w	r2, r2, ip
 801387e:	0052      	lsls	r2, r2, #1
 8013880:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8013884:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8013886:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013888:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801388c:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801388e:	f642 22ce 	movw	r2, #10958	@ 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8013892:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013896:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8013898:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801389c:	1a8a      	subs	r2, r1, r2
 801389e:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 80138a0:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80138a4:	f640 4cc7 	movw	ip, #3271	@ 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80138a8:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 80138aa:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80138ac:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80138b0:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80138b2:	f241 1282 	movw	r2, #4482	@ 0x1182
 80138b6:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 80138b8:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80138bc:	440a      	add	r2, r1
 80138be:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80138c2:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80138c6:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 80138c8:	9405      	str	r4, [sp, #20]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80138ca:	4c69      	ldr	r4, [pc, #420]	@ (8013a70 <jpeg_idct_15x15+0x480>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80138cc:	9206      	str	r2, [sp, #24]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80138ce:	f641 124c 	movw	r2, #6476	@ 0x194c
 80138d2:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80138d4:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
    tmp24 = tmp13 - tmp10 + tmp11;
 80138d8:	1a3f      	subs	r7, r7, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80138da:	4372      	muls	r2, r6
    tmp21 = tmp12 + tmp10 + tmp11;
 80138dc:	4401      	add	r1, r0
 80138de:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80138e0:	18ba      	adds	r2, r7, r2
 80138e2:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80138e4:	f44f 52b5 	mov.w	r2, #5792	@ 0x16a0
 80138e8:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80138ea:	f641 269a 	movw	r6, #6810	@ 0x1a9a
    tmp11 += tmp11;
 80138ee:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80138f0:	9808      	ldr	r0, [sp, #32]
 80138f2:	9a02      	ldr	r2, [sp, #8]
 80138f4:	eb02 0b00 	add.w	fp, r2, r0
    z2 = (INT32) wsptr[3];
 80138f8:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80138fa:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[3];
 80138fc:	68c7      	ldr	r7, [r0, #12]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80138fe:	6940      	ldr	r0, [r0, #20]
    z1 = (INT32) wsptr[1];
 8013900:	6852      	ldr	r2, [r2, #4]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013902:	fb0a fc00 	mul.w	ip, sl, r0
    z4 = (INT32) wsptr[7];
 8013906:	9800      	ldr	r0, [sp, #0]
 8013908:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 801390c:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013910:	1950      	adds	r0, r2, r5
 8013912:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013914:	f644 66a3 	movw	r6, #20131	@ 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013918:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801391c:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8013920:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013924:	4c56      	ldr	r4, [pc, #344]	@ (8013a80 <jpeg_idct_15x15+0x490>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013926:	9009      	str	r0, [sp, #36]	@ 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013928:	4852      	ldr	r0, [pc, #328]	@ (8013a74 <jpeg_idct_15x15+0x484>)
 801392a:	4378      	muls	r0, r7
 801392c:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801392e:	4852      	ldr	r0, [pc, #328]	@ (8013a78 <jpeg_idct_15x15+0x488>)
 8013930:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013932:	f642 5002 	movw	r0, #11522	@ 0x2d02
 8013936:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801393a:	fb0a f505 	mul.w	r5, sl, r5
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801393e:	f241 2a68 	movw	sl, #4712	@ 0x1268
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013942:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013946:	fb04 0002 	mla	r0, r4, r2, r0
 801394a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801394c:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801394e:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013952:	4420      	add	r0, r4
 8013954:	900b      	str	r0, [sp, #44]	@ 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8013956:	eb02 000e 	add.w	r0, r2, lr
 801395a:	fb0a f000 	mul.w	r0, sl, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801395e:	f640 7a39 	movw	sl, #3897	@ 0xf39
 8013962:	fb0a 0202 	mla	r2, sl, r2, r0
 8013966:	eba2 020c 	sub.w	r2, r2, ip
 801396a:	eb02 0a04 	add.w	sl, r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801396e:	4c43      	ldr	r4, [pc, #268]	@ (8013a7c <jpeg_idct_15x15+0x48c>)
 8013970:	fb04 000e 	mla	r0, r4, lr, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013974:	9c03      	ldr	r4, [sp, #12]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013976:	4460      	add	r0, ip
 8013978:	4438      	add	r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801397a:	19a7      	adds	r7, r4, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801397c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013980:	f819 7007 	ldrb.w	r7, [r9, r7]
 8013984:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8013986:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 8013988:	54a7      	strb	r7, [r4, r2]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801398a:	9a03      	ldr	r2, [sp, #12]
 801398c:	1b96      	subs	r6, r2, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801398e:	9a04      	ldr	r2, [sp, #16]
			     & RANGE_MASK];
 8013990:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013994:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013998:	739e      	strb	r6, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801399a:	eb01 0608 	add.w	r6, r1, r8
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801399e:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 80139a2:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 80139a6:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80139aa:	f819 6006 	ldrb.w	r6, [r9, r6]
 80139ae:	705e      	strb	r6, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80139b0:	f819 1001 	ldrb.w	r1, [r9, r1]
 80139b4:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80139b6:	eb0b 0105 	add.w	r1, fp, r5
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80139ba:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 80139be:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 80139c2:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80139c6:	f819 1001 	ldrb.w	r1, [r9, r1]
 80139ca:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80139cc:	f819 100b 	ldrb.w	r1, [r9, fp]
 80139d0:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80139d2:	eb02 010a 	add.w	r1, r2, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80139d6:	eba2 020a 	sub.w	r2, r2, sl
			     & RANGE_MASK];
 80139da:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80139de:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80139e2:	f819 1001 	ldrb.w	r1, [r9, r1]
 80139e6:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80139e8:	f819 2002 	ldrb.w	r2, [r9, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80139ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80139ee:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80139f0:	9a07      	ldr	r2, [sp, #28]
 80139f2:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80139f4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80139f8:	f819 2002 	ldrb.w	r2, [r9, r2]
 80139fc:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80139fe:	9a07      	ldr	r2, [sp, #28]
 8013a00:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a02:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013a06:	f819 2002 	ldrb.w	r2, [r9, r2]
 8013a0a:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013a0c:	9a05      	ldr	r2, [sp, #20]
 8013a0e:	4402      	add	r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013a14:	f819 2002 	ldrb.w	r2, [r9, r2]
 8013a18:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013a1a:	9a05      	ldr	r2, [sp, #20]
 8013a1c:	1a12      	subs	r2, r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a1e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013a22:	f819 2002 	ldrb.w	r2, [r9, r2]
 8013a26:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013a28:	9a06      	ldr	r2, [sp, #24]
 8013a2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013a2c:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a2e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013a32:	f819 2002 	ldrb.w	r2, [r9, r2]
 8013a36:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013a38:	9a06      	ldr	r2, [sp, #24]
 8013a3a:	1a52      	subs	r2, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013a3c:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a3e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013a42:	f819 2002 	ldrb.w	r2, [r9, r2]
 8013a46:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013a48:	9a02      	ldr	r2, [sp, #8]
 8013a4a:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a4e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8013a52:	f819 2002 	ldrb.w	r2, [r9, r2]
 8013a56:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 8013a58:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8013a5a:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 8013a5c:	3320      	adds	r3, #32
 8013a5e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8013a60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a62:	4293      	cmp	r3, r2
 8013a64:	f47f aee8 	bne.w	8013838 <jpeg_idct_15x15+0x248>
  }
}
 8013a68:	f50d 7d07 	add.w	sp, sp, #540	@ 0x21c
 8013a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a70:	ffffba5c 	.word	0xffffba5c
 8013a74:	ffffe566 	.word	0xffffe566
 8013a78:	ffffd4f6 	.word	0xffffd4f6
 8013a7c:	ffffe42f 	.word	0xffffe42f
 8013a80:	ffffdc67 	.word	0xffffdc67

08013a84 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a88:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8013a8c:	f1a2 0b02 	sub.w	fp, r2, #2
 8013a90:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013a92:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8013a96:	f103 0880 	add.w	r8, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013a9a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8013a9c:	f1a3 0a04 	sub.w	sl, r3, #4
 8013aa0:	f102 030e 	add.w	r3, r2, #14
 8013aa4:	930d      	str	r3, [sp, #52]	@ 0x34
  wsptr = workspace;
 8013aa6:	ab0e      	add	r3, sp, #56	@ 0x38
 8013aa8:	9300      	str	r3, [sp, #0]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013aaa:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013aae:	f241 1451 	movw	r4, #4433	@ 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ab2:	f85a 1f04 	ldr.w	r1, [sl, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013ab6:	f642 4563 	movw	r5, #11363	@ 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013aba:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	@ 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013abe:	f245 2e03 	movw	lr, #20995	@ 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ac2:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013ac4:	f8da 1080 	ldr.w	r1, [sl, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013ac8:	f9bb c060 	ldrsh.w	ip, [fp, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013acc:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8013ace:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013ad0:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013ad4:	4bcd      	ldr	r3, [pc, #820]	@ (8013e0c <jpeg_idct_16x16+0x388>)
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8013ad6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013ada:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013adc:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ade:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 8013ae2:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8013ae4:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8013ae6:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8013ae8:	1a52      	subs	r2, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013aea:	f8da 1040 	ldr.w	r1, [sl, #64]	@ 0x40
 8013aee:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013af2:	f8da 10c0 	ldr.w	r1, [sl, #192]	@ 0xc0
 8013af6:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013afa:	f640 01d4 	movw	r1, #2260	@ 0x8d4
    z3 = z1 - z2;
 8013afe:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013b02:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013b04:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013b06:	f641 45cd 	movw	r5, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013b0a:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013b0e:	fb03 4409 	mla	r4, r3, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013b12:	f203 23ee 	addw	r3, r3, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013b16:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013b1a:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013b1e:	fb03 110c 	mla	r1, r3, ip, r1
    tmp20 = tmp10 + tmp0;
 8013b22:	eb07 030e 	add.w	r3, r7, lr
 8013b26:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013b28:	eba7 030e 	sub.w	r3, r7, lr
 8013b2c:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013b2e:	1973      	adds	r3, r6, r5
 8013b30:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013b32:	1b73      	subs	r3, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013b34:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	@ 0x50
    tmp26 = tmp12 - tmp1;
 8013b38:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013b3a:	1913      	adds	r3, r2, r4
 8013b3c:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013b3e:	1b13      	subs	r3, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b40:	f8da 2020 	ldr.w	r2, [sl, #32]
    tmp25 = tmp13 - tmp2;
 8013b44:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013b46:	1843      	adds	r3, r0, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013b48:	f8da 40e0 	ldr.w	r4, [sl, #224]	@ 0xe0
    tmp23 = tmp11 + tmp3;
 8013b4c:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013b4e:	1a43      	subs	r3, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b50:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013b54:	f8da 0060 	ldr.w	r0, [sl, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b58:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013b5a:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	@ 0x30
    tmp24 = tmp11 - tmp3;
 8013b5e:	9308      	str	r3, [sp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013b60:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013b62:	f8da 00a0 	ldr.w	r0, [sl, #160]	@ 0xa0
 8013b66:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013b68:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	@ 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013b6c:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013b6e:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013b70:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp11 = z1 + z3;
 8013b74:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013b76:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013b78:	eb01 0e00 	add.w	lr, r1, r0
 8013b7c:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013b80:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013b84:	fb09 f907 	mul.w	r9, r9, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013b88:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013b8c:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
 8013b90:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013b94:	f241 5455 	movw	r4, #5461	@ 0x1555
 8013b98:	fb04 f307 	mul.w	r3, r4, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013b9c:	1a8c      	subs	r4, r1, r2
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013b9e:	eb06 0709 	add.w	r7, r6, r9
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013ba2:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013ba4:	f640 5323 	movw	r3, #3363	@ 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013ba8:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013baa:	435c      	muls	r4, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013bac:	4b98      	ldr	r3, [pc, #608]	@ (8013e10 <jpeg_idct_16x16+0x38c>)
 8013bae:	fb03 7701 	mla	r7, r3, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013bb4:	940a      	str	r4, [sp, #40]	@ 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013bb6:	eb0c 0403 	add.w	r4, ip, r3
 8013bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bbc:	441c      	add	r4, r3
 8013bbe:	4b95      	ldr	r3, [pc, #596]	@ (8013e14 <jpeg_idct_16x16+0x390>)
 8013bc0:	fb03 4101 	mla	r1, r3, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013bc4:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013bc6:	4b94      	ldr	r3, [pc, #592]	@ (8013e18 <jpeg_idct_16x16+0x394>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013bc8:	910b      	str	r1, [sp, #44]	@ 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013bca:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8013bce:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013bd0:	f240 214d 	movw	r1, #589	@ 0x24d
 8013bd4:	fb01 4102 	mla	r1, r1, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013bd8:	fb03 4405 	mla	r4, r3, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013bdc:	f503 6338 	add.w	r3, r3, #2944	@ 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013be0:	440e      	add	r6, r1
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013be2:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013be4:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013be6:	f642 5909 	movw	r9, #11529	@ 0x2d09
 8013bea:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013bee:	fb03 1905 	mla	r9, r3, r5, r1
 8013bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bf4:	4499      	add	r9, r3
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013bf6:	f643 731a 	movw	r3, #16154	@ 0x3f1a
 8013bfa:	fb03 1102 	mla	r1, r3, r2, r1
 8013bfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    z2    += z4;
 8013c00:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013c02:	18cb      	adds	r3, r1, r3
 8013c04:	9309      	str	r3, [sp, #36]	@ 0x24
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013c06:	4b85      	ldr	r3, [pc, #532]	@ (8013e1c <jpeg_idct_16x16+0x398>)
 8013c08:	fb03 f102 	mul.w	r1, r3, r2
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013c0c:	f242 2318 	movw	r3, #8728	@ 0x2218
    tmp1  += z1;
 8013c10:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013c12:	fb03 1100 	mla	r1, r3, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013c16:	4b82      	ldr	r3, [pc, #520]	@ (8013e20 <jpeg_idct_16x16+0x39c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013c18:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013c1a:	f246 4e85 	movw	lr, #25733	@ 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013c1e:	435a      	muls	r2, r3
    tmp12 += z2;
 8013c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013c22:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 8013c26:	441a      	add	r2, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013c28:	4b7e      	ldr	r3, [pc, #504]	@ (8013e24 <jpeg_idct_16x16+0x3a0>)
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013c2a:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013c2c:	eb05 0c00 	add.w	ip, r5, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013c30:	1b40      	subs	r0, r0, r5
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013c32:	fb03 fc0c 	mul.w	ip, r3, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013c36:	f640 5323 	movw	r3, #3363	@ 0xd23
 8013c3a:	4358      	muls	r0, r3
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c3c:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 8013c3e:	4464      	add	r4, ip
    tmp3  += z2;
 8013c40:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c42:	19dd      	adds	r5, r3, r7
 8013c44:	9b00      	ldr	r3, [sp, #0]
    tmp10 += z2;
 8013c46:	4486      	add	lr, r0
    tmp11 += z2;
 8013c48:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c4a:	12ed      	asrs	r5, r5, #11
 8013c4c:	601d      	str	r5, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013c4e:	9b01      	ldr	r3, [sp, #4]
 8013c50:	1bdd      	subs	r5, r3, r7
 8013c52:	9b00      	ldr	r3, [sp, #0]
 8013c54:	12ed      	asrs	r5, r5, #11
 8013c56:	f8c3 51e0 	str.w	r5, [r3, #480]	@ 0x1e0
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013c5a:	9b03      	ldr	r3, [sp, #12]
 8013c5c:	199d      	adds	r5, r3, r6
 8013c5e:	9b00      	ldr	r3, [sp, #0]
 8013c60:	12ed      	asrs	r5, r5, #11
 8013c62:	621d      	str	r5, [r3, #32]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013c64:	9b03      	ldr	r3, [sp, #12]
 8013c66:	1b9d      	subs	r5, r3, r6
 8013c68:	9b00      	ldr	r3, [sp, #0]
 8013c6a:	12ed      	asrs	r5, r5, #11
 8013c6c:	f8c3 51c0 	str.w	r5, [r3, #448]	@ 0x1c0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013c70:	9b05      	ldr	r3, [sp, #20]
 8013c72:	191d      	adds	r5, r3, r4
 8013c74:	9b00      	ldr	r3, [sp, #0]
 8013c76:	12ed      	asrs	r5, r5, #11
 8013c78:	641d      	str	r5, [r3, #64]	@ 0x40
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013c7a:	9b05      	ldr	r3, [sp, #20]
 8013c7c:	1b1c      	subs	r4, r3, r4
 8013c7e:	9b00      	ldr	r3, [sp, #0]
 8013c80:	12e4      	asrs	r4, r4, #11
 8013c82:	f8c3 41a0 	str.w	r4, [r3, #416]	@ 0x1a0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013c86:	9b07      	ldr	r3, [sp, #28]
 8013c88:	185c      	adds	r4, r3, r1
 8013c8a:	9b00      	ldr	r3, [sp, #0]
 8013c8c:	12e4      	asrs	r4, r4, #11
 8013c8e:	661c      	str	r4, [r3, #96]	@ 0x60
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013c90:	9b07      	ldr	r3, [sp, #28]
 8013c92:	1a59      	subs	r1, r3, r1
 8013c94:	9b00      	ldr	r3, [sp, #0]
 8013c96:	12c9      	asrs	r1, r1, #11
 8013c98:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013c9c:	9b08      	ldr	r3, [sp, #32]
 8013c9e:	eb03 010e 	add.w	r1, r3, lr
 8013ca2:	9b00      	ldr	r3, [sp, #0]
 8013ca4:	12c9      	asrs	r1, r1, #11
 8013ca6:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013caa:	9b08      	ldr	r3, [sp, #32]
 8013cac:	eba3 010e 	sub.w	r1, r3, lr
 8013cb0:	9b00      	ldr	r3, [sp, #0]
 8013cb2:	12c9      	asrs	r1, r1, #11
 8013cb4:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013cb8:	9b06      	ldr	r3, [sp, #24]
 8013cba:	1819      	adds	r1, r3, r0
 8013cbc:	9b00      	ldr	r3, [sp, #0]
 8013cbe:	12c9      	asrs	r1, r1, #11
 8013cc0:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013cc4:	9b06      	ldr	r3, [sp, #24]
 8013cc6:	1a19      	subs	r1, r3, r0
 8013cc8:	9b00      	ldr	r3, [sp, #0]
 8013cca:	12c9      	asrs	r1, r1, #11
 8013ccc:	f8c3 1140 	str.w	r1, [r3, #320]	@ 0x140
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013cd0:	9b04      	ldr	r3, [sp, #16]
 8013cd2:	1899      	adds	r1, r3, r2
 8013cd4:	9b00      	ldr	r3, [sp, #0]
 8013cd6:	12c9      	asrs	r1, r1, #11
 8013cd8:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013cdc:	9b04      	ldr	r3, [sp, #16]
 8013cde:	1a9a      	subs	r2, r3, r2
 8013ce0:	9b00      	ldr	r3, [sp, #0]
 8013ce2:	12d2      	asrs	r2, r2, #11
 8013ce4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013ce8:	9b02      	ldr	r3, [sp, #8]
 8013cea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013cec:	189a      	adds	r2, r3, r2
 8013cee:	9b00      	ldr	r3, [sp, #0]
 8013cf0:	12d2      	asrs	r2, r2, #11
 8013cf2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013cf6:	9b02      	ldr	r3, [sp, #8]
 8013cf8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013cfa:	1a9a      	subs	r2, r3, r2
 8013cfc:	9b00      	ldr	r3, [sp, #0]
 8013cfe:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013d00:	3304      	adds	r3, #4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013d02:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d0a:	455b      	cmp	r3, fp
 8013d0c:	f47f aecd 	bne.w	8013aaa <jpeg_idct_16x16+0x26>
 8013d10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d12:	3b04      	subs	r3, #4
 8013d14:	9301      	str	r3, [sp, #4]
 8013d16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d18:	333c      	adds	r3, #60	@ 0x3c
 8013d1a:	930d      	str	r3, [sp, #52]	@ 0x34
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8013d1c:	ab0e      	add	r3, sp, #56	@ 0x38
 8013d1e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013d20:	9b01      	ldr	r3, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013d22:	f241 1051 	movw	r0, #4433	@ 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013d26:	f642 14cf 	movw	r4, #10703	@ 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013d2a:	f642 4663 	movw	r6, #11363	@ 0x2c63
    outptr = output_buf[ctr] + output_col;
 8013d2e:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013d32:	f245 2703 	movw	r7, #20995	@ 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013d36:	4d35      	ldr	r5, [pc, #212]	@ (8013e0c <jpeg_idct_16x16+0x388>)
    outptr = output_buf[ctr] + output_col;
 8013d38:	920c      	str	r2, [sp, #48]	@ 0x30
 8013d3a:	9301      	str	r3, [sp, #4]
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	9a98      	ldr	r2, [sp, #608]	@ 0x260
 8013d40:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d42:	9b00      	ldr	r3, [sp, #0]
    z1 = (INT32) wsptr[4];
 8013d44:	9a00      	ldr	r2, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d46:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8013d48:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d4a:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013d4c:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013d4e:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013d50:	f640 00d4 	movw	r0, #2260	@ 0x8d4
    tmp10 = tmp0 + tmp1;
 8013d54:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8013d58:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8013d5c:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8013d60:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 8013d64:	9b00      	ldr	r3, [sp, #0]
 8013d66:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 8013d6a:	f8d3 a018 	ldr.w	sl, [r3, #24]
    z3 = z1 - z2;
 8013d6e:	eba9 030a 	sub.w	r3, r9, sl
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013d72:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013d74:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013d76:	f641 46cd 	movw	r6, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013d7a:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013d7e:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013d82:	f205 25ee 	addw	r5, r5, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013d86:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013d8a:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013d8e:	fb05 000a 	mla	r0, r5, sl, r0
    tmp20 = tmp10 + tmp0;
 8013d92:	eb0e 0507 	add.w	r5, lr, r7
 8013d96:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 8013d98:	ebae 0507 	sub.w	r5, lr, r7
 8013d9c:	9503      	str	r5, [sp, #12]
    tmp21 = tmp12 + tmp1;
 8013d9e:	eb0c 0506 	add.w	r5, ip, r6
 8013da2:	9504      	str	r5, [sp, #16]
    tmp26 = tmp12 - tmp1;
 8013da4:	ebac 0506 	sub.w	r5, ip, r6
 8013da8:	9505      	str	r5, [sp, #20]
    tmp22 = tmp13 + tmp2;
 8013daa:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8013dac:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8013dae:	9506      	str	r5, [sp, #24]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013db0:	f640 5523 	movw	r5, #3363	@ 0xd23
    tmp25 = tmp13 - tmp2;
 8013db4:	9307      	str	r3, [sp, #28]
    tmp23 = tmp11 + tmp3;
 8013db6:	1823      	adds	r3, r4, r0
 8013db8:	9308      	str	r3, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8013dba:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8013dbc:	9800      	ldr	r0, [sp, #0]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013dbe:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp24 = tmp11 - tmp3;
 8013dc2:	9309      	str	r3, [sp, #36]	@ 0x24
    z1 = (INT32) wsptr[1];
 8013dc4:	9b00      	ldr	r3, [sp, #0]
    z3 = (INT32) wsptr[5];
 8013dc6:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8013dc8:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8013dca:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8013dcc:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8013dce:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013dd2:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013dd4:	eba2 0b03 	sub.w	fp, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013dd8:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013ddc:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013de0:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013de2:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013de6:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013dea:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013dee:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013df2:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013df6:	4d06      	ldr	r5, [pc, #24]	@ (8013e10 <jpeg_idct_16x16+0x38c>)
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013df8:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013dfc:	f241 5455 	movw	r4, #5461	@ 0x1555
 8013e00:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013e04:	eb06 0409 	add.w	r4, r6, r9
 8013e08:	4474      	add	r4, lr
 8013e0a:	e00d      	b.n	8013e28 <jpeg_idct_16x16+0x3a4>
 8013e0c:	ffffecc2 	.word	0xffffecc2
 8013e10:	ffffb6d6 	.word	0xffffb6d6
 8013e14:	ffffc542 	.word	0xffffc542
 8013e18:	ffffdbfa 	.word	0xffffdbfa
 8013e1c:	ffffeaab 	.word	0xffffeaab
 8013e20:	ffffd817 	.word	0xffffd817
 8013e24:	ffffd4b2 	.word	0xffffd4b2
 8013e28:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013e2c:	f605 656c 	addw	r5, r5, #3692	@ 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013e30:	940a      	str	r4, [sp, #40]	@ 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013e32:	eb0c 040a 	add.w	r4, ip, sl
 8013e36:	445c      	add	r4, fp
 8013e38:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013e3c:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013e3e:	4d5e      	ldr	r5, [pc, #376]	@ (8013fb8 <jpeg_idct_16x16+0x534>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013e40:	920b      	str	r2, [sp, #44]	@ 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013e42:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8013e46:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013e48:	f240 224d 	movw	r2, #589	@ 0x24d
 8013e4c:	fb02 4203 	mla	r2, r2, r3, r4
 8013e50:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013e52:	4a5a      	ldr	r2, [pc, #360]	@ (8013fbc <jpeg_idct_16x16+0x538>)
 8013e54:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013e58:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013e5a:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013e5c:	f642 5909 	movw	r9, #11529	@ 0x2d09
 8013e60:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013e64:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013e68:	f6a5 7563 	subw	r5, r5, #3939	@ 0xf63
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013e6c:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013e6e:	f643 7a1a 	movw	sl, #16154	@ 0x3f1a
 8013e72:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 8013e76:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013e78:	eb02 0a0b 	add.w	sl, r2, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013e7c:	4a50      	ldr	r2, [pc, #320]	@ (8013fc0 <jpeg_idct_16x16+0x53c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013e7e:	f242 2b18 	movw	fp, #8728	@ 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013e82:	435a      	muls	r2, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013e84:	436b      	muls	r3, r5
    tmp1  += z1;
 8013e86:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013e88:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
 8013e8c:	449a      	add	sl, r3
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013e8e:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013e90:	f246 4e85 	movw	lr, #25733	@ 0x6485
 8013e94:	fb0e 3e00 	mla	lr, lr, r0, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013e98:	f46f 7359 	mvn.w	r3, #868	@ 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013e9c:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013e9e:	441d      	add	r5, r3
 8013ea0:	eb07 0c00 	add.w	ip, r7, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013ea4:	1bc0      	subs	r0, r0, r7
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013ea6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013ea8:	fb05 fc0c 	mul.w	ip, r5, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013eac:	f640 5523 	movw	r5, #3363	@ 0xd23
 8013eb0:	4368      	muls	r0, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013eb2:	9d02      	ldr	r5, [sp, #8]
    tmp2  += z2;
 8013eb4:	4464      	add	r4, ip
    tmp3  += z2;
 8013eb6:	4462      	add	r2, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013eb8:	19ef      	adds	r7, r5, r7
 8013eba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    tmp10 += z2;
 8013ebc:	4486      	add	lr, r0
    tmp11 += z2;
 8013ebe:	4448      	add	r0, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013ec0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013ec4:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013ec8:	9b98      	ldr	r3, [sp, #608]	@ 0x260
 8013eca:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013ecc:	9b02      	ldr	r3, [sp, #8]
 8013ece:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013ed0:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013ed2:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8013ed4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013ed8:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013edc:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013ede:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013ee0:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013ee2:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8013ee4:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8013ee8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013eec:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013ef0:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013ef2:	f818 6006 	ldrb.w	r6, [r8, r6]
 8013ef6:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013ef8:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013efa:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013efc:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013efe:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8013f02:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013f06:	f818 6006 	ldrb.w	r6, [r8, r6]
 8013f0a:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013f0c:	f818 4004 	ldrb.w	r4, [r8, r4]
 8013f10:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013f12:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013f14:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			     & RANGE_MASK];
 8013f18:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8013f1c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013f20:	f818 4004 	ldrb.w	r4, [r8, r4]
 8013f24:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013f26:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013f2a:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013f2c:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013f30:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013f34:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013f38:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013f3a:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013f3e:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8013f40:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013f44:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013f48:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013f4a:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013f4c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013f50:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013f54:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013f56:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013f58:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8013f5a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013f5e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013f62:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013f64:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013f68:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8013f6c:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013f70:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013f74:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013f78:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013f7a:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013f7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013f80:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013f82:	9b03      	ldr	r3, [sp, #12]
 8013f84:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013f86:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013f8a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013f8e:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013f90:	9b03      	ldr	r3, [sp, #12]
 8013f92:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8013f94:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013f96:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013f9a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013f9e:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8013fa0:	9b00      	ldr	r3, [sp, #0]
 8013fa2:	3320      	adds	r3, #32
 8013fa4:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
 8013fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	f47f aeb9 	bne.w	8013d20 <jpeg_idct_16x16+0x29c>
  }
}
 8013fae:	f50d 7d0f 	add.w	sp, sp, #572	@ 0x23c
 8013fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb6:	bf00      	nop
 8013fb8:	ffffe77a 	.word	0xffffe77a
 8013fbc:	ffffdbfa 	.word	0xffffdbfa
 8013fc0:	ffffeaab 	.word	0xffffeaab

08013fc4 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc8:	b0d1      	sub	sp, #324	@ 0x144
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013fca:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
{
 8013fcc:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8013fce:	a910      	add	r1, sp, #64	@ 0x40
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013fd0:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8013fd4:	f103 0b80 	add.w	fp, r3, #128	@ 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013fd8:	1e93      	subs	r3, r2, #2
 8013fda:	9301      	str	r3, [sp, #4]
 8013fdc:	f105 0320 	add.w	r3, r5, #32
 8013fe0:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013fe2:	9b01      	ldr	r3, [sp, #4]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8013fe4:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013fe6:	f855 0b04 	ldr.w	r0, [r5], #4
 8013fea:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013fec:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8013ff0:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8013ff4:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	@ 0x32
 8013ff8:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013ffc:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	@ 0x52
 8014000:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8014004:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	@ 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014008:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 801400c:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801400e:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014012:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014014:	ea4e 0000 	orr.w	r0, lr, r0
 8014018:	4330      	orrs	r0, r6
 801401a:	ea48 0000 	orr.w	r0, r8, r0
 801401e:	4320      	orrs	r0, r4
 8014020:	ea59 0000 	orrs.w	r0, r9, r0
 8014024:	f040 8152 	bne.w	80142cc <jpeg_idct_16x8+0x308>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014028:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 801402a:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 801402e:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8014030:	63cb      	str	r3, [r1, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8014032:	65cb      	str	r3, [r1, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8014034:	67cb      	str	r3, [r1, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8014036:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 801403a:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 801403e:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8014042:	9b05      	ldr	r3, [sp, #20]
 8014044:	42ab      	cmp	r3, r5
 8014046:	d1cc      	bne.n	8013fe2 <jpeg_idct_16x8+0x1e>
 8014048:	9b04      	ldr	r3, [sp, #16]
 801404a:	3b04      	subs	r3, #4
 801404c:	9302      	str	r3, [sp, #8]
 801404e:	9b04      	ldr	r3, [sp, #16]
 8014050:	331c      	adds	r3, #28
 8014052:	930f      	str	r3, [sp, #60]	@ 0x3c
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8014054:	ab10      	add	r3, sp, #64	@ 0x40
 8014056:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014058:	9b02      	ldr	r3, [sp, #8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801405a:	f241 1051 	movw	r0, #4433	@ 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801405e:	f642 14cf 	movw	r4, #10703	@ 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014062:	f642 4663 	movw	r6, #11363	@ 0x2c63
    outptr = output_buf[ctr] + output_col;
 8014066:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801406a:	f245 2703 	movw	r7, #20995	@ 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801406e:	4dd7      	ldr	r5, [pc, #860]	@ (80143cc <jpeg_idct_16x8+0x408>)
    outptr = output_buf[ctr] + output_col;
 8014070:	920e      	str	r2, [sp, #56]	@ 0x38
 8014072:	9302      	str	r3, [sp, #8]
 8014074:	4613      	mov	r3, r2
 8014076:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
 8014078:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801407a:	9b01      	ldr	r3, [sp, #4]
    z1 = (INT32) wsptr[4];
 801407c:	9a01      	ldr	r2, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801407e:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8014080:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014082:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014084:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014086:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014088:	f640 00d4 	movw	r0, #2260	@ 0x8d4
    tmp10 = tmp0 + tmp1;
 801408c:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8014090:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8014094:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8014098:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 801409c:	9b01      	ldr	r3, [sp, #4]
 801409e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 80140a2:	f8d3 8018 	ldr.w	r8, [r3, #24]
    z3 = z1 - z2;
 80140a6:	eba9 0308 	sub.w	r3, r9, r8
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80140aa:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80140ac:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80140ae:	f641 46cd 	movw	r6, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80140b2:	fb07 3708 	mla	r7, r7, r8, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80140b6:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80140ba:	f205 25ee 	addw	r5, r5, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80140be:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80140c2:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80140c6:	fb05 0008 	mla	r0, r5, r8, r0
    tmp20 = tmp10 + tmp0;
 80140ca:	eb0e 0507 	add.w	r5, lr, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80140ce:	f640 5823 	movw	r8, #3363	@ 0xd23
    tmp20 = tmp10 + tmp0;
 80140d2:	9503      	str	r5, [sp, #12]
    tmp27 = tmp10 - tmp0;
 80140d4:	ebae 0507 	sub.w	r5, lr, r7
 80140d8:	9504      	str	r5, [sp, #16]
    tmp21 = tmp12 + tmp1;
 80140da:	eb0c 0506 	add.w	r5, ip, r6
 80140de:	9505      	str	r5, [sp, #20]
    tmp26 = tmp12 - tmp1;
 80140e0:	ebac 0506 	sub.w	r5, ip, r6
 80140e4:	9506      	str	r5, [sp, #24]
    tmp22 = tmp13 + tmp2;
 80140e6:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 80140e8:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 80140ea:	9507      	str	r5, [sp, #28]
    tmp25 = tmp13 - tmp2;
 80140ec:	9308      	str	r3, [sp, #32]
    tmp23 = tmp11 + tmp3;
 80140ee:	1823      	adds	r3, r4, r0
    tmp0  = tmp1 + tmp2 + tmp3 -
 80140f0:	4db7      	ldr	r5, [pc, #732]	@ (80143d0 <jpeg_idct_16x8+0x40c>)
    tmp23 = tmp11 + tmp3;
 80140f2:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp24 = tmp11 - tmp3;
 80140f4:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 80140f6:	9801      	ldr	r0, [sp, #4]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140f8:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp24 = tmp11 - tmp3;
 80140fc:	930a      	str	r3, [sp, #40]	@ 0x28
    z1 = (INT32) wsptr[1];
 80140fe:	9b01      	ldr	r3, [sp, #4]
    z3 = (INT32) wsptr[5];
 8014100:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8014102:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8014104:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8014106:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8014108:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801410c:	18d6      	adds	r6, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801410e:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8014112:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014116:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014118:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801411c:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014120:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8014124:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
 8014128:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801412c:	f241 5455 	movw	r4, #5461	@ 0x1555
 8014130:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014134:	1ad4      	subs	r4, r2, r3
 8014136:	fb08 f404 	mul.w	r4, r8, r4
 801413a:	940b      	str	r4, [sp, #44]	@ 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 801413c:	eb06 0409 	add.w	r4, r6, r9
 8014140:	4474      	add	r4, lr
 8014142:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014146:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014148:	940c      	str	r4, [sp, #48]	@ 0x30
    tmp13 = tmp10 + tmp11 + tmp12 -
 801414a:	eb0c 040a 	add.w	r4, ip, sl
 801414e:	442c      	add	r4, r5
 8014150:	4da0      	ldr	r5, [pc, #640]	@ (80143d4 <jpeg_idct_16x8+0x410>)
 8014152:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014156:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014158:	4d9f      	ldr	r5, [pc, #636]	@ (80143d8 <jpeg_idct_16x8+0x414>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801415a:	920d      	str	r2, [sp, #52]	@ 0x34
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801415c:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8014160:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8014162:	f240 224d 	movw	r2, #589	@ 0x24d
 8014166:	fb02 4203 	mla	r2, r2, r3, r4
 801416a:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801416c:	4a9b      	ldr	r2, [pc, #620]	@ (80143dc <jpeg_idct_16x8+0x418>)
 801416e:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014172:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014174:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014176:	f642 5909 	movw	r9, #11529	@ 0x2d09
 801417a:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801417e:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014182:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014184:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014186:	f643 7a1a 	movw	sl, #16154	@ 0x3f1a
 801418a:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 801418e:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014190:	eb02 0a05 	add.w	sl, r2, r5
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014194:	4a92      	ldr	r2, [pc, #584]	@ (80143e0 <jpeg_idct_16x8+0x41c>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014196:	f242 2518 	movw	r5, #8728	@ 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801419a:	435a      	muls	r2, r3
    tmp1  += z1;
 801419c:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801419e:	fb05 2200 	mla	r2, r5, r0, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80141a2:	4d90      	ldr	r5, [pc, #576]	@ (80143e4 <jpeg_idct_16x8+0x420>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80141a4:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80141a6:	f246 4e85 	movw	lr, #25733	@ 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80141aa:	436b      	muls	r3, r5
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80141ac:	fb0e 3e00 	mla	lr, lr, r0, r3
    tmp12 += z2;
 80141b0:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80141b2:	f46f 7359 	mvn.w	r3, #868	@ 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80141b6:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80141b8:	eb07 0c00 	add.w	ip, r7, r0
 80141bc:	441d      	add	r5, r3
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80141be:	1bc0      	subs	r0, r0, r7
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80141c0:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80141c4:	9d03      	ldr	r5, [sp, #12]
 80141c6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80141c8:	fb08 f000 	mul.w	r0, r8, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80141cc:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
    tmp2  += z2;
 80141ce:	4464      	add	r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80141d0:	19ef      	adds	r7, r5, r7
 80141d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
    tmp3  += z2;
 80141d4:	4462      	add	r2, ip
    tmp10 += z2;
 80141d6:	4486      	add	lr, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141d8:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp11 += z2;
 80141dc:	4448      	add	r0, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80141de:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80141e2:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80141e4:	9b03      	ldr	r3, [sp, #12]
 80141e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80141e8:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80141ea:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80141ec:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80141f0:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80141f4:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80141f6:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80141f8:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80141fa:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80141fc:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8014200:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8014204:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8014208:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801420a:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801420e:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8014210:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8014212:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8014214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			     & RANGE_MASK];
 8014216:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 801421a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801421e:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8014222:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8014224:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8014228:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801422a:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801422c:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801422e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
			     & RANGE_MASK];
 8014230:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8014234:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8014238:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801423c:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801423e:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8014242:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8014244:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014248:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801424c:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8014250:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8014252:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8014256:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8014258:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801425c:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8014260:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8014262:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014264:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8014268:	f81b 2002 	ldrb.w	r2, [fp, r2]
 801426c:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801426e:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014270:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8014274:	f81b 2002 	ldrb.w	r2, [fp, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8014278:	9b06      	ldr	r3, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801427a:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801427c:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014280:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8014284:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014288:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801428c:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8014290:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014292:	f81b 3003 	ldrb.w	r3, [fp, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014296:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014298:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801429a:	9b04      	ldr	r3, [sp, #16]
 801429c:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801429e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80142a2:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80142a6:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80142a8:	9b04      	ldr	r3, [sp, #16]
 80142aa:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 80142ac:	9a02      	ldr	r2, [sp, #8]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80142ae:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80142b2:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80142b6:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 80142b8:	9b01      	ldr	r3, [sp, #4]
 80142ba:	3320      	adds	r3, #32
 80142bc:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
 80142be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142c0:	4293      	cmp	r3, r2
 80142c2:	f47f aec9 	bne.w	8014058 <jpeg_idct_16x8+0x94>
  }
}
 80142c6:	b051      	add	sp, #324	@ 0x144
 80142c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142cc:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80142ce:	f241 1251 	movw	r2, #4433	@ 0x1151
    z2 <<= CONST_BITS;
 80142d2:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142d4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142d6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80142da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142de:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80142e0:	183c      	adds	r4, r7, r0
 80142e2:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80142e4:	f641 027e 	movw	r2, #6270	@ 0x187e
 80142e8:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80142ec:	4a3e      	ldr	r2, [pc, #248]	@ (80143e8 <jpeg_idct_16x8+0x424>)
 80142ee:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142f2:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80142f4:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 80142f6:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 80142fa:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 80142fe:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8014302:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014304:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
    tmp11 = tmp1 + tmp3;
 8014308:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 801430a:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801430c:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801430e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014312:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014316:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801431a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801431e:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
    tmp13 = tmp0 - tmp2;
 8014320:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014322:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014326:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 801432a:	eb08 040a 	add.w	r4, r8, sl
    tmp12 = tmp1 - tmp3;
 801432e:	9303      	str	r3, [sp, #12]
    tmp0 += z1 + z2;
 8014330:	f640 138e 	movw	r3, #2446	@ 0x98e
    z2 = tmp0 + tmp2;
 8014334:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014338:	1930      	adds	r0, r6, r4
 801433a:	4350      	muls	r0, r2
    z2 += z1;
 801433c:	4a2b      	ldr	r2, [pc, #172]	@ (80143ec <jpeg_idct_16x8+0x428>)
 801433e:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8014342:	4a2b      	ldr	r2, [pc, #172]	@ (80143f0 <jpeg_idct_16x8+0x42c>)
 8014344:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014348:	eb09 040a 	add.w	r4, r9, sl
 801434c:	4a29      	ldr	r2, [pc, #164]	@ (80143f4 <jpeg_idct_16x8+0x430>)
 801434e:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8014350:	1932      	adds	r2, r6, r4
    tmp3 += z1 + z3;
 8014352:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8014354:	fb03 2909 	mla	r9, r3, r9, r2
    tmp3 += z1 + z3;
 8014358:	f243 030b 	movw	r3, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801435c:	4a26      	ldr	r2, [pc, #152]	@ (80143f8 <jpeg_idct_16x8+0x434>)
    tmp3 += z1 + z3;
 801435e:	fb03 440a 	mla	r4, r3, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014362:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014366:	f244 13b3 	movw	r3, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801436a:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 801436e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014370:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014372:	fb03 0008 	mla	r0, r3, r8, r0
    tmp2 += z1 + z2;
 8014376:	f246 2854 	movw	r8, #25172	@ 0x6254
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801437a:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801437c:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014380:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014384:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014388:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801438a:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801438e:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014392:	f8c1 40dc 	str.w	r4, [r1, #220]	@ 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014396:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801439a:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801439e:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80143a0:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80143a2:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80143a4:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80143a6:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80143a8:	f8c1 70bc 	str.w	r7, [r1, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80143ac:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80143ae:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80143b0:	63cc      	str	r4, [r1, #60]	@ 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80143b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80143b6:	9b02      	ldr	r3, [sp, #8]
 80143b8:	444b      	add	r3, r9
 80143ba:	12db      	asrs	r3, r3, #11
 80143bc:	65cb      	str	r3, [r1, #92]	@ 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80143be:	9b02      	ldr	r3, [sp, #8]
 80143c0:	eba3 0309 	sub.w	r3, r3, r9
 80143c4:	12db      	asrs	r3, r3, #11
 80143c6:	67cb      	str	r3, [r1, #124]	@ 0x7c
    wsptr++;
 80143c8:	e63b      	b.n	8014042 <jpeg_idct_16x8+0x7e>
 80143ca:	bf00      	nop
 80143cc:	ffffecc2 	.word	0xffffecc2
 80143d0:	ffffb6d6 	.word	0xffffb6d6
 80143d4:	ffffc542 	.word	0xffffc542
 80143d8:	ffffe77a 	.word	0xffffe77a
 80143dc:	ffffdbfa 	.word	0xffffdbfa
 80143e0:	ffffeaab 	.word	0xffffeaab
 80143e4:	ffffd817 	.word	0xffffd817
 80143e8:	ffffc4df 	.word	0xffffc4df
 80143ec:	ffffc13b 	.word	0xffffc13b
 80143f0:	fffff384 	.word	0xfffff384
 80143f4:	ffffe333 	.word	0xffffe333
 80143f8:	ffffadfd 	.word	0xffffadfd

080143fc <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80143fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014400:	b0c5      	sub	sp, #276	@ 0x114
 8014402:	6d4e      	ldr	r6, [r1, #84]	@ 0x54
 8014404:	f1a2 0c02 	sub.w	ip, r2, #2
 8014408:	320e      	adds	r2, #14
 801440a:	9303      	str	r3, [sp, #12]
 801440c:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801440e:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014412:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 8014416:	9205      	str	r2, [sp, #20]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014418:	3380      	adds	r3, #128	@ 0x80
 801441a:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801441c:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014420:	f640 2012 	movw	r0, #2578	@ 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014424:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014428:	f642 09c6 	movw	r9, #10438	@ 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801442c:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014430:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014434:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014436:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801443a:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	@ 0x60
    tmp23 <<= CONST_BITS;
 801443e:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014440:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014444:	9202      	str	r2, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014446:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014448:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801444a:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 801444e:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014452:	f8d6 20c0 	ldr.w	r2, [r6, #192]	@ 0xc0
 8014456:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014458:	f641 4237 	movw	r2, #7223	@ 0x1c37
 801445c:	eba8 0701 	sub.w	r7, r8, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014460:	186b      	adds	r3, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014462:	4357      	muls	r7, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014464:	eba5 0208 	sub.w	r2, r5, r8
 8014468:	4342      	muls	r2, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801446a:	9802      	ldr	r0, [sp, #8]
 801446c:	18bc      	adds	r4, r7, r2
 801446e:	4404      	add	r4, r0
 8014470:	48bd      	ldr	r0, [pc, #756]	@ (8014768 <jpeg_idct_14x7+0x36c>)
 8014472:	fb00 4408 	mla	r4, r0, r8, r4
    tmp10 = z1 + z3;
 8014476:	1868      	adds	r0, r5, r1
 8014478:	9004      	str	r0, [sp, #16]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801447a:	9802      	ldr	r0, [sp, #8]
 801447c:	fb09 0003 	mla	r0, r9, r3, r0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014480:	f46f 731f 	mvn.w	r3, #636	@ 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014484:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	@ 0x50
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014488:	fb03 0101 	mla	r1, r3, r1, r0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801448c:	4bb7      	ldr	r3, [pc, #732]	@ (801476c <jpeg_idct_14x7+0x370>)
 801448e:	fb03 0005 	mla	r0, r3, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014492:	6a35      	ldr	r5, [r6, #32]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014494:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014496:	6e37      	ldr	r7, [r6, #96]	@ 0x60
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014498:	4410      	add	r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801449a:	f9bc 2010 	ldrsh.w	r2, [ip, #16]

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801449e:	f641 53ef 	movw	r3, #7663	@ 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80144a2:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80144a4:	f9bc 5030 	ldrsh.w	r5, [ip, #48]	@ 0x30
 80144a8:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80144aa:	f8d6 70a0 	ldr.w	r7, [r6, #160]	@ 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80144ae:	eb02 0b05 	add.w	fp, r2, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80144b2:	fb07 f909 	mul.w	r9, r7, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80144b6:	1b57      	subs	r7, r2, r5
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80144b8:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80144bc:	f240 5373 	movw	r3, #1395	@ 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80144c0:	444a      	add	r2, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80144c2:	444d      	add	r5, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80144c4:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80144c6:	4baa      	ldr	r3, [pc, #680]	@ (8014770 <jpeg_idct_14x7+0x374>)
    tmp10 = tmp11 - tmp12;
 80144c8:	ebab 0a07 	sub.w	sl, fp, r7
    tmp11 += tmp12;
 80144cc:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80144ce:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80144d2:	435d      	muls	r5, r3
    z2 -= tmp10;
 80144d4:	9b04      	ldr	r3, [sp, #16]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80144d6:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80144da:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp11 += tmp12;
 80144de:	442f      	add	r7, r5
    z2 -= tmp10;
 80144e0:	eba8 0803 	sub.w	r8, r8, r3
    tmp10 += z2;
 80144e4:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80144e6:	fb0b 2209 	mla	r2, fp, r9, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80144ea:	9b02      	ldr	r3, [sp, #8]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80144ec:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80144ee:	eb01 050a 	add.w	r5, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80144f2:	eba1 010a 	sub.w	r1, r1, sl
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80144f6:	12ed      	asrs	r5, r5, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80144f8:	12c9      	asrs	r1, r1, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80144fa:	f84e 5c04 	str.w	r5, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80144fe:	f8ce 10bc 	str.w	r1, [lr, #188]	@ 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014502:	19e1      	adds	r1, r4, r7
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014504:	1be4      	subs	r4, r4, r7
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014506:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014508:	12e4      	asrs	r4, r4, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801450a:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801450e:	1881      	adds	r1, r0, r2
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014510:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014512:	f642 5241 	movw	r2, #11585	@ 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014516:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014518:	f8ce 409c 	str.w	r4, [lr, #156]	@ 0x9c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801451c:	fb02 3208 	mla	r2, r2, r8, r3
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014520:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014522:	12c0      	asrs	r0, r0, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014524:	f8ce 103c 	str.w	r1, [lr, #60]	@ 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8014528:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801452a:	4563      	cmp	r3, ip
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801452c:	f8ce 007c 	str.w	r0, [lr, #124]	@ 0x7c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8014530:	f8ce 205c 	str.w	r2, [lr, #92]	@ 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014534:	f47f af72 	bne.w	801441c <jpeg_idct_14x7+0x20>
 8014538:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801453a:	ac0c      	add	r4, sp, #48	@ 0x30
 801453c:	f1a3 0904 	sub.w	r9, r3, #4
 8014540:	3318      	adds	r3, #24
 8014542:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014544:	f859 3f04 	ldr.w	r3, [r9, #4]!
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014548:	f641 4537 	movw	r5, #7223	@ 0x1c37
    outptr = output_buf[ctr] + output_col;
 801454c:	9a4e      	ldr	r2, [sp, #312]	@ 0x138

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801454e:	f241 38a3 	movw	r8, #5027	@ 0x13a3
    z4 = (INT32) wsptr[4];
 8014552:	6927      	ldr	r7, [r4, #16]
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014554:	f46f 6aa2 	mvn.w	sl, #1296	@ 0x510
    outptr = output_buf[ctr] + output_col;
 8014558:	1899      	adds	r1, r3, r2
 801455a:	930a      	str	r3, [sp, #40]	@ 0x28
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801455c:	f642 03c6 	movw	r3, #10438	@ 0x28c6
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014560:	6820      	ldr	r0, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8014562:	3420      	adds	r4, #32
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014564:	fb03 f207 	mul.w	r2, r3, r7
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014568:	f640 2312 	movw	r3, #2578	@ 0xa12
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801456c:	3010      	adds	r0, #16
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801456e:	fb03 fe07 	mul.w	lr, r3, r7
    tmp10 = z1 + z2;
 8014572:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014576:	436f      	muls	r7, r5
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014578:	4472      	add	r2, lr
    tmp11 = z1 + z3;
 801457a:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z1 = (INT32) wsptr[2];
 801457e:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 8014582:	ebc7 3540 	rsb	r5, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014586:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014588:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801458c:	0052      	lsls	r2, r2, #1
 801458e:	ebc2 3340 	rsb	r3, r2, r0, lsl #13
    z2 = (INT32) wsptr[6];
 8014592:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014596:	eb0e 0002 	add.w	r0, lr, r2
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801459a:	9302      	str	r3, [sp, #8]
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801459c:	4b75      	ldr	r3, [pc, #468]	@ (8014774 <jpeg_idct_14x7+0x378>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801459e:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80145a0:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 80145a4:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80145a8:	fb03 0002 	mla	r0, r3, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80145ac:	f603 23e5 	addw	r3, r3, #2789	@ 0xae5
 80145b0:	435a      	muls	r2, r3
    tmp20 = tmp10 + tmp13;
 80145b2:	eb0c 0307 	add.w	r3, ip, r7
 80145b6:	9303      	str	r3, [sp, #12]
    tmp26 = tmp10 - tmp13;
 80145b8:	ebac 0307 	sub.w	r3, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80145bc:	fb08 220e 	mla	r2, r8, lr, r2
    z3 = (INT32) wsptr[5];
 80145c0:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp26 = tmp10 - tmp13;
 80145c4:	9304      	str	r3, [sp, #16]
    tmp21 = tmp11 + tmp14;
 80145c6:	1833      	adds	r3, r6, r0
    z2 = (INT32) wsptr[3];
 80145c8:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80145cc:	f640 6ef2 	movw	lr, #3826	@ 0xef2
    tmp21 = tmp11 + tmp14;
 80145d0:	9305      	str	r3, [sp, #20]
    tmp25 = tmp11 - tmp14;
 80145d2:	1a33      	subs	r3, r6, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80145d4:	f642 20b7 	movw	r0, #10935	@ 0x2ab7
    tmp25 = tmp11 - tmp14;
 80145d8:	9306      	str	r3, [sp, #24]
    tmp22 = tmp12 + tmp15;
 80145da:	18ab      	adds	r3, r5, r2
 80145dc:	9307      	str	r3, [sp, #28]
    tmp24 = tmp12 - tmp15;
 80145de:	1aab      	subs	r3, r5, r2
    z1 = (INT32) wsptr[1];
 80145e0:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80145e4:	f242 6552 	movw	r5, #9810	@ 0x2652
    tmp24 = tmp12 - tmp15;
 80145e8:	9308      	str	r3, [sp, #32]
    tmp14 = z1 + z3;
 80145ea:	eb02 0b0c 	add.w	fp, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80145ee:	eb02 0608 	add.w	r6, r2, r8
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80145f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80145f6:	4346      	muls	r6, r0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80145f8:	f641 0014 	movw	r0, #6164	@ 0x1814
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80145fc:	fb05 f50b 	mul.w	r5, r5, fp
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014600:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8014604:	1977      	adds	r7, r6, r5
 8014606:	eb07 3743 	add.w	r7, r7, r3, lsl #13
 801460a:	4b5b      	ldr	r3, [pc, #364]	@ (8014778 <jpeg_idct_14x7+0x37c>)
 801460c:	fb03 7702 	mla	r7, r3, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014610:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8014614:	fb03 b002 	mla	r0, r3, r2, fp
    z1    -= z2;
 8014618:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801461c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014620:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014624:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014628:	ebae 3e43 	sub.w	lr, lr, r3, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801462c:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 801462e:	eb00 030e 	add.w	r3, r0, lr
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014632:	eb08 000c 	add.w	r0, r8, ip
    tmp16 += tmp15;
 8014636:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014638:	fb0a f000 	mul.w	r0, sl, r0
 801463c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014640:	eba0 3043 	sub.w	r0, r0, r3, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8014644:	4b4d      	ldr	r3, [pc, #308]	@ (801477c <jpeg_idct_14x7+0x380>)
 8014646:	fb03 0a08 	mla	sl, r3, r8, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801464a:	4b4d      	ldr	r3, [pc, #308]	@ (8014780 <jpeg_idct_14x7+0x384>)
 801464c:	fb03 000c 	mla	r0, r3, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8014650:	44b2      	add	sl, r6
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014652:	f642 46f8 	movw	r6, #11512	@ 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014656:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801465a:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801465c:	ebac 0508 	sub.w	r5, ip, r8
 8014660:	4375      	muls	r5, r6
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014662:	eb05 3643 	add.w	r6, r5, r3, lsl #13
 8014666:	4b47      	ldr	r3, [pc, #284]	@ (8014784 <jpeg_idct_14x7+0x388>)
 8014668:	fb03 660c 	mla	r6, r3, ip, r6
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801466c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014670:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8014672:	f241 5b99 	movw	fp, #5529	@ 0x1599
 8014676:	fb0b 5508 	mla	r5, fp, r8, r5
 801467a:	4475      	add	r5, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801467c:	eb02 3e43 	add.w	lr, r2, r3, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014680:	9b03      	ldr	r3, [sp, #12]
 8014682:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
 8014684:	eb03 0c07 	add.w	ip, r3, r7
 8014688:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801468a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801468e:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8014692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014694:	f803 c002 	strb.w	ip, [r3, r2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014698:	9b03      	ldr	r3, [sp, #12]
 801469a:	1bdf      	subs	r7, r3, r7
 801469c:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801469e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80146a2:	5ddf      	ldrb	r7, [r3, r7]
 80146a4:	734f      	strb	r7, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80146a6:	9b05      	ldr	r3, [sp, #20]
 80146a8:	eb03 070a 	add.w	r7, r3, sl
 80146ac:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80146ae:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80146b2:	5ddf      	ldrb	r7, [r3, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146b4:	9b05      	ldr	r3, [sp, #20]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80146b6:	704f      	strb	r7, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146b8:	eba3 070a 	sub.w	r7, r3, sl
 80146bc:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80146be:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146c2:	5ddf      	ldrb	r7, [r3, r7]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146c4:	9b07      	ldr	r3, [sp, #28]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146c6:	730f      	strb	r7, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146c8:	181f      	adds	r7, r3, r0
 80146ca:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80146cc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146d0:	5ddf      	ldrb	r7, [r3, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146d2:	9b07      	ldr	r3, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146d4:	708f      	strb	r7, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146d6:	1a18      	subs	r0, r3, r0
 80146d8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80146da:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146de:	5c18      	ldrb	r0, [r3, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80146e0:	9b02      	ldr	r3, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146e2:	72c8      	strb	r0, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80146e4:	eb03 000e 	add.w	r0, r3, lr
 80146e8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80146ea:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80146ee:	5c18      	ldrb	r0, [r3, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80146f0:	9b02      	ldr	r3, [sp, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80146f2:	70c8      	strb	r0, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80146f4:	eba3 020e 	sub.w	r2, r3, lr
 80146f8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80146fa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80146fe:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014700:	9b08      	ldr	r3, [sp, #32]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014702:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014704:	199a      	adds	r2, r3, r6
 8014706:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014708:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801470c:	5c9a      	ldrb	r2, [r3, r2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801470e:	9b08      	ldr	r3, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014710:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014712:	1b9a      	subs	r2, r3, r6
 8014714:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014716:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801471a:	5c9a      	ldrb	r2, [r3, r2]
 801471c:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801471e:	9b06      	ldr	r3, [sp, #24]
 8014720:	195a      	adds	r2, r3, r5
 8014722:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014724:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014728:	5c9a      	ldrb	r2, [r3, r2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801472a:	9b06      	ldr	r3, [sp, #24]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801472c:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801472e:	1b5a      	subs	r2, r3, r5
 8014730:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014732:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014736:	5c9a      	ldrb	r2, [r3, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014738:	9b04      	ldr	r3, [sp, #16]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801473a:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801473c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801473e:	189a      	adds	r2, r3, r2
 8014740:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014742:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014746:	5c9a      	ldrb	r2, [r3, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014748:	9b04      	ldr	r3, [sp, #16]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801474a:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801474c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801474e:	1a9a      	subs	r2, r3, r2
 8014750:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014752:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014756:	5c9a      	ldrb	r2, [r3, r2]
  for (ctr = 0; ctr < 7; ctr++) {
 8014758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801475a:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 801475c:	454b      	cmp	r3, r9
 801475e:	f47f aef1 	bne.w	8014544 <jpeg_idct_14x7+0x148>
  }
}
 8014762:	b045      	add	sp, #276	@ 0x114
 8014764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014768:	ffffc515 	.word	0xffffc515
 801476c:	ffffb0f1 	.word	0xffffb0f1
 8014770:	ffffd3e1 	.word	0xffffd3e1
 8014774:	ffffc8fc 	.word	0xffffc8fc
 8014778:	ffffdbf0 	.word	0xffffdbf0
 801477c:	fffff26e 	.word	0xfffff26e
 8014780:	ffffb409 	.word	0xffffb409
 8014784:	ffffc9e6 	.word	0xffffc9e6

08014788 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801478c:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8014790:	b0bb      	sub	sp, #236	@ 0xec
 8014792:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8014794:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014796:	3080      	adds	r0, #128	@ 0x80
 8014798:	320e      	adds	r2, #14
 801479a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801479c:	af0a      	add	r7, sp, #40	@ 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801479e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80147a0:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80147a2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80147a6:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80147aa:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80147ae:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80147b0:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	@ 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80147b4:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80147b6:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80147ba:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80147be:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 80147c0:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80147c2:	f241 64a1 	movw	r4, #5793	@ 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80147c6:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	@ 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80147ca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147ce:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	@ 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80147d2:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 80147d4:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 80147d6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80147da:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80147dc:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80147e0:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147e2:	6a28      	ldr	r0, [r5, #32]
    tmp20 = tmp11 + tmp10;
 80147e4:	eb04 0e02 	add.w	lr, r4, r2
    tmp22 = tmp11 - tmp10;
 80147e8:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147ea:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 80147ee:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80147f0:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 80147f2:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147f6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	@ 0xa0
 80147fa:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80147fe:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014802:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014806:	eb02 0c08 	add.w	ip, r2, r8
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801480a:	eba2 0209 	sub.w	r2, r2, r9
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801480e:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014812:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014816:	eba2 0208 	sub.w	r2, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801481a:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801481e:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014820:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014824:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014828:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801482c:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014830:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014834:	f8c7 e09c 	str.w	lr, [r7, #156]	@ 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8014838:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 801483c:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014840:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8014844:	f8c7 e01c 	str.w	lr, [r7, #28]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8014848:	67fa      	str	r2, [r7, #124]	@ 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801484a:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801484e:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014852:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014854:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014856:	63fa      	str	r2, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014858:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801485a:	65fc      	str	r4, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801485c:	42b2      	cmp	r2, r6
 801485e:	d1a0      	bne.n	80147a2 <jpeg_idct_12x6+0x1a>
 8014860:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8014864:	aa0a      	add	r2, sp, #40	@ 0x28
 8014866:	3314      	adds	r3, #20
 8014868:	9309      	str	r3, [sp, #36]	@ 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801486a:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801486e:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8014870:	9944      	ldr	r1, [sp, #272]	@ 0x110
 8014872:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 8014874:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8014878:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801487a:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 801487e:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8014882:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014884:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 8014888:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801488c:	f242 7131 	movw	r1, #10033	@ 0x2731
    tmp12 = z1 - z2;
 8014890:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 8014894:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014898:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801489a:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
    tmp21 = z3 + tmp12;
 801489e:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80148a2:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 80148a4:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 80148a8:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 80148aa:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 80148ae:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 80148b2:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 80148b6:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 80148ba:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 80148be:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 80148c0:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 80148c4:	1b49      	subs	r1, r1, r5
    tmp10 = z1 + z3;
 80148c6:	eb08 0b06 	add.w	fp, r8, r6
    tmp20 = tmp10 + tmp12;
 80148ca:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 80148cc:	eba7 000c 	sub.w	r0, r7, ip
    z4 = (INT32) wsptr[7];
 80148d0:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80148d4:	f641 378d 	movw	r7, #7053	@ 0x1b8d
    tmp25 = tmp10 - tmp12;
 80148d8:	9005      	str	r0, [sp, #20]
    tmp22 = tmp11 + tmp12;
 80148da:	1860      	adds	r0, r4, r1
    tmp23 = tmp11 - tmp12;
 80148dc:	1a61      	subs	r1, r4, r1
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80148de:	eb05 0c0b 	add.w	ip, r5, fp
    tmp22 = tmp11 + tmp12;
 80148e2:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80148e4:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp23 = tmp11 - tmp12;
 80148e8:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80148ea:	eb06 0905 	add.w	r9, r6, r5
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80148ee:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80148f2:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80148f6:	f640 075b 	movw	r7, #2139	@ 0x85b
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80148fa:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80148fe:	484b      	ldr	r0, [pc, #300]	@ (8014a2c <jpeg_idct_12x6+0x2a4>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8014900:	fb07 cb0b 	mla	fp, r7, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014904:	f640 07f7 	movw	r7, #2295	@ 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8014908:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801490a:	4849      	ldr	r0, [pc, #292]	@ (8014a30 <jpeg_idct_12x6+0x2a8>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801490c:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014910:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014914:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014918:	f6a0 50db 	subw	r0, r0, #3547	@ 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801491c:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014920:	eb01 0709 	add.w	r7, r1, r9
 8014924:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014928:	4842      	ldr	r0, [pc, #264]	@ (8014a34 <jpeg_idct_12x6+0x2ac>)
 801492a:	fb00 1108 	mla	r1, r0, r8, r1
 801492e:	4842      	ldr	r0, [pc, #264]	@ (8014a38 <jpeg_idct_12x6+0x2b0>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014930:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014932:	f243 2bc6 	movw	fp, #12998	@ 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014936:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801493a:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801493e:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8014942:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8014946:	1b86      	subs	r6, r0, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014948:	4461      	add	r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801494a:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801494e:	483b      	ldr	r0, [pc, #236]	@ (8014a3c <jpeg_idct_12x6+0x2b4>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014950:	eb05 0c06 	add.w	ip, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014954:	444c      	add	r4, r9
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014956:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801495a:	f641 087e 	movw	r8, #6270	@ 0x187e
 801495e:	fb08 c805 	mla	r8, r8, r5, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014962:	fb00 cc06 	mla	ip, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014966:	9804      	ldr	r0, [sp, #16]
 8014968:	9e44      	ldr	r6, [sp, #272]	@ 0x110
 801496a:	eb00 050e 	add.w	r5, r0, lr
 801496e:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014970:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014974:	5d45      	ldrb	r5, [r0, r5]
 8014976:	9808      	ldr	r0, [sp, #32]
 8014978:	5585      	strb	r5, [r0, r6]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801497a:	9804      	ldr	r0, [sp, #16]
 801497c:	eba0 050e 	sub.w	r5, r0, lr
 8014980:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014982:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014986:	5d45      	ldrb	r5, [r0, r5]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014988:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801498a:	72dd      	strb	r5, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801498c:	eb00 0508 	add.w	r5, r0, r8
 8014990:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014992:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014996:	5d45      	ldrb	r5, [r0, r5]
 8014998:	705d      	strb	r5, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801499a:	9802      	ldr	r0, [sp, #8]
 801499c:	eba0 0508 	sub.w	r5, r0, r8
 80149a0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149a2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80149a6:	5d45      	ldrb	r5, [r0, r5]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149a8:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80149aa:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149ac:	19c5      	adds	r5, r0, r7
 80149ae:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149b0:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149b4:	5d45      	ldrb	r5, [r0, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149b6:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149b8:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149ba:	1bc5      	subs	r5, r0, r7
 80149bc:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149be:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149c2:	5d45      	ldrb	r5, [r0, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80149c4:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149c6:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80149c8:	1905      	adds	r5, r0, r4
 80149ca:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149cc:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80149d0:	5d45      	ldrb	r5, [r0, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80149d2:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80149d4:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80149d6:	1b04      	subs	r4, r0, r4
 80149d8:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149da:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80149de:	5d04      	ldrb	r4, [r0, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80149e0:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80149e2:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80149e4:	eb00 040c 	add.w	r4, r0, ip
 80149e8:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149ea:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80149ee:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80149f0:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80149f2:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80149f4:	eba0 040c 	sub.w	r4, r0, ip
 80149f8:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80149fa:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80149fe:	5d04      	ldrb	r4, [r0, r4]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014a00:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014a02:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014a04:	1844      	adds	r4, r0, r1
 8014a06:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014a08:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014a0c:	5d04      	ldrb	r4, [r0, r4]
 8014a0e:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014a10:	9805      	ldr	r0, [sp, #20]
 8014a12:	1a41      	subs	r1, r0, r1
 8014a14:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014a16:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014a1a:	5c41      	ldrb	r1, [r0, r1]
 8014a1c:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8014a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a20:	4553      	cmp	r3, sl
 8014a22:	f47f af22 	bne.w	801486a <jpeg_idct_12x6+0xe2>
  }
}
 8014a26:	b03b      	add	sp, #236	@ 0xec
 8014a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2c:	ffffeeaf 	.word	0xffffeeaf
 8014a30:	ffffde8b 	.word	0xffffde8b
 8014a34:	ffffea5c 	.word	0xffffea5c
 8014a38:	ffffc08c 	.word	0xffffc08c
 8014a3c:	ffffc4df 	.word	0xffffc4df

08014a40 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a44:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8014a48:	b0b1      	sub	sp, #196	@ 0xc4
 8014a4a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8014a4c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a4e:	3080      	adds	r0, #128	@ 0x80
 8014a50:	320e      	adds	r2, #14
 8014a52:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014a54:	af08      	add	r7, sp, #32
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014a56:	f641 1e4c 	movw	lr, #6476	@ 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014a5a:	f44f 6c35 	mov.w	ip, #2896	@ 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a5e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014a60:	9202      	str	r2, [sp, #8]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a62:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014a66:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a68:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a6c:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	@ 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a70:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a72:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
 8014a74:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a78:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8014a7a:	0352      	lsls	r2, r2, #13
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a7c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a7e:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a82:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014a86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a8a:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a8e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	@ 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a92:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a96:	6e28      	ldr	r0, [r5, #96]	@ 0x60
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014a98:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014a9c:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a9e:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014aa2:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014aa6:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014aaa:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8014aae:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8014ab0:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8014ab4:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8014ab8:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014abc:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8014ac0:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014ac2:	fb00 f808 	mul.w	r8, r0, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014ac6:	f241 0071 	movw	r0, #4209	@ 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8014aca:	63fa      	str	r2, [r7, #60]	@ 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014acc:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014ad0:	486e      	ldr	r0, [pc, #440]	@ (8014c8c <jpeg_idct_10x5+0x24c>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014ad2:	9a02      	ldr	r2, [sp, #8]
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014ad4:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8014ad8:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014adc:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014ae0:	42b2      	cmp	r2, r6
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8014ae2:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014ae6:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8014aea:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014aee:	f8c7 907c 	str.w	r9, [r7, #124]	@ 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8014af2:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8014af6:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8014afa:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8014afe:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8014b02:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8014b06:	65fc      	str	r4, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014b08:	d1ab      	bne.n	8014a62 <jpeg_idct_10x5+0x22>
 8014b0a:	f1a3 0b04 	sub.w	fp, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8014b0e:	a908      	add	r1, sp, #32
 8014b10:	3310      	adds	r3, #16
 8014b12:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014b14:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014b18:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8014b1c:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8014b1e:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8014b20:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8014b24:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014b26:	f242 429d 	movw	r2, #9373	@ 0x249d
    outptr = output_buf[ctr] + output_col;
 8014b2a:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014b2c:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b30:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014b34:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b38:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014b3a:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8014b3c:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8014b40:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8014b42:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8014b46:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8014b4a:	006d      	lsls	r5, r5, #1
 8014b4c:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8014b50:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8014b54:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014b56:	19eb      	adds	r3, r5, r7
 8014b58:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014b5a:	f241 0071 	movw	r0, #4209	@ 0x1071
 8014b5e:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014b62:	484a      	ldr	r0, [pc, #296]	@ (8014c8c <jpeg_idct_10x5+0x24c>)
 8014b64:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8014b68:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8014b6c:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8014b6e:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 8014b72:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8014b74:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8014b76:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014b78:	f640 10e3 	movw	r0, #2531	@ 0x9e3
    tmp23 = tmp11 - tmp13;
 8014b7c:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8014b7e:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 8014b82:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8014b86:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8014b8a:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014b8c:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014b90:	f641 606f 	movw	r0, #7791	@ 0x1e6f
 8014b94:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8014b98:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8014b9c:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014ba0:	f642 40b3 	movw	r0, #11443	@ 0x2cb3
 8014ba4:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ba8:	f240 7014 	movw	r0, #1812	@ 0x714
 8014bac:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014bb0:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014bb2:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014bb6:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014bba:	f642 0853 	movw	r8, #10323	@ 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014bbe:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014bc2:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014bc4:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014bc8:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014bcc:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014bd0:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014bd4:	f241 4a8c 	movw	sl, #5260	@ 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014bd8:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014bda:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014bde:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014be2:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014be4:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014be8:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014bec:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014bf0:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014bf2:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014bf4:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014bf8:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014bfa:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014bfe:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8014c00:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8014c04:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014c08:	5d5d      	ldrb	r5, [r3, r5]
 8014c0a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8014c0c:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014c0e:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014c10:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014c12:	f813 500c 	ldrb.w	r5, [r3, ip]
 8014c16:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014c18:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014c1c:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 8014c20:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8014c24:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014c28:	5d5d      	ldrb	r5, [r3, r5]
 8014c2a:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014c2c:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014c2e:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014c30:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014c32:	181d      	adds	r5, r3, r0
 8014c34:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8014c36:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014c3a:	5d5d      	ldrb	r5, [r3, r5]
 8014c3c:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014c3e:	9b02      	ldr	r3, [sp, #8]
 8014c40:	1a1b      	subs	r3, r3, r0
 8014c42:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8014c44:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014c48:	5cc3      	ldrb	r3, [r0, r3]
 8014c4a:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014c4c:	9b04      	ldr	r3, [sp, #16]
 8014c4e:	4413      	add	r3, r2
			    & RANGE_MASK];
 8014c50:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014c54:	5cc3      	ldrb	r3, [r0, r3]
 8014c56:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014c58:	9b04      	ldr	r3, [sp, #16]
 8014c5a:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8014c5c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014c60:	5cc3      	ldrb	r3, [r0, r3]
 8014c62:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014c64:	9b03      	ldr	r3, [sp, #12]
 8014c66:	4433      	add	r3, r6
			    & RANGE_MASK];
 8014c68:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014c6c:	5cc3      	ldrb	r3, [r0, r3]
 8014c6e:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014c70:	9b03      	ldr	r3, [sp, #12]
 8014c72:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 8014c74:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014c78:	5cc3      	ldrb	r3, [r0, r3]
 8014c7a:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8014c7c:	9b07      	ldr	r3, [sp, #28]
 8014c7e:	455b      	cmp	r3, fp
 8014c80:	f47f af48 	bne.w	8014b14 <jpeg_idct_10x5+0xd4>
  }
}
 8014c84:	b031      	add	sp, #196	@ 0xc4
 8014c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8a:	bf00      	nop
 8014c8c:	ffffba5c 	.word	0xffffba5c

08014c90 <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	b0a5      	sub	sp, #148	@ 0x94
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c96:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8014c9a:	6d4e      	ldr	r6, [r1, #84]	@ 0x54
 8014c9c:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014c9e:	ac04      	add	r4, sp, #16
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ca0:	f100 0e80 	add.w	lr, r0, #128	@ 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014ca4:	320e      	adds	r2, #14
 8014ca6:	3e04      	subs	r6, #4
 8014ca8:	4620      	mov	r0, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8014caa:	f241 1851 	movw	r8, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014cae:	f641 0c7e 	movw	ip, #6270	@ 0x187e
 8014cb2:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014cb4:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014cb8:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014cba:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014cbe:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014cc2:	434d      	muls	r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014cc4:	6c31      	ldr	r1, [r6, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014cc6:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014cca:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014cce:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	@ 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8014cd2:	4a65      	ldr	r2, [pc, #404]	@ (8014e68 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8014cd4:	eb05 0901 	add.w	r9, r5, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8014cd8:	1a6d      	subs	r5, r5, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014cda:	6a31      	ldr	r1, [r6, #32]
 8014cdc:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014ce0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014ce2:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8014ce6:	eb0a 010b 	add.w	r1, sl, fp
 8014cea:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014cee:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014cf2:	fb0c 1a0a 	mla	sl, ip, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8014cf6:	fb02 110b 	mla	r1, r2, fp, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014cfa:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014cfc:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8014d00:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014d02:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8014d04:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8014d08:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8014d0c:	eb01 0985 	add.w	r9, r1, r5, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 8014d10:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8014d14:	ebc1 0185 	rsb	r1, r1, r5, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8014d18:	f8c4 a05c 	str.w	sl, [r4, #92]	@ 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8014d1c:	f8c4 901c 	str.w	r9, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8014d20:	63e1      	str	r1, [r4, #60]	@ 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014d22:	d1c7      	bne.n	8014cb4 <jpeg_idct_8x4+0x24>
 8014d24:	f1a3 0804 	sub.w	r8, r3, #4
 8014d28:	330c      	adds	r3, #12
 8014d2a:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014d2c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014d30:	f241 1551 	movw	r5, #4433	@ 0x1151
    outptr = output_buf[ctr] + output_col;
 8014d34:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014d36:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8014d38:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8014d3c:	189c      	adds	r4, r3, r2
 8014d3e:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 8014d40:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = (INT32) wsptr[4];
 8014d44:	f850 6c10 	ldr.w	r6, [r0, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014d48:	18ca      	adds	r2, r1, r3
    tmp2 = (INT32) wsptr[3];
 8014d4a:	f850 cc14 	ldr.w	ip, [r0, #-20]
    tmp3 = (INT32) wsptr[1];
 8014d4e:	f850 9c1c 	ldr.w	r9, [r0, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014d52:	436a      	muls	r2, r5
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014d54:	f641 057e 	movw	r5, #6270	@ 0x187e
    tmp0 = (INT32) wsptr[7];
 8014d58:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014d5c:	fb05 2101 	mla	r1, r5, r1, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014d60:	4d41      	ldr	r5, [pc, #260]	@ (8014e68 <jpeg_idct_8x4+0x1d8>)
 8014d62:	fb05 2203 	mla	r2, r5, r3, r2
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d66:	f850 3c20 	ldr.w	r3, [r0, #-32]
 8014d6a:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8014d6c:	199d      	adds	r5, r3, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8014d6e:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8014d70:	eb01 3645 	add.w	r6, r1, r5, lsl #13
    tmp13 = tmp0 - tmp2;
 8014d74:	ebc1 3145 	rsb	r1, r1, r5, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014d78:	f242 55a1 	movw	r5, #9633	@ 0x25a1
    tmp12 = tmp1 - tmp3;
 8014d7c:	ebc2 3b43 	rsb	fp, r2, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8014d80:	9100      	str	r1, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8014d82:	eb02 3143 	add.w	r1, r2, r3, lsl #13
    z3 = tmp1 + tmp3;
 8014d86:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    tmp11 = tmp1 + tmp3;
 8014d8a:	9101      	str	r1, [sp, #4]
    z2 = tmp0 + tmp2;
 8014d8c:	eb07 010c 	add.w	r1, r7, ip
    z3 = tmp1 + tmp3;
 8014d90:	eb03 0209 	add.w	r2, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014d94:	188b      	adds	r3, r1, r2
 8014d96:	436b      	muls	r3, r5
    z2 += z1;
 8014d98:	4d34      	ldr	r5, [pc, #208]	@ (8014e6c <jpeg_idct_8x4+0x1dc>)
 8014d9a:	fb05 3101 	mla	r1, r5, r1, r3
    z3 += z1;
 8014d9e:	4d34      	ldr	r5, [pc, #208]	@ (8014e70 <jpeg_idct_8x4+0x1e0>)
 8014da0:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014da4:	eb07 0209 	add.w	r2, r7, r9
 8014da8:	4d32      	ldr	r5, [pc, #200]	@ (8014e74 <jpeg_idct_8x4+0x1e4>)
 8014daa:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8014dac:	f640 158e 	movw	r5, #2446	@ 0x98e
 8014db0:	eb01 0a02 	add.w	sl, r1, r2
    tmp3 += z1 + z3;
 8014db4:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8014db6:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dba:	f850 5c0c 	ldr.w	r5, [r0, #-12]
    tmp3 += z1 + z3;
 8014dbe:	f243 0a0b 	movw	sl, #12299	@ 0x300b
 8014dc2:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dc6:	eb05 090c 	add.w	r9, r5, ip
 8014dca:	4d2b      	ldr	r5, [pc, #172]	@ (8014e78 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8014dcc:	f244 1ab3 	movw	sl, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dd0:	fb05 f909 	mul.w	r9, r5, r9
    tmp1 += z1 + z3;
 8014dd4:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8014dd8:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8014dda:	4449      	add	r1, r9
 8014ddc:	f246 2954 	movw	r9, #25172	@ 0x6254
    tmp1 += z1 + z3;
 8014de0:	fb0a 3a05 	mla	sl, sl, r5, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014de4:	9d02      	ldr	r5, [sp, #8]
    tmp2 += z1 + z2;
 8014de6:	fb09 110c 	mla	r1, r9, ip, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014dea:	eb06 0c02 	add.w	ip, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014dee:	1ab6      	subs	r6, r6, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014df0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
			    & RANGE_MASK];
 8014df2:	f3cc 4c89 	ubfx	ip, ip, #18, #10
			    & RANGE_MASK];
 8014df6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014dfa:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8014dfe:	f805 c003 	strb.w	ip, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014e02:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014e04:	f81e 2006 	ldrb.w	r2, [lr, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014e08:	1a5d      	subs	r5, r3, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014e0a:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014e0c:	185a      	adds	r2, r3, r1
			    & RANGE_MASK];
 8014e0e:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8014e12:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014e16:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014e1a:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014e1c:	f81e 2005 	ldrb.w	r2, [lr, r5]
 8014e20:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014e22:	eb0b 020a 	add.w	r2, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014e26:	ebab 0b0a 	sub.w	fp, fp, sl
			    & RANGE_MASK];
 8014e2a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8014e2e:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014e32:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014e36:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014e38:	f81e 300b 	ldrb.w	r3, [lr, fp]
 8014e3c:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014e3e:	9b00      	ldr	r3, [sp, #0]
 8014e40:	443b      	add	r3, r7
			    & RANGE_MASK];
 8014e42:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014e46:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8014e4a:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014e4c:	9b00      	ldr	r3, [sp, #0]
 8014e4e:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 8014e50:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014e54:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8014e58:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014e5a:	9b03      	ldr	r3, [sp, #12]
 8014e5c:	4543      	cmp	r3, r8
 8014e5e:	f47f af65 	bne.w	8014d2c <jpeg_idct_8x4+0x9c>
  }
}
 8014e62:	b025      	add	sp, #148	@ 0x94
 8014e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e68:	ffffc4df 	.word	0xffffc4df
 8014e6c:	ffffc13b 	.word	0xffffc13b
 8014e70:	fffff384 	.word	0xfffff384
 8014e74:	ffffe333 	.word	0xffffe333
 8014e78:	ffffadfd 	.word	0xffffadfd

08014e7c <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e80:	b095      	sub	sp, #84	@ 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e82:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8014e86:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8014e88:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014e8c:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e8e:	3080      	adds	r0, #128	@ 0x80
 8014e90:	f102 040a 	add.w	r4, r2, #10
 8014e94:	f1a1 0c04 	sub.w	ip, r1, #4
 8014e98:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014e9a:	f241 69a1 	movw	r9, #5793	@ 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014e9e:	f242 7831 	movw	r8, #10033	@ 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ea2:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014ea4:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014ea8:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014eaa:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014eae:	f9be a010 	ldrsh.w	sl, [lr, #16]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014eb2:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014eb4:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014eb8:	f8dc 7040 	ldr.w	r7, [ip, #64]	@ 0x40
 8014ebc:	f9be 6020 	ldrsh.w	r6, [lr, #32]
    tmp0 <<= CONST_BITS;
 8014ec0:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ec4:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014ec8:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014ecc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ed0:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014ed4:	fb09 f606 	mul.w	r6, r9, r6
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014ed8:	fb08 fa0a 	mul.w	sl, r8, sl
    tmp10 = tmp0 + tmp12;
 8014edc:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8014ee0:	eba1 0146 	sub.w	r1, r1, r6, lsl #1

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ee4:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ee8:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8014eec:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ef0:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ef4:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8014ef8:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014efa:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014efe:	62ef      	str	r7, [r5, #44]	@ 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014f00:	d1d0      	bne.n	8014ea4 <jpeg_idct_6x3+0x28>
 8014f02:	f1a3 0e04 	sub.w	lr, r3, #4
 8014f06:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014f0a:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014f0e:	f241 60a1 	movw	r0, #5793	@ 0x16a1
    outptr = output_buf[ctr] + output_col;
 8014f12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8014f14:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014f16:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8014f1a:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8014f1c:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f20:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014f24:	fb00 f401 	mul.w	r4, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014f28:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f2c:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8014f30:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = tmp0 + tmp10;
 8014f34:	eb04 3143 	add.w	r1, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8014f38:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 8014f3c:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014f40:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8014f44:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014f48:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp10 = tmp1 + tmp0;
 8014f4c:	eb01 0604 	add.w	r6, r1, r4
    tmp12 = tmp1 - tmp0;
 8014f50:	eba1 0104 	sub.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8014f54:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014f58:	eb04 0508 	add.w	r5, r4, r8
 8014f5c:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014f60:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8014f64:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8014f68:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014f6c:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f70:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014f72:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8014f76:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014f7a:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f7e:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014f82:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8014f86:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014f8a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f8e:	f810 8008 	ldrb.w	r8, [r0, r8]
 8014f92:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8014f94:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014f98:	9801      	ldr	r0, [sp, #4]
 8014f9a:	5d86      	ldrb	r6, [r0, r6]
 8014f9c:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014f9e:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014fa2:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 8014fa6:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8014faa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014fae:	5d86      	ldrb	r6, [r0, r6]
 8014fb0:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014fb2:	5cc3      	ldrb	r3, [r0, r3]
 8014fb4:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014fb6:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014fba:	eba1 0105 	sub.w	r1, r1, r5
			    & RANGE_MASK];
 8014fbe:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8014fc2:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014fc6:	5cc3      	ldrb	r3, [r0, r3]
 8014fc8:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014fca:	5c43      	ldrb	r3, [r0, r1]
 8014fcc:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8014fce:	d19c      	bne.n	8014f0a <jpeg_idct_6x3+0x8e>
  }
}
 8014fd0:	b015      	add	sp, #84	@ 0x54
 8014fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014fd8 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fdc:	b08b      	sub	sp, #44	@ 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014fde:	f8d0 514c 	ldr.w	r5, [r0, #332]	@ 0x14c
 8014fe2:	6d4e      	ldr	r6, [r1, #84]	@ 0x54
 8014fe4:	1e97      	subs	r7, r2, #2
 8014fe6:	f10d 0c08 	add.w	ip, sp, #8
 8014fea:	3580      	adds	r5, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014fec:	3e04      	subs	r6, #4
 8014fee:	3206      	adds	r2, #6
 8014ff0:	4660      	mov	r0, ip
{
 8014ff2:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014ff4:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
 8014ff8:	f856 4f04 	ldr.w	r4, [r6, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014ffc:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014ffe:	fb04 f101 	mul.w	r1, r4, r1

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015002:	6a33      	ldr	r3, [r6, #32]
 8015004:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8015008:	fb03 f404 	mul.w	r4, r3, r4

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 801500c:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 8015010:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 8015014:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8015018:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801501c:	d1ea      	bne.n	8014ff4 <jpeg_idct_4x2+0x1c>
 801501e:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015020:	f241 1a51 	movw	sl, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015024:	f641 097e 	movw	r9, #6270	@ 0x187e
 8015028:	f1a3 0c04 	sub.w	ip, r3, #4
    tmp0 = wsptr[0] + (ONE << 2);
 801502c:	6804      	ldr	r4, [r0, #0]
 801502e:	46e0      	mov	r8, ip
    tmp2 = wsptr[2];
 8015030:	6882      	ldr	r2, [r0, #8]
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8015032:	3010      	adds	r0, #16
    z3 = wsptr[3];
 8015034:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp0 = wsptr[0] + (ONE << 2);
 8015038:	3404      	adds	r4, #4
    z2 = wsptr[1];
 801503a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801503e:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015042:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015044:	19ca      	adds	r2, r1, r7
    outptr = output_buf[ctr] + output_col;
 8015046:	f85c ef04 	ldr.w	lr, [ip, #4]!
 801504a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801504c:	fb0a f202 	mul.w	r2, sl, r2
    outptr = output_buf[ctr] + output_col;
 8015050:	eb0e 0603 	add.w	r6, lr, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015054:	4b12      	ldr	r3, [pc, #72]	@ (80150a0 <jpeg_idct_4x2+0xc8>)
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015056:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801505a:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801505e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015060:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015064:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8015068:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 801506c:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015070:	5def      	ldrb	r7, [r5, r7]
 8015072:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015076:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8015078:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801507a:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801507c:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015080:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8015084:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8015086:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 801508a:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801508e:	5c69      	ldrb	r1, [r5, r1]
 8015090:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015092:	5caa      	ldrb	r2, [r5, r2]
 8015094:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8015096:	d1c9      	bne.n	801502c <jpeg_idct_4x2+0x54>
  }
}
 8015098:	b00b      	add	sp, #44	@ 0x2c
 801509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801509e:	bf00      	nop
 80150a0:	ffffc4df 	.word	0xffffc4df

080150a4 <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80150a4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80150a6:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 80150aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 80150ac:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80150ae:	3080      	adds	r0, #128	@ 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 80150b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80150b4:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 80150b6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80150ba:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 80150bc:	437b      	muls	r3, r7
{
 80150be:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 80150c0:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 80150c2:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 80150c4:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80150c6:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80150c8:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80150ca:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80150ce:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80150d2:	5c41      	ldrb	r1, [r0, r1]
 80150d4:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80150d6:	5cc3      	ldrb	r3, [r0, r3]
 80150d8:	7073      	strb	r3, [r6, #1]
}
 80150da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150dc <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80150dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e0:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 80150e4:	f1a2 0b02 	sub.w	fp, r2, #2
 80150e8:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80150ea:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80150ee:	3380      	adds	r3, #128	@ 0x80
 80150f0:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80150f2:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80150f4:	f1a3 0804 	sub.w	r8, r3, #4
 80150f8:	f102 030e 	add.w	r3, r2, #14
 80150fc:	930d      	str	r3, [sp, #52]	@ 0x34
  wsptr = workspace;
 80150fe:	ab0e      	add	r3, sp, #56	@ 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015100:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8015104:	f241 1451 	movw	r4, #4433	@ 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015108:	f858 1f04 	ldr.w	r1, [r8, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801510c:	f642 4563 	movw	r5, #11363	@ 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015110:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	@ 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8015114:	f245 2e03 	movw	lr, #20995	@ 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015118:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801511a:	f8d8 1080 	ldr.w	r1, [r8, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801511e:	f9bb c060 	ldrsh.w	ip, [fp, #96]	@ 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015122:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015124:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8015126:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8015128:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801512c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8015130:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8015132:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015134:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 8015138:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 801513a:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 801513c:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 801513e:	eba2 0a01 	sub.w	sl, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015142:	f8d8 1040 	ldr.w	r1, [r8, #64]	@ 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8015146:	4acf      	ldr	r2, [pc, #828]	@ (8015484 <jpeg_idct_8x16+0x3a8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015148:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801514c:	f8d8 10c0 	ldr.w	r1, [r8, #192]	@ 0xc0
 8015150:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8015154:	f640 01d4 	movw	r1, #2260	@ 0x8d4
    z3 = z1 - z2;
 8015158:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801515c:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801515e:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8015160:	f641 45cd 	movw	r5, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8015164:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8015168:	fb02 4409 	mla	r4, r2, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801516c:	f202 22ee 	addw	r2, r2, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8015170:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8015174:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8015178:	fb02 110c 	mla	r1, r2, ip, r1
    tmp20 = tmp10 + tmp0;
 801517c:	eb07 020e 	add.w	r2, r7, lr
 8015180:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8015182:	eba7 020e 	sub.w	r2, r7, lr
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8015186:	f640 5723 	movw	r7, #3363	@ 0xd23
    tmp27 = tmp10 - tmp0;
 801518a:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801518c:	1972      	adds	r2, r6, r5
 801518e:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8015190:	1b72      	subs	r2, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015192:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	@ 0x50
    tmp26 = tmp12 - tmp1;
 8015196:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8015198:	eb0a 0204 	add.w	r2, sl, r4
 801519c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801519e:	ebaa 0204 	sub.w	r2, sl, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80151a2:	f8d8 40e0 	ldr.w	r4, [r8, #224]	@ 0xe0
    tmp25 = tmp13 - tmp2;
 80151a6:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80151a8:	1842      	adds	r2, r0, r1
 80151aa:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80151ac:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80151ae:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = tmp11 - tmp3;
 80151b2:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80151b4:	f8d8 2020 	ldr.w	r2, [r8, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80151b8:	f8d8 0060 	ldr.w	r0, [r8, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80151bc:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80151be:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	@ 0x30
 80151c2:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80151c4:	f8d8 00a0 	ldr.w	r0, [r8, #160]	@ 0xa0
 80151c8:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80151ca:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	@ 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80151ce:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80151d0:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80151d2:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp11 = z1 + z3;
 80151d6:	eb01 0a05 	add.w	sl, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80151da:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80151dc:	eb01 0e00 	add.w	lr, r1, r0
 80151e0:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80151e4:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80151e8:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80151ec:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80151f0:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
 80151f4:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80151f8:	f241 5455 	movw	r4, #5461	@ 0x1555
 80151fc:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8015200:	1a8c      	subs	r4, r1, r2
 8015202:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8015204:	eb06 0709 	add.w	r7, r6, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8015208:	9409      	str	r4, [sp, #36]	@ 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 801520a:	4477      	add	r7, lr
 801520c:	4c9e      	ldr	r4, [pc, #632]	@ (8015488 <jpeg_idct_8x16+0x3ac>)
 801520e:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8015212:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8015214:	940a      	str	r4, [sp, #40]	@ 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8015216:	eb0c 040a 	add.w	r4, ip, sl
 801521a:	443c      	add	r4, r7
 801521c:	4f9b      	ldr	r7, [pc, #620]	@ (801548c <jpeg_idct_8x16+0x3b0>)
 801521e:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8015222:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8015224:	4f9a      	ldr	r7, [pc, #616]	@ (8015490 <jpeg_idct_8x16+0x3b4>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8015226:	910b      	str	r1, [sp, #44]	@ 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8015228:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 801522c:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801522e:	f240 214d 	movw	r1, #589	@ 0x24d
 8015232:	fb01 4102 	mla	r1, r1, r2, r4
 8015236:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8015238:	4996      	ldr	r1, [pc, #600]	@ (8015494 <jpeg_idct_8x16+0x3b8>)
 801523a:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801523e:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8015240:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8015242:	f642 5909 	movw	r9, #11529	@ 0x2d09
 8015246:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801524a:	fb07 1905 	mla	r9, r7, r5, r1
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801524e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8015250:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8015252:	f643 7a1a 	movw	sl, #16154	@ 0x3f1a
 8015256:	fb0a 1102 	mla	r1, sl, r2, r1
    z2    += z4;
 801525a:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801525c:	eb01 0a07 	add.w	sl, r1, r7
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8015260:	498d      	ldr	r1, [pc, #564]	@ (8015498 <jpeg_idct_8x16+0x3bc>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8015262:	f242 2718 	movw	r7, #8728	@ 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8015266:	4351      	muls	r1, r2
    tmp1  += z1;
 8015268:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801526a:	fb07 1100 	mla	r1, r7, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801526e:	4f8b      	ldr	r7, [pc, #556]	@ (801549c <jpeg_idct_8x16+0x3c0>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8015270:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8015272:	f246 4e85 	movw	lr, #25733	@ 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8015276:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8015278:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 801527c:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801527e:	f46f 7a59 	mvn.w	sl, #868	@ 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8015282:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8015284:	eb05 0c00 	add.w	ip, r5, r0
 8015288:	4457      	add	r7, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801528a:	1b40      	subs	r0, r0, r5
 801528c:	f640 5523 	movw	r5, #3363	@ 0xd23
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8015290:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015294:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8015296:	4368      	muls	r0, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015298:	9d01      	ldr	r5, [sp, #4]
    tmp2  += z2;
 801529a:	4464      	add	r4, ip
    tmp3  += z2;
 801529c:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801529e:	443d      	add	r5, r7
    tmp10 += z2;
 80152a0:	4486      	add	lr, r0
    tmp11 += z2;
 80152a2:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80152a4:	12ed      	asrs	r5, r5, #11
 80152a6:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80152aa:	9d01      	ldr	r5, [sp, #4]
 80152ac:	1bed      	subs	r5, r5, r7
 80152ae:	12ed      	asrs	r5, r5, #11
 80152b0:	f8c3 51dc 	str.w	r5, [r3, #476]	@ 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80152b4:	9d03      	ldr	r5, [sp, #12]
 80152b6:	4435      	add	r5, r6
 80152b8:	12ed      	asrs	r5, r5, #11
 80152ba:	61dd      	str	r5, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80152bc:	9d03      	ldr	r5, [sp, #12]
 80152be:	1bad      	subs	r5, r5, r6
 80152c0:	12ed      	asrs	r5, r5, #11
 80152c2:	f8c3 51bc 	str.w	r5, [r3, #444]	@ 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80152c6:	9d05      	ldr	r5, [sp, #20]
 80152c8:	4425      	add	r5, r4
 80152ca:	12ed      	asrs	r5, r5, #11
 80152cc:	63dd      	str	r5, [r3, #60]	@ 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80152ce:	9d05      	ldr	r5, [sp, #20]
 80152d0:	1b2c      	subs	r4, r5, r4
 80152d2:	12e4      	asrs	r4, r4, #11
 80152d4:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80152d8:	9c07      	ldr	r4, [sp, #28]
 80152da:	440c      	add	r4, r1
 80152dc:	12e4      	asrs	r4, r4, #11
 80152de:	65dc      	str	r4, [r3, #92]	@ 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80152e0:	9c07      	ldr	r4, [sp, #28]
 80152e2:	1a61      	subs	r1, r4, r1
 80152e4:	12c9      	asrs	r1, r1, #11
 80152e6:	f8c3 117c 	str.w	r1, [r3, #380]	@ 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80152ea:	9908      	ldr	r1, [sp, #32]
 80152ec:	4471      	add	r1, lr
 80152ee:	12c9      	asrs	r1, r1, #11
 80152f0:	67d9      	str	r1, [r3, #124]	@ 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 80152f2:	9908      	ldr	r1, [sp, #32]
 80152f4:	eba1 010e 	sub.w	r1, r1, lr
 80152f8:	12c9      	asrs	r1, r1, #11
 80152fa:	f8c3 115c 	str.w	r1, [r3, #348]	@ 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 80152fe:	9906      	ldr	r1, [sp, #24]
 8015300:	4401      	add	r1, r0
 8015302:	12c9      	asrs	r1, r1, #11
 8015304:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8015308:	9906      	ldr	r1, [sp, #24]
 801530a:	1a09      	subs	r1, r1, r0
 801530c:	12c9      	asrs	r1, r1, #11
 801530e:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8015312:	9904      	ldr	r1, [sp, #16]
 8015314:	4411      	add	r1, r2
 8015316:	12c9      	asrs	r1, r1, #11
 8015318:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801531c:	9904      	ldr	r1, [sp, #16]
 801531e:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8015320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8015322:	12d2      	asrs	r2, r2, #11
 8015324:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8015328:	9a02      	ldr	r2, [sp, #8]
 801532a:	440a      	add	r2, r1
 801532c:	12d2      	asrs	r2, r2, #11
 801532e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8015332:	9a02      	ldr	r2, [sp, #8]
 8015334:	1a52      	subs	r2, r2, r1
 8015336:	12d2      	asrs	r2, r2, #11
 8015338:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801533c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801533e:	455a      	cmp	r2, fp
 8015340:	f47f aede 	bne.w	8015100 <jpeg_idct_8x16+0x24>
 8015344:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8015346:	a80e      	add	r0, sp, #56	@ 0x38
 8015348:	f1a3 0904 	sub.w	r9, r3, #4
 801534c:	333c      	adds	r3, #60	@ 0x3c
 801534e:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8015350:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015354:	f241 1451 	movw	r4, #4433	@ 0x1151
    outptr = output_buf[ctr] + output_col;
 8015358:	9a98      	ldr	r2, [sp, #608]	@ 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 801535a:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 801535c:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8015360:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8015362:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8015366:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015368:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 801536a:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp0 = (INT32) wsptr[7];
 801536e:	f850 bc04 	ldr.w	fp, [r0, #-4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015372:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015374:	f641 047e 	movw	r4, #6270	@ 0x187e
    tmp1 = (INT32) wsptr[5];
 8015378:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801537c:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015380:	4c47      	ldr	r4, [pc, #284]	@ (80154a0 <jpeg_idct_8x16+0x3c4>)
    tmp2 = (INT32) wsptr[3];
 8015382:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015386:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801538a:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp3 = (INT32) wsptr[1];
 801538e:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015392:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8015394:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8015396:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8015398:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 801539c:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 80153a0:	eb0b 040e 	add.w	r4, fp, lr
    tmp11 = tmp1 + tmp3;
 80153a4:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80153a8:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 80153aa:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 80153ae:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 80153b2:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80153b4:	f242 53a1 	movw	r3, #9633	@ 0x25a1
 80153b8:	1862      	adds	r2, r4, r1
 80153ba:	435a      	muls	r2, r3
    z2 += z1;
 80153bc:	4b39      	ldr	r3, [pc, #228]	@ (80154a4 <jpeg_idct_8x16+0x3c8>)
 80153be:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 80153c2:	4b39      	ldr	r3, [pc, #228]	@ (80154a8 <jpeg_idct_8x16+0x3cc>)
 80153c4:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80153c8:	eb0b 010a 	add.w	r1, fp, sl
 80153cc:	4b37      	ldr	r3, [pc, #220]	@ (80154ac <jpeg_idct_8x16+0x3d0>)
 80153ce:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 80153d0:	f640 138e 	movw	r3, #2446	@ 0x98e
 80153d4:	eb04 0c01 	add.w	ip, r4, r1
    tmp3 += z1 + z3;
 80153d8:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 80153da:	fb03 cc0b 	mla	ip, r3, fp, ip
    tmp3 += z1 + z3;
 80153de:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80153e2:	4b33      	ldr	r3, [pc, #204]	@ (80154b0 <jpeg_idct_8x16+0x3d4>)
    tmp3 += z1 + z3;
 80153e4:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80153e8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80153ec:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80153f0:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80153f4:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 80153f6:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 80153f8:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 80153fa:	fb0b 2b08 	mla	fp, fp, r8, r2
    tmp2 += z1 + z2;
 80153fe:	f246 2854 	movw	r8, #25172	@ 0x6254
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015402:	9a98      	ldr	r2, [sp, #608]	@ 0x260
    tmp2 += z1 + z2;
 8015404:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015408:	eb07 0e01 	add.w	lr, r7, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801540c:	1a7f      	subs	r7, r7, r1
			    & RANGE_MASK];
 801540e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8015412:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015416:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801541a:	9b03      	ldr	r3, [sp, #12]
 801541c:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8015420:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015422:	9a00      	ldr	r2, [sp, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8015424:	5dd9      	ldrb	r1, [r3, r7]
 8015426:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8015428:	1931      	adds	r1, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801542a:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 801542c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8015430:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8015434:	5c59      	ldrb	r1, [r3, r1]
 8015436:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8015438:	5d99      	ldrb	r1, [r3, r6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801543a:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801543c:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801543e:	eb03 010b 	add.w	r1, r3, fp
 8015442:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015444:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015448:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801544a:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801544c:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801544e:	eba3 030b 	sub.w	r3, r3, fp
			    & RANGE_MASK];
 8015452:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015456:	5cd3      	ldrb	r3, [r2, r3]
 8015458:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801545a:	9b01      	ldr	r3, [sp, #4]
 801545c:	4463      	add	r3, ip
			    & RANGE_MASK];
 801545e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8015462:	5cd3      	ldrb	r3, [r2, r3]
 8015464:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015466:	9b01      	ldr	r3, [sp, #4]
 8015468:	eba3 030c 	sub.w	r3, r3, ip
			    & RANGE_MASK];
 801546c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015470:	5cd3      	ldrb	r3, [r2, r3]
 8015472:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8015474:	9b04      	ldr	r3, [sp, #16]
 8015476:	454b      	cmp	r3, r9
 8015478:	f47f af6a 	bne.w	8015350 <jpeg_idct_8x16+0x274>
  }
}
 801547c:	f50d 7d0f 	add.w	sp, sp, #572	@ 0x23c
 8015480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015484:	ffffecc2 	.word	0xffffecc2
 8015488:	ffffb6d6 	.word	0xffffb6d6
 801548c:	ffffc542 	.word	0xffffc542
 8015490:	ffffe77a 	.word	0xffffe77a
 8015494:	ffffdbfa 	.word	0xffffdbfa
 8015498:	ffffeaab 	.word	0xffffeaab
 801549c:	ffffd817 	.word	0xffffd817
 80154a0:	ffffc4df 	.word	0xffffc4df
 80154a4:	ffffc13b 	.word	0xffffc13b
 80154a8:	fffff384 	.word	0xfffff384
 80154ac:	ffffe333 	.word	0xffffe333
 80154b0:	ffffadfd 	.word	0xffffadfd

080154b4 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80154b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b8:	b0ef      	sub	sp, #444	@ 0x1bc
 80154ba:	f1a2 0e02 	sub.w	lr, r2, #2
 80154be:	9309      	str	r3, [sp, #36]	@ 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80154c0:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80154c4:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 80154c6:	3380      	adds	r3, #128	@ 0x80
 80154c8:	3804      	subs	r0, #4
 80154ca:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80154cc:	f102 030c 	add.w	r3, r2, #12
 80154d0:	930b      	str	r3, [sp, #44]	@ 0x2c
  wsptr = workspace;
 80154d2:	ab0c      	add	r3, sp, #48	@ 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80154d4:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80154d8:	f241 38a3 	movw	r8, #5027	@ 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80154dc:	f850 1f04 	ldr.w	r1, [r0, #4]!
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80154e0:	f46f 6aa2 	mvn.w	sl, #1296	@ 0x510
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80154e4:	f9be 4040 	ldrsh.w	r4, [lr, #64]	@ 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80154e8:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80154ea:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80154ec:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 80154f0:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80154f2:	f642 01c6 	movw	r1, #10438	@ 0x28c6
    z1 <<= CONST_BITS;
 80154f6:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80154f8:	fb01 f704 	mul.w	r7, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80154fc:	f640 2112 	movw	r1, #2578	@ 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015500:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8015504:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8015508:	f641 4137 	movw	r1, #7223	@ 0x1c37
    tmp10 = z1 + z2;
 801550c:	19d6      	adds	r6, r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801550e:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015510:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8015512:	eb02 050c 	add.w	r5, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015516:	f9be c020 	ldrsh.w	ip, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801551a:	1b3f      	subs	r7, r7, r4
    tmp12 = z1 - z4;
 801551c:	eba2 0904 	sub.w	r9, r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015520:	f8d0 40c0 	ldr.w	r4, [r0, #192]	@ 0xc0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015524:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8015528:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801552c:	49b4      	ldr	r1, [pc, #720]	@ (8015800 <jpeg_idct_7x14+0x34c>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801552e:	920a      	str	r2, [sp, #40]	@ 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015530:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8015532:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015536:	f9be 2060 	ldrsh.w	r2, [lr, #96]	@ 0x60
 801553a:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801553c:	eb0c 0402 	add.w	r4, ip, r2
 8015540:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8015542:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 8015546:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801554a:	fb01 4402 	mla	r4, r1, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801554e:	f601 21e5 	addw	r1, r1, #2789	@ 0xae5
 8015552:	434a      	muls	r2, r1
    tmp20 = tmp10 + tmp13;
 8015554:	19f1      	adds	r1, r6, r7
 8015556:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8015558:	1bf1      	subs	r1, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801555a:	fb08 220c 	mla	r2, r8, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801555e:	f9be 7030 	ldrsh.w	r7, [lr, #48]	@ 0x30
    tmp26 = tmp10 - tmp13;
 8015562:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8015564:	1929      	adds	r1, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015566:	f9be 6050 	ldrsh.w	r6, [lr, #80]	@ 0x50
    tmp21 = tmp11 + tmp14;
 801556a:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 801556c:	1b29      	subs	r1, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801556e:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8015572:	f242 6552 	movw	r5, #9810	@ 0x2652
    tmp25 = tmp11 - tmp14;
 8015576:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8015578:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 801557c:	eba9 0202 	sub.w	r2, r9, r2
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015580:	f640 69f2 	movw	r9, #3826	@ 0xef2
    tmp22 = tmp12 + tmp15;
 8015584:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8015586:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015588:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801558a:	f8d0 10e0 	ldr.w	r1, [r0, #224]	@ 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801558e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015590:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8015592:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015594:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8015598:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801559a:	f9be 2070 	ldrsh.w	r2, [lr, #112]	@ 0x70
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801559e:	eb04 0c07 	add.w	ip, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80155a2:	434a      	muls	r2, r1
    tmp14 = z1 + z3;
 80155a4:	eb04 0b06 	add.w	fp, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80155a8:	f642 21b7 	movw	r1, #10935	@ 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80155ac:	fb05 f50b 	mul.w	r5, r5, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80155b0:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80155b4:	4993      	ldr	r1, [pc, #588]	@ (8015804 <jpeg_idct_7x14+0x350>)
 80155b6:	eb0c 0805 	add.w	r8, ip, r5
 80155ba:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 80155be:	fb01 8804 	mla	r8, r1, r4, r8
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80155c2:	f641 0114 	movw	r1, #6164	@ 0x1814
 80155c6:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80155ca:	498f      	ldr	r1, [pc, #572]	@ (8015808 <jpeg_idct_7x14+0x354>)
 80155cc:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 80155d0:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80155d2:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 80155d6:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80155d8:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80155dc:	4c8b      	ldr	r4, [pc, #556]	@ (801580c <jpeg_idct_7x14+0x358>)
    tmp16 += tmp15;
 80155de:	4449      	add	r1, r9
 80155e0:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80155e2:	19b9      	adds	r1, r7, r6
 80155e4:	fb0a f101 	mul.w	r1, sl, r1
 80155e8:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80155ec:	fb04 1a07 	mla	sl, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80155f0:	4c87      	ldr	r4, [pc, #540]	@ (8015810 <jpeg_idct_7x14+0x35c>)
 80155f2:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80155f6:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80155f8:	f642 4cf8 	movw	ip, #11512	@ 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80155fc:	4c85      	ldr	r4, [pc, #532]	@ (8015814 <jpeg_idct_7x14+0x360>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80155fe:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8015600:	1bf5      	subs	r5, r6, r7
 8015602:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8015606:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 801560a:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 801560e:	9c07      	ldr	r4, [sp, #28]
 8015610:	4422      	add	r2, r4

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015612:	9c01      	ldr	r4, [sp, #4]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8015614:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8015616:	f241 5b99 	movw	fp, #5529	@ 0x1599
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801561a:	4444      	add	r4, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 801561c:	1b92      	subs	r2, r2, r6
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801561e:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015622:	12e4      	asrs	r4, r4, #11
    tmp13 = (z1 - z3) << PASS1_BITS;
 8015624:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8015626:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015628:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801562c:	9c01      	ldr	r4, [sp, #4]
 801562e:	eba4 0408 	sub.w	r4, r4, r8
 8015632:	12e4      	asrs	r4, r4, #11
 8015634:	f8c3 4168 	str.w	r4, [r3, #360]	@ 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015638:	9c03      	ldr	r4, [sp, #12]
 801563a:	4454      	add	r4, sl
 801563c:	12e4      	asrs	r4, r4, #11
 801563e:	619c      	str	r4, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015640:	9c03      	ldr	r4, [sp, #12]
 8015642:	eba4 040a 	sub.w	r4, r4, sl
 8015646:	12e4      	asrs	r4, r4, #11
 8015648:	f8c3 414c 	str.w	r4, [r3, #332]	@ 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801564c:	9c05      	ldr	r4, [sp, #20]
 801564e:	440c      	add	r4, r1
 8015650:	12e4      	asrs	r4, r4, #11
 8015652:	635c      	str	r4, [r3, #52]	@ 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015654:	9c05      	ldr	r4, [sp, #20]
 8015656:	1a61      	subs	r1, r4, r1
 8015658:	12c9      	asrs	r1, r1, #11
 801565a:	f8c3 1130 	str.w	r1, [r3, #304]	@ 0x130
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801565e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015660:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 8015664:	6519      	str	r1, [r3, #80]	@ 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8015666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015668:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801566c:	9908      	ldr	r1, [sp, #32]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801566e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015672:	9a06      	ldr	r2, [sp, #24]
 8015674:	4462      	add	r2, ip
 8015676:	12d2      	asrs	r2, r2, #11
 8015678:	66da      	str	r2, [r3, #108]	@ 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801567a:	9a06      	ldr	r2, [sp, #24]
 801567c:	eba2 020c 	sub.w	r2, r2, ip
 8015680:	12d2      	asrs	r2, r2, #11
 8015682:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015686:	9a04      	ldr	r2, [sp, #16]
 8015688:	442a      	add	r2, r5
 801568a:	12d2      	asrs	r2, r2, #11
 801568c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015690:	9a04      	ldr	r2, [sp, #16]
 8015692:	1b52      	subs	r2, r2, r5
 8015694:	12d2      	asrs	r2, r2, #11
 8015696:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801569a:	9a02      	ldr	r2, [sp, #8]
 801569c:	440a      	add	r2, r1
 801569e:	12d2      	asrs	r2, r2, #11
 80156a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80156a4:	9a02      	ldr	r2, [sp, #8]
 80156a6:	1a52      	subs	r2, r2, r1
 80156a8:	12d2      	asrs	r2, r2, #11
 80156aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80156ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80156b0:	4572      	cmp	r2, lr
 80156b2:	f47f af0f 	bne.w	80154d4 <jpeg_idct_7x14+0x20>
 80156b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 80156b8:	ac0c      	add	r4, sp, #48	@ 0x30
 80156ba:	f1a3 0904 	sub.w	r9, r3, #4
 80156be:	3334      	adds	r3, #52	@ 0x34
 80156c0:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80156c2:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 80156c6:	341c      	adds	r4, #28
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80156c8:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 80156cc:	9a78      	ldr	r2, [sp, #480]	@ 0x1e0
 80156ce:	9303      	str	r3, [sp, #12]
 80156d0:	189e      	adds	r6, r3, r2
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80156d2:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 80156d6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80156da:	9301      	str	r3, [sp, #4]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80156dc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 80156e0:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80156e4:	eba3 0c01 	sub.w	ip, r3, r1
 80156e8:	f641 4337 	movw	r3, #7223	@ 0x1c37
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80156ec:	4f4a      	ldr	r7, [pc, #296]	@ (8015818 <jpeg_idct_7x14+0x364>)
    tmp10 = z1 + z3;
 80156ee:	eb05 0801 	add.w	r8, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80156f2:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80156f6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 80156fa:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80156fe:	1aea      	subs	r2, r5, r3
 8015700:	f640 2312 	movw	r3, #2578	@ 0xa12
    z3 = (INT32) wsptr[5];
 8015704:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8015708:	435a      	muls	r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801570a:	9b01      	ldr	r3, [sp, #4]
 801570c:	eb0c 0002 	add.w	r0, ip, r2
 8015710:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 8015714:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8015718:	fb07 0003 	mla	r0, r7, r3, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801571c:	f642 03c6 	movw	r3, #10438	@ 0x28c6
 8015720:	9f01      	ldr	r7, [sp, #4]
 8015722:	fb03 f308 	mul.w	r3, r3, r8
 8015726:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801572a:	f46f 771f 	mvn.w	r7, #636	@ 0x27c
 801572e:	fb07 3101 	mla	r1, r7, r1, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8015732:	4f3a      	ldr	r7, [pc, #232]	@ (801581c <jpeg_idct_7x14+0x368>)
 8015734:	fb07 3305 	mla	r3, r7, r5, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8015738:	f240 5773 	movw	r7, #1395	@ 0x573
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801573c:	4461      	add	r1, ip
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801573e:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 8015740:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8015744:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8015746:	eb02 0b0a 	add.w	fp, r2, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801574a:	eba2 050a 	sub.w	r5, r2, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801574e:	f641 53ef 	movw	r3, #7663	@ 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015752:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8015754:	44f2      	add	sl, lr
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8015756:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801575a:	9b78      	ldr	r3, [sp, #480]	@ 0x1e0
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801575c:	437d      	muls	r5, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801575e:	4f30      	ldr	r7, [pc, #192]	@ (8015820 <jpeg_idct_7x14+0x36c>)
    tmp10 = tmp11 - tmp12;
 8015760:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 8015764:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015766:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801576a:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801576e:	9f00      	ldr	r7, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015770:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8015774:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp11 += tmp12;
 8015778:	4455      	add	r5, sl
    tmp10 += z2;
 801577a:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801577c:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015780:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015784:	eba1 010c 	sub.w	r1, r1, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8015788:	4452      	add	r2, sl
			    & RANGE_MASK];
 801578a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 801578e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015792:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8015796:	9f03      	ldr	r7, [sp, #12]
 8015798:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801579c:	9b00      	ldr	r3, [sp, #0]
 801579e:	5c59      	ldrb	r1, [r3, r1]
 80157a0:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80157a2:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80157a4:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80157a6:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 80157aa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80157ae:	5c59      	ldrb	r1, [r3, r1]
 80157b0:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80157b2:	5c19      	ldrb	r1, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80157b4:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80157b6:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80157b8:	1899      	adds	r1, r3, r2
 80157ba:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80157bc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80157c0:	5c59      	ldrb	r1, [r3, r1]
 80157c2:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80157c4:	9b02      	ldr	r3, [sp, #8]
 80157c6:	1a9b      	subs	r3, r3, r2
 80157c8:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 80157ca:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80157ce:	5cd3      	ldrb	r3, [r2, r3]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80157d0:	f642 5241 	movw	r2, #11585	@ 0x2d41
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80157d4:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 80157d6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80157da:	eba3 0308 	sub.w	r3, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80157de:	4353      	muls	r3, r2
 80157e0:	9a01      	ldr	r2, [sp, #4]
 80157e2:	eb03 3342 	add.w	r3, r3, r2, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80157e6:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 80157e8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80157ec:	5cd3      	ldrb	r3, [r2, r3]
 80157ee:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 80157f0:	9b04      	ldr	r3, [sp, #16]
 80157f2:	454b      	cmp	r3, r9
 80157f4:	f47f af65 	bne.w	80156c2 <jpeg_idct_7x14+0x20e>
  }
}
 80157f8:	b06f      	add	sp, #444	@ 0x1bc
 80157fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fe:	bf00      	nop
 8015800:	ffffc8fc 	.word	0xffffc8fc
 8015804:	ffffdbf0 	.word	0xffffdbf0
 8015808:	ffffde0b 	.word	0xffffde0b
 801580c:	fffff26e 	.word	0xfffff26e
 8015810:	ffffb409 	.word	0xffffb409
 8015814:	ffffc9e6 	.word	0xffffc9e6
 8015818:	ffffc515 	.word	0xffffc515
 801581c:	ffffb0f1 	.word	0xffffb0f1
 8015820:	ffffd3e1 	.word	0xffffd3e1

08015824 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015828:	b0d3      	sub	sp, #332	@ 0x14c
 801582a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 801582c:	f1a2 0902 	sub.w	r9, r2, #2
 8015830:	9308      	str	r3, [sp, #32]
 8015832:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015834:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8015838:	3380      	adds	r3, #128	@ 0x80
 801583a:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801583c:	f102 030a 	add.w	r3, r2, #10
 8015840:	9309      	str	r3, [sp, #36]	@ 0x24
  wsptr = workspace;
 8015842:	ab0a      	add	r3, sp, #40	@ 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015844:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8015848:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801584a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801584e:	f9b9 4060 	ldrsh.w	r4, [r9, #96]	@ 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015852:	f8d1 0080 	ldr.w	r0, [r1, #128]	@ 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015856:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015858:	f9b9 2040 	ldrsh.w	r2, [r9, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801585c:	f8d1 50c0 	ldr.w	r5, [r1, #192]	@ 0xc0
    z3 <<= CONST_BITS;
 8015860:	037f      	lsls	r7, r7, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015862:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8015864:	f242 7031 	movw	r0, #10033	@ 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015868:	f9b9 6020 	ldrsh.w	r6, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801586c:	436c      	muls	r4, r5
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801586e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015870:	6c08      	ldr	r0, [r1, #64]	@ 0x40
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015872:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
    z2 <<= CONST_BITS;
 8015876:	0364      	lsls	r4, r4, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015878:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 801587a:	eb07 0c02 	add.w	ip, r7, r2
    tmp11 = z3 - z4;
 801587e:	eba7 0e02 	sub.w	lr, r7, r2

    tmp12 = z1 - z2;
 8015882:	ebc4 3546 	rsb	r5, r4, r6, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8015886:	f642 32b6 	movw	r2, #11190	@ 0x2bb6
 801588a:	fb02 f006 	mul.w	r0, r2, r6

    tmp21 = z3 + tmp12;
 801588e:	197a      	adds	r2, r7, r5
 8015890:	9201      	str	r2, [sp, #4]
    tmp24 = z3 - tmp12;
 8015892:	1b7a      	subs	r2, r7, r5

    tmp12 = z4 + z2;
 8015894:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 8015896:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 801589a:	9202      	str	r2, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801589c:	f641 368d 	movw	r6, #7053	@ 0x1b8d
    tmp20 = tmp10 + tmp12;
 80158a0:	eb0c 0205 	add.w	r2, ip, r5
    tmp12 = z4 - z1 - z2;
 80158a4:	1b00      	subs	r0, r0, r4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80158a6:	4f87      	ldr	r7, [pc, #540]	@ (8015ac4 <jpeg_idct_6x12+0x2a0>)
    tmp20 = tmp10 + tmp12;
 80158a8:	9203      	str	r2, [sp, #12]
    tmp25 = tmp10 - tmp12;
 80158aa:	ebac 0205 	sub.w	r2, ip, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80158ae:	f9b9 c010 	ldrsh.w	ip, [r9, #16]
    tmp25 = tmp10 - tmp12;
 80158b2:	9204      	str	r2, [sp, #16]
    tmp22 = tmp11 + tmp12;
 80158b4:	eb0e 0200 	add.w	r2, lr, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80158b8:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	@ 0x50
    tmp22 = tmp11 + tmp12;
 80158bc:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 80158be:	ebae 0200 	sub.w	r2, lr, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80158c2:	f9b9 e030 	ldrsh.w	lr, [r9, #48]	@ 0x30
    tmp23 = tmp11 - tmp12;
 80158c6:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80158c8:	6a0a      	ldr	r2, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80158ca:	f8d1 00e0 	ldr.w	r0, [r1, #224]	@ 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80158ce:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80158d2:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
 80158d4:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80158d8:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 80158dc:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80158de:	f9b9 2070 	ldrsh.w	r2, [r9, #112]	@ 0x70
    tmp10 = z1 + z3;
 80158e2:	eb0c 0b05 	add.w	fp, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80158e6:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80158e8:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80158ec:	eb02 080b 	add.w	r8, r2, fp
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80158f0:	fb00 f40e 	mul.w	r4, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80158f4:	4874      	ldr	r0, [pc, #464]	@ (8015ac8 <jpeg_idct_6x12+0x2a4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80158f6:	fb06 f808 	mul.w	r8, r6, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80158fa:	f640 065b 	movw	r6, #2139	@ 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80158fe:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8015902:	fb06 8b0b 	mla	fp, r6, fp, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8015906:	f640 06f7 	movw	r6, #2295	@ 0x8f7
 801590a:	eb04 0a0b 	add.w	sl, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801590e:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8015912:	fb06 a60c 	mla	r6, r6, ip, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8015916:	eb05 0a02 	add.w	sl, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801591a:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801591c:	4e6b      	ldr	r6, [pc, #428]	@ (8015acc <jpeg_idct_6x12+0x2a8>)
 801591e:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8015922:	eb00 060a 	add.w	r6, r0, sl
 8015926:	fb07 6605 	mla	r6, r7, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801592a:	4f69      	ldr	r7, [pc, #420]	@ (8015ad0 <jpeg_idct_6x12+0x2ac>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 801592c:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8015930:	f241 1e51 	movw	lr, #4433	@ 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8015934:	445e      	add	r6, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8015936:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801593a:	f243 2bc6 	movw	fp, #12998	@ 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801593e:	4f65      	ldr	r7, [pc, #404]	@ (8015ad4 <jpeg_idct_6x12+0x2b0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8015940:	fb0b 4402 	mla	r4, fp, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8015944:	fb07 0002 	mla	r0, r7, r2, r0
    z1 -= z4;
 8015948:	ebac 0202 	sub.w	r2, ip, r2
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801594c:	4454      	add	r4, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801594e:	eb02 0c05 	add.w	ip, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8015952:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8015954:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8015958:	f641 0e7e 	movw	lr, #6270	@ 0x187e
 801595c:	fb0e ce02 	mla	lr, lr, r2, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8015960:	4a5d      	ldr	r2, [pc, #372]	@ (8015ad8 <jpeg_idct_6x12+0x2b4>)
 8015962:	fb02 cc05 	mla	ip, r2, r5, ip

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015966:	9d03      	ldr	r5, [sp, #12]
 8015968:	9a07      	ldr	r2, [sp, #28]
 801596a:	442a      	add	r2, r5
 801596c:	12d2      	asrs	r2, r2, #11
 801596e:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015972:	9a07      	ldr	r2, [sp, #28]
 8015974:	1aaf      	subs	r7, r5, r2
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015976:	9a01      	ldr	r2, [sp, #4]
 8015978:	4472      	add	r2, lr
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801597a:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801597c:	12d2      	asrs	r2, r2, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801597e:	f8c3 7104 	str.w	r7, [r3, #260]	@ 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015982:	615a      	str	r2, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015984:	9a01      	ldr	r2, [sp, #4]
 8015986:	eba2 020e 	sub.w	r2, r2, lr
 801598a:	12d2      	asrs	r2, r2, #11
 801598c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015990:	9a05      	ldr	r2, [sp, #20]
 8015992:	4432      	add	r2, r6
 8015994:	12d2      	asrs	r2, r2, #11
 8015996:	62da      	str	r2, [r3, #44]	@ 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015998:	9a05      	ldr	r2, [sp, #20]
 801599a:	1b92      	subs	r2, r2, r6
 801599c:	12d2      	asrs	r2, r2, #11
 801599e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80159a2:	9a06      	ldr	r2, [sp, #24]
 80159a4:	4422      	add	r2, r4
 80159a6:	12d2      	asrs	r2, r2, #11
 80159a8:	645a      	str	r2, [r3, #68]	@ 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80159aa:	9a06      	ldr	r2, [sp, #24]
 80159ac:	1b12      	subs	r2, r2, r4
 80159ae:	12d2      	asrs	r2, r2, #11
 80159b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80159b4:	9a02      	ldr	r2, [sp, #8]
 80159b6:	4462      	add	r2, ip
 80159b8:	12d2      	asrs	r2, r2, #11
 80159ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80159bc:	9a02      	ldr	r2, [sp, #8]
 80159be:	eba2 020c 	sub.w	r2, r2, ip
 80159c2:	12d2      	asrs	r2, r2, #11
 80159c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80159c8:	9a04      	ldr	r2, [sp, #16]
 80159ca:	4402      	add	r2, r0
 80159cc:	12d2      	asrs	r2, r2, #11
 80159ce:	675a      	str	r2, [r3, #116]	@ 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80159d0:	9a04      	ldr	r2, [sp, #16]
 80159d2:	1a12      	subs	r2, r2, r0
 80159d4:	12d2      	asrs	r2, r2, #11
 80159d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80159da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159dc:	454a      	cmp	r2, r9
 80159de:	f47f af31 	bne.w	8015844 <jpeg_idct_6x12+0x20>
 80159e2:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80159e4:	a90a      	add	r1, sp, #40	@ 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80159e6:	f241 6ba1 	movw	fp, #5793	@ 0x16a1
 80159ea:	f1a3 0c04 	sub.w	ip, r3, #4
 80159ee:	f103 082c 	add.w	r8, r3, #44	@ 0x2c
    outptr = output_buf[ctr] + output_col;
 80159f2:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    tmp11 = tmp10 + tmp20;
    tmp21 = tmp10 - tmp20 - tmp20;
    tmp20 = (INT32) wsptr[2];
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80159f6:	f242 7431 	movw	r4, #10033	@ 0x2731
    outptr = output_buf[ctr] + output_col;
 80159fa:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80159fc:	f640 37b6 	movw	r7, #2998	@ 0xbb6
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8015a00:	690a      	ldr	r2, [r1, #16]
  for (ctr = 0; ctr < 12; ctr++) {
 8015a02:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8015a04:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015a08:	680b      	ldr	r3, [r1, #0]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8015a0a:	fb0b f002 	mul.w	r0, fp, r2
    z3 = (INT32) wsptr[5];
 8015a0e:	f8d1 e014 	ldr.w	lr, [r1, #20]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015a12:	f103 0310 	add.w	r3, r3, #16
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8015a16:	f101 0118 	add.w	r1, r1, #24
    tmp11 = tmp10 + tmp20;
 8015a1a:	eb00 3243 	add.w	r2, r0, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8015a1e:	ebc0 3343 	rsb	r3, r0, r3, lsl #13
 8015a22:	eba3 0300 	sub.w	r3, r3, r0
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8015a26:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8015a2a:	fb04 f000 	mul.w	r0, r4, r0
    tmp21 = tmp10 - tmp20 - tmp20;
 8015a2e:	9301      	str	r3, [sp, #4]
    tmp20 = tmp11 + tmp10;
 8015a30:	eb02 0500 	add.w	r5, r2, r0
    tmp22 = tmp11 - tmp10;
 8015a34:	eba2 0200 	sub.w	r2, r2, r0
    z1 = (INT32) wsptr[1];
 8015a38:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8015a3c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015a40:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8015a44:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015a48:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8015a4c:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8015a50:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8015a52:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015a56:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8015a58:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8015a5c:	eba0 000e 	sub.w	r0, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8015a60:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015a64:	eb05 0e07 	add.w	lr, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015a68:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8015a6c:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8015a70:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015a74:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8015a78:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
 8015a7a:	f809 e003 	strb.w	lr, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015a7e:	9b00      	ldr	r3, [sp, #0]
 8015a80:	5d5d      	ldrb	r5, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015a82:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015a84:	7175      	strb	r5, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015a86:	eb03 3540 	add.w	r5, r3, r0, lsl #13
 8015a8a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015a8c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015a90:	5d5d      	ldrb	r5, [r3, r5]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015a92:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015a94:	7075      	strb	r5, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015a96:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
 8015a9a:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 8015a9c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015aa0:	5cc3      	ldrb	r3, [r0, r3]
 8015aa2:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015aa4:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015aa8:	eba2 0204 	sub.w	r2, r2, r4
			    & RANGE_MASK];
 8015aac:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8015ab0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015ab4:	5cc3      	ldrb	r3, [r0, r3]
 8015ab6:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015ab8:	5c83      	ldrb	r3, [r0, r2]
 8015aba:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8015abc:	d199      	bne.n	80159f2 <jpeg_idct_6x12+0x1ce>
  }
}
 8015abe:	b053      	add	sp, #332	@ 0x14c
 8015ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac4:	ffffd0b0 	.word	0xffffd0b0
 8015ac8:	ffffeeaf 	.word	0xffffeeaf
 8015acc:	ffffde8b 	.word	0xffffde8b
 8015ad0:	ffffea5c 	.word	0xffffea5c
 8015ad4:	ffffc08c 	.word	0xffffc08c
 8015ad8:	ffffc4df 	.word	0xffffc4df

08015adc <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae0:	b0b9      	sub	sp, #228	@ 0xe4
 8015ae2:	1e94      	subs	r4, r2, #2
 8015ae4:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015ae6:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8015aea:	6d48      	ldr	r0, [r1, #84]	@ 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8015aec:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015aee:	3380      	adds	r3, #128	@ 0x80
 8015af0:	3804      	subs	r0, #4
 8015af2:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015af4:	f102 0308 	add.w	r3, r2, #8
 8015af8:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015afa:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015afe:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b00:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b04:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b08:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b0a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8015b0e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8015b10:	f242 429d 	movw	r2, #9373	@ 0x249d
    z3 <<= CONST_BITS;
 8015b14:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8015b16:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8015b1a:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015b1e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8015b22:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8015b24:	f641 229a 	movw	r2, #6810	@ 0x1a9a
    tmp10 = z3 + z1;
 8015b28:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8015b2a:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 8015b2c:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8015b30:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015b34:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015b38:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	@ 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8015b3c:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015b3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8015b40:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015b42:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8015b46:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8015b48:	19f3      	adds	r3, r6, r7
 8015b4a:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8015b4c:	f241 0271 	movw	r2, #4209	@ 0x1071
 8015b50:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8015b54:	4a6e      	ldr	r2, [pc, #440]	@ (8015d10 <jpeg_idct_5x10+0x234>)
 8015b56:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8015b5a:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8015b5c:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015b60:	6e05      	ldr	r5, [r0, #96]	@ 0x60
    tmp21 = tmp11 + tmp13;
 8015b62:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 8015b66:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8015b6a:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8015b6c:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015b6e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8015b72:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015b74:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	@ 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015b78:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015b7a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015b7e:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	@ 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015b82:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015b84:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 8015b88:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015b8c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	@ 0xe0
 8015b90:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8015b92:	f641 666f 	movw	r6, #7791	@ 0x1e6f
    tmp11 = z2 + z4;
 8015b96:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8015b9a:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015b9c:	f640 15e3 	movw	r5, #2531	@ 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8015ba0:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015ba4:	f642 46b3 	movw	r6, #11443	@ 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015ba8:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015baa:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015bae:	f240 7614 	movw	r6, #1812	@ 0x714
    z4 = z5 + tmp12;
 8015bb2:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015bb6:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8015bb8:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015bbc:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015bbe:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8015bc2:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015bc6:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015bc8:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8015bca:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015bce:	eba3 030e 	sub.w	r3, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015bd2:	f642 0e53 	movw	lr, #10323	@ 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8015bd6:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015bda:	f241 4a8c 	movw	sl, #5260	@ 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015bde:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015be2:	009b      	lsls	r3, r3, #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015be4:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015be8:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015bec:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015bf0:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015bf4:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015bf6:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015bfa:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015bfe:	12ed      	asrs	r5, r5, #11
 8015c00:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015c04:	ea4f 25ec 	mov.w	r5, ip, asr #11
 8015c08:	f8c1 50b0 	str.w	r5, [r1, #176]	@ 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015c0c:	eb07 050e 	add.w	r5, r7, lr
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015c10:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015c14:	12ed      	asrs	r5, r5, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015c16:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015c18:	610d      	str	r5, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015c1a:	9d04      	ldr	r5, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015c1c:	f8c1 709c 	str.w	r7, [r1, #156]	@ 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015c20:	eb03 25e5 	add.w	r5, r3, r5, asr #11
 8015c24:	624d      	str	r5, [r1, #36]	@ 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8015c26:	9d04      	ldr	r5, [sp, #16]
 8015c28:	ebc3 23e5 	rsb	r3, r3, r5, asr #11
 8015c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8015c30:	9b02      	ldr	r3, [sp, #8]
 8015c32:	4413      	add	r3, r2
 8015c34:	12db      	asrs	r3, r3, #11
 8015c36:	638b      	str	r3, [r1, #56]	@ 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015c38:	9b02      	ldr	r3, [sp, #8]
 8015c3a:	1a9b      	subs	r3, r3, r2
 8015c3c:	12db      	asrs	r3, r3, #11
 8015c3e:	674b      	str	r3, [r1, #116]	@ 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015c40:	9b01      	ldr	r3, [sp, #4]
 8015c42:	4433      	add	r3, r6
 8015c44:	12db      	asrs	r3, r3, #11
 8015c46:	64cb      	str	r3, [r1, #76]	@ 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015c48:	9b01      	ldr	r3, [sp, #4]
 8015c4a:	1b9b      	subs	r3, r3, r6
 8015c4c:	12db      	asrs	r3, r3, #11
 8015c4e:	660b      	str	r3, [r1, #96]	@ 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015c50:	9b05      	ldr	r3, [sp, #20]
 8015c52:	42a3      	cmp	r3, r4
 8015c54:	f47f af51 	bne.w	8015afa <jpeg_idct_5x10+0x1e>
 8015c58:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8015c5a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015c5c:	f641 1a4c 	movw	sl, #6476	@ 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015c60:	f44f 6935 	mov.w	r9, #2896	@ 0xb50
 8015c64:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015c68:	f641 289a 	movw	r8, #6810	@ 0x1a9a
 8015c6c:	3324      	adds	r3, #36	@ 0x24
 8015c6e:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8015c70:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8015c74:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8015c76:	9b42      	ldr	r3, [sp, #264]	@ 0x108
    tmp14 = (INT32) wsptr[4];
 8015c78:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8015c7c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8015c80:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015c84:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015c88:	1898      	adds	r0, r3, r2
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015c8a:	1a9b      	subs	r3, r3, r2
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015c8c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8015c8e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015c92:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8015c96:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015c9a:	fb0a f000 	mul.w	r0, sl, r0
    z3 = tmp12 + z2;
 8015c9e:	eb03 3247 	add.w	r2, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015ca2:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8015ca4:	f241 0371 	movw	r3, #4209	@ 0x1071
    tmp10 = z3 + z1;
 8015ca8:	1884      	adds	r4, r0, r2
    tmp11 = z3 - z1;
 8015caa:	1a12      	subs	r2, r2, r0
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015cac:	eb05 000b 	add.w	r0, r5, fp
 8015cb0:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8015cb4:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8015cb8:	4b15      	ldr	r3, [pc, #84]	@ (8015d10 <jpeg_idct_5x10+0x234>)
 8015cba:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8015cbe:	eb04 0b05 	add.w	fp, r4, r5
 8015cc2:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8015cc4:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8015cc6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8015cca:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8015cce:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8015cd2:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8015cd4:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8015cd8:	9b00      	ldr	r3, [sp, #0]
 8015cda:	5d1c      	ldrb	r4, [r3, r4]
 8015cdc:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8015cde:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015ce0:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8015ce2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8015ce6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8015cea:	5d1c      	ldrb	r4, [r3, r4]
 8015cec:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015cee:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8015cf0:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015cf2:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8015cf4:	009b      	lsls	r3, r3, #2
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8015cf6:	9a00      	ldr	r2, [sp, #0]
    tmp12 -= z2 << 2;
 8015cf8:	ebc3 3347 	rsb	r3, r3, r7, lsl #13
			    & RANGE_MASK];
 8015cfc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8015d00:	5cd3      	ldrb	r3, [r2, r3]
 8015d02:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8015d04:	9b02      	ldr	r3, [sp, #8]
 8015d06:	4563      	cmp	r3, ip
 8015d08:	d1b2      	bne.n	8015c70 <jpeg_idct_5x10+0x194>
  }
}
 8015d0a:	b039      	add	sp, #228	@ 0xe4
 8015d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d10:	ffffba5c 	.word	0xffffba5c

08015d14 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d18:	b0a7      	sub	sp, #156	@ 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015d1a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
{
 8015d1c:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8015d1e:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015d20:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8015d24:	3380      	adds	r3, #128	@ 0x80
 8015d26:	9302      	str	r3, [sp, #8]
  for (ctr = 4; ctr > 0; ctr--) {
 8015d28:	1e93      	subs	r3, r2, #2
 8015d2a:	9301      	str	r3, [sp, #4]
 8015d2c:	f105 0310 	add.w	r3, r5, #16
 8015d30:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015d32:	9b01      	ldr	r3, [sp, #4]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8015d34:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015d36:	f855 0b04 	ldr.w	r0, [r5], #4
 8015d3a:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015d3c:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8015d40:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8015d44:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	@ 0x32
 8015d48:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015d4c:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	@ 0x52
 8015d50:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8015d54:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	@ 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015d58:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8015d5c:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015d5e:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015d62:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015d64:	ea4e 0000 	orr.w	r0, lr, r0
 8015d68:	4330      	orrs	r0, r6
 8015d6a:	ea48 0000 	orr.w	r0, r8, r0
 8015d6e:	4320      	orrs	r0, r4
 8015d70:	ea59 0000 	orrs.w	r0, r9, r0
 8015d74:	d155      	bne.n	8015e22 <jpeg_idct_4x8+0x10e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015d76:	009b      	lsls	r3, r3, #2
      wsptr[4*0] = dcval;
 8015d78:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[4*1] = dcval;
 8015d7c:	60cb      	str	r3, [r1, #12]
      wsptr[4*2] = dcval;
 8015d7e:	61cb      	str	r3, [r1, #28]
      wsptr[4*3] = dcval;
 8015d80:	62cb      	str	r3, [r1, #44]	@ 0x2c
      wsptr[4*4] = dcval;
 8015d82:	63cb      	str	r3, [r1, #60]	@ 0x3c
      wsptr[4*5] = dcval;
 8015d84:	64cb      	str	r3, [r1, #76]	@ 0x4c
      wsptr[4*6] = dcval;
 8015d86:	65cb      	str	r3, [r1, #92]	@ 0x5c
      wsptr[4*7] = dcval;
 8015d88:	66cb      	str	r3, [r1, #108]	@ 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8015d8a:	9b05      	ldr	r3, [sp, #20]
 8015d8c:	42ab      	cmp	r3, r5
 8015d8e:	d1d0      	bne.n	8015d32 <jpeg_idct_4x8+0x1e>
 8015d90:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8015d92:	a806      	add	r0, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015d94:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015d98:	f641 0e7e 	movw	lr, #6270	@ 0x187e
 8015d9c:	1f1c      	subs	r4, r3, #4
 8015d9e:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015da2:	f8df c174 	ldr.w	ip, [pc, #372]	@ 8015f18 <jpeg_idct_4x8+0x204>
    outptr = output_buf[ctr] + output_col;
 8015da6:	f854 6f04 	ldr.w	r6, [r4, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8015daa:	3010      	adds	r0, #16
    outptr = output_buf[ctr] + output_col;
 8015dac:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015dae:	f850 1c10 	ldr.w	r1, [r0, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 8015db2:	45a3      	cmp	fp, r4
    outptr = output_buf[ctr] + output_col;
 8015db4:	eb06 0503 	add.w	r5, r6, r3
    z3 = (INT32) wsptr[3];
 8015db8:	f850 ac04 	ldr.w	sl, [r0, #-4]
    tmp2 = (INT32) wsptr[2];
 8015dbc:	f850 3c08 	ldr.w	r3, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015dc0:	f101 0110 	add.w	r1, r1, #16
    z2 = (INT32) wsptr[1];
 8015dc4:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8015dc8:	eb01 0903 	add.w	r9, r1, r3
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015dcc:	eba1 0103 	sub.w	r1, r1, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015dd0:	eb02 030a 	add.w	r3, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015dd4:	9f02      	ldr	r7, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015dd6:	fb08 f303 	mul.w	r3, r8, r3
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015dda:	fb0e 3202 	mla	r2, lr, r2, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015dde:	fb0c 330a 	mla	r3, ip, sl, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015de2:	eb02 3a49 	add.w	sl, r2, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015de6:	ebc2 3249 	rsb	r2, r2, r9, lsl #13
			    & RANGE_MASK];
 8015dea:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8015dee:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015df2:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8015df6:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 8015df8:	f806 a007 	strb.w	sl, [r6, r7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015dfc:	9e02      	ldr	r6, [sp, #8]
 8015dfe:	5cb2      	ldrb	r2, [r6, r2]
 8015e00:	70ea      	strb	r2, [r5, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015e02:	eb03 3241 	add.w	r2, r3, r1, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015e06:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
			    & RANGE_MASK];
 8015e0a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8015e0e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015e12:	5cb2      	ldrb	r2, [r6, r2]
 8015e14:	706a      	strb	r2, [r5, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015e16:	5cf3      	ldrb	r3, [r6, r3]
 8015e18:	70ab      	strb	r3, [r5, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8015e1a:	d1c4      	bne.n	8015da6 <jpeg_idct_4x8+0x92>
  }
}
 8015e1c:	b027      	add	sp, #156	@ 0x9c
 8015e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015e22:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015e24:	f241 1251 	movw	r2, #4433	@ 0x1151
    z2 <<= CONST_BITS;
 8015e28:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015e2a:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015e2c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015e30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015e34:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015e36:	183c      	adds	r4, r7, r0
 8015e38:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015e3a:	f641 027e 	movw	r2, #6270	@ 0x187e
 8015e3e:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015e42:	4a35      	ldr	r2, [pc, #212]	@ (8015f18 <jpeg_idct_4x8+0x204>)
 8015e44:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015e48:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8015e4a:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8015e4c:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8015e50:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8015e54:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8015e58:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015e5a:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
    tmp11 = tmp1 + tmp3;
 8015e5e:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8015e60:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015e62:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015e64:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015e68:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015e6c:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015e70:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015e74:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
    tmp13 = tmp0 - tmp2;
 8015e76:	9203      	str	r2, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015e78:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015e7c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8015e80:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8015e84:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015e88:	1930      	adds	r0, r6, r4
 8015e8a:	4350      	muls	r0, r2
    z2 += z1;
 8015e8c:	4a23      	ldr	r2, [pc, #140]	@ (8015f1c <jpeg_idct_4x8+0x208>)
 8015e8e:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8015e92:	4a23      	ldr	r2, [pc, #140]	@ (8015f20 <jpeg_idct_4x8+0x20c>)
 8015e94:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015e98:	eb09 040a 	add.w	r4, r9, sl
 8015e9c:	4a21      	ldr	r2, [pc, #132]	@ (8015f24 <jpeg_idct_4x8+0x210>)
 8015e9e:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8015ea0:	f640 128e 	movw	r2, #2446	@ 0x98e
 8015ea4:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8015ea8:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8015eaa:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8015eae:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8015f28 <jpeg_idct_4x8+0x214>)
    tmp3 += z1 + z3;
 8015eb4:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015eb8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8015ebc:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015ec0:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8015ec4:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8015ec6:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8015ec8:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8015ecc:	f246 2854 	movw	r8, #25172	@ 0x6254
 8015ed0:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015ed4:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015ed8:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015edc:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015ede:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015ee2:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015ee6:	66cc      	str	r4, [r1, #108]	@ 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015ee8:	eb07 040e 	add.w	r4, r7, lr
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015eec:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015ef0:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015ef2:	12ff      	asrs	r7, r7, #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015ef4:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015ef6:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015ef8:	1a1b      	subs	r3, r3, r0
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015efa:	65cf      	str	r7, [r1, #92]	@ 0x5c
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015efc:	12e4      	asrs	r4, r4, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015efe:	12db      	asrs	r3, r3, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015f00:	61cc      	str	r4, [r1, #28]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015f02:	64cb      	str	r3, [r1, #76]	@ 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015f04:	9b03      	ldr	r3, [sp, #12]
 8015f06:	444b      	add	r3, r9
 8015f08:	12db      	asrs	r3, r3, #11
 8015f0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8015f0c:	9b03      	ldr	r3, [sp, #12]
 8015f0e:	eba3 0309 	sub.w	r3, r3, r9
 8015f12:	12db      	asrs	r3, r3, #11
 8015f14:	63cb      	str	r3, [r1, #60]	@ 0x3c
    wsptr++;
 8015f16:	e738      	b.n	8015d8a <jpeg_idct_4x8+0x76>
 8015f18:	ffffc4df 	.word	0xffffc4df
 8015f1c:	ffffc13b 	.word	0xffffc13b
 8015f20:	fffff384 	.word	0xfffff384
 8015f24:	ffffe333 	.word	0xffffe333
 8015f28:	ffffadfd 	.word	0xffffadfd

08015f2c <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015f30:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8015f34:	b095      	sub	sp, #84	@ 0x54
 8015f36:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8015f38:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015f3a:	f100 0e80 	add.w	lr, r0, #128	@ 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015f3e:	3204      	adds	r2, #4
 8015f40:	3c04      	subs	r4, #4
  wsptr = workspace;
 8015f42:	ae02      	add	r6, sp, #8
{
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015f48:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015f4c:	f640 33b6 	movw	r3, #2998	@ 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015f50:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015f54:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015f56:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	@ 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015f5a:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015f5c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015f60:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015f64:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8015f66:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8015f68:	f241 60a1 	movw	r0, #5793	@ 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015f6c:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	@ 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015f70:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015f74:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	@ 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8015f78:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8015f7a:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8015f7c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015f80:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015f82:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8015f84:	f242 7731 	movw	r7, #10033	@ 0x2731
 8015f88:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015f8a:	6a27      	ldr	r7, [r4, #32]
    tmp10 = tmp1 + tmp0;
 8015f8c:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8015f90:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015f92:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8015f96:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015f98:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8015f9a:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015f9e:	f8d4 70a0 	ldr.w	r7, [r4, #160]	@ 0xa0
 8015fa2:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015fa6:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015faa:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015fae:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015fb2:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015fb6:	435f      	muls	r7, r3
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015fb8:	eba2 0208 	sub.w	r2, r2, r8
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015fbc:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015fbe:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015fc2:	0092      	lsls	r2, r2, #2
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015fc4:	42ab      	cmp	r3, r5

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015fc6:	eb0c 080a 	add.w	r8, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015fca:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015fce:	eb07 374b 	add.w	r7, r7, fp, lsl #13
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015fd2:	ea4f 2cec 	mov.w	ip, ip, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015fd6:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015fda:	f8c6 c038 	str.w	ip, [r6, #56]	@ 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015fde:	eb02 2ce1 	add.w	ip, r2, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015fe2:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015fe6:	f846 8c04 	str.w	r8, [r6, #-4]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015fea:	f8c6 c008 	str.w	ip, [r6, #8]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015fee:	62f2      	str	r2, [r6, #44]	@ 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015ff0:	eb00 0207 	add.w	r2, r0, r7
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015ff4:	eba0 0007 	sub.w	r0, r0, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015ff8:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015ffc:	ea4f 20e0 	mov.w	r0, r0, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8016000:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8016002:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8016004:	d1a0      	bne.n	8015f48 <jpeg_idct_3x6+0x1c>
 8016006:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8016008:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801600a:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801600e:	f242 7b31 	movw	fp, #10033	@ 0x2731
 8016012:	1f1d      	subs	r5, r3, #4
 8016014:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8016016:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 801601a:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801601c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801601e:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8016022:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8016024:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016028:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801602c:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8016030:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016034:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016038:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801603a:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 801603e:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8016042:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016046:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801604a:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 801604e:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8016052:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8016056:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801605a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801605e:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8016062:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016066:	f81e 4008 	ldrb.w	r4, [lr, r8]
 801606a:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801606c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016070:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8016072:	d1d0      	bne.n	8016016 <jpeg_idct_3x6+0xea>
  }
}
 8016074:	b015      	add	sp, #84	@ 0x54
 8016076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801607c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016080:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8016082:	b08b      	sub	sp, #44	@ 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016084:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8016088:	1e96      	subs	r6, r2, #2
 801608a:	3c04      	subs	r4, #4
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801608c:	ad02      	add	r5, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801608e:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8016092:	f641 0e7e 	movw	lr, #6270	@ 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8016096:	f8df c0b8 	ldr.w	ip, [pc, #184]	@ 8016150 <jpeg_idct_2x4+0xd4>
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801609a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801609c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80160a0:	4637      	mov	r7, r6
 80160a2:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80160a6:	3504      	adds	r5, #4
 80160a8:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80160aa:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80160ae:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 80160b2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80160b4:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80160b8:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80160bc:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	@ 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80160c0:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80160c4:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80160c8:	6a21      	ldr	r1, [r4, #32]
 80160ca:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80160ce:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80160d0:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80160d4:	eb0a 010b 	add.w	r1, sl, fp
 80160d8:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80160dc:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80160e0:	fb0c 110b 	mla	r1, ip, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 80160e4:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80160e8:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 80160ec:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 80160f0:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 80160f4:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80160f8:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 80160fc:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8016100:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8016102:	d1cb      	bne.n	801609c <jpeg_idct_2x4+0x20>
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016104:	9d01      	ldr	r5, [sp, #4]
 8016106:	1f18      	subs	r0, r3, #4
 8016108:	f103 0e0c 	add.w	lr, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 801610c:	a902      	add	r1, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801610e:	3580      	adds	r5, #128	@ 0x80
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8016110:	f850 7f04 	ldr.w	r7, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8016114:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8016116:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    tmp0 = wsptr[1];
 8016118:	f851 6c04 	ldr.w	r6, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 801611c:	4586      	cmp	lr, r0
    outptr = output_buf[ctr] + output_col;
 801611e:	eb07 0c02 	add.w	ip, r7, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8016122:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8016126:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8016128:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801612c:	eb02 0406 	add.w	r4, r2, r6
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8016130:	eba2 0206 	sub.w	r2, r2, r6
			    & RANGE_MASK];
 8016134:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8016138:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801613c:	5d2c      	ldrb	r4, [r5, r4]
 801613e:	54fc      	strb	r4, [r7, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8016140:	5caa      	ldrb	r2, [r5, r2]
 8016142:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8016146:	d1e3      	bne.n	8016110 <jpeg_idct_2x4+0x94>
  }
}
 8016148:	b00b      	add	sp, #44	@ 0x2c
 801614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801614e:	bf00      	nop
 8016150:	ffffc4df 	.word	0xffffc4df

08016154 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016154:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016156:	6d4c      	ldr	r4, [r1, #84]	@ 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016158:	f9b2 1000 	ldrsh.w	r1, [r2]
 801615c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801615e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8016162:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016164:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016166:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801616a:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 801616c:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801616e:	3080      	adds	r0, #128	@ 0x80
{
 8016170:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8016172:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8016174:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8016176:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 801617a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801617e:	5d06      	ldrb	r6, [r0, r4]
 8016180:	681c      	ldr	r4, [r3, #0]
 8016182:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8016184:	5c42      	ldrb	r2, [r0, r1]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	555a      	strb	r2, [r3, r5]
}
 801618a:	bd70      	pop	{r4, r5, r6, pc}

0801618c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801618c:	6803      	ldr	r3, [r0, #0]
 801618e:	2238      	movs	r2, #56	@ 0x38
 8016190:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	4718      	bx	r3

08016198 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8016198:	688b      	ldr	r3, [r1, #8]
{
 801619a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801619e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 80161a2:	698b      	ldr	r3, [r1, #24]
{
 80161a4:	b085      	sub	sp, #20
 80161a6:	4681      	mov	r9, r0
 80161a8:	460c      	mov	r4, r1
 80161aa:	4693      	mov	fp, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 80161ac:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80161b0:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80161b2:	f101 0a30 	add.w	sl, r1, #48	@ 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80161b6:	6922      	ldr	r2, [r4, #16]
 80161b8:	42b2      	cmp	r2, r6
 80161ba:	dc02      	bgt.n	80161c2 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 80161bc:	b005      	add	sp, #20
 80161be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80161c2:	1b92      	subs	r2, r2, r6
 80161c4:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80161c6:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80161c8:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80161ca:	6865      	ldr	r5, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 80161cc:	4430      	add	r0, r6
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80161ce:	bfa8      	it	ge
 80161d0:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80161d2:	69e1      	ldr	r1, [r4, #28]
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80161d4:	1a2d      	subs	r5, r5, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80161d6:	1a09      	subs	r1, r1, r0
 80161d8:	4291      	cmp	r1, r2
 80161da:	bfa8      	it	ge
 80161dc:	4611      	movge	r1, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80161de:	428d      	cmp	r5, r1
 80161e0:	bfa8      	it	ge
 80161e2:	460d      	movge	r5, r1
    if (rows <= 0)		/* this chunk might be past end of file! */
 80161e4:	2d00      	cmp	r5, #0
 80161e6:	dde9      	ble.n	80161bc <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 80161e8:	fb05 f308 	mul.w	r3, r5, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80161ec:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 80161ee:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80161f0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 80161f4:	f1bb 0f00 	cmp.w	fp, #0
 80161f8:	d00a      	beq.n	8016210 <do_barray_io+0x78>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	4651      	mov	r1, sl
 80161fe:	463b      	mov	r3, r7
 8016200:	4648      	mov	r0, r9
 8016202:	6b65      	ldr	r5, [r4, #52]	@ 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016204:	47a8      	blx	r5
    file_offset += byte_count;
 8016206:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016208:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801620a:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801620c:	4416      	add	r6, r2
 801620e:	e7d2      	b.n	80161b6 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016210:	9b03      	ldr	r3, [sp, #12]
 8016212:	4651      	mov	r1, sl
 8016214:	4648      	mov	r0, r9
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	463b      	mov	r3, r7
 801621a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801621c:	e7f2      	b.n	8016204 <do_barray_io+0x6c>
	...

08016220 <alloc_small>:
{
 8016220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8016224:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 8016228:	4606      	mov	r6, r0
 801622a:	460d      	mov	r5, r1
 801622c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801622e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016230:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8016232:	d902      	bls.n	801623a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8016234:	2101      	movs	r1, #1
 8016236:	f7ff ffa9 	bl	801618c <out_of_memory>
  if (odd_bytes > 0)
 801623a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801623e:	bf1c      	itt	ne
 8016240:	3408      	addne	r4, #8
 8016242:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016244:	2d01      	cmp	r5, #1
 8016246:	d906      	bls.n	8016256 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016248:	6833      	ldr	r3, [r6, #0]
 801624a:	220f      	movs	r2, #15
 801624c:	4630      	mov	r0, r6
 801624e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8016256:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 801625a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 801625e:	f8d8 0034 	ldr.w	r0, [r8, #52]	@ 0x34
  while (hdr_ptr != NULL) {
 8016262:	b9e8      	cbnz	r0, 80162a0 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8016264:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8016268:	f1ba 0f00 	cmp.w	sl, #0
 801626c:	d11e      	bne.n	80162ac <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 801626e:	4b1d      	ldr	r3, [pc, #116]	@ (80162e4 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8016270:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8016274:	f5c9 3580 	rsb	r5, r9, #65536	@ 0x10000
 8016278:	429d      	cmp	r5, r3
 801627a:	bf28      	it	cs
 801627c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801627e:	eb05 0b09 	add.w	fp, r5, r9
 8016282:	4630      	mov	r0, r6
 8016284:	4659      	mov	r1, fp
 8016286:	f000 fbc5 	bl	8016a14 <jpeg_get_small>
      if (hdr_ptr != NULL)
 801628a:	b988      	cbnz	r0, 80162b0 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 801628c:	2d63      	cmp	r5, #99	@ 0x63
      slop /= 2;
 801628e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8016292:	d803      	bhi.n	801629c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8016294:	2102      	movs	r1, #2
 8016296:	4630      	mov	r0, r6
 8016298:	f7ff ff78 	bl	801618c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 801629c:	465d      	mov	r5, fp
 801629e:	e7ee      	b.n	801627e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 80162a0:	6883      	ldr	r3, [r0, #8]
 80162a2:	42a3      	cmp	r3, r4
 80162a4:	d211      	bcs.n	80162ca <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 80162a6:	4682      	mov	sl, r0
 80162a8:	6800      	ldr	r0, [r0, #0]
 80162aa:	e7da      	b.n	8016262 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 80162ac:	4b0e      	ldr	r3, [pc, #56]	@ (80162e8 <alloc_small+0xc8>)
 80162ae:	e7df      	b.n	8016270 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 80162b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80162b2:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 80162b4:	445b      	add	r3, fp
 80162b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    hdr_ptr->hdr.next = NULL;
 80162b8:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80162ba:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 80162bc:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80162c0:	f1ba 0f00 	cmp.w	sl, #0
 80162c4:	d10b      	bne.n	80162de <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 80162c6:	f8c8 0034 	str.w	r0, [r8, #52]	@ 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80162ca:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80162cc:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80162ce:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80162d0:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 80162d2:	6882      	ldr	r2, [r0, #8]
 80162d4:	1b12      	subs	r2, r2, r4
 80162d6:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80162d8:	4418      	add	r0, r3
}
 80162da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 80162de:	f8ca 0000 	str.w	r0, [sl]
 80162e2:	e7f2      	b.n	80162ca <alloc_small+0xaa>
 80162e4:	0802ff84 	.word	0x0802ff84
 80162e8:	0802ff7c 	.word	0x0802ff7c

080162ec <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 80162ec:	2901      	cmp	r1, #1
{
 80162ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162f2:	4604      	mov	r4, r0
 80162f4:	460d      	mov	r5, r1
 80162f6:	4616      	mov	r6, r2
 80162f8:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80162fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 80162fe:	d005      	beq.n	801630c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016300:	6803      	ldr	r3, [r0, #0]
 8016302:	220f      	movs	r2, #15
 8016304:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801630c:	223c      	movs	r2, #60	@ 0x3c
 801630e:	4629      	mov	r1, r5
 8016310:	4620      	mov	r0, r4
 8016312:	f7ff ff85 	bl	8016220 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016316:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8016318:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801631a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801631c:	6283      	str	r3, [r0, #40]	@ 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801631e:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
  result->pre_zero = pre_zero;
 8016322:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8016324:	62c3      	str	r3, [r0, #44]	@ 0x2c
  result->blocksperrow = blocksperrow;
 8016326:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 801632a:	9a07      	ldr	r2, [sp, #28]
 801632c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 801632e:	f8c8 0048 	str.w	r0, [r8, #72]	@ 0x48
}
 8016332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016336 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8016336:	2901      	cmp	r1, #1
{
 8016338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801633c:	4604      	mov	r4, r0
 801633e:	460d      	mov	r5, r1
 8016340:	4616      	mov	r6, r2
 8016342:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016344:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8016348:	d005      	beq.n	8016356 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801634a:	6803      	ldr	r3, [r0, #0]
 801634c:	220f      	movs	r2, #15
 801634e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8016356:	223c      	movs	r2, #60	@ 0x3c
 8016358:	4629      	mov	r1, r5
 801635a:	4620      	mov	r0, r4
 801635c:	f7ff ff60 	bl	8016220 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016360:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8016362:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016364:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8016366:	6283      	str	r3, [r0, #40]	@ 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8016368:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
  result->pre_zero = pre_zero;
 801636c:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 801636e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  result->samplesperrow = samplesperrow;
 8016370:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8016374:	9a07      	ldr	r2, [sp, #28]
 8016376:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8016378:	f8c8 0044 	str.w	r0, [r8, #68]	@ 0x44
}
 801637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016380 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016380:	2901      	cmp	r1, #1
{
 8016382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016386:	4606      	mov	r6, r0
 8016388:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801638a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801638c:	d910      	bls.n	80163b0 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801638e:	6803      	ldr	r3, [r0, #0]
 8016390:	220f      	movs	r2, #15
 8016392:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801639a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 801639e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 80163a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  mem->large_list[pool_id] = NULL;
 80163a2:	63e2      	str	r2, [r4, #60]	@ 0x3c

  while (lhdr_ptr != NULL) {
 80163a4:	bb0b      	cbnz	r3, 80163ea <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 80163a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  mem->small_list[pool_id] = NULL;
 80163a8:	6363      	str	r3, [r4, #52]	@ 0x34

  while (shdr_ptr != NULL) {
 80163aa:	bb69      	cbnz	r1, 8016408 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 80163ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 80163b0:	d1f3      	bne.n	801639a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80163b2:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80163b4:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80163b6:	b924      	cbnz	r4, 80163c2 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80163b8:	6caf      	ldr	r7, [r5, #72]	@ 0x48
    mem->virt_sarray_list = NULL;
 80163ba:	646c      	str	r4, [r5, #68]	@ 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80163bc:	b95f      	cbnz	r7, 80163d6 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 80163be:	64af      	str	r7, [r5, #72]	@ 0x48
 80163c0:	e7eb      	b.n	801639a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 80163c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80163c4:	b12b      	cbz	r3, 80163d2 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80163c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80163c8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80163cc:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80163ce:	62a7      	str	r7, [r4, #40]	@ 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80163d0:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80163d2:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 80163d4:	e7ef      	b.n	80163b6 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 80163d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163d8:	b12b      	cbz	r3, 80163e6 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80163da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163dc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80163e0:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80163e2:	62bc      	str	r4, [r7, #40]	@ 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80163e4:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80163e6:	6aff      	ldr	r7, [r7, #44]	@ 0x2c
 80163e8:	e7e8      	b.n	80163bc <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 80163ea:	e9d3 8700 	ldrd	r8, r7, [r3]
 80163ee:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 80163f0:	4619      	mov	r1, r3
 80163f2:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 80163f4:	4417      	add	r7, r2
 80163f6:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 80163f8:	463a      	mov	r2, r7
 80163fa:	f000 fb14 	bl	8016a26 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 80163fe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016400:	1bdb      	subs	r3, r3, r7
 8016402:	64eb      	str	r3, [r5, #76]	@ 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8016404:	4643      	mov	r3, r8
 8016406:	e7cd      	b.n	80163a4 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8016408:	688b      	ldr	r3, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801640a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 801640c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8016410:	441c      	add	r4, r3
 8016412:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8016414:	4622      	mov	r2, r4
 8016416:	f000 fb00 	bl	8016a1a <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801641a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 801641c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 801641e:	1b1b      	subs	r3, r3, r4
 8016420:	64eb      	str	r3, [r5, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 8016422:	e7c2      	b.n	80163aa <free_pool+0x2a>

08016424 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8016424:	b510      	push	{r4, lr}
 8016426:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8016428:	2101      	movs	r1, #1
 801642a:	f7ff ffa9 	bl	8016380 <free_pool>
 801642e:	2100      	movs	r1, #0
 8016430:	4620      	mov	r0, r4
 8016432:	f7ff ffa5 	bl	8016380 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8016436:	4620      	mov	r0, r4
 8016438:	6861      	ldr	r1, [r4, #4]
 801643a:	2254      	movs	r2, #84	@ 0x54
 801643c:	f000 faed 	bl	8016a1a <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8016440:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8016442:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8016444:	6063      	str	r3, [r4, #4]
}
 8016446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801644a:	f000 baf8 	b.w	8016a3e <jpeg_mem_term>

0801644e <access_virt_barray>:
{
 801644e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8016452:	18d7      	adds	r7, r2, r3
{
 8016454:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016456:	684a      	ldr	r2, [r1, #4]
{
 8016458:	4606      	mov	r6, r0
 801645a:	460c      	mov	r4, r1
 801645c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016460:	42ba      	cmp	r2, r7
 8016462:	d304      	bcc.n	801646e <access_virt_barray+0x20>
 8016464:	68ca      	ldr	r2, [r1, #12]
 8016466:	429a      	cmp	r2, r3
 8016468:	d301      	bcc.n	801646e <access_virt_barray+0x20>
 801646a:	680b      	ldr	r3, [r1, #0]
 801646c:	b92b      	cbnz	r3, 801647a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801646e:	6833      	ldr	r3, [r6, #0]
 8016470:	2217      	movs	r2, #23
 8016472:	4630      	mov	r0, r6
 8016474:	615a      	str	r2, [r3, #20]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4798      	blx	r3
  if (start_row < ptr->cur_start_row ||
 801647a:	69a3      	ldr	r3, [r4, #24]
 801647c:	42ab      	cmp	r3, r5
 801647e:	d803      	bhi.n	8016488 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8016480:	6922      	ldr	r2, [r4, #16]
 8016482:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8016484:	42bb      	cmp	r3, r7
 8016486:	d21e      	bcs.n	80164c6 <access_virt_barray+0x78>
    if (! ptr->b_s_open)
 8016488:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801648a:	b92b      	cbnz	r3, 8016498 <access_virt_barray+0x4a>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801648c:	6833      	ldr	r3, [r6, #0]
 801648e:	2247      	movs	r2, #71	@ 0x47
 8016490:	4630      	mov	r0, r6
 8016492:	615a      	str	r2, [r3, #20]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	4798      	blx	r3
    if (ptr->dirty) {
 8016498:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801649a:	b133      	cbz	r3, 80164aa <access_virt_barray+0x5c>
      do_barray_io(cinfo, ptr, TRUE);
 801649c:	2201      	movs	r2, #1
 801649e:	4621      	mov	r1, r4
 80164a0:	4630      	mov	r0, r6
 80164a2:	f7ff fe79 	bl	8016198 <do_barray_io>
      ptr->dirty = FALSE;
 80164a6:	2300      	movs	r3, #0
 80164a8:	6263      	str	r3, [r4, #36]	@ 0x24
    if (start_row > ptr->cur_start_row) {
 80164aa:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80164ac:	2200      	movs	r2, #0
 80164ae:	4621      	mov	r1, r4
 80164b0:	4630      	mov	r0, r6
    if (start_row > ptr->cur_start_row) {
 80164b2:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80164b4:	bf29      	itett	cs
 80164b6:	6923      	ldrcs	r3, [r4, #16]
      ptr->cur_start_row = start_row;
 80164b8:	462b      	movcc	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80164ba:	1afb      	subcs	r3, r7, r3
      if (ltemp < 0)
 80164bc:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80164c0:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80164c2:	f7ff fe69 	bl	8016198 <do_barray_io>
  if (ptr->first_undef_row < end_row) {
 80164c6:	69e3      	ldr	r3, [r4, #28]
 80164c8:	42bb      	cmp	r3, r7
 80164ca:	d21b      	bcs.n	8016504 <access_virt_barray+0xb6>
    if (ptr->first_undef_row < start_row) {
 80164cc:	42ab      	cmp	r3, r5
 80164ce:	d20b      	bcs.n	80164e8 <access_virt_barray+0x9a>
      if (writable)		/* writer skipped over a section of array */
 80164d0:	f1b8 0f00 	cmp.w	r8, #0
 80164d4:	d01a      	beq.n	801650c <access_virt_barray+0xbe>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80164d6:	6833      	ldr	r3, [r6, #0]
 80164d8:	2217      	movs	r2, #23
 80164da:	4630      	mov	r0, r6
 80164dc:	615a      	str	r2, [r3, #20]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4798      	blx	r3
 80164e2:	462b      	mov	r3, r5
      ptr->first_undef_row = end_row;
 80164e4:	61e7      	str	r7, [r4, #28]
 80164e6:	e002      	b.n	80164ee <access_virt_barray+0xa0>
    if (writable)
 80164e8:	f1b8 0f00 	cmp.w	r8, #0
 80164ec:	d1fa      	bne.n	80164e4 <access_virt_barray+0x96>
    if (ptr->pre_zero) {
 80164ee:	6a22      	ldr	r2, [r4, #32]
 80164f0:	b1b2      	cbz	r2, 8016520 <access_virt_barray+0xd2>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 80164f2:	68a2      	ldr	r2, [r4, #8]
 80164f4:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80164f8:	69a2      	ldr	r2, [r4, #24]
 80164fa:	1a9e      	subs	r6, r3, r2
      end_row -= ptr->cur_start_row;
 80164fc:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 80164fe:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016500:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8016502:	d305      	bcc.n	8016510 <access_virt_barray+0xc2>
  if (writable)
 8016504:	f1b8 0f00 	cmp.w	r8, #0
 8016508:	d10d      	bne.n	8016526 <access_virt_barray+0xd8>
 801650a:	e00e      	b.n	801652a <access_virt_barray+0xdc>
 801650c:	462b      	mov	r3, r5
 801650e:	e7ee      	b.n	80164ee <access_virt_barray+0xa0>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016510:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016514:	464a      	mov	r2, r9
 8016516:	2100      	movs	r1, #0
	undef_row++;
 8016518:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801651a:	f014 fe15 	bl	802b148 <memset>
	undef_row++;
 801651e:	e7ee      	b.n	80164fe <access_virt_barray+0xb0>
      if (! writable)		/* reader looking at undefined data */
 8016520:	f1b8 0f00 	cmp.w	r8, #0
 8016524:	d008      	beq.n	8016538 <access_virt_barray+0xea>
    ptr->dirty = TRUE;
 8016526:	2301      	movs	r3, #1
 8016528:	6263      	str	r3, [r4, #36]	@ 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801652a:	69a3      	ldr	r3, [r4, #24]
 801652c:	6820      	ldr	r0, [r4, #0]
 801652e:	1aed      	subs	r5, r5, r3
}
 8016530:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8016534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016538:	6833      	ldr	r3, [r6, #0]
 801653a:	2217      	movs	r2, #23
 801653c:	4630      	mov	r0, r6
 801653e:	615a      	str	r2, [r3, #20]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	4798      	blx	r3
  if (writable)
 8016544:	e7f1      	b.n	801652a <access_virt_barray+0xdc>

08016546 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8016546:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 801654a:	429a      	cmp	r2, r3
{
 801654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016550:	4606      	mov	r6, r0
 8016552:	4688      	mov	r8, r1
 8016554:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016556:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8016558:	d902      	bls.n	8016560 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 801655a:	2103      	movs	r1, #3
 801655c:	f7ff fe16 	bl	801618c <out_of_memory>
  if (odd_bytes > 0)
 8016560:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8016564:	bf1c      	itt	ne
 8016566:	3408      	addne	r4, #8
 8016568:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801656a:	f1b8 0f01 	cmp.w	r8, #1
 801656e:	d906      	bls.n	801657e <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016570:	6833      	ldr	r3, [r6, #0]
 8016572:	220f      	movs	r2, #15
 8016574:	4630      	mov	r0, r6
 8016576:	e9c3 2805 	strd	r2, r8, [r3, #20]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 801657e:	f104 0110 	add.w	r1, r4, #16
 8016582:	4630      	mov	r0, r6
 8016584:	f000 fa4c 	bl	8016a20 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8016588:	4605      	mov	r5, r0
 801658a:	b918      	cbnz	r0, 8016594 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 801658c:	2104      	movs	r1, #4
 801658e:	4630      	mov	r0, r6
 8016590:	f7ff fdfc 	bl	801618c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8016594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8016596:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 801659a:	3310      	adds	r3, #16
 801659c:	4423      	add	r3, r4
 801659e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80165a0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80165a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80165a6:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 80165aa:	2300      	movs	r3, #0
 80165ac:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 80165ae:	63fd      	str	r5, [r7, #60]	@ 0x3c
}
 80165b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080165b4 <alloc_barray>:
{
 80165b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 80165b8:	01d7      	lsls	r7, r2, #7
{
 80165ba:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80165bc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 80165c0:	4680      	mov	r8, r0
 80165c2:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80165c4:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 80165c6:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80165c8:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 80165cc:	d904      	bls.n	80165d8 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80165ce:	6803      	ldr	r3, [r0, #0]
 80165d0:	2248      	movs	r2, #72	@ 0x48
 80165d2:	615a      	str	r2, [r3, #20]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80165d8:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80165da:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80165de:	4651      	mov	r1, sl
 80165e0:	4640      	mov	r0, r8
 80165e2:	bfa8      	it	ge
 80165e4:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 80165e6:	6534      	str	r4, [r6, #80]	@ 0x50
  currow = 0;
 80165e8:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80165ea:	f7ff fe19 	bl	8016220 <alloc_small>
 80165ee:	4681      	mov	r9, r0
  while (currow < numrows) {
 80165f0:	42ae      	cmp	r6, r5
 80165f2:	d302      	bcc.n	80165fa <alloc_barray+0x46>
}
 80165f4:	4648      	mov	r0, r9
 80165f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80165fa:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 80165fc:	4651      	mov	r1, sl
 80165fe:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016600:	429c      	cmp	r4, r3
 8016602:	bf28      	it	cs
 8016604:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8016606:	fb04 f207 	mul.w	r2, r4, r7
 801660a:	f7ff ff9c 	bl	8016546 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 801660e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8016612:	4426      	add	r6, r4
 8016614:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8016618:	4293      	cmp	r3, r2
 801661a:	d0e9      	beq.n	80165f0 <alloc_barray+0x3c>
      result[currow++] = workspace;
 801661c:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8016620:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8016622:	e7f9      	b.n	8016618 <alloc_barray+0x64>

08016624 <alloc_sarray>:
{
 8016624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016628:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 801662a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 801662e:	4607      	mov	r7, r0
 8016630:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8016632:	429a      	cmp	r2, r3
{
 8016634:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016636:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016638:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 801663c:	d904      	bls.n	8016648 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801663e:	6803      	ldr	r3, [r0, #0]
 8016640:	2248      	movs	r2, #72	@ 0x48
 8016642:	615a      	str	r2, [r3, #20]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8016648:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 801664a:	ea4f 0285 	mov.w	r2, r5, lsl #2
 801664e:	4651      	mov	r1, sl
 8016650:	4638      	mov	r0, r7
 8016652:	bfa8      	it	ge
 8016654:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8016656:	6534      	str	r4, [r6, #80]	@ 0x50
  currow = 0;
 8016658:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 801665a:	f7ff fde1 	bl	8016220 <alloc_small>
 801665e:	4681      	mov	r9, r0
  while (currow < numrows) {
 8016660:	42ae      	cmp	r6, r5
 8016662:	d302      	bcc.n	801666a <alloc_sarray+0x46>
}
 8016664:	4648      	mov	r0, r9
 8016666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801666a:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801666c:	4651      	mov	r1, sl
 801666e:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016670:	429c      	cmp	r4, r3
 8016672:	bf28      	it	cs
 8016674:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8016676:	fb04 f208 	mul.w	r2, r4, r8
 801667a:	f7ff ff64 	bl	8016546 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 801667e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8016682:	4426      	add	r6, r4
 8016684:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8016688:	4293      	cmp	r3, r2
 801668a:	d0e9      	beq.n	8016660 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 801668c:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8016690:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8016692:	e7f9      	b.n	8016688 <alloc_sarray+0x64>

08016694 <realize_virt_arrays>:
{
 8016694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016698:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 801669c:	2500      	movs	r5, #0
{
 801669e:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80166a0:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
  space_per_minheight = 0;
 80166a4:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80166a6:	b9e3      	cbnz	r3, 80166e2 <realize_virt_arrays+0x4e>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80166a8:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
 80166ac:	bb23      	cbnz	r3, 80166f8 <realize_virt_arrays+0x64>
  if (space_per_minheight <= 0)
 80166ae:	2e00      	cmp	r6, #0
 80166b0:	dd15      	ble.n	80166de <realize_virt_arrays+0x4a>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 80166b2:	f8d8 304c 	ldr.w	r3, [r8, #76]	@ 0x4c
 80166b6:	462a      	mov	r2, r5
 80166b8:	4631      	mov	r1, r6
 80166ba:	4638      	mov	r0, r7
 80166bc:	f000 f9b6 	bl	8016a2c <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 80166c0:	4285      	cmp	r5, r0
 80166c2:	dd26      	ble.n	8016712 <realize_virt_arrays+0x7e>
    max_minheights = avail_mem / space_per_minheight;
 80166c4:	fb90 f6f6 	sdiv	r6, r0, r6
    if (max_minheights <= 0)
 80166c8:	2e01      	cmp	r6, #1
 80166ca:	bfb8      	it	lt
 80166cc:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80166ce:	f8d8 4044 	ldr.w	r4, [r8, #68]	@ 0x44
      sptr->cur_start_row = 0;
 80166d2:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80166d4:	b9fc      	cbnz	r4, 8016716 <realize_virt_arrays+0x82>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80166d6:	f8d8 5048 	ldr.w	r5, [r8, #72]	@ 0x48
 80166da:	2d00      	cmp	r5, #0
 80166dc:	d141      	bne.n	8016762 <realize_virt_arrays+0xce>
}
 80166de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	b932      	cbnz	r2, 80166f4 <realize_virt_arrays+0x60>
      space_per_minheight += (long) sptr->maxaccess *
 80166e6:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80166ea:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 80166ee:	6859      	ldr	r1, [r3, #4]
 80166f0:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80166f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166f6:	e7d6      	b.n	80166a6 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 80166f8:	681a      	ldr	r2, [r3, #0]
 80166fa:	b942      	cbnz	r2, 801670e <realize_virt_arrays+0x7a>
      space_per_minheight += (long) bptr->maxaccess *
 80166fc:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8016700:	4351      	muls	r1, r2
 8016702:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8016706:	6859      	ldr	r1, [r3, #4]
 8016708:	434a      	muls	r2, r1
 801670a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016710:	e7cc      	b.n	80166ac <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8016712:	4e27      	ldr	r6, [pc, #156]	@ (80167b0 <realize_virt_arrays+0x11c>)
 8016714:	e7db      	b.n	80166ce <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8016716:	6823      	ldr	r3, [r4, #0]
 8016718:	b9b3      	cbnz	r3, 8016748 <realize_virt_arrays+0xb4>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801671a:	6862      	ldr	r2, [r4, #4]
				(long) sptr->samplesperrow *
 801671c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8016720:	1e53      	subs	r3, r2, #1
 8016722:	fbb3 f3f1 	udiv	r3, r3, r1
 8016726:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8016728:	429e      	cmp	r6, r3
 801672a:	db0f      	blt.n	801674c <realize_virt_arrays+0xb8>
	sptr->rows_in_mem = sptr->rows_in_array;
 801672c:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801672e:	6923      	ldr	r3, [r4, #16]
 8016730:	2101      	movs	r1, #1
 8016732:	68a2      	ldr	r2, [r4, #8]
 8016734:	4638      	mov	r0, r7
 8016736:	f7ff ff75 	bl	8016624 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 801673a:	f8d8 3050 	ldr.w	r3, [r8, #80]	@ 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801673e:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8016740:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8016742:	6265      	str	r5, [r4, #36]	@ 0x24
      sptr->cur_start_row = 0;
 8016744:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016748:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 801674a:	e7c3      	b.n	80166d4 <realize_virt_arrays+0x40>
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801674c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801674e:	4342      	muls	r2, r0
 8016750:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8016752:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8016754:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016758:	f000 f96a 	bl	8016a30 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 801675c:	2301      	movs	r3, #1
 801675e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016760:	e7e5      	b.n	801672e <realize_virt_arrays+0x9a>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8016762:	682b      	ldr	r3, [r5, #0]
 8016764:	b9b3      	cbnz	r3, 8016794 <realize_virt_arrays+0x100>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8016766:	6868      	ldr	r0, [r5, #4]
				(long) bptr->blocksperrow *
 8016768:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 801676c:	1e43      	subs	r3, r0, #1
 801676e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016772:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8016774:	429e      	cmp	r6, r3
 8016776:	db0f      	blt.n	8016798 <realize_virt_arrays+0x104>
	bptr->rows_in_mem = bptr->rows_in_array;
 8016778:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 801677a:	692b      	ldr	r3, [r5, #16]
 801677c:	2101      	movs	r1, #1
 801677e:	68aa      	ldr	r2, [r5, #8]
 8016780:	4638      	mov	r0, r7
 8016782:	f7ff ff17 	bl	80165b4 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8016786:	f8d8 3050 	ldr.w	r3, [r8, #80]	@ 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 801678a:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 801678c:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 801678e:	626c      	str	r4, [r5, #36]	@ 0x24
      bptr->cur_start_row = 0;
 8016790:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016794:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
 8016796:	e7a0      	b.n	80166da <realize_virt_arrays+0x46>
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8016798:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 801679a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801679c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 801679e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80167a0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 80167a4:	01d2      	lsls	r2, r2, #7
 80167a6:	f000 f943 	bl	8016a30 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 80167aa:	2301      	movs	r3, #1
 80167ac:	62ab      	str	r3, [r5, #40]	@ 0x28
 80167ae:	e7e4      	b.n	801677a <realize_virt_arrays+0xe6>
 80167b0:	3b9aca00 	.word	0x3b9aca00

080167b4 <access_virt_sarray>:
{
 80167b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 80167b8:	eb02 0803 	add.w	r8, r2, r3
{
 80167bc:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80167be:	684a      	ldr	r2, [r1, #4]
{
 80167c0:	b085      	sub	sp, #20
 80167c2:	4682      	mov	sl, r0
 80167c4:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80167c6:	4542      	cmp	r2, r8
 80167c8:	d304      	bcc.n	80167d4 <access_virt_sarray+0x20>
 80167ca:	68ca      	ldr	r2, [r1, #12]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d301      	bcc.n	80167d4 <access_virt_sarray+0x20>
 80167d0:	680b      	ldr	r3, [r1, #0]
 80167d2:	b933      	cbnz	r3, 80167e2 <access_virt_sarray+0x2e>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80167d4:	f8da 3000 	ldr.w	r3, [sl]
 80167d8:	2217      	movs	r2, #23
 80167da:	4650      	mov	r0, sl
 80167dc:	615a      	str	r2, [r3, #20]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	4798      	blx	r3
  if (start_row < ptr->cur_start_row ||
 80167e2:	69a3      	ldr	r3, [r4, #24]
 80167e4:	42ab      	cmp	r3, r5
 80167e6:	d80c      	bhi.n	8016802 <access_virt_sarray+0x4e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80167e8:	6922      	ldr	r2, [r4, #16]
 80167ea:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80167ec:	4543      	cmp	r3, r8
 80167ee:	d308      	bcc.n	8016802 <access_virt_sarray+0x4e>
  if (ptr->first_undef_row < end_row) {
 80167f0:	69e6      	ldr	r6, [r4, #28]
 80167f2:	4546      	cmp	r6, r8
 80167f4:	f0c0 8081 	bcc.w	80168fa <access_virt_sarray+0x146>
  if (writable)
 80167f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	f040 80a5 	bne.w	801694a <access_virt_sarray+0x196>
 8016800:	e0a5      	b.n	801694e <access_virt_sarray+0x19a>
    if (! ptr->b_s_open)
 8016802:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016804:	b933      	cbnz	r3, 8016814 <access_virt_sarray+0x60>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8016806:	f8da 3000 	ldr.w	r3, [sl]
 801680a:	2247      	movs	r2, #71	@ 0x47
 801680c:	4650      	mov	r0, sl
 801680e:	615a      	str	r2, [r3, #20]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	4798      	blx	r3
    if (ptr->dirty) {
 8016814:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016816:	b183      	cbz	r3, 801683a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8016818:	f8d4 b008 	ldr.w	fp, [r4, #8]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801681c:	f104 0230 	add.w	r2, r4, #48	@ 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8016820:	69a3      	ldr	r3, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016822:	f04f 0900 	mov.w	r9, #0
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8016826:	9202      	str	r2, [sp, #8]
  file_offset = ptr->cur_start_row * bytesperrow;
 8016828:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801682c:	6922      	ldr	r2, [r4, #16]
 801682e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016830:	e9d4 1606 	ldrd	r1, r6, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016834:	dc3c      	bgt.n	80168b0 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8016836:	2300      	movs	r3, #0
 8016838:	6263      	str	r3, [r4, #36]	@ 0x24
    if (start_row > ptr->cur_start_row) {
 801683a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801683c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8016840:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016842:	f104 0130 	add.w	r1, r4, #48	@ 0x30
    if (start_row > ptr->cur_start_row) {
 8016846:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8016848:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801684c:	bf2a      	itet	cs
 801684e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = start_row;
 8016852:	462b      	movcc	r3, r5
      if (ltemp < 0)
 8016854:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8016858:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 801685a:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801685e:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016860:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016862:	454a      	cmp	r2, r9
 8016864:	ddc4      	ble.n	80167f0 <access_virt_sarray+0x3c>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016866:	eba2 0209 	sub.w	r2, r2, r9
 801686a:	6967      	ldr	r7, [r4, #20]
 801686c:	42ba      	cmp	r2, r7
 801686e:	bfa8      	it	ge
 8016870:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8016872:	69a7      	ldr	r7, [r4, #24]
 8016874:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016876:	eba6 0c07 	sub.w	ip, r6, r7
 801687a:	4594      	cmp	ip, r2
 801687c:	bfa8      	it	ge
 801687e:	4694      	movge	ip, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8016880:	6862      	ldr	r2, [r4, #4]
 8016882:	1bd6      	subs	r6, r2, r7
 8016884:	4566      	cmp	r6, ip
 8016886:	bfa8      	it	ge
 8016888:	4666      	movge	r6, ip
    if (rows <= 0)		/* this chunk might be past end of file! */
 801688a:	2e00      	cmp	r6, #0
 801688c:	ddb0      	ble.n	80167f0 <access_virt_sarray+0x3c>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801688e:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8016890:	fb06 f60b 	mul.w	r6, r6, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016894:	4650      	mov	r0, sl
 8016896:	9303      	str	r3, [sp, #12]
 8016898:	9600      	str	r6, [sp, #0]
 801689a:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801689e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 80168a0:	9102      	str	r1, [sp, #8]
 80168a2:	47b8      	blx	r7
    file_offset += byte_count;
 80168a4:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80168a6:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80168a8:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80168aa:	9902      	ldr	r1, [sp, #8]
 80168ac:	4491      	add	r9, r2
 80168ae:	e7d6      	b.n	801685e <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80168b0:	eba2 0209 	sub.w	r2, r2, r9
 80168b4:	6960      	ldr	r0, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80168b6:	eb01 0c09 	add.w	ip, r1, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80168ba:	4282      	cmp	r2, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80168bc:	eba6 060c 	sub.w	r6, r6, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80168c0:	bfa8      	it	ge
 80168c2:	4602      	movge	r2, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80168c4:	4296      	cmp	r6, r2
 80168c6:	bfa8      	it	ge
 80168c8:	4616      	movge	r6, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80168ca:	6862      	ldr	r2, [r4, #4]
 80168cc:	eba2 070c 	sub.w	r7, r2, ip
 80168d0:	42b7      	cmp	r7, r6
 80168d2:	bfa8      	it	ge
 80168d4:	4637      	movge	r7, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 80168d6:	2f00      	cmp	r7, #0
 80168d8:	ddad      	ble.n	8016836 <access_virt_sarray+0x82>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80168da:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 80168dc:	fb0b f707 	mul.w	r7, fp, r7
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80168e0:	9902      	ldr	r1, [sp, #8]
 80168e2:	4650      	mov	r0, sl
 80168e4:	9700      	str	r7, [sp, #0]
 80168e6:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80168ea:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80168ec:	9303      	str	r3, [sp, #12]
 80168ee:	47b0      	blx	r6
    file_offset += byte_count;
 80168f0:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80168f2:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80168f4:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80168f6:	4491      	add	r9, r2
 80168f8:	e798      	b.n	801682c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 80168fa:	42ae      	cmp	r6, r5
      if (writable)		/* writer skipped over a section of array */
 80168fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    if (ptr->first_undef_row < start_row) {
 80168fe:	d20b      	bcs.n	8016918 <access_virt_sarray+0x164>
      if (writable)		/* writer skipped over a section of array */
 8016900:	b1fb      	cbz	r3, 8016942 <access_virt_sarray+0x18e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016902:	f8da 3000 	ldr.w	r3, [sl]
 8016906:	2217      	movs	r2, #23
 8016908:	462e      	mov	r6, r5
 801690a:	4650      	mov	r0, sl
 801690c:	615a      	str	r2, [r3, #20]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	4798      	blx	r3
      ptr->first_undef_row = end_row;
 8016912:	f8c4 801c 	str.w	r8, [r4, #28]
 8016916:	e001      	b.n	801691c <access_virt_sarray+0x168>
    if (writable)
 8016918:	2b00      	cmp	r3, #0
 801691a:	d1fa      	bne.n	8016912 <access_virt_sarray+0x15e>
    if (ptr->pre_zero) {
 801691c:	6a22      	ldr	r2, [r4, #32]
 801691e:	b192      	cbz	r2, 8016946 <access_virt_sarray+0x192>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8016920:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8016922:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8016924:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 8016926:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 801692a:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801692c:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 801692e:	f4bf af63 	bcs.w	80167f8 <access_virt_sarray+0x44>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016932:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016936:	463a      	mov	r2, r7
 8016938:	2100      	movs	r1, #0
	undef_row++;
 801693a:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801693c:	f014 fc04 	bl	802b148 <memset>
	undef_row++;
 8016940:	e7f3      	b.n	801692a <access_virt_sarray+0x176>
 8016942:	462e      	mov	r6, r5
 8016944:	e7ea      	b.n	801691c <access_virt_sarray+0x168>
      if (! writable)		/* reader looking at undefined data */
 8016946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016948:	b14b      	cbz	r3, 801695e <access_virt_sarray+0x1aa>
    ptr->dirty = TRUE;
 801694a:	2301      	movs	r3, #1
 801694c:	6263      	str	r3, [r4, #36]	@ 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801694e:	69a3      	ldr	r3, [r4, #24]
 8016950:	6820      	ldr	r0, [r4, #0]
 8016952:	1aed      	subs	r5, r5, r3
}
 8016954:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8016958:	b005      	add	sp, #20
 801695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801695e:	f8da 3000 	ldr.w	r3, [sl]
 8016962:	2217      	movs	r2, #23
 8016964:	4650      	mov	r0, sl
 8016966:	615a      	str	r2, [r3, #20]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4798      	blx	r3
  if (writable)
 801696c:	e7ef      	b.n	801694e <access_virt_sarray+0x19a>
	...

08016970 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8016970:	2300      	movs	r3, #0
{
 8016972:	b570      	push	{r4, r5, r6, lr}
 8016974:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 8016976:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8016978:	f000 f85f 	bl	8016a3a <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 801697c:	2154      	movs	r1, #84	@ 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801697e:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8016980:	4628      	mov	r0, r5
 8016982:	f000 f847 	bl	8016a14 <jpeg_get_small>

  if (mem == NULL) {
 8016986:	4604      	mov	r4, r0
 8016988:	b948      	cbnz	r0, 801699e <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801698a:	4628      	mov	r0, r5
 801698c:	f000 f857 	bl	8016a3e <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8016990:	682b      	ldr	r3, [r5, #0]
 8016992:	2238      	movs	r2, #56	@ 0x38
 8016994:	4628      	mov	r0, r5
 8016996:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 801699e:	4b12      	ldr	r3, [pc, #72]	@ (80169e8 <jinit_memory_mgr+0x78>)
 80169a0:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 80169a2:	4b12      	ldr	r3, [pc, #72]	@ (80169ec <jinit_memory_mgr+0x7c>)
 80169a4:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80169a6:	4b12      	ldr	r3, [pc, #72]	@ (80169f0 <jinit_memory_mgr+0x80>)
 80169a8:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 80169aa:	4b12      	ldr	r3, [pc, #72]	@ (80169f4 <jinit_memory_mgr+0x84>)
 80169ac:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 80169ae:	4b12      	ldr	r3, [pc, #72]	@ (80169f8 <jinit_memory_mgr+0x88>)
 80169b0:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 80169b2:	4b12      	ldr	r3, [pc, #72]	@ (80169fc <jinit_memory_mgr+0x8c>)
 80169b4:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 80169b6:	4b12      	ldr	r3, [pc, #72]	@ (8016a00 <jinit_memory_mgr+0x90>)
 80169b8:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 80169ba:	4b12      	ldr	r3, [pc, #72]	@ (8016a04 <jinit_memory_mgr+0x94>)
 80169bc:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 80169be:	4b12      	ldr	r3, [pc, #72]	@ (8016a08 <jinit_memory_mgr+0x98>)
 80169c0:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80169c2:	4b12      	ldr	r3, [pc, #72]	@ (8016a0c <jinit_memory_mgr+0x9c>)
 80169c4:	6263      	str	r3, [r4, #36]	@ 0x24
  mem->pub.self_destruct = self_destruct;
 80169c6:	4b12      	ldr	r3, [pc, #72]	@ (8016a10 <jinit_memory_mgr+0xa0>)
 80169c8:	62a3      	str	r3, [r4, #40]	@ 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80169ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80169ce:	e9c4 630b 	strd	r6, r3, [r4, #44]	@ 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 80169d2:	2300      	movs	r3, #0
 80169d4:	63a3      	str	r3, [r4, #56]	@ 0x38
    mem->large_list[pool] = NULL;
 80169d6:	6423      	str	r3, [r4, #64]	@ 0x40
    mem->small_list[pool] = NULL;
 80169d8:	6363      	str	r3, [r4, #52]	@ 0x34
    mem->large_list[pool] = NULL;
 80169da:	63e3      	str	r3, [r4, #60]	@ 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 80169dc:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 80169e0:	2354      	movs	r3, #84	@ 0x54
 80169e2:	64e3      	str	r3, [r4, #76]	@ 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 80169e4:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 80169e6:	bd70      	pop	{r4, r5, r6, pc}
 80169e8:	08016221 	.word	0x08016221
 80169ec:	08016547 	.word	0x08016547
 80169f0:	08016625 	.word	0x08016625
 80169f4:	080165b5 	.word	0x080165b5
 80169f8:	08016337 	.word	0x08016337
 80169fc:	080162ed 	.word	0x080162ed
 8016a00:	08016695 	.word	0x08016695
 8016a04:	080167b5 	.word	0x080167b5
 8016a08:	0801644f 	.word	0x0801644f
 8016a0c:	08016381 	.word	0x08016381
 8016a10:	08016425 	.word	0x08016425

08016a14 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8016a14:	4608      	mov	r0, r1
 8016a16:	f7f2 ba29 	b.w	8008e6c <pvPortMalloc>

08016a1a <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 8016a1a:	4608      	mov	r0, r1
 8016a1c:	f7f2 babe 	b.w	8008f9c <vPortFree>

08016a20 <jpeg_get_large>:
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
 8016a20:	4608      	mov	r0, r1
 8016a22:	f7f2 ba23 	b.w	8008e6c <pvPortMalloc>

08016a26 <jpeg_free_large>:
{
  return (void FAR *) JMALLOC(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
 8016a26:	4608      	mov	r0, r1
 8016a28:	f7f2 bab8 	b.w	8008f9c <vPortFree>

08016a2c <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8016a2c:	4610      	mov	r0, r2
 8016a2e:	4770      	bx	lr

08016a30 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8016a30:	6803      	ldr	r3, [r0, #0]
 8016a32:	2233      	movs	r2, #51	@ 0x33
 8016a34:	615a      	str	r2, [r3, #20]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4718      	bx	r3

08016a3a <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	4770      	bx	lr

08016a3e <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8016a3e:	4770      	bx	lr

08016a40 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8016a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8016a44:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8016a48:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016a4a:	f8d0 51e0 	ldr.w	r5, [r0, #480]	@ 0x1e0
{
 8016a4e:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8016a50:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016a52:	f44f 78ff 	mov.w	r8, #510	@ 0x1fe
    cquantize->is_padded = FALSE;
 8016a56:	bf16      	itet	ne
 8016a58:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 8016a5a:	f44f 76ff 	moveq.w	r6, #510	@ 0x1fe
    pad = 0;
 8016a5e:	461e      	movne	r6, r3
 8016a60:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8016a62:	6843      	ldr	r3, [r0, #4]
 8016a64:	f506 7280 	add.w	r2, r6, #256	@ 0x100
 8016a68:	689f      	ldr	r7, [r3, #8]
 8016a6a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8016a6c:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8016a6e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8016a72:	f105 0e1c 	add.w	lr, r5, #28

  for (i = 0; i < cinfo->out_color_components; i++) {
 8016a76:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8016a78:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016a7a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	dc01      	bgt.n	8016a84 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8016a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016a84:	f85e 1f04 	ldr.w	r1, [lr, #4]!
      cquantize->colorindex[i] += MAXJSAMPLE;
 8016a88:	009f      	lsls	r7, r3, #2
 8016a8a:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8016a8c:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8016a90:	b126      	cbz	r6, 8016a9c <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8016a92:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016a96:	32ff      	adds	r2, #255	@ 0xff
 8016a98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8016a9c:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016aa0:	f101 0afe 	add.w	sl, r1, #254	@ 0xfe
    indexptr = cquantize->colorindex[i];
 8016aa4:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 8016aa6:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016aa8:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8016aac:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016aae:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8016ab2:	428f      	cmp	r7, r1
 8016ab4:	db0a      	blt.n	8016acc <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 8016ab6:	fb10 fb0c 	smulbb	fp, r0, ip
 8016aba:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8016abe:	3101      	adds	r1, #1
 8016ac0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8016ac4:	d1f5      	bne.n	8016ab2 <create_colorindex+0x72>
    if (pad)
 8016ac6:	b93e      	cbnz	r6, 8016ad8 <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016ac8:	3301      	adds	r3, #1
 8016aca:	e7d6      	b.n	8016a7a <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8016acc:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016ace:	fb08 a700 	mla	r7, r8, r0, sl
 8016ad2:	fb97 f7f9 	sdiv	r7, r7, r9
 8016ad6:	e7ec      	b.n	8016ab2 <create_colorindex+0x72>
 8016ad8:	4611      	mov	r1, r2
 8016ada:	f102 00ff 	add.w	r0, r2, #255	@ 0xff
 8016ade:	f1a2 07ff 	sub.w	r7, r2, #255	@ 0xff
	indexptr[-j] = indexptr[0];
 8016ae2:	f892 9000 	ldrb.w	r9, [r2]
 8016ae6:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8016aea:	428f      	cmp	r7, r1
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8016aec:	f892 90ff 	ldrb.w	r9, [r2, #255]	@ 0xff
 8016af0:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8016af4:	d1f5      	bne.n	8016ae2 <create_colorindex+0xa2>
 8016af6:	e7e7      	b.n	8016ac8 <create_colorindex+0x88>

08016af8 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8016af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8016afc:	f8d0 c078 	ldr.w	ip, [r0, #120]	@ 0x78
{
 8016b00:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8016b02:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 8016b06:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 8016b0a:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8016b0e:	6f03      	ldr	r3, [r0, #112]	@ 0x70

  for (row = 0; row < num_rows; row++) {
 8016b10:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8016b12:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016b14:	4540      	cmp	r0, r8
 8016b16:	db02      	blt.n	8016b1e <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8016b18:	b003      	add	sp, #12
 8016b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8016b1e:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8016b22:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8016b24:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8016b28:	eb04 0a03 	add.w	sl, r4, r3
 8016b2c:	4554      	cmp	r4, sl
 8016b2e:	d10f      	bne.n	8016b50 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8016b30:	3001      	adds	r0, #1
 8016b32:	e7ef      	b.n	8016b14 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8016b34:	f815 b003 	ldrb.w	fp, [r5, r3]
 8016b38:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8016b3c:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8016b3e:	f817 700b 	ldrb.w	r7, [r7, fp]
 8016b42:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8016b44:	4563      	cmp	r3, ip
 8016b46:	dbf5      	blt.n	8016b34 <color_quantize+0x3c>
 8016b48:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8016b4a:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8016b4e:	e7ed      	b.n	8016b2c <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8016b50:	2300      	movs	r3, #0
      pixcode = 0;
 8016b52:	461e      	mov	r6, r3
 8016b54:	e7f6      	b.n	8016b44 <color_quantize+0x4c>

08016b56 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8016b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8016b5a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	@ 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8016b5e:	f8d0 9070 	ldr.w	r9, [r0, #112]	@ 0x70

  for (row = 0; row < num_rows; row++) {
 8016b62:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8016b64:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8016b66:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016b6a:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8016b6e:	4298      	cmp	r0, r3
 8016b70:	db01      	blt.n	8016b76 <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8016b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8016b76:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8016b7a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8016b7e:	eb05 0a09 	add.w	sl, r5, r9
 8016b82:	4555      	cmp	r5, sl
 8016b84:	f104 0403 	add.w	r4, r4, #3
 8016b88:	d101      	bne.n	8016b8e <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8016b8a:	3001      	adds	r0, #1
 8016b8c:	e7ef      	b.n	8016b6e <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8016b8e:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8016b92:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8016b96:	f81c 6006 	ldrb.w	r6, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8016b9a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8016b9e:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8016ba0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8016ba4:	f818 6006 	ldrb.w	r6, [r8, r6]
 8016ba8:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8016baa:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8016bae:	e7e8      	b.n	8016b82 <color_quantize3+0x2c>

08016bb0 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8016bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bb4:	469a      	mov	sl, r3
 8016bb6:	b08b      	sub	sp, #44	@ 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016bb8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
{
 8016bbc:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8016bc0:	699a      	ldr	r2, [r3, #24]
 8016bc2:	6811      	ldr	r1, [r2, #0]
 8016bc4:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8016bc6:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016bc8:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8016bca:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8016bcc:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016bce:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8016bd0:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 8016bd2:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8016bd4:	4551      	cmp	r1, sl
 8016bd6:	db02      	blt.n	8016bde <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8016bd8:	b00b      	add	sp, #44	@ 0x2c
 8016bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8016bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    output_ptr = output_buf[row];
 8016be0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016be2:	9c07      	ldr	r4, [sp, #28]
 8016be4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 8016be8:	0190      	lsls	r0, r2, #6
 8016bea:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8016bee:	9002      	str	r0, [sp, #8]
 8016bf0:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8016bf4:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 8016bf6:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 8016bf8:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	@ 0x38
 8016bfc:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8016bfe:	9808      	ldr	r0, [sp, #32]
 8016c00:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8016c04:	4575      	cmp	r5, lr
 8016c06:	f100 0003 	add.w	r0, r0, #3
 8016c0a:	d106      	bne.n	8016c1a <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016c0c:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016c0e:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016c10:	3201      	adds	r2, #1
 8016c12:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 8016c16:	631a      	str	r2, [r3, #48]	@ 0x30
  for (row = 0; row < num_rows; row++) {
 8016c18:	e7dc      	b.n	8016bd4 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016c1a:	9e02      	ldr	r6, [sp, #8]
 8016c1c:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8016c20:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8016c24:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 8016c26:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016c28:	f858 7006 	ldr.w	r7, [r8, r6]
 8016c2c:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016c2e:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8016c30:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016c34:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016c38:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8016c3c:	f859 7006 	ldr.w	r7, [r9, r6]
 8016c40:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016c42:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016c44:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016c48:	5996      	ldr	r6, [r2, r6]
 8016c4a:	f810 cc01 	ldrb.w	ip, [r0, #-1]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016c4e:	445f      	add	r7, fp
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016c50:	9a06      	ldr	r2, [sp, #24]
 8016c52:	4494      	add	ip, r2
 8016c54:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8016c58:	443e      	add	r6, r7
      *output_ptr++ = (JSAMPLE) pixcode;
 8016c5a:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8016c5e:	e7d1      	b.n	8016c04 <quantize3_ord_dither+0x54>

08016c60 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016c60:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 8016c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016c64:	3202      	adds	r2, #2
 8016c66:	f8d0 61e0 	ldr.w	r6, [r0, #480]	@ 0x1e0
{
 8016c6a:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c6c:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016c6e:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c70:	3640      	adds	r6, #64	@ 0x40
 8016c72:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016c74:	42bb      	cmp	r3, r7
 8016c76:	dc00      	bgt.n	8016c7a <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8016c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8016c7a:	6863      	ldr	r3, [r4, #4]
 8016c7c:	462a      	mov	r2, r5
 8016c7e:	2101      	movs	r1, #1
 8016c80:	4620      	mov	r0, r4
 8016c82:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c84:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8016c86:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8016c88:	f846 0f04 	str.w	r0, [r6, #4]!
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c8c:	e7f1      	b.n	8016c72 <alloc_fs_workspace+0x12>

08016c8e <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8016c8e:	4770      	bx	lr

08016c90 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8016c90:	6803      	ldr	r3, [r0, #0]
 8016c92:	222f      	movs	r2, #47	@ 0x2f
 8016c94:	615a      	str	r2, [r3, #20]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	4718      	bx	r3
	...

08016c9c <start_pass_1_quant>:
{
 8016c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016ca0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	@ 0x1e0
{
 8016ca4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8016ca6:	692b      	ldr	r3, [r5, #16]
 8016ca8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8016cac:	696b      	ldr	r3, [r5, #20]
 8016cae:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  switch (cinfo->dither_mode) {
 8016cb2:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8016cb6:	2b01      	cmp	r3, #1
 8016cb8:	d00b      	beq.n	8016cd2 <start_pass_1_quant+0x36>
 8016cba:	2b02      	cmp	r3, #2
 8016cbc:	d05e      	beq.n	8016d7c <start_pass_1_quant+0xe0>
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d174      	bne.n	8016dac <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8016cc2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8016cc4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8016cc6:	bf0c      	ite	eq
 8016cc8:	4b3c      	ldreq	r3, [pc, #240]	@ (8016dbc <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 8016cca:	4b3d      	ldrne	r3, [pc, #244]	@ (8016dc0 <start_pass_1_quant+0x124>)
 8016ccc:	606b      	str	r3, [r5, #4]
}
 8016cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8016cd2:	6f81      	ldr	r1, [r0, #120]	@ 0x78
      cquantize->pub.color_quantize = quantize3_ord_dither;
 8016cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8016dc4 <start_pass_1_quant+0x128>)
 8016cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8016dc8 <start_pass_1_quant+0x12c>)
 8016cd8:	2903      	cmp	r1, #3
 8016cda:	bf08      	it	eq
 8016cdc:	4613      	moveq	r3, r2
 8016cde:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	632b      	str	r3, [r5, #48]	@ 0x30
    if (! cquantize->is_padded)
 8016ce4:	69eb      	ldr	r3, [r5, #28]
 8016ce6:	b90b      	cbnz	r3, 8016cec <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8016ce8:	f7ff feaa 	bl	8016a40 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8016cec:	6b6d      	ldr	r5, [r5, #52]	@ 0x34
 8016cee:	2d00      	cmp	r5, #0
 8016cf0:	d1ed      	bne.n	8016cce <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016cf2:	f8d4 71e0 	ldr.w	r7, [r4, #480]	@ 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016cf6:	f107 081c 	add.w	r8, r7, #28
 8016cfa:	4646      	mov	r6, r8
 8016cfc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016cfe:	429d      	cmp	r5, r3
 8016d00:	dae5      	bge.n	8016cce <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016d02:	f856 9f04 	ldr.w	r9, [r6, #4]!
    for (j = 0; j < i; j++) {
 8016d06:	4642      	mov	r2, r8
 8016d08:	2300      	movs	r3, #0
 8016d0a:	429d      	cmp	r5, r3
 8016d0c:	d007      	beq.n	8016d1e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 8016d0e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8016d12:	4589      	cmp	r9, r1
 8016d14:	d130      	bne.n	8016d78 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8016d16:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016d1a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    if (odither == NULL)	/* need a new table? */
 8016d1c:	bb48      	cbnz	r0, 8016d72 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016d1e:	6863      	ldr	r3, [r4, #4]
 8016d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016d24:	2101      	movs	r1, #1
 8016d26:	4620      	mov	r0, r4
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8016d2c:	f109 32ff 	add.w	r2, r9, #4294967295
 8016d30:	f100 013c 	add.w	r1, r0, #60	@ 0x3c
 8016d34:	f8df c098 	ldr.w	ip, [pc, #152]	@ 8016dd0 <start_pass_1_quant+0x134>
 8016d38:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 8016d3a:	f200 4a3c 	addw	sl, r0, #1084	@ 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 8016d3e:	f1a1 0e40 	sub.w	lr, r1, #64	@ 0x40
    for (j = 0; j < i; j++) {
 8016d42:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8016d44:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016d48:	005b      	lsls	r3, r3, #1
 8016d4a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8016d4e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8016d52:	bf45      	ittet	mi
 8016d54:	425b      	negmi	r3, r3
 8016d56:	fb93 f3f2 	sdivmi	r3, r3, r2
 8016d5a:	fb93 f3f2 	sdivpl	r3, r3, r2
 8016d5e:	425b      	negmi	r3, r3
 8016d60:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8016d64:	458e      	cmp	lr, r1
 8016d66:	d1ed      	bne.n	8016d44 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8016d68:	3140      	adds	r1, #64	@ 0x40
 8016d6a:	f10c 0c10 	add.w	ip, ip, #16
 8016d6e:	4551      	cmp	r1, sl
 8016d70:	d1e5      	bne.n	8016d3e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016d72:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8016d74:	6170      	str	r0, [r6, #20]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016d76:	e7c1      	b.n	8016cfc <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8016d78:	3301      	adds	r3, #1
 8016d7a:	e7c6      	b.n	8016d0a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8016d7c:	4b13      	ldr	r3, [pc, #76]	@ (8016dcc <start_pass_1_quant+0x130>)
 8016d7e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8016d80:	2300      	movs	r3, #0
 8016d82:	656b      	str	r3, [r5, #84]	@ 0x54
    if (cquantize->fserrors[0] == NULL)
 8016d84:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8016d86:	b90b      	cbnz	r3, 8016d8c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8016d88:	f7ff ff6a 	bl	8016c60 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016d8c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016d8e:	3540      	adds	r5, #64	@ 0x40
    for (i = 0; i < cinfo->out_color_components; i++)
 8016d90:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016d92:	3202      	adds	r2, #2
 8016d94:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8016d96:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016d98:	42bb      	cmp	r3, r7
 8016d9a:	dd98      	ble.n	8016cce <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8016d9c:	4632      	mov	r2, r6
 8016d9e:	2100      	movs	r1, #0
 8016da0:	f855 0f04 	ldr.w	r0, [r5, #4]!
    for (i = 0; i < cinfo->out_color_components; i++)
 8016da4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8016da6:	f014 f9cf 	bl	802b148 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8016daa:	e7f4      	b.n	8016d96 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8016dac:	6803      	ldr	r3, [r0, #0]
 8016dae:	2231      	movs	r2, #49	@ 0x31
}
 8016db0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8016db4:	615a      	str	r2, [r3, #20]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	4718      	bx	r3
 8016dba:	bf00      	nop
 8016dbc:	08016b57 	.word	0x08016b57
 8016dc0:	08016af9 	.word	0x08016af9
 8016dc4:	08016f0d 	.word	0x08016f0d
 8016dc8:	08016bb1 	.word	0x08016bb1
 8016dcc:	08016dd5 	.word	0x08016dd5
 8016dd0:	0802ff98 	.word	0x0802ff98

08016dd4 <quantize_fs_dither>:
{
 8016dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd8:	b091      	sub	sp, #68	@ 0x44
  JDIMENSION width = cinfo->output_width;
 8016dda:	6f05      	ldr	r5, [r0, #112]	@ 0x70
  int nc = cinfo->out_color_components;
 8016ddc:	f8d0 9078 	ldr.w	r9, [r0, #120]	@ 0x78
 8016de0:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016de4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	@ 0x1e0
{
 8016de8:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016dec:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8016df0:	930a      	str	r3, [sp, #40]	@ 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8016df2:	1e6b      	subs	r3, r5, #1
 8016df4:	9305      	str	r3, [sp, #20]
 8016df6:	fb03 f309 	mul.w	r3, r3, r9
 8016dfa:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016dfc:	1c6b      	adds	r3, r5, #1
 8016dfe:	005b      	lsls	r3, r3, #1
 8016e00:	9309      	str	r3, [sp, #36]	@ 0x24
  for (row = 0; row < num_rows; row++) {
 8016e02:	2300      	movs	r3, #0
 8016e04:	9300      	str	r3, [sp, #0]
 8016e06:	9a00      	ldr	r2, [sp, #0]
 8016e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	db02      	blt.n	8016e14 <quantize_fs_dither+0x40>
}
 8016e0e:	b011      	add	sp, #68	@ 0x44
 8016e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016e14:	2100      	movs	r1, #0
 8016e16:	462a      	mov	r2, r5
 8016e18:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8016e1c:	f014 f994 	bl	802b148 <memset>
    for (ci = 0; ci < nc; ci++) {
 8016e20:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8016e24:	2100      	movs	r1, #0
 8016e26:	9304      	str	r3, [sp, #16]
	dirnc = -nc;
 8016e28:	f1c9 0300 	rsb	r3, r9, #0
 8016e2c:	930f      	str	r3, [sp, #60]	@ 0x3c
    for (ci = 0; ci < nc; ci++) {
 8016e2e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8016e30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    for (ci = 0; ci < nc; ci++) {
 8016e32:	db06      	blt.n	8016e42 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016e34:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8016e38:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016e3a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 8016e3c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016e3e:	6562      	str	r2, [r4, #84]	@ 0x54
  for (row = 0; row < num_rows; row++) {
 8016e40:	e7e0      	b.n	8016e04 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8016e42:	9800      	ldr	r0, [sp, #0]
 8016e44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 8016e4a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 8016e4e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016e52:	9b04      	ldr	r3, [sp, #16]
 8016e54:	f853 cf04 	ldr.w	ip, [r3, #4]!
 8016e58:	9304      	str	r3, [sp, #16]
      if (cquantize->on_odd_row) {
 8016e5a:	b312      	cbz	r2, 8016ea2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8016e5c:	9b08      	ldr	r3, [sp, #32]
 8016e5e:	449e      	add	lr, r3
	output_ptr += width-1;
 8016e60:	9b05      	ldr	r3, [sp, #20]
 8016e62:	4418      	add	r0, r3
	dirnc = -nc;
 8016e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e66:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e6a:	449c      	add	ip, r3
	dir = -1;
 8016e6c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8016e70:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8016e72:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8016e74:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8016e76:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8016e78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8016e7e:	6923      	ldr	r3, [r4, #16]
 8016e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e84:	930c      	str	r3, [sp, #48]	@ 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016e86:	9b02      	ldr	r3, [sp, #8]
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8016e8c:	2300      	movs	r3, #0
      cur = 0;
 8016e8e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8016e90:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8016e92:	9a03      	ldr	r2, [sp, #12]
 8016e94:	b94a      	cbnz	r2, 8016eaa <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8016e96:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8016e98:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8016e9a:	436a      	muls	r2, r5
 8016e9c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8016ea0:	e7c5      	b.n	8016e2e <quantize_fs_dither+0x5a>
	dir = 1;
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	f8cd 901c 	str.w	r9, [sp, #28]
 8016ea8:	e7e2      	b.n	8016e70 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016eaa:	9a01      	ldr	r2, [sp, #4]
 8016eac:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8016eb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016eb2:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8016eb4:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016eb8:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8016ebc:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016ec0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8016ec2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8016ec6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016eca:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8016ece:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016ed0:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016ed2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8016ed4:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016ed8:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016edc:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016ede:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016ee2:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8016ee4:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8016ee6:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8016eea:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8016eec:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016eee:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8016ef0:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016ef4:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016ef6:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8016ef8:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8016efa:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8016efc:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8016efe:	4443      	add	r3, r8
	belowerr = bnexterr;
 8016f00:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8016f04:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016f08:	4417      	add	r7, r2
 8016f0a:	e7c2      	b.n	8016e92 <quantize_fs_dither+0xbe>

08016f0c <quantize_ord_dither>:
{
 8016f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f10:	b089      	sub	sp, #36	@ 0x24
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016f12:	f8d0 61e0 	ldr.w	r6, [r0, #480]	@ 0x1e0
  int nc = cinfo->out_color_components;
 8016f16:	f8d0 8078 	ldr.w	r8, [r0, #120]	@ 0x78
  JDIMENSION width = cinfo->output_width;
 8016f1a:	1f14      	subs	r4, r2, #4
  for (row = 0; row < num_rows; row++) {
 8016f1c:	2500      	movs	r5, #0
{
 8016f1e:	e9cd 1306 	strd	r1, r3, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8016f22:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8016f24:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016f26:	9b07      	ldr	r3, [sp, #28]
 8016f28:	429d      	cmp	r5, r3
 8016f2a:	db02      	blt.n	8016f32 <quantize_ord_dither+0x26>
}
 8016f2c:	b009      	add	sp, #36	@ 0x24
 8016f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016f32:	9a01      	ldr	r2, [sp, #4]
 8016f34:	2100      	movs	r1, #0
 8016f36:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8016f3a:	f014 f905 	bl	802b148 <memset>
    row_index = cquantize->row_index;
 8016f3e:	46b4      	mov	ip, r6
 8016f40:	f85c 3f30 	ldr.w	r3, [ip, #48]!
      dither = cquantize->odither[ci][row_index];
 8016f44:	019a      	lsls	r2, r3, #6
 8016f46:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8016f48:	2200      	movs	r2, #0
 8016f4a:	4542      	cmp	r2, r8
 8016f4c:	db05      	blt.n	8016f5a <quantize_ord_dither+0x4e>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016f4e:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8016f50:	3501      	adds	r5, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016f52:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8016f56:	6333      	str	r3, [r6, #48]	@ 0x30
  for (row = 0; row < num_rows; row++) {
 8016f58:	e7e5      	b.n	8016f26 <quantize_ord_dither+0x1a>
      input_ptr = input_buf[row] + ci;
 8016f5a:	9906      	ldr	r1, [sp, #24]
 8016f5c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8016f60:	69b1      	ldr	r1, [r6, #24]
      input_ptr = input_buf[row] + ci;
 8016f62:	eb00 0e02 	add.w	lr, r0, r2
      colorindex_ci = cquantize->colorindex[ci];
 8016f66:	6820      	ldr	r0, [r4, #0]
 8016f68:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016f6c:	9104      	str	r1, [sp, #16]
      dither = cquantize->odither[ci][row_index];
 8016f6e:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 8016f72:	9102      	str	r1, [sp, #8]
      for (col = width; col > 0; col--) {
 8016f74:	9901      	ldr	r1, [sp, #4]
 8016f76:	4401      	add	r1, r0
 8016f78:	9105      	str	r1, [sp, #20]
      col_index = 0;
 8016f7a:	2100      	movs	r1, #0
      for (col = width; col > 0; col--) {
 8016f7c:	9f05      	ldr	r7, [sp, #20]
 8016f7e:	42b8      	cmp	r0, r7
 8016f80:	d101      	bne.n	8016f86 <quantize_ord_dither+0x7a>
    for (ci = 0; ci < nc; ci++) {
 8016f82:	3201      	adds	r2, #1
 8016f84:	e7e1      	b.n	8016f4a <quantize_ord_dither+0x3e>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016f86:	9f02      	ldr	r7, [sp, #8]
 8016f88:	f89e a000 	ldrb.w	sl, [lr]
	input_ptr += nc;
 8016f8c:	44c6      	add	lr, r8
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016f8e:	eb07 0b81 	add.w	fp, r7, r1, lsl #2
 8016f92:	9f03      	ldr	r7, [sp, #12]
 8016f94:	f890 9000 	ldrb.w	r9, [r0]
	col_index = (col_index + 1) & ODITHER_MASK;
 8016f98:	3101      	adds	r1, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016f9a:	f85b b007 	ldr.w	fp, [fp, r7]
 8016f9e:	9f04      	ldr	r7, [sp, #16]
	col_index = (col_index + 1) & ODITHER_MASK;
 8016fa0:	f001 010f 	and.w	r1, r1, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016fa4:	44ba      	add	sl, r7
 8016fa6:	f81a a00b 	ldrb.w	sl, [sl, fp]
 8016faa:	44d1      	add	r9, sl
 8016fac:	f800 9b01 	strb.w	r9, [r0], #1
      for (col = width; col > 0; col--) {
 8016fb0:	e7e4      	b.n	8016f7c <quantize_ord_dither+0x70>
	...

08016fb4 <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016fb4:	6843      	ldr	r3, [r0, #4]
 8016fb6:	2258      	movs	r2, #88	@ 0x58
 8016fb8:	2101      	movs	r1, #1
 8016fba:	681b      	ldr	r3, [r3, #0]
{
 8016fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc0:	b085      	sub	sp, #20
 8016fc2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016fc4:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8016fc6:	4b68      	ldr	r3, [pc, #416]	@ (8017168 <jinit_1pass_quantizer+0x1b4>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016fc8:	f8c4 01e0 	str.w	r0, [r4, #480]	@ 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8016fcc:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8016fce:	4b67      	ldr	r3, [pc, #412]	@ (801716c <jinit_1pass_quantizer+0x1b8>)
 8016fd0:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8016fd2:	4b67      	ldr	r3, [pc, #412]	@ (8017170 <jinit_1pass_quantizer+0x1bc>)
 8016fd4:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	6443      	str	r3, [r0, #68]	@ 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8016fda:	6343      	str	r3, [r0, #52]	@ 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8016fdc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016fde:	2b04      	cmp	r3, #4
 8016fe0:	dd07      	ble.n	8016ff2 <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8016fe2:	6823      	ldr	r3, [r4, #0]
 8016fe4:	2039      	movs	r0, #57	@ 0x39
 8016fe6:	2204      	movs	r2, #4
 8016fe8:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	4620      	mov	r0, r4
 8016ff0:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8016ff2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8016ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016ff8:	dd08      	ble.n	801700c <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8016ffa:	6823      	ldr	r3, [r4, #0]
 8016ffc:	213b      	movs	r1, #59	@ 0x3b
 8016ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017002:	4620      	mov	r0, r4
 8017004:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801700c:	f8d4 61e0 	ldr.w	r6, [r4, #480]	@ 0x1e0
  iroot = 1;
 8017010:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8017012:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8017016:	f106 0920 	add.w	r9, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 801701a:	f8d4 a060 	ldr.w	sl, [r4, #96]	@ 0x60
    iroot++;
 801701e:	469b      	mov	fp, r3
 8017020:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8017022:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8017024:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8017026:	4588      	cmp	r8, r1
 8017028:	dc49      	bgt.n	80170be <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 801702a:	4592      	cmp	sl, r2
 801702c:	daf7      	bge.n	801701e <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 801702e:	f1bb 0f01 	cmp.w	fp, #1
 8017032:	d106      	bne.n	8017042 <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	213a      	movs	r1, #58	@ 0x3a
 8017038:	4620      	mov	r0, r4
 801703a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	4798      	blx	r3
 8017042:	f106 071c 	add.w	r7, r6, #28
    for (i = 1; i < nc; i++)
 8017046:	2300      	movs	r3, #0
 8017048:	2501      	movs	r5, #1
 801704a:	463a      	mov	r2, r7
  for (i = 0; i < nc; i++) {
 801704c:	4598      	cmp	r8, r3
 801704e:	dc39      	bgt.n	80170c4 <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8017050:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8017174 <jinit_1pass_quantizer+0x1c0>
    changed = FALSE;
 8017054:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8017056:	460b      	mov	r3, r1
 8017058:	4598      	cmp	r8, r3
 801705a:	dc39      	bgt.n	80170d0 <jinit_1pass_quantizer+0x11c>
  } while (changed);
 801705c:	2900      	cmp	r1, #0
 801705e:	d1f9      	bne.n	8017054 <jinit_1pass_quantizer+0xa0>
  if (cinfo->out_color_components == 3)
 8017060:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8017062:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8017064:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8017066:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8017068:	d149      	bne.n	80170fe <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801706a:	619d      	str	r5, [r3, #24]
 801706c:	6a31      	ldr	r1, [r6, #32]
 801706e:	61d9      	str	r1, [r3, #28]
 8017070:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8017072:	6219      	str	r1, [r3, #32]
 8017074:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8017076:	6259      	str	r1, [r3, #36]	@ 0x24
 8017078:	2160      	movs	r1, #96	@ 0x60
 801707a:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 801707c:	2101      	movs	r1, #1
 801707e:	4620      	mov	r0, r4
 8017080:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8017082:	6863      	ldr	r3, [r4, #4]
 8017084:	462a      	mov	r2, r5
 8017086:	2101      	movs	r1, #1
 8017088:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801708c:	4620      	mov	r0, r4
 801708e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017090:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017092:	46a8      	mov	r8, r5
 8017094:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8017096:	9001      	str	r0, [sp, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017098:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801709a:	429a      	cmp	r2, r3
 801709c:	db33      	blt.n	8017106 <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 801709e:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 80170a0:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 80170a2:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 80170a6:	f7ff fccb 	bl	8016a40 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 80170aa:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80170ae:	2b02      	cmp	r3, #2
 80170b0:	d156      	bne.n	8017160 <jinit_1pass_quantizer+0x1ac>
    alloc_fs_workspace(cinfo);
 80170b2:	4620      	mov	r0, r4
}
 80170b4:	b005      	add	sp, #20
 80170b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 80170ba:	f7ff bdd1 	b.w	8016c60 <alloc_fs_workspace>
      temp *= iroot;
 80170be:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 80170c0:	3101      	adds	r1, #1
 80170c2:	e7b0      	b.n	8017026 <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 80170c4:	fb0b f505 	mul.w	r5, fp, r5
  for (i = 0; i < nc; i++) {
 80170c8:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 80170ca:	f842 bf04 	str.w	fp, [r2, #4]!
  for (i = 0; i < nc; i++) {
 80170ce:	e7bd      	b.n	801704c <jinit_1pass_quantizer+0x98>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80170d0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 80170d4:	2a02      	cmp	r2, #2
 80170d6:	bf0c      	ite	eq
 80170d8:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 80170dc:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 80170de:	f859 b020 	ldr.w	fp, [r9, r0, lsl #2]
 80170e2:	fb95 f2fb 	sdiv	r2, r5, fp
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 80170e6:	fb0b 2202 	mla	r2, fp, r2, r2
 80170ea:	f10b 0e01 	add.w	lr, fp, #1
      if (temp > (long) max_colors)
 80170ee:	4592      	cmp	sl, r2
 80170f0:	dbb4      	blt.n	801705c <jinit_1pass_quantizer+0xa8>
    for (i = 0; i < nc; i++) {
 80170f2:	3301      	adds	r3, #1
 80170f4:	4615      	mov	r5, r2
      changed = TRUE;
 80170f6:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 80170f8:	f849 e020 	str.w	lr, [r9, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 80170fc:	e7ac      	b.n	8017058 <jinit_1pass_quantizer+0xa4>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 80170fe:	2161      	movs	r1, #97	@ 0x61
 8017100:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8017104:	e7ba      	b.n	801707c <jinit_1pass_quantizer+0xc8>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8017106:	f857 af04 	ldr.w	sl, [r7, #4]!
      val = output_value(cinfo, i, j, nci-1);
 801710a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801710e:	9302      	str	r3, [sp, #8]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8017110:	105b      	asrs	r3, r3, #1
    blksize = blkdist / nci;
 8017112:	fb98 f9fa 	sdiv	r9, r8, sl
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8017116:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8017118:	2300      	movs	r3, #0
 801711a:	469b      	mov	fp, r3
 801711c:	459a      	cmp	sl, r3
 801711e:	dc02      	bgt.n	8017126 <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017120:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8017122:	46c8      	mov	r8, r9
 8017124:	e7b8      	b.n	8017098 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8017126:	9803      	ldr	r0, [sp, #12]
 8017128:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801712c:	46dc      	mov	ip, fp
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801712e:	4401      	add	r1, r0
 8017130:	9802      	ldr	r0, [sp, #8]
 8017132:	fb91 f1f0 	sdiv	r1, r1, r0
 8017136:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8017138:	45ac      	cmp	ip, r5
 801713a:	db0e      	blt.n	801715a <jinit_1pass_quantizer+0x1a6>
    for (j = 0; j < nci; j++) {
 801713c:	3301      	adds	r3, #1
 801713e:	44cb      	add	fp, r9
 8017140:	e7ec      	b.n	801711c <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8017142:	9901      	ldr	r1, [sp, #4]
 8017144:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017148:	4471      	add	r1, lr
	for (k = 0; k < blksize; k++)
 801714a:	f10e 0e01 	add.w	lr, lr, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 801714e:	f801 000c 	strb.w	r0, [r1, ip]
	for (k = 0; k < blksize; k++)
 8017152:	45f1      	cmp	r9, lr
 8017154:	dcf5      	bgt.n	8017142 <jinit_1pass_quantizer+0x18e>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8017156:	44c4      	add	ip, r8
 8017158:	e7ee      	b.n	8017138 <jinit_1pass_quantizer+0x184>
	for (k = 0; k < blksize; k++)
 801715a:	f04f 0e00 	mov.w	lr, #0
 801715e:	e7f8      	b.n	8017152 <jinit_1pass_quantizer+0x19e>
}
 8017160:	b005      	add	sp, #20
 8017162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017166:	bf00      	nop
 8017168:	08016c9d 	.word	0x08016c9d
 801716c:	08016c8f 	.word	0x08016c8f
 8017170:	08016c91 	.word	0x08016c91
 8017174:	0802ff8c 	.word	0x0802ff8c

08017178 <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8017178:	f8d0 21e0 	ldr.w	r2, [r0, #480]	@ 0x1e0
{
 801717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register hist3d histogram = cquantize->histogram;
 8017180:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8017184:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8017186:	f8d0 e070 	ldr.w	lr, [r0, #112]	@ 0x70
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
 801718a:	f64f 78ff 	movw	r8, #65535	@ 0xffff
  for (row = 0; row < num_rows; row++) {
 801718e:	429c      	cmp	r4, r3
 8017190:	db01      	blt.n	8017196 <prescan_quantize+0x1e>
      ptr += 3;
    }
  }
}
 8017192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (col = width; col > 0; col--) {
 8017196:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 801719a:	4677      	mov	r7, lr
 801719c:	3003      	adds	r0, #3
 801719e:	b90f      	cbnz	r7, 80171a4 <prescan_quantize+0x2c>
  for (row = 0; row < num_rows; row++) {
 80171a0:	3401      	adds	r4, #1
 80171a2:	e7f4      	b.n	801718e <prescan_quantize+0x16>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80171a4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
    for (col = width; col > 0; col--) {
 80171a8:	3f01      	subs	r7, #1
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80171aa:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 80171ae:	3003      	adds	r0, #3
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80171b0:	08ed      	lsrs	r5, r5, #3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80171b2:	f810 6c04 	ldrb.w	r6, [r0, #-4]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80171b6:	0892      	lsrs	r2, r2, #2
 80171b8:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80171bc:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80171be:	eb05 1582 	add.w	r5, r5, r2, lsl #6
      if (++(*histp) <= 0)
 80171c2:	f835 2016 	ldrh.w	r2, [r5, r6, lsl #1]
 80171c6:	3201      	adds	r2, #1
 80171c8:	b292      	uxth	r2, r2
	(*histp)--;
 80171ca:	2a00      	cmp	r2, #0
 80171cc:	bf08      	it	eq
 80171ce:	4642      	moveq	r2, r8
 80171d0:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 80171d4:	e7e3      	b.n	801719e <prescan_quantize+0x26>

080171d6 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 80171d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171da:	f2ad 5dcc 	subw	sp, sp, #1484	@ 0x5cc
 80171de:	4680      	mov	r8, r0
  for (i = 0; i < numcolors; i++) {
 80171e0:	2500      	movs	r5, #0
{
 80171e2:	930b      	str	r3, [sp, #44]	@ 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 80171e4:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 80171e8:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 80171ea:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80171ec:	0140      	lsls	r0, r0, #5
{
 80171ee:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  c0 >>= BOX_C0_LOG;
 80171f2:	1089      	asrs	r1, r1, #2
  hist3d histogram = cquantize->histogram;
 80171f4:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 80171f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80171f8:	f100 0a02 	add.w	sl, r0, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 80171fc:	0149      	lsls	r1, r1, #5
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 80171fe:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8017200:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8017202:	f8d8 3084 	ldr.w	r3, [r8, #132]	@ 0x84
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8017206:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 801720a:	311c      	adds	r1, #28
  int numcolors = cinfo->actual_number_of_colors;
 801720c:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 801720e:	0164      	lsls	r4, r4, #5
  centerc0 = (minc0 + maxc0) >> 1;
 8017210:	eb09 0301 	add.w	r3, r9, r1
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8017214:	f104 0b04 	add.w	fp, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8017218:	341c      	adds	r4, #28
  centerc0 = (minc0 + maxc0) >> 1;
 801721a:	105b      	asrs	r3, r3, #1
 801721c:	9303      	str	r3, [sp, #12]
  centerc1 = (minc1 + maxc1) >> 1;
 801721e:	eb0a 0300 	add.w	r3, sl, r0
 8017222:	105b      	asrs	r3, r3, #1
 8017224:	9304      	str	r3, [sp, #16]
  centerc2 = (minc2 + maxc2) >> 1;
 8017226:	eb0b 0304 	add.w	r3, fp, r4
 801722a:	105b      	asrs	r3, r3, #1
 801722c:	9305      	str	r3, [sp, #20]
  minmaxdist = 0x7FFFFFFFL;
 801722e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017232:	9301      	str	r3, [sp, #4]
  for (i = 0; i < numcolors; i++) {
 8017234:	9b02      	ldr	r3, [sp, #8]
 8017236:	42ab      	cmp	r3, r5
 8017238:	dc42      	bgt.n	80172c0 <fill_inverse_cmap+0xea>
  ncolors = 0;
 801723a:	2200      	movs	r2, #0
 801723c:	a972      	add	r1, sp, #456	@ 0x1c8
      colorlist[ncolors++] = (JSAMPLE) i;
 801723e:	a832      	add	r0, sp, #200	@ 0xc8
  for (i = 0; i < numcolors; i++) {
 8017240:	4613      	mov	r3, r2
 8017242:	9c02      	ldr	r4, [sp, #8]
 8017244:	429c      	cmp	r4, r3
 8017246:	f300 809c 	bgt.w	8017382 <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801724a:	2380      	movs	r3, #128	@ 0x80
  bptr = bestdist;
 801724c:	a972      	add	r1, sp, #456	@ 0x1c8
    *bptr++ = 0x7FFFFFFFL;
 801724e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8017252:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8017254:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8017258:	d1fb      	bne.n	8017252 <fill_inverse_cmap+0x7c>
 801725a:	a932      	add	r1, sp, #200	@ 0xc8
 801725c:	9108      	str	r1, [sp, #32]
  for (i = 0; i < numcolors; i++) {
 801725e:	9302      	str	r3, [sp, #8]
 8017260:	9b02      	ldr	r3, [sp, #8]
 8017262:	4293      	cmp	r3, r2
 8017264:	f040 8096 	bne.w	8017394 <fill_inverse_cmap+0x1be>
  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8017268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 801726a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 801726c:	f023 0003 	bic.w	r0, r3, #3
 8017270:	9b06      	ldr	r3, [sp, #24]
  c2 <<= BOX_C2_LOG;
 8017272:	f022 0203 	bic.w	r2, r2, #3
 8017276:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  c1 <<= BOX_C1_LOG;
 801727a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801727c:	0052      	lsls	r2, r2, #1
 801727e:	f023 0307 	bic.w	r3, r3, #7
 8017282:	4620      	mov	r0, r4
 8017284:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8017288:	3010      	adds	r0, #16
  cptr = bestcolor;
 801728a:	ab12      	add	r3, sp, #72	@ 0x48
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 801728c:	f854 1b04 	ldr.w	r1, [r4], #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017290:	f103 0c20 	add.w	ip, r3, #32
 8017294:	4411      	add	r1, r2
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8017296:	460d      	mov	r5, r1
 8017298:	461f      	mov	r7, r3
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 801729a:	f101 0e08 	add.w	lr, r1, #8
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 801729e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80172a2:	3601      	adds	r6, #1
 80172a4:	f825 6b02 	strh.w	r6, [r5], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80172a8:	4575      	cmp	r5, lr
 80172aa:	d1f8      	bne.n	801729e <fill_inverse_cmap+0xc8>
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80172ac:	3304      	adds	r3, #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80172ae:	3140      	adds	r1, #64	@ 0x40
 80172b0:	4563      	cmp	r3, ip
 80172b2:	d1f0      	bne.n	8017296 <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80172b4:	42a0      	cmp	r0, r4
 80172b6:	d1e9      	bne.n	801728c <fill_inverse_cmap+0xb6>
      }
    }
  }
}
 80172b8:	f20d 5dcc 	addw	sp, sp, #1484	@ 0x5cc
 80172bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 80172c0:	f8d8 7088 	ldr.w	r7, [r8, #136]	@ 0x88
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 80172c8:	4591      	cmp	r9, r2
 80172ca:	dd2b      	ble.n	8017324 <fill_inverse_cmap+0x14e>
      tdist = (x - minc0) * C0_SCALE;
 80172cc:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 80172d0:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 80172d2:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 80172d6:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 80172dc:	459a      	cmp	sl, r3
 80172de:	dd34      	ble.n	801734a <fill_inverse_cmap+0x174>
      tdist = (x - minc1) * C1_SCALE;
 80172e0:	eba3 0e0a 	sub.w	lr, r3, sl
 80172e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 80172e8:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 80172ec:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 80172ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 80172f2:	fb03 2303 	mla	r3, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 80172f6:	68ba      	ldr	r2, [r7, #8]
 80172f8:	5d52      	ldrb	r2, [r2, r5]
    if (x < minc2) {
 80172fa:	4593      	cmp	fp, r2
 80172fc:	dd34      	ble.n	8017368 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 80172fe:	eba2 070b 	sub.w	r7, r2, fp
 8017302:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8017304:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8017308:	1b12      	subs	r2, r2, r4
	tdist = (x - minc2) * C2_SCALE;
 801730a:	0052      	lsls	r2, r2, #1
	max_dist += tdist*tdist;
 801730c:	fb02 3302 	mla	r3, r2, r2, r3
    mindist[i] = min_dist;	/* save away the results */
 8017310:	aa72      	add	r2, sp, #456	@ 0x1c8
 8017312:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8017316:	3501      	adds	r5, #1
 8017318:	9a01      	ldr	r2, [sp, #4]
 801731a:	429a      	cmp	r2, r3
 801731c:	bfa8      	it	ge
 801731e:	461a      	movge	r2, r3
 8017320:	9201      	str	r2, [sp, #4]
 8017322:	e787      	b.n	8017234 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8017324:	4291      	cmp	r1, r2
 8017326:	da06      	bge.n	8017336 <fill_inverse_cmap+0x160>
      tdist = (x - maxc0) * C0_SCALE;
 8017328:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 801732c:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8017330:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8017334:	e7cf      	b.n	80172d6 <fill_inverse_cmap+0x100>
      if (x <= centerc0) {
 8017336:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 8017338:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 801733c:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 801733e:	bfac      	ite	ge
 8017340:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8017342:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8017346:	4352      	muls	r2, r2
 8017348:	e7c6      	b.n	80172d8 <fill_inverse_cmap+0x102>
    } else if (x > maxc1) {
 801734a:	4298      	cmp	r0, r3
 801734c:	da08      	bge.n	8017360 <fill_inverse_cmap+0x18a>
      tdist = (x - maxc1) * C1_SCALE;
 801734e:	eba3 0e00 	sub.w	lr, r3, r0
 8017352:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8017356:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 801735a:	eba3 030a 	sub.w	r3, r3, sl
 801735e:	e7c6      	b.n	80172ee <fill_inverse_cmap+0x118>
      if (x <= centerc1) {
 8017360:	9e04      	ldr	r6, [sp, #16]
 8017362:	429e      	cmp	r6, r3
 8017364:	dbf9      	blt.n	801735a <fill_inverse_cmap+0x184>
 8017366:	e7c1      	b.n	80172ec <fill_inverse_cmap+0x116>
    } else if (x > maxc2) {
 8017368:	4294      	cmp	r4, r2
 801736a:	da06      	bge.n	801737a <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 801736c:	1b17      	subs	r7, r2, r4
 801736e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8017370:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8017374:	eba2 020b 	sub.w	r2, r2, fp
 8017378:	e7c7      	b.n	801730a <fill_inverse_cmap+0x134>
      if (x <= centerc2) {
 801737a:	9e05      	ldr	r6, [sp, #20]
 801737c:	4296      	cmp	r6, r2
 801737e:	dbf9      	blt.n	8017374 <fill_inverse_cmap+0x19e>
 8017380:	e7c2      	b.n	8017308 <fill_inverse_cmap+0x132>
    if (mindist[i] <= minmaxdist)
 8017382:	f851 4b04 	ldr.w	r4, [r1], #4
 8017386:	9d01      	ldr	r5, [sp, #4]
 8017388:	42a5      	cmp	r5, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 801738a:	bfa4      	itt	ge
 801738c:	5483      	strbge	r3, [r0, r2]
 801738e:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8017390:	3301      	adds	r3, #1
 8017392:	e756      	b.n	8017242 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8017394:	9b08      	ldr	r3, [sp, #32]
    cptr = bestcolor;
 8017396:	f10d 0e48 	add.w	lr, sp, #72	@ 0x48
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 801739a:	f8d8 1088 	ldr.w	r1, [r8, #136]	@ 0x88
    icolor = GETJSAMPLE(colorlist[i]);
 801739e:	f813 4b01 	ldrb.w	r4, [r3], #1
 80173a2:	9308      	str	r3, [sp, #32]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80173a4:	680b      	ldr	r3, [r1, #0]
 80173a6:	5d1d      	ldrb	r5, [r3, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80173a8:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80173aa:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80173ac:	eba9 0505 	sub.w	r5, r9, r5
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80173b0:	5d18      	ldrb	r0, [r3, r4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80173b2:	5d09      	ldrb	r1, [r1, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80173b4:	ebaa 0000 	sub.w	r0, sl, r0
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80173b8:	ebab 0101 	sub.w	r1, fp, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80173bc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80173c0:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 80173c2:	435b      	muls	r3, r3
 80173c4:	fb05 3305 	mla	r3, r5, r5, r3
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80173c8:	3504      	adds	r5, #4
    dist0 += inc2*inc2;
 80173ca:	fb01 3301 	mla	r3, r1, r1, r3
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80173ce:	3108      	adds	r1, #8
    dist0 += inc2*inc2;
 80173d0:	9304      	str	r3, [sp, #16]
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80173d2:	012b      	lsls	r3, r5, #4
 80173d4:	930e      	str	r3, [sp, #56]	@ 0x38
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80173d6:	2348      	movs	r3, #72	@ 0x48
 80173d8:	4358      	muls	r0, r3
 80173da:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 80173de:	930f      	str	r3, [sp, #60]	@ 0x3c
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80173e0:	014b      	lsls	r3, r1, #5
 80173e2:	2100      	movs	r1, #0
 80173e4:	9307      	str	r3, [sp, #28]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80173e6:	f500 6319 	add.w	r3, r0, #2448	@ 0x990
 80173ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80173ec:	9b07      	ldr	r3, [sp, #28]
 80173ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80173f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80173f4:	ab72      	add	r3, sp, #456	@ 0x1c8
	xx2 = inc2;
 80173f6:	46f4      	mov	ip, lr
      xx1 = inc1;
 80173f8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80173fa:	440b      	add	r3, r1
 80173fc:	9305      	str	r3, [sp, #20]
 80173fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017400:	440b      	add	r3, r1
 8017402:	9310      	str	r3, [sp, #64]	@ 0x40
 8017404:	9b04      	ldr	r3, [sp, #16]
 8017406:	9301      	str	r3, [sp, #4]
 8017408:	e023      	b.n	8017452 <fill_inverse_cmap+0x27c>
	  if (dist2 < *bptr) {
 801740a:	463b      	mov	r3, r7
 801740c:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8017410:	9711      	str	r7, [sp, #68]	@ 0x44
 8017412:	461f      	mov	r7, r3
 8017414:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017416:	42ab      	cmp	r3, r5
	    *bptr = dist2;
 8017418:	bfc4      	itt	gt
 801741a:	463b      	movgt	r3, r7
 801741c:	601d      	strgt	r5, [r3, #0]
	  dist2 += xx2;
 801741e:	4435      	add	r5, r6
	    *cptr = (JSAMPLE) icolor;
 8017420:	bfc8      	it	gt
 8017422:	9b03      	ldrgt	r3, [sp, #12]
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8017424:	f506 7600 	add.w	r6, r6, #512	@ 0x200
	    *cptr = (JSAMPLE) icolor;
 8017428:	bfc8      	it	gt
 801742a:	701c      	strbgt	r4, [r3, #0]
	  cptr++;
 801742c:	9b03      	ldr	r3, [sp, #12]
 801742e:	3301      	adds	r3, #1
 8017430:	9303      	str	r3, [sp, #12]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8017432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017434:	42b3      	cmp	r3, r6
 8017436:	d1e8      	bne.n	801740a <fill_inverse_cmap+0x234>
	  bptr++;
 8017438:	9b05      	ldr	r3, [sp, #20]
	  cptr++;
 801743a:	f10c 0c04 	add.w	ip, ip, #4
	  bptr++;
 801743e:	3310      	adds	r3, #16
 8017440:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 8017442:	9b01      	ldr	r3, [sp, #4]
 8017444:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8017446:	f500 7090 	add.w	r0, r0, #288	@ 0x120
	dist1 += xx1;
 801744a:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 801744c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801744e:	4283      	cmp	r3, r0
 8017450:	d007      	beq.n	8017462 <fill_inverse_cmap+0x28c>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8017452:	9b05      	ldr	r3, [sp, #20]
	xx2 = inc2;
 8017454:	9e07      	ldr	r6, [sp, #28]
 8017456:	3b04      	subs	r3, #4
 8017458:	9d01      	ldr	r5, [sp, #4]
 801745a:	f8cd c00c 	str.w	ip, [sp, #12]
 801745e:	461f      	mov	r7, r3
 8017460:	e7d3      	b.n	801740a <fill_inverse_cmap+0x234>
      dist0 += xx0;
 8017462:	9804      	ldr	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8017464:	3180      	adds	r1, #128	@ 0x80
      dist0 += xx0;
 8017466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
	  cptr++;
 8017468:	f10e 0e20 	add.w	lr, lr, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801746c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
      dist0 += xx0;
 8017470:	4418      	add	r0, r3
 8017472:	9004      	str	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8017474:	d1be      	bne.n	80173f4 <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8017476:	9b02      	ldr	r3, [sp, #8]
 8017478:	3301      	adds	r3, #1
 801747a:	e6f0      	b.n	801725e <fill_inverse_cmap+0x88>

0801747c <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 801747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017480:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8017482:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
{
 8017486:	b085      	sub	sp, #20
 8017488:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 801748a:	699b      	ldr	r3, [r3, #24]
{
 801748c:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 801748e:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8017490:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8017492:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8017494:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8017496:	4555      	cmp	r5, sl
 8017498:	db02      	blt.n	80174a0 <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 801749a:	b005      	add	sp, #20
 801749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 80174a0:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 80174a4:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 80174a8:	9b01      	ldr	r3, [sp, #4]
 80174aa:	3403      	adds	r4, #3
 80174ac:	eb06 0b03 	add.w	fp, r6, r3
 80174b0:	455e      	cmp	r6, fp
 80174b2:	d101      	bne.n	80174b8 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 80174b4:	3501      	adds	r5, #1
 80174b6:	e7ee      	b.n	8017496 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80174b8:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80174bc:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80174c0:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 80174c4:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80174c6:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80174ca:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 80174ce:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80174d2:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 80174d4:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 80174d8:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80174dc:	f1bc 0f00 	cmp.w	ip, #0
 80174e0:	d106      	bne.n	80174f0 <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 80174e2:	4672      	mov	r2, lr
 80174e4:	9303      	str	r3, [sp, #12]
 80174e6:	9002      	str	r0, [sp, #8]
 80174e8:	f7ff fe75 	bl	80171d6 <fill_inverse_cmap>
 80174ec:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 80174f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80174f4:	3403      	adds	r4, #3
 80174f6:	3b01      	subs	r3, #1
 80174f8:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 80174fc:	e7d8      	b.n	80174b0 <pass2_no_dither+0x34>

080174fe <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 80174fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017502:	f8d0 a1e0 	ldr.w	sl, [r0, #480]	@ 0x1e0
{
 8017506:	b09f      	sub	sp, #124	@ 0x7c
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8017508:	f8d0 b070 	ldr.w	fp, [r0, #112]	@ 0x70
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 801750c:	f04f 0900 	mov.w	r9, #0
{
 8017510:	931b      	str	r3, [sp, #108]	@ 0x6c
  hist3d histogram = cquantize->histogram;
 8017512:	f8da 3018 	ldr.w	r3, [sl, #24]
 8017516:	9315      	str	r3, [sp, #84]	@ 0x54
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8017518:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 801751c:	9308      	str	r3, [sp, #32]
  int *error_limit = cquantize->error_limiter;
 801751e:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 8017522:	9309      	str	r3, [sp, #36]	@ 0x24
  JSAMPROW colormap0 = cinfo->colormap[0];
 8017524:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8017528:	e9cd 1219 	strd	r1, r2, [sp, #100]	@ 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	9216      	str	r2, [sp, #88]	@ 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8017530:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8017532:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8017534:	9217      	str	r2, [sp, #92]	@ 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8017536:	9318      	str	r3, [sp, #96]	@ 0x60
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017538:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801753c:	3b03      	subs	r3, #3
 801753e:	9310      	str	r3, [sp, #64]	@ 0x40
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017540:	2306      	movs	r3, #6
 8017542:	fb0b 3303 	mla	r3, fp, r3, r3
 8017546:	9312      	str	r3, [sp, #72]	@ 0x48
  for (row = 0; row < num_rows; row++) {
 8017548:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801754a:	4599      	cmp	r9, r3
 801754c:	db02      	blt.n	8017554 <pass2_fs_dither+0x56>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 801754e:	b01f      	add	sp, #124	@ 0x7c
 8017550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8017554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017556:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 801755a:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 801755c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801755e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8017562:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017564:	f8da 3020 	ldr.w	r3, [sl, #32]
 8017568:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 801756a:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801756e:	2b00      	cmp	r3, #0
 8017570:	d036      	beq.n	80175e0 <pass2_fs_dither+0xe2>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017572:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017574:	9a01      	ldr	r2, [sp, #4]
 8017576:	441a      	add	r2, r3
      outptr += width-1;
 8017578:	f10b 33ff 	add.w	r3, fp, #4294967295
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 801757c:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 801757e:	9a03      	ldr	r2, [sp, #12]
 8017580:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017582:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8017584:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017586:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017588:	4413      	add	r3, r2
      dir3 = -3;
 801758a:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801758e:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8017590:	2300      	movs	r3, #0
      dir3 = -3;
 8017592:	9206      	str	r2, [sp, #24]
      dir = -1;
 8017594:	f04f 32ff 	mov.w	r2, #4294967295
 8017598:	920d      	str	r2, [sp, #52]	@ 0x34
 801759a:	f8ca 3024 	str.w	r3, [sl, #36]	@ 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 801759e:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80175a0:	9b06      	ldr	r3, [sp, #24]
 80175a2:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80175a4:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80175a6:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 80175a8:	4622      	mov	r2, r4
    for (col = width; col > 0; col--) {
 80175aa:	f8cd b01c 	str.w	fp, [sp, #28]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80175ae:	1cab      	adds	r3, r5, #2
    belowerr0 = belowerr1 = belowerr2 = 0;
 80175b0:	940a      	str	r4, [sp, #40]	@ 0x28
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80175b2:	9313      	str	r3, [sp, #76]	@ 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80175b4:	1d2b      	adds	r3, r5, #4
 80175b6:	9314      	str	r3, [sp, #80]	@ 0x50
    cur0 = cur1 = cur2 = 0;
 80175b8:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80175ba:	e9cd 4404 	strd	r4, r4, [sp, #16]
    belowerr0 = belowerr1 = belowerr2 = 0;
 80175be:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    for (col = width; col > 0; col--) {
 80175c2:	9f07      	ldr	r7, [sp, #28]
 80175c4:	b98f      	cbnz	r7, 80175ea <pass2_fs_dither+0xec>
 80175c6:	fb0b f505 	mul.w	r5, fp, r5
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80175ca:	9a02      	ldr	r2, [sp, #8]
 80175cc:	9b02      	ldr	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 80175ce:	f109 0901 	add.w	r9, r9, #1
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80175d2:	9904      	ldr	r1, [sp, #16]
 80175d4:	442b      	add	r3, r5
 80175d6:	5351      	strh	r1, [r2, r5]
    errorptr[1] = (FSERROR) bpreverr1;
 80175d8:	9a05      	ldr	r2, [sp, #20]
    errorptr[2] = (FSERROR) bpreverr2;
 80175da:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 80175dc:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 80175de:	e7b3      	b.n	8017548 <pass2_fs_dither+0x4a>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 80175e0:	2301      	movs	r3, #1
      dir3 = 3;
 80175e2:	2203      	movs	r2, #3
      dir = 1;
 80175e4:	930d      	str	r3, [sp, #52]	@ 0x34
      dir3 = 3;
 80175e6:	9206      	str	r2, [sp, #24]
 80175e8:	e7d7      	b.n	801759a <pass2_fs_dither+0x9c>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80175ea:	f936 c005 	ldrsh.w	ip, [r6, r5]
 80175ee:	1977      	adds	r7, r6, r5
 80175f0:	449c      	add	ip, r3
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80175f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175f4:	9711      	str	r7, [sp, #68]	@ 0x44
 80175f6:	5ef3      	ldrsh	r3, [r6, r3]
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80175f8:	f10c 0c08 	add.w	ip, ip, #8
      cur0 = error_limit[cur0];
 80175fc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80175fe:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017600:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017602:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017604:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017606:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017608:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801760a:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801760e:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8017610:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8017614:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017618:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 801761a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 801761e:	9f01      	ldr	r7, [sp, #4]
 8017620:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8017624:	9f08      	ldr	r7, [sp, #32]
 8017626:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8017628:	443a      	add	r2, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 801762a:	f811 100c 	ldrb.w	r1, [r1, ip]
 801762e:	910e      	str	r1, [sp, #56]	@ 0x38
      cur1 += GETJSAMPLE(inptr[1]);
 8017630:	9901      	ldr	r1, [sp, #4]
 8017632:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8017634:	5c52      	ldrb	r2, [r2, r1]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8017636:	9908      	ldr	r1, [sp, #32]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8017638:	4617      	mov	r7, r2
      cur2 += GETJSAMPLE(inptr[2]);
 801763a:	9a01      	ldr	r2, [sp, #4]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 801763c:	440b      	add	r3, r1
      cur2 += GETJSAMPLE(inptr[2]);
 801763e:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8017640:	5c9b      	ldrb	r3, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8017642:	10ba      	asrs	r2, r7, #2
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8017644:	930f      	str	r3, [sp, #60]	@ 0x3c
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8017646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017648:	10d9      	asrs	r1, r3, #3
 801764a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801764c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017650:	eb03 1882 	add.w	r8, r3, r2, lsl #6
 8017654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017656:	10db      	asrs	r3, r3, #3
      if (*cachep == 0)
 8017658:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801765c:	f1bc 0f00 	cmp.w	ip, #0
 8017660:	d105      	bne.n	801766e <pass2_fs_dither+0x170>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8017662:	e9cd 031c 	strd	r0, r3, [sp, #112]	@ 0x70
 8017666:	f7ff fdb6 	bl	80171d6 <fill_inverse_cmap>
 801766a:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	@ 0x70
      { register int pixcode = *cachep - 1;
 801766e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8017672:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8017674:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017676:	9905      	ldr	r1, [sp, #20]
	*outptr = (JSAMPLE) pixcode;
 8017678:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 801767a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801767c:	f812 c003 	ldrb.w	ip, [r2, r3]
 8017680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017682:	eba2 0c0c 	sub.w	ip, r2, ip
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8017686:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017688:	f812 e003 	ldrb.w	lr, [r2, r3]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 801768c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 801768e:	eba7 0e0e 	sub.w	lr, r7, lr
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017692:	9f01      	ldr	r7, [sp, #4]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017694:	f812 8003 	ldrb.w	r8, [r2, r3]
 8017698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 801769a:	9a04      	ldr	r2, [sp, #16]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 801769c:	eba3 0808 	sub.w	r8, r3, r8
	cur0 += delta;		/* form error * 3 */
 80176a0:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80176a4:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 80176a6:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80176aa:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 80176ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80176ae:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 80176b0:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	bpreverr0 = belowerr0 + cur0;
 80176b4:	9204      	str	r2, [sp, #16]
	cur1 += delta;		/* form error * 3 */
 80176b6:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80176ba:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 80176bc:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80176c0:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 80176c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80176c4:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 80176c6:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	bpreverr1 = belowerr1 + cur1;
 80176ca:	9105      	str	r1, [sp, #20]
	cur2 += delta;		/* form error * 3 */
 80176cc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80176d0:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 80176d2:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80176d6:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 80176d8:	9e06      	ldr	r6, [sp, #24]
	bpreverr2 = belowerr2 + cur2;
 80176da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
      inptr += dir3;		/* Advance pixel pointers to next column */
 80176dc:	4437      	add	r7, r6
      outptr += dir;
 80176de:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 80176e0:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 80176e2:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 80176e6:	9701      	str	r7, [sp, #4]
      outptr += dir;
 80176e8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80176ea:	443e      	add	r6, r7
 80176ec:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 80176ee:	9e07      	ldr	r6, [sp, #28]
 80176f0:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 80176f2:	e9cd e80b 	strd	lr, r8, [sp, #44]	@ 0x2c
    for (col = width; col > 0; col--) {
 80176f6:	9607      	str	r6, [sp, #28]
 80176f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
	belowerr0 = bnexterr;
 80176fa:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80176fe:	e760      	b.n	80175c2 <pass2_fs_dither+0xc4>

08017700 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8017700:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8017702:	6843      	ldr	r3, [r0, #4]
 8017704:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8017708:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801770a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	@ 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8017712:	f500 737f 	add.w	r3, r0, #1020	@ 0x3fc
 8017716:	f500 717e 	add.w	r1, r0, #1016	@ 0x3f8
 801771a:	f500 6280 	add.w	r2, r0, #1024	@ 0x400
  cquantize->error_limiter = table;
 801771e:	62a3      	str	r3, [r4, #40]	@ 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8017720:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8017722:	425c      	negs	r4, r3
 8017724:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8017728:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 801772a:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 801772e:	2b10      	cmp	r3, #16
 8017730:	d1f7      	bne.n	8017722 <init_error_limit+0x22>
 8017732:	f500 6487 	add.w	r4, r0, #1080	@ 0x438
 8017736:	f500 7170 	add.w	r1, r0, #960	@ 0x3c0
 801773a:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 801773e:	425d      	negs	r5, r3
 8017740:	f844 3f04 	str.w	r3, [r4, #4]!
 8017744:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8017748:	f002 0501 	and.w	r5, r2, #1
 801774c:	3a01      	subs	r2, #1
 801774e:	442b      	add	r3, r5
 8017750:	f112 0f32 	cmn.w	r2, #50	@ 0x32
 8017754:	d1f3      	bne.n	801773e <init_error_limit+0x3e>
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
 8017756:	f500 6197 	add.w	r1, r0, #1208	@ 0x4b8
 801775a:	f500 7250 	add.w	r2, r0, #832	@ 0x340
    table[in] = out; table[-in] = -out;
 801775e:	425c      	negs	r4, r3
 8017760:	f841 3f04 	str.w	r3, [r1, #4]!
 8017764:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8017768:	4282      	cmp	r2, r0
 801776a:	d1f9      	bne.n	8017760 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 801776c:	bd38      	pop	{r3, r4, r5, pc}

0801776e <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 801776e:	4770      	bx	lr

08017770 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8017770:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 8017774:	2201      	movs	r2, #1
 8017776:	61da      	str	r2, [r3, #28]
}
 8017778:	4770      	bx	lr
	...

0801777c <start_pass_2_quant>:
{
 801777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801777e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	@ 0x1e0
{
 8017782:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8017784:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
  hist3d histogram = cquantize->histogram;
 8017788:	69af      	ldr	r7, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 801778a:	2b00      	cmp	r3, #0
 801778c:	d04f      	beq.n	801782e <start_pass_2_quant+0xb2>
    cinfo->dither_mode = JDITHER_FS;
 801778e:	2302      	movs	r3, #2
 8017790:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  if (is_pre_scan) {
 8017794:	b189      	cbz	r1, 80177ba <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8017796:	4b28      	ldr	r3, [pc, #160]	@ (8017838 <start_pass_2_quant+0xbc>)
 8017798:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 801779a:	4b28      	ldr	r3, [pc, #160]	@ (801783c <start_pass_2_quant+0xc0>)
 801779c:	60ab      	str	r3, [r5, #8]
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 801779e:	1f3c      	subs	r4, r7, #4
 80177a0:	377c      	adds	r7, #124	@ 0x7c
      FMEMZERO((void FAR *) histogram[i],
 80177a2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80177a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80177aa:	2100      	movs	r1, #0
 80177ac:	f013 fccc 	bl	802b148 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 80177b0:	42a7      	cmp	r7, r4
 80177b2:	d1f6      	bne.n	80177a2 <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 80177b4:	2300      	movs	r3, #0
 80177b6:	61eb      	str	r3, [r5, #28]
}
 80177b8:	e02f      	b.n	801781a <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 80177ba:	4b21      	ldr	r3, [pc, #132]	@ (8017840 <start_pass_2_quant+0xc4>)
 80177bc:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 80177be:	4b21      	ldr	r3, [pc, #132]	@ (8017844 <start_pass_2_quant+0xc8>)
 80177c0:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 80177c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
    if (i < 1)
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	dc28      	bgt.n	801781c <start_pass_2_quant+0xa0>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 80177ca:	223a      	movs	r2, #58	@ 0x3a
 80177cc:	6823      	ldr	r3, [r4, #0]
 80177ce:	615a      	str	r2, [r3, #20]
 80177d0:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80177d2:	619a      	str	r2, [r3, #24]
 80177d4:	4620      	mov	r0, r4
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 80177da:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80177de:	2b02      	cmp	r3, #2
 80177e0:	d118      	bne.n	8017814 <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80177e2:	2306      	movs	r3, #6
 80177e4:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 80177e6:	435e      	muls	r6, r3
      if (cquantize->fserrors == NULL)
 80177e8:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80177ea:	360c      	adds	r6, #12
      if (cquantize->fserrors == NULL)
 80177ec:	b933      	cbnz	r3, 80177fc <start_pass_2_quant+0x80>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80177ee:	6863      	ldr	r3, [r4, #4]
 80177f0:	4632      	mov	r2, r6
 80177f2:	2101      	movs	r1, #1
 80177f4:	4620      	mov	r0, r4
 80177f6:	685b      	ldr	r3, [r3, #4]
 80177f8:	4798      	blx	r3
 80177fa:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 80177fc:	4632      	mov	r2, r6
 80177fe:	2100      	movs	r1, #0
 8017800:	6a28      	ldr	r0, [r5, #32]
 8017802:	f013 fca1 	bl	802b148 <memset>
      if (cquantize->error_limiter == NULL)
 8017806:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8017808:	b913      	cbnz	r3, 8017810 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 801780a:	4620      	mov	r0, r4
 801780c:	f7ff ff78 	bl	8017700 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8017810:	2300      	movs	r3, #0
 8017812:	626b      	str	r3, [r5, #36]	@ 0x24
  if (cquantize->needs_zeroed) {
 8017814:	69eb      	ldr	r3, [r5, #28]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d1c1      	bne.n	801779e <start_pass_2_quant+0x22>
}
 801781a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (i > MAXNUMCOLORS)
 801781c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017820:	dddb      	ble.n	80177da <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017822:	223b      	movs	r2, #59	@ 0x3b
 8017824:	6823      	ldr	r3, [r4, #0]
 8017826:	615a      	str	r2, [r3, #20]
 8017828:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801782c:	e7d1      	b.n	80177d2 <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 801782e:	2900      	cmp	r1, #0
 8017830:	d1b1      	bne.n	8017796 <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8017832:	4b05      	ldr	r3, [pc, #20]	@ (8017848 <start_pass_2_quant+0xcc>)
 8017834:	e7c2      	b.n	80177bc <start_pass_2_quant+0x40>
 8017836:	bf00      	nop
 8017838:	08017179 	.word	0x08017179
 801783c:	08017a6b 	.word	0x08017a6b
 8017840:	080174ff 	.word	0x080174ff
 8017844:	0801776f 	.word	0x0801776f
 8017848:	0801747d 	.word	0x0801747d

0801784c <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801784c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hist3d histogram = cquantize->histogram;
 8017850:	f8d0 c018 	ldr.w	ip, [r0, #24]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8017854:	e9d1 8000 	ldrd	r8, r0, [r1]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017858:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
  if (c0max > c0min)
 801785c:	4580      	cmp	r8, r0
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801785e:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
  if (c0max > c0min)
 8017862:	da47      	bge.n	80178f4 <update_box.isra.0+0xa8>
 8017864:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8017868:	4643      	mov	r3, r8
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801786a:	4677      	mov	r7, lr
 801786c:	e008      	b.n	8017880 <update_box.isra.0+0x34>
	histp = & histogram[c0][c1][c2min];
 801786e:	eb09 1a87 	add.w	sl, r9, r7, lsl #6
 8017872:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017876:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017878:	46b2      	mov	sl, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 801787a:	4555      	cmp	r5, sl
 801787c:	da08      	bge.n	8017890 <update_box.isra.0+0x44>
      for (c1 = c1min; c1 <= c1max; c1++) {
 801787e:	3701      	adds	r7, #1
 8017880:	42bc      	cmp	r4, r7
 8017882:	daf4      	bge.n	801786e <update_box.isra.0+0x22>
    for (c0 = c0min; c0 <= c0max; c0++)
 8017884:	3301      	adds	r3, #1
 8017886:	4298      	cmp	r0, r3
 8017888:	daef      	bge.n	801786a <update_box.isra.0+0x1e>
 have_c0min:
 801788a:	4643      	mov	r3, r8
 801788c:	4607      	mov	r7, r0
 801788e:	e022      	b.n	80178d6 <update_box.isra.0+0x8a>
	  if (*histp++ != 0) {
 8017890:	f832 bb02 	ldrh.w	fp, [r2], #2
 8017894:	f1bb 0f00 	cmp.w	fp, #0
 8017898:	d00d      	beq.n	80178b6 <update_box.isra.0+0x6a>
  if (c0max > c0min)
 801789a:	4298      	cmp	r0, r3
	    boxp->c0min = c0min = c0;
 801789c:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 801789e:	dcf5      	bgt.n	801788c <update_box.isra.0+0x40>
  if (c1max > c1min)
 80178a0:	45a6      	cmp	lr, r4
 80178a2:	f280 8083 	bge.w	80179ac <update_box.isra.0+0x160>
 80178a6:	0072      	lsls	r2, r6, #1
 80178a8:	9201      	str	r2, [sp, #4]
 80178aa:	4672      	mov	r2, lr
	histp = & histogram[c0][c1][c2min];
 80178ac:	9f01      	ldr	r7, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80178ae:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80178b0:	eb07 1a82 	add.w	sl, r7, r2, lsl #6
 80178b4:	e028      	b.n	8017908 <update_box.isra.0+0xbc>
	for (c2 = c2min; c2 <= c2max; c2++)
 80178b6:	f10a 0a01 	add.w	sl, sl, #1
 80178ba:	e7de      	b.n	801787a <update_box.isra.0+0x2e>
	histp = & histogram[c0][c1][c2min];
 80178bc:	eb09 1a88 	add.w	sl, r9, r8, lsl #6
 80178c0:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 80178c4:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80178c6:	46b2      	mov	sl, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 80178c8:	4555      	cmp	r5, sl
 80178ca:	da08      	bge.n	80178de <update_box.isra.0+0x92>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80178cc:	f108 0801 	add.w	r8, r8, #1
 80178d0:	4544      	cmp	r4, r8
 80178d2:	daf3      	bge.n	80178bc <update_box.isra.0+0x70>
    for (c0 = c0max; c0 >= c0min; c0--)
 80178d4:	3f01      	subs	r7, #1
 80178d6:	429f      	cmp	r7, r3
 80178d8:	dbe2      	blt.n	80178a0 <update_box.isra.0+0x54>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80178da:	46f0      	mov	r8, lr
 80178dc:	e7f8      	b.n	80178d0 <update_box.isra.0+0x84>
	  if (*histp++ != 0) {
 80178de:	f832 bb02 	ldrh.w	fp, [r2], #2
 80178e2:	f1bb 0f00 	cmp.w	fp, #0
 80178e6:	d002      	beq.n	80178ee <update_box.isra.0+0xa2>
	    goto have_c0max;
 80178e8:	4638      	mov	r0, r7
	    boxp->c0max = c0max = c0;
 80178ea:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 80178ec:	e7d8      	b.n	80178a0 <update_box.isra.0+0x54>
	for (c2 = c2min; c2 <= c2max; c2++)
 80178ee:	f10a 0a01 	add.w	sl, sl, #1
 80178f2:	e7e9      	b.n	80178c8 <update_box.isra.0+0x7c>
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80178f4:	4643      	mov	r3, r8
 80178f6:	e7d3      	b.n	80178a0 <update_box.isra.0+0x54>
	histp = & histogram[c0][c1][c2min];
 80178f8:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80178fc:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 80178fe:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8017900:	454d      	cmp	r5, r9
 8017902:	da09      	bge.n	8017918 <update_box.isra.0+0xcc>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8017904:	f108 0801 	add.w	r8, r8, #1
 8017908:	4580      	cmp	r8, r0
 801790a:	ddf5      	ble.n	80178f8 <update_box.isra.0+0xac>
    for (c1 = c1min; c1 <= c1max; c1++)
 801790c:	3201      	adds	r2, #1
 801790e:	4294      	cmp	r4, r2
 8017910:	dacc      	bge.n	80178ac <update_box.isra.0+0x60>
 have_c1min:
 8017912:	4672      	mov	r2, lr
 8017914:	46a6      	mov	lr, r4
 8017916:	e036      	b.n	8017986 <update_box.isra.0+0x13a>
	  if (*histp++ != 0) {
 8017918:	f837 bb02 	ldrh.w	fp, [r7], #2
 801791c:	f1bb 0f00 	cmp.w	fp, #0
 8017920:	d022      	beq.n	8017968 <update_box.isra.0+0x11c>
  if (c1max > c1min)
 8017922:	4294      	cmp	r4, r2
	    boxp->c1min = c1min = c1;
 8017924:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8017926:	dcf5      	bgt.n	8017914 <update_box.isra.0+0xc8>
  if (c2max > c2min)
 8017928:	42ae      	cmp	r6, r5
 801792a:	46b6      	mov	lr, r6
 801792c:	db4e      	blt.n	80179cc <update_box.isra.0+0x180>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801792e:	1aa6      	subs	r6, r4, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8017930:	1ac7      	subs	r7, r0, r3
 8017932:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8017936:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801793a:	00ff      	lsls	r7, r7, #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801793c:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8017940:	eba5 060e 	sub.w	r6, r5, lr
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8017944:	fb08 f808 	mul.w	r8, r8, r8
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8017948:	0136      	lsls	r6, r6, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 801794a:	fb07 8707 	mla	r7, r7, r7, r8
  ccount = 0;
 801794e:	f04f 0800 	mov.w	r8, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8017952:	fb06 7606 	mla	r6, r6, r6, r7
 8017956:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 8017958:	4298      	cmp	r0, r3
 801795a:	f280 8084 	bge.w	8017a66 <update_box.isra.0+0x21a>
  boxp->colorcount = ccount;
 801795e:	f8c1 801c 	str.w	r8, [r1, #28]
}
 8017962:	b003      	add	sp, #12
 8017964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c2 = c2min; c2 <= c2max; c2++)
 8017968:	f109 0901 	add.w	r9, r9, #1
 801796c:	e7c8      	b.n	8017900 <update_box.isra.0+0xb4>
	histp = & histogram[c0][c1][c2min];
 801796e:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017972:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 8017974:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8017976:	454d      	cmp	r5, r9
 8017978:	da0c      	bge.n	8017994 <update_box.isra.0+0x148>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801797a:	f108 0801 	add.w	r8, r8, #1
 801797e:	4540      	cmp	r0, r8
 8017980:	daf5      	bge.n	801796e <update_box.isra.0+0x122>
    for (c1 = c1max; c1 >= c1min; c1--)
 8017982:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017986:	4572      	cmp	r2, lr
 8017988:	dcce      	bgt.n	8017928 <update_box.isra.0+0xdc>
 801798a:	9f01      	ldr	r7, [sp, #4]
 801798c:	4698      	mov	r8, r3
 801798e:	eb07 1a8e 	add.w	sl, r7, lr, lsl #6
 8017992:	e7f4      	b.n	801797e <update_box.isra.0+0x132>
	  if (*histp++ != 0) {
 8017994:	f837 bb02 	ldrh.w	fp, [r7], #2
 8017998:	f1bb 0f00 	cmp.w	fp, #0
 801799c:	d003      	beq.n	80179a6 <update_box.isra.0+0x15a>
	    goto have_c1max;
 801799e:	4674      	mov	r4, lr
	    boxp->c1max = c1max = c1;
 80179a0:	f8c1 e00c 	str.w	lr, [r1, #12]
	    goto have_c1max;
 80179a4:	e7c0      	b.n	8017928 <update_box.isra.0+0xdc>
	for (c2 = c2min; c2 <= c2max; c2++)
 80179a6:	f109 0901 	add.w	r9, r9, #1
 80179aa:	e7e4      	b.n	8017976 <update_box.isra.0+0x12a>
 have_c1min:
 80179ac:	4672      	mov	r2, lr
 80179ae:	e7bb      	b.n	8017928 <update_box.isra.0+0xdc>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80179b0:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 80179b4:	4691      	mov	r9, r2
 80179b6:	4457      	add	r7, sl
 80179b8:	45a1      	cmp	r9, r4
 80179ba:	dd0b      	ble.n	80179d4 <update_box.isra.0+0x188>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80179bc:	f108 0801 	add.w	r8, r8, #1
 80179c0:	4540      	cmp	r0, r8
 80179c2:	daf5      	bge.n	80179b0 <update_box.isra.0+0x164>
    for (c2 = c2min; c2 <= c2max; c2++)
 80179c4:	f10e 0e01 	add.w	lr, lr, #1
 80179c8:	4575      	cmp	r5, lr
 80179ca:	db31      	blt.n	8017a30 <update_box.isra.0+0x1e4>
 80179cc:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80179d0:	4698      	mov	r8, r3
 80179d2:	e7f5      	b.n	80179c0 <update_box.isra.0+0x174>
	  if (*histp != 0) {
 80179d4:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 80179d8:	f837 b00b 	ldrh.w	fp, [r7, fp]
 80179dc:	f1bb 0f00 	cmp.w	fp, #0
 80179e0:	d005      	beq.n	80179ee <update_box.isra.0+0x1a2>
  if (c2max > c2min)
 80179e2:	4575      	cmp	r5, lr
	    boxp->c2min = c2min = c2;
 80179e4:	f8c1 e010 	str.w	lr, [r1, #16]
  if (c2max > c2min)
 80179e8:	dda1      	ble.n	801792e <update_box.isra.0+0xe2>
 have_c2min:
 80179ea:	462f      	mov	r7, r5
 80179ec:	e00d      	b.n	8017a0a <update_box.isra.0+0x1be>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80179ee:	f109 0901 	add.w	r9, r9, #1
 80179f2:	e7e1      	b.n	80179b8 <update_box.isra.0+0x16c>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80179f4:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 80179f8:	4691      	mov	r9, r2
 80179fa:	4456      	add	r6, sl
 80179fc:	454c      	cmp	r4, r9
 80179fe:	da0a      	bge.n	8017a16 <update_box.isra.0+0x1ca>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8017a00:	f108 0801 	add.w	r8, r8, #1
 8017a04:	4540      	cmp	r0, r8
 8017a06:	daf5      	bge.n	80179f4 <update_box.isra.0+0x1a8>
    for (c2 = c2max; c2 >= c2min; c2--)
 8017a08:	3f01      	subs	r7, #1
 8017a0a:	45be      	cmp	lr, r7
 8017a0c:	dc8f      	bgt.n	801792e <update_box.isra.0+0xe2>
 8017a0e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8017a12:	4698      	mov	r8, r3
 8017a14:	e7f6      	b.n	8017a04 <update_box.isra.0+0x1b8>
	  if (*histp != 0) {
 8017a16:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 8017a1a:	f836 b00b 	ldrh.w	fp, [r6, fp]
 8017a1e:	f1bb 0f00 	cmp.w	fp, #0
 8017a22:	d002      	beq.n	8017a2a <update_box.isra.0+0x1de>
	    goto have_c2max;
 8017a24:	463d      	mov	r5, r7
	    boxp->c2max = c2max = c2;
 8017a26:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 8017a28:	e781      	b.n	801792e <update_box.isra.0+0xe2>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017a2a:	f109 0901 	add.w	r9, r9, #1
 8017a2e:	e7e5      	b.n	80179fc <update_box.isra.0+0x1b0>
 have_c2min:
 8017a30:	46b6      	mov	lr, r6
 8017a32:	e7da      	b.n	80179ea <update_box.isra.0+0x19e>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8017a34:	eb0a 1987 	add.w	r9, sl, r7, lsl #6
 8017a38:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8017a3c:	f1a9 0902 	sub.w	r9, r9, #2
 8017a40:	444e      	add	r6, r9
 8017a42:	46f1      	mov	r9, lr
 8017a44:	454d      	cmp	r5, r9
 8017a46:	da04      	bge.n	8017a52 <update_box.isra.0+0x206>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017a48:	3701      	adds	r7, #1
 8017a4a:	42bc      	cmp	r4, r7
 8017a4c:	daf2      	bge.n	8017a34 <update_box.isra.0+0x1e8>
  for (c0 = c0min; c0 <= c0max; c0++)
 8017a4e:	3301      	adds	r3, #1
 8017a50:	e782      	b.n	8017958 <update_box.isra.0+0x10c>
	if (*histp != 0) {
 8017a52:	f836 bf02 	ldrh.w	fp, [r6, #2]!
 8017a56:	f1bb 0f00 	cmp.w	fp, #0
 8017a5a:	d001      	beq.n	8017a60 <update_box.isra.0+0x214>
	  ccount++;
 8017a5c:	f108 0801 	add.w	r8, r8, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8017a60:	f109 0901 	add.w	r9, r9, #1
 8017a64:	e7ee      	b.n	8017a44 <update_box.isra.0+0x1f8>
 8017a66:	4617      	mov	r7, r2
 8017a68:	e7ef      	b.n	8017a4a <update_box.isra.0+0x1fe>

08017a6a <finish_pass1>:
{
 8017a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017a6e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
{
 8017a72:	b08d      	sub	sp, #52	@ 0x34
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017a74:	2101      	movs	r1, #1
{
 8017a76:	4605      	mov	r5, r0
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017a78:	9302      	str	r3, [sp, #8]
  update_box(cinfo, & boxlist[0]);
 8017a7a:	f04f 0b01 	mov.w	fp, #1
  cinfo->colormap = cquantize->sv_colormap;
 8017a7e:	691b      	ldr	r3, [r3, #16]
 8017a80:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  select_colors(cinfo, cquantize->desired);
 8017a84:	9b02      	ldr	r3, [sp, #8]
 8017a86:	695b      	ldr	r3, [r3, #20]
 8017a88:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017a8a:	9a01      	ldr	r2, [sp, #4]
 8017a8c:	6843      	ldr	r3, [r0, #4]
 8017a8e:	0152      	lsls	r2, r2, #5
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8017a94:	2300      	movs	r3, #0
 8017a96:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8017a98:	213f      	movs	r1, #63	@ 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017a9a:	4604      	mov	r4, r0
  boxlist[0].c1min = 0;
 8017a9c:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8017a9e:	6142      	str	r2, [r0, #20]
 8017aa0:	46a0      	mov	r8, r4
  update_box(cinfo, & boxlist[0]);
 8017aa2:	4626      	mov	r6, r4
  boxlist[0].c2min = 0;
 8017aa4:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8017aa8:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8017aac:	f8d5 31e0 	ldr.w	r3, [r5, #480]	@ 0x1e0
 8017ab0:	4601      	mov	r1, r0
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	9303      	str	r3, [sp, #12]
 8017ab6:	f7ff fec9 	bl	801784c <update_box.isra.0>
  while (numboxes < desired_colors) {
 8017aba:	9b01      	ldr	r3, [sp, #4]
 8017abc:	455b      	cmp	r3, fp
 8017abe:	dc24      	bgt.n	8017b0a <finish_pass1+0xa0>
 8017ac0:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 8017ac2:	f8d5 31e0 	ldr.w	r3, [r5, #480]	@ 0x1e0
 8017ac6:	699b      	ldr	r3, [r3, #24]
 8017ac8:	9305      	str	r3, [sp, #20]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8017aca:	e9d8 c300 	ldrd	ip, r3, [r8]
 8017ace:	9306      	str	r3, [sp, #24]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017ad0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ad4:	9307      	str	r3, [sp, #28]
 8017ad6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ada:	9308      	str	r3, [sp, #32]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017adc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017ae0:	9301      	str	r3, [sp, #4]
 8017ae2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8017ae6:	9309      	str	r3, [sp, #36]	@ 0x24
  for (c0 = c0min; c0 <= c0max; c0++)
 8017ae8:	9b01      	ldr	r3, [sp, #4]
 8017aea:	005b      	lsls	r3, r3, #1
 8017aec:	9304      	str	r3, [sp, #16]
  long c2total = 0;
 8017aee:	2300      	movs	r3, #0
  long c1total = 0;
 8017af0:	469a      	mov	sl, r3
  long c0total = 0;
 8017af2:	4618      	mov	r0, r3
  long total = 0;
 8017af4:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 8017af6:	9c06      	ldr	r4, [sp, #24]
 8017af8:	4564      	cmp	r4, ip
 8017afa:	f2c0 809f 	blt.w	8017c3c <finish_pass1+0x1d2>
 8017afe:	ea4f 04cc 	mov.w	r4, ip, lsl #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017b02:	9f07      	ldr	r7, [sp, #28]
 8017b04:	3404      	adds	r4, #4
 8017b06:	940a      	str	r4, [sp, #40]	@ 0x28
 8017b08:	e07d      	b.n	8017c06 <finish_pass1+0x19c>
    if (numboxes*2 <= desired_colors) {
 8017b0a:	9b01      	ldr	r3, [sp, #4]
 8017b0c:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8017b10:	db50      	blt.n	8017bb4 <finish_pass1+0x14a>
  boxptr which = NULL;
 8017b12:	2100      	movs	r1, #0
 8017b14:	4622      	mov	r2, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017b16:	4608      	mov	r0, r1
  register long maxc = 0;
 8017b18:	460f      	mov	r7, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8017b1a:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8017b1e:	45bc      	cmp	ip, r7
 8017b20:	dd04      	ble.n	8017b2c <finish_pass1+0xc2>
 8017b22:	6993      	ldr	r3, [r2, #24]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	bfc4      	itt	gt
 8017b28:	4611      	movgt	r1, r2
 8017b2a:	4667      	movgt	r7, ip
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017b2c:	3001      	adds	r0, #1
 8017b2e:	3220      	adds	r2, #32
 8017b30:	4583      	cmp	fp, r0
 8017b32:	d1f2      	bne.n	8017b1a <finish_pass1+0xb0>
    if (b1 == NULL)		/* no splittable boxes left! */
 8017b34:	2900      	cmp	r1, #0
 8017b36:	d0c4      	beq.n	8017ac2 <finish_pass1+0x58>
    b2 = &boxlist[numboxes];	/* where new box will go */
 8017b38:	f106 0320 	add.w	r3, r6, #32
 8017b3c:	9307      	str	r3, [sp, #28]
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8017b3e:	684b      	ldr	r3, [r1, #4]
 8017b40:	6273      	str	r3, [r6, #36]	@ 0x24
 8017b42:	68ca      	ldr	r2, [r1, #12]
 8017b44:	62f2      	str	r2, [r6, #44]	@ 0x2c
 8017b46:	6948      	ldr	r0, [r1, #20]
 8017b48:	6370      	str	r0, [r6, #52]	@ 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8017b4a:	f8d1 e000 	ldr.w	lr, [r1]
 8017b4e:	f8c6 e020 	str.w	lr, [r6, #32]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8017b52:	eba3 0c0e 	sub.w	ip, r3, lr
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8017b56:	688f      	ldr	r7, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8017b58:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8017b5c:	eba2 0a07 	sub.w	sl, r2, r7
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8017b60:	62b7      	str	r7, [r6, #40]	@ 0x28
 8017b62:	9704      	str	r7, [sp, #16]
 8017b64:	f8d1 9010 	ldr.w	r9, [r1, #16]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8017b68:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8017b6c:	eb07 078a 	add.w	r7, r7, sl, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8017b70:	eba0 0a09 	sub.w	sl, r0, r9
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8017b74:	f8c6 9030 	str.w	r9, [r6, #48]	@ 0x30
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8017b78:	9705      	str	r7, [sp, #20]
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8017b7a:	ea4f 170a 	mov.w	r7, sl, lsl #4
 8017b7e:	9706      	str	r7, [sp, #24]
    if (c2 > cmax) { cmax = c2; n = 2; }
 8017b80:	9f05      	ldr	r7, [sp, #20]
 8017b82:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
 8017b86:	f2c0 8088 	blt.w	8017c9a <finish_pass1+0x230>
    if (c0 > cmax) { n = 0; }
 8017b8a:	9805      	ldr	r0, [sp, #20]
 8017b8c:	4584      	cmp	ip, r0
 8017b8e:	dd20      	ble.n	8017bd2 <finish_pass1+0x168>
      lb = (b1->c0max + b1->c0min) / 2;
 8017b90:	4473      	add	r3, lr
 8017b92:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8017b96:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 8017b98:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	6233      	str	r3, [r6, #32]
    update_box(cinfo, b1);
 8017b9e:	9803      	ldr	r0, [sp, #12]
    numboxes++;
 8017ba0:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8017ba4:	f7ff fe52 	bl	801784c <update_box.isra.0>
    update_box(cinfo, b2);
 8017ba8:	9907      	ldr	r1, [sp, #28]
 8017baa:	9803      	ldr	r0, [sp, #12]
    numboxes++;
 8017bac:	460e      	mov	r6, r1
    update_box(cinfo, b2);
 8017bae:	f7ff fe4d 	bl	801784c <update_box.isra.0>
    numboxes++;
 8017bb2:	e782      	b.n	8017aba <finish_pass1+0x50>
  boxptr which = NULL;
 8017bb4:	2100      	movs	r1, #0
 8017bb6:	4623      	mov	r3, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017bb8:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 8017bba:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 8017bbc:	699f      	ldr	r7, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017bbe:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 8017bc0:	4287      	cmp	r7, r0
 8017bc2:	bfc4      	itt	gt
 8017bc4:	4619      	movgt	r1, r3
 8017bc6:	4638      	movgt	r0, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017bc8:	4593      	cmp	fp, r2
 8017bca:	f103 0320 	add.w	r3, r3, #32
 8017bce:	d1f5      	bne.n	8017bbc <finish_pass1+0x152>
 8017bd0:	e7b0      	b.n	8017b34 <finish_pass1+0xca>
      lb = (b1->c1max + b1->c1min) / 2;
 8017bd2:	9b04      	ldr	r3, [sp, #16]
 8017bd4:	441a      	add	r2, r3
 8017bd6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017bda:	1052      	asrs	r2, r2, #1
      b1->c1max = lb;
 8017bdc:	60ca      	str	r2, [r1, #12]
      b2->c1min = lb+1;
 8017bde:	3201      	adds	r2, #1
 8017be0:	62b2      	str	r2, [r6, #40]	@ 0x28
      break;
 8017be2:	e7dc      	b.n	8017b9e <finish_pass1+0x134>
      histp = & histogram[c0][c1][c2min];
 8017be4:	9c04      	ldr	r4, [sp, #16]
 8017be6:	9e05      	ldr	r6, [sp, #20]
 8017be8:	eb04 1487 	add.w	r4, r4, r7, lsl #6
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017bec:	f8dd e004 	ldr.w	lr, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 8017bf0:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 8017bf4:	4434      	add	r4, r6
 8017bf6:	00be      	lsls	r6, r7, #2
 8017bf8:	3602      	adds	r6, #2
 8017bfa:	9403      	str	r4, [sp, #12]
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017bfc:	960b      	str	r6, [sp, #44]	@ 0x2c
 8017bfe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017c00:	4574      	cmp	r4, lr
 8017c02:	da06      	bge.n	8017c12 <finish_pass1+0x1a8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017c04:	3701      	adds	r7, #1
 8017c06:	9c08      	ldr	r4, [sp, #32]
 8017c08:	42bc      	cmp	r4, r7
 8017c0a:	daeb      	bge.n	8017be4 <finish_pass1+0x17a>
  for (c0 = c0min; c0 <= c0max; c0++)
 8017c0c:	f10c 0c01 	add.w	ip, ip, #1
 8017c10:	e771      	b.n	8017af6 <finish_pass1+0x8c>
	if ((count = *histp++) != 0) {
 8017c12:	9c03      	ldr	r4, [sp, #12]
 8017c14:	f834 6b02 	ldrh.w	r6, [r4], #2
 8017c18:	9403      	str	r4, [sp, #12]
 8017c1a:	b166      	cbz	r6, 8017c36 <finish_pass1+0x1cc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8017c1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8017c1e:	ea4f 09ce 	mov.w	r9, lr, lsl #3
	  total += count;
 8017c22:	4432      	add	r2, r6
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8017c24:	fb04 0006 	mla	r0, r4, r6, r0
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8017c28:	f109 0904 	add.w	r9, r9, #4
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8017c2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8017c2e:	fb06 3309 	mla	r3, r6, r9, r3
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8017c32:	fb04 aa06 	mla	sl, r4, r6, sl
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017c36:	f10e 0e01 	add.w	lr, lr, #1
 8017c3a:	e7e0      	b.n	8017bfe <finish_pass1+0x194>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017c3c:	eb00 0062 	add.w	r0, r0, r2, asr #1
 8017c40:	f8d5 4088 	ldr.w	r4, [r5, #136]	@ 0x88
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017c44:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
  for (i = 0; i < numboxes; i++)
 8017c48:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017c4c:	6824      	ldr	r4, [r4, #0]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017c4e:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017c52:	fb90 f0f2 	sdiv	r0, r0, r2
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017c56:	fb9a faf2 	sdiv	sl, sl, r2
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017c5a:	5460      	strb	r0, [r4, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017c5c:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8017c60:	6840      	ldr	r0, [r0, #4]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017c62:	fb93 f3f2 	sdiv	r3, r3, r2
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017c66:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017c6a:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8017c6e:	6880      	ldr	r0, [r0, #8]
 8017c70:	5443      	strb	r3, [r0, r1]
  for (i = 0; i < numboxes; i++)
 8017c72:	3101      	adds	r1, #1
 8017c74:	4559      	cmp	r1, fp
 8017c76:	f47f af24 	bne.w	8017ac2 <finish_pass1+0x58>
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8017c7a:	682b      	ldr	r3, [r5, #0]
 8017c7c:	2262      	movs	r2, #98	@ 0x62
  cinfo->actual_number_of_colors = numboxes;
 8017c7e:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8017c82:	4628      	mov	r0, r5
 8017c84:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	2101      	movs	r1, #1
 8017c8c:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8017c8e:	2301      	movs	r3, #1
 8017c90:	9a02      	ldr	r2, [sp, #8]
 8017c92:	61d3      	str	r3, [r2, #28]
}
 8017c94:	b00d      	add	sp, #52	@ 0x34
 8017c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8017c9a:	9a06      	ldr	r2, [sp, #24]
 8017c9c:	4594      	cmp	ip, r2
 8017c9e:	f73f af77 	bgt.w	8017b90 <finish_pass1+0x126>
      lb = (b1->c2max + b1->c2min) / 2;
 8017ca2:	4448      	add	r0, r9
 8017ca4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8017ca8:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 8017caa:	6148      	str	r0, [r1, #20]
      b2->c2min = lb+1;
 8017cac:	3001      	adds	r0, #1
 8017cae:	6330      	str	r0, [r6, #48]	@ 0x30
      break;
 8017cb0:	e775      	b.n	8017b9e <finish_pass1+0x134>
	...

08017cb4 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8017cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017cb6:	6843      	ldr	r3, [r0, #4]
 8017cb8:	222c      	movs	r2, #44	@ 0x2c
 8017cba:	2101      	movs	r1, #1
{
 8017cbc:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8017cc2:	4b30      	ldr	r3, [pc, #192]	@ (8017d84 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8017cc4:	f8c4 01e0 	str.w	r0, [r4, #480]	@ 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017cc8:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8017cca:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8017ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8017d88 <jinit_2pass_quantizer+0xd4>)
 8017cce:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8017cd4:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8017cd6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017cd8:	2b03      	cmp	r3, #3
 8017cda:	d005      	beq.n	8017ce8 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8017cdc:	6823      	ldr	r3, [r4, #0]
 8017cde:	2230      	movs	r2, #48	@ 0x30
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	615a      	str	r2, [r3, #20]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8017ce8:	6863      	ldr	r3, [r4, #4]
 8017cea:	2600      	movs	r6, #0
 8017cec:	2280      	movs	r2, #128	@ 0x80
 8017cee:	2101      	movs	r1, #1
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	4620      	mov	r0, r4
 8017cf4:	4798      	blx	r3
 8017cf6:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8017cf8:	6863      	ldr	r3, [r4, #4]
 8017cfa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017cfe:	69af      	ldr	r7, [r5, #24]
 8017d00:	2101      	movs	r1, #1
 8017d02:	685b      	ldr	r3, [r3, #4]
 8017d04:	4620      	mov	r0, r4
 8017d06:	4798      	blx	r3
 8017d08:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8017d0a:	3604      	adds	r6, #4
 8017d0c:	2e80      	cmp	r6, #128	@ 0x80
 8017d0e:	d1f3      	bne.n	8017cf8 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8017d10:	2301      	movs	r3, #1
 8017d12:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8017d14:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d031      	beq.n	8017d7e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8017d1a:	6e26      	ldr	r6, [r4, #96]	@ 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8017d1c:	2e07      	cmp	r6, #7
 8017d1e:	dc25      	bgt.n	8017d6c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8017d20:	223a      	movs	r2, #58	@ 0x3a
 8017d22:	6823      	ldr	r3, [r4, #0]
 8017d24:	615a      	str	r2, [r3, #20]
 8017d26:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017d28:	619a      	str	r2, [r3, #24]
 8017d2a:	4620      	mov	r0, r4
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8017d30:	6863      	ldr	r3, [r4, #4]
 8017d32:	4632      	mov	r2, r6
 8017d34:	2101      	movs	r1, #1
 8017d36:	4620      	mov	r0, r4
 8017d38:	689f      	ldr	r7, [r3, #8]
 8017d3a:	2303      	movs	r3, #3
 8017d3c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8017d3e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8017d42:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8017d46:	b1e3      	cbz	r3, 8017d82 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8017d48:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017d4a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8017d50:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017d54:	2306      	movs	r3, #6
 8017d56:	435a      	muls	r2, r3
 8017d58:	6863      	ldr	r3, [r4, #4]
 8017d5a:	320c      	adds	r2, #12
 8017d5c:	685b      	ldr	r3, [r3, #4]
 8017d5e:	4798      	blx	r3
 8017d60:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8017d62:	4620      	mov	r0, r4
  }
}
 8017d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8017d68:	f7ff bcca 	b.w	8017700 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8017d6c:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8017d70:	ddde      	ble.n	8017d30 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017d72:	223b      	movs	r2, #59	@ 0x3b
 8017d74:	6823      	ldr	r3, [r4, #0]
 8017d76:	615a      	str	r2, [r3, #20]
 8017d78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017d7c:	e7d4      	b.n	8017d28 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8017d7e:	612b      	str	r3, [r5, #16]
 8017d80:	e7df      	b.n	8017d42 <jinit_2pass_quantizer+0x8e>
}
 8017d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d84:	0801777d 	.word	0x0801777d
 8017d88:	08017771 	.word	0x08017771

08017d8c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8017d8c:	4408      	add	r0, r1
 8017d8e:	3801      	subs	r0, #1
}
 8017d90:	fb90 f0f1 	sdiv	r0, r0, r1
 8017d94:	4770      	bx	lr

08017d96 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8017d96:	1e4b      	subs	r3, r1, #1
 8017d98:	4403      	add	r3, r0
  return a - (a % b);
 8017d9a:	fb93 f0f1 	sdiv	r0, r3, r1
 8017d9e:	fb01 3010 	mls	r0, r1, r0, r3
}
 8017da2:	1a18      	subs	r0, r3, r0
 8017da4:	4770      	bx	lr

08017da6 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8017da6:	b570      	push	{r4, r5, r6, lr}
 8017da8:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8017daa:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8017dae:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8017db2:	2e00      	cmp	r6, #0
 8017db4:	dc00      	bgt.n	8017db8 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8017db6:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8017db8:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8017dba:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8017dbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8017dc0:	f855 0b04 	ldr.w	r0, [r5], #4
 8017dc4:	f013 faa1 	bl	802b30a <memcpy>
  for (row = num_rows; row > 0; row--) {
 8017dc8:	e7f3      	b.n	8017db2 <jcopy_sample_rows+0xc>

08017dca <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8017dca:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8017dcc:	01d2      	lsls	r2, r2, #7
 8017dce:	4601      	mov	r1, r0
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f013 ba9a 	b.w	802b30a <memcpy>

08017dd6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017dd6:	8880      	ldrh	r0, [r0, #4]
 8017dd8:	4770      	bx	lr

08017dda <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017dda:	b570      	push	{r4, r5, r6, lr}
 8017ddc:	6803      	ldr	r3, [r0, #0]
 8017dde:	460c      	mov	r4, r1
 8017de0:	2100      	movs	r1, #0
 8017de2:	4605      	mov	r5, r0
 8017de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017de6:	4798      	blx	r3
 8017de8:	4606      	mov	r6, r0
 8017dea:	682b      	ldr	r3, [r5, #0]
 8017dec:	4628      	mov	r0, r5
 8017dee:	1ba4      	subs	r4, r4, r6
 8017df0:	6a1b      	ldr	r3, [r3, #32]
 8017df2:	b2a4      	uxth	r4, r4
 8017df4:	4798      	blx	r3
 8017df6:	fbb4 f0f0 	udiv	r0, r4, r0
 8017dfa:	bd70      	pop	{r4, r5, r6, pc}

08017dfc <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	8083      	strh	r3, [r0, #4]
 8017e00:	4770      	bx	lr

08017e02 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017e02:	b510      	push	{r4, lr}
 8017e04:	6803      	ldr	r3, [r0, #0]
 8017e06:	4604      	mov	r4, r0
 8017e08:	8881      	ldrh	r1, [r0, #4]
 8017e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e0c:	4798      	blx	r3
 8017e0e:	88a3      	ldrh	r3, [r4, #4]
 8017e10:	3301      	adds	r3, #1
 8017e12:	80a3      	strh	r3, [r4, #4]
 8017e14:	bd10      	pop	{r4, pc}

08017e16 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017e16:	6803      	ldr	r3, [r0, #0]
 8017e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e1a:	4718      	bx	r3

08017e1c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017e1c:	4770      	bx	lr
	...

08017e20 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017e20:	4a02      	ldr	r2, [pc, #8]	@ (8017e2c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017e22:	6002      	str	r2, [r0, #0]
 8017e24:	2200      	movs	r2, #0
 8017e26:	8082      	strh	r2, [r0, #4]
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop
 8017e2c:	0803058c 	.word	0x0803058c

08017e30 <_ZN8touchgfx9Container13getFirstChildEv>:
 8017e30:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017e32:	4770      	bx	lr

08017e34 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017e34:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017e36:	2000      	movs	r0, #0
 8017e38:	b12b      	cbz	r3, 8017e46 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017e3a:	b920      	cbnz	r0, 8017e46 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017e3c:	1a5a      	subs	r2, r3, r1
 8017e3e:	699b      	ldr	r3, [r3, #24]
 8017e40:	4250      	negs	r0, r2
 8017e42:	4150      	adcs	r0, r2
 8017e44:	e7f8      	b.n	8017e38 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017e46:	4770      	bx	lr

08017e48 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017e48:	2300      	movs	r3, #0
 8017e4a:	6148      	str	r0, [r1, #20]
 8017e4c:	618b      	str	r3, [r1, #24]
 8017e4e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017e50:	b913      	cbnz	r3, 8017e58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8017e52:	6281      	str	r1, [r0, #40]	@ 0x28
 8017e54:	4770      	bx	lr
 8017e56:	4613      	mov	r3, r2
 8017e58:	699a      	ldr	r2, [r3, #24]
 8017e5a:	2a00      	cmp	r2, #0
 8017e5c:	d1fb      	bne.n	8017e56 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8017e5e:	6199      	str	r1, [r3, #24]
 8017e60:	4770      	bx	lr

08017e62 <_ZN8touchgfx9Container9removeAllEv>:
 8017e62:	2200      	movs	r2, #0
 8017e64:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017e66:	b123      	cbz	r3, 8017e72 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017e68:	6999      	ldr	r1, [r3, #24]
 8017e6a:	6281      	str	r1, [r0, #40]	@ 0x28
 8017e6c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017e70:	e7f8      	b.n	8017e64 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017e72:	4770      	bx	lr

08017e74 <_ZN8touchgfx9Container6unlinkEv>:
 8017e74:	2300      	movs	r3, #0
 8017e76:	6283      	str	r3, [r0, #40]	@ 0x28
 8017e78:	4770      	bx	lr

08017e7a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	8002      	strh	r2, [r0, #0]
 8017e7e:	8042      	strh	r2, [r0, #2]
 8017e80:	8082      	strh	r2, [r0, #4]
 8017e82:	80c2      	strh	r2, [r0, #6]
 8017e84:	4770      	bx	lr

08017e86 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017e86:	b570      	push	{r4, r5, r6, lr}
 8017e88:	460d      	mov	r5, r1
 8017e8a:	4616      	mov	r6, r2
 8017e8c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017e8e:	b13c      	cbz	r4, 8017ea0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017e90:	6823      	ldr	r3, [r4, #0]
 8017e92:	4620      	mov	r0, r4
 8017e94:	4632      	mov	r2, r6
 8017e96:	4629      	mov	r1, r5
 8017e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e9a:	4798      	blx	r3
 8017e9c:	69a4      	ldr	r4, [r4, #24]
 8017e9e:	e7f6      	b.n	8017e8e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017ea0:	bd70      	pop	{r4, r5, r6, pc}

08017ea2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017ea2:	b538      	push	{r3, r4, r5, lr}
 8017ea4:	460d      	mov	r5, r1
 8017ea6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017ea8:	b134      	cbz	r4, 8017eb8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017eaa:	682b      	ldr	r3, [r5, #0]
 8017eac:	4621      	mov	r1, r4
 8017eae:	4628      	mov	r0, r5
 8017eb0:	689b      	ldr	r3, [r3, #8]
 8017eb2:	4798      	blx	r3
 8017eb4:	69a4      	ldr	r4, [r4, #24]
 8017eb6:	e7f7      	b.n	8017ea8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017eb8:	bd38      	pop	{r3, r4, r5, pc}

08017eba <_ZN8touchgfx9ContainerD1Ev>:
 8017eba:	4770      	bx	lr

08017ebc <_ZN8touchgfx9ContainerD0Ev>:
 8017ebc:	b510      	push	{r4, lr}
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	212c      	movs	r1, #44	@ 0x2c
 8017ec2:	f012 fb0d 	bl	802a4e0 <_ZdlPvj>
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	bd10      	pop	{r4, pc}

08017eca <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017eca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017ecc:	b19b      	cbz	r3, 8017ef6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017ece:	428b      	cmp	r3, r1
 8017ed0:	d109      	bne.n	8017ee6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017ed2:	699a      	ldr	r2, [r3, #24]
 8017ed4:	2100      	movs	r1, #0
 8017ed6:	6159      	str	r1, [r3, #20]
 8017ed8:	6282      	str	r2, [r0, #40]	@ 0x28
 8017eda:	b902      	cbnz	r2, 8017ede <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017edc:	4770      	bx	lr
 8017ede:	6199      	str	r1, [r3, #24]
 8017ee0:	4770      	bx	lr
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	b13a      	cbz	r2, 8017ef6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017ee6:	699a      	ldr	r2, [r3, #24]
 8017ee8:	428a      	cmp	r2, r1
 8017eea:	d1fa      	bne.n	8017ee2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017eec:	698a      	ldr	r2, [r1, #24]
 8017eee:	619a      	str	r2, [r3, #24]
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017ef6:	4770      	bx	lr

08017ef8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017ef8:	b410      	push	{r4}
 8017efa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017efc:	4604      	mov	r4, r0
 8017efe:	b92b      	cbnz	r3, 8017f0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017f00:	6803      	ldr	r3, [r0, #0]
 8017f02:	4611      	mov	r1, r2
 8017f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017f0a:	4718      	bx	r3
 8017f0c:	b941      	cbnz	r1, 8017f20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017f0e:	6193      	str	r3, [r2, #24]
 8017f10:	6282      	str	r2, [r0, #40]	@ 0x28
 8017f12:	6154      	str	r4, [r2, #20]
 8017f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f18:	4770      	bx	lr
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	d0f9      	beq.n	8017f14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017f20:	4299      	cmp	r1, r3
 8017f22:	6998      	ldr	r0, [r3, #24]
 8017f24:	d1f9      	bne.n	8017f1a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017f26:	6190      	str	r0, [r2, #24]
 8017f28:	618a      	str	r2, [r1, #24]
 8017f2a:	e7f2      	b.n	8017f12 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08017f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f30:	461f      	mov	r7, r3
 8017f32:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8017f36:	460d      	mov	r5, r1
 8017f38:	4616      	mov	r6, r2
 8017f3a:	b103      	cbz	r3, 8017f3e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017f3c:	6038      	str	r0, [r7, #0]
 8017f3e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017f40:	b314      	cbz	r4, 8017f88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017f42:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017f46:	b1eb      	cbz	r3, 8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017f4c:	428d      	cmp	r5, r1
 8017f4e:	db19      	blt.n	8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f50:	b289      	uxth	r1, r1
 8017f52:	8923      	ldrh	r3, [r4, #8]
 8017f54:	440b      	add	r3, r1
 8017f56:	b21b      	sxth	r3, r3
 8017f58:	429d      	cmp	r5, r3
 8017f5a:	da13      	bge.n	8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f5c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017f60:	4296      	cmp	r6, r2
 8017f62:	db0f      	blt.n	8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f64:	b292      	uxth	r2, r2
 8017f66:	8963      	ldrh	r3, [r4, #10]
 8017f68:	4413      	add	r3, r2
 8017f6a:	b21b      	sxth	r3, r3
 8017f6c:	429e      	cmp	r6, r3
 8017f6e:	da09      	bge.n	8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f70:	6823      	ldr	r3, [r4, #0]
 8017f72:	1ab2      	subs	r2, r6, r2
 8017f74:	1a69      	subs	r1, r5, r1
 8017f76:	4620      	mov	r0, r4
 8017f78:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8017f7c:	b212      	sxth	r2, r2
 8017f7e:	463b      	mov	r3, r7
 8017f80:	b209      	sxth	r1, r1
 8017f82:	47c0      	blx	r8
 8017f84:	69a4      	ldr	r4, [r4, #24]
 8017f86:	e7db      	b.n	8017f40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f90:	4c6d      	ldr	r4, [pc, #436]	@ (8018148 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017f92:	b0a1      	sub	sp, #132	@ 0x84
 8017f94:	4606      	mov	r6, r0
 8017f96:	6824      	ldr	r4, [r4, #0]
 8017f98:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017f9a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8017f9e:	2400      	movs	r4, #0
 8017fa0:	9303      	str	r3, [sp, #12]
 8017fa2:	802c      	strh	r4, [r5, #0]
 8017fa4:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8017fa6:	802c      	strh	r4, [r5, #0]
 8017fa8:	601c      	str	r4, [r3, #0]
 8017faa:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017fae:	f7ff ffbd 	bl	8017f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017fb2:	f1b9 0f03 	cmp.w	r9, #3
 8017fb6:	f340 80c1 	ble.w	801813c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017fba:	4631      	mov	r1, r6
 8017fbc:	a80c      	add	r0, sp, #48	@ 0x30
 8017fbe:	f005 fd61 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fc2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8017fc6:	9306      	str	r3, [sp, #24]
 8017fc8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017fcc:	9307      	str	r3, [sp, #28]
 8017fce:	9b03      	ldr	r3, [sp, #12]
 8017fd0:	f8d3 a000 	ldr.w	sl, [r3]
 8017fd4:	f1ba 0f00 	cmp.w	sl, #0
 8017fd8:	f000 80b3 	beq.w	8018142 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017fdc:	4651      	mov	r1, sl
 8017fde:	a810      	add	r0, sp, #64	@ 0x40
 8017fe0:	f005 fd50 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fe4:	2002      	movs	r0, #2
 8017fe6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8017fea:	9b01      	ldr	r3, [sp, #4]
 8017fec:	9a06      	ldr	r2, [sp, #24]
 8017fee:	fb91 f1f0 	sdiv	r1, r1, r0
 8017ff2:	189d      	adds	r5, r3, r2
 8017ff4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8017ff8:	9a07      	ldr	r2, [sp, #28]
 8017ffa:	4419      	add	r1, r3
 8017ffc:	9b02      	ldr	r3, [sp, #8]
 8017ffe:	4413      	add	r3, r2
 8018000:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8018004:	1a6d      	subs	r5, r5, r1
 8018006:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801800a:	fb92 f2f0 	sdiv	r2, r2, r0
 801800e:	440a      	add	r2, r1
 8018010:	1a9b      	subs	r3, r3, r2
 8018012:	435b      	muls	r3, r3
 8018014:	fb05 3505 	mla	r5, r5, r5, r3
 8018018:	4f4c      	ldr	r7, [pc, #304]	@ (801814c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801801a:	ac10      	add	r4, sp, #64	@ 0x40
 801801c:	f1b9 0f0c 	cmp.w	r9, #12
 8018020:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018024:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018028:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801802a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801802c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018034:	f04f 0303 	mov.w	r3, #3
 8018038:	bfd8      	it	le
 801803a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801803e:	f04f 0400 	mov.w	r4, #0
 8018042:	f8cd 9000 	str.w	r9, [sp]
 8018046:	bfcc      	ite	gt
 8018048:	4698      	movgt	r8, r3
 801804a:	fb92 f8f3 	sdivle	r8, r2, r3
 801804e:	1c63      	adds	r3, r4, #1
 8018050:	aa10      	add	r2, sp, #64	@ 0x40
 8018052:	f004 0401 	and.w	r4, r4, #1
 8018056:	f04f 0b00 	mov.w	fp, #0
 801805a:	9308      	str	r3, [sp, #32]
 801805c:	9b00      	ldr	r3, [sp, #0]
 801805e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8018062:	fb93 f3f8 	sdiv	r3, r3, r8
 8018066:	3404      	adds	r4, #4
 8018068:	b29b      	uxth	r3, r3
 801806a:	9304      	str	r3, [sp, #16]
 801806c:	9a04      	ldr	r2, [sp, #16]
 801806e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018072:	fb13 f302 	smulbb	r3, r3, r2
 8018076:	9a01      	ldr	r2, [sp, #4]
 8018078:	b29b      	uxth	r3, r3
 801807a:	1899      	adds	r1, r3, r2
 801807c:	9305      	str	r3, [sp, #20]
 801807e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018082:	b209      	sxth	r1, r1
 8018084:	4299      	cmp	r1, r3
 8018086:	db4d      	blt.n	8018124 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018088:	8932      	ldrh	r2, [r6, #8]
 801808a:	4413      	add	r3, r2
 801808c:	b21b      	sxth	r3, r3
 801808e:	4299      	cmp	r1, r3
 8018090:	da48      	bge.n	8018124 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018092:	9b04      	ldr	r3, [sp, #16]
 8018094:	6827      	ldr	r7, [r4, #0]
 8018096:	fb17 f703 	smulbb	r7, r7, r3
 801809a:	9b02      	ldr	r3, [sp, #8]
 801809c:	b2bf      	uxth	r7, r7
 801809e:	18fa      	adds	r2, r7, r3
 80180a0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80180a4:	b212      	sxth	r2, r2
 80180a6:	429a      	cmp	r2, r3
 80180a8:	db3c      	blt.n	8018124 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180aa:	8970      	ldrh	r0, [r6, #10]
 80180ac:	4403      	add	r3, r0
 80180ae:	b21b      	sxth	r3, r3
 80180b0:	429a      	cmp	r2, r3
 80180b2:	da37      	bge.n	8018124 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180b4:	2300      	movs	r3, #0
 80180b6:	4630      	mov	r0, r6
 80180b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80180ba:	ab0b      	add	r3, sp, #44	@ 0x2c
 80180bc:	f7ff ff36 	bl	8017f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80180c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80180c2:	b37a      	cbz	r2, 8018124 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180c4:	4552      	cmp	r2, sl
 80180c6:	d02d      	beq.n	8018124 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180c8:	4611      	mov	r1, r2
 80180ca:	a80e      	add	r0, sp, #56	@ 0x38
 80180cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80180ce:	f005 fcd9 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180d2:	f04f 0e02 	mov.w	lr, #2
 80180d6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80180da:	9a06      	ldr	r2, [sp, #24]
 80180dc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80180e0:	9b01      	ldr	r3, [sp, #4]
 80180e2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80180e6:	4413      	add	r3, r2
 80180e8:	9a07      	ldr	r2, [sp, #28]
 80180ea:	fb91 f1fe 	sdiv	r1, r1, lr
 80180ee:	fb9c fcfe 	sdiv	ip, ip, lr
 80180f2:	4401      	add	r1, r0
 80180f4:	1a58      	subs	r0, r3, r1
 80180f6:	9b02      	ldr	r3, [sp, #8]
 80180f8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80180fc:	4413      	add	r3, r2
 80180fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018100:	448c      	add	ip, r1
 8018102:	eba3 030c 	sub.w	r3, r3, ip
 8018106:	435b      	muls	r3, r3
 8018108:	fb00 3300 	mla	r3, r0, r0, r3
 801810c:	42ab      	cmp	r3, r5
 801810e:	d208      	bcs.n	8018122 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018112:	461d      	mov	r5, r3
 8018114:	9803      	ldr	r0, [sp, #12]
 8018116:	6001      	str	r1, [r0, #0]
 8018118:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801811a:	9805      	ldr	r0, [sp, #20]
 801811c:	8008      	strh	r0, [r1, #0]
 801811e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8018120:	800f      	strh	r7, [r1, #0]
 8018122:	4692      	mov	sl, r2
 8018124:	f10b 0b01 	add.w	fp, fp, #1
 8018128:	3408      	adds	r4, #8
 801812a:	f1bb 0f04 	cmp.w	fp, #4
 801812e:	d19d      	bne.n	801806c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018130:	9b00      	ldr	r3, [sp, #0]
 8018132:	9c08      	ldr	r4, [sp, #32]
 8018134:	444b      	add	r3, r9
 8018136:	4544      	cmp	r4, r8
 8018138:	9300      	str	r3, [sp, #0]
 801813a:	d188      	bne.n	801804e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801813c:	b021      	add	sp, #132	@ 0x84
 801813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018142:	f04f 35ff 	mov.w	r5, #4294967295
 8018146:	e767      	b.n	8018018 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8018148:	24015dd4 	.word	0x24015dd4
 801814c:	0802bfe0 	.word	0x0802bfe0

08018150 <_ZN8touchgfx4RectaNERKS0_>:
 8018150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018154:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018158:	888c      	ldrh	r4, [r1, #4]
 801815a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801815e:	443c      	add	r4, r7
 8018160:	b2a4      	uxth	r4, r4
 8018162:	fa0f f884 	sxth.w	r8, r4
 8018166:	45c1      	cmp	r9, r8
 8018168:	da2f      	bge.n	80181ca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801816a:	8882      	ldrh	r2, [r0, #4]
 801816c:	444a      	add	r2, r9
 801816e:	b292      	uxth	r2, r2
 8018170:	fa0f fe82 	sxth.w	lr, r2
 8018174:	4577      	cmp	r7, lr
 8018176:	da28      	bge.n	80181ca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018178:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801817c:	88cb      	ldrh	r3, [r1, #6]
 801817e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018182:	442b      	add	r3, r5
 8018184:	b21b      	sxth	r3, r3
 8018186:	429e      	cmp	r6, r3
 8018188:	da1f      	bge.n	80181ca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801818a:	88c3      	ldrh	r3, [r0, #6]
 801818c:	4433      	add	r3, r6
 801818e:	b29b      	uxth	r3, r3
 8018190:	fa0f fc83 	sxth.w	ip, r3
 8018194:	4565      	cmp	r5, ip
 8018196:	da18      	bge.n	80181ca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018198:	454f      	cmp	r7, r9
 801819a:	bfb8      	it	lt
 801819c:	464f      	movlt	r7, r9
 801819e:	42b5      	cmp	r5, r6
 80181a0:	bfb8      	it	lt
 80181a2:	4635      	movlt	r5, r6
 80181a4:	45f0      	cmp	r8, lr
 80181a6:	bfd8      	it	le
 80181a8:	4622      	movle	r2, r4
 80181aa:	1bd2      	subs	r2, r2, r7
 80181ac:	8082      	strh	r2, [r0, #4]
 80181ae:	884a      	ldrh	r2, [r1, #2]
 80181b0:	88c9      	ldrh	r1, [r1, #6]
 80181b2:	8007      	strh	r7, [r0, #0]
 80181b4:	440a      	add	r2, r1
 80181b6:	8045      	strh	r5, [r0, #2]
 80181b8:	b292      	uxth	r2, r2
 80181ba:	b211      	sxth	r1, r2
 80181bc:	458c      	cmp	ip, r1
 80181be:	bfa8      	it	ge
 80181c0:	4613      	movge	r3, r2
 80181c2:	1b5b      	subs	r3, r3, r5
 80181c4:	80c3      	strh	r3, [r0, #6]
 80181c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181ca:	2300      	movs	r3, #0
 80181cc:	8003      	strh	r3, [r0, #0]
 80181ce:	8043      	strh	r3, [r0, #2]
 80181d0:	8083      	strh	r3, [r0, #4]
 80181d2:	80c3      	strh	r3, [r0, #6]
 80181d4:	e7f7      	b.n	80181c6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080181d6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80181d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	dd06      	ble.n	80181ec <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80181de:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80181e2:	2800      	cmp	r0, #0
 80181e4:	bfcc      	ite	gt
 80181e6:	2000      	movgt	r0, #0
 80181e8:	2001      	movle	r0, #1
 80181ea:	4770      	bx	lr
 80181ec:	2001      	movs	r0, #1
 80181ee:	4770      	bx	lr

080181f0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80181f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181f4:	2300      	movs	r3, #0
 80181f6:	4604      	mov	r4, r0
 80181f8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80181fa:	8003      	strh	r3, [r0, #0]
 80181fc:	8043      	strh	r3, [r0, #2]
 80181fe:	8083      	strh	r3, [r0, #4]
 8018200:	80c3      	strh	r3, [r0, #6]
 8018202:	2d00      	cmp	r5, #0
 8018204:	d040      	beq.n	8018288 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8018206:	1d28      	adds	r0, r5, #4
 8018208:	f7ff ffe5 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801820c:	b988      	cbnz	r0, 8018232 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801820e:	4620      	mov	r0, r4
 8018210:	f7ff ffe1 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018214:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018218:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801821c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018220:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018224:	b138      	cbz	r0, 8018236 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018226:	8022      	strh	r2, [r4, #0]
 8018228:	8063      	strh	r3, [r4, #2]
 801822a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801822e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018232:	69ad      	ldr	r5, [r5, #24]
 8018234:	e7e5      	b.n	8018202 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018236:	f9b4 0000 	ldrsh.w	r0, [r4]
 801823a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801823e:	4290      	cmp	r0, r2
 8018240:	4607      	mov	r7, r0
 8018242:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018246:	460e      	mov	r6, r1
 8018248:	bfa8      	it	ge
 801824a:	4617      	movge	r7, r2
 801824c:	4299      	cmp	r1, r3
 801824e:	4472      	add	r2, lr
 8018250:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018254:	bfa8      	it	ge
 8018256:	461e      	movge	r6, r3
 8018258:	4440      	add	r0, r8
 801825a:	4471      	add	r1, lr
 801825c:	4463      	add	r3, ip
 801825e:	b200      	sxth	r0, r0
 8018260:	8027      	strh	r7, [r4, #0]
 8018262:	b212      	sxth	r2, r2
 8018264:	8066      	strh	r6, [r4, #2]
 8018266:	b209      	sxth	r1, r1
 8018268:	b21b      	sxth	r3, r3
 801826a:	4290      	cmp	r0, r2
 801826c:	bfac      	ite	ge
 801826e:	ebc7 0200 	rsbge	r2, r7, r0
 8018272:	ebc7 0202 	rsblt	r2, r7, r2
 8018276:	4299      	cmp	r1, r3
 8018278:	bfac      	ite	ge
 801827a:	ebc6 0301 	rsbge	r3, r6, r1
 801827e:	ebc6 0303 	rsblt	r3, r6, r3
 8018282:	80a2      	strh	r2, [r4, #4]
 8018284:	80e3      	strh	r3, [r4, #6]
 8018286:	e7d4      	b.n	8018232 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018288:	4620      	mov	r0, r4
 801828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801828e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801828e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018292:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8018296:	b383      	cbz	r3, 80182fa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018298:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801829a:	b374      	cbz	r4, 80182fa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801829c:	f9b1 5000 	ldrsh.w	r5, [r1]
 80182a0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80182a4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80182a8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80182ac:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80182b0:	b303      	cbz	r3, 80182f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80182b2:	4668      	mov	r0, sp
 80182b4:	1d21      	adds	r1, r4, #4
 80182b6:	f8ad 5000 	strh.w	r5, [sp]
 80182ba:	f8ad 6002 	strh.w	r6, [sp, #2]
 80182be:	f8ad 7004 	strh.w	r7, [sp, #4]
 80182c2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80182c6:	f7ff ff43 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 80182ca:	4668      	mov	r0, sp
 80182cc:	f7ff ff83 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80182d0:	b980      	cbnz	r0, 80182f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80182d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80182d6:	4669      	mov	r1, sp
 80182d8:	88a2      	ldrh	r2, [r4, #4]
 80182da:	4620      	mov	r0, r4
 80182dc:	1a9b      	subs	r3, r3, r2
 80182de:	88e2      	ldrh	r2, [r4, #6]
 80182e0:	f8ad 3000 	strh.w	r3, [sp]
 80182e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80182e8:	1a9b      	subs	r3, r3, r2
 80182ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80182ee:	6823      	ldr	r3, [r4, #0]
 80182f0:	689b      	ldr	r3, [r3, #8]
 80182f2:	4798      	blx	r3
 80182f4:	69a4      	ldr	r4, [r4, #24]
 80182f6:	2c00      	cmp	r4, #0
 80182f8:	d1d8      	bne.n	80182ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80182fa:	b002      	add	sp, #8
 80182fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018300 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018302:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8018306:	460d      	mov	r5, r1
 8018308:	4616      	mov	r6, r2
 801830a:	b323      	cbz	r3, 8018356 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801830c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801830e:	b314      	cbz	r4, 8018356 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018310:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8018314:	b1eb      	cbz	r3, 8018352 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018316:	6828      	ldr	r0, [r5, #0]
 8018318:	466b      	mov	r3, sp
 801831a:	6869      	ldr	r1, [r5, #4]
 801831c:	c303      	stmia	r3!, {r0, r1}
 801831e:	4668      	mov	r0, sp
 8018320:	1d21      	adds	r1, r4, #4
 8018322:	f7ff ff15 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 8018326:	4668      	mov	r0, sp
 8018328:	f7ff ff55 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801832c:	b988      	cbnz	r0, 8018352 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801832e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018332:	4669      	mov	r1, sp
 8018334:	88a2      	ldrh	r2, [r4, #4]
 8018336:	4620      	mov	r0, r4
 8018338:	1a9b      	subs	r3, r3, r2
 801833a:	88e2      	ldrh	r2, [r4, #6]
 801833c:	f8ad 3000 	strh.w	r3, [sp]
 8018340:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018344:	1a9b      	subs	r3, r3, r2
 8018346:	4632      	mov	r2, r6
 8018348:	f8ad 3002 	strh.w	r3, [sp, #2]
 801834c:	6823      	ldr	r3, [r4, #0]
 801834e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018350:	4798      	blx	r3
 8018352:	69a4      	ldr	r4, [r4, #24]
 8018354:	e7db      	b.n	801830e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8018356:	b002      	add	sp, #8
 8018358:	bd70      	pop	{r4, r5, r6, pc}

0801835a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801835a:	6803      	ldr	r3, [r0, #0]
 801835c:	b513      	push	{r0, r1, r4, lr}
 801835e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8018362:	2300      	movs	r3, #0
 8018364:	e9cd 3300 	strd	r3, r3, [sp]
 8018368:	466b      	mov	r3, sp
 801836a:	47a0      	blx	r4
 801836c:	b002      	add	sp, #8
 801836e:	bd10      	pop	{r4, pc}

08018370 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018370:	2301      	movs	r3, #1
 8018372:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018376:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801837a:	4770      	bx	lr

0801837c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801837c:	2301      	movs	r3, #1
 801837e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018382:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8018386:	4770      	bx	lr

08018388 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018388:	6843      	ldr	r3, [r0, #4]
 801838a:	2201      	movs	r2, #1
 801838c:	725a      	strb	r2, [r3, #9]
 801838e:	6840      	ldr	r0, [r0, #4]
 8018390:	6803      	ldr	r3, [r0, #0]
 8018392:	691b      	ldr	r3, [r3, #16]
 8018394:	4718      	bx	r3

08018396 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018396:	6840      	ldr	r0, [r0, #4]
 8018398:	6803      	ldr	r3, [r0, #0]
 801839a:	689b      	ldr	r3, [r3, #8]
 801839c:	4718      	bx	r3

0801839e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801839e:	b530      	push	{r4, r5, lr}
 80183a0:	b08b      	sub	sp, #44	@ 0x2c
 80183a2:	6804      	ldr	r4, [r0, #0]
 80183a4:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80183a8:	9509      	str	r5, [sp, #36]	@ 0x24
 80183aa:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80183ae:	9508      	str	r5, [sp, #32]
 80183b0:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80183b4:	9507      	str	r5, [sp, #28]
 80183b6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80183ba:	9506      	str	r5, [sp, #24]
 80183bc:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80183c0:	9505      	str	r5, [sp, #20]
 80183c2:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80183c6:	9504      	str	r5, [sp, #16]
 80183c8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80183cc:	9503      	str	r5, [sp, #12]
 80183ce:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80183d2:	9502      	str	r5, [sp, #8]
 80183d4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80183d8:	e9cd 3500 	strd	r3, r5, [sp]
 80183dc:	4613      	mov	r3, r2
 80183de:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80183e0:	2200      	movs	r2, #0
 80183e2:	47a0      	blx	r4
 80183e4:	b00b      	add	sp, #44	@ 0x2c
 80183e6:	bd30      	pop	{r4, r5, pc}

080183e8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80183e8:	4b04      	ldr	r3, [pc, #16]	@ (80183fc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	b123      	cbz	r3, 80183f8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80183ee:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80183f2:	f080 0001 	eor.w	r0, r0, #1
 80183f6:	4770      	bx	lr
 80183f8:	2001      	movs	r0, #1
 80183fa:	4770      	bx	lr
 80183fc:	24015dd2 	.word	0x24015dd2

08018400 <_ZN8touchgfx3HAL8endFrameEv>:
 8018400:	b510      	push	{r4, lr}
 8018402:	4604      	mov	r4, r0
 8018404:	6840      	ldr	r0, [r0, #4]
 8018406:	6803      	ldr	r3, [r0, #0]
 8018408:	689b      	ldr	r3, [r3, #8]
 801840a:	4798      	blx	r3
 801840c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8018410:	b113      	cbz	r3, 8018418 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018412:	2301      	movs	r3, #1
 8018414:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8018418:	bd10      	pop	{r4, pc}

0801841a <_ZN8touchgfx3HAL10initializeEv>:
 801841a:	b510      	push	{r4, lr}
 801841c:	4604      	mov	r4, r0
 801841e:	f7e9 fadb 	bl	80019d8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8018422:	f7e9 f9a1 	bl	8001768 <_ZN8touchgfx4GPIO4initEv>
 8018426:	6860      	ldr	r0, [r4, #4]
 8018428:	6803      	ldr	r3, [r0, #0]
 801842a:	68db      	ldr	r3, [r3, #12]
 801842c:	4798      	blx	r3
 801842e:	68e0      	ldr	r0, [r4, #12]
 8018430:	6803      	ldr	r3, [r0, #0]
 8018432:	689b      	ldr	r3, [r3, #8]
 8018434:	4798      	blx	r3
 8018436:	6823      	ldr	r3, [r4, #0]
 8018438:	4620      	mov	r0, r4
 801843a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801843c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018440:	4718      	bx	r3
	...

08018444 <_ZN8touchgfx3HAL4tickEv>:
 8018444:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018446:	6803      	ldr	r3, [r0, #0]
 8018448:	4604      	mov	r4, r0
 801844a:	4d5b      	ldr	r5, [pc, #364]	@ (80185b8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801844c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018450:	4798      	blx	r3
 8018452:	2800      	cmp	r0, #0
 8018454:	f000 8095 	beq.w	8018582 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8018458:	2001      	movs	r0, #1
 801845a:	2600      	movs	r6, #0
 801845c:	f7e9 f8e2 	bl	8001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018460:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8018464:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8018468:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801846c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8018470:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8018474:	b133      	cbz	r3, 8018484 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018476:	6823      	ldr	r3, [r4, #0]
 8018478:	4620      	mov	r0, r4
 801847a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801847e:	4798      	blx	r3
 8018480:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8018484:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8018488:	2601      	movs	r6, #1
 801848a:	6862      	ldr	r2, [r4, #4]
 801848c:	f083 0301 	eor.w	r3, r3, #1
 8018490:	702e      	strb	r6, [r5, #0]
 8018492:	7253      	strb	r3, [r2, #9]
 8018494:	f004 f9e2 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 8018498:	6803      	ldr	r3, [r0, #0]
 801849a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801849c:	4798      	blx	r3
 801849e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80184a2:	b90b      	cbnz	r3, 80184a8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80184a4:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80184a8:	f004 f9d8 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 80184ac:	6803      	ldr	r3, [r0, #0]
 80184ae:	695b      	ldr	r3, [r3, #20]
 80184b0:	4798      	blx	r3
 80184b2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80184b4:	6803      	ldr	r3, [r0, #0]
 80184b6:	691b      	ldr	r3, [r3, #16]
 80184b8:	4798      	blx	r3
 80184ba:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80184be:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80184c2:	3b01      	subs	r3, #1
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80184ca:	b10a      	cbz	r2, 80184d0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d1eb      	bne.n	80184a8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80184d0:	4a3a      	ldr	r2, [pc, #232]	@ (80185bc <_ZN8touchgfx3HAL4tickEv+0x178>)
 80184d2:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80184d6:	7813      	ldrb	r3, [r2, #0]
 80184d8:	3301      	adds	r3, #1
 80184da:	b25b      	sxtb	r3, r3
 80184dc:	4299      	cmp	r1, r3
 80184de:	7013      	strb	r3, [r2, #0]
 80184e0:	dc10      	bgt.n	8018504 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80184e2:	2300      	movs	r3, #0
 80184e4:	68e0      	ldr	r0, [r4, #12]
 80184e6:	a902      	add	r1, sp, #8
 80184e8:	7013      	strb	r3, [r2, #0]
 80184ea:	aa03      	add	r2, sp, #12
 80184ec:	6803      	ldr	r3, [r0, #0]
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	4798      	blx	r3
 80184f2:	6823      	ldr	r3, [r4, #0]
 80184f4:	2800      	cmp	r0, #0
 80184f6:	d050      	beq.n	801859a <_ZN8touchgfx3HAL4tickEv+0x156>
 80184f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80184fc:	4620      	mov	r0, r4
 80184fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018502:	4798      	blx	r3
 8018504:	2300      	movs	r3, #0
 8018506:	6960      	ldr	r0, [r4, #20]
 8018508:	f88d 3007 	strb.w	r3, [sp, #7]
 801850c:	b158      	cbz	r0, 8018526 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801850e:	6803      	ldr	r3, [r0, #0]
 8018510:	f10d 0107 	add.w	r1, sp, #7
 8018514:	68db      	ldr	r3, [r3, #12]
 8018516:	4798      	blx	r3
 8018518:	b128      	cbz	r0, 8018526 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801851a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801851c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018520:	6803      	ldr	r3, [r0, #0]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	4798      	blx	r3
 8018526:	f104 001c 	add.w	r0, r4, #28
 801852a:	f011 f9bd 	bl	80298a8 <_ZN8touchgfx8Gestures4tickEv>
 801852e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8018532:	b30b      	cbz	r3, 8018578 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018534:	6920      	ldr	r0, [r4, #16]
 8018536:	6803      	ldr	r3, [r0, #0]
 8018538:	691b      	ldr	r3, [r3, #16]
 801853a:	4798      	blx	r3
 801853c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801853e:	4606      	mov	r6, r0
 8018540:	b903      	cbnz	r3, 8018544 <_ZN8touchgfx3HAL4tickEv+0x100>
 8018542:	6760      	str	r0, [r4, #116]	@ 0x74
 8018544:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8018546:	4a1e      	ldr	r2, [pc, #120]	@ (80185c0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018548:	1af3      	subs	r3, r6, r3
 801854a:	4293      	cmp	r3, r2
 801854c:	d914      	bls.n	8018578 <_ZN8touchgfx3HAL4tickEv+0x134>
 801854e:	6920      	ldr	r0, [r4, #16]
 8018550:	6803      	ldr	r3, [r0, #0]
 8018552:	699b      	ldr	r3, [r3, #24]
 8018554:	4798      	blx	r3
 8018556:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8018558:	2264      	movs	r2, #100	@ 0x64
 801855a:	1af3      	subs	r3, r6, r3
 801855c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018560:	fbb0 f0f3 	udiv	r0, r0, r3
 8018564:	2800      	cmp	r0, #0
 8018566:	dc1d      	bgt.n	80185a4 <_ZN8touchgfx3HAL4tickEv+0x160>
 8018568:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 801856c:	6920      	ldr	r0, [r4, #16]
 801856e:	2100      	movs	r1, #0
 8018570:	6803      	ldr	r3, [r0, #0]
 8018572:	69db      	ldr	r3, [r3, #28]
 8018574:	4798      	blx	r3
 8018576:	6766      	str	r6, [r4, #116]	@ 0x74
 8018578:	f004 f970 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 801857c:	6803      	ldr	r3, [r0, #0]
 801857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018580:	4798      	blx	r3
 8018582:	6823      	ldr	r3, [r4, #0]
 8018584:	4620      	mov	r0, r4
 8018586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801858a:	4798      	blx	r3
 801858c:	2001      	movs	r0, #1
 801858e:	f7e9 f87b 	bl	8001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018592:	2300      	movs	r3, #0
 8018594:	702b      	strb	r3, [r5, #0]
 8018596:	b004      	add	sp, #16
 8018598:	bd70      	pop	{r4, r5, r6, pc}
 801859a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801859e:	4620      	mov	r0, r4
 80185a0:	4798      	blx	r3
 80185a2:	e7af      	b.n	8018504 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80185a4:	2863      	cmp	r0, #99	@ 0x63
 80185a6:	bfcb      	itete	gt
 80185a8:	2300      	movgt	r3, #0
 80185aa:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80185ae:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80185b2:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80185b6:	e7d9      	b.n	801856c <_ZN8touchgfx3HAL4tickEv+0x128>
 80185b8:	24015dd8 	.word	0x24015dd8
 80185bc:	24015dd9 	.word	0x24015dd9
 80185c0:	05f5e100 	.word	0x05f5e100

080185c4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80185c4:	b510      	push	{r4, lr}
 80185c6:	4604      	mov	r4, r0
 80185c8:	f7e9 fa36 	bl	8001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80185cc:	2200      	movs	r2, #0
 80185ce:	6863      	ldr	r3, [r4, #4]
 80185d0:	729a      	strb	r2, [r3, #10]
 80185d2:	bd10      	pop	{r4, pc}

080185d4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80185d4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80185d6:	301c      	adds	r0, #28
 80185d8:	f011 b964 	b.w	80298a4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080185dc <_ZN8touchgfx3HAL5touchEll>:
 80185dc:	b530      	push	{r4, r5, lr}
 80185de:	b087      	sub	sp, #28
 80185e0:	4604      	mov	r4, r0
 80185e2:	a804      	add	r0, sp, #16
 80185e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80185e8:	f003 ff20 	bl	801c42c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80185ec:	9b04      	ldr	r3, [sp, #16]
 80185ee:	a906      	add	r1, sp, #24
 80185f0:	a803      	add	r0, sp, #12
 80185f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80185f6:	9b05      	ldr	r3, [sp, #20]
 80185f8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80185fc:	f003 ff68 	bl	801c4d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018600:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8018604:	f104 001c 	add.w	r0, r4, #28
 8018608:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801860c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018610:	b189      	cbz	r1, 8018636 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018612:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8018616:	9300      	str	r3, [sp, #0]
 8018618:	4613      	mov	r3, r2
 801861a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801861e:	462a      	mov	r2, r5
 8018620:	f011 f950 	bl	80298c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018624:	b128      	cbz	r0, 8018632 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018626:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801862a:	6623      	str	r3, [r4, #96]	@ 0x60
 801862c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018630:	6663      	str	r3, [r4, #100]	@ 0x64
 8018632:	b007      	add	sp, #28
 8018634:	bd30      	pop	{r4, r5, pc}
 8018636:	f011 f985 	bl	8029944 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801863a:	2301      	movs	r3, #1
 801863c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8018640:	e7f1      	b.n	8018626 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018642:	b510      	push	{r4, lr}
 8018644:	2b00      	cmp	r3, #0
 8018646:	d046      	beq.n	80186d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018648:	ea81 0002 	eor.w	r0, r1, r2
 801864c:	07c4      	lsls	r4, r0, #31
 801864e:	d508      	bpl.n	8018662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018650:	440b      	add	r3, r1
 8018652:	3a01      	subs	r2, #1
 8018654:	428b      	cmp	r3, r1
 8018656:	d93e      	bls.n	80186d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018658:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801865c:	f801 0b01 	strb.w	r0, [r1], #1
 8018660:	e7f8      	b.n	8018654 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018662:	07d0      	lsls	r0, r2, #31
 8018664:	bf42      	ittt	mi
 8018666:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801866a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801866e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018672:	2b01      	cmp	r3, #1
 8018674:	d911      	bls.n	801869a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018676:	ea81 0402 	eor.w	r4, r1, r2
 801867a:	4610      	mov	r0, r2
 801867c:	07a4      	lsls	r4, r4, #30
 801867e:	d022      	beq.n	80186c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018680:	f023 0401 	bic.w	r4, r3, #1
 8018684:	440c      	add	r4, r1
 8018686:	428c      	cmp	r4, r1
 8018688:	4602      	mov	r2, r0
 801868a:	d904      	bls.n	8018696 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801868c:	8812      	ldrh	r2, [r2, #0]
 801868e:	3002      	adds	r0, #2
 8018690:	f821 2b02 	strh.w	r2, [r1], #2
 8018694:	e7f7      	b.n	8018686 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018696:	f003 0301 	and.w	r3, r3, #1
 801869a:	f023 0003 	bic.w	r0, r3, #3
 801869e:	4408      	add	r0, r1
 80186a0:	4288      	cmp	r0, r1
 80186a2:	4614      	mov	r4, r2
 80186a4:	d904      	bls.n	80186b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80186a6:	6824      	ldr	r4, [r4, #0]
 80186a8:	3204      	adds	r2, #4
 80186aa:	f841 4b04 	str.w	r4, [r1], #4
 80186ae:	e7f7      	b.n	80186a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80186b0:	f003 0303 	and.w	r3, r3, #3
 80186b4:	3a01      	subs	r2, #1
 80186b6:	440b      	add	r3, r1
 80186b8:	428b      	cmp	r3, r1
 80186ba:	d90c      	bls.n	80186d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80186bc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80186c0:	f801 0b01 	strb.w	r0, [r1], #1
 80186c4:	e7f8      	b.n	80186b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80186c6:	0790      	lsls	r0, r2, #30
 80186c8:	d0e7      	beq.n	801869a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80186ca:	f832 0b02 	ldrh.w	r0, [r2], #2
 80186ce:	3b02      	subs	r3, #2
 80186d0:	f821 0b02 	strh.w	r0, [r1], #2
 80186d4:	e7e1      	b.n	801869a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80186d6:	2001      	movs	r0, #1
 80186d8:	bd10      	pop	{r4, pc}

080186da <_ZN8touchgfx3HAL7noTouchEv>:
 80186da:	b510      	push	{r4, lr}
 80186dc:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80186e0:	4604      	mov	r4, r0
 80186e2:	b153      	cbz	r3, 80186fa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80186e4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80186e8:	2101      	movs	r1, #1
 80186ea:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80186ee:	301c      	adds	r0, #28
 80186f0:	f011 f928 	bl	8029944 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80186f4:	2300      	movs	r3, #0
 80186f6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80186fa:	bd10      	pop	{r4, pc}

080186fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80186fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018700:	b085      	sub	sp, #20
 8018702:	4604      	mov	r4, r0
 8018704:	2000      	movs	r0, #0
 8018706:	4699      	mov	r9, r3
 8018708:	ad04      	add	r5, sp, #16
 801870a:	460f      	mov	r7, r1
 801870c:	4690      	mov	r8, r2
 801870e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018712:	69a0      	ldr	r0, [r4, #24]
 8018714:	6806      	ldr	r6, [r0, #0]
 8018716:	9501      	str	r5, [sp, #4]
 8018718:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801871c:	9500      	str	r5, [sp, #0]
 801871e:	6835      	ldr	r5, [r6, #0]
 8018720:	47a8      	blx	r5
 8018722:	4d10      	ldr	r5, [pc, #64]	@ (8018764 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8018724:	4606      	mov	r6, r0
 8018726:	f8a5 9000 	strh.w	r9, [r5]
 801872a:	f7ea feb7 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 801872e:	6803      	ldr	r3, [r0, #0]
 8018730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018732:	4798      	blx	r3
 8018734:	b128      	cbz	r0, 8018742 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8018736:	2801      	cmp	r0, #1
 8018738:	d00b      	beq.n	8018752 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801873a:	4630      	mov	r0, r6
 801873c:	b005      	add	sp, #20
 801873e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018742:	882b      	ldrh	r3, [r5, #0]
 8018744:	fb08 7203 	mla	r2, r8, r3, r7
 8018748:	9b03      	ldr	r3, [sp, #12]
 801874a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801874e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018750:	e7f3      	b.n	801873a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018752:	882a      	ldrh	r2, [r5, #0]
 8018754:	9b03      	ldr	r3, [sp, #12]
 8018756:	fb08 7202 	mla	r2, r8, r2, r7
 801875a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801875e:	1a9a      	subs	r2, r3, r2
 8018760:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8018762:	e7ea      	b.n	801873a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018764:	24015dce 	.word	0x24015dce

08018768 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876a:	b08b      	sub	sp, #44	@ 0x2c
 801876c:	4617      	mov	r7, r2
 801876e:	4604      	mov	r4, r0
 8018770:	460e      	mov	r6, r1
 8018772:	461d      	mov	r5, r3
 8018774:	f7ea fe92 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018778:	6803      	ldr	r3, [r0, #0]
 801877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801877c:	4798      	blx	r3
 801877e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018782:	9007      	str	r0, [sp, #28]
 8018784:	4631      	mov	r1, r6
 8018786:	6822      	ldr	r2, [r4, #0]
 8018788:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801878c:	4b0c      	ldr	r3, [pc, #48]	@ (80187c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801878e:	4620      	mov	r0, r4
 8018790:	881b      	ldrh	r3, [r3, #0]
 8018792:	9306      	str	r3, [sp, #24]
 8018794:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018798:	9305      	str	r3, [sp, #20]
 801879a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801879e:	9304      	str	r3, [sp, #16]
 80187a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80187a4:	9303      	str	r3, [sp, #12]
 80187a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80187aa:	9302      	str	r3, [sp, #8]
 80187ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80187b0:	e9cd 5300 	strd	r5, r3, [sp]
 80187b4:	463b      	mov	r3, r7
 80187b6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80187b8:	2200      	movs	r2, #0
 80187ba:	47a8      	blx	r5
 80187bc:	b00b      	add	sp, #44	@ 0x2c
 80187be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187c0:	24015dce 	.word	0x24015dce

080187c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80187c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187c8:	4698      	mov	r8, r3
 80187ca:	6803      	ldr	r3, [r0, #0]
 80187cc:	b08b      	sub	sp, #44	@ 0x2c
 80187ce:	4617      	mov	r7, r2
 80187d0:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80187d2:	460e      	mov	r6, r1
 80187d4:	4b13      	ldr	r3, [pc, #76]	@ (8018824 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80187d6:	4604      	mov	r4, r0
 80187d8:	f8b3 9000 	ldrh.w	r9, [r3]
 80187dc:	f7ea fe5e 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 80187e0:	6803      	ldr	r3, [r0, #0]
 80187e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187e4:	4798      	blx	r3
 80187e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80187ea:	2200      	movs	r2, #0
 80187ec:	4631      	mov	r1, r6
 80187ee:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80187f2:	2302      	movs	r3, #2
 80187f4:	4620      	mov	r0, r4
 80187f6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80187fa:	2301      	movs	r3, #1
 80187fc:	9305      	str	r3, [sp, #20]
 80187fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018802:	9304      	str	r3, [sp, #16]
 8018804:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018808:	9303      	str	r3, [sp, #12]
 801880a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801880e:	9302      	str	r3, [sp, #8]
 8018810:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018814:	e9cd 8300 	strd	r8, r3, [sp]
 8018818:	463b      	mov	r3, r7
 801881a:	47a8      	blx	r5
 801881c:	b00b      	add	sp, #44	@ 0x2c
 801881e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018822:	bf00      	nop
 8018824:	24015dce 	.word	0x24015dce

08018828 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801882c:	4698      	mov	r8, r3
 801882e:	6803      	ldr	r3, [r0, #0]
 8018830:	b087      	sub	sp, #28
 8018832:	460e      	mov	r6, r1
 8018834:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8018836:	4617      	mov	r7, r2
 8018838:	4b0f      	ldr	r3, [pc, #60]	@ (8018878 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801883a:	4604      	mov	r4, r0
 801883c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018840:	f7ea fe2c 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018844:	6803      	ldr	r3, [r0, #0]
 8018846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018848:	4798      	blx	r3
 801884a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801884e:	463a      	mov	r2, r7
 8018850:	4631      	mov	r1, r6
 8018852:	f8cd 900c 	str.w	r9, [sp, #12]
 8018856:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801885a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801885e:	4620      	mov	r0, r4
 8018860:	9302      	str	r3, [sp, #8]
 8018862:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8018866:	9301      	str	r3, [sp, #4]
 8018868:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801886c:	9300      	str	r3, [sp, #0]
 801886e:	4643      	mov	r3, r8
 8018870:	47a8      	blx	r5
 8018872:	b007      	add	sp, #28
 8018874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018878:	24015dce 	.word	0x24015dce

0801887c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018880:	4604      	mov	r4, r0
 8018882:	b08f      	sub	sp, #60	@ 0x3c
 8018884:	4610      	mov	r0, r2
 8018886:	460d      	mov	r5, r1
 8018888:	4691      	mov	r9, r2
 801888a:	461e      	mov	r6, r3
 801888c:	f006 fef6 	bl	801f67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018890:	2800      	cmp	r0, #0
 8018892:	f000 809d 	beq.w	80189d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8018896:	6823      	ldr	r3, [r4, #0]
 8018898:	4620      	mov	r0, r4
 801889a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801889e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80188a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188a4:	4798      	blx	r3
 80188a6:	6823      	ldr	r3, [r4, #0]
 80188a8:	4620      	mov	r0, r4
 80188aa:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8018a38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80188ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188b0:	4798      	blx	r3
 80188b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80188b6:	4f5c      	ldr	r7, [pc, #368]	@ (8018a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80188b8:	9301      	str	r3, [sp, #4]
 80188ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80188be:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80188c2:	4640      	mov	r0, r8
 80188c4:	9302      	str	r3, [sp, #8]
 80188c6:	883b      	ldrh	r3, [r7, #0]
 80188c8:	9303      	str	r3, [sp, #12]
 80188ca:	4b58      	ldr	r3, [pc, #352]	@ (8018a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80188cc:	881a      	ldrh	r2, [r3, #0]
 80188ce:	9305      	str	r3, [sp, #20]
 80188d0:	9204      	str	r2, [sp, #16]
 80188d2:	f007 f823 	bl	801f91c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188d6:	8038      	strh	r0, [r7, #0]
 80188d8:	4640      	mov	r0, r8
 80188da:	f007 f853 	bl	801f984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188de:	9b05      	ldr	r3, [sp, #20]
 80188e0:	b280      	uxth	r0, r0
 80188e2:	8018      	strh	r0, [r3, #0]
 80188e4:	4b52      	ldr	r3, [pc, #328]	@ (8018a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d174      	bne.n	80189d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80188ec:	883b      	ldrh	r3, [r7, #0]
 80188ee:	f8aa 0000 	strh.w	r0, [sl]
 80188f2:	f8ab 3000 	strh.w	r3, [fp]
 80188f6:	4648      	mov	r0, r9
 80188f8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80188fc:	f006 febe 	bl	801f67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018900:	2200      	movs	r2, #0
 8018902:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8018906:	4611      	mov	r1, r2
 8018908:	4628      	mov	r0, r5
 801890a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801890e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018912:	f7ea febc 	bl	800368e <_ZN8touchgfx8Drawable5setXYEss>
 8018916:	2301      	movs	r3, #1
 8018918:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 801891c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8018920:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018924:	2b00      	cmp	r3, #0
 8018926:	dd5c      	ble.n	80189e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018928:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801892c:	2b00      	cmp	r3, #0
 801892e:	dd58      	ble.n	80189e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018930:	462a      	mov	r2, r5
 8018932:	ab0a      	add	r3, sp, #40	@ 0x28
 8018934:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018938:	6851      	ldr	r1, [r2, #4]
 801893a:	c303      	stmia	r3!, {r0, r1}
 801893c:	4631      	mov	r1, r6
 801893e:	a80a      	add	r0, sp, #40	@ 0x28
 8018940:	f7ff fc06 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 8018944:	4b38      	ldr	r3, [pc, #224]	@ (8018a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018946:	2100      	movs	r1, #0
 8018948:	f9b3 2000 	ldrsh.w	r2, [r3]
 801894c:	4b37      	ldr	r3, [pc, #220]	@ (8018a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801894e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8018952:	aa0a      	add	r2, sp, #40	@ 0x28
 8018954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018958:	910c      	str	r1, [sp, #48]	@ 0x30
 801895a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801895e:	ab08      	add	r3, sp, #32
 8018960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018964:	e883 0003 	stmia.w	r3, {r0, r1}
 8018968:	4618      	mov	r0, r3
 801896a:	a90c      	add	r1, sp, #48	@ 0x30
 801896c:	f7ff fbf0 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 8018970:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018972:	2b00      	cmp	r3, #0
 8018974:	d13c      	bne.n	80189f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8018976:	2000      	movs	r0, #0
 8018978:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801897c:	2600      	movs	r6, #0
 801897e:	696b      	ldr	r3, [r5, #20]
 8018980:	a908      	add	r1, sp, #32
 8018982:	682a      	ldr	r2, [r5, #0]
 8018984:	4628      	mov	r0, r5
 8018986:	9305      	str	r3, [sp, #20]
 8018988:	616e      	str	r6, [r5, #20]
 801898a:	6892      	ldr	r2, [r2, #8]
 801898c:	4790      	blx	r2
 801898e:	9b05      	ldr	r3, [sp, #20]
 8018990:	4652      	mov	r2, sl
 8018992:	4649      	mov	r1, r9
 8018994:	616b      	str	r3, [r5, #20]
 8018996:	4628      	mov	r0, r5
 8018998:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801899c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80189a0:	f7ea fe75 	bl	800368e <_ZN8touchgfx8Drawable5setXYEss>
 80189a4:	9a01      	ldr	r2, [sp, #4]
 80189a6:	4b23      	ldr	r3, [pc, #140]	@ (8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80189a8:	4620      	mov	r0, r4
 80189aa:	801a      	strh	r2, [r3, #0]
 80189ac:	9a02      	ldr	r2, [sp, #8]
 80189ae:	4b22      	ldr	r3, [pc, #136]	@ (8018a38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80189b0:	801a      	strh	r2, [r3, #0]
 80189b2:	9a03      	ldr	r2, [sp, #12]
 80189b4:	4b1c      	ldr	r3, [pc, #112]	@ (8018a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80189b6:	801a      	strh	r2, [r3, #0]
 80189b8:	4b1c      	ldr	r3, [pc, #112]	@ (8018a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80189ba:	9a04      	ldr	r2, [sp, #16]
 80189bc:	801a      	strh	r2, [r3, #0]
 80189be:	6823      	ldr	r3, [r4, #0]
 80189c0:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80189c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189c6:	4798      	blx	r3
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	4620      	mov	r0, r4
 80189cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189ce:	4798      	blx	r3
 80189d0:	b00f      	add	sp, #60	@ 0x3c
 80189d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d6:	883b      	ldrh	r3, [r7, #0]
 80189d8:	f8ab 0000 	strh.w	r0, [fp]
 80189dc:	f8aa 3000 	strh.w	r3, [sl]
 80189e0:	e789      	b.n	80188f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80189e2:	462a      	mov	r2, r5
 80189e4:	ab0a      	add	r3, sp, #40	@ 0x28
 80189e6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80189ea:	6851      	ldr	r1, [r2, #4]
 80189ec:	c303      	stmia	r3!, {r0, r1}
 80189ee:	e7a9      	b.n	8018944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80189f0:	a807      	add	r0, sp, #28
 80189f2:	f007 f8d1 	bl	801fb98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80189f6:	4606      	mov	r6, r0
 80189f8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80189fa:	6803      	ldr	r3, [r0, #0]
 80189fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189fe:	4798      	blx	r3
 8018a00:	4286      	cmp	r6, r0
 8018a02:	d1b8      	bne.n	8018976 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018a04:	f7ea fd4a 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018a08:	6803      	ldr	r3, [r0, #0]
 8018a0a:	4606      	mov	r6, r0
 8018a0c:	a807      	add	r0, sp, #28
 8018a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a10:	9305      	str	r3, [sp, #20]
 8018a12:	f007 f8c1 	bl	801fb98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018a16:	9b05      	ldr	r3, [sp, #20]
 8018a18:	4601      	mov	r1, r0
 8018a1a:	4630      	mov	r0, r6
 8018a1c:	4798      	blx	r3
 8018a1e:	f080 0001 	eor.w	r0, r0, #1
 8018a22:	b2c0      	uxtb	r0, r0
 8018a24:	e7a8      	b.n	8018978 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8018a26:	bf00      	nop
 8018a28:	24015dc8 	.word	0x24015dc8
 8018a2c:	24015dca 	.word	0x24015dca
 8018a30:	24015dcc 	.word	0x24015dcc
 8018a34:	24015dce 	.word	0x24015dce
 8018a38:	24015dd0 	.word	0x24015dd0

08018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018a3c:	4b07      	ldr	r3, [pc, #28]	@ (8018a5c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018a3e:	b510      	push	{r4, lr}
 8018a40:	781b      	ldrb	r3, [r3, #0]
 8018a42:	4604      	mov	r4, r0
 8018a44:	b13b      	cbz	r3, 8018a56 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018a46:	6803      	ldr	r3, [r0, #0]
 8018a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a4a:	4798      	blx	r3
 8018a4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018a4e:	4283      	cmp	r3, r0
 8018a50:	d101      	bne.n	8018a56 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018a52:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8018a54:	bd10      	pop	{r4, pc}
 8018a56:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8018a58:	e7fc      	b.n	8018a54 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018a5a:	bf00      	nop
 8018a5c:	24015dd2 	.word	0x24015dd2

08018a60 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a64:	461d      	mov	r5, r3
 8018a66:	b08a      	sub	sp, #40	@ 0x28
 8018a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018a6c:	4690      	mov	r8, r2
 8018a6e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8018a72:	2400      	movs	r4, #0
 8018a74:	4607      	mov	r7, r0
 8018a76:	fb06 8505 	mla	r5, r6, r5, r8
 8018a7a:	9404      	str	r4, [sp, #16]
 8018a7c:	f88d 4020 	strb.w	r4, [sp, #32]
 8018a80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018a84:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018a88:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a8c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018a90:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018a94:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018a98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018a9c:	f7ff ffce 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018aa0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018aaa:	a901      	add	r1, sp, #4
 8018aac:	9505      	str	r5, [sp, #20]
 8018aae:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8018ab2:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8018ab6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8018aba:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8018abe:	6803      	ldr	r3, [r0, #0]
 8018ac0:	685b      	ldr	r3, [r3, #4]
 8018ac2:	4798      	blx	r3
 8018ac4:	b00a      	add	sp, #40	@ 0x28
 8018ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018aca <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018aca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ace:	b08b      	sub	sp, #44	@ 0x2c
 8018ad0:	2400      	movs	r4, #0
 8018ad2:	4691      	mov	r9, r2
 8018ad4:	461d      	mov	r5, r3
 8018ad6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8018ada:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018ade:	4688      	mov	r8, r1
 8018ae0:	4607      	mov	r7, r0
 8018ae2:	9404      	str	r4, [sp, #16]
 8018ae4:	fb06 9505 	mla	r5, r6, r5, r9
 8018ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018aec:	f7ff ffa6 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018af0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018af4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018afe:	a901      	add	r1, sp, #4
 8018b00:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018b04:	9505      	str	r5, [sp, #20]
 8018b06:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018b0a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018b0e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018b12:	f8cd 8010 	str.w	r8, [sp, #16]
 8018b16:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018b1a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8018b1e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8018b22:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8018b26:	6803      	ldr	r3, [r0, #0]
 8018b28:	685b      	ldr	r3, [r3, #4]
 8018b2a:	4798      	blx	r3
 8018b2c:	b00b      	add	sp, #44	@ 0x2c
 8018b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08018b34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b38:	b08a      	sub	sp, #40	@ 0x28
 8018b3a:	4698      	mov	r8, r3
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	4606      	mov	r6, r0
 8018b40:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8018b44:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8018b48:	2d0b      	cmp	r5, #11
 8018b4a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8018b4e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8018b52:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8018b56:	9304      	str	r3, [sp, #16]
 8018b58:	d137      	bne.n	8018bca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8018b5a:	2380      	movs	r3, #128	@ 0x80
 8018b5c:	f88d 0020 	strb.w	r0, [sp, #32]
 8018b60:	4630      	mov	r0, r6
 8018b62:	9203      	str	r2, [sp, #12]
 8018b64:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018b68:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018b6c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018b70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018b74:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018b78:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018b7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018b80:	f7ff ff5c 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018b84:	2c0b      	cmp	r4, #11
 8018b86:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8018b8a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018b8e:	bf94      	ite	ls
 8018b90:	4b19      	ldrls	r3, [pc, #100]	@ (8018bf8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8018b92:	2100      	movhi	r1, #0
 8018b94:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8018b98:	bf98      	it	ls
 8018b9a:	5d19      	ldrbls	r1, [r3, r4]
 8018b9c:	fb02 8307 	mla	r3, r2, r7, r8
 8018ba0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8018ba4:	10c9      	asrs	r1, r1, #3
 8018ba6:	fb01 0003 	mla	r0, r1, r3, r0
 8018baa:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8018bae:	a901      	add	r1, sp, #4
 8018bb0:	9005      	str	r0, [sp, #20]
 8018bb2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	6870      	ldr	r0, [r6, #4]
 8018bba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018bbe:	6803      	ldr	r3, [r0, #0]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	4798      	blx	r3
 8018bc4:	b00a      	add	sp, #40	@ 0x28
 8018bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bca:	2d02      	cmp	r5, #2
 8018bcc:	d109      	bne.n	8018be2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018bce:	28ff      	cmp	r0, #255	@ 0xff
 8018bd0:	d105      	bne.n	8018bde <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8018bd2:	f1bc 0f00 	cmp.w	ip, #0
 8018bd6:	bf14      	ite	ne
 8018bd8:	2340      	movne	r3, #64	@ 0x40
 8018bda:	2320      	moveq	r3, #32
 8018bdc:	e7be      	b.n	8018b5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018bde:	2340      	movs	r3, #64	@ 0x40
 8018be0:	e7bc      	b.n	8018b5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018be2:	28ff      	cmp	r0, #255	@ 0xff
 8018be4:	d105      	bne.n	8018bf2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8018be6:	f1bc 0f00 	cmp.w	ip, #0
 8018bea:	bf14      	ite	ne
 8018bec:	2304      	movne	r3, #4
 8018bee:	2301      	moveq	r3, #1
 8018bf0:	e7b4      	b.n	8018b5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018bf2:	2304      	movs	r3, #4
 8018bf4:	e7b2      	b.n	8018b5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018bf6:	bf00      	nop
 8018bf8:	08030648 	.word	0x08030648

08018bfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c00:	b08b      	sub	sp, #44	@ 0x2c
 8018c02:	461d      	mov	r5, r3
 8018c04:	2400      	movs	r4, #0
 8018c06:	4688      	mov	r8, r1
 8018c08:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8018c0c:	4693      	mov	fp, r2
 8018c0e:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8018c12:	4607      	mov	r7, r0
 8018c14:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8018c18:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8018c1c:	9404      	str	r4, [sp, #16]
 8018c1e:	bf14      	ite	ne
 8018c20:	2308      	movne	r3, #8
 8018c22:	2302      	moveq	r3, #2
 8018c24:	fb05 b50a 	mla	r5, r5, sl, fp
 8018c28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c2c:	f7ff ff06 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018c30:	2e0b      	cmp	r6, #11
 8018c32:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018c36:	a901      	add	r1, sp, #4
 8018c38:	bf98      	it	ls
 8018c3a:	4b13      	ldrls	r3, [pc, #76]	@ (8018c88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8018c3c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8018c40:	bf98      	it	ls
 8018c42:	5d9c      	ldrbls	r4, [r3, r6]
 8018c44:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018c48:	10e4      	asrs	r4, r4, #3
 8018c4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8018c4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018c52:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8018c56:	fb04 0405 	mla	r4, r4, r5, r0
 8018c5a:	6878      	ldr	r0, [r7, #4]
 8018c5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018c60:	2300      	movs	r3, #0
 8018c62:	9405      	str	r4, [sp, #20]
 8018c64:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018c68:	f88d 9020 	strb.w	r9, [sp, #32]
 8018c6c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8018c70:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018c74:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8018c78:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8018c7c:	6803      	ldr	r3, [r0, #0]
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	4798      	blx	r3
 8018c82:	b00b      	add	sp, #44	@ 0x2c
 8018c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c88:	08030648 	.word	0x08030648

08018c8c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c90:	461e      	mov	r6, r3
 8018c92:	4b0a      	ldr	r3, [pc, #40]	@ (8018cbc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8018c94:	460f      	mov	r7, r1
 8018c96:	4690      	mov	r8, r2
 8018c98:	881d      	ldrh	r5, [r3, #0]
 8018c9a:	f7ea fbff 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018c9e:	6803      	ldr	r3, [r0, #0]
 8018ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ca2:	4798      	blx	r3
 8018ca4:	280b      	cmp	r0, #11
 8018ca6:	bf96      	itet	ls
 8018ca8:	4b05      	ldrls	r3, [pc, #20]	@ (8018cc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018caa:	2400      	movhi	r4, #0
 8018cac:	5c1c      	ldrbls	r4, [r3, r0]
 8018cae:	fb08 7005 	mla	r0, r8, r5, r7
 8018cb2:	10e4      	asrs	r4, r4, #3
 8018cb4:	fb04 6000 	mla	r0, r4, r0, r6
 8018cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cbc:	24015dce 	.word	0x24015dce
 8018cc0:	08030648 	.word	0x08030648

08018cc4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cc6:	b08b      	sub	sp, #44	@ 0x2c
 8018cc8:	461f      	mov	r7, r3
 8018cca:	4604      	mov	r4, r0
 8018ccc:	4616      	mov	r6, r2
 8018cce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8018cd2:	2500      	movs	r5, #0
 8018cd4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018cd8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018cdc:	9504      	str	r5, [sp, #16]
 8018cde:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ce2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018ce6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018cea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018cee:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018cf2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018cf6:	f88d 3020 	strb.w	r3, [sp, #32]
 8018cfa:	f7ff fe9f 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018cfe:	463a      	mov	r2, r7
 8018d00:	4631      	mov	r1, r6
 8018d02:	4603      	mov	r3, r0
 8018d04:	4620      	mov	r0, r4
 8018d06:	f7ff ffc1 	bl	8018c8c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8018d44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018d0c:	9005      	str	r0, [sp, #20]
 8018d0e:	881b      	ldrh	r3, [r3, #0]
 8018d10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018d14:	f7ea fbc2 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018d18:	6803      	ldr	r3, [r0, #0]
 8018d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d1c:	4798      	blx	r3
 8018d1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018d20:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8018d24:	a901      	add	r1, sp, #4
 8018d26:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8018d2a:	9304      	str	r3, [sp, #16]
 8018d2c:	6860      	ldr	r0, [r4, #4]
 8018d2e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8018d32:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8018d36:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8018d3a:	6803      	ldr	r3, [r0, #0]
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	4798      	blx	r3
 8018d40:	b00b      	add	sp, #44	@ 0x2c
 8018d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d44:	24015dce 	.word	0x24015dce

08018d48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d4a:	b08d      	sub	sp, #52	@ 0x34
 8018d4c:	2501      	movs	r5, #1
 8018d4e:	4604      	mov	r4, r0
 8018d50:	466b      	mov	r3, sp
 8018d52:	9503      	str	r5, [sp, #12]
 8018d54:	e883 0006 	stmia.w	r3, {r1, r2}
 8018d58:	2300      	movs	r3, #0
 8018d5a:	f8bd 6000 	ldrh.w	r6, [sp]
 8018d5e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018d62:	9306      	str	r3, [sp, #24]
 8018d64:	6803      	ldr	r3, [r0, #0]
 8018d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d68:	4798      	blx	r3
 8018d6a:	463a      	mov	r2, r7
 8018d6c:	4631      	mov	r1, r6
 8018d6e:	4603      	mov	r3, r0
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7ff ff8b 	bl	8018c8c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018d76:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018d78:	9004      	str	r0, [sp, #16]
 8018d7a:	9307      	str	r3, [sp, #28]
 8018d7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018d80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018d84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018d88:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8018dc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8018d8e:	881b      	ldrh	r3, [r3, #0]
 8018d90:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8018d94:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8018d98:	f7ea fb80 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018d9c:	6803      	ldr	r3, [r0, #0]
 8018d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018da0:	4798      	blx	r3
 8018da2:	23ff      	movs	r3, #255	@ 0xff
 8018da4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8018da8:	a903      	add	r1, sp, #12
 8018daa:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8018dae:	6860      	ldr	r0, [r4, #4]
 8018db0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8018db4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8018db8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8018dbc:	6803      	ldr	r3, [r0, #0]
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	4798      	blx	r3
 8018dc2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8018dc4:	b00d      	add	sp, #52	@ 0x34
 8018dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dc8:	24015dce 	.word	0x24015dce

08018dcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dd0:	b08c      	sub	sp, #48	@ 0x30
 8018dd2:	461e      	mov	r6, r3
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	4604      	mov	r4, r0
 8018dd8:	466d      	mov	r5, sp
 8018dda:	9306      	str	r3, [sp, #24]
 8018ddc:	6803      	ldr	r3, [r0, #0]
 8018dde:	e885 0006 	stmia.w	r5, {r1, r2}
 8018de2:	2501      	movs	r5, #1
 8018de4:	f8bd 7000 	ldrh.w	r7, [sp]
 8018de8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018dec:	9503      	str	r5, [sp, #12]
 8018dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018df0:	4798      	blx	r3
 8018df2:	4642      	mov	r2, r8
 8018df4:	4639      	mov	r1, r7
 8018df6:	4603      	mov	r3, r0
 8018df8:	4620      	mov	r0, r4
 8018dfa:	f7ff ff47 	bl	8018c8c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018dfe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018e02:	9004      	str	r0, [sp, #16]
 8018e04:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018e08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018e0c:	9607      	str	r6, [sp, #28]
 8018e0e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018e12:	4b10      	ldr	r3, [pc, #64]	@ (8018e54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8018e1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018e1c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8018e20:	f7ea fb3c 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8018e24:	6803      	ldr	r3, [r0, #0]
 8018e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e28:	4798      	blx	r3
 8018e2a:	23ff      	movs	r3, #255	@ 0xff
 8018e2c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8018e30:	a903      	add	r1, sp, #12
 8018e32:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8018e36:	6860      	ldr	r0, [r4, #4]
 8018e38:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8018e3c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8018e40:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8018e44:	6803      	ldr	r3, [r0, #0]
 8018e46:	685b      	ldr	r3, [r3, #4]
 8018e48:	4798      	blx	r3
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	b00c      	add	sp, #48	@ 0x30
 8018e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e52:	bf00      	nop
 8018e54:	24015dce 	.word	0x24015dce

08018e58 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8018e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e5a:	b085      	sub	sp, #20
 8018e5c:	4605      	mov	r5, r0
 8018e5e:	ac02      	add	r4, sp, #8
 8018e60:	e884 0006 	stmia.w	r4, {r1, r2}
 8018e64:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8018e68:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8018e6c:	f7ff fde6 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e70:	4631      	mov	r1, r6
 8018e72:	4603      	mov	r3, r0
 8018e74:	463a      	mov	r2, r7
 8018e76:	4628      	mov	r0, r5
 8018e78:	f7ff ff08 	bl	8018c8c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018e7c:	4a05      	ldr	r2, [pc, #20]	@ (8018e94 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8018e7e:	682b      	ldr	r3, [r5, #0]
 8018e80:	8812      	ldrh	r2, [r2, #0]
 8018e82:	9200      	str	r2, [sp, #0]
 8018e84:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8018e86:	4603      	mov	r3, r0
 8018e88:	4628      	mov	r0, r5
 8018e8a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018e8e:	47b0      	blx	r6
 8018e90:	b005      	add	sp, #20
 8018e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e94:	24015dce 	.word	0x24015dce

08018e98 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018e98:	b570      	push	{r4, r5, r6, lr}
 8018e9a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	b19b      	cbz	r3, 8018eca <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018ea2:	2002      	movs	r0, #2
 8018ea4:	f7e8 fc22 	bl	80016ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	4620      	mov	r0, r4
 8018eac:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8018eb0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8018eb4:	6823      	ldr	r3, [r4, #0]
 8018eb6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8018eba:	f7ff fdbf 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ebe:	4601      	mov	r1, r0
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	462b      	mov	r3, r5
 8018ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ec8:	4718      	bx	r3
 8018eca:	bd70      	pop	{r4, r5, r6, pc}

08018ecc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8018ecc:	b570      	push	{r4, r5, r6, lr}
 8018ece:	4605      	mov	r5, r0
 8018ed0:	460c      	mov	r4, r1
 8018ed2:	2003      	movs	r0, #3
 8018ed4:	b149      	cbz	r1, 8018eea <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8018ed6:	f7e8 fba5 	bl	8001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018eda:	6928      	ldr	r0, [r5, #16]
 8018edc:	b168      	cbz	r0, 8018efa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018ede:	6803      	ldr	r3, [r0, #0]
 8018ee0:	2101      	movs	r1, #1
 8018ee2:	695b      	ldr	r3, [r3, #20]
 8018ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ee8:	4718      	bx	r3
 8018eea:	f7e8 fbcd 	bl	8001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018eee:	6928      	ldr	r0, [r5, #16]
 8018ef0:	b118      	cbz	r0, 8018efa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018ef2:	6803      	ldr	r3, [r0, #0]
 8018ef4:	4621      	mov	r1, r4
 8018ef6:	695b      	ldr	r3, [r3, #20]
 8018ef8:	e7f4      	b.n	8018ee4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018efa:	bd70      	pop	{r4, r5, r6, pc}

08018efc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018efc:	b538      	push	{r3, r4, r5, lr}
 8018efe:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8018f02:	4604      	mov	r4, r0
 8018f04:	460d      	mov	r5, r1
 8018f06:	428b      	cmp	r3, r1
 8018f08:	d006      	beq.n	8018f18 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8018f0a:	6803      	ldr	r3, [r0, #0]
 8018f0c:	b929      	cbnz	r1, 8018f1a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018f0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8018f12:	4798      	blx	r3
 8018f14:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8018f18:	bd38      	pop	{r3, r4, r5, pc}
 8018f1a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8018f1e:	e7f8      	b.n	8018f12 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018f20 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018f20:	4b0d      	ldr	r3, [pc, #52]	@ (8018f58 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018f22:	b510      	push	{r4, lr}
 8018f24:	781b      	ldrb	r3, [r3, #0]
 8018f26:	4604      	mov	r4, r0
 8018f28:	b95b      	cbnz	r3, 8018f42 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018f2a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8018f2e:	2b02      	cmp	r3, #2
 8018f30:	d007      	beq.n	8018f42 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018f32:	6840      	ldr	r0, [r0, #4]
 8018f34:	f000 f92c 	bl	8019190 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018f38:	b118      	cbz	r0, 8018f42 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018f3a:	6862      	ldr	r2, [r4, #4]
 8018f3c:	7a53      	ldrb	r3, [r2, #9]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d0fc      	beq.n	8018f3c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018f42:	f7e8 fd71 	bl	8001a28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018f46:	4620      	mov	r0, r4
 8018f48:	2100      	movs	r1, #0
 8018f4a:	f7ff ffd7 	bl	8018efc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f7ff fd74 	bl	8018a3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f54:	bd10      	pop	{r4, pc}
 8018f56:	bf00      	nop
 8018f58:	24015dd2 	.word	0x24015dd2

08018f5c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8018f5c:	b570      	push	{r4, r5, r6, lr}
 8018f5e:	4604      	mov	r4, r0
 8018f60:	6803      	ldr	r3, [r0, #0]
 8018f62:	b919      	cbnz	r1, 8018f6c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8018f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f6a:	4718      	bx	r3
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8018f72:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8018f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f78:	4798      	blx	r3
 8018f7a:	6863      	ldr	r3, [r4, #4]
 8018f7c:	2101      	movs	r1, #1
 8018f7e:	4605      	mov	r5, r0
 8018f80:	4620      	mov	r0, r4
 8018f82:	7299      	strb	r1, [r3, #10]
 8018f84:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8018f88:	f7ff ffb8 	bl	8018efc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018f8c:	4628      	mov	r0, r5
 8018f8e:	bd70      	pop	{r4, r5, r6, pc}

08018f90 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018f90:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018f94:	1a13      	subs	r3, r2, r0
 8018f96:	4258      	negs	r0, r3
 8018f98:	4158      	adcs	r0, r3
 8018f9a:	4770      	bx	lr

08018f9c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018f9c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018fa0:	1a9b      	subs	r3, r3, r2
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	bfdc      	itt	le
 8018fa6:	6882      	ldrle	r2, [r0, #8]
 8018fa8:	189b      	addle	r3, r3, r2
 8018faa:	2b01      	cmp	r3, #1
 8018fac:	bfcc      	ite	gt
 8018fae:	2000      	movgt	r0, #0
 8018fb0:	2001      	movle	r0, #1
 8018fb2:	4770      	bx	lr

08018fb4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018fb4:	6902      	ldr	r2, [r0, #16]
 8018fb6:	6843      	ldr	r3, [r0, #4]
 8018fb8:	2024      	movs	r0, #36	@ 0x24
 8018fba:	fb00 3002 	mla	r0, r0, r2, r3
 8018fbe:	4770      	bx	lr

08018fc0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018fc0:	6803      	ldr	r3, [r0, #0]
 8018fc2:	691b      	ldr	r3, [r3, #16]
 8018fc4:	4718      	bx	r3

08018fc6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018fc6:	2301      	movs	r3, #1
 8018fc8:	b570      	push	{r4, r5, r6, lr}
 8018fca:	7203      	strb	r3, [r0, #8]
 8018fcc:	4604      	mov	r4, r0
 8018fce:	6840      	ldr	r0, [r0, #4]
 8018fd0:	6803      	ldr	r3, [r0, #0]
 8018fd2:	699b      	ldr	r3, [r3, #24]
 8018fd4:	4798      	blx	r3
 8018fd6:	6803      	ldr	r3, [r0, #0]
 8018fd8:	4605      	mov	r5, r0
 8018fda:	2b40      	cmp	r3, #64	@ 0x40
 8018fdc:	d00c      	beq.n	8018ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018fde:	d810      	bhi.n	8019002 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018fe0:	2b04      	cmp	r3, #4
 8018fe2:	d01d      	beq.n	8019020 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8018fe4:	d804      	bhi.n	8018ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8018fe6:	2b01      	cmp	r3, #1
 8018fe8:	d006      	beq.n	8018ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018fea:	2b02      	cmp	r3, #2
 8018fec:	d02c      	beq.n	8019048 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018fee:	bd70      	pop	{r4, r5, r6, pc}
 8018ff0:	2b08      	cmp	r3, #8
 8018ff2:	d01d      	beq.n	8019030 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8018ff4:	2b20      	cmp	r3, #32
 8018ff6:	d1fa      	bne.n	8018fee <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8018ff8:	6823      	ldr	r3, [r4, #0]
 8018ffa:	4620      	mov	r0, r4
 8018ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018ffe:	4798      	blx	r3
 8019000:	e013      	b.n	801902a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019006:	d0f7      	beq.n	8018ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019008:	d804      	bhi.n	8019014 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801900a:	2b80      	cmp	r3, #128	@ 0x80
 801900c:	d0f4      	beq.n	8018ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801900e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019012:	e7f0      	b.n	8018ff6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8019014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019018:	d0ee      	beq.n	8018ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801901a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801901e:	e7e5      	b.n	8018fec <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019020:	6823      	ldr	r3, [r4, #0]
 8019022:	7f01      	ldrb	r1, [r0, #28]
 8019024:	4620      	mov	r0, r4
 8019026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019028:	4798      	blx	r3
 801902a:	6823      	ldr	r3, [r4, #0]
 801902c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801902e:	e006      	b.n	801903e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019030:	6823      	ldr	r3, [r4, #0]
 8019032:	7f01      	ldrb	r1, [r0, #28]
 8019034:	4620      	mov	r0, r4
 8019036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019038:	4798      	blx	r3
 801903a:	6823      	ldr	r3, [r4, #0]
 801903c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801903e:	4629      	mov	r1, r5
 8019040:	4620      	mov	r0, r4
 8019042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019046:	4718      	bx	r3
 8019048:	6823      	ldr	r3, [r4, #0]
 801904a:	4620      	mov	r0, r4
 801904c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801904e:	4798      	blx	r3
 8019050:	e7f3      	b.n	801903a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08019052 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019052:	4770      	bx	lr

08019054 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019054:	4770      	bx	lr

08019056 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8019056:	4770      	bx	lr

08019058 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019058:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801905c:	b510      	push	{r4, lr}
 801905e:	1ad2      	subs	r2, r2, r3
 8019060:	2a00      	cmp	r2, #0
 8019062:	bfdc      	itt	le
 8019064:	6884      	ldrle	r4, [r0, #8]
 8019066:	1912      	addle	r2, r2, r4
 8019068:	2a01      	cmp	r2, #1
 801906a:	dd16      	ble.n	801909a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801906c:	6842      	ldr	r2, [r0, #4]
 801906e:	2424      	movs	r4, #36	@ 0x24
 8019070:	fb04 2303 	mla	r3, r4, r3, r2
 8019074:	f101 0220 	add.w	r2, r1, #32
 8019078:	f851 4b04 	ldr.w	r4, [r1], #4
 801907c:	4291      	cmp	r1, r2
 801907e:	f843 4b04 	str.w	r4, [r3], #4
 8019082:	d1f9      	bne.n	8019078 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8019084:	780a      	ldrb	r2, [r1, #0]
 8019086:	701a      	strb	r2, [r3, #0]
 8019088:	68c3      	ldr	r3, [r0, #12]
 801908a:	6882      	ldr	r2, [r0, #8]
 801908c:	f3bf 8f5b 	dmb	ish
 8019090:	3301      	adds	r3, #1
 8019092:	429a      	cmp	r2, r3
 8019094:	bfd8      	it	le
 8019096:	1a9b      	suble	r3, r3, r2
 8019098:	60c3      	str	r3, [r0, #12]
 801909a:	bd10      	pop	{r4, pc}

0801909c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801909c:	6903      	ldr	r3, [r0, #16]
 801909e:	6882      	ldr	r2, [r0, #8]
 80190a0:	f3bf 8f5b 	dmb	ish
 80190a4:	3301      	adds	r3, #1
 80190a6:	429a      	cmp	r2, r3
 80190a8:	bfd8      	it	le
 80190aa:	1a9b      	suble	r3, r3, r2
 80190ac:	6103      	str	r3, [r0, #16]
 80190ae:	4770      	bx	lr

080190b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80190b0:	b570      	push	{r4, r5, r6, lr}
 80190b2:	4604      	mov	r4, r0
 80190b4:	460e      	mov	r6, r1
 80190b6:	6860      	ldr	r0, [r4, #4]
 80190b8:	6803      	ldr	r3, [r0, #0]
 80190ba:	685b      	ldr	r3, [r3, #4]
 80190bc:	4798      	blx	r3
 80190be:	2800      	cmp	r0, #0
 80190c0:	d1f9      	bne.n	80190b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80190c2:	4d0d      	ldr	r5, [pc, #52]	@ (80190f8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80190c4:	6828      	ldr	r0, [r5, #0]
 80190c6:	6803      	ldr	r3, [r0, #0]
 80190c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80190ca:	4798      	blx	r3
 80190cc:	f7e8 fcba 	bl	8001a44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80190d0:	6828      	ldr	r0, [r5, #0]
 80190d2:	2101      	movs	r1, #1
 80190d4:	f7ff ff12 	bl	8018efc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80190d8:	6860      	ldr	r0, [r4, #4]
 80190da:	4631      	mov	r1, r6
 80190dc:	6803      	ldr	r3, [r0, #0]
 80190de:	689b      	ldr	r3, [r3, #8]
 80190e0:	4798      	blx	r3
 80190e2:	6823      	ldr	r3, [r4, #0]
 80190e4:	4620      	mov	r0, r4
 80190e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190e8:	4798      	blx	r3
 80190ea:	6828      	ldr	r0, [r5, #0]
 80190ec:	6803      	ldr	r3, [r0, #0]
 80190ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80190f4:	4718      	bx	r3
 80190f6:	bf00      	nop
 80190f8:	24015dd4 	.word	0x24015dd4

080190fc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80190fc:	b508      	push	{r3, lr}
 80190fe:	f7e8 fc93 	bl	8001a28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019106:	f7e8 bc97 	b.w	8001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801910a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801910a:	b510      	push	{r4, lr}
 801910c:	4604      	mov	r4, r0
 801910e:	2114      	movs	r1, #20
 8019110:	f011 f9e6 	bl	802a4e0 <_ZdlPvj>
 8019114:	4620      	mov	r0, r4
 8019116:	bd10      	pop	{r4, pc}

08019118 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019118:	b510      	push	{r4, lr}
 801911a:	4604      	mov	r4, r0
 801911c:	6840      	ldr	r0, [r0, #4]
 801911e:	6803      	ldr	r3, [r0, #0]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	4798      	blx	r3
 8019124:	b948      	cbnz	r0, 801913a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019126:	7a63      	ldrb	r3, [r4, #9]
 8019128:	b13b      	cbz	r3, 801913a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801912a:	7a23      	ldrb	r3, [r4, #8]
 801912c:	b92b      	cbnz	r3, 801913a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801912e:	6823      	ldr	r3, [r4, #0]
 8019130:	4620      	mov	r0, r4
 8019132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019138:	4718      	bx	r3
 801913a:	bd10      	pop	{r4, pc}

0801913c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801913c:	b570      	push	{r4, r5, r6, lr}
 801913e:	4604      	mov	r4, r0
 8019140:	6840      	ldr	r0, [r0, #4]
 8019142:	6803      	ldr	r3, [r0, #0]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4798      	blx	r3
 8019148:	4605      	mov	r5, r0
 801914a:	b930      	cbnz	r0, 801915a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801914c:	7a23      	ldrb	r3, [r4, #8]
 801914e:	b123      	cbz	r3, 801915a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019150:	6860      	ldr	r0, [r4, #4]
 8019152:	6803      	ldr	r3, [r0, #0]
 8019154:	695b      	ldr	r3, [r3, #20]
 8019156:	4798      	blx	r3
 8019158:	7225      	strb	r5, [r4, #8]
 801915a:	6860      	ldr	r0, [r4, #4]
 801915c:	6803      	ldr	r3, [r0, #0]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	4798      	blx	r3
 8019162:	b928      	cbnz	r0, 8019170 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019164:	6823      	ldr	r3, [r4, #0]
 8019166:	4620      	mov	r0, r4
 8019168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801916a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916e:	4718      	bx	r3
 8019170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019174:	f7e8 bc6e 	b.w	8001a54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019178 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019178:	b510      	push	{r4, lr}
 801917a:	6082      	str	r2, [r0, #8]
 801917c:	2200      	movs	r2, #0
 801917e:	4c03      	ldr	r4, [pc, #12]	@ (801918c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019180:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019184:	e9c0 4100 	strd	r4, r1, [r0]
 8019188:	bd10      	pop	{r4, pc}
 801918a:	bf00      	nop
 801918c:	0803065c 	.word	0x0803065c

08019190 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019190:	6840      	ldr	r0, [r0, #4]
 8019192:	6803      	ldr	r3, [r0, #0]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	4718      	bx	r3

08019198 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8019198:	2300      	movs	r3, #0
 801919a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801919c:	8503      	strh	r3, [r0, #40]	@ 0x28
 801919e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80191a0:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80191a2:	6980      	ldr	r0, [r0, #24]
 80191a4:	b110      	cbz	r0, 80191ac <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 80191a6:	6803      	ldr	r3, [r0, #0]
 80191a8:	691b      	ldr	r3, [r3, #16]
 80191aa:	4718      	bx	r3
 80191ac:	4770      	bx	lr

080191ae <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 80191ae:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 80191b2:	4770      	bx	lr

080191b4 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 80191b4:	b538      	push	{r3, r4, r5, lr}
 80191b6:	0e0b      	lsrs	r3, r1, #24
 80191b8:	4604      	mov	r4, r0
 80191ba:	460d      	mov	r5, r1
 80191bc:	7783      	strb	r3, [r0, #30]
 80191be:	6803      	ldr	r3, [r0, #0]
 80191c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80191c2:	4798      	blx	r3
 80191c4:	6803      	ldr	r3, [r0, #0]
 80191c6:	4629      	mov	r1, r5
 80191c8:	689b      	ldr	r3, [r3, #8]
 80191ca:	4798      	blx	r3
 80191cc:	6823      	ldr	r3, [r4, #0]
 80191ce:	4620      	mov	r0, r4
 80191d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191d2:	4798      	blx	r3
 80191d4:	61a0      	str	r0, [r4, #24]
 80191d6:	bd38      	pop	{r3, r4, r5, pc}

080191d8 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 80191d8:	7741      	strb	r1, [r0, #29]
 80191da:	4770      	bx	lr

080191dc <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 80191dc:	b530      	push	{r4, r5, lr}
 80191de:	460d      	mov	r5, r1
 80191e0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 80191e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191ec:	682b      	ldr	r3, [r5, #0]
 80191ee:	6023      	str	r3, [r4, #0]
 80191f0:	bd30      	pop	{r4, r5, pc}

080191f2 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 80191f2:	b538      	push	{r3, r4, r5, lr}
 80191f4:	4604      	mov	r4, r0
 80191f6:	1d03      	adds	r3, r0, #4
 80191f8:	6808      	ldr	r0, [r1, #0]
 80191fa:	2500      	movs	r5, #0
 80191fc:	6849      	ldr	r1, [r1, #4]
 80191fe:	c303      	stmia	r3!, {r0, r1}
 8019200:	6813      	ldr	r3, [r2, #0]
 8019202:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8019206:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 801920a:	6853      	ldr	r3, [r2, #4]
 801920c:	61a5      	str	r5, [r4, #24]
 801920e:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8019212:	f004 fea3 	bl	801df5c <_ZN8touchgfx9Matrix3x35resetEv>
 8019216:	23ff      	movs	r3, #255	@ 0xff
 8019218:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801921c:	7763      	strb	r3, [r4, #29]
 801921e:	77a3      	strb	r3, [r4, #30]
 8019220:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8019224:	6323      	str	r3, [r4, #48]	@ 0x30
 8019226:	2301      	movs	r3, #1
 8019228:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801922c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019230 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8019230:	ee70 7a41 	vsub.f32	s15, s0, s2
 8019234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019238:	eef5 7a40 	vcmp.f32	s15, #0.0
 801923c:	4605      	mov	r5, r0
 801923e:	ed2d 8b0a 	vpush	{d8-d12}
 8019242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019246:	b086      	sub	sp, #24
 8019248:	eeb0 ba40 	vmov.f32	s22, s0
 801924c:	6802      	ldr	r2, [r0, #0]
 801924e:	eef0 ba60 	vmov.f32	s23, s1
 8019252:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8019256:	eef0 aa41 	vmov.f32	s21, s2
 801925a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801925c:	eeb0 aa61 	vmov.f32	s20, s3
 8019260:	eeb0 ca42 	vmov.f32	s24, s4
 8019264:	eef0 ca62 	vmov.f32	s25, s5
 8019268:	d112      	bne.n	8019290 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801926a:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801926e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019276:	d10b      	bne.n	8019290 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8019278:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801927c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801927e:	3901      	subs	r1, #1
 8019280:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8019284:	b006      	add	sp, #24
 8019286:	ecbd 8b0a 	vpop	{d8-d12}
 801928a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801928e:	4710      	bx	r2
 8019290:	23ff      	movs	r3, #255	@ 0xff
 8019292:	4628      	mov	r0, r5
 8019294:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8019298:	77ab      	strb	r3, [r5, #30]
 801929a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801929c:	4798      	blx	r3
 801929e:	eeb0 0a4b 	vmov.f32	s0, s22
 80192a2:	eef0 0a6b 	vmov.f32	s1, s23
 80192a6:	4604      	mov	r4, r0
 80192a8:	4640      	mov	r0, r8
 80192aa:	f004 ff06 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80192ae:	eef0 8a40 	vmov.f32	s17, s0
 80192b2:	ed8d 0a00 	vstr	s0, [sp]
 80192b6:	eeb0 0a6a 	vmov.f32	s0, s21
 80192ba:	eef0 9a60 	vmov.f32	s19, s1
 80192be:	edcd 0a01 	vstr	s1, [sp, #4]
 80192c2:	4640      	mov	r0, r8
 80192c4:	eef0 0a4a 	vmov.f32	s1, s20
 80192c8:	f004 fef7 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80192cc:	eef4 8a40 	vcmp.f32	s17, s0
 80192d0:	eeb0 8a40 	vmov.f32	s16, s0
 80192d4:	ed8d 0a02 	vstr	s0, [sp, #8]
 80192d8:	eeb0 9a60 	vmov.f32	s18, s1
 80192dc:	edcd 0a03 	vstr	s1, [sp, #12]
 80192e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e4:	eef4 9a60 	vcmp.f32	s19, s1
 80192e8:	bf0c      	ite	eq
 80192ea:	2301      	moveq	r3, #1
 80192ec:	2300      	movne	r3, #0
 80192ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192f2:	eef4 8a40 	vcmp.f32	s17, s0
 80192f6:	7463      	strb	r3, [r4, #17]
 80192f8:	bf0c      	ite	eq
 80192fa:	2301      	moveq	r3, #1
 80192fc:	2300      	movne	r3, #0
 80192fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019302:	74a3      	strb	r3, [r4, #18]
 8019304:	d024      	beq.n	8019350 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8019306:	eef4 9a60 	vcmp.f32	s19, s1
 801930a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801930e:	d01f      	beq.n	8019350 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8019310:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8019314:	4640      	mov	r0, r8
 8019316:	ee7a aacb 	vsub.f32	s21, s21, s22
 801931a:	eeb0 0a4b 	vmov.f32	s0, s22
 801931e:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8019322:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8019326:	eef0 0a6b 	vmov.f32	s1, s23
 801932a:	eea7 0acc 	vfms.f32	s0, s15, s24
 801932e:	eeec 0a87 	vfma.f32	s1, s25, s14
 8019332:	f004 fec2 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019336:	ed8d 0a04 	vstr	s0, [sp, #16]
 801933a:	ee30 0a68 	vsub.f32	s0, s0, s17
 801933e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019342:	edcd 0a05 	vstr	s1, [sp, #20]
 8019346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801934a:	d121      	bne.n	8019390 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 801934c:	2301      	movs	r3, #1
 801934e:	74a3      	strb	r3, [r4, #18]
 8019350:	7c63      	ldrb	r3, [r4, #17]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d051      	beq.n	80193fa <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8019356:	ee39 7a69 	vsub.f32	s14, s18, s19
 801935a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8019450 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 801935e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8019362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801936a:	edc4 7a08 	vstr	s15, [r4, #32]
 801936e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8019372:	ee17 3a90 	vmov	r3, s15
 8019376:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 801937a:	b21a      	sxth	r2, r3
 801937c:	ee17 3a90 	vmov	r3, s15
 8019380:	bf48      	it	mi
 8019382:	8122      	strhmi	r2, [r4, #8]
 8019384:	b21b      	sxth	r3, r3
 8019386:	bf56      	itet	pl
 8019388:	80e2      	strhpl	r2, [r4, #6]
 801938a:	80e3      	strhmi	r3, [r4, #6]
 801938c:	8123      	strhpl	r3, [r4, #8]
 801938e:	e02c      	b.n	80193ea <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8019390:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8019394:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8019398:	eef5 7a40 	vcmp.f32	s15, #0.0
 801939c:	edc4 7a05 	vstr	s15, [r4, #20]
 80193a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193a4:	d102      	bne.n	80193ac <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 80193a6:	2301      	movs	r3, #1
 80193a8:	7463      	strb	r3, [r4, #17]
 80193aa:	e7d1      	b.n	8019350 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 80193ac:	eeb0 7a69 	vmov.f32	s14, s19
 80193b0:	ee39 9a69 	vsub.f32	s18, s18, s19
 80193b4:	ee38 8a68 	vsub.f32	s16, s16, s17
 80193b8:	eea8 7ae7 	vfms.f32	s14, s17, s15
 80193bc:	ed84 7a06 	vstr	s14, [r4, #24]
 80193c0:	ee89 7a27 	vdiv.f32	s14, s18, s15
 80193c4:	ee38 8a47 	vsub.f32	s16, s16, s14
 80193c8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8019454 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 80193cc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80193d0:	ed84 8a07 	vstr	s16, [r4, #28]
 80193d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80193d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193dc:	edc4 7a08 	vstr	s15, [r4, #32]
 80193e0:	d503      	bpl.n	80193ea <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80193e2:	eeb1 8a48 	vneg.f32	s16, s16
 80193e6:	ed84 8a07 	vstr	s16, [r4, #28]
 80193ea:	60e7      	str	r7, [r4, #12]
 80193ec:	7426      	strb	r6, [r4, #16]
 80193ee:	61ac      	str	r4, [r5, #24]
 80193f0:	b006      	add	sp, #24
 80193f2:	ecbd 8b0a 	vpop	{d8-d12}
 80193f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193fa:	7ca3      	ldrb	r3, [r4, #18]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d0f4      	beq.n	80193ea <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8019400:	ee38 7a68 	vsub.f32	s14, s16, s17
 8019404:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8019450 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8019408:	eef4 8ac8 	vcmpe.f32	s17, s16
 801940c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019414:	edc4 7a08 	vstr	s15, [r4, #32]
 8019418:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801941c:	ee17 3a90 	vmov	r3, s15
 8019420:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8019424:	b21a      	sxth	r2, r3
 8019426:	ee17 3a90 	vmov	r3, s15
 801942a:	bf48      	it	mi
 801942c:	8122      	strhmi	r2, [r4, #8]
 801942e:	b21b      	sxth	r3, r3
 8019430:	bf56      	itet	pl
 8019432:	80e2      	strhpl	r2, [r4, #6]
 8019434:	80e3      	strhmi	r3, [r4, #6]
 8019436:	8123      	strhpl	r3, [r4, #8]
 8019438:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801943c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8019440:	1a9b      	subs	r3, r3, r2
 8019442:	ee07 3a90 	vmov	s15, r3
 8019446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801944a:	edc4 7a07 	vstr	s15, [r4, #28]
 801944e:	e7cc      	b.n	80193ea <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8019450:	447ffffe 	.word	0x447ffffe
 8019454:	44800000 	.word	0x44800000

08019458 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8019458:	b510      	push	{r4, lr}
 801945a:	ed2d 8b02 	vpush	{d8}
 801945e:	eef0 8a62 	vmov.f32	s17, s5
 8019462:	2100      	movs	r1, #0
 8019464:	4604      	mov	r4, r0
 8019466:	eeb0 8a42 	vmov.f32	s16, s4
 801946a:	f010 fdab 	bl	8029fc4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801946e:	eef0 7a68 	vmov.f32	s15, s17
 8019472:	6823      	ldr	r3, [r4, #0]
 8019474:	4620      	mov	r0, r4
 8019476:	689b      	ldr	r3, [r3, #8]
 8019478:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801947c:	ee17 2a90 	vmov	r2, s15
 8019480:	eef0 7a48 	vmov.f32	s15, s16
 8019484:	ecbd 8b02 	vpop	{d8}
 8019488:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801948c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019490:	ee17 1a90 	vmov	r1, s15
 8019494:	4718      	bx	r3

08019496 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8019496:	b510      	push	{r4, lr}
 8019498:	ed2d 8b02 	vpush	{d8}
 801949c:	eef0 8a63 	vmov.f32	s17, s7
 80194a0:	2100      	movs	r1, #0
 80194a2:	4604      	mov	r4, r0
 80194a4:	eeb0 8a43 	vmov.f32	s16, s6
 80194a8:	f010 fe4e 	bl	802a148 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80194ac:	eef0 7a68 	vmov.f32	s15, s17
 80194b0:	6823      	ldr	r3, [r4, #0]
 80194b2:	4620      	mov	r0, r4
 80194b4:	689b      	ldr	r3, [r3, #8]
 80194b6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80194ba:	ee17 2a90 	vmov	r2, s15
 80194be:	eef0 7a48 	vmov.f32	s15, s16
 80194c2:	ecbd 8b02 	vpop	{d8}
 80194c6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80194ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194ce:	ee17 1a90 	vmov	r1, s15
 80194d2:	4718      	bx	r3

080194d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80194d4:	b513      	push	{r0, r1, r4, lr}
 80194d6:	4604      	mov	r4, r0
 80194d8:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80194da:	f004 fdee 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80194de:	eef0 7a60 	vmov.f32	s15, s1
 80194e2:	4620      	mov	r0, r4
 80194e4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80194e8:	ee17 2a90 	vmov	r2, s15
 80194ec:	eef0 7a40 	vmov.f32	s15, s0
 80194f0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80194f4:	ee17 1a90 	vmov	r1, s15
 80194f8:	b002      	add	sp, #8
 80194fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194fe:	f010 bcbb 	b.w	8029e78 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8019502:	b513      	push	{r0, r1, r4, lr}
 8019504:	4604      	mov	r4, r0
 8019506:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8019508:	f004 fdd7 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801950c:	eef0 7a60 	vmov.f32	s15, s1
 8019510:	4620      	mov	r0, r4
 8019512:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019516:	ee17 2a90 	vmov	r2, s15
 801951a:	eef0 7a40 	vmov.f32	s15, s0
 801951e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019522:	ee17 1a90 	vmov	r1, s15
 8019526:	b002      	add	sp, #8
 8019528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801952c:	f010 bcf1 	b.w	8029f12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08019530 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8019530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019532:	2400      	movs	r4, #0
 8019534:	9f07      	ldr	r7, [sp, #28]
 8019536:	f04f 0e01 	mov.w	lr, #1
 801953a:	4626      	mov	r6, r4
 801953c:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8019540:	4463      	add	r3, ip
 8019542:	4563      	cmp	r3, ip
 8019544:	d02d      	beq.n	80195a2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8019546:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 801954a:	2d06      	cmp	r5, #6
 801954c:	d8f9      	bhi.n	8019542 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801954e:	fa0e f505 	lsl.w	r5, lr, r5
 8019552:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8019556:	d10d      	bne.n	8019574 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8019558:	f015 0f10 	tst.w	r5, #16
 801955c:	d117      	bne.n	801958e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 801955e:	072d      	lsls	r5, r5, #28
 8019560:	d5ef      	bpl.n	8019542 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8019562:	3801      	subs	r0, #1
 8019564:	b91e      	cbnz	r6, 801956e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8019566:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 801956a:	682d      	ldr	r5, [r5, #0]
 801956c:	600d      	str	r5, [r1, #0]
 801956e:	b96c      	cbnz	r4, 801958c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8019570:	2601      	movs	r6, #1
 8019572:	e7e6      	b.n	8019542 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8019574:	b926      	cbnz	r6, 8019580 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8019576:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 801957a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801957e:	600b      	str	r3, [r1, #0]
 8019580:	b924      	cbnz	r4, 801958c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8019582:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8019586:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801958a:	6013      	str	r3, [r2, #0]
 801958c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801958e:	3801      	subs	r0, #1
 8019590:	b91c      	cbnz	r4, 801959a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8019592:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8019596:	6824      	ldr	r4, [r4, #0]
 8019598:	6014      	str	r4, [r2, #0]
 801959a:	2e00      	cmp	r6, #0
 801959c:	d1f6      	bne.n	801958c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801959e:	2401      	movs	r4, #1
 80195a0:	e7cf      	b.n	8019542 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80195a2:	b90e      	cbnz	r6, 80195a8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 80195a4:	2300      	movs	r3, #0
 80195a6:	600b      	str	r3, [r1, #0]
 80195a8:	2c00      	cmp	r4, #0
 80195aa:	d1ef      	bne.n	801958c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80195ac:	2300      	movs	r3, #0
 80195ae:	e7ec      	b.n	801958a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

080195b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 80195b0:	b538      	push	{r3, r4, r5, lr}
 80195b2:	ed2d 8b0a 	vpush	{d8-d12}
 80195b6:	eef0 ba40 	vmov.f32	s23, s0
 80195ba:	4604      	mov	r4, r0
 80195bc:	eeb0 ca60 	vmov.f32	s24, s1
 80195c0:	460d      	mov	r5, r1
 80195c2:	eef0 aa41 	vmov.f32	s21, s2
 80195c6:	eeb0 ba61 	vmov.f32	s22, s3
 80195ca:	eeb0 9a42 	vmov.f32	s18, s4
 80195ce:	eef0 9a62 	vmov.f32	s19, s5
 80195d2:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80195d6:	ee7b 8a29 	vadd.f32	s17, s22, s19
 80195da:	ee3a 8a89 	vadd.f32	s16, s21, s18
 80195de:	ee68 8a8a 	vmul.f32	s17, s17, s20
 80195e2:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80195e6:	ee3c 0a68 	vsub.f32	s0, s24, s17
 80195ea:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80195ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80195f2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80195f6:	f010 ff9d 	bl	802a534 <sqrtf>
 80195fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80195fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019602:	d12e      	bne.n	8019662 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8019604:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8019608:	ee39 7acb 	vsub.f32	s14, s19, s22
 801960c:	eeb0 8a6a 	vmov.f32	s16, s21
 8019610:	eef0 8a4b 	vmov.f32	s17, s22
 8019614:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8019618:	eee7 8a0a 	vfma.f32	s17, s14, s20
 801961c:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8019620:	eee7 8aca 	vfms.f32	s17, s15, s20
 8019624:	2d02      	cmp	r5, #2
 8019626:	dc2f      	bgt.n	8019688 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8019628:	3501      	adds	r5, #1
 801962a:	eef0 1a4b 	vmov.f32	s3, s22
 801962e:	eeb0 1a6a 	vmov.f32	s2, s21
 8019632:	4620      	mov	r0, r4
 8019634:	4629      	mov	r1, r5
 8019636:	eef0 2a68 	vmov.f32	s5, s17
 801963a:	eeb0 2a48 	vmov.f32	s4, s16
 801963e:	eef0 0a4c 	vmov.f32	s1, s24
 8019642:	eeb0 0a6b 	vmov.f32	s0, s23
 8019646:	f7ff ffb3 	bl	80195b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801964a:	eef0 0a68 	vmov.f32	s1, s17
 801964e:	eeb0 0a48 	vmov.f32	s0, s16
 8019652:	4620      	mov	r0, r4
 8019654:	f7ff ff55 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019658:	eeb0 ba68 	vmov.f32	s22, s17
 801965c:	eef0 aa48 	vmov.f32	s21, s16
 8019660:	e7b9      	b.n	80195d6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8019662:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8019666:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801966a:	ee78 8acc 	vsub.f32	s17, s17, s24
 801966e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8019672:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019676:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801967a:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801967e:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8019682:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8019686:	e7cd      	b.n	8019624 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8019688:	eef0 0a68 	vmov.f32	s1, s17
 801968c:	4620      	mov	r0, r4
 801968e:	eeb0 0a48 	vmov.f32	s0, s16
 8019692:	f7ff ff36 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019696:	ecbd 8b0a 	vpop	{d8-d12}
 801969a:	bd38      	pop	{r3, r4, r5, pc}

0801969c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 801969c:	b510      	push	{r4, lr}
 801969e:	ed2d 8b0a 	vpush	{d8-d12}
 80196a2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80196a6:	4604      	mov	r4, r0
 80196a8:	eeb0 ca40 	vmov.f32	s24, s0
 80196ac:	2b02      	cmp	r3, #2
 80196ae:	eeb0 9a60 	vmov.f32	s18, s1
 80196b2:	eef0 9a41 	vmov.f32	s19, s2
 80196b6:	eef0 8a61 	vmov.f32	s17, s3
 80196ba:	eeb0 ba42 	vmov.f32	s22, s4
 80196be:	eef0 ba62 	vmov.f32	s23, s5
 80196c2:	eeb0 aa43 	vmov.f32	s20, s6
 80196c6:	eef0 aa63 	vmov.f32	s21, s7
 80196ca:	eeb0 8a44 	vmov.f32	s16, s8
 80196ce:	eef0 ca64 	vmov.f32	s25, s9
 80196d2:	d12c      	bne.n	801972e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80196d4:	eef0 0a62 	vmov.f32	s1, s5
 80196d8:	eeb0 0a42 	vmov.f32	s0, s4
 80196dc:	f7ff ff11 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80196e0:	ee79 9acb 	vsub.f32	s19, s19, s22
 80196e4:	ee7a caec 	vsub.f32	s25, s21, s25
 80196e8:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80196ec:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80196f0:	ee69 9aac 	vmul.f32	s19, s19, s25
 80196f4:	ee28 8a88 	vmul.f32	s16, s17, s16
 80196f8:	eef4 9ac8 	vcmpe.f32	s19, s16
 80196fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019700:	db0f      	blt.n	8019722 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8019702:	2101      	movs	r1, #1
 8019704:	eef0 2a6a 	vmov.f32	s5, s21
 8019708:	eeb0 2a4a 	vmov.f32	s4, s20
 801970c:	4620      	mov	r0, r4
 801970e:	eef0 1a6b 	vmov.f32	s3, s23
 8019712:	eeb0 1a4b 	vmov.f32	s2, s22
 8019716:	eef0 0a49 	vmov.f32	s1, s18
 801971a:	eeb0 0a4c 	vmov.f32	s0, s24
 801971e:	f7ff ff47 	bl	80195b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8019722:	eef0 0a6a 	vmov.f32	s1, s21
 8019726:	4620      	mov	r0, r4
 8019728:	eeb0 0a4a 	vmov.f32	s0, s20
 801972c:	e035      	b.n	801979a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 801972e:	2b01      	cmp	r3, #1
 8019730:	d138      	bne.n	80197a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8019732:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8019736:	ee33 6a48 	vsub.f32	s12, s6, s16
 801973a:	ee71 7a42 	vsub.f32	s15, s2, s4
 801973e:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8019742:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8019746:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801974a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801974e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019752:	d027      	beq.n	80197a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8019754:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8019758:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 801975c:	eea4 8a83 	vfma.f32	s16, s9, s6
 8019760:	eee1 8a22 	vfma.f32	s17, s2, s5
 8019764:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8019768:	ee28 8a44 	vnmul.f32	s16, s16, s8
 801976c:	eee6 7a28 	vfma.f32	s15, s12, s17
 8019770:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8019774:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8019778:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 801977c:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8019780:	ee3c ca40 	vsub.f32	s24, s24, s0
 8019784:	ee39 9a60 	vsub.f32	s18, s18, s1
 8019788:	ee29 9a09 	vmul.f32	s18, s18, s18
 801978c:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8019790:	eef4 7ac9 	vcmpe.f32	s15, s18
 8019794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019798:	db04      	blt.n	80197a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801979a:	f7ff feb2 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801979e:	ecbd 8b0a 	vpop	{d8-d12}
 80197a2:	bd10      	pop	{r4, pc}
 80197a4:	eef0 0a6b 	vmov.f32	s1, s23
 80197a8:	4620      	mov	r0, r4
 80197aa:	eeb0 0a4b 	vmov.f32	s0, s22
 80197ae:	f7ff fea8 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80197b2:	e7b6      	b.n	8019722 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

080197b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 80197b4:	b510      	push	{r4, lr}
 80197b6:	ed2d 8b0c 	vpush	{d8-d13}
 80197ba:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 80197be:	4604      	mov	r4, r0
 80197c0:	eeb0 9a40 	vmov.f32	s18, s0
 80197c4:	eef0 9a60 	vmov.f32	s19, s1
 80197c8:	eef0 aa41 	vmov.f32	s21, s2
 80197cc:	eeb0 ba61 	vmov.f32	s22, s3
 80197d0:	b933      	cbnz	r3, 80197e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 80197d2:	f7ff fe96 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80197d6:	eef0 0a4b 	vmov.f32	s1, s22
 80197da:	eeb0 0a6a 	vmov.f32	s0, s21
 80197de:	e015      	b.n	801980c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80197e0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80197e4:	2b02      	cmp	r3, #2
 80197e6:	ee71 8a40 	vsub.f32	s17, s2, s0
 80197ea:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80197ee:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80197f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80197f6:	d10f      	bne.n	8019818 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80197f8:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80197fc:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019800:	f7ff fe7f 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019804:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8019808:	ee3a 0a88 	vadd.f32	s0, s21, s16
 801980c:	4620      	mov	r0, r4
 801980e:	f7ff fe78 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019812:	ecbd 8b0c 	vpop	{d8-d13}
 8019816:	bd10      	pop	{r4, pc}
 8019818:	f7ff fe73 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801981c:	eef0 0a69 	vmov.f32	s1, s19
 8019820:	eeb0 0a49 	vmov.f32	s0, s18
 8019824:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8019954 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8019828:	eeb1 aa68 	vneg.f32	s20, s17
 801982c:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8019958 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8019830:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019834:	4620      	mov	r0, r4
 8019836:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801983a:	ed9f ca48 	vldr	s24, [pc, #288]	@ 801995c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 801983e:	eddf ca48 	vldr	s25, [pc, #288]	@ 8019960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8019842:	ed9f da48 	vldr	s26, [pc, #288]	@ 8019964 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8019846:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801984a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801984e:	f7ff fe58 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019852:	eef0 0a69 	vmov.f32	s1, s19
 8019856:	eeb0 0a49 	vmov.f32	s0, s18
 801985a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8019968 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 801985e:	4620      	mov	r0, r4
 8019860:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019864:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019868:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801986c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8019870:	f7ff fe47 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019874:	eef0 0a69 	vmov.f32	s1, s19
 8019878:	eeb0 0a49 	vmov.f32	s0, s18
 801987c:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801996c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8019880:	4620      	mov	r0, r4
 8019882:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019886:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801988a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801988e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8019892:	f7ff fe36 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019896:	eef0 0a69 	vmov.f32	s1, s19
 801989a:	eeb0 0a49 	vmov.f32	s0, s18
 801989e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8019970 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 80198a2:	4620      	mov	r0, r4
 80198a4:	eee8 0a27 	vfma.f32	s1, s16, s15
 80198a8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80198ac:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80198b0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80198b4:	f7ff fe25 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80198b8:	ee79 0a88 	vadd.f32	s1, s19, s16
 80198bc:	ee39 0a28 	vadd.f32	s0, s18, s17
 80198c0:	4620      	mov	r0, r4
 80198c2:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80198c6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80198ca:	f7ff fe1a 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80198ce:	eef0 0a69 	vmov.f32	s1, s19
 80198d2:	eeb0 0a49 	vmov.f32	s0, s18
 80198d6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8019974 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80198da:	4620      	mov	r0, r4
 80198dc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80198e0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80198e4:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80198e8:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80198ec:	f7ff fe09 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80198f0:	eef0 0a69 	vmov.f32	s1, s19
 80198f4:	eeb0 0a49 	vmov.f32	s0, s18
 80198f8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8019978 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80198fc:	4620      	mov	r0, r4
 80198fe:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019902:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019906:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801990a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801990e:	f7ff fdf8 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019912:	eef0 0a69 	vmov.f32	s1, s19
 8019916:	eeb0 0a49 	vmov.f32	s0, s18
 801991a:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801997c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 801991e:	4620      	mov	r0, r4
 8019920:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019924:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019928:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801992c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8019930:	f7ff fde7 	bl	8019502 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019934:	eef0 0a69 	vmov.f32	s1, s19
 8019938:	eeb0 0a49 	vmov.f32	s0, s18
 801993c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8019980 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8019940:	4620      	mov	r0, r4
 8019942:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019946:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801994a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801994e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8019952:	e73e      	b.n	80197d2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8019954:	3d23d70a 	.word	0x3d23d70a
 8019958:	3e8f5c29 	.word	0x3e8f5c29
 801995c:	3f19999a 	.word	0x3f19999a
 8019960:	3f4ccccd 	.word	0x3f4ccccd
 8019964:	3f75c28f 	.word	0x3f75c28f
 8019968:	3e4ccccd 	.word	0x3e4ccccd
 801996c:	3ecccccd 	.word	0x3ecccccd
 8019970:	3f3851ec 	.word	0x3f3851ec
 8019974:	3fa3d70a 	.word	0x3fa3d70a
 8019978:	3fcccccd 	.word	0x3fcccccd
 801997c:	3fe66666 	.word	0x3fe66666
 8019980:	3ffae148 	.word	0x3ffae148

08019984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8019984:	b570      	push	{r4, r5, r6, lr}
 8019986:	ed2d 8b06 	vpush	{d8-d10}
 801998a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801998e:	eef0 aa40 	vmov.f32	s21, s0
 8019992:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8019996:	4604      	mov	r4, r0
 8019998:	ee30 8ac8 	vsub.f32	s16, s1, s16
 801999c:	ee30 9a49 	vsub.f32	s18, s0, s18
 80199a0:	eeb0 aa60 	vmov.f32	s20, s1
 80199a4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80199a8:	eea9 0a09 	vfma.f32	s0, s18, s18
 80199ac:	f010 fdc2 	bl	802a534 <sqrtf>
 80199b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80199b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b8:	dd36      	ble.n	8019a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80199ba:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80199be:	2600      	movs	r6, #0
 80199c0:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 80199c4:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80199c8:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 80199cc:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 80199d0:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80199d4:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80199d8:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80199dc:	ee70 9a28 	vadd.f32	s19, s0, s17
 80199e0:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80199e4:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80199e8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80199ec:	b1fd      	cbz	r5, 8019a2e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80199ee:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80199f2:	eef0 0a49 	vmov.f32	s1, s18
 80199f6:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80199fa:	eeb0 0a69 	vmov.f32	s0, s19
 80199fe:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8019a02:	4620      	mov	r0, r4
 8019a04:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8019a08:	f7ff fd64 	bl	80194d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8019a0c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8019a10:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8019a14:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8019a18:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8019a1c:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8019a20:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8019a24:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8019a28:	ecbd 8b06 	vpop	{d8-d10}
 8019a2c:	bd70      	pop	{r4, r5, r6, pc}
 8019a2e:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8019a32:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8019a36:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8019a3a:	b16b      	cbz	r3, 8019a58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8019a3c:	eef0 1a49 	vmov.f32	s3, s18
 8019a40:	4620      	mov	r0, r4
 8019a42:	eeb0 1a69 	vmov.f32	s2, s19
 8019a46:	eef0 0a62 	vmov.f32	s1, s5
 8019a4a:	eeb0 0a42 	vmov.f32	s0, s4
 8019a4e:	f7ff feb1 	bl	80197b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8019a52:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8019a56:	e7db      	b.n	8019a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8019a58:	eef0 4a48 	vmov.f32	s9, s16
 8019a5c:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8019a60:	eeb0 4a68 	vmov.f32	s8, s17
 8019a64:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8019a68:	eef0 3a49 	vmov.f32	s7, s18
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	eeb0 3a69 	vmov.f32	s6, s19
 8019a72:	f7ff fe13 	bl	801969c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8019a76:	e7cb      	b.n	8019a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08019a78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8019a78:	ee07 2a90 	vmov	s15, r2
 8019a7c:	ee07 1a10 	vmov	s14, r1
 8019a80:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019a84:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8019a98 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8019a88:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8019a8c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019a90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019a94:	f7ff bf76 	b.w	8019984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019a98:	3d000000 	.word	0x3d000000

08019a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8019a9c:	b538      	push	{r3, r4, r5, lr}
 8019a9e:	ed2d 8b02 	vpush	{d8}
 8019aa2:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8019aa6:	4604      	mov	r4, r0
 8019aa8:	b31d      	cbz	r5, 8019af2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8019aaa:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8019aae:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8019ab2:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8019ab6:	ee78 8a67 	vsub.f32	s17, s16, s15
 8019aba:	ee38 8a27 	vadd.f32	s16, s16, s15
 8019abe:	eef0 0a68 	vmov.f32	s1, s17
 8019ac2:	f7ff fd07 	bl	80194d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8019ac6:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8019aca:	eef0 1a48 	vmov.f32	s3, s16
 8019ace:	4620      	mov	r0, r4
 8019ad0:	eeb0 0a41 	vmov.f32	s0, s2
 8019ad4:	eef0 0a68 	vmov.f32	s1, s17
 8019ad8:	f7ff fe6c 	bl	80197b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8019adc:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8019ae0:	eef0 1a68 	vmov.f32	s3, s17
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	eef0 0a48 	vmov.f32	s1, s16
 8019aea:	eeb0 0a41 	vmov.f32	s0, s2
 8019aee:	f7ff fe61 	bl	80197b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8019af2:	4628      	mov	r0, r5
 8019af4:	ecbd 8b02 	vpop	{d8}
 8019af8:	bd38      	pop	{r3, r4, r5, pc}

08019afa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8019afa:	b510      	push	{r4, lr}
 8019afc:	ed2d 8b02 	vpush	{d8}
 8019b00:	4604      	mov	r4, r0
 8019b02:	eeb0 8a40 	vmov.f32	s16, s0
 8019b06:	eef0 8a60 	vmov.f32	s17, s1
 8019b0a:	f7ff ffc7 	bl	8019a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019b0e:	b9d0      	cbnz	r0, 8019b46 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8019b10:	4620      	mov	r0, r4
 8019b12:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8019b16:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8019b1a:	eef0 0a68 	vmov.f32	s1, s17
 8019b1e:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8019b22:	eeb0 0a48 	vmov.f32	s0, s16
 8019b26:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8019b2a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8019b2e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8019b32:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8019b36:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8019b3a:	f7ff fdaf 	bl	801969c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8019b3e:	2001      	movs	r0, #1
 8019b40:	ecbd 8b02 	vpop	{d8}
 8019b44:	bd10      	pop	{r4, pc}
 8019b46:	2000      	movs	r0, #0
 8019b48:	e7fa      	b.n	8019b40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08019b4a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8019b4a:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8019b4e:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8019b52:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8019b56:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8019b5a:	f7ff be2b 	b.w	80197b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08019b60 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8019b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b64:	b089      	sub	sp, #36	@ 0x24
 8019b66:	461c      	mov	r4, r3
 8019b68:	4682      	mov	sl, r0
 8019b6a:	4615      	mov	r5, r2
 8019b6c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8019b70:	f10d 0820 	add.w	r8, sp, #32
 8019b74:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8019b76:	9304      	str	r3, [sp, #16]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	9105      	str	r1, [sp, #20]
 8019b7c:	9306      	str	r3, [sp, #24]
 8019b7e:	f848 3d04 	str.w	r3, [r8, #-4]!
 8019b82:	9b04      	ldr	r3, [sp, #16]
 8019b84:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8019b88:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8019b8c:	9b05      	ldr	r3, [sp, #20]
 8019b8e:	429d      	cmp	r5, r3
 8019b90:	d96d      	bls.n	8019c6e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8019b92:	3d01      	subs	r5, #1
 8019b94:	f819 3005 	ldrb.w	r3, [r9, r5]
 8019b98:	2b06      	cmp	r3, #6
 8019b9a:	d8f7      	bhi.n	8019b8c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8019b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8019ba4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8019b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ba2:	bf00      	nop
 8019ba4:	08019bc3 	.word	0x08019bc3
 8019ba8:	08019b8d 	.word	0x08019b8d
 8019bac:	08019bc1 	.word	0x08019bc1
 8019bb0:	08019be5 	.word	0x08019be5
 8019bb4:	08019be5 	.word	0x08019be5
 8019bb8:	08019be9 	.word	0x08019be9
 8019bbc:	08019c29 	.word	0x08019c29
 8019bc0:	3c02      	subs	r4, #2
 8019bc2:	4650      	mov	r0, sl
 8019bc4:	9400      	str	r4, [sp, #0]
 8019bc6:	462b      	mov	r3, r5
 8019bc8:	4642      	mov	r2, r8
 8019bca:	a906      	add	r1, sp, #24
 8019bcc:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019bd0:	f7ff fcae 	bl	8019530 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8019bd4:	eddd 0a07 	vldr	s1, [sp, #28]
 8019bd8:	ed9d 0a06 	vldr	s0, [sp, #24]
 8019bdc:	4630      	mov	r0, r6
 8019bde:	f7ff fed1 	bl	8019984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019be2:	e7d3      	b.n	8019b8c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8019be4:	3c01      	subs	r4, #1
 8019be6:	e7ec      	b.n	8019bc2 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8019be8:	f1a4 0b04 	sub.w	fp, r4, #4
 8019bec:	3c02      	subs	r4, #2
 8019bee:	4650      	mov	r0, sl
 8019bf0:	462b      	mov	r3, r5
 8019bf2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019bf6:	f8cd b000 	str.w	fp, [sp]
 8019bfa:	4642      	mov	r2, r8
 8019bfc:	a906      	add	r1, sp, #24
 8019bfe:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019c02:	f7ff fc95 	bl	8019530 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8019c06:	eddd 2a07 	vldr	s5, [sp, #28]
 8019c0a:	ed9d 2a06 	vldr	s4, [sp, #24]
 8019c0e:	4630      	mov	r0, r6
 8019c10:	ed54 1a01 	vldr	s3, [r4, #-4]
 8019c14:	ed14 1a02 	vldr	s2, [r4, #-8]
 8019c18:	edd4 0a01 	vldr	s1, [r4, #4]
 8019c1c:	ed94 0a00 	vldr	s0, [r4]
 8019c20:	f7ff fc1a 	bl	8019458 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8019c24:	465c      	mov	r4, fp
 8019c26:	e7b1      	b.n	8019b8c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8019c28:	f1a4 0b06 	sub.w	fp, r4, #6
 8019c2c:	3c02      	subs	r4, #2
 8019c2e:	4650      	mov	r0, sl
 8019c30:	462b      	mov	r3, r5
 8019c32:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019c36:	f8cd b000 	str.w	fp, [sp]
 8019c3a:	4642      	mov	r2, r8
 8019c3c:	a906      	add	r1, sp, #24
 8019c3e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019c42:	f7ff fc75 	bl	8019530 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8019c46:	eddd 3a07 	vldr	s7, [sp, #28]
 8019c4a:	ed9d 3a06 	vldr	s6, [sp, #24]
 8019c4e:	4630      	mov	r0, r6
 8019c50:	ed54 2a03 	vldr	s5, [r4, #-12]
 8019c54:	ed14 2a04 	vldr	s4, [r4, #-16]
 8019c58:	ed54 1a01 	vldr	s3, [r4, #-4]
 8019c5c:	ed14 1a02 	vldr	s2, [r4, #-8]
 8019c60:	edd4 0a01 	vldr	s1, [r4, #4]
 8019c64:	ed94 0a00 	vldr	s0, [r4]
 8019c68:	f7ff fc15 	bl	8019496 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8019c6c:	e7da      	b.n	8019c24 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8019c6e:	9b04      	ldr	r3, [sp, #16]
 8019c70:	b113      	cbz	r3, 8019c78 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8019c72:	4630      	mov	r0, r6
 8019c74:	f7ff ff69 	bl	8019b4a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8019c78:	b009      	add	sp, #36	@ 0x24
 8019c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c7e:	bf00      	nop

08019c80 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8019c80:	eef0 7a60 	vmov.f32	s15, s1
 8019c84:	6803      	ldr	r3, [r0, #0]
 8019c86:	689b      	ldr	r3, [r3, #8]
 8019c88:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019c8c:	ee17 2a90 	vmov	r2, s15
 8019c90:	eef0 7a40 	vmov.f32	s15, s0
 8019c94:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019c98:	ee17 1a90 	vmov	r1, s15
 8019c9c:	4718      	bx	r3
	...

08019ca0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8019ca0:	4b04      	ldr	r3, [pc, #16]	@ (8019cb4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8019ca2:	b510      	push	{r4, lr}
 8019ca4:	4604      	mov	r4, r0
 8019ca6:	f840 3b14 	str.w	r3, [r0], #20
 8019caa:	f000 ff15 	bl	801aad8 <_ZN8touchgfx7OutlineD1Ev>
 8019cae:	4620      	mov	r0, r4
 8019cb0:	bd10      	pop	{r4, pc}
 8019cb2:	bf00      	nop
 8019cb4:	08030c24 	.word	0x08030c24

08019cb8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8019cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cbc:	ed2d 8b04 	vpush	{d8-d9}
 8019cc0:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8019cc4:	b0b5      	sub	sp, #212	@ 0xd4
 8019cc6:	4605      	mov	r5, r0
 8019cc8:	468b      	mov	fp, r1
 8019cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019cce:	9206      	str	r2, [sp, #24]
 8019cd0:	461e      	mov	r6, r3
 8019cd2:	2400      	movs	r4, #0
 8019cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cd8:	f240 814f 	bls.w	8019f7a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8019cdc:	23ff      	movs	r3, #255	@ 0xff
 8019cde:	1d02      	adds	r2, r0, #4
 8019ce0:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8019f80 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8019ce4:	f04f 0800 	mov.w	r8, #0
 8019ce8:	9300      	str	r3, [sp, #0]
 8019cea:	af08      	add	r7, sp, #32
 8019cec:	6981      	ldr	r1, [r0, #24]
 8019cee:	a808      	add	r0, sp, #32
 8019cf0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8019cf2:	eef0 9a49 	vmov.f32	s19, s18
 8019cf6:	f00f ff73 	bl	8029be0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8019cfa:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8019cfe:	4ba1      	ldr	r3, [pc, #644]	@ (8019f84 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8019d00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019d08:	2201      	movs	r2, #1
 8019d0a:	9308      	str	r3, [sp, #32]
 8019d0c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8019d10:	edd5 6a08 	vldr	s13, [r5, #32]
 8019d14:	eeb0 8a49 	vmov.f32	s16, s18
 8019d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d1c:	9325      	str	r3, [sp, #148]	@ 0x94
 8019d1e:	f04f 0300 	mov.w	r3, #0
 8019d22:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8019d26:	7f6a      	ldrb	r2, [r5, #29]
 8019d28:	eef0 8a49 	vmov.f32	s17, s18
 8019d2c:	bf48      	it	mi
 8019d2e:	eef1 7a67 	vnegmi.f32	s15, s15
 8019d32:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8019d36:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8019d3a:	46c1      	mov	r9, r8
 8019d3c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8019d40:	f04f 0a01 	mov.w	sl, #1
 8019d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019d48:	7fab      	ldrb	r3, [r5, #30]
 8019d4a:	942a      	str	r4, [sp, #168]	@ 0xa8
 8019d4c:	435a      	muls	r2, r3
 8019d4e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8019d52:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8019d56:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8019d5a:	1c53      	adds	r3, r2, #1
 8019d5c:	942b      	str	r4, [sp, #172]	@ 0xac
 8019d5e:	942c      	str	r4, [sp, #176]	@ 0xb0
 8019d60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019d64:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019d68:	942d      	str	r4, [sp, #180]	@ 0xb4
 8019d6a:	942e      	str	r4, [sp, #184]	@ 0xb8
 8019d6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d74:	942f      	str	r4, [sp, #188]	@ 0xbc
 8019d76:	9430      	str	r4, [sp, #192]	@ 0xc0
 8019d78:	9431      	str	r4, [sp, #196]	@ 0xc4
 8019d7a:	9432      	str	r4, [sp, #200]	@ 0xc8
 8019d7c:	9433      	str	r4, [sp, #204]	@ 0xcc
 8019d7e:	4644      	mov	r4, r8
 8019d80:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8019d84:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8019d88:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8019d8c:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8019d90:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8019d94:	9b06      	ldr	r3, [sp, #24]
 8019d96:	454b      	cmp	r3, r9
 8019d98:	f000 80cc 	beq.w	8019f34 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8019d9c:	f109 0301 	add.w	r3, r9, #1
 8019da0:	9305      	str	r3, [sp, #20]
 8019da2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8019da6:	2b06      	cmp	r3, #6
 8019da8:	d839      	bhi.n	8019e1e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019daa:	e8df f003 	tbb	[pc, r3]
 8019dae:	3b04      	.short	0x3b04
 8019db0:	817c6f60 	.word	0x817c6f60
 8019db4:	a0          	.byte	0xa0
 8019db5:	00          	.byte	0x00
 8019db6:	45c1      	cmp	r9, r8
 8019db8:	d92b      	bls.n	8019e12 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8019dba:	eef0 0a49 	vmov.f32	s1, s18
 8019dbe:	4638      	mov	r0, r7
 8019dc0:	eeb0 0a69 	vmov.f32	s0, s19
 8019dc4:	f7ff fdde 	bl	8019984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019dc8:	4638      	mov	r0, r7
 8019dca:	f7ff fe67 	bl	8019a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019dce:	4681      	mov	r9, r0
 8019dd0:	b9f8      	cbnz	r0, 8019e12 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8019dd2:	eef0 0a49 	vmov.f32	s1, s18
 8019dd6:	4638      	mov	r0, r7
 8019dd8:	eeb0 0a69 	vmov.f32	s0, s19
 8019ddc:	f7ff fe8d 	bl	8019afa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8019de0:	4628      	mov	r0, r5
 8019de2:	4623      	mov	r3, r4
 8019de4:	9a05      	ldr	r2, [sp, #20]
 8019de6:	4641      	mov	r1, r8
 8019de8:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8019dec:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8019df0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8019df4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8019df8:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8019dfc:	e9cd b600 	strd	fp, r6, [sp]
 8019e00:	f7ff feae 	bl	8019b60 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8019e04:	eef0 0a49 	vmov.f32	s1, s18
 8019e08:	eeb0 0a69 	vmov.f32	s0, s19
 8019e0c:	4638      	mov	r0, r7
 8019e0e:	f7ff fe74 	bl	8019afa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8019e12:	eeb0 8a49 	vmov.f32	s16, s18
 8019e16:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019e1a:	eef0 8a69 	vmov.f32	s17, s19
 8019e1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019e22:	e7b7      	b.n	8019d94 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8019e24:	45c1      	cmp	r9, r8
 8019e26:	d90d      	bls.n	8019e44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8019e28:	4638      	mov	r0, r7
 8019e2a:	f7ff fe37 	bl	8019a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019e2e:	b948      	cbnz	r0, 8019e44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8019e30:	4623      	mov	r3, r4
 8019e32:	464a      	mov	r2, r9
 8019e34:	4641      	mov	r1, r8
 8019e36:	4628      	mov	r0, r5
 8019e38:	e9cd a702 	strd	sl, r7, [sp, #8]
 8019e3c:	e9cd b600 	strd	fp, r6, [sp]
 8019e40:	f7ff fe8e 	bl	8019b60 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8019e44:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019e48:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8019e4c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8019e50:	3402      	adds	r4, #2
 8019e52:	edd3 8a00 	vldr	s17, [r3]
 8019e56:	46c8      	mov	r8, r9
 8019e58:	ed93 8a01 	vldr	s16, [r3, #4]
 8019e5c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8019e60:	eef0 9a68 	vmov.f32	s19, s17
 8019e64:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8019e68:	eeb0 9a48 	vmov.f32	s18, s16
 8019e6c:	e7d7      	b.n	8019e1e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019e6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019e72:	4638      	mov	r0, r7
 8019e74:	3402      	adds	r4, #2
 8019e76:	edd3 8a00 	vldr	s17, [r3]
 8019e7a:	ed93 8a01 	vldr	s16, [r3, #4]
 8019e7e:	eeb0 0a68 	vmov.f32	s0, s17
 8019e82:	eef0 0a48 	vmov.f32	s1, s16
 8019e86:	f7ff fd7d 	bl	8019984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019e8a:	e7c8      	b.n	8019e1e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019e8c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019e90:	edd3 8a00 	vldr	s17, [r3]
 8019e94:	eef0 0a48 	vmov.f32	s1, s16
 8019e98:	4638      	mov	r0, r7
 8019e9a:	eeb0 0a68 	vmov.f32	s0, s17
 8019e9e:	3401      	adds	r4, #1
 8019ea0:	f7ff fd70 	bl	8019984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019ea4:	e7bb      	b.n	8019e1e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019ea6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019eaa:	ed93 8a00 	vldr	s16, [r3]
 8019eae:	e7f1      	b.n	8019e94 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8019eb0:	00a3      	lsls	r3, r4, #2
 8019eb2:	eef0 0a48 	vmov.f32	s1, s16
 8019eb6:	eeb0 0a68 	vmov.f32	s0, s17
 8019eba:	4638      	mov	r0, r7
 8019ebc:	f103 0208 	add.w	r2, r3, #8
 8019ec0:	f103 090c 	add.w	r9, r3, #12
 8019ec4:	4433      	add	r3, r6
 8019ec6:	3404      	adds	r4, #4
 8019ec8:	4432      	add	r2, r6
 8019eca:	44b1      	add	r9, r6
 8019ecc:	edd3 1a01 	vldr	s3, [r3, #4]
 8019ed0:	ed92 2a00 	vldr	s4, [r2]
 8019ed4:	edd9 2a00 	vldr	s5, [r9]
 8019ed8:	ed93 1a00 	vldr	s2, [r3]
 8019edc:	9207      	str	r2, [sp, #28]
 8019ede:	f7ff fabb 	bl	8019458 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8019ee2:	9a07      	ldr	r2, [sp, #28]
 8019ee4:	ed99 8a00 	vldr	s16, [r9]
 8019ee8:	edd2 8a00 	vldr	s17, [r2]
 8019eec:	e797      	b.n	8019e1e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019eee:	00a3      	lsls	r3, r4, #2
 8019ef0:	eef0 0a48 	vmov.f32	s1, s16
 8019ef4:	eeb0 0a68 	vmov.f32	s0, s17
 8019ef8:	4638      	mov	r0, r7
 8019efa:	f103 0210 	add.w	r2, r3, #16
 8019efe:	f103 0914 	add.w	r9, r3, #20
 8019f02:	4433      	add	r3, r6
 8019f04:	3406      	adds	r4, #6
 8019f06:	4432      	add	r2, r6
 8019f08:	44b1      	add	r9, r6
 8019f0a:	edd3 2a03 	vldr	s5, [r3, #12]
 8019f0e:	ed92 3a00 	vldr	s6, [r2]
 8019f12:	edd9 3a00 	vldr	s7, [r9]
 8019f16:	ed93 2a02 	vldr	s4, [r3, #8]
 8019f1a:	edd3 1a01 	vldr	s3, [r3, #4]
 8019f1e:	ed93 1a00 	vldr	s2, [r3]
 8019f22:	9207      	str	r2, [sp, #28]
 8019f24:	f7ff fab7 	bl	8019496 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8019f28:	9a07      	ldr	r2, [sp, #28]
 8019f2a:	ed99 8a00 	vldr	s16, [r9]
 8019f2e:	edd2 8a00 	vldr	s17, [r2]
 8019f32:	e774      	b.n	8019e1e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019f34:	9b06      	ldr	r3, [sp, #24]
 8019f36:	af08      	add	r7, sp, #32
 8019f38:	4543      	cmp	r3, r8
 8019f3a:	d90f      	bls.n	8019f5c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8019f3c:	4638      	mov	r0, r7
 8019f3e:	f7ff fdad 	bl	8019a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019f42:	b958      	cbnz	r0, 8019f5c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8019f44:	2301      	movs	r3, #1
 8019f46:	9703      	str	r7, [sp, #12]
 8019f48:	f8cd b000 	str.w	fp, [sp]
 8019f4c:	4641      	mov	r1, r8
 8019f4e:	9a06      	ldr	r2, [sp, #24]
 8019f50:	4628      	mov	r0, r5
 8019f52:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8019f56:	4623      	mov	r3, r4
 8019f58:	f7ff fe02 	bl	8019b60 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8019f5c:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8019f60:	4638      	mov	r0, r7
 8019f62:	f00f fed1 	bl	8029d08 <_ZN8touchgfx6Canvas6renderEh>
 8019f66:	4604      	mov	r4, r0
 8019f68:	4638      	mov	r0, r7
 8019f6a:	f7ff fe99 	bl	8019ca0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8019f6e:	4620      	mov	r0, r4
 8019f70:	b035      	add	sp, #212	@ 0xd4
 8019f72:	ecbd 8b04 	vpop	{d8-d9}
 8019f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f7a:	2401      	movs	r4, #1
 8019f7c:	e7f7      	b.n	8019f6e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8019f7e:	bf00      	nop
 8019f80:	00000000 	.word	0x00000000
 8019f84:	08030680 	.word	0x08030680

08019f88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8019f88:	b510      	push	{r4, lr}
 8019f8a:	4604      	mov	r4, r0
 8019f8c:	f7ff fe88 	bl	8019ca0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8019f90:	21b0      	movs	r1, #176	@ 0xb0
 8019f92:	4620      	mov	r0, r4
 8019f94:	f010 faa4 	bl	802a4e0 <_ZdlPvj>
 8019f98:	4620      	mov	r0, r4
 8019f9a:	bd10      	pop	{r4, pc}

08019f9c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8019f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fa0:	4698      	mov	r8, r3
 8019fa2:	23ff      	movs	r3, #255	@ 0xff
 8019fa4:	4607      	mov	r7, r0
 8019fa6:	4689      	mov	r9, r1
 8019fa8:	4692      	mov	sl, r2
 8019faa:	1d02      	adds	r2, r0, #4
 8019fac:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8019fb0:	2400      	movs	r4, #0
 8019fb2:	44ca      	add	sl, r9
 8019fb4:	ed2d 8b06 	vpush	{d8-d10}
 8019fb8:	b0aa      	sub	sp, #168	@ 0xa8
 8019fba:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 801a1c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8019fbe:	9300      	str	r3, [sp, #0]
 8019fc0:	eef0 8a48 	vmov.f32	s17, s16
 8019fc4:	6981      	ldr	r1, [r0, #24]
 8019fc6:	a80d      	add	r0, sp, #52	@ 0x34
 8019fc8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8019fca:	f00f fe09 	bl	8029be0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8019fce:	7f3b      	ldrb	r3, [r7, #28]
 8019fd0:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 801a1c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	1e5a      	subs	r2, r3, #1
 8019fd8:	eeb0 0a60 	vmov.f32	s0, s1
 8019fdc:	4253      	negs	r3, r2
 8019fde:	4153      	adcs	r3, r2
 8019fe0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8019fe4:	f004 f869 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019fe8:	eeb0 9a40 	vmov.f32	s18, s0
 8019fec:	eef0 9a60 	vmov.f32	s19, s1
 8019ff0:	45ca      	cmp	sl, r9
 8019ff2:	f000 80cd 	beq.w	801a190 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8019ff6:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019ffa:	2b06      	cmp	r3, #6
 8019ffc:	d8f8      	bhi.n	8019ff0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019ffe:	e8df f003 	tbb	[pc, r3]
 801a002:	0804      	.short	0x0804
 801a004:	58533f2a 	.word	0x58533f2a
 801a008:	8a          	.byte	0x8a
 801a009:	00          	.byte	0x00
 801a00a:	a80d      	add	r0, sp, #52	@ 0x34
 801a00c:	f00f fe5a 	bl	8029cc4 <_ZN8touchgfx6Canvas5closeEv>
 801a010:	e7ee      	b.n	8019ff0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801a012:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801a016:	4628      	mov	r0, r5
 801a018:	ed93 8a01 	vldr	s16, [r3, #4]
 801a01c:	edd3 8a00 	vldr	s17, [r3]
 801a020:	eef0 0a48 	vmov.f32	s1, s16
 801a024:	eeb0 0a68 	vmov.f32	s0, s17
 801a028:	f004 f847 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a02c:	a80d      	add	r0, sp, #52	@ 0x34
 801a02e:	eef0 7a60 	vmov.f32	s15, s1
 801a032:	eeb0 9a40 	vmov.f32	s18, s0
 801a036:	eef0 9a60 	vmov.f32	s19, s1
 801a03a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801a03e:	ee17 2a90 	vmov	r2, s15
 801a042:	eef0 7a40 	vmov.f32	s15, s0
 801a046:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801a04a:	ee17 1a90 	vmov	r1, s15
 801a04e:	f00f ff13 	bl	8029e78 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a052:	3402      	adds	r4, #2
 801a054:	e7cc      	b.n	8019ff0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801a056:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801a05a:	4628      	mov	r0, r5
 801a05c:	edd3 8a00 	vldr	s17, [r3]
 801a060:	ed93 8a01 	vldr	s16, [r3, #4]
 801a064:	eeb0 0a68 	vmov.f32	s0, s17
 801a068:	eef0 0a48 	vmov.f32	s1, s16
 801a06c:	f004 f825 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a070:	a80d      	add	r0, sp, #52	@ 0x34
 801a072:	eeb0 9a40 	vmov.f32	s18, s0
 801a076:	eef0 9a60 	vmov.f32	s19, s1
 801a07a:	f7ff fe01 	bl	8019c80 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801a07e:	e7e8      	b.n	801a052 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801a080:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801a084:	edd3 8a00 	vldr	s17, [r3]
 801a088:	eef0 0a48 	vmov.f32	s1, s16
 801a08c:	4628      	mov	r0, r5
 801a08e:	eeb0 0a68 	vmov.f32	s0, s17
 801a092:	3401      	adds	r4, #1
 801a094:	f004 f811 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a098:	a80d      	add	r0, sp, #52	@ 0x34
 801a09a:	eef0 9a60 	vmov.f32	s19, s1
 801a09e:	eeb0 9a40 	vmov.f32	s18, s0
 801a0a2:	f7ff fded 	bl	8019c80 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801a0a6:	e7a3      	b.n	8019ff0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801a0a8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801a0ac:	ed93 8a00 	vldr	s16, [r3]
 801a0b0:	e7ea      	b.n	801a088 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801a0b2:	1ca3      	adds	r3, r4, #2
 801a0b4:	4628      	mov	r0, r5
 801a0b6:	3404      	adds	r4, #4
 801a0b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801a0bc:	ed53 0a01 	vldr	s1, [r3, #-4]
 801a0c0:	ed13 0a02 	vldr	s0, [r3, #-8]
 801a0c4:	edd3 8a00 	vldr	s17, [r3]
 801a0c8:	ed93 8a01 	vldr	s16, [r3, #4]
 801a0cc:	f003 fff5 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a0d0:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801a0d4:	eeb0 0a68 	vmov.f32	s0, s17
 801a0d8:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801a0dc:	eef0 0a48 	vmov.f32	s1, s16
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	f003 ffea 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a0e6:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801a0ea:	eef0 2a60 	vmov.f32	s5, s1
 801a0ee:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 801a0f2:	eeb0 2a40 	vmov.f32	s4, s0
 801a0f6:	a80d      	add	r0, sp, #52	@ 0x34
 801a0f8:	eeb0 aa40 	vmov.f32	s20, s0
 801a0fc:	eef0 aa60 	vmov.f32	s21, s1
 801a100:	eeb0 0a49 	vmov.f32	s0, s18
 801a104:	eef0 0a69 	vmov.f32	s1, s19
 801a108:	f7ff f9a6 	bl	8019458 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801a10c:	eef0 9a6a 	vmov.f32	s19, s21
 801a110:	eeb0 9a4a 	vmov.f32	s18, s20
 801a114:	e76c      	b.n	8019ff0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801a116:	1d26      	adds	r6, r4, #4
 801a118:	4628      	mov	r0, r5
 801a11a:	3406      	adds	r4, #6
 801a11c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a120:	ed56 0a03 	vldr	s1, [r6, #-12]
 801a124:	ed16 0a04 	vldr	s0, [r6, #-16]
 801a128:	edd6 8a00 	vldr	s17, [r6]
 801a12c:	ed96 8a01 	vldr	s16, [r6, #4]
 801a130:	f003 ffc3 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a134:	ed8d 0a07 	vstr	s0, [sp, #28]
 801a138:	4628      	mov	r0, r5
 801a13a:	ed16 0a02 	vldr	s0, [r6, #-8]
 801a13e:	edcd 0a08 	vstr	s1, [sp, #32]
 801a142:	ed56 0a01 	vldr	s1, [r6, #-4]
 801a146:	f003 ffb8 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a14a:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801a14e:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801a152:	eeb0 0a68 	vmov.f32	s0, s17
 801a156:	eef0 0a48 	vmov.f32	s1, s16
 801a15a:	4628      	mov	r0, r5
 801a15c:	f003 ffad 	bl	801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a160:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801a164:	eeb0 3a40 	vmov.f32	s6, s0
 801a168:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 801a16c:	eef0 3a60 	vmov.f32	s7, s1
 801a170:	eddd 1a08 	vldr	s3, [sp, #32]
 801a174:	eeb0 aa40 	vmov.f32	s20, s0
 801a178:	ed9d 1a07 	vldr	s2, [sp, #28]
 801a17c:	eef0 aa60 	vmov.f32	s21, s1
 801a180:	a80d      	add	r0, sp, #52	@ 0x34
 801a182:	eef0 0a69 	vmov.f32	s1, s19
 801a186:	eeb0 0a49 	vmov.f32	s0, s18
 801a18a:	f7ff f984 	bl	8019496 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801a18e:	e7bd      	b.n	801a10c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801a190:	7f7b      	ldrb	r3, [r7, #29]
 801a192:	a80d      	add	r0, sp, #52	@ 0x34
 801a194:	7fb9      	ldrb	r1, [r7, #30]
 801a196:	4359      	muls	r1, r3
 801a198:	1c4b      	adds	r3, r1, #1
 801a19a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a19e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a1a2:	f00f fdb1 	bl	8029d08 <_ZN8touchgfx6Canvas6renderEh>
 801a1a6:	4b07      	ldr	r3, [pc, #28]	@ (801a1c4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 801a1a8:	4604      	mov	r4, r0
 801a1aa:	a812      	add	r0, sp, #72	@ 0x48
 801a1ac:	930d      	str	r3, [sp, #52]	@ 0x34
 801a1ae:	f000 fc93 	bl	801aad8 <_ZN8touchgfx7OutlineD1Ev>
 801a1b2:	4620      	mov	r0, r4
 801a1b4:	b02a      	add	sp, #168	@ 0xa8
 801a1b6:	ecbd 8b06 	vpop	{d8-d10}
 801a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1be:	bf00      	nop
 801a1c0:	00000000 	.word	0x00000000
 801a1c4:	08030c24 	.word	0x08030c24

0801a1c8 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 801a1c8:	b410      	push	{r4}
 801a1ca:	7f04      	ldrb	r4, [r0, #28]
 801a1cc:	b11c      	cbz	r4, 801a1d6 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801a1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1d2:	f7ff bee3 	b.w	8019f9c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801a1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1da:	f7ff bd6d 	b.w	8019cb8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801a1de <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801a1de:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a1e2:	4691      	mov	r9, r2
 801a1e4:	4602      	mov	r2, r0
 801a1e6:	4606      	mov	r6, r0
 801a1e8:	4688      	mov	r8, r1
 801a1ea:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801a1ee:	469a      	mov	sl, r3
 801a1f0:	ab02      	add	r3, sp, #8
 801a1f2:	af02      	add	r7, sp, #8
 801a1f4:	6851      	ldr	r1, [r2, #4]
 801a1f6:	c303      	stmia	r3!, {r0, r1}
 801a1f8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	dd2f      	ble.n	801a260 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801a200:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 801a204:	2c00      	cmp	r4, #0
 801a206:	dd2b      	ble.n	801a260 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801a208:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a20c:	441c      	add	r4, r3
 801a20e:	b2a4      	uxth	r4, r4
 801a210:	b225      	sxth	r5, r4
 801a212:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a216:	42ab      	cmp	r3, r5
 801a218:	da22      	bge.n	801a260 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801a21a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a21c:	464a      	mov	r2, r9
 801a21e:	9701      	str	r7, [sp, #4]
 801a220:	4641      	mov	r1, r8
 801a222:	9300      	str	r3, [sp, #0]
 801a224:	4630      	mov	r0, r6
 801a226:	4653      	mov	r3, sl
 801a228:	f7ff ffce 	bl	801a1c8 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801a22c:	b940      	cbnz	r0, 801a240 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801a22e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a232:	2b01      	cmp	r3, #1
 801a234:	d004      	beq.n	801a240 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801a236:	3301      	adds	r3, #1
 801a238:	105b      	asrs	r3, r3, #1
 801a23a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a23e:	e7ec      	b.n	801a21a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 801a240:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a244:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a248:	4413      	add	r3, r2
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	441a      	add	r2, r3
 801a24e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a252:	b212      	sxth	r2, r2
 801a254:	4295      	cmp	r5, r2
 801a256:	dadc      	bge.n	801a212 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 801a258:	1ae3      	subs	r3, r4, r3
 801a25a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a25e:	e7d8      	b.n	801a212 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 801a260:	b004      	add	sp, #16
 801a262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a266 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 801a266:	0c0b      	lsrs	r3, r1, #16
 801a268:	60c1      	str	r1, [r0, #12]
 801a26a:	7481      	strb	r1, [r0, #18]
 801a26c:	7403      	strb	r3, [r0, #16]
 801a26e:	0a0b      	lsrs	r3, r1, #8
 801a270:	7443      	strb	r3, [r0, #17]
 801a272:	4770      	bx	lr

0801a274 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 801a274:	f1a0 0008 	sub.w	r0, r0, #8
 801a278:	e7f5      	b.n	801a266 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0801a27c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 801a27c:	b508      	push	{r3, lr}
 801a27e:	4b05      	ldr	r3, [pc, #20]	@ (801a294 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 801a280:	6818      	ldr	r0, [r3, #0]
 801a282:	6803      	ldr	r3, [r0, #0]
 801a284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801a288:	4798      	blx	r3
 801a28a:	1e43      	subs	r3, r0, #1
 801a28c:	4258      	negs	r0, r3
 801a28e:	4158      	adcs	r0, r3
 801a290:	bd08      	pop	{r3, pc}
 801a292:	bf00      	nop
 801a294:	24015dd4 	.word	0x24015dd4

0801a298 <_ZN8touchgfx13PainterRGB888D1Ev>:
 801a298:	4770      	bx	lr

0801a29a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 801a29a:	3808      	subs	r0, #8
 801a29c:	4770      	bx	lr

0801a29e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801a29e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a2a2:	b410      	push	{r4}
 801a2a4:	188c      	adds	r4, r1, r2
 801a2a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a2aa:	68c2      	ldr	r2, [r0, #12]
 801a2ac:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2b6:	f7e7 bdab 	b.w	8001e10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801a2ba <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801a2ba:	f7e7 bd85 	b.w	8001dc8 <_ZN8touchgfx5paint8tearDownEv>

0801a2be <_ZN8touchgfx13PainterRGB888D0Ev>:
 801a2be:	b510      	push	{r4, lr}
 801a2c0:	4604      	mov	r4, r0
 801a2c2:	2114      	movs	r1, #20
 801a2c4:	f010 f90c 	bl	802a4e0 <_ZdlPvj>
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	bd10      	pop	{r4, pc}

0801a2cc <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 801a2cc:	f1a0 0008 	sub.w	r0, r0, #8
 801a2d0:	e7f5      	b.n	801a2be <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0801a2d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 801a2d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2dc:	4411      	add	r1, r2
 801a2de:	7c42      	ldrb	r2, [r0, #17]
 801a2e0:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 801a2e4:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801a2e8:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801a2ec:	2a00      	cmp	r2, #0
 801a2ee:	f000 8084 	beq.w	801a3fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 801a2f2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a2f6:	ed90 7a08 	vldr	s14, [r0, #32]
 801a2fa:	42a2      	cmp	r2, r4
 801a2fc:	68c3      	ldr	r3, [r0, #12]
 801a2fe:	db20      	blt.n	801a342 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 801a300:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a304:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801a308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a30c:	bfc8      	it	gt
 801a30e:	2200      	movgt	r2, #0
 801a310:	589a      	ldr	r2, [r3, r2]
 801a312:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a316:	7c03      	ldrb	r3, [r0, #16]
 801a318:	fa5f fc82 	uxtb.w	ip, r2
 801a31c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801a320:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801a324:	440e      	add	r6, r1
 801a326:	b36b      	cbz	r3, 801a384 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801a328:	2dff      	cmp	r5, #255	@ 0xff
 801a32a:	d12b      	bne.n	801a384 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801a32c:	42b1      	cmp	r1, r6
 801a32e:	f080 8204 	bcs.w	801a73a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a332:	f881 c000 	strb.w	ip, [r1]
 801a336:	3103      	adds	r1, #3
 801a338:	f801 7c02 	strb.w	r7, [r1, #-2]
 801a33c:	f801 4c01 	strb.w	r4, [r1, #-1]
 801a340:	e7f4      	b.n	801a32c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 801a342:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801a346:	42a7      	cmp	r7, r4
 801a348:	dc08      	bgt.n	801a35c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 801a34a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a34e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801a352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a356:	bfd8      	it	le
 801a358:	2200      	movle	r2, #0
 801a35a:	e7d9      	b.n	801a310 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 801a35c:	1aa2      	subs	r2, r4, r2
 801a35e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a362:	ee07 2a90 	vmov	s15, r2
 801a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a36a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a36e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a376:	ee17 2a90 	vmov	r2, s15
 801a37a:	bfd8      	it	le
 801a37c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 801a380:	0092      	lsls	r2, r2, #2
 801a382:	e7c5      	b.n	801a310 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 801a384:	0e12      	lsrs	r2, r2, #24
 801a386:	4355      	muls	r5, r2
 801a388:	1c6a      	adds	r2, r5, #1
 801a38a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801a38e:	122d      	asrs	r5, r5, #8
 801a390:	43e8      	mvns	r0, r5
 801a392:	b2ad      	uxth	r5, r5
 801a394:	fb1c fc05 	smulbb	ip, ip, r5
 801a398:	b2c0      	uxtb	r0, r0
 801a39a:	fb17 f705 	smulbb	r7, r7, r5
 801a39e:	fb14 f505 	smulbb	r5, r4, r5
 801a3a2:	fa1f fc8c 	uxth.w	ip, ip
 801a3a6:	b2bf      	uxth	r7, r7
 801a3a8:	b2ad      	uxth	r5, r5
 801a3aa:	428e      	cmp	r6, r1
 801a3ac:	f101 0303 	add.w	r3, r1, #3
 801a3b0:	f240 81c3 	bls.w	801a73a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a3b4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801a3b8:	fb02 c200 	mla	r2, r2, r0, ip
 801a3bc:	b292      	uxth	r2, r2
 801a3be:	1c51      	adds	r1, r2, #1
 801a3c0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a3c4:	1212      	asrs	r2, r2, #8
 801a3c6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801a3ca:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801a3ce:	fb02 7200 	mla	r2, r2, r0, r7
 801a3d2:	b292      	uxth	r2, r2
 801a3d4:	1c51      	adds	r1, r2, #1
 801a3d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a3da:	1212      	asrs	r2, r2, #8
 801a3dc:	f803 2c02 	strb.w	r2, [r3, #-2]
 801a3e0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801a3e4:	fb02 5200 	mla	r2, r2, r0, r5
 801a3e8:	b292      	uxth	r2, r2
 801a3ea:	1c51      	adds	r1, r2, #1
 801a3ec:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a3f0:	4619      	mov	r1, r3
 801a3f2:	1212      	asrs	r2, r2, #8
 801a3f4:	f803 2c01 	strb.w	r2, [r3, #-1]
 801a3f8:	e7d7      	b.n	801a3aa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801a3fa:	7c82      	ldrb	r2, [r0, #18]
 801a3fc:	2a00      	cmp	r2, #0
 801a3fe:	d047      	beq.n	801a490 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 801a400:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a404:	ee07 2a10 	vmov	s14, r2
 801a408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a40c:	ee07 3a90 	vmov	s15, r3
 801a410:	461a      	mov	r2, r3
 801a412:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a416:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a41e:	f200 808e 	bhi.w	801a53e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801a422:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a426:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801a42a:	68c7      	ldr	r7, [r0, #12]
 801a42c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a430:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a434:	ee06 6a90 	vmov	s13, r6
 801a438:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a43c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a444:	bf4a      	itet	mi
 801a446:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801a44a:	4634      	movpl	r4, r6
 801a44c:	ee17 4a90 	vmovmi	r4, s15
 801a450:	edd0 7a08 	vldr	s15, [r0, #32]
 801a454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a458:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 801a45c:	448e      	add	lr, r1
 801a45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a462:	bfc8      	it	gt
 801a464:	2200      	movgt	r2, #0
 801a466:	58bf      	ldr	r7, [r7, r2]
 801a468:	7c02      	ldrb	r2, [r0, #16]
 801a46a:	fa5f f987 	uxtb.w	r9, r7
 801a46e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801a472:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 801a476:	b31a      	cbz	r2, 801a4c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801a478:	2dff      	cmp	r5, #255	@ 0xff
 801a47a:	d121      	bne.n	801a4c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801a47c:	4571      	cmp	r1, lr
 801a47e:	d25d      	bcs.n	801a53c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801a480:	f881 9000 	strb.w	r9, [r1]
 801a484:	3103      	adds	r1, #3
 801a486:	f801 8c02 	strb.w	r8, [r1, #-2]
 801a48a:	f801 cc01 	strb.w	ip, [r1, #-1]
 801a48e:	e7f5      	b.n	801a47c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801a490:	ee07 4a90 	vmov	s15, r4
 801a494:	ed90 7a06 	vldr	s14, [r0, #24]
 801a498:	edd0 6a05 	vldr	s13, [r0, #20]
 801a49c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a4a8:	edd0 7a08 	vldr	s15, [r0, #32]
 801a4ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4b4:	bf44      	itt	mi
 801a4b6:	edd0 7a07 	vldrmi	s15, [r0, #28]
 801a4ba:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801a4be:	e7a5      	b.n	801a40c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801a4c0:	0e3f      	lsrs	r7, r7, #24
 801a4c2:	436f      	muls	r7, r5
 801a4c4:	1c7a      	adds	r2, r7, #1
 801a4c6:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801a4ca:	1212      	asrs	r2, r2, #8
 801a4cc:	ea6f 0a02 	mvn.w	sl, r2
 801a4d0:	b292      	uxth	r2, r2
 801a4d2:	fb19 f902 	smulbb	r9, r9, r2
 801a4d6:	fa5f fa8a 	uxtb.w	sl, sl
 801a4da:	fb18 f802 	smulbb	r8, r8, r2
 801a4de:	fb1c fc02 	smulbb	ip, ip, r2
 801a4e2:	fa1f f989 	uxth.w	r9, r9
 801a4e6:	fa1f f888 	uxth.w	r8, r8
 801a4ea:	fa1f fc8c 	uxth.w	ip, ip
 801a4ee:	458e      	cmp	lr, r1
 801a4f0:	f101 0203 	add.w	r2, r1, #3
 801a4f4:	d922      	bls.n	801a53c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801a4f6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801a4fa:	fb01 910a 	mla	r1, r1, sl, r9
 801a4fe:	b289      	uxth	r1, r1
 801a500:	1c4f      	adds	r7, r1, #1
 801a502:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a506:	1209      	asrs	r1, r1, #8
 801a508:	f802 1c03 	strb.w	r1, [r2, #-3]
 801a50c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801a510:	fb01 810a 	mla	r1, r1, sl, r8
 801a514:	b289      	uxth	r1, r1
 801a516:	1c4f      	adds	r7, r1, #1
 801a518:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a51c:	1209      	asrs	r1, r1, #8
 801a51e:	f802 1c02 	strb.w	r1, [r2, #-2]
 801a522:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801a526:	fb01 c10a 	mla	r1, r1, sl, ip
 801a52a:	b289      	uxth	r1, r1
 801a52c:	1c4f      	adds	r7, r1, #1
 801a52e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a532:	1209      	asrs	r1, r1, #8
 801a534:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a538:	4611      	mov	r1, r2
 801a53a:	e7d8      	b.n	801a4ee <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 801a53c:	191a      	adds	r2, r3, r4
 801a53e:	4433      	add	r3, r6
 801a540:	b21b      	sxth	r3, r3
 801a542:	4293      	cmp	r3, r2
 801a544:	f340 80f9 	ble.w	801a73a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a548:	edd0 7a07 	vldr	s15, [r0, #28]
 801a54c:	ee06 2a90 	vmov	s13, r2
 801a550:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a554:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a558:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a560:	f340 80b0 	ble.w	801a6c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 801a564:	ee06 3a10 	vmov	s12, r3
 801a568:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a56c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 801a740 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 801a570:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a574:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a578:	ed90 6a08 	vldr	s12, [r0, #32]
 801a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a580:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a584:	bfd6      	itet	le
 801a586:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801a58a:	469c      	movgt	ip, r3
 801a58c:	ee17 ca90 	vmovle	ip, s15
 801a590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a594:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 801a744 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 801a598:	ebac 0202 	sub.w	r2, ip, r2
 801a59c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801a5a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a5a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5a8:	188c      	adds	r4, r1, r2
 801a5aa:	7c02      	ldrb	r2, [r0, #16]
 801a5ac:	b1d2      	cbz	r2, 801a5e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801a5ae:	2dff      	cmp	r5, #255	@ 0xff
 801a5b0:	d118      	bne.n	801a5e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801a5b2:	42a1      	cmp	r1, r4
 801a5b4:	d261      	bcs.n	801a67a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801a5b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a5ba:	68c6      	ldr	r6, [r0, #12]
 801a5bc:	3103      	adds	r1, #3
 801a5be:	ee17 7a10 	vmov	r7, s14
 801a5c2:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801a5c6:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801a5ca:	f801 6c03 	strb.w	r6, [r1, #-3]
 801a5ce:	7856      	ldrb	r6, [r2, #1]
 801a5d0:	f801 6c02 	strb.w	r6, [r1, #-2]
 801a5d4:	7892      	ldrb	r2, [r2, #2]
 801a5d6:	f801 2c01 	strb.w	r2, [r1, #-1]
 801a5da:	ed90 7a08 	vldr	s14, [r0, #32]
 801a5de:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a5e2:	e7e6      	b.n	801a5b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 801a5e4:	68c2      	ldr	r2, [r0, #12]
 801a5e6:	428c      	cmp	r4, r1
 801a5e8:	f101 0e03 	add.w	lr, r1, #3
 801a5ec:	d945      	bls.n	801a67a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801a5ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a5f2:	ee17 9a10 	vmov	r9, s14
 801a5f6:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801a5fa:	f898 7003 	ldrb.w	r7, [r8, #3]
 801a5fe:	fb07 f605 	mul.w	r6, r7, r5
 801a602:	1c77      	adds	r7, r6, #1
 801a604:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801a608:	123f      	asrs	r7, r7, #8
 801a60a:	b2b9      	uxth	r1, r7
 801a60c:	43ff      	mvns	r7, r7
 801a60e:	b2fe      	uxtb	r6, r7
 801a610:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 801a614:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801a618:	fb19 f906 	smulbb	r9, r9, r6
 801a61c:	fb07 9701 	mla	r7, r7, r1, r9
 801a620:	b2bf      	uxth	r7, r7
 801a622:	f107 0901 	add.w	r9, r7, #1
 801a626:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a62a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801a62e:	fb19 f906 	smulbb	r9, r9, r6
 801a632:	123f      	asrs	r7, r7, #8
 801a634:	f80e 7c03 	strb.w	r7, [lr, #-3]
 801a638:	f898 7001 	ldrb.w	r7, [r8, #1]
 801a63c:	fb07 9701 	mla	r7, r7, r1, r9
 801a640:	b2bf      	uxth	r7, r7
 801a642:	f107 0901 	add.w	r9, r7, #1
 801a646:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a64a:	123f      	asrs	r7, r7, #8
 801a64c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 801a650:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 801a654:	f898 8002 	ldrb.w	r8, [r8, #2]
 801a658:	fb17 f606 	smulbb	r6, r7, r6
 801a65c:	fb08 6601 	mla	r6, r8, r1, r6
 801a660:	b2b6      	uxth	r6, r6
 801a662:	1c71      	adds	r1, r6, #1
 801a664:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801a668:	4671      	mov	r1, lr
 801a66a:	1236      	asrs	r6, r6, #8
 801a66c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 801a670:	ed90 7a08 	vldr	s14, [r0, #32]
 801a674:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a678:	e7b5      	b.n	801a5e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801a67a:	4563      	cmp	r3, ip
 801a67c:	dd5d      	ble.n	801a73a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a67e:	edd0 7a08 	vldr	s15, [r0, #32]
 801a682:	eba3 030c 	sub.w	r3, r3, ip
 801a686:	68c4      	ldr	r4, [r0, #12]
 801a688:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801a68c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a694:	7c00      	ldrb	r0, [r0, #16]
 801a696:	440b      	add	r3, r1
 801a698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a69c:	bfd8      	it	le
 801a69e:	2200      	movle	r2, #0
 801a6a0:	58a2      	ldr	r2, [r4, r2]
 801a6a2:	b2d4      	uxtb	r4, r2
 801a6a4:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 801a6a8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801a6ac:	b160      	cbz	r0, 801a6c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801a6ae:	2dff      	cmp	r5, #255	@ 0xff
 801a6b0:	d10a      	bne.n	801a6c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801a6b2:	4299      	cmp	r1, r3
 801a6b4:	d241      	bcs.n	801a73a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a6b6:	700c      	strb	r4, [r1, #0]
 801a6b8:	3103      	adds	r1, #3
 801a6ba:	f801 cc02 	strb.w	ip, [r1, #-2]
 801a6be:	f801 7c01 	strb.w	r7, [r1, #-1]
 801a6c2:	e7f6      	b.n	801a6b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 801a6c4:	4694      	mov	ip, r2
 801a6c6:	e7da      	b.n	801a67e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 801a6c8:	0e12      	lsrs	r2, r2, #24
 801a6ca:	436a      	muls	r2, r5
 801a6cc:	1c55      	adds	r5, r2, #1
 801a6ce:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801a6d2:	122d      	asrs	r5, r5, #8
 801a6d4:	43ee      	mvns	r6, r5
 801a6d6:	b2ad      	uxth	r5, r5
 801a6d8:	fb14 f405 	smulbb	r4, r4, r5
 801a6dc:	b2f6      	uxtb	r6, r6
 801a6de:	fb1c f005 	smulbb	r0, ip, r5
 801a6e2:	fb17 f505 	smulbb	r5, r7, r5
 801a6e6:	b2a4      	uxth	r4, r4
 801a6e8:	b280      	uxth	r0, r0
 801a6ea:	b2ad      	uxth	r5, r5
 801a6ec:	428b      	cmp	r3, r1
 801a6ee:	f101 0203 	add.w	r2, r1, #3
 801a6f2:	d922      	bls.n	801a73a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a6f4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801a6f8:	fb01 4106 	mla	r1, r1, r6, r4
 801a6fc:	b289      	uxth	r1, r1
 801a6fe:	1c4f      	adds	r7, r1, #1
 801a700:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a704:	1209      	asrs	r1, r1, #8
 801a706:	f802 1c03 	strb.w	r1, [r2, #-3]
 801a70a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801a70e:	fb01 0106 	mla	r1, r1, r6, r0
 801a712:	b289      	uxth	r1, r1
 801a714:	1c4f      	adds	r7, r1, #1
 801a716:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a71a:	1209      	asrs	r1, r1, #8
 801a71c:	f802 1c02 	strb.w	r1, [r2, #-2]
 801a720:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801a724:	fb01 5106 	mla	r1, r1, r6, r5
 801a728:	b289      	uxth	r1, r1
 801a72a:	1c4f      	adds	r7, r1, #1
 801a72c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a730:	1209      	asrs	r1, r1, #8
 801a732:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a736:	4611      	mov	r1, r2
 801a738:	e7d8      	b.n	801a6ec <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801a73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a73e:	bf00      	nop
 801a740:	447ffffe 	.word	0x447ffffe
 801a744:	00000000 	.word	0x00000000

0801a748 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 801a748:	4770      	bx	lr

0801a74a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801a74a:	4770      	bx	lr

0801a74c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801a74c:	b510      	push	{r4, lr}
 801a74e:	4604      	mov	r4, r0
 801a750:	2124      	movs	r1, #36	@ 0x24
 801a752:	f00f fec5 	bl	802a4e0 <_ZdlPvj>
 801a756:	4620      	mov	r0, r4
 801a758:	bd10      	pop	{r4, pc}
	...

0801a75c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a75c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a75e:	6803      	ldr	r3, [r0, #0]
 801a760:	460d      	mov	r5, r1
 801a762:	4604      	mov	r4, r0
 801a764:	4601      	mov	r1, r0
 801a766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a768:	a802      	add	r0, sp, #8
 801a76a:	4798      	blx	r3
 801a76c:	6828      	ldr	r0, [r5, #0]
 801a76e:	6869      	ldr	r1, [r5, #4]
 801a770:	466b      	mov	r3, sp
 801a772:	c303      	stmia	r3!, {r0, r1}
 801a774:	4668      	mov	r0, sp
 801a776:	4619      	mov	r1, r3
 801a778:	f7fd fcea 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801a77c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a77e:	b188      	cbz	r0, 801a7a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a780:	6803      	ldr	r3, [r0, #0]
 801a782:	1d21      	adds	r1, r4, #4
 801a784:	68db      	ldr	r3, [r3, #12]
 801a786:	4798      	blx	r3
 801a788:	b160      	cbz	r0, 801a7a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a78a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	dd08      	ble.n	801a7a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a792:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801a796:	2d00      	cmp	r5, #0
 801a798:	dd04      	ble.n	801a7a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a79a:	4a2b      	ldr	r2, [pc, #172]	@ (801a848 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801a79c:	7812      	ldrb	r2, [r2, #0]
 801a79e:	b11a      	cbz	r2, 801a7a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801a7a0:	2a01      	cmp	r2, #1
 801a7a2:	d029      	beq.n	801a7f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801a7a4:	b004      	add	sp, #16
 801a7a6:	bd70      	pop	{r4, r5, r6, pc}
 801a7a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a7ac:	441d      	add	r5, r3
 801a7ae:	b2ad      	uxth	r5, r5
 801a7b0:	b22e      	sxth	r6, r5
 801a7b2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a7b6:	42b3      	cmp	r3, r6
 801a7b8:	daf4      	bge.n	801a7a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a7ba:	6823      	ldr	r3, [r4, #0]
 801a7bc:	4669      	mov	r1, sp
 801a7be:	4620      	mov	r0, r4
 801a7c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a7c2:	4798      	blx	r3
 801a7c4:	b940      	cbnz	r0, 801a7d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801a7c6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a7ca:	2b01      	cmp	r3, #1
 801a7cc:	d004      	beq.n	801a7d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801a7ce:	3301      	adds	r3, #1
 801a7d0:	105b      	asrs	r3, r3, #1
 801a7d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a7d6:	e7f0      	b.n	801a7ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a7d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a7dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a7e0:	4413      	add	r3, r2
 801a7e2:	b29b      	uxth	r3, r3
 801a7e4:	441a      	add	r2, r3
 801a7e6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a7ea:	b212      	sxth	r2, r2
 801a7ec:	4296      	cmp	r6, r2
 801a7ee:	dae0      	bge.n	801a7b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801a7f0:	1aeb      	subs	r3, r5, r3
 801a7f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a7f6:	e7dc      	b.n	801a7b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801a7f8:	f8bd 5000 	ldrh.w	r5, [sp]
 801a7fc:	441d      	add	r5, r3
 801a7fe:	b2ad      	uxth	r5, r5
 801a800:	b22e      	sxth	r6, r5
 801a802:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a806:	42b3      	cmp	r3, r6
 801a808:	dacc      	bge.n	801a7a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	4669      	mov	r1, sp
 801a80e:	4620      	mov	r0, r4
 801a810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a812:	4798      	blx	r3
 801a814:	b940      	cbnz	r0, 801a828 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801a816:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a81a:	2b01      	cmp	r3, #1
 801a81c:	d004      	beq.n	801a828 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801a81e:	3301      	adds	r3, #1
 801a820:	105b      	asrs	r3, r3, #1
 801a822:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a826:	e7f0      	b.n	801a80a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801a828:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a82c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a830:	4413      	add	r3, r2
 801a832:	b29b      	uxth	r3, r3
 801a834:	441a      	add	r2, r3
 801a836:	f8ad 3000 	strh.w	r3, [sp]
 801a83a:	b212      	sxth	r2, r2
 801a83c:	4296      	cmp	r6, r2
 801a83e:	dae0      	bge.n	801a802 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801a840:	1aeb      	subs	r3, r5, r3
 801a842:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a846:	e7dc      	b.n	801a802 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801a848:	24015dcc 	.word	0x24015dcc

0801a84c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a84c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a84e:	6803      	ldr	r3, [r0, #0]
 801a850:	4604      	mov	r4, r0
 801a852:	4601      	mov	r1, r0
 801a854:	4668      	mov	r0, sp
 801a856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a858:	4798      	blx	r3
 801a85a:	2100      	movs	r1, #0
 801a85c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801a860:	4668      	mov	r0, sp
 801a862:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a866:	9102      	str	r1, [sp, #8]
 801a868:	a902      	add	r1, sp, #8
 801a86a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801a86e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a872:	f7fd fc6d 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801a876:	6823      	ldr	r3, [r4, #0]
 801a878:	4669      	mov	r1, sp
 801a87a:	4620      	mov	r0, r4
 801a87c:	691b      	ldr	r3, [r3, #16]
 801a87e:	4798      	blx	r3
 801a880:	b004      	add	sp, #16
 801a882:	bd10      	pop	{r4, pc}

0801a884 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a884:	2101      	movs	r1, #1
 801a886:	2200      	movs	r2, #0
 801a888:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801a88c:	490a      	ldr	r1, [pc, #40]	@ (801a8b8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801a88e:	8082      	strh	r2, [r0, #4]
 801a890:	6001      	str	r1, [r0, #0]
 801a892:	21ff      	movs	r1, #255	@ 0xff
 801a894:	80c2      	strh	r2, [r0, #6]
 801a896:	8102      	strh	r2, [r0, #8]
 801a898:	8142      	strh	r2, [r0, #10]
 801a89a:	8182      	strh	r2, [r0, #12]
 801a89c:	81c2      	strh	r2, [r0, #14]
 801a89e:	8202      	strh	r2, [r0, #16]
 801a8a0:	8242      	strh	r2, [r0, #18]
 801a8a2:	61c2      	str	r2, [r0, #28]
 801a8a4:	8402      	strh	r2, [r0, #32]
 801a8a6:	8442      	strh	r2, [r0, #34]	@ 0x22
 801a8a8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801a8ac:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801a8b0:	6282      	str	r2, [r0, #40]	@ 0x28
 801a8b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a8b6:	4770      	bx	lr
 801a8b8:	08030738 	.word	0x08030738

0801a8bc <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a8bc:	2300      	movs	r3, #0
 801a8be:	8083      	strh	r3, [r0, #4]
 801a8c0:	80c3      	strh	r3, [r0, #6]
 801a8c2:	8003      	strh	r3, [r0, #0]
 801a8c4:	8043      	strh	r3, [r0, #2]
 801a8c6:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801a8ca:	2bff      	cmp	r3, #255	@ 0xff
 801a8cc:	bf01      	itttt	eq
 801a8ce:	890b      	ldrheq	r3, [r1, #8]
 801a8d0:	8083      	strheq	r3, [r0, #4]
 801a8d2:	894b      	ldrheq	r3, [r1, #10]
 801a8d4:	80c3      	strheq	r3, [r0, #6]
 801a8d6:	4770      	bx	lr

0801a8d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a8da:	4604      	mov	r4, r0
 801a8dc:	466b      	mov	r3, sp
 801a8de:	6808      	ldr	r0, [r1, #0]
 801a8e0:	6849      	ldr	r1, [r1, #4]
 801a8e2:	c303      	stmia	r3!, {r0, r1}
 801a8e4:	6823      	ldr	r3, [r4, #0]
 801a8e6:	4669      	mov	r1, sp
 801a8e8:	4620      	mov	r0, r4
 801a8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8ec:	4798      	blx	r3
 801a8ee:	4b08      	ldr	r3, [pc, #32]	@ (801a910 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801a8f6:	b10a      	cbz	r2, 801a8fc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a8f8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801a8fa:	b900      	cbnz	r0, 801a8fe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a8fc:	6898      	ldr	r0, [r3, #8]
 801a8fe:	6803      	ldr	r3, [r0, #0]
 801a900:	4669      	mov	r1, sp
 801a902:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801a904:	6a1d      	ldr	r5, [r3, #32]
 801a906:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801a90a:	47a8      	blx	r5
 801a90c:	b003      	add	sp, #12
 801a90e:	bd30      	pop	{r4, r5, pc}
 801a910:	24015dd4 	.word	0x24015dd4

0801a914 <_ZN8touchgfx3BoxD1Ev>:
 801a914:	4770      	bx	lr

0801a916 <_ZN8touchgfx3BoxD0Ev>:
 801a916:	b510      	push	{r4, lr}
 801a918:	4604      	mov	r4, r0
 801a91a:	212c      	movs	r1, #44	@ 0x2c
 801a91c:	f00f fde0 	bl	802a4e0 <_ZdlPvj>
 801a920:	4620      	mov	r0, r4
 801a922:	bd10      	pop	{r4, pc}

0801a924 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801a924:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801a928:	b12a      	cbz	r2, 801a936 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a92a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801a92e:	b112      	cbz	r2, 801a936 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a930:	6803      	ldr	r3, [r0, #0]
 801a932:	695b      	ldr	r3, [r3, #20]
 801a934:	4718      	bx	r3
 801a936:	4770      	bx	lr

0801a938 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801a938:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801a93c:	4770      	bx	lr

0801a93e <_ZN8touchgfx6ButtonD1Ev>:
 801a93e:	4770      	bx	lr

0801a940 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801a940:	b570      	push	{r4, r5, r6, lr}
 801a942:	880b      	ldrh	r3, [r1, #0]
 801a944:	4605      	mov	r5, r0
 801a946:	4604      	mov	r4, r0
 801a948:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801a94a:	8813      	ldrh	r3, [r2, #0]
 801a94c:	f825 3f30 	strh.w	r3, [r5, #48]!
 801a950:	4628      	mov	r0, r5
 801a952:	f004 ffe3 	bl	801f91c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a956:	4606      	mov	r6, r0
 801a958:	4628      	mov	r0, r5
 801a95a:	f005 f813 	bl	801f984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a95e:	6823      	ldr	r3, [r4, #0]
 801a960:	4605      	mov	r5, r0
 801a962:	4631      	mov	r1, r6
 801a964:	4620      	mov	r0, r4
 801a966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a968:	4798      	blx	r3
 801a96a:	6823      	ldr	r3, [r4, #0]
 801a96c:	4629      	mov	r1, r5
 801a96e:	4620      	mov	r0, r4
 801a970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a976:	4718      	bx	r3

0801a978 <_ZN8touchgfx6ButtonD0Ev>:
 801a978:	b510      	push	{r4, lr}
 801a97a:	4604      	mov	r4, r0
 801a97c:	2134      	movs	r1, #52	@ 0x34
 801a97e:	f00f fdaf 	bl	802a4e0 <_ZdlPvj>
 801a982:	4620      	mov	r0, r4
 801a984:	bd10      	pop	{r4, pc}

0801a986 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801a986:	b510      	push	{r4, lr}
 801a988:	4604      	mov	r4, r0
 801a98a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801a98c:	b150      	cbz	r0, 801a9a4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a98e:	6803      	ldr	r3, [r0, #0]
 801a990:	68db      	ldr	r3, [r3, #12]
 801a992:	4798      	blx	r3
 801a994:	b130      	cbz	r0, 801a9a4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a996:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a998:	4621      	mov	r1, r4
 801a99a:	6803      	ldr	r3, [r0, #0]
 801a99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9a0:	689b      	ldr	r3, [r3, #8]
 801a9a2:	4718      	bx	r3
 801a9a4:	bd10      	pop	{r4, pc}

0801a9a6 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801a9a6:	b510      	push	{r4, lr}
 801a9a8:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	2bff      	cmp	r3, #255	@ 0xff
 801a9b0:	d006      	beq.n	801a9c0 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	8003      	strh	r3, [r0, #0]
 801a9b6:	8043      	strh	r3, [r0, #2]
 801a9b8:	8083      	strh	r3, [r0, #4]
 801a9ba:	80c3      	strh	r3, [r0, #6]
 801a9bc:	4620      	mov	r0, r4
 801a9be:	bd10      	pop	{r4, pc}
 801a9c0:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801a9c4:	b11b      	cbz	r3, 801a9ce <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801a9c6:	3130      	adds	r1, #48	@ 0x30
 801a9c8:	f005 f810 	bl	801f9ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a9cc:	e7f6      	b.n	801a9bc <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801a9ce:	312e      	adds	r1, #46	@ 0x2e
 801a9d0:	e7fa      	b.n	801a9c8 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801a9d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9d8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801a9dc:	b08a      	sub	sp, #40	@ 0x28
 801a9de:	4604      	mov	r4, r0
 801a9e0:	4688      	mov	r8, r1
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d066      	beq.n	801aab4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801a9e6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801a9e8:	a805      	add	r0, sp, #20
 801a9ea:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a9ee:	f004 ff95 	bl	801f91c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a9f2:	4607      	mov	r7, r0
 801a9f4:	a805      	add	r0, sp, #20
 801a9f6:	f004 ffc5 	bl	801f984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a9fa:	f9b8 6000 	ldrsh.w	r6, [r8]
 801a9fe:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801aa02:	2300      	movs	r3, #0
 801aa04:	4432      	add	r2, r6
 801aa06:	9306      	str	r3, [sp, #24]
 801aa08:	b292      	uxth	r2, r2
 801aa0a:	fa0f fc82 	sxth.w	ip, r2
 801aa0e:	459c      	cmp	ip, r3
 801aa10:	dd52      	ble.n	801aab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801aa12:	42b7      	cmp	r7, r6
 801aa14:	dd50      	ble.n	801aab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801aa16:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801aa1a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801aa1e:	442b      	add	r3, r5
 801aa20:	b29b      	uxth	r3, r3
 801aa22:	b219      	sxth	r1, r3
 801aa24:	2900      	cmp	r1, #0
 801aa26:	dd47      	ble.n	801aab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801aa28:	42a8      	cmp	r0, r5
 801aa2a:	dd45      	ble.n	801aab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801aa2c:	4567      	cmp	r7, ip
 801aa2e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801aa32:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801aa36:	bfb8      	it	lt
 801aa38:	b2ba      	uxthlt	r2, r7
 801aa3a:	4288      	cmp	r0, r1
 801aa3c:	f8ad 6018 	strh.w	r6, [sp, #24]
 801aa40:	bfb8      	it	lt
 801aa42:	b283      	uxthlt	r3, r0
 801aa44:	1b92      	subs	r2, r2, r6
 801aa46:	f8ad 501a 	strh.w	r5, [sp, #26]
 801aa4a:	1b5b      	subs	r3, r3, r5
 801aa4c:	f8ad 201c 	strh.w	r2, [sp, #28]
 801aa50:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa54:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801aa58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	d026      	beq.n	801aaae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801aa60:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	dd22      	ble.n	801aaae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801aa68:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	dd1e      	ble.n	801aaae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801aa70:	2300      	movs	r3, #0
 801aa72:	a908      	add	r1, sp, #32
 801aa74:	4620      	mov	r0, r4
 801aa76:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801aa7a:	6823      	ldr	r3, [r4, #0]
 801aa7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa7e:	4798      	blx	r3
 801aa80:	4b0f      	ldr	r3, [pc, #60]	@ (801aac0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801aa88:	b10a      	cbz	r2, 801aa8e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801aa8a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801aa8c:	b900      	cbnz	r0, 801aa90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801aa8e:	6898      	ldr	r0, [r3, #8]
 801aa90:	2501      	movs	r5, #1
 801aa92:	6801      	ldr	r1, [r0, #0]
 801aa94:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801aa98:	9502      	str	r5, [sp, #8]
 801aa9a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801aa9e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801aaa2:	9401      	str	r4, [sp, #4]
 801aaa4:	ac06      	add	r4, sp, #24
 801aaa6:	9400      	str	r4, [sp, #0]
 801aaa8:	688c      	ldr	r4, [r1, #8]
 801aaaa:	a905      	add	r1, sp, #20
 801aaac:	47a0      	blx	r4
 801aaae:	b00a      	add	sp, #40	@ 0x28
 801aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801aab6:	e797      	b.n	801a9e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801aab8:	2300      	movs	r3, #0
 801aaba:	9307      	str	r3, [sp, #28]
 801aabc:	e7ca      	b.n	801aa54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801aabe:	bf00      	nop
 801aac0:	24015dd4 	.word	0x24015dd4

0801aac4 <_ZNK8touchgfx6Button17invalidateContentEv>:
 801aac4:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 801aac8:	b12a      	cbz	r2, 801aad6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801aaca:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801aace:	b112      	cbz	r2, 801aad6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801aad0:	6803      	ldr	r3, [r0, #0]
 801aad2:	695b      	ldr	r3, [r3, #20]
 801aad4:	4718      	bx	r3
 801aad6:	4770      	bx	lr

0801aad8 <_ZN8touchgfx7OutlineD1Ev>:
 801aad8:	4770      	bx	lr

0801aada <_ZN8touchgfx7OutlineD0Ev>:
 801aada:	b510      	push	{r4, lr}
 801aadc:	4604      	mov	r4, r0
 801aade:	2130      	movs	r1, #48	@ 0x30
 801aae0:	f00f fcfe 	bl	802a4e0 <_ZdlPvj>
 801aae4:	4620      	mov	r0, r4
 801aae6:	bd10      	pop	{r4, pc}

0801aae8 <_ZN8touchgfx7Outline5resetEv>:
 801aae8:	b510      	push	{r4, lr}
 801aaea:	4604      	mov	r4, r0
 801aaec:	f000 fe72 	bl	801b7d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801aaf0:	60e0      	str	r0, [r4, #12]
 801aaf2:	f000 fe75 	bl	801b7e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801aaf6:	68e3      	ldr	r3, [r4, #12]
 801aaf8:	08c0      	lsrs	r0, r0, #3
 801aafa:	2200      	movs	r2, #0
 801aafc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801ab00:	6123      	str	r3, [r4, #16]
 801ab02:	3801      	subs	r0, #1
 801ab04:	60a2      	str	r2, [r4, #8]
 801ab06:	6060      	str	r0, [r4, #4]
 801ab08:	8019      	strh	r1, [r3, #0]
 801ab0a:	8059      	strh	r1, [r3, #2]
 801ab0c:	809a      	strh	r2, [r3, #4]
 801ab0e:	80da      	strh	r2, [r3, #6]
 801ab10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801ab12:	f023 0301 	bic.w	r3, r3, #1
 801ab16:	f043 0302 	orr.w	r3, r3, #2
 801ab1a:	6263      	str	r3, [r4, #36]	@ 0x24
 801ab1c:	bd10      	pop	{r4, pc}
	...

0801ab20 <_ZN8touchgfx7OutlineC1Ev>:
 801ab20:	4b0a      	ldr	r3, [pc, #40]	@ (801ab4c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801ab22:	b510      	push	{r4, lr}
 801ab24:	6003      	str	r3, [r0, #0]
 801ab26:	2300      	movs	r3, #0
 801ab28:	4604      	mov	r4, r0
 801ab2a:	6243      	str	r3, [r0, #36]	@ 0x24
 801ab2c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801ab30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ab34:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801ab38:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801ab3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ab40:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801ab44:	f7ff ffd0 	bl	801aae8 <_ZN8touchgfx7Outline5resetEv>
 801ab48:	4620      	mov	r0, r4
 801ab4a:	bd10      	pop	{r4, pc}
 801ab4c:	0803088c 	.word	0x0803088c

0801ab50 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab54:	b093      	sub	sp, #76	@ 0x4c
 801ab56:	1156      	asrs	r6, r2, #5
 801ab58:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801ab5a:	9305      	str	r3, [sp, #20]
 801ab5c:	1153      	asrs	r3, r2, #5
 801ab5e:	f004 051f 	and.w	r5, r4, #31
 801ab62:	9303      	str	r3, [sp, #12]
 801ab64:	1163      	asrs	r3, r4, #5
 801ab66:	9504      	str	r5, [sp, #16]
 801ab68:	1165      	asrs	r5, r4, #5
 801ab6a:	9306      	str	r3, [sp, #24]
 801ab6c:	f002 031f 	and.w	r3, r2, #31
 801ab70:	42ae      	cmp	r6, r5
 801ab72:	f040 80f4 	bne.w	801ad5e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801ab76:	9c04      	ldr	r4, [sp, #16]
 801ab78:	9a05      	ldr	r2, [sp, #20]
 801ab7a:	42a3      	cmp	r3, r4
 801ab7c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801ab80:	6902      	ldr	r2, [r0, #16]
 801ab82:	d125      	bne.n	801abd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 801ab84:	f9b2 3000 	ldrsh.w	r3, [r2]
 801ab88:	459e      	cmp	lr, r3
 801ab8a:	d103      	bne.n	801ab94 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801ab8c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801ab90:	429e      	cmp	r6, r3
 801ab92:	d035      	beq.n	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801ab94:	88d1      	ldrh	r1, [r2, #6]
 801ab96:	8893      	ldrh	r3, [r2, #4]
 801ab98:	430b      	orrs	r3, r1
 801ab9a:	d010      	beq.n	801abbe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801ab9c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	db0c      	blt.n	801abbe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801aba4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801aba6:	428b      	cmp	r3, r1
 801aba8:	da09      	bge.n	801abbe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801abaa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801abae:	428b      	cmp	r3, r1
 801abb0:	f103 0301 	add.w	r3, r3, #1
 801abb4:	bf38      	it	cc
 801abb6:	3208      	addcc	r2, #8
 801abb8:	6083      	str	r3, [r0, #8]
 801abba:	bf38      	it	cc
 801abbc:	6102      	strcc	r2, [r0, #16]
 801abbe:	6903      	ldr	r3, [r0, #16]
 801abc0:	9a03      	ldr	r2, [sp, #12]
 801abc2:	f8a3 e000 	strh.w	lr, [r3]
 801abc6:	805a      	strh	r2, [r3, #2]
 801abc8:	2200      	movs	r2, #0
 801abca:	809a      	strh	r2, [r3, #4]
 801abcc:	80da      	strh	r2, [r3, #6]
 801abce:	e017      	b.n	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801abd0:	9c05      	ldr	r4, [sp, #20]
 801abd2:	114e      	asrs	r6, r1, #5
 801abd4:	f001 0c1f 	and.w	ip, r1, #31
 801abd8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801abdc:	f004 041f 	and.w	r4, r4, #31
 801abe0:	4576      	cmp	r6, lr
 801abe2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801abe6:	9402      	str	r4, [sp, #8]
 801abe8:	9c04      	ldr	r4, [sp, #16]
 801abea:	eba4 0403 	sub.w	r4, r4, r3
 801abee:	d10a      	bne.n	801ac06 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801abf0:	9b02      	ldr	r3, [sp, #8]
 801abf2:	44a0      	add	r8, r4
 801abf4:	449c      	add	ip, r3
 801abf6:	f8a2 8004 	strh.w	r8, [r2, #4]
 801abfa:	fb04 a40c 	mla	r4, r4, ip, sl
 801abfe:	80d4      	strh	r4, [r2, #6]
 801ac00:	b013      	add	sp, #76	@ 0x4c
 801ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac06:	9d05      	ldr	r5, [sp, #20]
 801ac08:	1a69      	subs	r1, r5, r1
 801ac0a:	bf51      	iteee	pl
 801ac0c:	f1cc 0520 	rsbpl	r5, ip, #32
 801ac10:	fb04 f40c 	mulmi.w	r4, r4, ip
 801ac14:	4249      	negmi	r1, r1
 801ac16:	2500      	movmi	r5, #0
 801ac18:	bf5d      	ittte	pl
 801ac1a:	436c      	mulpl	r4, r5
 801ac1c:	2520      	movpl	r5, #32
 801ac1e:	f04f 0901 	movpl.w	r9, #1
 801ac22:	f04f 39ff 	movmi.w	r9, #4294967295
 801ac26:	9501      	str	r5, [sp, #4]
 801ac28:	9f01      	ldr	r7, [sp, #4]
 801ac2a:	444e      	add	r6, r9
 801ac2c:	fb94 f5f1 	sdiv	r5, r4, r1
 801ac30:	fb01 4415 	mls	r4, r1, r5, r4
 801ac34:	44bc      	add	ip, r7
 801ac36:	2c00      	cmp	r4, #0
 801ac38:	bfbc      	itt	lt
 801ac3a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801ac3e:	1864      	addlt	r4, r4, r1
 801ac40:	44a8      	add	r8, r5
 801ac42:	fb05 ac0c 	mla	ip, r5, ip, sl
 801ac46:	f8a2 8004 	strh.w	r8, [r2, #4]
 801ac4a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801ac4e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801ac52:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801ac56:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801ac5a:	ea58 0202 	orrs.w	r2, r8, r2
 801ac5e:	d011      	beq.n	801ac84 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801ac60:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801ac64:	f1b8 0f00 	cmp.w	r8, #0
 801ac68:	db0c      	blt.n	801ac84 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801ac6a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801ac6c:	4590      	cmp	r8, r2
 801ac6e:	da09      	bge.n	801ac84 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801ac70:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801ac74:	4590      	cmp	r8, r2
 801ac76:	bf3c      	itt	cc
 801ac78:	f10c 0208 	addcc.w	r2, ip, #8
 801ac7c:	6102      	strcc	r2, [r0, #16]
 801ac7e:	f108 0201 	add.w	r2, r8, #1
 801ac82:	6082      	str	r2, [r0, #8]
 801ac84:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801ac88:	2700      	movs	r7, #0
 801ac8a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801ac8e:	45b6      	cmp	lr, r6
 801ac90:	f8ac 6000 	strh.w	r6, [ip]
 801ac94:	442b      	add	r3, r5
 801ac96:	f8ac 2002 	strh.w	r2, [ip, #2]
 801ac9a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801ac9e:	f8ac 7006 	strh.w	r7, [ip, #6]
 801aca2:	d04b      	beq.n	801ad3c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801aca4:	9f04      	ldr	r7, [sp, #16]
 801aca6:	1a64      	subs	r4, r4, r1
 801aca8:	f04f 0a00 	mov.w	sl, #0
 801acac:	1aff      	subs	r7, r7, r3
 801acae:	443d      	add	r5, r7
 801acb0:	016d      	lsls	r5, r5, #5
 801acb2:	fb95 f8f1 	sdiv	r8, r5, r1
 801acb6:	fb01 5518 	mls	r5, r1, r8, r5
 801acba:	2d00      	cmp	r5, #0
 801acbc:	bfbc      	itt	lt
 801acbe:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801acc2:	186d      	addlt	r5, r5, r1
 801acc4:	f108 0701 	add.w	r7, r8, #1
 801acc8:	9703      	str	r7, [sp, #12]
 801acca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801acce:	1964      	adds	r4, r4, r5
 801acd0:	444e      	add	r6, r9
 801acd2:	bf54      	ite	pl
 801acd4:	9f03      	ldrpl	r7, [sp, #12]
 801acd6:	4647      	movmi	r7, r8
 801acd8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801acdc:	bf58      	it	pl
 801acde:	1a64      	subpl	r4, r4, r1
 801ace0:	443b      	add	r3, r7
 801ace2:	44bb      	add	fp, r7
 801ace4:	f8ac b004 	strh.w	fp, [ip, #4]
 801ace8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801acec:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801acf0:	f8ac b006 	strh.w	fp, [ip, #6]
 801acf4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801acf8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801acfc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801ad00:	ea5b 0707 	orrs.w	r7, fp, r7
 801ad04:	d011      	beq.n	801ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801ad06:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801ad0a:	f1bb 0f00 	cmp.w	fp, #0
 801ad0e:	db0c      	blt.n	801ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801ad10:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801ad12:	45bb      	cmp	fp, r7
 801ad14:	da09      	bge.n	801ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801ad16:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801ad1a:	45bb      	cmp	fp, r7
 801ad1c:	bf3c      	itt	cc
 801ad1e:	f10c 0708 	addcc.w	r7, ip, #8
 801ad22:	6107      	strcc	r7, [r0, #16]
 801ad24:	f10b 0701 	add.w	r7, fp, #1
 801ad28:	6087      	str	r7, [r0, #8]
 801ad2a:	6907      	ldr	r7, [r0, #16]
 801ad2c:	45b6      	cmp	lr, r6
 801ad2e:	803e      	strh	r6, [r7, #0]
 801ad30:	807a      	strh	r2, [r7, #2]
 801ad32:	f8a7 a004 	strh.w	sl, [r7, #4]
 801ad36:	f8a7 a006 	strh.w	sl, [r7, #6]
 801ad3a:	d1c6      	bne.n	801acca <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801ad3c:	9a04      	ldr	r2, [sp, #16]
 801ad3e:	1ad3      	subs	r3, r2, r3
 801ad40:	6902      	ldr	r2, [r0, #16]
 801ad42:	8891      	ldrh	r1, [r2, #4]
 801ad44:	88d6      	ldrh	r6, [r2, #6]
 801ad46:	4419      	add	r1, r3
 801ad48:	8091      	strh	r1, [r2, #4]
 801ad4a:	9902      	ldr	r1, [sp, #8]
 801ad4c:	f101 0c20 	add.w	ip, r1, #32
 801ad50:	9901      	ldr	r1, [sp, #4]
 801ad52:	ebac 0c01 	sub.w	ip, ip, r1
 801ad56:	fb03 630c 	mla	r3, r3, ip, r6
 801ad5a:	80d3      	strh	r3, [r2, #6]
 801ad5c:	e750      	b.n	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801ad5e:	9d05      	ldr	r5, [sp, #20]
 801ad60:	1aa2      	subs	r2, r4, r2
 801ad62:	eba5 0501 	sub.w	r5, r5, r1
 801ad66:	9202      	str	r2, [sp, #8]
 801ad68:	9508      	str	r5, [sp, #32]
 801ad6a:	f140 8128 	bpl.w	801afbe <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801ad6e:	9a03      	ldr	r2, [sp, #12]
 801ad70:	2a00      	cmp	r2, #0
 801ad72:	f6ff af45 	blt.w	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801ad76:	9a02      	ldr	r2, [sp, #8]
 801ad78:	f04f 34ff 	mov.w	r4, #4294967295
 801ad7c:	4252      	negs	r2, r2
 801ad7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ad80:	2400      	movs	r4, #0
 801ad82:	9202      	str	r2, [sp, #8]
 801ad84:	9a06      	ldr	r2, [sp, #24]
 801ad86:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801ad8a:	9206      	str	r2, [sp, #24]
 801ad8c:	462a      	mov	r2, r5
 801ad8e:	435a      	muls	r2, r3
 801ad90:	9401      	str	r4, [sp, #4]
 801ad92:	9c02      	ldr	r4, [sp, #8]
 801ad94:	9d02      	ldr	r5, [sp, #8]
 801ad96:	fb92 f4f4 	sdiv	r4, r2, r4
 801ad9a:	fb05 2214 	mls	r2, r5, r4, r2
 801ad9e:	2a00      	cmp	r2, #0
 801ada0:	9207      	str	r2, [sp, #28]
 801ada2:	bfbc      	itt	lt
 801ada4:	1952      	addlt	r2, r2, r5
 801ada6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801adaa:	6905      	ldr	r5, [r0, #16]
 801adac:	bfb8      	it	lt
 801adae:	9207      	strlt	r2, [sp, #28]
 801adb0:	eb04 0901 	add.w	r9, r4, r1
 801adb4:	9a01      	ldr	r2, [sp, #4]
 801adb6:	ea4f 1669 	mov.w	r6, r9, asr #5
 801adba:	429a      	cmp	r2, r3
 801adbc:	f040 8111 	bne.w	801afe2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801adc0:	f9b5 3000 	ldrsh.w	r3, [r5]
 801adc4:	429e      	cmp	r6, r3
 801adc6:	d104      	bne.n	801add2 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801adc8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801adcc:	9a03      	ldr	r2, [sp, #12]
 801adce:	429a      	cmp	r2, r3
 801add0:	d01b      	beq.n	801ae0a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801add2:	88ea      	ldrh	r2, [r5, #6]
 801add4:	88ab      	ldrh	r3, [r5, #4]
 801add6:	4313      	orrs	r3, r2
 801add8:	d010      	beq.n	801adfc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801adda:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801adde:	2a00      	cmp	r2, #0
 801ade0:	db0c      	blt.n	801adfc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801ade2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801ade4:	429a      	cmp	r2, r3
 801ade6:	da09      	bge.n	801adfc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801ade8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801adec:	429a      	cmp	r2, r3
 801adee:	f102 0201 	add.w	r2, r2, #1
 801adf2:	bf38      	it	cc
 801adf4:	3508      	addcc	r5, #8
 801adf6:	6082      	str	r2, [r0, #8]
 801adf8:	bf38      	it	cc
 801adfa:	6105      	strcc	r5, [r0, #16]
 801adfc:	6903      	ldr	r3, [r0, #16]
 801adfe:	9a03      	ldr	r2, [sp, #12]
 801ae00:	801e      	strh	r6, [r3, #0]
 801ae02:	805a      	strh	r2, [r3, #2]
 801ae04:	2200      	movs	r2, #0
 801ae06:	809a      	strh	r2, [r3, #4]
 801ae08:	80da      	strh	r2, [r3, #6]
 801ae0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ae0c:	9a03      	ldr	r2, [sp, #12]
 801ae0e:	6901      	ldr	r1, [r0, #16]
 801ae10:	441a      	add	r2, r3
 801ae12:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ae16:	42b3      	cmp	r3, r6
 801ae18:	d103      	bne.n	801ae22 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801ae1a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ae1e:	429a      	cmp	r2, r3
 801ae20:	d01a      	beq.n	801ae58 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801ae22:	88cc      	ldrh	r4, [r1, #6]
 801ae24:	888b      	ldrh	r3, [r1, #4]
 801ae26:	4323      	orrs	r3, r4
 801ae28:	d010      	beq.n	801ae4c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801ae2a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801ae2e:	2c00      	cmp	r4, #0
 801ae30:	db0c      	blt.n	801ae4c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801ae32:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801ae34:	429c      	cmp	r4, r3
 801ae36:	da09      	bge.n	801ae4c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801ae38:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801ae3c:	429c      	cmp	r4, r3
 801ae3e:	f104 0401 	add.w	r4, r4, #1
 801ae42:	bf38      	it	cc
 801ae44:	3108      	addcc	r1, #8
 801ae46:	6084      	str	r4, [r0, #8]
 801ae48:	bf38      	it	cc
 801ae4a:	6101      	strcc	r1, [r0, #16]
 801ae4c:	6903      	ldr	r3, [r0, #16]
 801ae4e:	2100      	movs	r1, #0
 801ae50:	801e      	strh	r6, [r3, #0]
 801ae52:	805a      	strh	r2, [r3, #2]
 801ae54:	8099      	strh	r1, [r3, #4]
 801ae56:	80d9      	strh	r1, [r3, #6]
 801ae58:	9b06      	ldr	r3, [sp, #24]
 801ae5a:	4293      	cmp	r3, r2
 801ae5c:	f000 8082 	beq.w	801af64 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801ae60:	9b08      	ldr	r3, [sp, #32]
 801ae62:	9902      	ldr	r1, [sp, #8]
 801ae64:	015b      	lsls	r3, r3, #5
 801ae66:	9c02      	ldr	r4, [sp, #8]
 801ae68:	fb93 f1f1 	sdiv	r1, r3, r1
 801ae6c:	fb04 3311 	mls	r3, r4, r1, r3
 801ae70:	9103      	str	r1, [sp, #12]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	9308      	str	r3, [sp, #32]
 801ae76:	da04      	bge.n	801ae82 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801ae78:	1e4b      	subs	r3, r1, #1
 801ae7a:	9303      	str	r3, [sp, #12]
 801ae7c:	9b08      	ldr	r3, [sp, #32]
 801ae7e:	4423      	add	r3, r4
 801ae80:	9308      	str	r3, [sp, #32]
 801ae82:	9b07      	ldr	r3, [sp, #28]
 801ae84:	464f      	mov	r7, r9
 801ae86:	9902      	ldr	r1, [sp, #8]
 801ae88:	2600      	movs	r6, #0
 801ae8a:	1a5b      	subs	r3, r3, r1
 801ae8c:	9307      	str	r3, [sp, #28]
 801ae8e:	9b01      	ldr	r3, [sp, #4]
 801ae90:	f1c3 0320 	rsb	r3, r3, #32
 801ae94:	930e      	str	r3, [sp, #56]	@ 0x38
 801ae96:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ae98:	9b01      	ldr	r3, [sp, #4]
 801ae9a:	1a5b      	subs	r3, r3, r1
 801ae9c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae9e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801aea2:	185b      	adds	r3, r3, r1
 801aea4:	bf58      	it	pl
 801aea6:	9902      	ldrpl	r1, [sp, #8]
 801aea8:	9307      	str	r3, [sp, #28]
 801aeaa:	bf57      	itett	pl
 801aeac:	1a5b      	subpl	r3, r3, r1
 801aeae:	9903      	ldrmi	r1, [sp, #12]
 801aeb0:	9307      	strpl	r3, [sp, #28]
 801aeb2:	9b03      	ldrpl	r3, [sp, #12]
 801aeb4:	bf58      	it	pl
 801aeb6:	1c59      	addpl	r1, r3, #1
 801aeb8:	2a00      	cmp	r2, #0
 801aeba:	4489      	add	r9, r1
 801aebc:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801aec0:	db2e      	blt.n	801af20 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aec2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801aec4:	4293      	cmp	r3, r2
 801aec6:	dd2b      	ble.n	801af20 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aec8:	9c01      	ldr	r4, [sp, #4]
 801aeca:	6905      	ldr	r5, [r0, #16]
 801aecc:	46a0      	mov	r8, r4
 801aece:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801aed0:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801aed4:	45a0      	cmp	r8, r4
 801aed6:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801aeda:	f040 814c 	bne.w	801b176 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801aede:	f9b5 1000 	ldrsh.w	r1, [r5]
 801aee2:	4551      	cmp	r1, sl
 801aee4:	d103      	bne.n	801aeee <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801aee6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801aeea:	4291      	cmp	r1, r2
 801aeec:	d018      	beq.n	801af20 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aeee:	ea5c 010e 	orrs.w	r1, ip, lr
 801aef2:	d00f      	beq.n	801af14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801aef4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801aef8:	2900      	cmp	r1, #0
 801aefa:	db0b      	blt.n	801af14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801aefc:	428b      	cmp	r3, r1
 801aefe:	dd09      	ble.n	801af14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801af00:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801af04:	4299      	cmp	r1, r3
 801af06:	f101 0101 	add.w	r1, r1, #1
 801af0a:	bf38      	it	cc
 801af0c:	3508      	addcc	r5, #8
 801af0e:	6081      	str	r1, [r0, #8]
 801af10:	bf38      	it	cc
 801af12:	6105      	strcc	r5, [r0, #16]
 801af14:	6903      	ldr	r3, [r0, #16]
 801af16:	f8a3 a000 	strh.w	sl, [r3]
 801af1a:	805a      	strh	r2, [r3, #2]
 801af1c:	809e      	strh	r6, [r3, #4]
 801af1e:	80de      	strh	r6, [r3, #6]
 801af20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af22:	6901      	ldr	r1, [r0, #16]
 801af24:	441a      	add	r2, r3
 801af26:	88cc      	ldrh	r4, [r1, #6]
 801af28:	888b      	ldrh	r3, [r1, #4]
 801af2a:	4323      	orrs	r3, r4
 801af2c:	d010      	beq.n	801af50 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801af2e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801af32:	2c00      	cmp	r4, #0
 801af34:	db0c      	blt.n	801af50 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801af36:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801af38:	429c      	cmp	r4, r3
 801af3a:	da09      	bge.n	801af50 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801af3c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801af40:	429c      	cmp	r4, r3
 801af42:	f104 0401 	add.w	r4, r4, #1
 801af46:	bf38      	it	cc
 801af48:	3108      	addcc	r1, #8
 801af4a:	6084      	str	r4, [r0, #8]
 801af4c:	bf38      	it	cc
 801af4e:	6101      	strcc	r1, [r0, #16]
 801af50:	6903      	ldr	r3, [r0, #16]
 801af52:	464f      	mov	r7, r9
 801af54:	f8a3 a000 	strh.w	sl, [r3]
 801af58:	805a      	strh	r2, [r3, #2]
 801af5a:	809e      	strh	r6, [r3, #4]
 801af5c:	80de      	strh	r6, [r3, #6]
 801af5e:	9b06      	ldr	r3, [sp, #24]
 801af60:	4293      	cmp	r3, r2
 801af62:	d19c      	bne.n	801ae9e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 801af64:	9b01      	ldr	r3, [sp, #4]
 801af66:	6907      	ldr	r7, [r0, #16]
 801af68:	f1c3 0620 	rsb	r6, r3, #32
 801af6c:	9b05      	ldr	r3, [sp, #20]
 801af6e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801af72:	9b04      	ldr	r3, [sp, #16]
 801af74:	429e      	cmp	r6, r3
 801af76:	f040 81c7 	bne.w	801b308 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801af7a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801af7e:	459e      	cmp	lr, r3
 801af80:	d104      	bne.n	801af8c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801af82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801af86:	429a      	cmp	r2, r3
 801af88:	f43f ae3a 	beq.w	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801af8c:	88f9      	ldrh	r1, [r7, #6]
 801af8e:	88bb      	ldrh	r3, [r7, #4]
 801af90:	430b      	orrs	r3, r1
 801af92:	d010      	beq.n	801afb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801af94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	db0c      	blt.n	801afb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801af9c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801af9e:	428b      	cmp	r3, r1
 801afa0:	da09      	bge.n	801afb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801afa2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801afa6:	428b      	cmp	r3, r1
 801afa8:	f103 0301 	add.w	r3, r3, #1
 801afac:	bf38      	it	cc
 801afae:	3708      	addcc	r7, #8
 801afb0:	6083      	str	r3, [r0, #8]
 801afb2:	bf38      	it	cc
 801afb4:	6107      	strcc	r7, [r0, #16]
 801afb6:	6903      	ldr	r3, [r0, #16]
 801afb8:	f8a3 e000 	strh.w	lr, [r3]
 801afbc:	e603      	b.n	801abc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801afbe:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801afc0:	9c03      	ldr	r4, [sp, #12]
 801afc2:	42a2      	cmp	r2, r4
 801afc4:	f6ff ae1c 	blt.w	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801afc8:	9c06      	ldr	r4, [sp, #24]
 801afca:	42a2      	cmp	r2, r4
 801afcc:	9c08      	ldr	r4, [sp, #32]
 801afce:	bfbc      	itt	lt
 801afd0:	3201      	addlt	r2, #1
 801afd2:	9206      	strlt	r2, [sp, #24]
 801afd4:	f1c3 0220 	rsb	r2, r3, #32
 801afd8:	4362      	muls	r2, r4
 801afda:	2401      	movs	r4, #1
 801afdc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801afde:	2420      	movs	r4, #32
 801afe0:	e6d6      	b.n	801ad90 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801afe2:	ea4f 1861 	mov.w	r8, r1, asr #5
 801afe6:	f009 021f 	and.w	r2, r9, #31
 801afea:	f001 011f 	and.w	r1, r1, #31
 801afee:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801aff2:	920c      	str	r2, [sp, #48]	@ 0x30
 801aff4:	45b0      	cmp	r8, r6
 801aff6:	9a01      	ldr	r2, [sp, #4]
 801aff8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801affc:	eba2 0203 	sub.w	r2, r2, r3
 801b000:	d108      	bne.n	801b014 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801b002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b004:	4496      	add	lr, r2
 801b006:	4419      	add	r1, r3
 801b008:	f8a5 e004 	strh.w	lr, [r5, #4]
 801b00c:	fb02 a101 	mla	r1, r2, r1, sl
 801b010:	80e9      	strh	r1, [r5, #6]
 801b012:	e6fa      	b.n	801ae0a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801b014:	2c00      	cmp	r4, #0
 801b016:	f2c0 80a7 	blt.w	801b168 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801b01a:	2701      	movs	r7, #1
 801b01c:	f1c1 0c20 	rsb	ip, r1, #32
 801b020:	970a      	str	r7, [sp, #40]	@ 0x28
 801b022:	2720      	movs	r7, #32
 801b024:	fb02 f20c 	mul.w	r2, r2, ip
 801b028:	9709      	str	r7, [sp, #36]	@ 0x24
 801b02a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801b02c:	fb92 fcf4 	sdiv	ip, r2, r4
 801b030:	fb04 221c 	mls	r2, r4, ip, r2
 801b034:	4439      	add	r1, r7
 801b036:	2a00      	cmp	r2, #0
 801b038:	bfbc      	itt	lt
 801b03a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801b03e:	1912      	addlt	r2, r2, r4
 801b040:	fb0c a101 	mla	r1, ip, r1, sl
 801b044:	44e6      	add	lr, ip
 801b046:	80e9      	strh	r1, [r5, #6]
 801b048:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b04a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801b04e:	eb08 0501 	add.w	r5, r8, r1
 801b052:	6901      	ldr	r1, [r0, #16]
 801b054:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801b058:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801b05c:	ea58 070e 	orrs.w	r7, r8, lr
 801b060:	d010      	beq.n	801b084 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801b062:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801b066:	f1be 0f00 	cmp.w	lr, #0
 801b06a:	db0b      	blt.n	801b084 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801b06c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b06e:	45be      	cmp	lr, r7
 801b070:	da08      	bge.n	801b084 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801b072:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801b076:	45be      	cmp	lr, r7
 801b078:	bf3c      	itt	cc
 801b07a:	3108      	addcc	r1, #8
 801b07c:	6101      	strcc	r1, [r0, #16]
 801b07e:	f10e 0101 	add.w	r1, lr, #1
 801b082:	6081      	str	r1, [r0, #8]
 801b084:	6901      	ldr	r1, [r0, #16]
 801b086:	f04f 0e00 	mov.w	lr, #0
 801b08a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801b08e:	42ae      	cmp	r6, r5
 801b090:	800d      	strh	r5, [r1, #0]
 801b092:	4463      	add	r3, ip
 801b094:	f8a1 8002 	strh.w	r8, [r1, #2]
 801b098:	f8a1 e004 	strh.w	lr, [r1, #4]
 801b09c:	f8a1 e006 	strh.w	lr, [r1, #6]
 801b0a0:	d053      	beq.n	801b14a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801b0a2:	9901      	ldr	r1, [sp, #4]
 801b0a4:	1b12      	subs	r2, r2, r4
 801b0a6:	1ac9      	subs	r1, r1, r3
 801b0a8:	4461      	add	r1, ip
 801b0aa:	0149      	lsls	r1, r1, #5
 801b0ac:	fb91 fef4 	sdiv	lr, r1, r4
 801b0b0:	fb04 111e 	mls	r1, r4, lr, r1
 801b0b4:	2900      	cmp	r1, #0
 801b0b6:	bfbc      	itt	lt
 801b0b8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801b0bc:	1909      	addlt	r1, r1, r4
 801b0be:	f10e 0701 	add.w	r7, lr, #1
 801b0c2:	970d      	str	r7, [sp, #52]	@ 0x34
 801b0c4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801b0c8:	1852      	adds	r2, r2, r1
 801b0ca:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b0cc:	bf54      	ite	pl
 801b0ce:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801b0d2:	46f4      	movmi	ip, lr
 801b0d4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801b0d8:	bf58      	it	pl
 801b0da:	1b12      	subpl	r2, r2, r4
 801b0dc:	4463      	add	r3, ip
 801b0de:	443d      	add	r5, r7
 801b0e0:	44e3      	add	fp, ip
 801b0e2:	f8aa b004 	strh.w	fp, [sl, #4]
 801b0e6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801b0ea:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801b0ee:	f8aa b006 	strh.w	fp, [sl, #6]
 801b0f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b0f6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801b0fa:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801b0fe:	ea5b 070a 	orrs.w	r7, fp, sl
 801b102:	d014      	beq.n	801b12e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801b104:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801b108:	f1ba 0f00 	cmp.w	sl, #0
 801b10c:	db0f      	blt.n	801b12e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801b10e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b110:	45ba      	cmp	sl, r7
 801b112:	da0c      	bge.n	801b12e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801b114:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801b118:	45ba      	cmp	sl, r7
 801b11a:	f10a 0a01 	add.w	sl, sl, #1
 801b11e:	bf38      	it	cc
 801b120:	f10c 0c08 	addcc.w	ip, ip, #8
 801b124:	f8c0 a008 	str.w	sl, [r0, #8]
 801b128:	bf38      	it	cc
 801b12a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801b12e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b132:	f04f 0700 	mov.w	r7, #0
 801b136:	42ae      	cmp	r6, r5
 801b138:	f8ac 5000 	strh.w	r5, [ip]
 801b13c:	f8ac 8002 	strh.w	r8, [ip, #2]
 801b140:	f8ac 7004 	strh.w	r7, [ip, #4]
 801b144:	f8ac 7006 	strh.w	r7, [ip, #6]
 801b148:	d1bc      	bne.n	801b0c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801b14a:	6904      	ldr	r4, [r0, #16]
 801b14c:	9a01      	ldr	r2, [sp, #4]
 801b14e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b150:	1ad3      	subs	r3, r2, r3
 801b152:	88a2      	ldrh	r2, [r4, #4]
 801b154:	3120      	adds	r1, #32
 801b156:	441a      	add	r2, r3
 801b158:	80a2      	strh	r2, [r4, #4]
 801b15a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b15c:	1a89      	subs	r1, r1, r2
 801b15e:	88e2      	ldrh	r2, [r4, #6]
 801b160:	fb03 2301 	mla	r3, r3, r1, r2
 801b164:	80e3      	strh	r3, [r4, #6]
 801b166:	e650      	b.n	801ae0a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801b168:	f04f 37ff 	mov.w	r7, #4294967295
 801b16c:	434a      	muls	r2, r1
 801b16e:	4264      	negs	r4, r4
 801b170:	970a      	str	r7, [sp, #40]	@ 0x28
 801b172:	2700      	movs	r7, #0
 801b174:	e758      	b.n	801b028 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801b176:	ea4f 1867 	mov.w	r8, r7, asr #5
 801b17a:	f009 031f 	and.w	r3, r9, #31
 801b17e:	f007 071f 	and.w	r7, r7, #31
 801b182:	fa1f fc8c 	uxth.w	ip, ip
 801b186:	45d0      	cmp	r8, sl
 801b188:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b18a:	fa1f fe8e 	uxth.w	lr, lr
 801b18e:	d10a      	bne.n	801b1a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801b190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b192:	449c      	add	ip, r3
 801b194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b196:	441f      	add	r7, r3
 801b198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b19a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801b19e:	fb03 e707 	mla	r7, r3, r7, lr
 801b1a2:	80ef      	strh	r7, [r5, #6]
 801b1a4:	e6bc      	b.n	801af20 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801b1a6:	2900      	cmp	r1, #0
 801b1a8:	f2c0 80a6 	blt.w	801b2f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801b1ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b1ae:	f1c7 0320 	rsb	r3, r7, #32
 801b1b2:	4363      	muls	r3, r4
 801b1b4:	2401      	movs	r4, #1
 801b1b6:	940d      	str	r4, [sp, #52]	@ 0x34
 801b1b8:	2420      	movs	r4, #32
 801b1ba:	940c      	str	r4, [sp, #48]	@ 0x30
 801b1bc:	fb93 f4f1 	sdiv	r4, r3, r1
 801b1c0:	fb01 3b14 	mls	fp, r1, r4, r3
 801b1c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1c6:	f1bb 0f00 	cmp.w	fp, #0
 801b1ca:	441f      	add	r7, r3
 801b1cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b1ce:	bfbc      	itt	lt
 801b1d0:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801b1d4:	448b      	addlt	fp, r1
 801b1d6:	fb04 e707 	mla	r7, r4, r7, lr
 801b1da:	44a4      	add	ip, r4
 801b1dc:	80ef      	strh	r7, [r5, #6]
 801b1de:	f8a5 c004 	strh.w	ip, [r5, #4]
 801b1e2:	eb08 0503 	add.w	r5, r8, r3
 801b1e6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b1ea:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801b1ee:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801b1f2:	ea5e 0307 	orrs.w	r3, lr, r7
 801b1f6:	d011      	beq.n	801b21c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801b1f8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801b1fc:	f1be 0f00 	cmp.w	lr, #0
 801b200:	db0c      	blt.n	801b21c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801b202:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b204:	45be      	cmp	lr, r7
 801b206:	da09      	bge.n	801b21c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801b208:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801b20c:	45be      	cmp	lr, r7
 801b20e:	bf3c      	itt	cc
 801b210:	f10c 0708 	addcc.w	r7, ip, #8
 801b214:	6107      	strcc	r7, [r0, #16]
 801b216:	f10e 0701 	add.w	r7, lr, #1
 801b21a:	6087      	str	r7, [r0, #8]
 801b21c:	6907      	ldr	r7, [r0, #16]
 801b21e:	b213      	sxth	r3, r2
 801b220:	4555      	cmp	r5, sl
 801b222:	9310      	str	r3, [sp, #64]	@ 0x40
 801b224:	807b      	strh	r3, [r7, #2]
 801b226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b228:	803d      	strh	r5, [r7, #0]
 801b22a:	80be      	strh	r6, [r7, #4]
 801b22c:	eb04 0c03 	add.w	ip, r4, r3
 801b230:	80fe      	strh	r6, [r7, #6]
 801b232:	d050      	beq.n	801b2d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801b234:	9b01      	ldr	r3, [sp, #4]
 801b236:	eba3 070c 	sub.w	r7, r3, ip
 801b23a:	ebab 0301 	sub.w	r3, fp, r1
 801b23e:	443c      	add	r4, r7
 801b240:	9309      	str	r3, [sp, #36]	@ 0x24
 801b242:	0164      	lsls	r4, r4, #5
 801b244:	fb94 f8f1 	sdiv	r8, r4, r1
 801b248:	fb01 4418 	mls	r4, r1, r8, r4
 801b24c:	2c00      	cmp	r4, #0
 801b24e:	bfbc      	itt	lt
 801b250:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801b254:	1864      	addlt	r4, r4, r1
 801b256:	f108 0701 	add.w	r7, r8, #1
 801b25a:	9711      	str	r7, [sp, #68]	@ 0x44
 801b25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b25e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801b262:	191b      	adds	r3, r3, r4
 801b264:	f8be b004 	ldrh.w	fp, [lr, #4]
 801b268:	bf54      	ite	pl
 801b26a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801b26c:	4647      	movmi	r7, r8
 801b26e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b270:	bf58      	it	pl
 801b272:	1a5b      	subpl	r3, r3, r1
 801b274:	44bb      	add	fp, r7
 801b276:	44bc      	add	ip, r7
 801b278:	bf58      	it	pl
 801b27a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801b27c:	f8ae b004 	strh.w	fp, [lr, #4]
 801b280:	f8be b006 	ldrh.w	fp, [lr, #6]
 801b284:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801b288:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801b28a:	f8ae b006 	strh.w	fp, [lr, #6]
 801b28e:	443d      	add	r5, r7
 801b290:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801b294:	f8be b006 	ldrh.w	fp, [lr, #6]
 801b298:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801b29c:	ea5b 0307 	orrs.w	r3, fp, r7
 801b2a0:	d011      	beq.n	801b2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801b2a2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801b2a6:	f1bb 0f00 	cmp.w	fp, #0
 801b2aa:	db0c      	blt.n	801b2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801b2ac:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b2ae:	45bb      	cmp	fp, r7
 801b2b0:	da09      	bge.n	801b2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801b2b2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801b2b6:	45bb      	cmp	fp, r7
 801b2b8:	bf3c      	itt	cc
 801b2ba:	f10e 0708 	addcc.w	r7, lr, #8
 801b2be:	6107      	strcc	r7, [r0, #16]
 801b2c0:	f10b 0701 	add.w	r7, fp, #1
 801b2c4:	6087      	str	r7, [r0, #8]
 801b2c6:	6907      	ldr	r7, [r0, #16]
 801b2c8:	4555      	cmp	r5, sl
 801b2ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b2cc:	803d      	strh	r5, [r7, #0]
 801b2ce:	807b      	strh	r3, [r7, #2]
 801b2d0:	80be      	strh	r6, [r7, #4]
 801b2d2:	80fe      	strh	r6, [r7, #6]
 801b2d4:	d1c2      	bne.n	801b25c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801b2d6:	9b01      	ldr	r3, [sp, #4]
 801b2d8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b2da:	eba3 0c0c 	sub.w	ip, r3, ip
 801b2de:	6903      	ldr	r3, [r0, #16]
 801b2e0:	3720      	adds	r7, #32
 801b2e2:	8899      	ldrh	r1, [r3, #4]
 801b2e4:	4461      	add	r1, ip
 801b2e6:	8099      	strh	r1, [r3, #4]
 801b2e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b2ea:	1a7f      	subs	r7, r7, r1
 801b2ec:	88d9      	ldrh	r1, [r3, #6]
 801b2ee:	fb0c 1c07 	mla	ip, ip, r7, r1
 801b2f2:	f8a3 c006 	strh.w	ip, [r3, #6]
 801b2f6:	e613      	b.n	801af20 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801b2f8:	f04f 34ff 	mov.w	r4, #4294967295
 801b2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b2fe:	4249      	negs	r1, r1
 801b300:	940d      	str	r4, [sp, #52]	@ 0x34
 801b302:	2400      	movs	r4, #0
 801b304:	437b      	muls	r3, r7
 801b306:	e758      	b.n	801b1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801b308:	9905      	ldr	r1, [sp, #20]
 801b30a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801b30e:	f009 0c1f 	and.w	ip, r9, #31
 801b312:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801b316:	f001 011f 	and.w	r1, r1, #31
 801b31a:	45f3      	cmp	fp, lr
 801b31c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801b320:	9102      	str	r1, [sp, #8]
 801b322:	9904      	ldr	r1, [sp, #16]
 801b324:	eba1 0406 	sub.w	r4, r1, r6
 801b328:	d108      	bne.n	801b33c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801b32a:	9b02      	ldr	r3, [sp, #8]
 801b32c:	44a0      	add	r8, r4
 801b32e:	449c      	add	ip, r3
 801b330:	f8a7 8004 	strh.w	r8, [r7, #4]
 801b334:	fb04 a40c 	mla	r4, r4, ip, sl
 801b338:	80fc      	strh	r4, [r7, #6]
 801b33a:	e461      	b.n	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801b33c:	9905      	ldr	r1, [sp, #20]
 801b33e:	ebb1 0109 	subs.w	r1, r1, r9
 801b342:	bf51      	iteee	pl
 801b344:	f1cc 0520 	rsbpl	r5, ip, #32
 801b348:	fb04 f40c 	mulmi.w	r4, r4, ip
 801b34c:	4249      	negmi	r1, r1
 801b34e:	2500      	movmi	r5, #0
 801b350:	bf5d      	ittte	pl
 801b352:	436c      	mulpl	r4, r5
 801b354:	2520      	movpl	r5, #32
 801b356:	f04f 0901 	movpl.w	r9, #1
 801b35a:	f04f 39ff 	movmi.w	r9, #4294967295
 801b35e:	9501      	str	r5, [sp, #4]
 801b360:	9b01      	ldr	r3, [sp, #4]
 801b362:	fb94 f5f1 	sdiv	r5, r4, r1
 801b366:	fb01 4415 	mls	r4, r1, r5, r4
 801b36a:	449c      	add	ip, r3
 801b36c:	eb0b 0309 	add.w	r3, fp, r9
 801b370:	2c00      	cmp	r4, #0
 801b372:	bfbc      	itt	lt
 801b374:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801b378:	1864      	addlt	r4, r4, r1
 801b37a:	44a8      	add	r8, r5
 801b37c:	fb05 ac0c 	mla	ip, r5, ip, sl
 801b380:	f8a7 8004 	strh.w	r8, [r7, #4]
 801b384:	f8a7 c006 	strh.w	ip, [r7, #6]
 801b388:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b38c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801b390:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801b394:	ea58 0707 	orrs.w	r7, r8, r7
 801b398:	d011      	beq.n	801b3be <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801b39a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801b39e:	f1b8 0f00 	cmp.w	r8, #0
 801b3a2:	db0c      	blt.n	801b3be <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801b3a4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b3a6:	45b8      	cmp	r8, r7
 801b3a8:	da09      	bge.n	801b3be <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801b3aa:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801b3ae:	45b8      	cmp	r8, r7
 801b3b0:	bf3c      	itt	cc
 801b3b2:	f10c 0708 	addcc.w	r7, ip, #8
 801b3b6:	6107      	strcc	r7, [r0, #16]
 801b3b8:	f108 0701 	add.w	r7, r8, #1
 801b3bc:	6087      	str	r7, [r0, #8]
 801b3be:	6907      	ldr	r7, [r0, #16]
 801b3c0:	f04f 0c00 	mov.w	ip, #0
 801b3c4:	b212      	sxth	r2, r2
 801b3c6:	459e      	cmp	lr, r3
 801b3c8:	803b      	strh	r3, [r7, #0]
 801b3ca:	442e      	add	r6, r5
 801b3cc:	807a      	strh	r2, [r7, #2]
 801b3ce:	f8a7 c004 	strh.w	ip, [r7, #4]
 801b3d2:	f8a7 c006 	strh.w	ip, [r7, #6]
 801b3d6:	d04b      	beq.n	801b470 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801b3d8:	9f04      	ldr	r7, [sp, #16]
 801b3da:	1a64      	subs	r4, r4, r1
 801b3dc:	f04f 0a00 	mov.w	sl, #0
 801b3e0:	1bbf      	subs	r7, r7, r6
 801b3e2:	443d      	add	r5, r7
 801b3e4:	016d      	lsls	r5, r5, #5
 801b3e6:	fb95 f8f1 	sdiv	r8, r5, r1
 801b3ea:	fb01 5518 	mls	r5, r1, r8, r5
 801b3ee:	4565      	cmp	r5, ip
 801b3f0:	bfbc      	itt	lt
 801b3f2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801b3f6:	186d      	addlt	r5, r5, r1
 801b3f8:	f108 0701 	add.w	r7, r8, #1
 801b3fc:	9703      	str	r7, [sp, #12]
 801b3fe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b402:	1964      	adds	r4, r4, r5
 801b404:	444b      	add	r3, r9
 801b406:	bf54      	ite	pl
 801b408:	9f03      	ldrpl	r7, [sp, #12]
 801b40a:	4647      	movmi	r7, r8
 801b40c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801b410:	bf58      	it	pl
 801b412:	1a64      	subpl	r4, r4, r1
 801b414:	443e      	add	r6, r7
 801b416:	44bb      	add	fp, r7
 801b418:	f8ac b004 	strh.w	fp, [ip, #4]
 801b41c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801b420:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801b424:	f8ac b006 	strh.w	fp, [ip, #6]
 801b428:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b42c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801b430:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801b434:	ea5b 0707 	orrs.w	r7, fp, r7
 801b438:	d011      	beq.n	801b45e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801b43a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801b43e:	f1bb 0f00 	cmp.w	fp, #0
 801b442:	db0c      	blt.n	801b45e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801b444:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b446:	45bb      	cmp	fp, r7
 801b448:	da09      	bge.n	801b45e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801b44a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801b44e:	45bb      	cmp	fp, r7
 801b450:	bf3c      	itt	cc
 801b452:	f10c 0708 	addcc.w	r7, ip, #8
 801b456:	6107      	strcc	r7, [r0, #16]
 801b458:	f10b 0701 	add.w	r7, fp, #1
 801b45c:	6087      	str	r7, [r0, #8]
 801b45e:	6907      	ldr	r7, [r0, #16]
 801b460:	459e      	cmp	lr, r3
 801b462:	803b      	strh	r3, [r7, #0]
 801b464:	807a      	strh	r2, [r7, #2]
 801b466:	f8a7 a004 	strh.w	sl, [r7, #4]
 801b46a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801b46e:	d1c6      	bne.n	801b3fe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801b470:	9b04      	ldr	r3, [sp, #16]
 801b472:	1b9e      	subs	r6, r3, r6
 801b474:	6903      	ldr	r3, [r0, #16]
 801b476:	889a      	ldrh	r2, [r3, #4]
 801b478:	4432      	add	r2, r6
 801b47a:	809a      	strh	r2, [r3, #4]
 801b47c:	9a02      	ldr	r2, [sp, #8]
 801b47e:	f102 0c20 	add.w	ip, r2, #32
 801b482:	9a01      	ldr	r2, [sp, #4]
 801b484:	ebac 0c02 	sub.w	ip, ip, r2
 801b488:	88da      	ldrh	r2, [r3, #6]
 801b48a:	fb06 260c 	mla	r6, r6, ip, r2
 801b48e:	80de      	strh	r6, [r3, #6]
 801b490:	f7ff bbb6 	b.w	801ac00 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801b494 <_ZN8touchgfx7Outline6lineToEii>:
 801b494:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b496:	079b      	lsls	r3, r3, #30
 801b498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b49a:	460e      	mov	r6, r1
 801b49c:	4615      	mov	r5, r2
 801b49e:	d511      	bpl.n	801b4c4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801b4a0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801b4a4:	ea86 0701 	eor.w	r7, r6, r1
 801b4a8:	ea85 0302 	eor.w	r3, r5, r2
 801b4ac:	433b      	orrs	r3, r7
 801b4ae:	d009      	beq.n	801b4c4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801b4b0:	4633      	mov	r3, r6
 801b4b2:	9500      	str	r5, [sp, #0]
 801b4b4:	f7ff fb4c 	bl	801ab50 <_ZN8touchgfx7Outline10renderLineEiiii>
 801b4b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b4ba:	f043 0301 	orr.w	r3, r3, #1
 801b4be:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801b4c2:	6243      	str	r3, [r0, #36]	@ 0x24
 801b4c4:	b003      	add	sp, #12
 801b4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b4c8 <_ZN8touchgfx7Outline6moveToEii>:
 801b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b4cc:	4615      	mov	r5, r2
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	460e      	mov	r6, r1
 801b4d2:	079a      	lsls	r2, r3, #30
 801b4d4:	d401      	bmi.n	801b4da <_ZN8touchgfx7Outline6moveToEii+0x12>
 801b4d6:	f7ff fb07 	bl	801aae8 <_ZN8touchgfx7Outline5resetEv>
 801b4da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b4dc:	07db      	lsls	r3, r3, #31
 801b4de:	d504      	bpl.n	801b4ea <_ZN8touchgfx7Outline6moveToEii+0x22>
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801b4e6:	f7ff ffd5 	bl	801b494 <_ZN8touchgfx7Outline6lineToEii>
 801b4ea:	6923      	ldr	r3, [r4, #16]
 801b4ec:	1170      	asrs	r0, r6, #5
 801b4ee:	1169      	asrs	r1, r5, #5
 801b4f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b4f4:	4290      	cmp	r0, r2
 801b4f6:	d103      	bne.n	801b500 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801b4f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b4fc:	4291      	cmp	r1, r2
 801b4fe:	d01a      	beq.n	801b536 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801b500:	88df      	ldrh	r7, [r3, #6]
 801b502:	889a      	ldrh	r2, [r3, #4]
 801b504:	433a      	orrs	r2, r7
 801b506:	d010      	beq.n	801b52a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801b508:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b50c:	2a00      	cmp	r2, #0
 801b50e:	db0c      	blt.n	801b52a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801b510:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801b512:	42ba      	cmp	r2, r7
 801b514:	da09      	bge.n	801b52a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801b516:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801b51a:	42ba      	cmp	r2, r7
 801b51c:	f102 0201 	add.w	r2, r2, #1
 801b520:	bf38      	it	cc
 801b522:	3308      	addcc	r3, #8
 801b524:	60a2      	str	r2, [r4, #8]
 801b526:	bf38      	it	cc
 801b528:	6123      	strcc	r3, [r4, #16]
 801b52a:	6923      	ldr	r3, [r4, #16]
 801b52c:	2200      	movs	r2, #0
 801b52e:	8018      	strh	r0, [r3, #0]
 801b530:	8059      	strh	r1, [r3, #2]
 801b532:	809a      	strh	r2, [r3, #4]
 801b534:	80da      	strh	r2, [r3, #6]
 801b536:	6166      	str	r6, [r4, #20]
 801b538:	6225      	str	r5, [r4, #32]
 801b53a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801b540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b544:	b0d0      	sub	sp, #320	@ 0x140
 801b546:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801b54a:	466c      	mov	r4, sp
 801b54c:	4627      	mov	r7, r4
 801b54e:	1a0d      	subs	r5, r1, r0
 801b550:	f100 0308 	add.w	r3, r0, #8
 801b554:	2d48      	cmp	r5, #72	@ 0x48
 801b556:	f340 80d5 	ble.w	801b704 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801b55a:	112d      	asrs	r5, r5, #4
 801b55c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801b560:	f9b0 9000 	ldrsh.w	r9, [r0]
 801b564:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801b568:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801b56c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801b570:	6816      	ldr	r6, [r2, #0]
 801b572:	6006      	str	r6, [r0, #0]
 801b574:	6856      	ldr	r6, [r2, #4]
 801b576:	6046      	str	r6, [r0, #4]
 801b578:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b57c:	f8a2 8002 	strh.w	r8, [r2, #2]
 801b580:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b584:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b588:	f1a1 0208 	sub.w	r2, r1, #8
 801b58c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801b590:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801b594:	4565      	cmp	r5, ip
 801b596:	db06      	blt.n	801b5a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801b598:	d119      	bne.n	801b5ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801b59a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801b59e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801b5a2:	42ae      	cmp	r6, r5
 801b5a4:	dd13      	ble.n	801b5ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801b5a6:	460e      	mov	r6, r1
 801b5a8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801b5ac:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801b5b0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801b5b4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801b5b8:	601d      	str	r5, [r3, #0]
 801b5ba:	6875      	ldr	r5, [r6, #4]
 801b5bc:	605d      	str	r5, [r3, #4]
 801b5be:	f821 9c08 	strh.w	r9, [r1, #-8]
 801b5c2:	f821 cc06 	strh.w	ip, [r1, #-6]
 801b5c6:	f821 8c04 	strh.w	r8, [r1, #-4]
 801b5ca:	f821 ec02 	strh.w	lr, [r1, #-2]
 801b5ce:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801b5d2:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801b5d6:	42ae      	cmp	r6, r5
 801b5d8:	db06      	blt.n	801b5e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801b5da:	d116      	bne.n	801b60a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801b5dc:	f9b0 c000 	ldrsh.w	ip, [r0]
 801b5e0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801b5e4:	45ac      	cmp	ip, r5
 801b5e6:	da10      	bge.n	801b60a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801b5e8:	681d      	ldr	r5, [r3, #0]
 801b5ea:	f9b0 8000 	ldrsh.w	r8, [r0]
 801b5ee:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801b5f2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801b5f6:	6005      	str	r5, [r0, #0]
 801b5f8:	685d      	ldr	r5, [r3, #4]
 801b5fa:	f8a0 8008 	strh.w	r8, [r0, #8]
 801b5fe:	6045      	str	r5, [r0, #4]
 801b600:	8146      	strh	r6, [r0, #10]
 801b602:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801b606:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b60a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801b60e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801b612:	4565      	cmp	r5, ip
 801b614:	db06      	blt.n	801b624 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801b616:	d119      	bne.n	801b64c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b618:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801b61c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b620:	42ae      	cmp	r6, r5
 801b622:	da13      	bge.n	801b64c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b624:	460e      	mov	r6, r1
 801b626:	f9b0 9000 	ldrsh.w	r9, [r0]
 801b62a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801b62e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801b632:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801b636:	6005      	str	r5, [r0, #0]
 801b638:	6875      	ldr	r5, [r6, #4]
 801b63a:	6045      	str	r5, [r0, #4]
 801b63c:	f821 9c08 	strh.w	r9, [r1, #-8]
 801b640:	f821 cc06 	strh.w	ip, [r1, #-6]
 801b644:	f821 8c04 	strh.w	r8, [r1, #-4]
 801b648:	f821 ec02 	strh.w	lr, [r1, #-2]
 801b64c:	3308      	adds	r3, #8
 801b64e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801b652:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801b656:	45e6      	cmp	lr, ip
 801b658:	dbf8      	blt.n	801b64c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b65a:	d105      	bne.n	801b668 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801b65c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b660:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b664:	42ae      	cmp	r6, r5
 801b666:	dbf1      	blt.n	801b64c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b668:	4615      	mov	r5, r2
 801b66a:	3a08      	subs	r2, #8
 801b66c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801b670:	45b4      	cmp	ip, r6
 801b672:	dbf9      	blt.n	801b668 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801b674:	d105      	bne.n	801b682 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801b676:	f9b0 8000 	ldrsh.w	r8, [r0]
 801b67a:	f9b2 6000 	ldrsh.w	r6, [r2]
 801b67e:	45b0      	cmp	r8, r6
 801b680:	dbf2      	blt.n	801b668 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801b682:	4293      	cmp	r3, r2
 801b684:	f1a5 0608 	sub.w	r6, r5, #8
 801b688:	d816      	bhi.n	801b6b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801b68a:	f8d6 c000 	ldr.w	ip, [r6]
 801b68e:	f9b3 a000 	ldrsh.w	sl, [r3]
 801b692:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801b696:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801b69a:	f8c3 c000 	str.w	ip, [r3]
 801b69e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801b6a2:	f8c3 c004 	str.w	ip, [r3, #4]
 801b6a6:	f825 ac08 	strh.w	sl, [r5, #-8]
 801b6aa:	f825 ec06 	strh.w	lr, [r5, #-6]
 801b6ae:	f825 9c04 	strh.w	r9, [r5, #-4]
 801b6b2:	f825 8c02 	strh.w	r8, [r5, #-2]
 801b6b6:	e7c9      	b.n	801b64c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b6b8:	f8d6 e000 	ldr.w	lr, [r6]
 801b6bc:	f9b0 a000 	ldrsh.w	sl, [r0]
 801b6c0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801b6c4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801b6c8:	f8c0 e000 	str.w	lr, [r0]
 801b6cc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801b6d0:	1a16      	subs	r6, r2, r0
 801b6d2:	f8c0 e004 	str.w	lr, [r0, #4]
 801b6d6:	f825 ac08 	strh.w	sl, [r5, #-8]
 801b6da:	f825 cc06 	strh.w	ip, [r5, #-6]
 801b6de:	f825 9c04 	strh.w	r9, [r5, #-4]
 801b6e2:	f825 8c02 	strh.w	r8, [r5, #-2]
 801b6e6:	1acd      	subs	r5, r1, r3
 801b6e8:	10ed      	asrs	r5, r5, #3
 801b6ea:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801b6ee:	bfb5      	itete	lt
 801b6f0:	e9c4 0200 	strdlt	r0, r2, [r4]
 801b6f4:	e9c4 3100 	strdge	r3, r1, [r4]
 801b6f8:	460a      	movlt	r2, r1
 801b6fa:	4603      	movge	r3, r0
 801b6fc:	3408      	adds	r4, #8
 801b6fe:	4618      	mov	r0, r3
 801b700:	4611      	mov	r1, r2
 801b702:	e724      	b.n	801b54e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801b704:	4299      	cmp	r1, r3
 801b706:	d927      	bls.n	801b758 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801b708:	f1a3 0210 	sub.w	r2, r3, #16
 801b70c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801b710:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801b714:	45ac      	cmp	ip, r5
 801b716:	db06      	blt.n	801b726 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801b718:	d11c      	bne.n	801b754 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801b71a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801b71e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801b722:	42ae      	cmp	r6, r5
 801b724:	da16      	bge.n	801b754 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801b726:	4615      	mov	r5, r2
 801b728:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801b72c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801b730:	3a08      	subs	r2, #8
 801b732:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801b736:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801b73a:	6196      	str	r6, [r2, #24]
 801b73c:	42a8      	cmp	r0, r5
 801b73e:	686e      	ldr	r6, [r5, #4]
 801b740:	f8a2 9010 	strh.w	r9, [r2, #16]
 801b744:	61d6      	str	r6, [r2, #28]
 801b746:	f8a2 c012 	strh.w	ip, [r2, #18]
 801b74a:	f8a2 8014 	strh.w	r8, [r2, #20]
 801b74e:	f8a2 e016 	strh.w	lr, [r2, #22]
 801b752:	d1db      	bne.n	801b70c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801b754:	3308      	adds	r3, #8
 801b756:	e7d5      	b.n	801b704 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801b758:	42bc      	cmp	r4, r7
 801b75a:	d903      	bls.n	801b764 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801b75c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801b760:	3c08      	subs	r4, #8
 801b762:	e6f4      	b.n	801b54e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801b764:	b050      	add	sp, #320	@ 0x140
 801b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b76a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801b76a:	b510      	push	{r4, lr}
 801b76c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b76e:	4604      	mov	r4, r0
 801b770:	07da      	lsls	r2, r3, #31
 801b772:	d507      	bpl.n	801b784 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801b774:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801b778:	f7ff fe8c 	bl	801b494 <_ZN8touchgfx7Outline6lineToEii>
 801b77c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b77e:	f023 0301 	bic.w	r3, r3, #1
 801b782:	6243      	str	r3, [r0, #36]	@ 0x24
 801b784:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b786:	079b      	lsls	r3, r3, #30
 801b788:	d521      	bpl.n	801b7ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801b78a:	6923      	ldr	r3, [r4, #16]
 801b78c:	88d9      	ldrh	r1, [r3, #6]
 801b78e:	889a      	ldrh	r2, [r3, #4]
 801b790:	430a      	orrs	r2, r1
 801b792:	d010      	beq.n	801b7b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801b794:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b798:	2a00      	cmp	r2, #0
 801b79a:	db0c      	blt.n	801b7b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801b79c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b79e:	428a      	cmp	r2, r1
 801b7a0:	da09      	bge.n	801b7b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801b7a2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801b7a6:	4291      	cmp	r1, r2
 801b7a8:	f102 0201 	add.w	r2, r2, #1
 801b7ac:	bf88      	it	hi
 801b7ae:	3308      	addhi	r3, #8
 801b7b0:	60a2      	str	r2, [r4, #8]
 801b7b2:	bf88      	it	hi
 801b7b4:	6123      	strhi	r3, [r4, #16]
 801b7b6:	68a1      	ldr	r1, [r4, #8]
 801b7b8:	b129      	cbz	r1, 801b7c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801b7ba:	6863      	ldr	r3, [r4, #4]
 801b7bc:	4299      	cmp	r1, r3
 801b7be:	d802      	bhi.n	801b7c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801b7c0:	68e0      	ldr	r0, [r4, #12]
 801b7c2:	f7ff febd 	bl	801b540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801b7c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b7c8:	f023 0302 	bic.w	r3, r3, #2
 801b7cc:	6263      	str	r3, [r4, #36]	@ 0x24
 801b7ce:	68e0      	ldr	r0, [r4, #12]
 801b7d0:	bd10      	pop	{r4, pc}
	...

0801b7d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801b7d4:	4b01      	ldr	r3, [pc, #4]	@ (801b7dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801b7d6:	6818      	ldr	r0, [r3, #0]
 801b7d8:	4770      	bx	lr
 801b7da:	bf00      	nop
 801b7dc:	24015ddc 	.word	0x24015ddc

0801b7e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801b7e0:	4b01      	ldr	r3, [pc, #4]	@ (801b7e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801b7e2:	6818      	ldr	r0, [r3, #0]
 801b7e4:	4770      	bx	lr
 801b7e6:	bf00      	nop
 801b7e8:	24015de0 	.word	0x24015de0

0801b7ec <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801b7ec:	b510      	push	{r4, lr}
 801b7ee:	6803      	ldr	r3, [r0, #0]
 801b7f0:	460c      	mov	r4, r1
 801b7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7f4:	4798      	blx	r3
 801b7f6:	1b03      	subs	r3, r0, r4
 801b7f8:	4258      	negs	r0, r3
 801b7fa:	4158      	adcs	r0, r3
 801b7fc:	bd10      	pop	{r4, pc}
	...

0801b800 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801b800:	4b01      	ldr	r3, [pc, #4]	@ (801b808 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801b802:	6019      	str	r1, [r3, #0]
 801b804:	4770      	bx	lr
 801b806:	bf00      	nop
 801b808:	24015de4 	.word	0x24015de4

0801b80c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b810:	4696      	mov	lr, r2
 801b812:	b097      	sub	sp, #92	@ 0x5c
 801b814:	4605      	mov	r5, r0
 801b816:	4614      	mov	r4, r2
 801b818:	460e      	mov	r6, r1
 801b81a:	461f      	mov	r7, r3
 801b81c:	f10d 0c1c 	add.w	ip, sp, #28
 801b820:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801b824:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801b828:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801b82c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b834:	f8de 3000 	ldr.w	r3, [lr]
 801b838:	f104 0e14 	add.w	lr, r4, #20
 801b83c:	f8cc 3000 	str.w	r3, [ip]
 801b840:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b844:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b848:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b84c:	f8de 3000 	ldr.w	r3, [lr]
 801b850:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801b854:	f8cc 3000 	str.w	r3, [ip]
 801b858:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801b85c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b860:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b864:	f8de 3000 	ldr.w	r3, [lr]
 801b868:	4631      	mov	r1, r6
 801b86a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b86c:	4628      	mov	r0, r5
 801b86e:	f8cc 3000 	str.w	r3, [ip]
 801b872:	682b      	ldr	r3, [r5, #0]
 801b874:	9201      	str	r2, [sp, #4]
 801b876:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b878:	f8cd 8008 	str.w	r8, [sp, #8]
 801b87c:	9200      	str	r2, [sp, #0]
 801b87e:	aa07      	add	r2, sp, #28
 801b880:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b884:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801b888:	463b      	mov	r3, r7
 801b88a:	47d8      	blx	fp
 801b88c:	46a6      	mov	lr, r4
 801b88e:	f10d 0c1c 	add.w	ip, sp, #28
 801b892:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b896:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b89a:	f8de 3000 	ldr.w	r3, [lr]
 801b89e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801b8a2:	343c      	adds	r4, #60	@ 0x3c
 801b8a4:	f8cc 3000 	str.w	r3, [ip]
 801b8a8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b8ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b8b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8b4:	f8de 3000 	ldr.w	r3, [lr]
 801b8b8:	f8cc 3000 	str.w	r3, [ip]
 801b8bc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801b8c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b8c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8c6:	6823      	ldr	r3, [r4, #0]
 801b8c8:	4631      	mov	r1, r6
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	f8cc 3000 	str.w	r3, [ip]
 801b8d0:	682b      	ldr	r3, [r5, #0]
 801b8d2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b8d6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b8d8:	f8cd 8008 	str.w	r8, [sp, #8]
 801b8dc:	9201      	str	r2, [sp, #4]
 801b8de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b8e0:	9200      	str	r2, [sp, #0]
 801b8e2:	aa07      	add	r2, sp, #28
 801b8e4:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801b8e6:	463b      	mov	r3, r7
 801b8e8:	47a0      	blx	r4
 801b8ea:	b017      	add	sp, #92	@ 0x5c
 801b8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b8f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8f4:	b08d      	sub	sp, #52	@ 0x34
 801b8f6:	4688      	mov	r8, r1
 801b8f8:	f8d3 c000 	ldr.w	ip, [r3]
 801b8fc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801b8fe:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801b902:	680f      	ldr	r7, [r1, #0]
 801b904:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801b908:	eba7 070c 	sub.w	r7, r7, ip
 801b90c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801b910:	edd3 6a07 	vldr	s13, [r3, #28]
 801b914:	42bc      	cmp	r4, r7
 801b916:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b918:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801b91c:	bfa8      	it	ge
 801b91e:	463c      	movge	r4, r7
 801b920:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b924:	f9ba 1000 	ldrsh.w	r1, [sl]
 801b928:	ee07 4a90 	vmov	s15, r4
 801b92c:	eb09 0e0c 	add.w	lr, r9, ip
 801b930:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801b934:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b938:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801b93c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801b940:	4571      	cmp	r1, lr
 801b942:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b946:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b94a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b94e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b952:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b956:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b95a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b95e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b962:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b966:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b96a:	f340 808c 	ble.w	801ba86 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801b96e:	eba1 060e 	sub.w	r6, r1, lr
 801b972:	fb96 f5f4 	sdiv	r5, r6, r4
 801b976:	ee07 5a10 	vmov	s14, r5
 801b97a:	2d00      	cmp	r5, #0
 801b97c:	fb04 6615 	mls	r6, r4, r5, r6
 801b980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b984:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b988:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b98c:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b990:	dd12      	ble.n	801b9b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801b992:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b996:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b99a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b99e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9a6:	bf14      	ite	ne
 801b9a8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b9ac:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b9b0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b9b4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b9b8:	fb05 f204 	mul.w	r2, r5, r4
 801b9bc:	1abf      	subs	r7, r7, r2
 801b9be:	4494      	add	ip, r2
 801b9c0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801b9c4:	4411      	add	r1, r2
 801b9c6:	eb09 020c 	add.w	r2, r9, ip
 801b9ca:	b209      	sxth	r1, r1
 801b9cc:	443a      	add	r2, r7
 801b9ce:	428a      	cmp	r2, r1
 801b9d0:	bfc4      	itt	gt
 801b9d2:	eba1 0209 	subgt.w	r2, r1, r9
 801b9d6:	eba2 070c 	subgt.w	r7, r2, ip
 801b9da:	2f00      	cmp	r7, #0
 801b9dc:	dd50      	ble.n	801ba80 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801b9de:	fb97 f1f4 	sdiv	r1, r7, r4
 801b9e2:	fb04 7211 	mls	r2, r4, r1, r7
 801b9e6:	b90a      	cbnz	r2, 801b9ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801b9e8:	3901      	subs	r1, #1
 801b9ea:	4622      	mov	r2, r4
 801b9ec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b9f0:	6840      	ldr	r0, [r0, #4]
 801b9f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801b9f6:	44b6      	add	lr, r6
 801b9f8:	f8d0 a000 	ldr.w	sl, [r0]
 801b9fc:	2900      	cmp	r1, #0
 801b9fe:	bfcc      	ite	gt
 801ba00:	46a1      	movgt	r9, r4
 801ba02:	4691      	movle	r9, r2
 801ba04:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ba06:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801ba08:	fb04 e505 	mla	r5, r4, r5, lr
 801ba0c:	eef0 6a42 	vmov.f32	s13, s4
 801ba10:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801ba14:	9008      	str	r0, [sp, #32]
 801ba16:	eeb0 7a61 	vmov.f32	s14, s3
 801ba1a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801ba1c:	695b      	ldr	r3, [r3, #20]
 801ba1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba22:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801ba26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ba2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ba2c:	445b      	add	r3, fp
 801ba2e:	9307      	str	r3, [sp, #28]
 801ba30:	ee16 3a90 	vmov	r3, s13
 801ba34:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801ba38:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801ba3c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801ba40:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801ba44:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ba48:	ee17 7a90 	vmov	r7, s15
 801ba4c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801ba50:	fb97 f7f4 	sdiv	r7, r7, r4
 801ba54:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ba58:	ee17 ca90 	vmov	ip, s15
 801ba5c:	fb9c fcf4 	sdiv	ip, ip, r4
 801ba60:	fb0c 3306 	mla	r3, ip, r6, r3
 801ba64:	9302      	str	r3, [sp, #8]
 801ba66:	ee17 3a10 	vmov	r3, s14
 801ba6a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801ba6e:	fb07 3706 	mla	r7, r7, r6, r3
 801ba72:	eba9 0306 	sub.w	r3, r9, r6
 801ba76:	e9cd 4700 	strd	r4, r7, [sp]
 801ba7a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801ba7e:	47a0      	blx	r4
 801ba80:	b00d      	add	sp, #52	@ 0x34
 801ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba86:	2500      	movs	r5, #0
 801ba88:	462e      	mov	r6, r5
 801ba8a:	e799      	b.n	801b9c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801ba8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801ba8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba90:	b0db      	sub	sp, #364	@ 0x16c
 801ba92:	461d      	mov	r5, r3
 801ba94:	4614      	mov	r4, r2
 801ba96:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801ba9a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ba9c:	4629      	mov	r1, r5
 801ba9e:	930a      	str	r3, [sp, #40]	@ 0x28
 801baa0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801baa4:	9009      	str	r0, [sp, #36]	@ 0x24
 801baa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801baa8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801baac:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801bab0:	9310      	str	r3, [sp, #64]	@ 0x40
 801bab2:	6803      	ldr	r3, [r0, #0]
 801bab4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801bab6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801baba:	47b8      	blx	r7
 801babc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801babe:	6058      	str	r0, [r3, #4]
 801bac0:	2800      	cmp	r0, #0
 801bac2:	f000 83a1 	beq.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bac6:	682b      	ldr	r3, [r5, #0]
 801bac8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801bacc:	ed94 7a02 	vldr	s14, [r4, #8]
 801bad0:	9314      	str	r3, [sp, #80]	@ 0x50
 801bad2:	686b      	ldr	r3, [r5, #4]
 801bad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bad8:	9315      	str	r3, [sp, #84]	@ 0x54
 801bada:	4bc1      	ldr	r3, [pc, #772]	@ (801bde0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801badc:	7819      	ldrb	r1, [r3, #0]
 801bade:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801bae2:	2900      	cmp	r1, #0
 801bae4:	bf16      	itet	ne
 801bae6:	4619      	movne	r1, r3
 801bae8:	4611      	moveq	r1, r2
 801baea:	4613      	movne	r3, r2
 801baec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baf0:	9116      	str	r1, [sp, #88]	@ 0x58
 801baf2:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801baf6:	f240 8387 	bls.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bafa:	ed94 7a07 	vldr	s14, [r4, #28]
 801bafe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb06:	f240 837f 	bls.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb0a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801bb0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb16:	f240 8377 	bls.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb1a:	6822      	ldr	r2, [r4, #0]
 801bb1c:	4bb1      	ldr	r3, [pc, #708]	@ (801bde4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	f2c0 8372 	blt.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb24:	49b0      	ldr	r1, [pc, #704]	@ (801bde8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801bb26:	6963      	ldr	r3, [r4, #20]
 801bb28:	428a      	cmp	r2, r1
 801bb2a:	f300 836d 	bgt.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb2e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801bb32:	48ae      	ldr	r0, [pc, #696]	@ (801bdec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801bb34:	33ff      	adds	r3, #255	@ 0xff
 801bb36:	4283      	cmp	r3, r0
 801bb38:	f200 8366 	bhi.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801bb3e:	4dac      	ldr	r5, [pc, #688]	@ (801bdf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801bb40:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801bb44:	33ff      	adds	r3, #255	@ 0xff
 801bb46:	42ab      	cmp	r3, r5
 801bb48:	f200 835e 	bhi.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb4c:	6862      	ldr	r2, [r4, #4]
 801bb4e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801bb52:	33ff      	adds	r3, #255	@ 0xff
 801bb54:	4283      	cmp	r3, r0
 801bb56:	f200 8357 	bhi.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb5a:	69a1      	ldr	r1, [r4, #24]
 801bb5c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801bb60:	33ff      	adds	r3, #255	@ 0xff
 801bb62:	4283      	cmp	r3, r0
 801bb64:	f200 8350 	bhi.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801bb6a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801bb6e:	30ff      	adds	r0, #255	@ 0xff
 801bb70:	42a8      	cmp	r0, r5
 801bb72:	f200 8349 	bhi.w	801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bb76:	428a      	cmp	r2, r1
 801bb78:	f280 8110 	bge.w	801bd9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801bb7c:	429a      	cmp	r2, r3
 801bb7e:	f300 8119 	bgt.w	801bdb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801bb82:	4299      	cmp	r1, r3
 801bb84:	f280 811d 	bge.w	801bdc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801bb88:	2502      	movs	r5, #2
 801bb8a:	2701      	movs	r7, #1
 801bb8c:	46a9      	mov	r9, r5
 801bb8e:	46b8      	mov	r8, r7
 801bb90:	f04f 0a00 	mov.w	sl, #0
 801bb94:	4621      	mov	r1, r4
 801bb96:	a849      	add	r0, sp, #292	@ 0x124
 801bb98:	f003 fb3c 	bl	801f214 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801bb9c:	4622      	mov	r2, r4
 801bb9e:	4653      	mov	r3, sl
 801bba0:	a949      	add	r1, sp, #292	@ 0x124
 801bba2:	f8cd 9000 	str.w	r9, [sp]
 801bba6:	a819      	add	r0, sp, #100	@ 0x64
 801bba8:	f003 fc64 	bl	801f474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801bbac:	4622      	mov	r2, r4
 801bbae:	4653      	mov	r3, sl
 801bbb0:	a949      	add	r1, sp, #292	@ 0x124
 801bbb2:	f8cd 8000 	str.w	r8, [sp]
 801bbb6:	a829      	add	r0, sp, #164	@ 0xa4
 801bbb8:	f003 fc5c 	bl	801f474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801bbbc:	4643      	mov	r3, r8
 801bbbe:	4622      	mov	r2, r4
 801bbc0:	a949      	add	r1, sp, #292	@ 0x124
 801bbc2:	f8cd 9000 	str.w	r9, [sp]
 801bbc6:	a839      	add	r0, sp, #228	@ 0xe4
 801bbc8:	f003 fc54 	bl	801f474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801bbcc:	42af      	cmp	r7, r5
 801bbce:	af12      	add	r7, sp, #72	@ 0x48
 801bbd0:	bfb7      	itett	lt
 801bbd2:	2300      	movlt	r3, #0
 801bbd4:	2301      	movge	r3, #1
 801bbd6:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801bbd8:	ac19      	addlt	r4, sp, #100	@ 0x64
 801bbda:	bfb1      	iteee	lt
 801bbdc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801bbde:	ad19      	addge	r5, sp, #100	@ 0x64
 801bbe0:	930e      	strge	r3, [sp, #56]	@ 0x38
 801bbe2:	ac29      	addge	r4, sp, #164	@ 0xa4
 801bbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbe6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bbea:	e887 0003 	stmia.w	r7, {r0, r1}
 801bbee:	b928      	cbnz	r0, 801bbfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801bbf0:	4b80      	ldr	r3, [pc, #512]	@ (801bdf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801bbf2:	6818      	ldr	r0, [r3, #0]
 801bbf4:	6803      	ldr	r3, [r0, #0]
 801bbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbf8:	4798      	blx	r3
 801bbfa:	6038      	str	r0, [r7, #0]
 801bbfc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801bbfe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801bc02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bc06:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801bc08:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801bc0c:	6963      	ldr	r3, [r4, #20]
 801bc0e:	440b      	add	r3, r1
 801bc10:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bc14:	4408      	add	r0, r1
 801bc16:	b200      	sxth	r0, r0
 801bc18:	4283      	cmp	r3, r0
 801bc1a:	900d      	str	r0, [sp, #52]	@ 0x34
 801bc1c:	f280 80dd 	bge.w	801bdda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801bc20:	428b      	cmp	r3, r1
 801bc22:	da08      	bge.n	801bc36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bc24:	2a00      	cmp	r2, #0
 801bc26:	dd06      	ble.n	801bc36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bc28:	1acb      	subs	r3, r1, r3
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	f2c0 80e4 	blt.w	801bdf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	f300 80e2 	bgt.w	801bdfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801bc36:	6967      	ldr	r7, [r4, #20]
 801bc38:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801bc3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc3e:	443b      	add	r3, r7
 801bc40:	461f      	mov	r7, r3
 801bc42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc44:	1bdf      	subs	r7, r3, r7
 801bc46:	4297      	cmp	r7, r2
 801bc48:	bfa8      	it	ge
 801bc4a:	4617      	movge	r7, r2
 801bc4c:	2f00      	cmp	r7, #0
 801bc4e:	f340 8166 	ble.w	801bf1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801bc52:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801bc54:	6829      	ldr	r1, [r5, #0]
 801bc56:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc5a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bc5e:	4411      	add	r1, r2
 801bc60:	6820      	ldr	r0, [r4, #0]
 801bc62:	4299      	cmp	r1, r3
 801bc64:	dd1a      	ble.n	801bc9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bc66:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bc6a:	4402      	add	r2, r0
 801bc6c:	440b      	add	r3, r1
 801bc6e:	b21b      	sxth	r3, r3
 801bc70:	429a      	cmp	r2, r3
 801bc72:	dc13      	bgt.n	801bc9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bc74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bc76:	a912      	add	r1, sp, #72	@ 0x48
 801bc78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	9206      	str	r2, [sp, #24]
 801bc80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bc82:	9500      	str	r5, [sp, #0]
 801bc84:	9205      	str	r2, [sp, #20]
 801bc86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bc88:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bc8c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801bc8e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bc92:	aa49      	add	r2, sp, #292	@ 0x124
 801bc94:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801bc98:	4623      	mov	r3, r4
 801bc9a:	47c8      	blx	r9
 801bc9c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801bca0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801bca4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801bca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bcac:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801bcb0:	68a1      	ldr	r1, [r4, #8]
 801bcb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bcb6:	ed94 6a08 	vldr	s12, [r4, #32]
 801bcba:	edd4 6a07 	vldr	s13, [r4, #28]
 801bcbe:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801bcc2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bcc6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801bcca:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bcce:	edc4 6a07 	vstr	s13, [r4, #28]
 801bcd2:	441a      	add	r2, r3
 801bcd4:	6963      	ldr	r3, [r4, #20]
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	6022      	str	r2, [r4, #0]
 801bcda:	6163      	str	r3, [r4, #20]
 801bcdc:	69a3      	ldr	r3, [r4, #24]
 801bcde:	3b01      	subs	r3, #1
 801bce0:	61a3      	str	r3, [r4, #24]
 801bce2:	6923      	ldr	r3, [r4, #16]
 801bce4:	440b      	add	r3, r1
 801bce6:	68e1      	ldr	r1, [r4, #12]
 801bce8:	428b      	cmp	r3, r1
 801bcea:	6123      	str	r3, [r4, #16]
 801bcec:	db15      	blt.n	801bd1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801bcee:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801bcf2:	3201      	adds	r2, #1
 801bcf4:	1a5b      	subs	r3, r3, r1
 801bcf6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bcfa:	6022      	str	r2, [r4, #0]
 801bcfc:	6123      	str	r3, [r4, #16]
 801bcfe:	edc4 6a07 	vstr	s13, [r4, #28]
 801bd02:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801bd06:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bd0a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801bd0e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801bd12:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bd16:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801bd1a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801bd1e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801bd22:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801bd26:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bd2a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801bd2e:	68a9      	ldr	r1, [r5, #8]
 801bd30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bd34:	ed95 6a08 	vldr	s12, [r5, #32]
 801bd38:	edd5 6a07 	vldr	s13, [r5, #28]
 801bd3c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801bd40:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bd44:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801bd48:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bd4c:	edc5 6a07 	vstr	s13, [r5, #28]
 801bd50:	441a      	add	r2, r3
 801bd52:	696b      	ldr	r3, [r5, #20]
 801bd54:	3301      	adds	r3, #1
 801bd56:	602a      	str	r2, [r5, #0]
 801bd58:	616b      	str	r3, [r5, #20]
 801bd5a:	69ab      	ldr	r3, [r5, #24]
 801bd5c:	3b01      	subs	r3, #1
 801bd5e:	61ab      	str	r3, [r5, #24]
 801bd60:	692b      	ldr	r3, [r5, #16]
 801bd62:	440b      	add	r3, r1
 801bd64:	68e9      	ldr	r1, [r5, #12]
 801bd66:	428b      	cmp	r3, r1
 801bd68:	612b      	str	r3, [r5, #16]
 801bd6a:	db15      	blt.n	801bd98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801bd6c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801bd70:	3201      	adds	r2, #1
 801bd72:	1a5b      	subs	r3, r3, r1
 801bd74:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bd78:	602a      	str	r2, [r5, #0]
 801bd7a:	612b      	str	r3, [r5, #16]
 801bd7c:	edc5 6a07 	vstr	s13, [r5, #28]
 801bd80:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801bd84:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bd88:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801bd8c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801bd90:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bd94:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801bd98:	3f01      	subs	r7, #1
 801bd9a:	e757      	b.n	801bc4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801bd9c:	4299      	cmp	r1, r3
 801bd9e:	dc13      	bgt.n	801bdc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801bda0:	429a      	cmp	r2, r3
 801bda2:	da14      	bge.n	801bdce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801bda4:	2502      	movs	r5, #2
 801bda6:	2703      	movs	r7, #3
 801bda8:	f04f 0800 	mov.w	r8, #0
 801bdac:	46a9      	mov	r9, r5
 801bdae:	f04f 0a01 	mov.w	sl, #1
 801bdb2:	e6ef      	b.n	801bb94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801bdb4:	2501      	movs	r5, #1
 801bdb6:	2700      	movs	r7, #0
 801bdb8:	46a9      	mov	r9, r5
 801bdba:	46b8      	mov	r8, r7
 801bdbc:	f04f 0a02 	mov.w	sl, #2
 801bdc0:	e6e8      	b.n	801bb94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801bdc2:	2501      	movs	r5, #1
 801bdc4:	2702      	movs	r7, #2
 801bdc6:	e6e1      	b.n	801bb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801bdc8:	2500      	movs	r5, #0
 801bdca:	2701      	movs	r7, #1
 801bdcc:	e7f4      	b.n	801bdb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801bdce:	2702      	movs	r7, #2
 801bdd0:	2503      	movs	r5, #3
 801bdd2:	f04f 0900 	mov.w	r9, #0
 801bdd6:	46b8      	mov	r8, r7
 801bdd8:	e7e9      	b.n	801bdae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801bdda:	4613      	mov	r3, r2
 801bddc:	e728      	b.n	801bc30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801bdde:	bf00      	nop
 801bde0:	24015dcc 	.word	0x24015dcc
 801bde4:	fffd8f01 	.word	0xfffd8f01
 801bde8:	00027100 	.word	0x00027100
 801bdec:	0004e1ff 	.word	0x0004e1ff
 801bdf0:	0004e1fe 	.word	0x0004e1fe
 801bdf4:	24015dd4 	.word	0x24015dd4
 801bdf8:	4613      	mov	r3, r2
 801bdfa:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801bdfc:	469e      	mov	lr, r3
 801bdfe:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801be00:	469c      	mov	ip, r3
 801be02:	9111      	str	r1, [sp, #68]	@ 0x44
 801be04:	f04f 0900 	mov.w	r9, #0
 801be08:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801be0c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801be10:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801be14:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801be18:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801be1c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801be20:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801be24:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801be28:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801be2c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801be30:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801be34:	f1bc 0f00 	cmp.w	ip, #0
 801be38:	d147      	bne.n	801beca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801be3a:	eb03 0c07 	add.w	ip, r3, r7
 801be3e:	1ad7      	subs	r7, r2, r3
 801be40:	f1b9 0f00 	cmp.w	r9, #0
 801be44:	d009      	beq.n	801be5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801be46:	9029      	str	r0, [sp, #164]	@ 0xa4
 801be48:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801be4c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801be50:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801be54:	912d      	str	r1, [sp, #180]	@ 0xb4
 801be56:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801be5a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801be5c:	f04f 0800 	mov.w	r8, #0
 801be60:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801be64:	9111      	str	r1, [sp, #68]	@ 0x44
 801be66:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801be6a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801be6e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801be72:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801be76:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801be7a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801be7e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801be82:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801be86:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801be8a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801be8e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801be92:	f1be 0f00 	cmp.w	lr, #0
 801be96:	d031      	beq.n	801befc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801be98:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801be9a:	4450      	add	r0, sl
 801be9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801bea0:	4431      	add	r1, r6
 801bea2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801bea6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801beaa:	4549      	cmp	r1, r9
 801beac:	db08      	blt.n	801bec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801beae:	ee77 7a85 	vadd.f32	s15, s15, s10
 801beb2:	3001      	adds	r0, #1
 801beb4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801beb8:	eba1 0109 	sub.w	r1, r1, r9
 801bebc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801bec0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bec4:	f04f 0801 	mov.w	r8, #1
 801bec8:	e7e3      	b.n	801be92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801beca:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801becc:	4450      	add	r0, sl
 801bece:	ee37 7a24 	vadd.f32	s14, s14, s9
 801bed2:	4431      	add	r1, r6
 801bed4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801bed8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801bedc:	4541      	cmp	r1, r8
 801bede:	db08      	blt.n	801bef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801bee0:	ee76 6a85 	vadd.f32	s13, s13, s10
 801bee4:	3001      	adds	r0, #1
 801bee6:	ee37 7a25 	vadd.f32	s14, s14, s11
 801beea:	eba1 0108 	sub.w	r1, r1, r8
 801beee:	ee77 7a86 	vadd.f32	s15, s15, s12
 801bef2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bef6:	f04f 0901 	mov.w	r9, #1
 801befa:	e79b      	b.n	801be34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801befc:	449c      	add	ip, r3
 801befe:	1aff      	subs	r7, r7, r3
 801bf00:	f1b8 0f00 	cmp.w	r8, #0
 801bf04:	d009      	beq.n	801bf1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801bf06:	9019      	str	r0, [sp, #100]	@ 0x64
 801bf08:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801bf0c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801bf10:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801bf14:	911d      	str	r1, [sp, #116]	@ 0x74
 801bf16:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801bf1a:	1ad2      	subs	r2, r2, r3
 801bf1c:	e68b      	b.n	801bc36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bf1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf20:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	f000 80d1 	beq.w	801c0ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801bf28:	ad19      	add	r5, sp, #100	@ 0x64
 801bf2a:	ac39      	add	r4, sp, #228	@ 0xe4
 801bf2c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801bf2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801bf32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bf36:	930c      	str	r3, [sp, #48]	@ 0x30
 801bf38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801bf3a:	6963      	ldr	r3, [r4, #20]
 801bf3c:	440b      	add	r3, r1
 801bf3e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bf42:	4408      	add	r0, r1
 801bf44:	b200      	sxth	r0, r0
 801bf46:	4283      	cmp	r3, r0
 801bf48:	900d      	str	r0, [sp, #52]	@ 0x34
 801bf4a:	f280 80c1 	bge.w	801c0d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801bf4e:	428b      	cmp	r3, r1
 801bf50:	da08      	bge.n	801bf64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bf52:	2a00      	cmp	r2, #0
 801bf54:	dd06      	ble.n	801bf64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bf56:	1acb      	subs	r3, r1, r3
 801bf58:	429a      	cmp	r2, r3
 801bf5a:	f2c0 80bb 	blt.w	801c0d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f300 80b9 	bgt.w	801c0d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801bf64:	6967      	ldr	r7, [r4, #20]
 801bf66:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801bf6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf6c:	443b      	add	r3, r7
 801bf6e:	461f      	mov	r7, r3
 801bf70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bf72:	1bdf      	subs	r7, r3, r7
 801bf74:	4297      	cmp	r7, r2
 801bf76:	bfa8      	it	ge
 801bf78:	4617      	movge	r7, r2
 801bf7a:	2f00      	cmp	r7, #0
 801bf7c:	f340 813c 	ble.w	801c1f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801bf80:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801bf82:	6829      	ldr	r1, [r5, #0]
 801bf84:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf88:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bf8c:	4411      	add	r1, r2
 801bf8e:	6820      	ldr	r0, [r4, #0]
 801bf90:	4299      	cmp	r1, r3
 801bf92:	dd1a      	ble.n	801bfca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bf94:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bf98:	4402      	add	r2, r0
 801bf9a:	440b      	add	r3, r1
 801bf9c:	b21b      	sxth	r3, r3
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	dc13      	bgt.n	801bfca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bfa2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bfa4:	a912      	add	r1, sp, #72	@ 0x48
 801bfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfa8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	9206      	str	r2, [sp, #24]
 801bfae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bfb0:	9500      	str	r5, [sp, #0]
 801bfb2:	9205      	str	r2, [sp, #20]
 801bfb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfb6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bfba:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801bfbc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bfc0:	aa49      	add	r2, sp, #292	@ 0x124
 801bfc2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801bfc6:	4623      	mov	r3, r4
 801bfc8:	47c8      	blx	r9
 801bfca:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801bfce:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801bfd2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801bfd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bfda:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801bfde:	68a1      	ldr	r1, [r4, #8]
 801bfe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bfe4:	ed94 6a08 	vldr	s12, [r4, #32]
 801bfe8:	edd4 6a07 	vldr	s13, [r4, #28]
 801bfec:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801bff0:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bff4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801bff8:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bffc:	edc4 6a07 	vstr	s13, [r4, #28]
 801c000:	441a      	add	r2, r3
 801c002:	6963      	ldr	r3, [r4, #20]
 801c004:	3301      	adds	r3, #1
 801c006:	6022      	str	r2, [r4, #0]
 801c008:	6163      	str	r3, [r4, #20]
 801c00a:	69a3      	ldr	r3, [r4, #24]
 801c00c:	3b01      	subs	r3, #1
 801c00e:	61a3      	str	r3, [r4, #24]
 801c010:	6923      	ldr	r3, [r4, #16]
 801c012:	440b      	add	r3, r1
 801c014:	68e1      	ldr	r1, [r4, #12]
 801c016:	428b      	cmp	r3, r1
 801c018:	6123      	str	r3, [r4, #16]
 801c01a:	db15      	blt.n	801c048 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801c01c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801c020:	3201      	adds	r2, #1
 801c022:	1a5b      	subs	r3, r3, r1
 801c024:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c028:	6022      	str	r2, [r4, #0]
 801c02a:	6123      	str	r3, [r4, #16]
 801c02c:	edc4 6a07 	vstr	s13, [r4, #28]
 801c030:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801c034:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c038:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801c03c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801c040:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c044:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801c048:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801c04c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801c050:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801c054:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c058:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801c05c:	68a9      	ldr	r1, [r5, #8]
 801c05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c062:	ed95 6a08 	vldr	s12, [r5, #32]
 801c066:	edd5 6a07 	vldr	s13, [r5, #28]
 801c06a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801c06e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c072:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801c076:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c07a:	edc5 6a07 	vstr	s13, [r5, #28]
 801c07e:	441a      	add	r2, r3
 801c080:	696b      	ldr	r3, [r5, #20]
 801c082:	3301      	adds	r3, #1
 801c084:	602a      	str	r2, [r5, #0]
 801c086:	616b      	str	r3, [r5, #20]
 801c088:	69ab      	ldr	r3, [r5, #24]
 801c08a:	3b01      	subs	r3, #1
 801c08c:	61ab      	str	r3, [r5, #24]
 801c08e:	692b      	ldr	r3, [r5, #16]
 801c090:	440b      	add	r3, r1
 801c092:	68e9      	ldr	r1, [r5, #12]
 801c094:	428b      	cmp	r3, r1
 801c096:	612b      	str	r3, [r5, #16]
 801c098:	db15      	blt.n	801c0c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801c09a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801c09e:	3201      	adds	r2, #1
 801c0a0:	1a5b      	subs	r3, r3, r1
 801c0a2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c0a6:	602a      	str	r2, [r5, #0]
 801c0a8:	612b      	str	r3, [r5, #16]
 801c0aa:	edc5 6a07 	vstr	s13, [r5, #28]
 801c0ae:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801c0b2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c0b6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801c0ba:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801c0be:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c0c2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801c0c6:	3f01      	subs	r7, #1
 801c0c8:	e757      	b.n	801bf7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801c0ca:	ad39      	add	r5, sp, #228	@ 0xe4
 801c0cc:	ac19      	add	r4, sp, #100	@ 0x64
 801c0ce:	e72d      	b.n	801bf2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801c0d0:	4613      	mov	r3, r2
 801c0d2:	e744      	b.n	801bf5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801c0d4:	4613      	mov	r3, r2
 801c0d6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801c0d8:	469e      	mov	lr, r3
 801c0da:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801c0de:	461f      	mov	r7, r3
 801c0e0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801c0e4:	f04f 0900 	mov.w	r9, #0
 801c0e8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801c0ec:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801c0f0:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801c0f4:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801c0f8:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801c0fc:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801c0fe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801c102:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801c106:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801c10a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801c10e:	960e      	str	r6, [sp, #56]	@ 0x38
 801c110:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801c114:	2f00      	cmp	r7, #0
 801c116:	d146      	bne.n	801c1a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801c118:	449c      	add	ip, r3
 801c11a:	1ad7      	subs	r7, r2, r3
 801c11c:	f1b9 0f00 	cmp.w	r9, #0
 801c120:	d009      	beq.n	801c136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801c122:	9039      	str	r0, [sp, #228]	@ 0xe4
 801c124:	913d      	str	r1, [sp, #244]	@ 0xf4
 801c126:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801c12a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801c12e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801c132:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801c136:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801c138:	f04f 0800 	mov.w	r8, #0
 801c13c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801c140:	910e      	str	r1, [sp, #56]	@ 0x38
 801c142:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801c146:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801c14a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801c14e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801c152:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801c156:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801c15a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801c15e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801c162:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801c166:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801c16a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801c16e:	f1be 0f00 	cmp.w	lr, #0
 801c172:	d030      	beq.n	801c1d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801c174:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801c176:	4450      	add	r0, sl
 801c178:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c17c:	4431      	add	r1, r6
 801c17e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c182:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c186:	4549      	cmp	r1, r9
 801c188:	db08      	blt.n	801c19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801c18a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c18e:	3001      	adds	r0, #1
 801c190:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c194:	eba1 0109 	sub.w	r1, r1, r9
 801c198:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c19c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c1a0:	f04f 0801 	mov.w	r8, #1
 801c1a4:	e7e3      	b.n	801c16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801c1a6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801c1a8:	4450      	add	r0, sl
 801c1aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c1ae:	4431      	add	r1, r6
 801c1b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c1b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c1b8:	4541      	cmp	r1, r8
 801c1ba:	db08      	blt.n	801c1ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801c1bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c1c0:	3001      	adds	r0, #1
 801c1c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c1c6:	eba1 0108 	sub.w	r1, r1, r8
 801c1ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c1ce:	3f01      	subs	r7, #1
 801c1d0:	f04f 0901 	mov.w	r9, #1
 801c1d4:	e79e      	b.n	801c114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801c1d6:	449c      	add	ip, r3
 801c1d8:	1aff      	subs	r7, r7, r3
 801c1da:	f1b8 0f00 	cmp.w	r8, #0
 801c1de:	d009      	beq.n	801c1f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801c1e0:	9019      	str	r0, [sp, #100]	@ 0x64
 801c1e2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801c1e6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801c1ea:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801c1ee:	911d      	str	r1, [sp, #116]	@ 0x74
 801c1f0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801c1f4:	1ad2      	subs	r2, r2, r3
 801c1f6:	e6b5      	b.n	801bf64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	b923      	cbnz	r3, 801c208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c1fe:	4b04      	ldr	r3, [pc, #16]	@ (801c210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801c200:	6818      	ldr	r0, [r3, #0]
 801c202:	6803      	ldr	r3, [r0, #0]
 801c204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c206:	4798      	blx	r3
 801c208:	b05b      	add	sp, #364	@ 0x16c
 801c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c20e:	bf00      	nop
 801c210:	24015dd4 	.word	0x24015dd4

0801c214 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c214:	2b03      	cmp	r3, #3
 801c216:	d818      	bhi.n	801c24a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801c218:	e8df f003 	tbb	[pc, r3]
 801c21c:	130d0602 	.word	0x130d0602
 801c220:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c224:	1850      	adds	r0, r2, r1
 801c226:	4770      	bx	lr
 801c228:	8803      	ldrh	r3, [r0, #0]
 801c22a:	8880      	ldrh	r0, [r0, #4]
 801c22c:	4418      	add	r0, r3
 801c22e:	b200      	sxth	r0, r0
 801c230:	1a80      	subs	r0, r0, r2
 801c232:	3801      	subs	r0, #1
 801c234:	4770      	bx	lr
 801c236:	8803      	ldrh	r3, [r0, #0]
 801c238:	8880      	ldrh	r0, [r0, #4]
 801c23a:	4418      	add	r0, r3
 801c23c:	b200      	sxth	r0, r0
 801c23e:	1a40      	subs	r0, r0, r1
 801c240:	e7f7      	b.n	801c232 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c242:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c246:	4410      	add	r0, r2
 801c248:	4770      	bx	lr
 801c24a:	2000      	movs	r0, #0
 801c24c:	4770      	bx	lr

0801c24e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c24e:	2b03      	cmp	r3, #3
 801c250:	d817      	bhi.n	801c282 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801c252:	e8df f003 	tbb	[pc, r3]
 801c256:	0602      	.short	0x0602
 801c258:	1009      	.short	0x1009
 801c25a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c25e:	1850      	adds	r0, r2, r1
 801c260:	4770      	bx	lr
 801c262:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c266:	e7fa      	b.n	801c25e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801c268:	8843      	ldrh	r3, [r0, #2]
 801c26a:	88c0      	ldrh	r0, [r0, #6]
 801c26c:	4418      	add	r0, r3
 801c26e:	b200      	sxth	r0, r0
 801c270:	1a80      	subs	r0, r0, r2
 801c272:	3801      	subs	r0, #1
 801c274:	4770      	bx	lr
 801c276:	8843      	ldrh	r3, [r0, #2]
 801c278:	88c0      	ldrh	r0, [r0, #6]
 801c27a:	4418      	add	r0, r3
 801c27c:	b200      	sxth	r0, r0
 801c27e:	1a40      	subs	r0, r0, r1
 801c280:	e7f7      	b.n	801c272 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c282:	2000      	movs	r0, #0
 801c284:	4770      	bx	lr
	...

0801c288 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c288:	4b01      	ldr	r3, [pc, #4]	@ (801c290 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c28a:	2200      	movs	r2, #0
 801c28c:	601a      	str	r2, [r3, #0]
 801c28e:	4770      	bx	lr
 801c290:	24015de4 	.word	0x24015de4

0801c294 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801c294:	4603      	mov	r3, r0
 801c296:	b1c8      	cbz	r0, 801c2cc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801c298:	0c02      	lsrs	r2, r0, #16
 801c29a:	0412      	lsls	r2, r2, #16
 801c29c:	b9a2      	cbnz	r2, 801c2c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801c29e:	0403      	lsls	r3, r0, #16
 801c2a0:	2010      	movs	r0, #16
 801c2a2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801c2a6:	bf04      	itt	eq
 801c2a8:	021b      	lsleq	r3, r3, #8
 801c2aa:	3008      	addeq	r0, #8
 801c2ac:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801c2b0:	bf04      	itt	eq
 801c2b2:	011b      	lsleq	r3, r3, #4
 801c2b4:	3004      	addeq	r0, #4
 801c2b6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801c2ba:	bf04      	itt	eq
 801c2bc:	009b      	lsleq	r3, r3, #2
 801c2be:	3002      	addeq	r0, #2
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	db04      	blt.n	801c2ce <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801c2c4:	3001      	adds	r0, #1
 801c2c6:	4770      	bx	lr
 801c2c8:	2000      	movs	r0, #0
 801c2ca:	e7ea      	b.n	801c2a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801c2cc:	2020      	movs	r0, #32
 801c2ce:	4770      	bx	lr

0801c2d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d4:	b087      	sub	sp, #28
 801c2d6:	460d      	mov	r5, r1
 801c2d8:	4616      	mov	r6, r2
 801c2da:	4698      	mov	r8, r3
 801c2dc:	4601      	mov	r1, r0
 801c2de:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801c2e2:	b120      	cbz	r0, 801c2ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801c2e4:	b11a      	cbz	r2, 801c2ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801c2e6:	2d1f      	cmp	r5, #31
 801c2e8:	d801      	bhi.n	801c2ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801c2ea:	2b1f      	cmp	r3, #31
 801c2ec:	d904      	bls.n	801c2f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801c2ee:	2000      	movs	r0, #0
 801c2f0:	6038      	str	r0, [r7, #0]
 801c2f2:	b007      	add	sp, #28
 801c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f8:	b97d      	cbnz	r5, 801c31a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801c2fa:	b143      	cbz	r3, 801c30e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801c2fc:	4602      	mov	r2, r0
 801c2fe:	462b      	mov	r3, r5
 801c300:	4641      	mov	r1, r8
 801c302:	4630      	mov	r0, r6
 801c304:	e9cd 4700 	strd	r4, r7, [sp]
 801c308:	f7ff ffe2 	bl	801c2d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c30c:	e7f1      	b.n	801c2f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801c30e:	f04f 33ff 	mov.w	r3, #4294967295
 801c312:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c316:	603b      	str	r3, [r7, #0]
 801c318:	e7eb      	b.n	801c2f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801c31a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801c31e:	d106      	bne.n	801c32e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801c320:	4346      	muls	r6, r0
 801c322:	fbb6 f0f4 	udiv	r0, r6, r4
 801c326:	fb04 6610 	mls	r6, r4, r0, r6
 801c32a:	603e      	str	r6, [r7, #0]
 801c32c:	e7e1      	b.n	801c2f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801c32e:	2201      	movs	r2, #1
 801c330:	fa00 fb05 	lsl.w	fp, r0, r5
 801c334:	40aa      	lsls	r2, r5
 801c336:	fbbb f9f4 	udiv	r9, fp, r4
 801c33a:	3a01      	subs	r2, #1
 801c33c:	fb0a f309 	mul.w	r3, sl, r9
 801c340:	fb04 b919 	mls	r9, r4, r9, fp
 801c344:	4016      	ands	r6, r2
 801c346:	9303      	str	r3, [sp, #12]
 801c348:	4630      	mov	r0, r6
 801c34a:	f7ff ffa3 	bl	801c294 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c34e:	462b      	mov	r3, r5
 801c350:	460a      	mov	r2, r1
 801c352:	4601      	mov	r1, r0
 801c354:	4630      	mov	r0, r6
 801c356:	e9cd 4700 	strd	r4, r7, [sp]
 801c35a:	f7ff ffb9 	bl	801c2d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c35e:	4606      	mov	r6, r0
 801c360:	4648      	mov	r0, r9
 801c362:	eb05 0108 	add.w	r1, r5, r8
 801c366:	f7ff ff95 	bl	801c294 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c36a:	ab05      	add	r3, sp, #20
 801c36c:	464a      	mov	r2, r9
 801c36e:	e9cd 4300 	strd	r4, r3, [sp]
 801c372:	4603      	mov	r3, r0
 801c374:	4650      	mov	r0, sl
 801c376:	f7ff ffab 	bl	801c2d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c37a:	6839      	ldr	r1, [r7, #0]
 801c37c:	9a05      	ldr	r2, [sp, #20]
 801c37e:	9b03      	ldr	r3, [sp, #12]
 801c380:	4411      	add	r1, r2
 801c382:	fbb1 f2f4 	udiv	r2, r1, r4
 801c386:	18d3      	adds	r3, r2, r3
 801c388:	fb04 1412 	mls	r4, r4, r2, r1
 801c38c:	441e      	add	r6, r3
 801c38e:	603c      	str	r4, [r7, #0]
 801c390:	4430      	add	r0, r6
 801c392:	e7ae      	b.n	801c2f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801c394 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801c394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c398:	b085      	sub	sp, #20
 801c39a:	f1b0 0900 	subs.w	r9, r0, #0
 801c39e:	461d      	mov	r5, r3
 801c3a0:	4617      	mov	r7, r2
 801c3a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c3a4:	bfbb      	ittet	lt
 801c3a6:	f1c9 0900 	rsblt	r9, r9, #0
 801c3aa:	f04f 36ff 	movlt.w	r6, #4294967295
 801c3ae:	2601      	movge	r6, #1
 801c3b0:	6823      	ldrlt	r3, [r4, #0]
 801c3b2:	bfbc      	itt	lt
 801c3b4:	425b      	neglt	r3, r3
 801c3b6:	6023      	strlt	r3, [r4, #0]
 801c3b8:	2a00      	cmp	r2, #0
 801c3ba:	da04      	bge.n	801c3c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801c3bc:	6823      	ldr	r3, [r4, #0]
 801c3be:	4257      	negs	r7, r2
 801c3c0:	4276      	negs	r6, r6
 801c3c2:	425b      	negs	r3, r3
 801c3c4:	6023      	str	r3, [r4, #0]
 801c3c6:	2d00      	cmp	r5, #0
 801c3c8:	4638      	mov	r0, r7
 801c3ca:	bfba      	itte	lt
 801c3cc:	426d      	neglt	r5, r5
 801c3ce:	f04f 38ff 	movlt.w	r8, #4294967295
 801c3d2:	f04f 0801 	movge.w	r8, #1
 801c3d6:	f7ff ff5d 	bl	801c294 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c3da:	ab03      	add	r3, sp, #12
 801c3dc:	463a      	mov	r2, r7
 801c3de:	e9cd 5300 	strd	r5, r3, [sp]
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	4648      	mov	r0, r9
 801c3e6:	f7ff ff73 	bl	801c2d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c3ea:	6823      	ldr	r3, [r4, #0]
 801c3ec:	9a03      	ldr	r2, [sp, #12]
 801c3ee:	4546      	cmp	r6, r8
 801c3f0:	441a      	add	r2, r3
 801c3f2:	fb92 f3f5 	sdiv	r3, r2, r5
 801c3f6:	4418      	add	r0, r3
 801c3f8:	fb05 2313 	mls	r3, r5, r3, r2
 801c3fc:	bf18      	it	ne
 801c3fe:	4240      	negne	r0, r0
 801c400:	1c72      	adds	r2, r6, #1
 801c402:	6023      	str	r3, [r4, #0]
 801c404:	d105      	bne.n	801c412 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801c406:	2b00      	cmp	r3, #0
 801c408:	f1c3 0200 	rsb	r2, r3, #0
 801c40c:	db0b      	blt.n	801c426 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801c40e:	6022      	str	r2, [r4, #0]
 801c410:	e006      	b.n	801c420 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c412:	2e01      	cmp	r6, #1
 801c414:	d104      	bne.n	801c420 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c416:	2b00      	cmp	r3, #0
 801c418:	da02      	bge.n	801c420 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c41a:	442b      	add	r3, r5
 801c41c:	3801      	subs	r0, #1
 801c41e:	6023      	str	r3, [r4, #0]
 801c420:	b005      	add	sp, #20
 801c422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c426:	3801      	subs	r0, #1
 801c428:	1b52      	subs	r2, r2, r5
 801c42a:	e7f0      	b.n	801c40e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801c42c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c42c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c430:	4c1c      	ldr	r4, [pc, #112]	@ (801c4a4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801c432:	4605      	mov	r5, r0
 801c434:	6807      	ldr	r7, [r0, #0]
 801c436:	69a3      	ldr	r3, [r4, #24]
 801c438:	b92b      	cbnz	r3, 801c446 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801c43a:	6840      	ldr	r0, [r0, #4]
 801c43c:	e9c5 7000 	strd	r7, r0, [r5]
 801c440:	b004      	add	sp, #16
 801c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c446:	f04f 0802 	mov.w	r8, #2
 801c44a:	68a2      	ldr	r2, [r4, #8]
 801c44c:	ae04      	add	r6, sp, #16
 801c44e:	6820      	ldr	r0, [r4, #0]
 801c450:	fb93 f1f8 	sdiv	r1, r3, r8
 801c454:	440a      	add	r2, r1
 801c456:	69e1      	ldr	r1, [r4, #28]
 801c458:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c45c:	463a      	mov	r2, r7
 801c45e:	9600      	str	r6, [sp, #0]
 801c460:	f7ff ff98 	bl	801c394 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c464:	69a3      	ldr	r3, [r4, #24]
 801c466:	4607      	mov	r7, r0
 801c468:	686a      	ldr	r2, [r5, #4]
 801c46a:	6a21      	ldr	r1, [r4, #32]
 801c46c:	9600      	str	r6, [sp, #0]
 801c46e:	6860      	ldr	r0, [r4, #4]
 801c470:	f7ff ff90 	bl	801c394 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c474:	69a3      	ldr	r3, [r4, #24]
 801c476:	6962      	ldr	r2, [r4, #20]
 801c478:	4407      	add	r7, r0
 801c47a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801c47c:	9600      	str	r6, [sp, #0]
 801c47e:	68e0      	ldr	r0, [r4, #12]
 801c480:	fb93 f8f8 	sdiv	r8, r3, r8
 801c484:	4442      	add	r2, r8
 801c486:	9203      	str	r2, [sp, #12]
 801c488:	682a      	ldr	r2, [r5, #0]
 801c48a:	f7ff ff83 	bl	801c394 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c48e:	4680      	mov	r8, r0
 801c490:	9600      	str	r6, [sp, #0]
 801c492:	69a3      	ldr	r3, [r4, #24]
 801c494:	686a      	ldr	r2, [r5, #4]
 801c496:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801c498:	6920      	ldr	r0, [r4, #16]
 801c49a:	f7ff ff7b 	bl	801c394 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c49e:	4440      	add	r0, r8
 801c4a0:	e7cc      	b.n	801c43c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801c4a2:	bf00      	nop
 801c4a4:	24015de8 	.word	0x24015de8

0801c4a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c4a8:	4b07      	ldr	r3, [pc, #28]	@ (801c4c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801c4aa:	781b      	ldrb	r3, [r3, #0]
 801c4ac:	2b01      	cmp	r3, #1
 801c4ae:	d109      	bne.n	801c4c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801c4b0:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c4b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c4b8:	8003      	strh	r3, [r0, #0]
 801c4ba:	4b04      	ldr	r3, [pc, #16]	@ (801c4cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c4bc:	881b      	ldrh	r3, [r3, #0]
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	1a9b      	subs	r3, r3, r2
 801c4c2:	800b      	strh	r3, [r1, #0]
 801c4c4:	4770      	bx	lr
 801c4c6:	bf00      	nop
 801c4c8:	24015dcc 	.word	0x24015dcc
 801c4cc:	24015dc8 	.word	0x24015dc8

0801c4d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c4d0:	4b07      	ldr	r3, [pc, #28]	@ (801c4f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c4d2:	b510      	push	{r4, lr}
 801c4d4:	781b      	ldrb	r3, [r3, #0]
 801c4d6:	2b01      	cmp	r3, #1
 801c4d8:	d108      	bne.n	801c4ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c4da:	4b06      	ldr	r3, [pc, #24]	@ (801c4f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c4dc:	880c      	ldrh	r4, [r1, #0]
 801c4de:	881b      	ldrh	r3, [r3, #0]
 801c4e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c4e4:	3b01      	subs	r3, #1
 801c4e6:	1b1b      	subs	r3, r3, r4
 801c4e8:	8003      	strh	r3, [r0, #0]
 801c4ea:	800a      	strh	r2, [r1, #0]
 801c4ec:	bd10      	pop	{r4, pc}
 801c4ee:	bf00      	nop
 801c4f0:	24015dcc 	.word	0x24015dcc
 801c4f4:	24015dc8 	.word	0x24015dc8

0801c4f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c4f8:	4b0a      	ldr	r3, [pc, #40]	@ (801c524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c4fa:	b510      	push	{r4, lr}
 801c4fc:	781b      	ldrb	r3, [r3, #0]
 801c4fe:	2b01      	cmp	r3, #1
 801c500:	d10e      	bne.n	801c520 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c502:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c506:	8843      	ldrh	r3, [r0, #2]
 801c508:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c50c:	18ca      	adds	r2, r1, r3
 801c50e:	4b06      	ldr	r3, [pc, #24]	@ (801c528 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c510:	8044      	strh	r4, [r0, #2]
 801c512:	881b      	ldrh	r3, [r3, #0]
 801c514:	1a9b      	subs	r3, r3, r2
 801c516:	8003      	strh	r3, [r0, #0]
 801c518:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c51c:	8081      	strh	r1, [r0, #4]
 801c51e:	80c3      	strh	r3, [r0, #6]
 801c520:	bd10      	pop	{r4, pc}
 801c522:	bf00      	nop
 801c524:	24015dcc 	.word	0x24015dcc
 801c528:	24015dc8 	.word	0x24015dc8

0801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c52c:	4b08      	ldr	r3, [pc, #32]	@ (801c550 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801c52e:	781b      	ldrb	r3, [r3, #0]
 801c530:	2b01      	cmp	r3, #1
 801c532:	d10c      	bne.n	801c54e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801c534:	8803      	ldrh	r3, [r0, #0]
 801c536:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c53a:	8842      	ldrh	r2, [r0, #2]
 801c53c:	8002      	strh	r2, [r0, #0]
 801c53e:	185a      	adds	r2, r3, r1
 801c540:	4b04      	ldr	r3, [pc, #16]	@ (801c554 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c542:	881b      	ldrh	r3, [r3, #0]
 801c544:	1a9b      	subs	r3, r3, r2
 801c546:	8043      	strh	r3, [r0, #2]
 801c548:	88c3      	ldrh	r3, [r0, #6]
 801c54a:	80c1      	strh	r1, [r0, #6]
 801c54c:	8083      	strh	r3, [r0, #4]
 801c54e:	4770      	bx	lr
 801c550:	24015dcc 	.word	0x24015dcc
 801c554:	24015dc8 	.word	0x24015dc8

0801c558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c558:	4b07      	ldr	r3, [pc, #28]	@ (801c578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c55a:	b510      	push	{r4, lr}
 801c55c:	781b      	ldrb	r3, [r3, #0]
 801c55e:	2b01      	cmp	r3, #1
 801c560:	d108      	bne.n	801c574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c562:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c566:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c56a:	8003      	strh	r3, [r0, #0]
 801c56c:	8893      	ldrh	r3, [r2, #4]
 801c56e:	3b01      	subs	r3, #1
 801c570:	1b1b      	subs	r3, r3, r4
 801c572:	800b      	strh	r3, [r1, #0]
 801c574:	bd10      	pop	{r4, pc}
 801c576:	bf00      	nop
 801c578:	24015dcc 	.word	0x24015dcc

0801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c57c:	4b0a      	ldr	r3, [pc, #40]	@ (801c5a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c57e:	460a      	mov	r2, r1
 801c580:	b510      	push	{r4, lr}
 801c582:	781b      	ldrb	r3, [r3, #0]
 801c584:	2b01      	cmp	r3, #1
 801c586:	d10d      	bne.n	801c5a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c588:	8881      	ldrh	r1, [r0, #4]
 801c58a:	8803      	ldrh	r3, [r0, #0]
 801c58c:	440b      	add	r3, r1
 801c58e:	4601      	mov	r1, r0
 801c590:	3b01      	subs	r3, #1
 801c592:	f821 3b02 	strh.w	r3, [r1], #2
 801c596:	f7ff ffdf 	bl	801c558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c59a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c59e:	88c2      	ldrh	r2, [r0, #6]
 801c5a0:	80c3      	strh	r3, [r0, #6]
 801c5a2:	8082      	strh	r2, [r0, #4]
 801c5a4:	bd10      	pop	{r4, pc}
 801c5a6:	bf00      	nop
 801c5a8:	24015dcc 	.word	0x24015dcc

0801c5ac <_ZN8touchgfx11Application13requestRedrawEv>:
 801c5ac:	4b06      	ldr	r3, [pc, #24]	@ (801c5c8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801c5ae:	2100      	movs	r1, #0
 801c5b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5b4:	4b05      	ldr	r3, [pc, #20]	@ (801c5cc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801c5b6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801c5ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5be:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801c5c2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801c5c6:	4770      	bx	lr
 801c5c8:	24015dc8 	.word	0x24015dc8
 801c5cc:	24015dca 	.word	0x24015dca

0801c5d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c5d0:	4b03      	ldr	r3, [pc, #12]	@ (801c5e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c5d2:	6818      	ldr	r0, [r3, #0]
 801c5d4:	b110      	cbz	r0, 801c5dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c5d6:	6803      	ldr	r3, [r0, #0]
 801c5d8:	699b      	ldr	r3, [r3, #24]
 801c5da:	4718      	bx	r3
 801c5dc:	4770      	bx	lr
 801c5de:	bf00      	nop
 801c5e0:	24015e18 	.word	0x24015e18

0801c5e4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c5e4:	4770      	bx	lr
	...

0801c5e8 <_ZN8touchgfx11Application4drawEv>:
 801c5e8:	4b09      	ldr	r3, [pc, #36]	@ (801c610 <_ZN8touchgfx11Application4drawEv+0x28>)
 801c5ea:	b507      	push	{r0, r1, r2, lr}
 801c5ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5f0:	2100      	movs	r1, #0
 801c5f2:	4b08      	ldr	r3, [pc, #32]	@ (801c614 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c5f4:	9100      	str	r1, [sp, #0]
 801c5f6:	4669      	mov	r1, sp
 801c5f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c600:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c604:	6803      	ldr	r3, [r0, #0]
 801c606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c608:	4798      	blx	r3
 801c60a:	b003      	add	sp, #12
 801c60c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c610:	24015dc8 	.word	0x24015dc8
 801c614:	24015dca 	.word	0x24015dca

0801c618 <_ZN8touchgfx11Application10invalidateEv>:
 801c618:	4b09      	ldr	r3, [pc, #36]	@ (801c640 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801c61a:	b082      	sub	sp, #8
 801c61c:	2100      	movs	r1, #0
 801c61e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c622:	4b08      	ldr	r3, [pc, #32]	@ (801c644 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801c624:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c628:	aa02      	add	r2, sp, #8
 801c62a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c62e:	9100      	str	r1, [sp, #0]
 801c630:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c634:	6803      	ldr	r3, [r0, #0]
 801c636:	e912 0006 	ldmdb	r2, {r1, r2}
 801c63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c63c:	b002      	add	sp, #8
 801c63e:	4718      	bx	r3
 801c640:	24015dc8 	.word	0x24015dc8
 801c644:	24015dca 	.word	0x24015dca

0801c648 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c648:	4b03      	ldr	r3, [pc, #12]	@ (801c658 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c64a:	6818      	ldr	r0, [r3, #0]
 801c64c:	b110      	cbz	r0, 801c654 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c64e:	6803      	ldr	r3, [r0, #0]
 801c650:	69db      	ldr	r3, [r3, #28]
 801c652:	4718      	bx	r3
 801c654:	4770      	bx	lr
 801c656:	bf00      	nop
 801c658:	24015e18 	.word	0x24015e18

0801c65c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c65c:	4b03      	ldr	r3, [pc, #12]	@ (801c66c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c65e:	6818      	ldr	r0, [r3, #0]
 801c660:	b110      	cbz	r0, 801c668 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c662:	6803      	ldr	r3, [r0, #0]
 801c664:	6a1b      	ldr	r3, [r3, #32]
 801c666:	4718      	bx	r3
 801c668:	4770      	bx	lr
 801c66a:	bf00      	nop
 801c66c:	24015e18 	.word	0x24015e18

0801c670 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801c670:	2300      	movs	r3, #0
 801c672:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801c676:	4770      	bx	lr

0801c678 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c678:	4b03      	ldr	r3, [pc, #12]	@ (801c688 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c67a:	6818      	ldr	r0, [r3, #0]
 801c67c:	b110      	cbz	r0, 801c684 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c67e:	6803      	ldr	r3, [r0, #0]
 801c680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c682:	4718      	bx	r3
 801c684:	4770      	bx	lr
 801c686:	bf00      	nop
 801c688:	24015e18 	.word	0x24015e18

0801c68c <_ZN8touchgfx11ApplicationD1Ev>:
 801c68c:	4770      	bx	lr

0801c68e <_ZN8touchgfx11ApplicationD0Ev>:
 801c68e:	b510      	push	{r4, lr}
 801c690:	4604      	mov	r4, r0
 801c692:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801c696:	f00d ff23 	bl	802a4e0 <_ZdlPvj>
 801c69a:	4620      	mov	r0, r4
 801c69c:	bd10      	pop	{r4, pc}

0801c69e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c69e:	b510      	push	{r4, lr}
 801c6a0:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c6a4:	888a      	ldrh	r2, [r1, #4]
 801c6a6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c6aa:	4422      	add	r2, r4
 801c6ac:	b212      	sxth	r2, r2
 801c6ae:	4293      	cmp	r3, r2
 801c6b0:	da15      	bge.n	801c6de <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c6b2:	8882      	ldrh	r2, [r0, #4]
 801c6b4:	4413      	add	r3, r2
 801c6b6:	b21b      	sxth	r3, r3
 801c6b8:	429c      	cmp	r4, r3
 801c6ba:	da10      	bge.n	801c6de <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c6bc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c6c0:	88c9      	ldrh	r1, [r1, #6]
 801c6c2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c6c6:	4419      	add	r1, r3
 801c6c8:	b209      	sxth	r1, r1
 801c6ca:	428a      	cmp	r2, r1
 801c6cc:	da07      	bge.n	801c6de <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c6ce:	88c0      	ldrh	r0, [r0, #6]
 801c6d0:	4410      	add	r0, r2
 801c6d2:	b200      	sxth	r0, r0
 801c6d4:	4283      	cmp	r3, r0
 801c6d6:	bfac      	ite	ge
 801c6d8:	2000      	movge	r0, #0
 801c6da:	2001      	movlt	r0, #1
 801c6dc:	bd10      	pop	{r4, pc}
 801c6de:	2000      	movs	r0, #0
 801c6e0:	e7fc      	b.n	801c6dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c6e2 <_ZN8touchgfx4Rect10restrictToEss>:
 801c6e2:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	b510      	push	{r4, lr}
 801c6ea:	da04      	bge.n	801c6f6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801c6ec:	8884      	ldrh	r4, [r0, #4]
 801c6ee:	4423      	add	r3, r4
 801c6f0:	8083      	strh	r3, [r0, #4]
 801c6f2:	2300      	movs	r3, #0
 801c6f4:	8003      	strh	r3, [r0, #0]
 801c6f6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c6fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c6fe:	1b09      	subs	r1, r1, r4
 801c700:	428b      	cmp	r3, r1
 801c702:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c706:	bfc8      	it	gt
 801c708:	8081      	strhgt	r1, [r0, #4]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	da04      	bge.n	801c718 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801c70e:	88c1      	ldrh	r1, [r0, #6]
 801c710:	440b      	add	r3, r1
 801c712:	80c3      	strh	r3, [r0, #6]
 801c714:	2300      	movs	r3, #0
 801c716:	8043      	strh	r3, [r0, #2]
 801c718:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c71c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c720:	1a52      	subs	r2, r2, r1
 801c722:	4293      	cmp	r3, r2
 801c724:	bfc8      	it	gt
 801c726:	80c2      	strhgt	r2, [r0, #6]
 801c728:	bd10      	pop	{r4, pc}
	...

0801c72c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c72c:	4b10      	ldr	r3, [pc, #64]	@ (801c770 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801c72e:	b510      	push	{r4, lr}
 801c730:	460c      	mov	r4, r1
 801c732:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c736:	4b0f      	ldr	r3, [pc, #60]	@ (801c774 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801c738:	4620      	mov	r0, r4
 801c73a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c73e:	f7ff ffd0 	bl	801c6e2 <_ZN8touchgfx4Rect10restrictToEss>
 801c742:	4b0d      	ldr	r3, [pc, #52]	@ (801c778 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801c744:	6818      	ldr	r0, [r3, #0]
 801c746:	b190      	cbz	r0, 801c76e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801c748:	6803      	ldr	r3, [r0, #0]
 801c74a:	4621      	mov	r1, r4
 801c74c:	689b      	ldr	r3, [r3, #8]
 801c74e:	4798      	blx	r3
 801c750:	4b0a      	ldr	r3, [pc, #40]	@ (801c77c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801c752:	6818      	ldr	r0, [r3, #0]
 801c754:	b118      	cbz	r0, 801c75e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801c756:	6803      	ldr	r3, [r0, #0]
 801c758:	4621      	mov	r1, r4
 801c75a:	689b      	ldr	r3, [r3, #8]
 801c75c:	4798      	blx	r3
 801c75e:	4b08      	ldr	r3, [pc, #32]	@ (801c780 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801c760:	4621      	mov	r1, r4
 801c762:	6818      	ldr	r0, [r3, #0]
 801c764:	6803      	ldr	r3, [r0, #0]
 801c766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c76a:	69db      	ldr	r3, [r3, #28]
 801c76c:	4718      	bx	r3
 801c76e:	bd10      	pop	{r4, pc}
 801c770:	24015dca 	.word	0x24015dca
 801c774:	24015dc8 	.word	0x24015dc8
 801c778:	24015e18 	.word	0x24015e18
 801c77c:	24015e14 	.word	0x24015e14
 801c780:	24015dd4 	.word	0x24015dd4

0801c784 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c786:	4606      	mov	r6, r0
 801c788:	4608      	mov	r0, r1
 801c78a:	460f      	mov	r7, r1
 801c78c:	f7fb fd23 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c790:	b9e8      	cbnz	r0, 801c7ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c792:	f9b7 5000 	ldrsh.w	r5, [r7]
 801c796:	f9b6 4000 	ldrsh.w	r4, [r6]
 801c79a:	42a5      	cmp	r5, r4
 801c79c:	db17      	blt.n	801c7ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c79e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c7a2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801c7a6:	429a      	cmp	r2, r3
 801c7a8:	db11      	blt.n	801c7ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c7aa:	88b9      	ldrh	r1, [r7, #4]
 801c7ac:	440d      	add	r5, r1
 801c7ae:	88b1      	ldrh	r1, [r6, #4]
 801c7b0:	440c      	add	r4, r1
 801c7b2:	b22d      	sxth	r5, r5
 801c7b4:	b224      	sxth	r4, r4
 801c7b6:	42a5      	cmp	r5, r4
 801c7b8:	dc09      	bgt.n	801c7ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c7ba:	88f8      	ldrh	r0, [r7, #6]
 801c7bc:	4410      	add	r0, r2
 801c7be:	88f2      	ldrh	r2, [r6, #6]
 801c7c0:	4413      	add	r3, r2
 801c7c2:	b200      	sxth	r0, r0
 801c7c4:	b21b      	sxth	r3, r3
 801c7c6:	4298      	cmp	r0, r3
 801c7c8:	bfcc      	ite	gt
 801c7ca:	2000      	movgt	r0, #0
 801c7cc:	2001      	movle	r0, #1
 801c7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c7d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7d2:	4604      	mov	r4, r0
 801c7d4:	4608      	mov	r0, r1
 801c7d6:	460d      	mov	r5, r1
 801c7d8:	f7fb fcfd 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c7dc:	b978      	cbnz	r0, 801c7fe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801c7de:	4620      	mov	r0, r4
 801c7e0:	f7fb fcf9 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c7e4:	f9b5 6000 	ldrsh.w	r6, [r5]
 801c7e8:	b150      	cbz	r0, 801c800 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801c7ea:	8026      	strh	r6, [r4, #0]
 801c7ec:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c7f0:	8063      	strh	r3, [r4, #2]
 801c7f2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801c7f6:	80a3      	strh	r3, [r4, #4]
 801c7f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c7fc:	80e3      	strh	r3, [r4, #6]
 801c7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c800:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c804:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c808:	42b1      	cmp	r1, r6
 801c80a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c80e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801c812:	460f      	mov	r7, r1
 801c814:	88ed      	ldrh	r5, [r5, #6]
 801c816:	bfa8      	it	ge
 801c818:	4637      	movge	r7, r6
 801c81a:	4293      	cmp	r3, r2
 801c81c:	4618      	mov	r0, r3
 801c81e:	4466      	add	r6, ip
 801c820:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c824:	bfa8      	it	ge
 801c826:	4610      	movge	r0, r2
 801c828:	442a      	add	r2, r5
 801c82a:	88e5      	ldrh	r5, [r4, #6]
 801c82c:	4461      	add	r1, ip
 801c82e:	b236      	sxth	r6, r6
 801c830:	8027      	strh	r7, [r4, #0]
 801c832:	442b      	add	r3, r5
 801c834:	b209      	sxth	r1, r1
 801c836:	b212      	sxth	r2, r2
 801c838:	8060      	strh	r0, [r4, #2]
 801c83a:	b21b      	sxth	r3, r3
 801c83c:	428e      	cmp	r6, r1
 801c83e:	bfac      	ite	ge
 801c840:	ebc7 0106 	rsbge	r1, r7, r6
 801c844:	ebc7 0101 	rsblt	r1, r7, r1
 801c848:	429a      	cmp	r2, r3
 801c84a:	bfac      	ite	ge
 801c84c:	ebc0 0202 	rsbge	r2, r0, r2
 801c850:	ebc0 0203 	rsblt	r2, r0, r3
 801c854:	80a1      	strh	r1, [r4, #4]
 801c856:	80e2      	strh	r2, [r4, #6]
 801c858:	e7d1      	b.n	801c7fe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c85c <_ZN8touchgfx11Application11getInstanceEv>:
 801c85c:	4b01      	ldr	r3, [pc, #4]	@ (801c864 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c85e:	6818      	ldr	r0, [r3, #0]
 801c860:	4770      	bx	lr
 801c862:	bf00      	nop
 801c864:	24015e28 	.word	0x24015e28

0801c868 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801c868:	2300      	movs	r3, #0
 801c86a:	b510      	push	{r4, lr}
 801c86c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801c870:	4604      	mov	r4, r0
 801c872:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801c876:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801c87a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801c87e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801c882:	429a      	cmp	r2, r3
 801c884:	d90e      	bls.n	801c8a4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801c886:	18e2      	adds	r2, r4, r3
 801c888:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801c88c:	b122      	cbz	r2, 801c898 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801c88e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801c892:	6803      	ldr	r3, [r0, #0]
 801c894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c896:	4798      	blx	r3
 801c898:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801c89c:	3301      	adds	r3, #1
 801c89e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801c8a2:	e7ea      	b.n	801c87a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801c8a4:	bd10      	pop	{r4, pc}

0801c8a6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801c8a6:	2300      	movs	r3, #0
 801c8a8:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801c8ac:	30a4      	adds	r0, #164	@ 0xa4
 801c8ae:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c8b2:	f802 3b01 	strb.w	r3, [r2], #1
 801c8b6:	4282      	cmp	r2, r0
 801c8b8:	d1fb      	bne.n	801c8b2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801c8ba:	4770      	bx	lr

0801c8bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c8bc:	b570      	push	{r4, r5, r6, lr}
 801c8be:	4c0b      	ldr	r4, [pc, #44]	@ (801c8ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801c8c0:	4605      	mov	r5, r0
 801c8c2:	460e      	mov	r6, r1
 801c8c4:	6820      	ldr	r0, [r4, #0]
 801c8c6:	b110      	cbz	r0, 801c8ce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801c8c8:	6803      	ldr	r3, [r0, #0]
 801c8ca:	695b      	ldr	r3, [r3, #20]
 801c8cc:	4798      	blx	r3
 801c8ce:	1d28      	adds	r0, r5, #4
 801c8d0:	f7ff ffe9 	bl	801c8a6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801c8d4:	6026      	str	r6, [r4, #0]
 801c8d6:	6833      	ldr	r3, [r6, #0]
 801c8d8:	4630      	mov	r0, r6
 801c8da:	68db      	ldr	r3, [r3, #12]
 801c8dc:	4798      	blx	r3
 801c8de:	682b      	ldr	r3, [r5, #0]
 801c8e0:	4628      	mov	r0, r5
 801c8e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8e8:	4718      	bx	r3
 801c8ea:	bf00      	nop
 801c8ec:	24015e18 	.word	0x24015e18

0801c8f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801c8f6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801c8fa:	461a      	mov	r2, r3
 801c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8fe:	461c      	mov	r4, r3
 801c900:	461d      	mov	r5, r3
 801c902:	459c      	cmp	ip, r3
 801c904:	dd1a      	ble.n	801c93c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801c906:	18c6      	adds	r6, r0, r3
 801c908:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801c90c:	b16e      	cbz	r6, 801c92a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801c90e:	429a      	cmp	r2, r3
 801c910:	d008      	beq.n	801c924 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801c912:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801c916:	fa1f fe82 	uxth.w	lr, r2
 801c91a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801c91e:	1887      	adds	r7, r0, r2
 801c920:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801c924:	3201      	adds	r2, #1
 801c926:	3301      	adds	r3, #1
 801c928:	e7eb      	b.n	801c902 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801c92a:	4299      	cmp	r1, r3
 801c92c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801c930:	bfa8      	it	ge
 801c932:	3501      	addge	r5, #1
 801c934:	429e      	cmp	r6, r3
 801c936:	bfc8      	it	gt
 801c938:	3401      	addgt	r4, #1
 801c93a:	e7f4      	b.n	801c926 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801c93c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801c940:	1b49      	subs	r1, r1, r5
 801c942:	1b1b      	subs	r3, r3, r4
 801c944:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801c948:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801c94c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801c950:	4293      	cmp	r3, r2
 801c952:	dd03      	ble.n	801c95c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801c954:	3b01      	subs	r3, #1
 801c956:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801c95a:	e7f7      	b.n	801c94c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801c95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c960 <_ZN8touchgfx11Application15handleTickEventEv>:
 801c960:	b570      	push	{r4, r5, r6, lr}
 801c962:	4d16      	ldr	r5, [pc, #88]	@ (801c9bc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801c964:	4604      	mov	r4, r0
 801c966:	6828      	ldr	r0, [r5, #0]
 801c968:	b140      	cbz	r0, 801c97c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801c96a:	7a03      	ldrb	r3, [r0, #8]
 801c96c:	b933      	cbnz	r3, 801c97c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801c96e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801c972:	6803      	ldr	r3, [r0, #0]
 801c974:	689b      	ldr	r3, [r3, #8]
 801c976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c97a:	4718      	bx	r3
 801c97c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801c980:	4e0f      	ldr	r6, [pc, #60]	@ (801c9c0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801c982:	b973      	cbnz	r3, 801c9a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c984:	b168      	cbz	r0, 801c9a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c986:	7a03      	ldrb	r3, [r0, #8]
 801c988:	b15b      	cbz	r3, 801c9a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c98a:	6830      	ldr	r0, [r6, #0]
 801c98c:	b110      	cbz	r0, 801c994 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801c98e:	6803      	ldr	r3, [r0, #0]
 801c990:	691b      	ldr	r3, [r3, #16]
 801c992:	4798      	blx	r3
 801c994:	6828      	ldr	r0, [r5, #0]
 801c996:	6803      	ldr	r3, [r0, #0]
 801c998:	68db      	ldr	r3, [r3, #12]
 801c99a:	4798      	blx	r3
 801c99c:	2301      	movs	r3, #1
 801c99e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801c9a2:	3404      	adds	r4, #4
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	f7ff ff5f 	bl	801c868 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801c9aa:	4620      	mov	r0, r4
 801c9ac:	f7ff ffa0 	bl	801c8f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801c9b0:	6830      	ldr	r0, [r6, #0]
 801c9b2:	b110      	cbz	r0, 801c9ba <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801c9b4:	6803      	ldr	r3, [r0, #0]
 801c9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c9b8:	e7dd      	b.n	801c976 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801c9ba:	bd70      	pop	{r4, r5, r6, pc}
 801c9bc:	24015e1c 	.word	0x24015e1c
 801c9c0:	24015e18 	.word	0x24015e18

0801c9c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c9c4:	4603      	mov	r3, r0
 801c9c6:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	801a      	strh	r2, [r3, #0]
 801c9ce:	3308      	adds	r3, #8
 801c9d0:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c9d4:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c9d8:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c9dc:	428b      	cmp	r3, r1
 801c9de:	d1f5      	bne.n	801c9cc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c9e0:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801c9e4:	4770      	bx	lr
	...

0801c9e8 <_ZN8touchgfx11ApplicationC1Ev>:
 801c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ea:	4b1d      	ldr	r3, [pc, #116]	@ (801ca60 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c9ec:	4606      	mov	r6, r0
 801c9ee:	4604      	mov	r4, r0
 801c9f0:	2500      	movs	r5, #0
 801c9f2:	f846 3b04 	str.w	r3, [r6], #4
 801c9f6:	22a8      	movs	r2, #168	@ 0xa8
 801c9f8:	2100      	movs	r1, #0
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	f00e fba4 	bl	802b148 <memset>
 801ca00:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801ca04:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801ca08:	4f16      	ldr	r7, [pc, #88]	@ (801ca64 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ca0a:	f7ff ffdb 	bl	801c9c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ca0e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801ca12:	f7ff ffd7 	bl	801c9c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ca16:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801ca1a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801ca1e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801ca22:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801ca26:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801ca2a:	490f      	ldr	r1, [pc, #60]	@ (801ca68 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ca2c:	480f      	ldr	r0, [pc, #60]	@ (801ca6c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ca2e:	f00c fec7 	bl	80297c0 <CRC_Lock>
 801ca32:	4b0f      	ldr	r3, [pc, #60]	@ (801ca70 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801ca34:	b158      	cbz	r0, 801ca4e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801ca36:	801d      	strh	r5, [r3, #0]
 801ca38:	2300      	movs	r3, #0
 801ca3a:	4a0e      	ldr	r2, [pc, #56]	@ (801ca74 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801ca3c:	4630      	mov	r0, r6
 801ca3e:	6013      	str	r3, [r2, #0]
 801ca40:	4a0d      	ldr	r2, [pc, #52]	@ (801ca78 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801ca42:	603b      	str	r3, [r7, #0]
 801ca44:	6013      	str	r3, [r2, #0]
 801ca46:	f7ff ff2e 	bl	801c8a6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801ca4a:	4620      	mov	r0, r4
 801ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ca52:	2002      	movs	r0, #2
 801ca54:	801a      	strh	r2, [r3, #0]
 801ca56:	6038      	str	r0, [r7, #0]
 801ca58:	f001 fd7c 	bl	801e554 <_ZN8touchgfx6Screen4drawEv>
 801ca5c:	e7ec      	b.n	801ca38 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801ca5e:	bf00      	nop
 801ca60:	0803089c 	.word	0x0803089c
 801ca64:	24015e18 	.word	0x24015e18
 801ca68:	b5e8b5cd 	.word	0xb5e8b5cd
 801ca6c:	f407a5c2 	.word	0xf407a5c2
 801ca70:	24000050 	.word	0x24000050
 801ca74:	24015e28 	.word	0x24015e28
 801ca78:	24015e1c 	.word	0x24015e1c

0801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ca7c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801ca80:	3b01      	subs	r3, #1
 801ca82:	b29b      	uxth	r3, r3
 801ca84:	428b      	cmp	r3, r1
 801ca86:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801ca8a:	b510      	push	{r4, lr}
 801ca8c:	d908      	bls.n	801caa0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801ca8e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ca92:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ca96:	681a      	ldr	r2, [r3, #0]
 801ca98:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ca9c:	685a      	ldr	r2, [r3, #4]
 801ca9e:	6062      	str	r2, [r4, #4]
 801caa0:	bd10      	pop	{r4, pc}
	...

0801caa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa8:	b08f      	sub	sp, #60	@ 0x3c
 801caaa:	4b8f      	ldr	r3, [pc, #572]	@ (801cce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801caac:	4683      	mov	fp, r0
 801caae:	ac0a      	add	r4, sp, #40	@ 0x28
 801cab0:	e884 0006 	stmia.w	r4, {r1, r2}
 801cab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cab8:	4620      	mov	r0, r4
 801caba:	4b8c      	ldr	r3, [pc, #560]	@ (801ccec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801cabc:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cac0:	f7ff fe0f 	bl	801c6e2 <_ZN8touchgfx4Rect10restrictToEss>
 801cac4:	4620      	mov	r0, r4
 801cac6:	f7fb fb86 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801caca:	2800      	cmp	r0, #0
 801cacc:	d16a      	bne.n	801cba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cace:	9403      	str	r4, [sp, #12]
 801cad0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801cad4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801cad8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801cadc:	9301      	str	r3, [sp, #4]
 801cade:	35a4      	adds	r5, #164	@ 0xa4
 801cae0:	b15c      	cbz	r4, 801cafa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801cae2:	4629      	mov	r1, r5
 801cae4:	9803      	ldr	r0, [sp, #12]
 801cae6:	f7ff fe4d 	bl	801c784 <_ZNK8touchgfx4Rect8includesERKS0_>
 801caea:	3c01      	subs	r4, #1
 801caec:	b118      	cbz	r0, 801caf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801caee:	b2a1      	uxth	r1, r4
 801caf0:	9801      	ldr	r0, [sp, #4]
 801caf2:	f7ff ffc3 	bl	801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801caf6:	3d08      	subs	r5, #8
 801caf8:	e7f2      	b.n	801cae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801cafa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801cafe:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cb02:	f8cd a010 	str.w	sl, [sp, #16]
 801cb06:	9302      	str	r3, [sp, #8]
 801cb08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801cb0c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801cb10:	9306      	str	r3, [sp, #24]
 801cb12:	445c      	add	r4, fp
 801cb14:	2500      	movs	r5, #0
 801cb16:	4626      	mov	r6, r4
 801cb18:	f8cd a014 	str.w	sl, [sp, #20]
 801cb1c:	462f      	mov	r7, r5
 801cb1e:	9b05      	ldr	r3, [sp, #20]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d073      	beq.n	801cc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801cb24:	9903      	ldr	r1, [sp, #12]
 801cb26:	4630      	mov	r0, r6
 801cb28:	f7ff fdb9 	bl	801c69e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cb2c:	b350      	cbz	r0, 801cb84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801cb2e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801cb32:	f9b6 c000 	ldrsh.w	ip, [r6]
 801cb36:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801cb3a:	45e6      	cmp	lr, ip
 801cb3c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801cb40:	db33      	blt.n	801cbaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801cb42:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801cb46:	88b3      	ldrh	r3, [r6, #4]
 801cb48:	4472      	add	r2, lr
 801cb4a:	4463      	add	r3, ip
 801cb4c:	b212      	sxth	r2, r2
 801cb4e:	b21b      	sxth	r3, r3
 801cb50:	429a      	cmp	r2, r3
 801cb52:	dc2a      	bgt.n	801cbaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801cb54:	fa1f f289 	uxth.w	r2, r9
 801cb58:	88f3      	ldrh	r3, [r6, #6]
 801cb5a:	45c8      	cmp	r8, r9
 801cb5c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801cb60:	4413      	add	r3, r2
 801cb62:	fa1f fc88 	uxth.w	ip, r8
 801cb66:	b29b      	uxth	r3, r3
 801cb68:	fa0f fe83 	sxth.w	lr, r3
 801cb6c:	db0f      	blt.n	801cb8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801cb6e:	eba3 030c 	sub.w	r3, r3, ip
 801cb72:	1ac9      	subs	r1, r1, r3
 801cb74:	b209      	sxth	r1, r1
 801cb76:	2900      	cmp	r1, #0
 801cb78:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801cb7c:	dd12      	ble.n	801cba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cb7e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801cb82:	4605      	mov	r5, r0
 801cb84:	9b05      	ldr	r3, [sp, #20]
 801cb86:	3e08      	subs	r6, #8
 801cb88:	3b01      	subs	r3, #1
 801cb8a:	9305      	str	r3, [sp, #20]
 801cb8c:	e7c7      	b.n	801cb1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801cb8e:	4461      	add	r1, ip
 801cb90:	b209      	sxth	r1, r1
 801cb92:	4571      	cmp	r1, lr
 801cb94:	dc38      	bgt.n	801cc08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cb96:	eba2 020c 	sub.w	r2, r2, ip
 801cb9a:	b212      	sxth	r2, r2
 801cb9c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801cba0:	2a00      	cmp	r2, #0
 801cba2:	dcee      	bgt.n	801cb82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801cba4:	b00f      	add	sp, #60	@ 0x3c
 801cba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbaa:	45c8      	cmp	r8, r9
 801cbac:	db2c      	blt.n	801cc08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cbae:	88f3      	ldrh	r3, [r6, #6]
 801cbb0:	4499      	add	r9, r3
 801cbb2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801cbb6:	4498      	add	r8, r3
 801cbb8:	fa0f f989 	sxth.w	r9, r9
 801cbbc:	fa0f f888 	sxth.w	r8, r8
 801cbc0:	45c1      	cmp	r9, r8
 801cbc2:	db21      	blt.n	801cc08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cbc4:	fa1f f28c 	uxth.w	r2, ip
 801cbc8:	88b3      	ldrh	r3, [r6, #4]
 801cbca:	45e6      	cmp	lr, ip
 801cbcc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801cbd0:	4413      	add	r3, r2
 801cbd2:	fa1f f88e 	uxth.w	r8, lr
 801cbd6:	b29b      	uxth	r3, r3
 801cbd8:	fa0f f983 	sxth.w	r9, r3
 801cbdc:	db0a      	blt.n	801cbf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801cbde:	eba3 0308 	sub.w	r3, r3, r8
 801cbe2:	1ac9      	subs	r1, r1, r3
 801cbe4:	b209      	sxth	r1, r1
 801cbe6:	2900      	cmp	r1, #0
 801cbe8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801cbec:	ddda      	ble.n	801cba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cbee:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801cbf2:	e7c6      	b.n	801cb82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801cbf4:	4441      	add	r1, r8
 801cbf6:	b209      	sxth	r1, r1
 801cbf8:	4549      	cmp	r1, r9
 801cbfa:	dc05      	bgt.n	801cc08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801cbfc:	eba2 0208 	sub.w	r2, r2, r8
 801cc00:	b212      	sxth	r2, r2
 801cc02:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801cc06:	e7cb      	b.n	801cba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801cc08:	4607      	mov	r7, r0
 801cc0a:	e7bb      	b.n	801cb84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801cc0c:	2d00      	cmp	r5, #0
 801cc0e:	d181      	bne.n	801cb14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801cc10:	2f00      	cmp	r7, #0
 801cc12:	f000 81dd 	beq.w	801cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801cc16:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801cc1a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801cc1e:	b2b3      	uxth	r3, r6
 801cc20:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801cc24:	9305      	str	r3, [sp, #20]
 801cc26:	9a05      	ldr	r2, [sp, #20]
 801cc28:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801cc2c:	4413      	add	r3, r2
 801cc2e:	b2ba      	uxth	r2, r7
 801cc30:	4492      	add	sl, r2
 801cc32:	b29b      	uxth	r3, r3
 801cc34:	fa1f fa8a 	uxth.w	sl, sl
 801cc38:	fa0f f883 	sxth.w	r8, r3
 801cc3c:	fa0f f98a 	sxth.w	r9, sl
 801cc40:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801cc44:	9b04      	ldr	r3, [sp, #16]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d052      	beq.n	801ccf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801cc4a:	9903      	ldr	r1, [sp, #12]
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f7ff fd26 	bl	801c69e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cc52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cc56:	b1c0      	cbz	r0, 801cc8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801cc58:	f9b4 e000 	ldrsh.w	lr, [r4]
 801cc5c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801cc60:	4576      	cmp	r6, lr
 801cc62:	dc22      	bgt.n	801ccaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801cc64:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801cc68:	44f4      	add	ip, lr
 801cc6a:	fa0f fc8c 	sxth.w	ip, ip
 801cc6e:	45e0      	cmp	r8, ip
 801cc70:	db1b      	blt.n	801ccaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801cc72:	428f      	cmp	r7, r1
 801cc74:	fa1f fc81 	uxth.w	ip, r1
 801cc78:	88e1      	ldrh	r1, [r4, #6]
 801cc7a:	dc0d      	bgt.n	801cc98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801cc7c:	ebaa 0c0c 	sub.w	ip, sl, ip
 801cc80:	f8a4 9002 	strh.w	r9, [r4, #2]
 801cc84:	eba1 010c 	sub.w	r1, r1, ip
 801cc88:	80e1      	strh	r1, [r4, #6]
 801cc8a:	4628      	mov	r0, r5
 801cc8c:	9904      	ldr	r1, [sp, #16]
 801cc8e:	3c08      	subs	r4, #8
 801cc90:	4605      	mov	r5, r0
 801cc92:	3901      	subs	r1, #1
 801cc94:	9104      	str	r1, [sp, #16]
 801cc96:	e7d3      	b.n	801cc40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801cc98:	4461      	add	r1, ip
 801cc9a:	b209      	sxth	r1, r1
 801cc9c:	4549      	cmp	r1, r9
 801cc9e:	dcf5      	bgt.n	801cc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801cca0:	eba2 0c0c 	sub.w	ip, r2, ip
 801cca4:	f8a4 c006 	strh.w	ip, [r4, #6]
 801cca8:	e7ef      	b.n	801cc8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ccaa:	428f      	cmp	r7, r1
 801ccac:	dcee      	bgt.n	801cc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ccae:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801ccb2:	4461      	add	r1, ip
 801ccb4:	b209      	sxth	r1, r1
 801ccb6:	4589      	cmp	r9, r1
 801ccb8:	dbe8      	blt.n	801cc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ccba:	4576      	cmp	r6, lr
 801ccbc:	fa1f fc8e 	uxth.w	ip, lr
 801ccc0:	88a1      	ldrh	r1, [r4, #4]
 801ccc2:	dc07      	bgt.n	801ccd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801ccc4:	eba3 0c0c 	sub.w	ip, r3, ip
 801ccc8:	f8a4 8000 	strh.w	r8, [r4]
 801cccc:	eba1 010c 	sub.w	r1, r1, ip
 801ccd0:	80a1      	strh	r1, [r4, #4]
 801ccd2:	e7da      	b.n	801cc8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ccd4:	4461      	add	r1, ip
 801ccd6:	b209      	sxth	r1, r1
 801ccd8:	4588      	cmp	r8, r1
 801ccda:	dbd7      	blt.n	801cc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ccdc:	9905      	ldr	r1, [sp, #20]
 801ccde:	eba1 0c0c 	sub.w	ip, r1, ip
 801cce2:	f8a4 c004 	strh.w	ip, [r4, #4]
 801cce6:	e7d0      	b.n	801cc8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801cce8:	24015dca 	.word	0x24015dca
 801ccec:	24015dc8 	.word	0x24015dc8
 801ccf0:	2d00      	cmp	r5, #0
 801ccf2:	f000 816d 	beq.w	801cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ccf6:	9b06      	ldr	r3, [sp, #24]
 801ccf8:	445b      	add	r3, fp
 801ccfa:	461c      	mov	r4, r3
 801ccfc:	9b02      	ldr	r3, [sp, #8]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	f000 8166 	beq.w	801cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801cd04:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801cd08:	9803      	ldr	r0, [sp, #12]
 801cd0a:	4629      	mov	r1, r5
 801cd0c:	f7ff fd3a 	bl	801c784 <_ZNK8touchgfx4Rect8includesERKS0_>
 801cd10:	b120      	cbz	r0, 801cd1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801cd12:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cd16:	9801      	ldr	r0, [sp, #4]
 801cd18:	f7ff feb0 	bl	801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cd1c:	9903      	ldr	r1, [sp, #12]
 801cd1e:	4628      	mov	r0, r5
 801cd20:	f7ff fcbd 	bl	801c69e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cd24:	2800      	cmp	r0, #0
 801cd26:	f000 809c 	beq.w	801ce62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801cd2a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801cd2e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801cd32:	fa1f f189 	uxth.w	r1, r9
 801cd36:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801cd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd3c:	eb01 0c03 	add.w	ip, r1, r3
 801cd40:	b283      	uxth	r3, r0
 801cd42:	4548      	cmp	r0, r9
 801cd44:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801cd48:	fa1f fa8c 	uxth.w	sl, ip
 801cd4c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801cd50:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801cd54:	eb03 050c 	add.w	r5, r3, ip
 801cd58:	b2ad      	uxth	r5, r5
 801cd5a:	9505      	str	r5, [sp, #20]
 801cd5c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801cd60:	9504      	str	r5, [sp, #16]
 801cd62:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801cd66:	f340 8099 	ble.w	801ce9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801cd6a:	1a5b      	subs	r3, r3, r1
 801cd6c:	4596      	cmp	lr, r2
 801cd6e:	fa0f f08a 	sxth.w	r0, sl
 801cd72:	b29b      	uxth	r3, r3
 801cd74:	b21e      	sxth	r6, r3
 801cd76:	dd2e      	ble.n	801cdd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801cd78:	9f02      	ldr	r7, [sp, #8]
 801cd7a:	fa1f fe8e 	uxth.w	lr, lr
 801cd7e:	b292      	uxth	r2, r2
 801cd80:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801cd84:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801cd88:	9f04      	ldr	r7, [sp, #16]
 801cd8a:	ebae 0102 	sub.w	r1, lr, r2
 801cd8e:	44a6      	add	lr, r4
 801cd90:	1a3f      	subs	r7, r7, r0
 801cd92:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801cd96:	b289      	uxth	r1, r1
 801cd98:	4402      	add	r2, r0
 801cd9a:	fa0f fe8e 	sxth.w	lr, lr
 801cd9e:	b20d      	sxth	r5, r1
 801cda0:	b212      	sxth	r2, r2
 801cda2:	436f      	muls	r7, r5
 801cda4:	ebae 0202 	sub.w	r2, lr, r2
 801cda8:	4372      	muls	r2, r6
 801cdaa:	4297      	cmp	r7, r2
 801cdac:	db09      	blt.n	801cdc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801cdae:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801cdb2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801cdb6:	449c      	add	ip, r3
 801cdb8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801cdbc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801cdc0:	e686      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cdc2:	4421      	add	r1, r4
 801cdc4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801cdc8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801cdcc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801cdd0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801cdd4:	e67c      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cdd6:	9f04      	ldr	r7, [sp, #16]
 801cdd8:	42b8      	cmp	r0, r7
 801cdda:	da27      	bge.n	801ce2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801cddc:	9902      	ldr	r1, [sp, #8]
 801cdde:	1a3f      	subs	r7, r7, r0
 801cde0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801cde4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801cde8:	eb05 010e 	add.w	r1, r5, lr
 801cdec:	fa1f f881 	uxth.w	r8, r1
 801cdf0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801cdf4:	4411      	add	r1, r2
 801cdf6:	fa0f f988 	sxth.w	r9, r8
 801cdfa:	eba2 020e 	sub.w	r2, r2, lr
 801cdfe:	eba1 0108 	sub.w	r1, r1, r8
 801ce02:	4372      	muls	r2, r6
 801ce04:	b289      	uxth	r1, r1
 801ce06:	fa0f f881 	sxth.w	r8, r1
 801ce0a:	fb08 f707 	mul.w	r7, r8, r7
 801ce0e:	42ba      	cmp	r2, r7
 801ce10:	dc06      	bgt.n	801ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801ce12:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801ce16:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801ce1a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801ce1e:	e7ca      	b.n	801cdb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801ce20:	4429      	add	r1, r5
 801ce22:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801ce26:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ce2a:	e651      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ce2c:	9805      	ldr	r0, [sp, #20]
 801ce2e:	2d06      	cmp	r5, #6
 801ce30:	ebaa 0000 	sub.w	r0, sl, r0
 801ce34:	b280      	uxth	r0, r0
 801ce36:	fa0f fe80 	sxth.w	lr, r0
 801ce3a:	d817      	bhi.n	801ce6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801ce3c:	9b04      	ldr	r3, [sp, #16]
 801ce3e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801ce42:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801ce46:	1c6b      	adds	r3, r5, #1
 801ce48:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801ce4c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801ce50:	9b01      	ldr	r3, [sp, #4]
 801ce52:	9801      	ldr	r0, [sp, #4]
 801ce54:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ce58:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801ce5c:	805a      	strh	r2, [r3, #2]
 801ce5e:	809e      	strh	r6, [r3, #4]
 801ce60:	80d9      	strh	r1, [r3, #6]
 801ce62:	9b02      	ldr	r3, [sp, #8]
 801ce64:	3c08      	subs	r4, #8
 801ce66:	3b01      	subs	r3, #1
 801ce68:	9302      	str	r3, [sp, #8]
 801ce6a:	e747      	b.n	801ccfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801ce6c:	9a02      	ldr	r2, [sp, #8]
 801ce6e:	45b6      	cmp	lr, r6
 801ce70:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ce74:	db0d      	blt.n	801ce92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ce76:	449c      	add	ip, r3
 801ce78:	445a      	add	r2, fp
 801ce7a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801ce7e:	fa1f fc8c 	uxth.w	ip, ip
 801ce82:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801ce86:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801ce8a:	448c      	add	ip, r1
 801ce8c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801ce90:	e61e      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ce92:	445a      	add	r2, fp
 801ce94:	4484      	add	ip, r0
 801ce96:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801ce9a:	e78f      	b.n	801cdbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801ce9c:	fa1f f18e 	uxth.w	r1, lr
 801cea0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801cea4:	b293      	uxth	r3, r2
 801cea6:	4596      	cmp	lr, r2
 801cea8:	eb01 0806 	add.w	r8, r1, r6
 801ceac:	9306      	str	r3, [sp, #24]
 801ceae:	fa1f f888 	uxth.w	r8, r8
 801ceb2:	9f06      	ldr	r7, [sp, #24]
 801ceb4:	fa0f f388 	sxth.w	r3, r8
 801ceb8:	9307      	str	r3, [sp, #28]
 801ceba:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801cebe:	443b      	add	r3, r7
 801cec0:	b29b      	uxth	r3, r3
 801cec2:	9308      	str	r3, [sp, #32]
 801cec4:	da24      	bge.n	801cf10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801cec6:	9905      	ldr	r1, [sp, #20]
 801cec8:	eba3 0308 	sub.w	r3, r3, r8
 801cecc:	eba2 020e 	sub.w	r2, r2, lr
 801ced0:	eba9 0000 	sub.w	r0, r9, r0
 801ced4:	ebaa 0401 	sub.w	r4, sl, r1
 801ced8:	b29b      	uxth	r3, r3
 801ceda:	b2a4      	uxth	r4, r4
 801cedc:	b219      	sxth	r1, r3
 801cede:	b225      	sxth	r5, r4
 801cee0:	4348      	muls	r0, r1
 801cee2:	436a      	muls	r2, r5
 801cee4:	4282      	cmp	r2, r0
 801cee6:	9a02      	ldr	r2, [sp, #8]
 801cee8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ceec:	445a      	add	r2, fp
 801ceee:	dc06      	bgt.n	801cefe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801cef0:	9b07      	ldr	r3, [sp, #28]
 801cef2:	44a4      	add	ip, r4
 801cef4:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801cef8:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801cefc:	e75e      	b.n	801cdbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801cefe:	9904      	ldr	r1, [sp, #16]
 801cf00:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801cf04:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801cf08:	4433      	add	r3, r6
 801cf0a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801cf0e:	e5df      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cf10:	9f06      	ldr	r7, [sp, #24]
 801cf12:	9b04      	ldr	r3, [sp, #16]
 801cf14:	1bc9      	subs	r1, r1, r7
 801cf16:	fa0f f78a 	sxth.w	r7, sl
 801cf1a:	b289      	uxth	r1, r1
 801cf1c:	429f      	cmp	r7, r3
 801cf1e:	fa0f fe81 	sxth.w	lr, r1
 801cf22:	dd23      	ble.n	801cf6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801cf24:	9a05      	ldr	r2, [sp, #20]
 801cf26:	eba9 0000 	sub.w	r0, r9, r0
 801cf2a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cf2e:	ebaa 0202 	sub.w	r2, sl, r2
 801cf32:	9d07      	ldr	r5, [sp, #28]
 801cf34:	fb0e f000 	mul.w	r0, lr, r0
 801cf38:	b292      	uxth	r2, r2
 801cf3a:	eba5 0a03 	sub.w	sl, r5, r3
 801cf3e:	9b02      	ldr	r3, [sp, #8]
 801cf40:	b214      	sxth	r4, r2
 801cf42:	00db      	lsls	r3, r3, #3
 801cf44:	fb04 fa0a 	mul.w	sl, r4, sl
 801cf48:	445b      	add	r3, fp
 801cf4a:	4550      	cmp	r0, sl
 801cf4c:	db03      	blt.n	801cf56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801cf4e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801cf52:	4494      	add	ip, r2
 801cf54:	e732      	b.n	801cdbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801cf56:	9a04      	ldr	r2, [sp, #16]
 801cf58:	4431      	add	r1, r6
 801cf5a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801cf5e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801cf62:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801cf66:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801cf6a:	e75c      	b.n	801ce26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801cf6c:	9b08      	ldr	r3, [sp, #32]
 801cf6e:	2d06      	cmp	r5, #6
 801cf70:	eba3 0308 	sub.w	r3, r3, r8
 801cf74:	b29b      	uxth	r3, r3
 801cf76:	b218      	sxth	r0, r3
 801cf78:	d813      	bhi.n	801cfa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801cf7a:	9b07      	ldr	r3, [sp, #28]
 801cf7c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801cf80:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801cf84:	1c6b      	adds	r3, r5, #1
 801cf86:	9901      	ldr	r1, [sp, #4]
 801cf88:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801cf8c:	9b01      	ldr	r3, [sp, #4]
 801cf8e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801cf92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cf96:	805a      	strh	r2, [r3, #2]
 801cf98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf9a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801cf9e:	809a      	strh	r2, [r3, #4]
 801cfa0:	e75f      	b.n	801ce62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801cfa2:	9c02      	ldr	r4, [sp, #8]
 801cfa4:	4570      	cmp	r0, lr
 801cfa6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801cfaa:	db0d      	blt.n	801cfc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801cfac:	4431      	add	r1, r6
 801cfae:	9b06      	ldr	r3, [sp, #24]
 801cfb0:	445c      	add	r4, fp
 801cfb2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801cfb6:	b289      	uxth	r1, r1
 801cfb8:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801cfbc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801cfc0:	4419      	add	r1, r3
 801cfc2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801cfc6:	e583      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cfc8:	445c      	add	r4, fp
 801cfca:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801cfce:	e79b      	b.n	801cf08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801cfd0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801cfd4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801cfd8:	1e65      	subs	r5, r4, #1
 801cfda:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801cfde:	b2ad      	uxth	r5, r5
 801cfe0:	42b5      	cmp	r5, r6
 801cfe2:	d044      	beq.n	801d06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801cfe4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801cfe8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801cfec:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801cff0:	4282      	cmp	r2, r0
 801cff2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801cff6:	d11f      	bne.n	801d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801cff8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801cffc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801d000:	459c      	cmp	ip, r3
 801d002:	d119      	bne.n	801d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801d004:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801d008:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801d00c:	19d8      	adds	r0, r3, r7
 801d00e:	b200      	sxth	r0, r0
 801d010:	4288      	cmp	r0, r1
 801d012:	d109      	bne.n	801d028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801d014:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801d018:	4413      	add	r3, r2
 801d01a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801d01e:	4629      	mov	r1, r5
 801d020:	9801      	ldr	r0, [sp, #4]
 801d022:	f7ff fd2b 	bl	801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d026:	e003      	b.n	801d030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d028:	4411      	add	r1, r2
 801d02a:	b209      	sxth	r1, r1
 801d02c:	42b9      	cmp	r1, r7
 801d02e:	d0f3      	beq.n	801d018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801d030:	3d01      	subs	r5, #1
 801d032:	3c08      	subs	r4, #8
 801d034:	b2ad      	uxth	r5, r5
 801d036:	e7d3      	b.n	801cfe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801d038:	42b9      	cmp	r1, r7
 801d03a:	d1f9      	bne.n	801d030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d03c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801d040:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801d044:	4299      	cmp	r1, r3
 801d046:	d1f3      	bne.n	801d030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d048:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801d04c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801d050:	181f      	adds	r7, r3, r0
 801d052:	b23f      	sxth	r7, r7
 801d054:	42ba      	cmp	r2, r7
 801d056:	d105      	bne.n	801d064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801d058:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801d05c:	440b      	add	r3, r1
 801d05e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801d062:	e7dc      	b.n	801d01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801d064:	440a      	add	r2, r1
 801d066:	b212      	sxth	r2, r2
 801d068:	4290      	cmp	r0, r2
 801d06a:	d1e1      	bne.n	801d030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d06c:	e7f6      	b.n	801d05c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801d06e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801d072:	2e07      	cmp	r6, #7
 801d074:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801d078:	d812      	bhi.n	801d0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801d07a:	1c75      	adds	r5, r6, #1
 801d07c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801d080:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801d084:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801d088:	9d01      	ldr	r5, [sp, #4]
 801d08a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801d08e:	442c      	add	r4, r5
 801d090:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801d094:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801d098:	8061      	strh	r1, [r4, #2]
 801d09a:	80a2      	strh	r2, [r4, #4]
 801d09c:	80e3      	strh	r3, [r4, #6]
 801d09e:	e581      	b.n	801cba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d0a0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801d0a4:	3e01      	subs	r6, #1
 801d0a6:	445c      	add	r4, fp
 801d0a8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801d0ac:	f04f 37ff 	mov.w	r7, #4294967295
 801d0b0:	2500      	movs	r5, #0
 801d0b2:	9305      	str	r3, [sp, #20]
 801d0b4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801d0b8:	1e72      	subs	r2, r6, #1
 801d0ba:	9302      	str	r3, [sp, #8]
 801d0bc:	4691      	mov	r9, r2
 801d0be:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801d0c2:	9304      	str	r3, [sp, #16]
 801d0c4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801d0c8:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d0cc:	6818      	ldr	r0, [r3, #0]
 801d0ce:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801d0d2:	9207      	str	r2, [sp, #28]
 801d0d4:	bf16      	itet	ne
 801d0d6:	9905      	ldrne	r1, [sp, #20]
 801d0d8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801d0dc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801d0e0:	9306      	str	r3, [sp, #24]
 801d0e2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801d0e6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801d0ea:	fb18 f801 	smulbb	r8, r8, r1
 801d0ee:	6859      	ldr	r1, [r3, #4]
 801d0f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d0f4:	4671      	mov	r1, lr
 801d0f6:	a80c      	add	r0, sp, #48	@ 0x30
 801d0f8:	f7ff fb6a 	bl	801c7d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d0fc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801d100:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801d104:	f04f 0c08 	mov.w	ip, #8
 801d108:	9b04      	ldr	r3, [sp, #16]
 801d10a:	9a02      	ldr	r2, [sp, #8]
 801d10c:	fb10 f001 	smulbb	r0, r0, r1
 801d110:	fb02 8803 	mla	r8, r2, r3, r8
 801d114:	eba0 0108 	sub.w	r1, r0, r8
 801d118:	fb90 f0fc 	sdiv	r0, r0, ip
 801d11c:	4288      	cmp	r0, r1
 801d11e:	dc20      	bgt.n	801d162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801d120:	4551      	cmp	r1, sl
 801d122:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d126:	da03      	bge.n	801d130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801d128:	b1d9      	cbz	r1, 801d162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801d12a:	468a      	mov	sl, r1
 801d12c:	464f      	mov	r7, r9
 801d12e:	4635      	mov	r5, r6
 801d130:	f109 39ff 	add.w	r9, r9, #4294967295
 801d134:	f119 0f02 	cmn.w	r9, #2
 801d138:	d1c6      	bne.n	801d0c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801d13a:	4616      	mov	r6, r2
 801d13c:	3201      	adds	r2, #1
 801d13e:	f1a4 0408 	sub.w	r4, r4, #8
 801d142:	d1b7      	bne.n	801d0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801d144:	9b01      	ldr	r3, [sp, #4]
 801d146:	b2ac      	uxth	r4, r5
 801d148:	00ed      	lsls	r5, r5, #3
 801d14a:	1958      	adds	r0, r3, r5
 801d14c:	1c7b      	adds	r3, r7, #1
 801d14e:	d10b      	bne.n	801d168 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801d150:	4601      	mov	r1, r0
 801d152:	9803      	ldr	r0, [sp, #12]
 801d154:	f7ff fb3c 	bl	801c7d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d158:	4621      	mov	r1, r4
 801d15a:	9801      	ldr	r0, [sp, #4]
 801d15c:	f7ff fc8e 	bl	801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d160:	e4b6      	b.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d162:	464f      	mov	r7, r9
 801d164:	4635      	mov	r5, r6
 801d166:	e7ed      	b.n	801d144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801d168:	9b01      	ldr	r3, [sp, #4]
 801d16a:	00ff      	lsls	r7, r7, #3
 801d16c:	445d      	add	r5, fp
 801d16e:	19d9      	adds	r1, r3, r7
 801d170:	445f      	add	r7, fp
 801d172:	f7ff fb2d 	bl	801c7d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d176:	9b03      	ldr	r3, [sp, #12]
 801d178:	cb03      	ldmia	r3!, {r0, r1}
 801d17a:	9b03      	ldr	r3, [sp, #12]
 801d17c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801d180:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801d184:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801d188:	6869      	ldr	r1, [r5, #4]
 801d18a:	c303      	stmia	r3!, {r0, r1}
 801d18c:	e7e4      	b.n	801d158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801d18e:	bf00      	nop

0801d190 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801d190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d194:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801d198:	b09b      	sub	sp, #108	@ 0x6c
 801d19a:	4604      	mov	r4, r0
 801d19c:	4630      	mov	r0, r6
 801d19e:	f7fb f81a 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d1a2:	4605      	mov	r5, r0
 801d1a4:	b948      	cbnz	r0, 801d1ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801d1a6:	6823      	ldr	r3, [r4, #0]
 801d1a8:	4620      	mov	r0, r4
 801d1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d1ac:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d1b0:	4798      	blx	r3
 801d1b2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801d1b6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801d1ba:	4bc5      	ldr	r3, [pc, #788]	@ (801d4d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d03f      	beq.n	801d242 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801d1c2:	4dc4      	ldr	r5, [pc, #784]	@ (801d4d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801d1c4:	4628      	mov	r0, r5
 801d1c6:	f7fb f806 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d1ca:	4606      	mov	r6, r0
 801d1cc:	2800      	cmp	r0, #0
 801d1ce:	d138      	bne.n	801d242 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801d1d0:	4628      	mov	r0, r5
 801d1d2:	f7ff f991 	bl	801c4f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d1d6:	6823      	ldr	r3, [r4, #0]
 801d1d8:	6829      	ldr	r1, [r5, #0]
 801d1da:	4620      	mov	r0, r4
 801d1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d1de:	686a      	ldr	r2, [r5, #4]
 801d1e0:	4798      	blx	r3
 801d1e2:	802e      	strh	r6, [r5, #0]
 801d1e4:	806e      	strh	r6, [r5, #2]
 801d1e6:	80ae      	strh	r6, [r5, #4]
 801d1e8:	80ee      	strh	r6, [r5, #6]
 801d1ea:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801d1ee:	4dba      	ldr	r5, [pc, #744]	@ (801d4d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801d1f0:	4640      	mov	r0, r8
 801d1f2:	f7ff fbe7 	bl	801c9c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d1f6:	882e      	ldrh	r6, [r5, #0]
 801d1f8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801d1fc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801d200:	4633      	mov	r3, r6
 801d202:	42bb      	cmp	r3, r7
 801d204:	d224      	bcs.n	801d250 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801d206:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801d20a:	2907      	cmp	r1, #7
 801d20c:	d816      	bhi.n	801d23c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801d20e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801d212:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801d216:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801d21a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801d21e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801d222:	1c4a      	adds	r2, r1, #1
 801d224:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801d228:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801d22c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801d230:	f8a2 a002 	strh.w	sl, [r2, #2]
 801d234:	f8a2 e004 	strh.w	lr, [r2, #4]
 801d238:	f8a2 c006 	strh.w	ip, [r2, #6]
 801d23c:	3301      	adds	r3, #1
 801d23e:	b29b      	uxth	r3, r3
 801d240:	e7df      	b.n	801d202 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801d242:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801d246:	2b00      	cmp	r3, #0
 801d248:	d1cf      	bne.n	801d1ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801d24a:	b01b      	add	sp, #108	@ 0x6c
 801d24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d250:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801d254:	42b3      	cmp	r3, r6
 801d256:	d90c      	bls.n	801d272 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801d258:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801d25c:	6822      	ldr	r2, [r4, #0]
 801d25e:	3601      	adds	r6, #1
 801d260:	4620      	mov	r0, r4
 801d262:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801d264:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801d268:	b2b6      	uxth	r6, r6
 801d26a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801d26e:	47b8      	blx	r7
 801d270:	e7ee      	b.n	801d250 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801d272:	4a9a      	ldr	r2, [pc, #616]	@ (801d4dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d274:	6813      	ldr	r3, [r2, #0]
 801d276:	4691      	mov	r9, r2
 801d278:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801d27c:	2b01      	cmp	r3, #1
 801d27e:	f040 80e0 	bne.w	801d442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801d282:	8829      	ldrh	r1, [r5, #0]
 801d284:	2600      	movs	r6, #0
 801d286:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801d28a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801d28e:	33ae      	adds	r3, #174	@ 0xae
 801d290:	428f      	cmp	r7, r1
 801d292:	f103 0308 	add.w	r3, r3, #8
 801d296:	dd0a      	ble.n	801d2ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801d298:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801d29c:	3101      	adds	r1, #1
 801d29e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801d2a2:	4402      	add	r2, r0
 801d2a4:	b212      	sxth	r2, r2
 801d2a6:	4296      	cmp	r6, r2
 801d2a8:	bfb8      	it	lt
 801d2aa:	4616      	movlt	r6, r2
 801d2ac:	e7f0      	b.n	801d290 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801d2ae:	4b8c      	ldr	r3, [pc, #560]	@ (801d4e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801d2b0:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801d4dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801d2b4:	881b      	ldrh	r3, [r3, #0]
 801d2b6:	2b0f      	cmp	r3, #15
 801d2b8:	bf8c      	ite	hi
 801d2ba:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801d2be:	f04f 0b01 	movls.w	fp, #1
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d2c8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801d2cc:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801d2d0:	4b82      	ldr	r3, [pc, #520]	@ (801d4dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d2d2:	4438      	add	r0, r7
 801d2d4:	b207      	sxth	r7, r0
 801d2d6:	6818      	ldr	r0, [r3, #0]
 801d2d8:	42b7      	cmp	r7, r6
 801d2da:	6803      	ldr	r3, [r0, #0]
 801d2dc:	f280 8083 	bge.w	801d3e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801d2e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d2e4:	4798      	blx	r3
 801d2e6:	eb07 030b 	add.w	r3, r7, fp
 801d2ea:	4298      	cmp	r0, r3
 801d2ec:	da07      	bge.n	801d2fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801d2ee:	42b0      	cmp	r0, r6
 801d2f0:	da05      	bge.n	801d2fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801d2f2:	4287      	cmp	r7, r0
 801d2f4:	dd6c      	ble.n	801d3d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d2f6:	2f00      	cmp	r7, #0
 801d2f8:	dd6a      	ble.n	801d3d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d2fa:	4630      	mov	r0, r6
 801d2fc:	e004      	b.n	801d308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801d2fe:	4287      	cmp	r7, r0
 801d300:	dcfb      	bgt.n	801d2fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801d302:	42b0      	cmp	r0, r6
 801d304:	bfa8      	it	ge
 801d306:	4630      	movge	r0, r6
 801d308:	4b76      	ldr	r3, [pc, #472]	@ (801d4e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801d30a:	1bc0      	subs	r0, r0, r7
 801d30c:	2200      	movs	r2, #0
 801d30e:	f8ad 7016 	strh.w	r7, [sp, #22]
 801d312:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d316:	882f      	ldrh	r7, [r5, #0]
 801d318:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d31c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d320:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d324:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801d328:	42bb      	cmp	r3, r7
 801d32a:	d9cd      	bls.n	801d2c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801d32c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801d330:	ab07      	add	r3, sp, #28
 801d332:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d336:	6851      	ldr	r1, [r2, #4]
 801d338:	c303      	stmia	r3!, {r0, r1}
 801d33a:	a905      	add	r1, sp, #20
 801d33c:	a807      	add	r0, sp, #28
 801d33e:	f7ff f9ae 	bl	801c69e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d342:	2800      	cmp	r0, #0
 801d344:	d04c      	beq.n	801d3e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801d346:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801d34a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801d34e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801d352:	4686      	mov	lr, r0
 801d354:	4290      	cmp	r0, r2
 801d356:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801d35a:	4450      	add	r0, sl
 801d35c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801d360:	bfb8      	it	lt
 801d362:	4696      	movlt	lr, r2
 801d364:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d368:	4452      	add	r2, sl
 801d36a:	b280      	uxth	r0, r0
 801d36c:	4299      	cmp	r1, r3
 801d36e:	468c      	mov	ip, r1
 801d370:	b292      	uxth	r2, r2
 801d372:	9302      	str	r3, [sp, #8]
 801d374:	bfb8      	it	lt
 801d376:	469c      	movlt	ip, r3
 801d378:	b203      	sxth	r3, r0
 801d37a:	fa0f fa82 	sxth.w	sl, r2
 801d37e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801d382:	f8ad c01e 	strh.w	ip, [sp, #30]
 801d386:	4553      	cmp	r3, sl
 801d388:	bfb8      	it	lt
 801d38a:	4602      	movlt	r2, r0
 801d38c:	9b02      	ldr	r3, [sp, #8]
 801d38e:	eba2 020e 	sub.w	r2, r2, lr
 801d392:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d396:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801d39a:	4411      	add	r1, r2
 801d39c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d3a0:	4413      	add	r3, r2
 801d3a2:	b289      	uxth	r1, r1
 801d3a4:	b29b      	uxth	r3, r3
 801d3a6:	b208      	sxth	r0, r1
 801d3a8:	b21a      	sxth	r2, r3
 801d3aa:	4290      	cmp	r0, r2
 801d3ac:	bfb8      	it	lt
 801d3ae:	460b      	movlt	r3, r1
 801d3b0:	eba3 030c 	sub.w	r3, r3, ip
 801d3b4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d3b8:	a807      	add	r0, sp, #28
 801d3ba:	f7fa ff0c 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d3be:	b920      	cbnz	r0, 801d3ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801d3c0:	6823      	ldr	r3, [r4, #0]
 801d3c2:	a907      	add	r1, sp, #28
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d3c8:	4798      	blx	r3
 801d3ca:	3701      	adds	r7, #1
 801d3cc:	b2bf      	uxth	r7, r7
 801d3ce:	e7a9      	b.n	801d324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801d3d0:	f8d9 0000 	ldr.w	r0, [r9]
 801d3d4:	2101      	movs	r1, #1
 801d3d6:	6803      	ldr	r3, [r0, #0]
 801d3d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d3dc:	4798      	blx	r3
 801d3de:	e773      	b.n	801d2c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801d3e0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801d3e4:	e7e8      	b.n	801d3b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801d3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d3e8:	4798      	blx	r3
 801d3ea:	4b3f      	ldr	r3, [pc, #252]	@ (801d4e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	f43f af2b 	beq.w	801d24a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801d3fa:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801d3fe:	882b      	ldrh	r3, [r5, #0]
 801d400:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801d404:	42ab      	cmp	r3, r5
 801d406:	f4bf af20 	bcs.w	801d24a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801d40a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801d40e:	2907      	cmp	r1, #7
 801d410:	d814      	bhi.n	801d43c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801d412:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801d416:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801d41a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801d41e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801d422:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801d426:	1c4a      	adds	r2, r1, #1
 801d428:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801d42c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801d430:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801d434:	f8a2 c002 	strh.w	ip, [r2, #2]
 801d438:	8097      	strh	r7, [r2, #4]
 801d43a:	80d6      	strh	r6, [r2, #6]
 801d43c:	3301      	adds	r3, #1
 801d43e:	b29b      	uxth	r3, r3
 801d440:	e7e0      	b.n	801d404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801d442:	2b02      	cmp	r3, #2
 801d444:	f040 8133 	bne.w	801d6ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801d448:	4b28      	ldr	r3, [pc, #160]	@ (801d4ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801d44a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801d44e:	781b      	ldrb	r3, [r3, #0]
 801d450:	2b01      	cmp	r3, #1
 801d452:	f000 8098 	beq.w	801d586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801d456:	882a      	ldrh	r2, [r5, #0]
 801d458:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801d45c:	3201      	adds	r2, #1
 801d45e:	b292      	uxth	r2, r2
 801d460:	2900      	cmp	r1, #0
 801d462:	d0c2      	beq.n	801d3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d464:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801d468:	4694      	mov	ip, r2
 801d46a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801d46e:	f04f 0900 	mov.w	r9, #0
 801d472:	441e      	add	r6, r3
 801d474:	b236      	sxth	r6, r6
 801d476:	fa1f f38c 	uxth.w	r3, ip
 801d47a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801d47e:	4299      	cmp	r1, r3
 801d480:	f240 80be 	bls.w	801d600 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801d484:	4427      	add	r7, r4
 801d486:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801d48a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801d48e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801d492:	4283      	cmp	r3, r0
 801d494:	f340 80a0 	ble.w	801d5d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801d498:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801d49c:	46e1      	mov	r9, ip
 801d49e:	4406      	add	r6, r0
 801d4a0:	b236      	sxth	r6, r6
 801d4a2:	429e      	cmp	r6, r3
 801d4a4:	bfa8      	it	ge
 801d4a6:	461e      	movge	r6, r3
 801d4a8:	f10c 0c01 	add.w	ip, ip, #1
 801d4ac:	e7e3      	b.n	801d476 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801d4ae:	d10a      	bne.n	801d4c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801d4b0:	4562      	cmp	r2, ip
 801d4b2:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801d4b6:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801d4ba:	bfb8      	it	lt
 801d4bc:	4662      	movlt	r2, ip
 801d4be:	4288      	cmp	r0, r1
 801d4c0:	bfb8      	it	lt
 801d4c2:	461f      	movlt	r7, r3
 801d4c4:	e086      	b.n	801d5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801d4c6:	428a      	cmp	r2, r1
 801d4c8:	bfb8      	it	lt
 801d4ca:	460a      	movlt	r2, r1
 801d4cc:	e082      	b.n	801d5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801d4ce:	bf00      	nop
 801d4d0:	24015e14 	.word	0x24015e14
 801d4d4:	24015e20 	.word	0x24015e20
 801d4d8:	24000050 	.word	0x24000050
 801d4dc:	24015dd4 	.word	0x24015dd4
 801d4e0:	24015dca 	.word	0x24015dca
 801d4e4:	24015dc8 	.word	0x24015dc8
 801d4e8:	24015dd2 	.word	0x24015dd2
 801d4ec:	24015dcc 	.word	0x24015dcc
 801d4f0:	19a1      	adds	r1, r4, r6
 801d4f2:	ab07      	add	r3, sp, #28
 801d4f4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801d4f8:	6849      	ldr	r1, [r1, #4]
 801d4fa:	c303      	stmia	r3!, {r0, r1}
 801d4fc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d500:	a807      	add	r0, sp, #28
 801d502:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d506:	2b13      	cmp	r3, #19
 801d508:	440b      	add	r3, r1
 801d50a:	bfd8      	it	le
 801d50c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801d510:	1a9b      	subs	r3, r3, r2
 801d512:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d516:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d51a:	f7ff f807 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d51e:	a807      	add	r0, sp, #28
 801d520:	f7fa fe59 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d524:	bb78      	cbnz	r0, 801d586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801d526:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801d52a:	4426      	add	r6, r4
 801d52c:	f8d9 0000 	ldr.w	r0, [r9]
 801d530:	f1bc 0f14 	cmp.w	ip, #20
 801d534:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d538:	f8d0 e000 	ldr.w	lr, [r0]
 801d53c:	bfa8      	it	ge
 801d53e:	f04f 0c14 	movge.w	ip, #20
 801d542:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801d546:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d54a:	fa1f fc8c 	uxth.w	ip, ip
 801d54e:	f8cd c000 	str.w	ip, [sp]
 801d552:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801d556:	47d8      	blx	fp
 801d558:	4683      	mov	fp, r0
 801d55a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801d55e:	a807      	add	r0, sp, #28
 801d560:	f7fe ffca 	bl	801c4f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d564:	6823      	ldr	r3, [r4, #0]
 801d566:	4620      	mov	r0, r4
 801d568:	a907      	add	r1, sp, #28
 801d56a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d56c:	4798      	blx	r3
 801d56e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801d572:	eba0 000b 	sub.w	r0, r0, fp
 801d576:	b200      	sxth	r0, r0
 801d578:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801d57c:	b918      	cbnz	r0, 801d586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801d57e:	b2b9      	uxth	r1, r7
 801d580:	4650      	mov	r0, sl
 801d582:	f7ff fa7b 	bl	801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d586:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801d58a:	f1bb 0f00 	cmp.w	fp, #0
 801d58e:	f43f af2c 	beq.w	801d3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d592:	882b      	ldrh	r3, [r5, #0]
 801d594:	2700      	movs	r7, #0
 801d596:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801d59a:	3301      	adds	r3, #1
 801d59c:	b29b      	uxth	r3, r3
 801d59e:	b299      	uxth	r1, r3
 801d5a0:	00fe      	lsls	r6, r7, #3
 801d5a2:	458b      	cmp	fp, r1
 801d5a4:	d9a4      	bls.n	801d4f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801d5a6:	4426      	add	r6, r4
 801d5a8:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801d5ac:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801d5b0:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801d5b4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801d5b8:	4408      	add	r0, r1
 801d5ba:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801d5be:	4461      	add	r1, ip
 801d5c0:	b200      	sxth	r0, r0
 801d5c2:	b209      	sxth	r1, r1
 801d5c4:	4288      	cmp	r0, r1
 801d5c6:	f6bf af72 	bge.w	801d4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801d5ca:	4584      	cmp	ip, r0
 801d5cc:	4662      	mov	r2, ip
 801d5ce:	461f      	mov	r7, r3
 801d5d0:	bfb8      	it	lt
 801d5d2:	4602      	movlt	r2, r0
 801d5d4:	3301      	adds	r3, #1
 801d5d6:	e7e2      	b.n	801d59e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801d5d8:	d10e      	bne.n	801d5f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801d5da:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801d5de:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801d5e2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801d5e6:	4473      	add	r3, lr
 801d5e8:	b21b      	sxth	r3, r3
 801d5ea:	429e      	cmp	r6, r3
 801d5ec:	bfa8      	it	ge
 801d5ee:	461e      	movge	r6, r3
 801d5f0:	4287      	cmp	r7, r0
 801d5f2:	bfb8      	it	lt
 801d5f4:	46e1      	movlt	r9, ip
 801d5f6:	e757      	b.n	801d4a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801d5f8:	4286      	cmp	r6, r0
 801d5fa:	bfa8      	it	ge
 801d5fc:	4606      	movge	r6, r0
 801d5fe:	e753      	b.n	801d4a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801d600:	eb0a 0007 	add.w	r0, sl, r7
 801d604:	4427      	add	r7, r4
 801d606:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801d60a:	f1bb 0f13 	cmp.w	fp, #19
 801d60e:	bfdc      	itt	le
 801d610:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801d614:	445e      	addle	r6, fp
 801d616:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801d61a:	bfd8      	it	le
 801d61c:	b236      	sxthle	r6, r6
 801d61e:	f7fa fdda 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d622:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d626:	2800      	cmp	r0, #0
 801d628:	f47f af1a 	bne.w	801d460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801d62c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801d630:	fa1f fb8b 	uxth.w	fp, fp
 801d634:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801d638:	1ab6      	subs	r6, r6, r2
 801d63a:	4829      	ldr	r0, [pc, #164]	@ (801d6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801d63c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801d640:	2e14      	cmp	r6, #20
 801d642:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801d646:	6800      	ldr	r0, [r0, #0]
 801d648:	bfa8      	it	ge
 801d64a:	2614      	movge	r6, #20
 801d64c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d650:	f8ad 201e 	strh.w	r2, [sp, #30]
 801d654:	b289      	uxth	r1, r1
 801d656:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d65a:	b2b6      	uxth	r6, r6
 801d65c:	f8d0 c000 	ldr.w	ip, [r0]
 801d660:	b292      	uxth	r2, r2
 801d662:	455e      	cmp	r6, fp
 801d664:	bf94      	ite	ls
 801d666:	9600      	strls	r6, [sp, #0]
 801d668:	f8cd b000 	strhi.w	fp, [sp]
 801d66c:	b29b      	uxth	r3, r3
 801d66e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801d672:	47b0      	blx	r6
 801d674:	6823      	ldr	r3, [r4, #0]
 801d676:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801d67a:	a907      	add	r1, sp, #28
 801d67c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d67e:	4620      	mov	r0, r4
 801d680:	4798      	blx	r3
 801d682:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801d686:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801d68a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801d68e:	1a5b      	subs	r3, r3, r1
 801d690:	440a      	add	r2, r1
 801d692:	b21b      	sxth	r3, r3
 801d694:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801d698:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	f47f aeda 	bne.w	801d456 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801d6a2:	fa1f f189 	uxth.w	r1, r9
 801d6a6:	4650      	mov	r0, sl
 801d6a8:	f7ff f9e8 	bl	801ca7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d6ac:	e6d3      	b.n	801d456 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801d6ae:	882e      	ldrh	r6, [r5, #0]
 801d6b0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801d6b4:	42b3      	cmp	r3, r6
 801d6b6:	f67f ae98 	bls.w	801d3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d6ba:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801d6be:	ab07      	add	r3, sp, #28
 801d6c0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d6c4:	6851      	ldr	r1, [r2, #4]
 801d6c6:	c303      	stmia	r3!, {r0, r1}
 801d6c8:	a807      	add	r0, sp, #28
 801d6ca:	f7fa fd84 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d6ce:	b920      	cbnz	r0, 801d6da <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801d6d0:	6823      	ldr	r3, [r4, #0]
 801d6d2:	a907      	add	r1, sp, #28
 801d6d4:	4620      	mov	r0, r4
 801d6d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d6d8:	4798      	blx	r3
 801d6da:	3601      	adds	r6, #1
 801d6dc:	b2b6      	uxth	r6, r6
 801d6de:	e7e7      	b.n	801d6b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801d6e0:	24015dd4 	.word	0x24015dd4

0801d6e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d6e4:	4b03      	ldr	r3, [pc, #12]	@ (801d6f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	801a      	strh	r2, [r3, #0]
 801d6ea:	805a      	strh	r2, [r3, #2]
 801d6ec:	809a      	strh	r2, [r3, #4]
 801d6ee:	80da      	strh	r2, [r3, #6]
 801d6f0:	4770      	bx	lr
 801d6f2:	bf00      	nop
 801d6f4:	24015e20 	.word	0x24015e20

0801d6f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6fc:	b09d      	sub	sp, #116	@ 0x74
 801d6fe:	4606      	mov	r6, r0
 801d700:	4614      	mov	r4, r2
 801d702:	468a      	mov	sl, r1
 801d704:	a803      	add	r0, sp, #12
 801d706:	461d      	mov	r5, r3
 801d708:	f001 f89e 	bl	801e848 <_ZN8touchgfx12TextProviderC1Ev>
 801d70c:	6833      	ldr	r3, [r6, #0]
 801d70e:	4630      	mov	r0, r6
 801d710:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801d714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d716:	4798      	blx	r3
 801d718:	6833      	ldr	r3, [r6, #0]
 801d71a:	4607      	mov	r7, r0
 801d71c:	4630      	mov	r0, r6
 801d71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d720:	4798      	blx	r3
 801d722:	462a      	mov	r2, r5
 801d724:	2500      	movs	r5, #0
 801d726:	4621      	mov	r1, r4
 801d728:	9000      	str	r0, [sp, #0]
 801d72a:	463b      	mov	r3, r7
 801d72c:	462c      	mov	r4, r5
 801d72e:	46a9      	mov	r9, r5
 801d730:	46a8      	mov	r8, r5
 801d732:	a803      	add	r0, sp, #12
 801d734:	f001 f8db 	bl	801e8ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d738:	2300      	movs	r3, #0
 801d73a:	9302      	str	r3, [sp, #8]
 801d73c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801d740:	429c      	cmp	r4, r3
 801d742:	d002      	beq.n	801d74a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801d744:	455c      	cmp	r4, fp
 801d746:	bf18      	it	ne
 801d748:	4625      	movne	r5, r4
 801d74a:	ab02      	add	r3, sp, #8
 801d74c:	4632      	mov	r2, r6
 801d74e:	4651      	mov	r1, sl
 801d750:	a803      	add	r0, sp, #12
 801d752:	f001 fbc1 	bl	801eed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d756:	4604      	mov	r4, r0
 801d758:	b108      	cbz	r0, 801d75e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801d75a:	280a      	cmp	r0, #10
 801d75c:	d10a      	bne.n	801d774 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801d75e:	45c1      	cmp	r9, r8
 801d760:	bf38      	it	cc
 801d762:	46c1      	movcc	r9, r8
 801d764:	f04f 0800 	mov.w	r8, #0
 801d768:	2c00      	cmp	r4, #0
 801d76a:	d1e5      	bne.n	801d738 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d76c:	4648      	mov	r0, r9
 801d76e:	b01d      	add	sp, #116	@ 0x74
 801d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d774:	9a02      	ldr	r2, [sp, #8]
 801d776:	2a00      	cmp	r2, #0
 801d778:	d0de      	beq.n	801d738 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d77a:	7b57      	ldrb	r7, [r2, #13]
 801d77c:	4629      	mov	r1, r5
 801d77e:	6833      	ldr	r3, [r6, #0]
 801d780:	007f      	lsls	r7, r7, #1
 801d782:	8894      	ldrh	r4, [r2, #4]
 801d784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d786:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801d78a:	7a97      	ldrb	r7, [r2, #10]
 801d78c:	4307      	orrs	r7, r0
 801d78e:	4630      	mov	r0, r6
 801d790:	4798      	blx	r3
 801d792:	4438      	add	r0, r7
 801d794:	4480      	add	r8, r0
 801d796:	fa1f f888 	uxth.w	r8, r8
 801d79a:	e7e5      	b.n	801d768 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801d79c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801d79c:	b508      	push	{r3, lr}
 801d79e:	6803      	ldr	r3, [r0, #0]
 801d7a0:	68db      	ldr	r3, [r3, #12]
 801d7a2:	4798      	blx	r3
 801d7a4:	b128      	cbz	r0, 801d7b2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801d7a6:	7b43      	ldrb	r3, [r0, #13]
 801d7a8:	7a80      	ldrb	r0, [r0, #10]
 801d7aa:	005b      	lsls	r3, r3, #1
 801d7ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d7b0:	4318      	orrs	r0, r3
 801d7b2:	bd08      	pop	{r3, pc}

0801d7b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801d7b4:	b40e      	push	{r1, r2, r3}
 801d7b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7b8:	b09e      	sub	sp, #120	@ 0x78
 801d7ba:	4605      	mov	r5, r0
 801d7bc:	ab23      	add	r3, sp, #140	@ 0x8c
 801d7be:	a805      	add	r0, sp, #20
 801d7c0:	f853 4b04 	ldr.w	r4, [r3], #4
 801d7c4:	9303      	str	r3, [sp, #12]
 801d7c6:	f001 f83f 	bl	801e848 <_ZN8touchgfx12TextProviderC1Ev>
 801d7ca:	682b      	ldr	r3, [r5, #0]
 801d7cc:	4628      	mov	r0, r5
 801d7ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d7d0:	4798      	blx	r3
 801d7d2:	682b      	ldr	r3, [r5, #0]
 801d7d4:	4606      	mov	r6, r0
 801d7d6:	4628      	mov	r0, r5
 801d7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d7da:	4798      	blx	r3
 801d7dc:	4633      	mov	r3, r6
 801d7de:	4621      	mov	r1, r4
 801d7e0:	ae1e      	add	r6, sp, #120	@ 0x78
 801d7e2:	2400      	movs	r4, #0
 801d7e4:	9000      	str	r0, [sp, #0]
 801d7e6:	9a03      	ldr	r2, [sp, #12]
 801d7e8:	a805      	add	r0, sp, #20
 801d7ea:	f001 f880 	bl	801e8ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d7ee:	f846 4d68 	str.w	r4, [r6, #-104]!
 801d7f2:	462a      	mov	r2, r5
 801d7f4:	4633      	mov	r3, r6
 801d7f6:	4621      	mov	r1, r4
 801d7f8:	a805      	add	r0, sp, #20
 801d7fa:	f001 fb6d 	bl	801eed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d7fe:	b300      	cbz	r0, 801d842 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801d800:	280a      	cmp	r0, #10
 801d802:	d01a      	beq.n	801d83a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801d804:	9f04      	ldr	r7, [sp, #16]
 801d806:	b1c7      	cbz	r7, 801d83a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801d808:	7b78      	ldrb	r0, [r7, #13]
 801d80a:	7a3b      	ldrb	r3, [r7, #8]
 801d80c:	00c1      	lsls	r1, r0, #3
 801d80e:	88ea      	ldrh	r2, [r5, #6]
 801d810:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d814:	4319      	orrs	r1, r3
 801d816:	0643      	lsls	r3, r0, #25
 801d818:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801d81c:	bf48      	it	mi
 801d81e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801d822:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801d826:	bf48      	it	mi
 801d828:	b219      	sxthmi	r1, r3
 801d82a:	79fb      	ldrb	r3, [r7, #7]
 801d82c:	4303      	orrs	r3, r0
 801d82e:	4413      	add	r3, r2
 801d830:	1a5b      	subs	r3, r3, r1
 801d832:	b21b      	sxth	r3, r3
 801d834:	429c      	cmp	r4, r3
 801d836:	bfb8      	it	lt
 801d838:	461c      	movlt	r4, r3
 801d83a:	4633      	mov	r3, r6
 801d83c:	462a      	mov	r2, r5
 801d83e:	2100      	movs	r1, #0
 801d840:	e7da      	b.n	801d7f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801d842:	b2a0      	uxth	r0, r4
 801d844:	b01e      	add	sp, #120	@ 0x78
 801d846:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d84a:	b003      	add	sp, #12
 801d84c:	4770      	bx	lr

0801d84e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801d84e:	7a43      	ldrb	r3, [r0, #9]
 801d850:	8880      	ldrh	r0, [r0, #4]
 801d852:	4418      	add	r0, r3
 801d854:	b280      	uxth	r0, r0
 801d856:	4770      	bx	lr

0801d858 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801d858:	6803      	ldr	r3, [r0, #0]
 801d85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d85c:	4718      	bx	r3

0801d85e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801d85e:	b40e      	push	{r1, r2, r3}
 801d860:	b570      	push	{r4, r5, r6, lr}
 801d862:	b09d      	sub	sp, #116	@ 0x74
 801d864:	4604      	mov	r4, r0
 801d866:	ab21      	add	r3, sp, #132	@ 0x84
 801d868:	a803      	add	r0, sp, #12
 801d86a:	f853 5b04 	ldr.w	r5, [r3], #4
 801d86e:	9302      	str	r3, [sp, #8]
 801d870:	f000 ffea 	bl	801e848 <_ZN8touchgfx12TextProviderC1Ev>
 801d874:	6823      	ldr	r3, [r4, #0]
 801d876:	4620      	mov	r0, r4
 801d878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d87a:	4798      	blx	r3
 801d87c:	6823      	ldr	r3, [r4, #0]
 801d87e:	4606      	mov	r6, r0
 801d880:	4620      	mov	r0, r4
 801d882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d884:	2401      	movs	r4, #1
 801d886:	4798      	blx	r3
 801d888:	4633      	mov	r3, r6
 801d88a:	9000      	str	r0, [sp, #0]
 801d88c:	4629      	mov	r1, r5
 801d88e:	9a02      	ldr	r2, [sp, #8]
 801d890:	a803      	add	r0, sp, #12
 801d892:	f001 f82c 	bl	801e8ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d896:	a803      	add	r0, sp, #12
 801d898:	f001 fb9e 	bl	801efd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d89c:	b2a3      	uxth	r3, r4
 801d89e:	b138      	cbz	r0, 801d8b0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801d8a0:	280a      	cmp	r0, #10
 801d8a2:	a803      	add	r0, sp, #12
 801d8a4:	bf04      	itt	eq
 801d8a6:	3301      	addeq	r3, #1
 801d8a8:	b21c      	sxtheq	r4, r3
 801d8aa:	f001 fb95 	bl	801efd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d8ae:	e7f5      	b.n	801d89c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	b01d      	add	sp, #116	@ 0x74
 801d8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d8b8:	b003      	add	sp, #12
 801d8ba:	4770      	bx	lr

0801d8bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801d8bc:	b40e      	push	{r1, r2, r3}
 801d8be:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8c0:	b09e      	sub	sp, #120	@ 0x78
 801d8c2:	4604      	mov	r4, r0
 801d8c4:	ab23      	add	r3, sp, #140	@ 0x8c
 801d8c6:	a805      	add	r0, sp, #20
 801d8c8:	f853 5b04 	ldr.w	r5, [r3], #4
 801d8cc:	9303      	str	r3, [sp, #12]
 801d8ce:	f000 ffbb 	bl	801e848 <_ZN8touchgfx12TextProviderC1Ev>
 801d8d2:	6823      	ldr	r3, [r4, #0]
 801d8d4:	4620      	mov	r0, r4
 801d8d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d8d8:	4798      	blx	r3
 801d8da:	6823      	ldr	r3, [r4, #0]
 801d8dc:	4606      	mov	r6, r0
 801d8de:	4620      	mov	r0, r4
 801d8e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d8e2:	4798      	blx	r3
 801d8e4:	4633      	mov	r3, r6
 801d8e6:	4629      	mov	r1, r5
 801d8e8:	9000      	str	r0, [sp, #0]
 801d8ea:	9a03      	ldr	r2, [sp, #12]
 801d8ec:	a805      	add	r0, sp, #20
 801d8ee:	f000 fffe 	bl	801e8ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d8f2:	ad1e      	add	r5, sp, #120	@ 0x78
 801d8f4:	2100      	movs	r1, #0
 801d8f6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801d8fa:	4622      	mov	r2, r4
 801d8fc:	a805      	add	r0, sp, #20
 801d8fe:	f845 1d68 	str.w	r1, [r5, #-104]!
 801d902:	462b      	mov	r3, r5
 801d904:	f001 fae8 	bl	801eed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d908:	b1d8      	cbz	r0, 801d942 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801d90a:	280a      	cmp	r0, #10
 801d90c:	d012      	beq.n	801d934 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801d90e:	9804      	ldr	r0, [sp, #16]
 801d910:	b180      	cbz	r0, 801d934 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801d912:	7b47      	ldrb	r7, [r0, #13]
 801d914:	88e2      	ldrh	r2, [r4, #6]
 801d916:	00fb      	lsls	r3, r7, #3
 801d918:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d91c:	7a03      	ldrb	r3, [r0, #8]
 801d91e:	430b      	orrs	r3, r1
 801d920:	0679      	lsls	r1, r7, #25
 801d922:	bf44      	itt	mi
 801d924:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d928:	b21b      	sxthmi	r3, r3
 801d92a:	1ad3      	subs	r3, r2, r3
 801d92c:	b21b      	sxth	r3, r3
 801d92e:	429e      	cmp	r6, r3
 801d930:	bfa8      	it	ge
 801d932:	461e      	movge	r6, r3
 801d934:	462b      	mov	r3, r5
 801d936:	4622      	mov	r2, r4
 801d938:	2100      	movs	r1, #0
 801d93a:	a805      	add	r0, sp, #20
 801d93c:	f001 facc 	bl	801eed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d940:	e7e2      	b.n	801d908 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801d942:	4630      	mov	r0, r6
 801d944:	b01e      	add	sp, #120	@ 0x78
 801d946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d94a:	b003      	add	sp, #12
 801d94c:	4770      	bx	lr

0801d94e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801d94e:	b513      	push	{r0, r1, r4, lr}
 801d950:	6803      	ldr	r3, [r0, #0]
 801d952:	2400      	movs	r4, #0
 801d954:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d958:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d95c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d960:	4669      	mov	r1, sp
 801d962:	691b      	ldr	r3, [r3, #16]
 801d964:	9400      	str	r4, [sp, #0]
 801d966:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d96a:	4798      	blx	r3
 801d96c:	b002      	add	sp, #8
 801d96e:	bd10      	pop	{r4, pc}

0801d970 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801d970:	b538      	push	{r3, r4, r5, lr}
 801d972:	680b      	ldr	r3, [r1, #0]
 801d974:	460c      	mov	r4, r1
 801d976:	4605      	mov	r5, r0
 801d978:	68db      	ldr	r3, [r3, #12]
 801d97a:	4798      	blx	r3
 801d97c:	6823      	ldr	r3, [r4, #0]
 801d97e:	4620      	mov	r0, r4
 801d980:	4629      	mov	r1, r5
 801d982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d984:	4798      	blx	r3
 801d986:	4628      	mov	r0, r5
 801d988:	bd38      	pop	{r3, r4, r5, pc}

0801d98a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801d98a:	b410      	push	{r4}
 801d98c:	880a      	ldrh	r2, [r1, #0]
 801d98e:	8884      	ldrh	r4, [r0, #4]
 801d990:	4422      	add	r2, r4
 801d992:	800a      	strh	r2, [r1, #0]
 801d994:	884a      	ldrh	r2, [r1, #2]
 801d996:	88c4      	ldrh	r4, [r0, #6]
 801d998:	4422      	add	r2, r4
 801d99a:	804a      	strh	r2, [r1, #2]
 801d99c:	6940      	ldr	r0, [r0, #20]
 801d99e:	b120      	cbz	r0, 801d9aa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801d9a0:	6803      	ldr	r3, [r0, #0]
 801d9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9a8:	4718      	bx	r3
 801d9aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9ae:	4770      	bx	lr

0801d9b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d9b0:	b570      	push	{r4, r5, r6, lr}
 801d9b2:	8882      	ldrh	r2, [r0, #4]
 801d9b4:	460c      	mov	r4, r1
 801d9b6:	880b      	ldrh	r3, [r1, #0]
 801d9b8:	4605      	mov	r5, r0
 801d9ba:	4413      	add	r3, r2
 801d9bc:	800b      	strh	r3, [r1, #0]
 801d9be:	884b      	ldrh	r3, [r1, #2]
 801d9c0:	88c2      	ldrh	r2, [r0, #6]
 801d9c2:	4413      	add	r3, r2
 801d9c4:	804b      	strh	r3, [r1, #2]
 801d9c6:	1d01      	adds	r1, r0, #4
 801d9c8:	4620      	mov	r0, r4
 801d9ca:	f7fa fbc1 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801d9ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	dd0b      	ble.n	801d9ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d9d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	dd07      	ble.n	801d9ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d9de:	6968      	ldr	r0, [r5, #20]
 801d9e0:	b128      	cbz	r0, 801d9ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d9e2:	6803      	ldr	r3, [r0, #0]
 801d9e4:	4621      	mov	r1, r4
 801d9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9ec:	4718      	bx	r3
 801d9ee:	bd70      	pop	{r4, r5, r6, pc}

0801d9f0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d9f0:	b570      	push	{r4, r5, r6, lr}
 801d9f2:	8882      	ldrh	r2, [r0, #4]
 801d9f4:	460c      	mov	r4, r1
 801d9f6:	880b      	ldrh	r3, [r1, #0]
 801d9f8:	4605      	mov	r5, r0
 801d9fa:	4413      	add	r3, r2
 801d9fc:	800b      	strh	r3, [r1, #0]
 801d9fe:	884b      	ldrh	r3, [r1, #2]
 801da00:	88c2      	ldrh	r2, [r0, #6]
 801da02:	4413      	add	r3, r2
 801da04:	804b      	strh	r3, [r1, #2]
 801da06:	1d01      	adds	r1, r0, #4
 801da08:	4620      	mov	r0, r4
 801da0a:	f7fa fba1 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801da0e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801da12:	2b00      	cmp	r3, #0
 801da14:	dd19      	ble.n	801da4a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801da16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	dd15      	ble.n	801da4a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801da1e:	6968      	ldr	r0, [r5, #20]
 801da20:	b128      	cbz	r0, 801da2e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801da22:	6803      	ldr	r3, [r0, #0]
 801da24:	4621      	mov	r1, r4
 801da26:	691b      	ldr	r3, [r3, #16]
 801da28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da2c:	4718      	bx	r3
 801da2e:	4b07      	ldr	r3, [pc, #28]	@ (801da4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	3304      	adds	r3, #4
 801da34:	429d      	cmp	r5, r3
 801da36:	d108      	bne.n	801da4a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801da38:	f7fe ff10 	bl	801c85c <_ZN8touchgfx11Application11getInstanceEv>
 801da3c:	6803      	ldr	r3, [r0, #0]
 801da3e:	6821      	ldr	r1, [r4, #0]
 801da40:	6862      	ldr	r2, [r4, #4]
 801da42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801da44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da48:	4718      	bx	r3
 801da4a:	bd70      	pop	{r4, r5, r6, pc}
 801da4c:	24015e18 	.word	0x24015e18

0801da50 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801da50:	b570      	push	{r4, r5, r6, lr}
 801da52:	4604      	mov	r4, r0
 801da54:	4616      	mov	r6, r2
 801da56:	460d      	mov	r5, r1
 801da58:	b901      	cbnz	r1, 801da5c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801da5a:	b192      	cbz	r2, 801da82 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801da5c:	6823      	ldr	r3, [r4, #0]
 801da5e:	4620      	mov	r0, r4
 801da60:	699b      	ldr	r3, [r3, #24]
 801da62:	4798      	blx	r3
 801da64:	88e2      	ldrh	r2, [r4, #6]
 801da66:	88a1      	ldrh	r1, [r4, #4]
 801da68:	4620      	mov	r0, r4
 801da6a:	4432      	add	r2, r6
 801da6c:	4429      	add	r1, r5
 801da6e:	b212      	sxth	r2, r2
 801da70:	b209      	sxth	r1, r1
 801da72:	f7e5 fe0c 	bl	800368e <_ZN8touchgfx8Drawable5setXYEss>
 801da76:	6823      	ldr	r3, [r4, #0]
 801da78:	4620      	mov	r0, r4
 801da7a:	699b      	ldr	r3, [r3, #24]
 801da7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da80:	4718      	bx	r3
 801da82:	bd70      	pop	{r4, r5, r6, pc}

0801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801da84:	b510      	push	{r4, lr}
 801da86:	2300      	movs	r3, #0
 801da88:	4604      	mov	r4, r0
 801da8a:	4608      	mov	r0, r1
 801da8c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801da90:	8023      	strh	r3, [r4, #0]
 801da92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801da96:	8063      	strh	r3, [r4, #2]
 801da98:	6803      	ldr	r3, [r0, #0]
 801da9a:	80a1      	strh	r1, [r4, #4]
 801da9c:	4621      	mov	r1, r4
 801da9e:	80e2      	strh	r2, [r4, #6]
 801daa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801daa2:	4798      	blx	r3
 801daa4:	4620      	mov	r0, r4
 801daa6:	bd10      	pop	{r4, pc}

0801daa8 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801daa8:	4770      	bx	lr

0801daaa <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801daaa:	b510      	push	{r4, lr}
 801daac:	4604      	mov	r4, r0
 801daae:	211c      	movs	r1, #28
 801dab0:	f00c fd16 	bl	802a4e0 <_ZdlPvj>
 801dab4:	4620      	mov	r0, r4
 801dab6:	bd10      	pop	{r4, pc}

0801dab8 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801dab8:	4a04      	ldr	r2, [pc, #16]	@ (801dacc <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801daba:	6002      	str	r2, [r0, #0]
 801dabc:	2200      	movs	r2, #0
 801dabe:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801dac2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801dac6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801daca:	4770      	bx	lr
 801dacc:	080308f0 	.word	0x080308f0

0801dad0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801dad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad4:	4604      	mov	r4, r0
 801dad6:	b087      	sub	sp, #28
 801dad8:	4696      	mov	lr, r2
 801dada:	6880      	ldr	r0, [r0, #8]
 801dadc:	8b22      	ldrh	r2, [r4, #24]
 801dade:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801dae2:	9105      	str	r1, [sp, #20]
 801dae4:	1c51      	adds	r1, r2, #1
 801dae6:	8321      	strh	r1, [r4, #24]
 801dae8:	2101      	movs	r1, #1
 801daea:	5481      	strb	r1, [r0, r2]
 801daec:	4689      	mov	r9, r1
 801daee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801daf2:	8b60      	ldrh	r0, [r4, #26]
 801daf4:	ee06 2a90 	vmov	s13, r2
 801daf8:	68e2      	ldr	r2, [r4, #12]
 801dafa:	1845      	adds	r5, r0, r1
 801dafc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801db00:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801db04:	8365      	strh	r5, [r4, #26]
 801db06:	edc2 6a00 	vstr	s13, [r2]
 801db0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801db0e:	8b60      	ldrh	r0, [r4, #26]
 801db10:	ee07 2a10 	vmov	s14, r2
 801db14:	68e2      	ldr	r2, [r4, #12]
 801db16:	1845      	adds	r5, r0, r1
 801db18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db1c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801db20:	8365      	strh	r5, [r4, #26]
 801db22:	1d18      	adds	r0, r3, #4
 801db24:	460d      	mov	r5, r1
 801db26:	ed82 7a00 	vstr	s14, [r2]
 801db2a:	f8be 2000 	ldrh.w	r2, [lr]
 801db2e:	9203      	str	r2, [sp, #12]
 801db30:	2200      	movs	r2, #0
 801db32:	4613      	mov	r3, r2
 801db34:	4694      	mov	ip, r2
 801db36:	9201      	str	r2, [sp, #4]
 801db38:	9202      	str	r2, [sp, #8]
 801db3a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801db3e:	9e05      	ldr	r6, [sp, #20]
 801db40:	f108 0701 	add.w	r7, r8, #1
 801db44:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801db48:	428e      	cmp	r6, r1
 801db4a:	b2bf      	uxth	r7, r7
 801db4c:	eb0a 0b08 	add.w	fp, sl, r8
 801db50:	f340 80b6 	ble.w	801dcc0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801db54:	9b03      	ldr	r3, [sp, #12]
 801db56:	f9b0 c000 	ldrsh.w	ip, [r0]
 801db5a:	fa43 fb05 	asr.w	fp, r3, r5
 801db5e:	f00b 0b01 	and.w	fp, fp, #1
 801db62:	fa5f f38b 	uxtb.w	r3, fp
 801db66:	9304      	str	r3, [sp, #16]
 801db68:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801db6c:	f1bb 0f00 	cmp.w	fp, #0
 801db70:	d057      	beq.n	801dc22 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801db72:	ee07 ca90 	vmov	s15, ip
 801db76:	8327      	strh	r7, [r4, #24]
 801db78:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801db7c:	ee07 3a90 	vmov	s15, r3
 801db80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db84:	f1b9 0f00 	cmp.w	r9, #0
 801db88:	d028      	beq.n	801dbdc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801db8a:	f04f 0602 	mov.w	r6, #2
 801db8e:	f80a 6008 	strb.w	r6, [sl, r8]
 801db92:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801db96:	68e7      	ldr	r7, [r4, #12]
 801db98:	f108 0901 	add.w	r9, r8, #1
 801db9c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dba0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dba4:	edc7 5a00 	vstr	s11, [r7]
 801dba8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dbac:	68e7      	ldr	r7, [r4, #12]
 801dbae:	f108 0901 	add.w	r9, r8, #1
 801dbb2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dbb6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dbba:	edc7 7a00 	vstr	s15, [r7]
 801dbbe:	3501      	adds	r5, #1
 801dbc0:	2d10      	cmp	r5, #16
 801dbc2:	d106      	bne.n	801dbd2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801dbc4:	9d02      	ldr	r5, [sp, #8]
 801dbc6:	3501      	adds	r5, #1
 801dbc8:	9502      	str	r5, [sp, #8]
 801dbca:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801dbce:	9503      	str	r5, [sp, #12]
 801dbd0:	2500      	movs	r5, #0
 801dbd2:	3101      	adds	r1, #1
 801dbd4:	3004      	adds	r0, #4
 801dbd6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801dbda:	e7ae      	b.n	801db3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801dbdc:	f04f 0605 	mov.w	r6, #5
 801dbe0:	ed9d 5a01 	vldr	s10, [sp, #4]
 801dbe4:	f80a 6008 	strb.w	r6, [sl, r8]
 801dbe8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801dbec:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dbf0:	68e7      	ldr	r7, [r4, #12]
 801dbf2:	f108 0901 	add.w	r9, r8, #1
 801dbf6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dbfa:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dbfe:	ed87 5a00 	vstr	s10, [r7]
 801dc02:	ee05 2a10 	vmov	s10, r2
 801dc06:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dc0a:	68e7      	ldr	r7, [r4, #12]
 801dc0c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801dc10:	f108 0901 	add.w	r9, r8, #1
 801dc14:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dc18:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dc1c:	ed87 5a00 	vstr	s10, [r7]
 801dc20:	e7b7      	b.n	801db92 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801dc22:	f1b9 0f00 	cmp.w	r9, #0
 801dc26:	d147      	bne.n	801dcb8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801dc28:	f04f 0605 	mov.w	r6, #5
 801dc2c:	eddd 7a01 	vldr	s15, [sp, #4]
 801dc30:	8327      	strh	r7, [r4, #24]
 801dc32:	f80a 6008 	strb.w	r6, [sl, r8]
 801dc36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc3a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dc3e:	68e7      	ldr	r7, [r4, #12]
 801dc40:	f108 0901 	add.w	r9, r8, #1
 801dc44:	9e01      	ldr	r6, [sp, #4]
 801dc46:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dc4a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dc4e:	4466      	add	r6, ip
 801dc50:	edc7 7a00 	vstr	s15, [r7]
 801dc54:	ee07 2a90 	vmov	s15, r2
 801dc58:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dc5c:	441a      	add	r2, r3
 801dc5e:	68e7      	ldr	r7, [r4, #12]
 801dc60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc64:	f108 0901 	add.w	r9, r8, #1
 801dc68:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dc6c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dc70:	edc7 7a00 	vstr	s15, [r7]
 801dc74:	ee07 6a90 	vmov	s15, r6
 801dc78:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dc7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc80:	68e7      	ldr	r7, [r4, #12]
 801dc82:	f108 0901 	add.w	r9, r8, #1
 801dc86:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dc8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801dc8e:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dc92:	edc7 7a00 	vstr	s15, [r7]
 801dc96:	ee07 2a90 	vmov	s15, r2
 801dc9a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dc9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dca2:	68e7      	ldr	r7, [r4, #12]
 801dca4:	f108 0901 	add.w	r9, r8, #1
 801dca8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801dcac:	ee67 7a86 	vmul.f32	s15, s15, s12
 801dcb0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801dcb4:	edc7 7a00 	vstr	s15, [r7]
 801dcb8:	461a      	mov	r2, r3
 801dcba:	f8cd c004 	str.w	ip, [sp, #4]
 801dcbe:	e77e      	b.n	801dbbe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801dcc0:	f1b9 0f00 	cmp.w	r9, #0
 801dcc4:	d028      	beq.n	801dd18 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801dcc6:	ee07 ca90 	vmov	s15, ip
 801dcca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dcce:	eef4 6a67 	vcmp.f32	s13, s15
 801dcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcd6:	d108      	bne.n	801dcea <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801dcd8:	ee07 3a90 	vmov	s15, r3
 801dcdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dce0:	eeb4 7a67 	vcmp.f32	s14, s15
 801dce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dce8:	d016      	beq.n	801dd18 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801dcea:	2302      	movs	r3, #2
 801dcec:	8327      	strh	r7, [r4, #24]
 801dcee:	f88b 3000 	strb.w	r3, [fp]
 801dcf2:	8b62      	ldrh	r2, [r4, #26]
 801dcf4:	68e3      	ldr	r3, [r4, #12]
 801dcf6:	1c51      	adds	r1, r2, #1
 801dcf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801dcfc:	8361      	strh	r1, [r4, #26]
 801dcfe:	edc3 6a00 	vstr	s13, [r3]
 801dd02:	8b62      	ldrh	r2, [r4, #26]
 801dd04:	68e3      	ldr	r3, [r4, #12]
 801dd06:	1c51      	adds	r1, r2, #1
 801dd08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801dd0c:	8361      	strh	r1, [r4, #26]
 801dd0e:	ed83 7a00 	vstr	s14, [r3]
 801dd12:	b007      	add	sp, #28
 801dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd18:	2305      	movs	r3, #5
 801dd1a:	eddd 7a01 	vldr	s15, [sp, #4]
 801dd1e:	8327      	strh	r7, [r4, #24]
 801dd20:	f88b 3000 	strb.w	r3, [fp]
 801dd24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd28:	8b61      	ldrh	r1, [r4, #26]
 801dd2a:	68e3      	ldr	r3, [r4, #12]
 801dd2c:	1c4d      	adds	r5, r1, #1
 801dd2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dd32:	8365      	strh	r5, [r4, #26]
 801dd34:	edc3 7a00 	vstr	s15, [r3]
 801dd38:	ee07 2a90 	vmov	s15, r2
 801dd3c:	8b61      	ldrh	r1, [r4, #26]
 801dd3e:	68e3      	ldr	r3, [r4, #12]
 801dd40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd44:	1c4d      	adds	r5, r1, #1
 801dd46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dd4a:	8365      	strh	r5, [r4, #26]
 801dd4c:	edc3 7a00 	vstr	s15, [r3]
 801dd50:	e7cf      	b.n	801dcf2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801dd54 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801dd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd58:	4604      	mov	r4, r0
 801dd5a:	b08e      	sub	sp, #56	@ 0x38
 801dd5c:	4699      	mov	r9, r3
 801dd5e:	4688      	mov	r8, r1
 801dd60:	4615      	mov	r5, r2
 801dd62:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801dd64:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801dd68:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801dd6a:	f7e5 f87d 	bl	8002e68 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801dd6e:	6060      	str	r0, [r4, #4]
 801dd70:	f1b9 0f00 	cmp.w	r9, #0
 801dd74:	f000 80e8 	beq.w	801df48 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801dd78:	2800      	cmp	r0, #0
 801dd7a:	f000 80e5 	beq.w	801df48 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801dd7e:	a805      	add	r0, sp, #20
 801dd80:	f000 f8f9 	bl	801df76 <_ZN8touchgfx9Matrix3x3C1Ev>
 801dd84:	6833      	ldr	r3, [r6, #0]
 801dd86:	4630      	mov	r0, r6
 801dd88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dd8a:	4798      	blx	r3
 801dd8c:	a805      	add	r0, sp, #20
 801dd8e:	eef0 0a40 	vmov.f32	s1, s0
 801dd92:	f000 f8f4 	bl	801df7e <_ZN8touchgfx9Matrix3x35scaleEff>
 801dd96:	6860      	ldr	r0, [r4, #4]
 801dd98:	f1ba 0f03 	cmp.w	sl, #3
 801dd9c:	d83b      	bhi.n	801de16 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801dd9e:	e8df f00a 	tbb	[pc, sl]
 801dda2:	1002      	.short	0x1002
 801dda4:	9f71      	.short	0x9f71
 801dda6:	6803      	ldr	r3, [r0, #0]
 801dda8:	462a      	mov	r2, r5
 801ddaa:	4641      	mov	r1, r8
 801ddac:	689b      	ldr	r3, [r3, #8]
 801ddae:	4798      	blx	r3
 801ddb0:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801ddb4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801ddb8:	ee07 7a90 	vmov	s15, r7
 801ddbc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ddc0:	e026      	b.n	801de10 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801ddc2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801ddc6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801ddca:	8869      	ldrh	r1, [r5, #2]
 801ddcc:	1a9b      	subs	r3, r3, r2
 801ddce:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ddd2:	aa03      	add	r2, sp, #12
 801ddd4:	1a5b      	subs	r3, r3, r1
 801ddd6:	4641      	mov	r1, r8
 801ddd8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dddc:	882b      	ldrh	r3, [r5, #0]
 801ddde:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dde2:	88ab      	ldrh	r3, [r5, #4]
 801dde4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dde8:	6803      	ldr	r3, [r0, #0]
 801ddea:	689b      	ldr	r3, [r3, #8]
 801ddec:	4798      	blx	r3
 801ddee:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801df50 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801ddf2:	a805      	add	r0, sp, #20
 801ddf4:	f000 f8e8 	bl	801dfc8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801ddf8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801ddfc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ddfe:	ee07 7a90 	vmov	s15, r7
 801de02:	1a9b      	subs	r3, r3, r2
 801de04:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801de08:	ee00 3a10 	vmov	s0, r3
 801de0c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801de10:	a805      	add	r0, sp, #20
 801de12:	f000 f927 	bl	801e064 <_ZN8touchgfx9Matrix3x39translateEff>
 801de16:	6860      	ldr	r0, [r4, #4]
 801de18:	a905      	add	r1, sp, #20
 801de1a:	2500      	movs	r5, #0
 801de1c:	f109 0602 	add.w	r6, r9, #2
 801de20:	6803      	ldr	r3, [r0, #0]
 801de22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801de24:	4798      	blx	r3
 801de26:	6860      	ldr	r0, [r4, #4]
 801de28:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801de2a:	6803      	ldr	r3, [r0, #0]
 801de2c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801de30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de32:	4798      	blx	r3
 801de34:	6860      	ldr	r0, [r4, #4]
 801de36:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801de3a:	6803      	ldr	r3, [r0, #0]
 801de3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de3e:	4798      	blx	r3
 801de40:	6860      	ldr	r0, [r4, #4]
 801de42:	2101      	movs	r1, #1
 801de44:	6803      	ldr	r3, [r0, #0]
 801de46:	68db      	ldr	r3, [r3, #12]
 801de48:	4798      	blx	r3
 801de4a:	f8b9 7000 	ldrh.w	r7, [r9]
 801de4e:	f104 0310 	add.w	r3, r4, #16
 801de52:	61a5      	str	r5, [r4, #24]
 801de54:	f104 0208 	add.w	r2, r4, #8
 801de58:	f104 0114 	add.w	r1, r4, #20
 801de5c:	f104 000c 	add.w	r0, r4, #12
 801de60:	f7e5 fee8 	bl	8003c34 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801de64:	42af      	cmp	r7, r5
 801de66:	dd60      	ble.n	801df2a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801de68:	8831      	ldrh	r1, [r6, #0]
 801de6a:	1cb2      	adds	r2, r6, #2
 801de6c:	4620      	mov	r0, r4
 801de6e:	3501      	adds	r5, #1
 801de70:	f101 030f 	add.w	r3, r1, #15
 801de74:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801de78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801de7c:	f7ff fe28 	bl	801dad0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801de80:	4606      	mov	r6, r0
 801de82:	e7ef      	b.n	801de64 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801de84:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801de88:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801de8c:	8829      	ldrh	r1, [r5, #0]
 801de8e:	1a9b      	subs	r3, r3, r2
 801de90:	f8ad 2010 	strh.w	r2, [sp, #16]
 801de94:	aa03      	add	r2, sp, #12
 801de96:	1a5b      	subs	r3, r3, r1
 801de98:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801de9c:	886d      	ldrh	r5, [r5, #2]
 801de9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dea2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801dea6:	f8ad 1012 	strh.w	r1, [sp, #18]
 801deaa:	1a5b      	subs	r3, r3, r1
 801deac:	4641      	mov	r1, r8
 801deae:	1b5b      	subs	r3, r3, r5
 801deb0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801deb4:	6803      	ldr	r3, [r0, #0]
 801deb6:	689b      	ldr	r3, [r3, #8]
 801deb8:	4798      	blx	r3
 801deba:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801df54 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801debe:	a805      	add	r0, sp, #20
 801dec0:	f000 f882 	bl	801dfc8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801dec4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801dec8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801deca:	1a9b      	subs	r3, r3, r2
 801decc:	ee00 3a90 	vmov	s1, r3
 801ded0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801ded4:	1bdb      	subs	r3, r3, r7
 801ded6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801deda:	ee00 3a10 	vmov	s0, r3
 801dede:	e795      	b.n	801de0c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801dee0:	886b      	ldrh	r3, [r5, #2]
 801dee2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801dee6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801deea:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801deee:	8829      	ldrh	r1, [r5, #0]
 801def0:	1a9b      	subs	r3, r3, r2
 801def2:	f8ad 2012 	strh.w	r2, [sp, #18]
 801def6:	aa03      	add	r2, sp, #12
 801def8:	1a5b      	subs	r3, r3, r1
 801defa:	4641      	mov	r1, r8
 801defc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801df00:	88eb      	ldrh	r3, [r5, #6]
 801df02:	f8ad 3010 	strh.w	r3, [sp, #16]
 801df06:	6803      	ldr	r3, [r0, #0]
 801df08:	689b      	ldr	r3, [r3, #8]
 801df0a:	4798      	blx	r3
 801df0c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801df58 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801df10:	a805      	add	r0, sp, #20
 801df12:	f000 f859 	bl	801dfc8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801df16:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801df1a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801df1e:	1bdb      	subs	r3, r3, r7
 801df20:	ee00 3a90 	vmov	s1, r3
 801df24:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801df28:	e748      	b.n	801ddbc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801df2a:	6860      	ldr	r0, [r4, #4]
 801df2c:	2100      	movs	r1, #0
 801df2e:	8b22      	ldrh	r2, [r4, #24]
 801df30:	6803      	ldr	r3, [r0, #0]
 801df32:	9101      	str	r1, [sp, #4]
 801df34:	8b61      	ldrh	r1, [r4, #26]
 801df36:	9100      	str	r1, [sp, #0]
 801df38:	6a1d      	ldr	r5, [r3, #32]
 801df3a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801df3e:	47a8      	blx	r5
 801df40:	6860      	ldr	r0, [r4, #4]
 801df42:	6803      	ldr	r3, [r0, #0]
 801df44:	69db      	ldr	r3, [r3, #28]
 801df46:	4798      	blx	r3
 801df48:	b00e      	add	sp, #56	@ 0x38
 801df4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df4e:	bf00      	nop
 801df50:	42b40000 	.word	0x42b40000
 801df54:	43340000 	.word	0x43340000
 801df58:	43870000 	.word	0x43870000

0801df5c <_ZN8touchgfx9Matrix3x35resetEv>:
 801df5c:	2300      	movs	r3, #0
 801df5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801df62:	6043      	str	r3, [r0, #4]
 801df64:	6002      	str	r2, [r0, #0]
 801df66:	6083      	str	r3, [r0, #8]
 801df68:	60c3      	str	r3, [r0, #12]
 801df6a:	6102      	str	r2, [r0, #16]
 801df6c:	6143      	str	r3, [r0, #20]
 801df6e:	6183      	str	r3, [r0, #24]
 801df70:	61c3      	str	r3, [r0, #28]
 801df72:	6202      	str	r2, [r0, #32]
 801df74:	4770      	bx	lr

0801df76 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801df76:	b508      	push	{r3, lr}
 801df78:	f7ff fff0 	bl	801df5c <_ZN8touchgfx9Matrix3x35resetEv>
 801df7c:	bd08      	pop	{r3, pc}

0801df7e <_ZN8touchgfx9Matrix3x35scaleEff>:
 801df7e:	edd0 7a00 	vldr	s15, [r0]
 801df82:	ee67 7a80 	vmul.f32	s15, s15, s0
 801df86:	edc0 7a00 	vstr	s15, [r0]
 801df8a:	edd0 7a01 	vldr	s15, [r0, #4]
 801df8e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801df92:	edc0 7a01 	vstr	s15, [r0, #4]
 801df96:	edd0 7a02 	vldr	s15, [r0, #8]
 801df9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801df9e:	edd0 7a03 	vldr	s15, [r0, #12]
 801dfa2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801dfa6:	ed80 0a02 	vstr	s0, [r0, #8]
 801dfaa:	edc0 7a03 	vstr	s15, [r0, #12]
 801dfae:	edd0 7a04 	vldr	s15, [r0, #16]
 801dfb2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801dfb6:	edc0 7a04 	vstr	s15, [r0, #16]
 801dfba:	edd0 7a05 	vldr	s15, [r0, #20]
 801dfbe:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801dfc2:	edc0 0a05 	vstr	s1, [r0, #20]
 801dfc6:	4770      	bx	lr

0801dfc8 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801dfc8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801e05c <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801dfcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dfd0:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801e060 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801dfd4:	b510      	push	{r4, lr}
 801dfd6:	ed2d 8b02 	vpush	{d8}
 801dfda:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801dfde:	4604      	mov	r4, r0
 801dfe0:	eeb0 0a68 	vmov.f32	s0, s17
 801dfe4:	f00c fbb4 	bl	802a750 <cosf>
 801dfe8:	eeb0 8a40 	vmov.f32	s16, s0
 801dfec:	eeb0 0a68 	vmov.f32	s0, s17
 801dff0:	f00c faea 	bl	802a5c8 <sinf>
 801dff4:	edd4 6a03 	vldr	s13, [r4, #12]
 801dff8:	edd4 4a00 	vldr	s9, [r4]
 801dffc:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801e000:	ed94 7a04 	vldr	s14, [r4, #16]
 801e004:	ed94 5a01 	vldr	s10, [r4, #4]
 801e008:	ee66 6a88 	vmul.f32	s13, s13, s16
 801e00c:	edd4 5a02 	vldr	s11, [r4, #8]
 801e010:	eee8 7a24 	vfma.f32	s15, s16, s9
 801e014:	eee0 6a24 	vfma.f32	s13, s0, s9
 801e018:	edc4 7a00 	vstr	s15, [r4]
 801e01c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801e020:	ee27 7a08 	vmul.f32	s14, s14, s16
 801e024:	edc4 6a03 	vstr	s13, [r4, #12]
 801e028:	eee8 7a05 	vfma.f32	s15, s16, s10
 801e02c:	eea0 7a05 	vfma.f32	s14, s0, s10
 801e030:	edc4 7a01 	vstr	s15, [r4, #4]
 801e034:	edd4 7a05 	vldr	s15, [r4, #20]
 801e038:	ed84 7a04 	vstr	s14, [r4, #16]
 801e03c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801e040:	ee67 7a88 	vmul.f32	s15, s15, s16
 801e044:	eea8 6a25 	vfma.f32	s12, s16, s11
 801e048:	eee0 7a25 	vfma.f32	s15, s0, s11
 801e04c:	ecbd 8b02 	vpop	{d8}
 801e050:	ed84 6a02 	vstr	s12, [r4, #8]
 801e054:	edc4 7a05 	vstr	s15, [r4, #20]
 801e058:	bd10      	pop	{r4, pc}
 801e05a:	bf00      	nop
 801e05c:	40490fdb 	.word	0x40490fdb
 801e060:	43340000 	.word	0x43340000

0801e064 <_ZN8touchgfx9Matrix3x39translateEff>:
 801e064:	ed90 6a06 	vldr	s12, [r0, #24]
 801e068:	edd0 7a00 	vldr	s15, [r0]
 801e06c:	edd0 6a07 	vldr	s13, [r0, #28]
 801e070:	eee6 7a00 	vfma.f32	s15, s12, s0
 801e074:	ed90 7a08 	vldr	s14, [r0, #32]
 801e078:	edc0 7a00 	vstr	s15, [r0]
 801e07c:	edd0 7a01 	vldr	s15, [r0, #4]
 801e080:	eee6 7a80 	vfma.f32	s15, s13, s0
 801e084:	edc0 7a01 	vstr	s15, [r0, #4]
 801e088:	edd0 7a02 	vldr	s15, [r0, #8]
 801e08c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e090:	edc0 7a02 	vstr	s15, [r0, #8]
 801e094:	edd0 7a03 	vldr	s15, [r0, #12]
 801e098:	eee6 7a20 	vfma.f32	s15, s12, s1
 801e09c:	edc0 7a03 	vstr	s15, [r0, #12]
 801e0a0:	edd0 7a04 	vldr	s15, [r0, #16]
 801e0a4:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801e0a8:	edc0 7a04 	vstr	s15, [r0, #16]
 801e0ac:	edd0 7a05 	vldr	s15, [r0, #20]
 801e0b0:	eee7 7a20 	vfma.f32	s15, s14, s1
 801e0b4:	edc0 7a05 	vstr	s15, [r0, #20]
 801e0b8:	4770      	bx	lr

0801e0ba <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801e0ba:	edd0 6a01 	vldr	s13, [r0, #4]
 801e0be:	b084      	sub	sp, #16
 801e0c0:	edd0 7a04 	vldr	s15, [r0, #16]
 801e0c4:	ed90 7a03 	vldr	s14, [r0, #12]
 801e0c8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801e0cc:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801e0d0:	edd0 6a00 	vldr	s13, [r0]
 801e0d4:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e0d8:	ed90 7a05 	vldr	s14, [r0, #20]
 801e0dc:	eee6 0a80 	vfma.f32	s1, s13, s0
 801e0e0:	ed90 0a02 	vldr	s0, [r0, #8]
 801e0e4:	ee30 0a80 	vadd.f32	s0, s1, s0
 801e0e8:	ee77 0a87 	vadd.f32	s1, s15, s14
 801e0ec:	b004      	add	sp, #16
 801e0ee:	4770      	bx	lr

0801e0f0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801e0f0:	b530      	push	{r4, r5, lr}
 801e0f2:	8083      	strh	r3, [r0, #4]
 801e0f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e0f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801e0fc:	80c3      	strh	r3, [r0, #6]
 801e0fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801e102:	6141      	str	r1, [r0, #20]
 801e104:	7203      	strb	r3, [r0, #8]
 801e106:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e10a:	8302      	strh	r2, [r0, #24]
 801e10c:	7243      	strb	r3, [r0, #9]
 801e10e:	7a83      	ldrb	r3, [r0, #10]
 801e110:	f365 0306 	bfi	r3, r5, #0, #7
 801e114:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801e118:	f365 13c7 	bfi	r3, r5, #7, #1
 801e11c:	7283      	strb	r3, [r0, #10]
 801e11e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801e122:	72c3      	strb	r3, [r0, #11]
 801e124:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801e128:	7303      	strb	r3, [r0, #12]
 801e12a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e12e:	81c3      	strh	r3, [r0, #14]
 801e130:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801e134:	8203      	strh	r3, [r0, #16]
 801e136:	4b01      	ldr	r3, [pc, #4]	@ (801e13c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801e138:	6003      	str	r3, [r0, #0]
 801e13a:	bd30      	pop	{r4, r5, pc}
 801e13c:	08030904 	.word	0x08030904

0801e140 <_ZNK8touchgfx9ConstFont4findEt>:
 801e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e142:	6944      	ldr	r4, [r0, #20]
 801e144:	b3bc      	cbz	r4, 801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e146:	88a3      	ldrh	r3, [r4, #4]
 801e148:	8b02      	ldrh	r2, [r0, #24]
 801e14a:	1acb      	subs	r3, r1, r3
 801e14c:	f102 32ff 	add.w	r2, r2, #4294967295
 801e150:	d431      	bmi.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e152:	4293      	cmp	r3, r2
 801e154:	dd0c      	ble.n	801e170 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801e156:	230e      	movs	r3, #14
 801e158:	fb03 4302 	mla	r3, r3, r2, r4
 801e15c:	889b      	ldrh	r3, [r3, #4]
 801e15e:	1a5b      	subs	r3, r3, r1
 801e160:	1ad3      	subs	r3, r2, r3
 801e162:	429a      	cmp	r2, r3
 801e164:	db27      	blt.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e166:	2b00      	cmp	r3, #0
 801e168:	bfbc      	itt	lt
 801e16a:	2302      	movlt	r3, #2
 801e16c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801e170:	2500      	movs	r5, #0
 801e172:	260e      	movs	r6, #14
 801e174:	4295      	cmp	r5, r2
 801e176:	dc1e      	bgt.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e178:	fb06 4003 	mla	r0, r6, r3, r4
 801e17c:	8887      	ldrh	r7, [r0, #4]
 801e17e:	42b9      	cmp	r1, r7
 801e180:	d01a      	beq.n	801e1b8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801e182:	d20d      	bcs.n	801e1a0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801e184:	1e5a      	subs	r2, r3, #1
 801e186:	4295      	cmp	r5, r2
 801e188:	dc15      	bgt.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e18a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801e18e:	1a5b      	subs	r3, r3, r1
 801e190:	1ad3      	subs	r3, r2, r3
 801e192:	429a      	cmp	r2, r3
 801e194:	db0f      	blt.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e196:	429d      	cmp	r5, r3
 801e198:	ddec      	ble.n	801e174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e19a:	1953      	adds	r3, r2, r5
 801e19c:	105b      	asrs	r3, r3, #1
 801e19e:	e7e9      	b.n	801e174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e1a0:	1c5d      	adds	r5, r3, #1
 801e1a2:	42aa      	cmp	r2, r5
 801e1a4:	db07      	blt.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e1a6:	8a43      	ldrh	r3, [r0, #18]
 801e1a8:	1acb      	subs	r3, r1, r3
 801e1aa:	442b      	add	r3, r5
 801e1ac:	429d      	cmp	r5, r3
 801e1ae:	dc02      	bgt.n	801e1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e1b0:	429a      	cmp	r2, r3
 801e1b2:	dadf      	bge.n	801e174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e1b4:	e7f1      	b.n	801e19a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801e1b6:	2000      	movs	r0, #0
 801e1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e1ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801e1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1bc:	4604      	mov	r4, r0
 801e1be:	4617      	mov	r7, r2
 801e1c0:	461e      	mov	r6, r3
 801e1c2:	b911      	cbnz	r1, 801e1ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e1c4:	2500      	movs	r5, #0
 801e1c6:	4628      	mov	r0, r5
 801e1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1ca:	290a      	cmp	r1, #10
 801e1cc:	d0fa      	beq.n	801e1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e1ce:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801e1d2:	4291      	cmp	r1, r2
 801e1d4:	d0f6      	beq.n	801e1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e1d6:	f242 020b 	movw	r2, #8203	@ 0x200b
 801e1da:	4291      	cmp	r1, r2
 801e1dc:	d0f2      	beq.n	801e1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e1de:	f7ff ffaf 	bl	801e140 <_ZNK8touchgfx9ConstFont4findEt>
 801e1e2:	4605      	mov	r5, r0
 801e1e4:	b950      	cbnz	r0, 801e1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801e1e6:	6823      	ldr	r3, [r4, #0]
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	691b      	ldr	r3, [r3, #16]
 801e1ec:	4798      	blx	r3
 801e1ee:	4601      	mov	r1, r0
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	f7ff ffa5 	bl	801e140 <_ZNK8touchgfx9ConstFont4findEt>
 801e1f6:	4605      	mov	r5, r0
 801e1f8:	2800      	cmp	r0, #0
 801e1fa:	d0e3      	beq.n	801e1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e1fc:	6823      	ldr	r3, [r4, #0]
 801e1fe:	4629      	mov	r1, r5
 801e200:	4620      	mov	r0, r4
 801e202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e204:	4798      	blx	r3
 801e206:	6038      	str	r0, [r7, #0]
 801e208:	6823      	ldr	r3, [r4, #0]
 801e20a:	4620      	mov	r0, r4
 801e20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e20e:	4798      	blx	r3
 801e210:	7030      	strb	r0, [r6, #0]
 801e212:	e7d8      	b.n	801e1c6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801e214 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801e214:	2000      	movs	r0, #0
 801e216:	4770      	bx	lr

0801e218 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801e218:	2001      	movs	r0, #1
 801e21a:	4770      	bx	lr

0801e21c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801e21c:	2002      	movs	r0, #2
 801e21e:	4770      	bx	lr

0801e220 <_ZN8touchgfx6ScreenD1Ev>:
 801e220:	4770      	bx	lr

0801e222 <_ZN8touchgfx12GestureEventD1Ev>:
 801e222:	4770      	bx	lr

0801e224 <_ZN8touchgfx9DragEventD1Ev>:
 801e224:	4770      	bx	lr

0801e226 <_ZN8touchgfx10ClickEventD1Ev>:
 801e226:	4770      	bx	lr

0801e228 <_ZN8touchgfx10ClickEventD0Ev>:
 801e228:	b510      	push	{r4, lr}
 801e22a:	4604      	mov	r4, r0
 801e22c:	210c      	movs	r1, #12
 801e22e:	f00c f957 	bl	802a4e0 <_ZdlPvj>
 801e232:	4620      	mov	r0, r4
 801e234:	bd10      	pop	{r4, pc}

0801e236 <_ZN8touchgfx9DragEventD0Ev>:
 801e236:	b510      	push	{r4, lr}
 801e238:	4604      	mov	r4, r0
 801e23a:	2110      	movs	r1, #16
 801e23c:	f00c f950 	bl	802a4e0 <_ZdlPvj>
 801e240:	4620      	mov	r0, r4
 801e242:	bd10      	pop	{r4, pc}

0801e244 <_ZN8touchgfx12GestureEventD0Ev>:
 801e244:	b510      	push	{r4, lr}
 801e246:	4604      	mov	r4, r0
 801e248:	210c      	movs	r1, #12
 801e24a:	f00c f949 	bl	802a4e0 <_ZdlPvj>
 801e24e:	4620      	mov	r0, r4
 801e250:	bd10      	pop	{r4, pc}

0801e252 <_ZN8touchgfx6ScreenD0Ev>:
 801e252:	b510      	push	{r4, lr}
 801e254:	4604      	mov	r4, r0
 801e256:	213c      	movs	r1, #60	@ 0x3c
 801e258:	f00c f942 	bl	802a4e0 <_ZdlPvj>
 801e25c:	4620      	mov	r0, r4
 801e25e:	bd10      	pop	{r4, pc}

0801e260 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801e260:	b530      	push	{r4, r5, lr}
 801e262:	460d      	mov	r5, r1
 801e264:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801e266:	b087      	sub	sp, #28
 801e268:	4604      	mov	r4, r0
 801e26a:	b301      	cbz	r1, 801e2ae <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801e26c:	a801      	add	r0, sp, #4
 801e26e:	f7ff fc09 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e272:	892a      	ldrh	r2, [r5, #8]
 801e274:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e278:	7928      	ldrb	r0, [r5, #4]
 801e27a:	1ad2      	subs	r2, r2, r3
 801e27c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801e27e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e282:	441a      	add	r2, r3
 801e284:	896b      	ldrh	r3, [r5, #10]
 801e286:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801e28a:	f88d 0010 	strb.w	r0, [sp, #16]
 801e28e:	1b5b      	subs	r3, r3, r5
 801e290:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801e292:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801e294:	442b      	add	r3, r5
 801e296:	4d07      	ldr	r5, [pc, #28]	@ (801e2b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801e298:	f8ad 1012 	strh.w	r1, [sp, #18]
 801e29c:	a903      	add	r1, sp, #12
 801e29e:	9503      	str	r5, [sp, #12]
 801e2a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e2a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e2a8:	6803      	ldr	r3, [r0, #0]
 801e2aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e2ac:	4798      	blx	r3
 801e2ae:	b007      	add	sp, #28
 801e2b0:	bd30      	pop	{r4, r5, pc}
 801e2b2:	bf00      	nop
 801e2b4:	08030994 	.word	0x08030994

0801e2b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801e2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e2be:	b08a      	sub	sp, #40	@ 0x28
 801e2c0:	4604      	mov	r4, r0
 801e2c2:	460d      	mov	r5, r1
 801e2c4:	b113      	cbz	r3, 801e2cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801e2c6:	790b      	ldrb	r3, [r1, #4]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d044      	beq.n	801e356 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e2cc:	f104 0804 	add.w	r8, r4, #4
 801e2d0:	a803      	add	r0, sp, #12
 801e2d2:	4641      	mov	r1, r8
 801e2d4:	f7ff fbd6 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e2d8:	792b      	ldrb	r3, [r5, #4]
 801e2da:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801e2de:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801e2e2:	b983      	cbnz	r3, 801e306 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801e2e4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801e2e8:	892a      	ldrh	r2, [r5, #8]
 801e2ea:	88e9      	ldrh	r1, [r5, #6]
 801e2ec:	4640      	mov	r0, r8
 801e2ee:	1b92      	subs	r2, r2, r6
 801e2f0:	9301      	str	r3, [sp, #4]
 801e2f2:	1bc9      	subs	r1, r1, r7
 801e2f4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801e2f8:	b212      	sxth	r2, r2
 801e2fa:	9300      	str	r3, [sp, #0]
 801e2fc:	b209      	sxth	r1, r1
 801e2fe:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801e302:	f7f9 fe43 	bl	8017f8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801e306:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e308:	b329      	cbz	r1, 801e356 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e30a:	a805      	add	r0, sp, #20
 801e30c:	f7ff fbba 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e310:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e314:	792b      	ldrb	r3, [r5, #4]
 801e316:	a907      	add	r1, sp, #28
 801e318:	1abf      	subs	r7, r7, r2
 801e31a:	88ea      	ldrh	r2, [r5, #6]
 801e31c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801e31e:	4417      	add	r7, r2
 801e320:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801e322:	f88d 3020 	strb.w	r3, [sp, #32]
 801e326:	4417      	add	r7, r2
 801e328:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e32c:	1ab6      	subs	r6, r6, r2
 801e32e:	892a      	ldrh	r2, [r5, #8]
 801e330:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801e334:	4416      	add	r6, r2
 801e336:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801e338:	4416      	add	r6, r2
 801e33a:	4a08      	ldr	r2, [pc, #32]	@ (801e35c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801e33c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801e340:	2600      	movs	r6, #0
 801e342:	9207      	str	r2, [sp, #28]
 801e344:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801e348:	6803      	ldr	r3, [r0, #0]
 801e34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e34c:	4798      	blx	r3
 801e34e:	792b      	ldrb	r3, [r5, #4]
 801e350:	b10b      	cbz	r3, 801e356 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e352:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801e356:	b00a      	add	sp, #40	@ 0x28
 801e358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e35c:	0803096c 	.word	0x0803096c

0801e360 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801e360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e364:	460c      	mov	r4, r1
 801e366:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801e368:	b088      	sub	sp, #32
 801e36a:	4605      	mov	r5, r0
 801e36c:	2900      	cmp	r1, #0
 801e36e:	d06d      	beq.n	801e44c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801e370:	4668      	mov	r0, sp
 801e372:	f7ff fb87 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e376:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801e378:	88e3      	ldrh	r3, [r4, #6]
 801e37a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801e37e:	440b      	add	r3, r1
 801e380:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801e384:	b21b      	sxth	r3, r3
 801e386:	4543      	cmp	r3, r8
 801e388:	db31      	blt.n	801e3ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e38a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801e38e:	44c4      	add	ip, r8
 801e390:	fa0f fc8c 	sxth.w	ip, ip
 801e394:	4563      	cmp	r3, ip
 801e396:	da2a      	bge.n	801e3ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e398:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801e39a:	8926      	ldrh	r6, [r4, #8]
 801e39c:	4416      	add	r6, r2
 801e39e:	b236      	sxth	r6, r6
 801e3a0:	42be      	cmp	r6, r7
 801e3a2:	db24      	blt.n	801e3ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e3a4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e3a8:	4438      	add	r0, r7
 801e3aa:	b200      	sxth	r0, r0
 801e3ac:	4286      	cmp	r6, r0
 801e3ae:	da1e      	bge.n	801e3ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e3b0:	8963      	ldrh	r3, [r4, #10]
 801e3b2:	4419      	add	r1, r3
 801e3b4:	b209      	sxth	r1, r1
 801e3b6:	4541      	cmp	r1, r8
 801e3b8:	db08      	blt.n	801e3cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e3ba:	4561      	cmp	r1, ip
 801e3bc:	da06      	bge.n	801e3cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e3be:	89a3      	ldrh	r3, [r4, #12]
 801e3c0:	441a      	add	r2, r3
 801e3c2:	b212      	sxth	r2, r2
 801e3c4:	42ba      	cmp	r2, r7
 801e3c6:	db01      	blt.n	801e3cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e3c8:	4282      	cmp	r2, r0
 801e3ca:	db10      	blt.n	801e3ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e3cc:	4b21      	ldr	r3, [pc, #132]	@ (801e454 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801e3ce:	a904      	add	r1, sp, #16
 801e3d0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801e3d2:	9304      	str	r3, [sp, #16]
 801e3d4:	2302      	movs	r3, #2
 801e3d6:	f88d 3014 	strb.w	r3, [sp, #20]
 801e3da:	2300      	movs	r3, #0
 801e3dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e3e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e3e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e3e8:	6803      	ldr	r3, [r0, #0]
 801e3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e3ec:	4798      	blx	r3
 801e3ee:	1d29      	adds	r1, r5, #4
 801e3f0:	a802      	add	r0, sp, #8
 801e3f2:	f7ff fb47 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e3f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e3fa:	88e0      	ldrh	r0, [r4, #6]
 801e3fc:	eba3 0808 	sub.w	r8, r3, r8
 801e400:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e404:	7921      	ldrb	r1, [r4, #4]
 801e406:	fa1f f888 	uxth.w	r8, r8
 801e40a:	1bdf      	subs	r7, r3, r7
 801e40c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801e410:	b2bb      	uxth	r3, r7
 801e412:	4440      	add	r0, r8
 801e414:	8922      	ldrh	r2, [r4, #8]
 801e416:	8967      	ldrh	r7, [r4, #10]
 801e418:	4460      	add	r0, ip
 801e41a:	89a4      	ldrh	r4, [r4, #12]
 801e41c:	441a      	add	r2, r3
 801e41e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801e420:	44b8      	add	r8, r7
 801e422:	4423      	add	r3, r4
 801e424:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e428:	4432      	add	r2, r6
 801e42a:	44e0      	add	r8, ip
 801e42c:	4433      	add	r3, r6
 801e42e:	4c0a      	ldr	r4, [pc, #40]	@ (801e458 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801e430:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801e432:	f88d 1014 	strb.w	r1, [sp, #20]
 801e436:	a904      	add	r1, sp, #16
 801e438:	9404      	str	r4, [sp, #16]
 801e43a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e43e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801e442:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e446:	6803      	ldr	r3, [r0, #0]
 801e448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e44a:	4798      	blx	r3
 801e44c:	b008      	add	sp, #32
 801e44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e452:	bf00      	nop
 801e454:	0803096c 	.word	0x0803096c
 801e458:	08030980 	.word	0x08030980

0801e45c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e45e:	4604      	mov	r4, r0
 801e460:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e464:	3201      	adds	r2, #1
 801e466:	d112      	bne.n	801e48e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e468:	2500      	movs	r5, #0
 801e46a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e46e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e472:	6803      	ldr	r3, [r0, #0]
 801e474:	9500      	str	r5, [sp, #0]
 801e476:	466d      	mov	r5, sp
 801e478:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e47c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e480:	4629      	mov	r1, r5
 801e482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e484:	4798      	blx	r3
 801e486:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e48a:	e884 0003 	stmia.w	r4, {r0, r1}
 801e48e:	4620      	mov	r0, r4
 801e490:	b003      	add	sp, #12
 801e492:	bd30      	pop	{r4, r5, pc}

0801e494 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e494:	b513      	push	{r0, r1, r4, lr}
 801e496:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e49a:	4604      	mov	r4, r0
 801e49c:	3301      	adds	r3, #1
 801e49e:	d109      	bne.n	801e4b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e4a0:	4601      	mov	r1, r0
 801e4a2:	4668      	mov	r0, sp
 801e4a4:	f7ff faee 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e4a8:	f8bd 3000 	ldrh.w	r3, [sp]
 801e4ac:	8423      	strh	r3, [r4, #32]
 801e4ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e4b2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801e4b4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e4b8:	b002      	add	sp, #8
 801e4ba:	bd10      	pop	{r4, pc}

0801e4bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e4bc:	b513      	push	{r0, r1, r4, lr}
 801e4be:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801e4c2:	4604      	mov	r4, r0
 801e4c4:	3301      	adds	r3, #1
 801e4c6:	d109      	bne.n	801e4dc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e4c8:	4601      	mov	r1, r0
 801e4ca:	4668      	mov	r0, sp
 801e4cc:	f7ff fada 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e4d0:	f8bd 3000 	ldrh.w	r3, [sp]
 801e4d4:	8423      	strh	r3, [r4, #32]
 801e4d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e4da:	8463      	strh	r3, [r4, #34]	@ 0x22
 801e4dc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801e4e0:	b002      	add	sp, #8
 801e4e2:	bd10      	pop	{r4, pc}

0801e4e4 <_ZN8touchgfx6ScreenC1Ev>:
 801e4e4:	b570      	push	{r4, r5, r6, lr}
 801e4e6:	4b17      	ldr	r3, [pc, #92]	@ (801e544 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e4e8:	4605      	mov	r5, r0
 801e4ea:	4a17      	ldr	r2, [pc, #92]	@ (801e548 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e4ec:	2101      	movs	r1, #1
 801e4ee:	f845 3b04 	str.w	r3, [r5], #4
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	6042      	str	r2, [r0, #4]
 801e4f6:	4604      	mov	r4, r0
 801e4f8:	8103      	strh	r3, [r0, #8]
 801e4fa:	8143      	strh	r3, [r0, #10]
 801e4fc:	8183      	strh	r3, [r0, #12]
 801e4fe:	81c3      	strh	r3, [r0, #14]
 801e500:	8203      	strh	r3, [r0, #16]
 801e502:	8243      	strh	r3, [r0, #18]
 801e504:	8283      	strh	r3, [r0, #20]
 801e506:	82c3      	strh	r3, [r0, #22]
 801e508:	6203      	str	r3, [r0, #32]
 801e50a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801e50c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801e50e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801e512:	6343      	str	r3, [r0, #52]	@ 0x34
 801e514:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801e518:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801e51c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e520:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801e524:	4b09      	ldr	r3, [pc, #36]	@ (801e54c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e526:	4628      	mov	r0, r5
 801e528:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e52c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801e52e:	4a08      	ldr	r2, [pc, #32]	@ (801e550 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e530:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e534:	4798      	blx	r3
 801e536:	6863      	ldr	r3, [r4, #4]
 801e538:	4628      	mov	r0, r5
 801e53a:	4631      	mov	r1, r6
 801e53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e53e:	4798      	blx	r3
 801e540:	4620      	mov	r0, r4
 801e542:	bd70      	pop	{r4, r5, r6, pc}
 801e544:	080309a8 	.word	0x080309a8
 801e548:	080305c0 	.word	0x080305c0
 801e54c:	24015dca 	.word	0x24015dca
 801e550:	24015dc8 	.word	0x24015dc8

0801e554 <_ZN8touchgfx6Screen4drawEv>:
 801e554:	4b09      	ldr	r3, [pc, #36]	@ (801e57c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e556:	b507      	push	{r0, r1, r2, lr}
 801e558:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e55c:	2100      	movs	r1, #0
 801e55e:	4b08      	ldr	r3, [pc, #32]	@ (801e580 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e560:	9100      	str	r1, [sp, #0]
 801e562:	4669      	mov	r1, sp
 801e564:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e568:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e56c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e570:	6803      	ldr	r3, [r0, #0]
 801e572:	689b      	ldr	r3, [r3, #8]
 801e574:	4798      	blx	r3
 801e576:	b003      	add	sp, #12
 801e578:	f85d fb04 	ldr.w	pc, [sp], #4
 801e57c:	24015dc8 	.word	0x24015dc8
 801e580:	24015dca 	.word	0x24015dca

0801e584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e588:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e58c:	b089      	sub	sp, #36	@ 0x24
 801e58e:	4680      	mov	r8, r0
 801e590:	460c      	mov	r4, r1
 801e592:	2b00      	cmp	r3, #0
 801e594:	4615      	mov	r5, r2
 801e596:	dd0e      	ble.n	801e5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e598:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	dd0a      	ble.n	801e5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e5a0:	4628      	mov	r0, r5
 801e5a2:	f7ff ff5b 	bl	801e45c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e5a6:	4621      	mov	r1, r4
 801e5a8:	f7fe f879 	bl	801c69e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e5ac:	69eb      	ldr	r3, [r5, #28]
 801e5ae:	b928      	cbnz	r0, 801e5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e5b0:	461d      	mov	r5, r3
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d1f4      	bne.n	801e5a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e5b6:	b009      	add	sp, #36	@ 0x24
 801e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5bc:	ae04      	add	r6, sp, #16
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	f000 80b5 	beq.w	801e72e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e5c4:	682b      	ldr	r3, [r5, #0]
 801e5c6:	4629      	mov	r1, r5
 801e5c8:	a802      	add	r0, sp, #8
 801e5ca:	68db      	ldr	r3, [r3, #12]
 801e5cc:	4798      	blx	r3
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	f7ff ff60 	bl	801e494 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e5d4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e5d8:	4407      	add	r7, r0
 801e5da:	4628      	mov	r0, r5
 801e5dc:	f7ff ff6e 	bl	801e4bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e5e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e5e4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e5e8:	b23f      	sxth	r7, r7
 801e5ea:	4418      	add	r0, r3
 801e5ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e5f0:	4621      	mov	r1, r4
 801e5f2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e5f6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e5fa:	4630      	mov	r0, r6
 801e5fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e600:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e604:	f7f9 fda4 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801e608:	4628      	mov	r0, r5
 801e60a:	f7ff ff27 	bl	801e45c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e60e:	ab06      	add	r3, sp, #24
 801e610:	4602      	mov	r2, r0
 801e612:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e616:	e883 0003 	stmia.w	r3, {r0, r1}
 801e61a:	4611      	mov	r1, r2
 801e61c:	4618      	mov	r0, r3
 801e61e:	f7f9 fd97 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801e622:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e626:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e62a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e62e:	4299      	cmp	r1, r3
 801e630:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e634:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e638:	d10b      	bne.n	801e652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e63a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e63e:	4552      	cmp	r2, sl
 801e640:	d107      	bne.n	801e652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e642:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e646:	455a      	cmp	r2, fp
 801e648:	d103      	bne.n	801e652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e64a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e64e:	454a      	cmp	r2, r9
 801e650:	d06d      	beq.n	801e72e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e652:	f1bb 0f00 	cmp.w	fp, #0
 801e656:	dd65      	ble.n	801e724 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e658:	f1b9 0f00 	cmp.w	r9, #0
 801e65c:	dd62      	ble.n	801e724 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e65e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e662:	fa1f f08a 	uxth.w	r0, sl
 801e666:	4552      	cmp	r2, sl
 801e668:	9000      	str	r0, [sp, #0]
 801e66a:	da12      	bge.n	801e692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e66c:	9301      	str	r3, [sp, #4]
 801e66e:	9b00      	ldr	r3, [sp, #0]
 801e670:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e674:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e678:	1a9a      	subs	r2, r3, r2
 801e67a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e67e:	4631      	mov	r1, r6
 801e680:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e684:	4640      	mov	r0, r8
 801e686:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e68a:	69ea      	ldr	r2, [r5, #28]
 801e68c:	f7ff ff7a 	bl	801e584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e690:	9b01      	ldr	r3, [sp, #4]
 801e692:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e696:	b29f      	uxth	r7, r3
 801e698:	429a      	cmp	r2, r3
 801e69a:	da0d      	bge.n	801e6b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e69c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e6a0:	1aba      	subs	r2, r7, r2
 801e6a2:	f8ad a012 	strh.w	sl, [sp, #18]
 801e6a6:	4631      	mov	r1, r6
 801e6a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e6ac:	4640      	mov	r0, r8
 801e6ae:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e6b2:	69ea      	ldr	r2, [r5, #28]
 801e6b4:	f7ff ff66 	bl	801e584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e6b8:	8822      	ldrh	r2, [r4, #0]
 801e6ba:	445f      	add	r7, fp
 801e6bc:	88a3      	ldrh	r3, [r4, #4]
 801e6be:	b2bf      	uxth	r7, r7
 801e6c0:	4413      	add	r3, r2
 801e6c2:	b23a      	sxth	r2, r7
 801e6c4:	b29b      	uxth	r3, r3
 801e6c6:	b219      	sxth	r1, r3
 801e6c8:	4291      	cmp	r1, r2
 801e6ca:	dd0d      	ble.n	801e6e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e6cc:	1bdb      	subs	r3, r3, r7
 801e6ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e6d2:	f8ad a012 	strh.w	sl, [sp, #18]
 801e6d6:	4631      	mov	r1, r6
 801e6d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e6dc:	4640      	mov	r0, r8
 801e6de:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e6e2:	69ea      	ldr	r2, [r5, #28]
 801e6e4:	f7ff ff4e 	bl	801e584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e6e8:	88e2      	ldrh	r2, [r4, #6]
 801e6ea:	8863      	ldrh	r3, [r4, #2]
 801e6ec:	4413      	add	r3, r2
 801e6ee:	9a00      	ldr	r2, [sp, #0]
 801e6f0:	444a      	add	r2, r9
 801e6f2:	b29b      	uxth	r3, r3
 801e6f4:	fa1f f982 	uxth.w	r9, r2
 801e6f8:	b219      	sxth	r1, r3
 801e6fa:	fa0f f289 	sxth.w	r2, r9
 801e6fe:	428a      	cmp	r2, r1
 801e700:	da15      	bge.n	801e72e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e702:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e706:	eba3 0309 	sub.w	r3, r3, r9
 801e70a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e70e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e712:	4631      	mov	r1, r6
 801e714:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e718:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e71c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e720:	69ea      	ldr	r2, [r5, #28]
 801e722:	e001      	b.n	801e728 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e724:	69ea      	ldr	r2, [r5, #28]
 801e726:	4621      	mov	r1, r4
 801e728:	4640      	mov	r0, r8
 801e72a:	f7ff ff2b 	bl	801e584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e72e:	4628      	mov	r0, r5
 801e730:	f7ff fe94 	bl	801e45c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e734:	6861      	ldr	r1, [r4, #4]
 801e736:	4602      	mov	r2, r0
 801e738:	4633      	mov	r3, r6
 801e73a:	6820      	ldr	r0, [r4, #0]
 801e73c:	c303      	stmia	r3!, {r0, r1}
 801e73e:	4611      	mov	r1, r2
 801e740:	4630      	mov	r0, r6
 801e742:	f7f9 fd05 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801e746:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	f77f af33 	ble.w	801e5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e750:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e754:	2b00      	cmp	r3, #0
 801e756:	f77f af2e 	ble.w	801e5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e75a:	4628      	mov	r0, r5
 801e75c:	f7ff fe9a 	bl	801e494 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e760:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e764:	1a18      	subs	r0, r3, r0
 801e766:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e76a:	4628      	mov	r0, r5
 801e76c:	f7ff fea6 	bl	801e4bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e770:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e774:	4631      	mov	r1, r6
 801e776:	1a18      	subs	r0, r3, r0
 801e778:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e77c:	4628      	mov	r0, r5
 801e77e:	682b      	ldr	r3, [r5, #0]
 801e780:	689b      	ldr	r3, [r3, #8]
 801e782:	4798      	blx	r3
 801e784:	e717      	b.n	801e5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e786 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e786:	b570      	push	{r4, r5, r6, lr}
 801e788:	1d06      	adds	r6, r0, #4
 801e78a:	b086      	sub	sp, #24
 801e78c:	460c      	mov	r4, r1
 801e78e:	2300      	movs	r3, #0
 801e790:	4631      	mov	r1, r6
 801e792:	4605      	mov	r5, r0
 801e794:	a802      	add	r0, sp, #8
 801e796:	9301      	str	r3, [sp, #4]
 801e798:	f7ff f974 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e79c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e7a0:	8822      	ldrh	r2, [r4, #0]
 801e7a2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e7a6:	1ad2      	subs	r2, r2, r3
 801e7a8:	8863      	ldrh	r3, [r4, #2]
 801e7aa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e7ae:	1a5b      	subs	r3, r3, r1
 801e7b0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e7b4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e7b8:	aa01      	add	r2, sp, #4
 801e7ba:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e7be:	4630      	mov	r0, r6
 801e7c0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e7c4:	a904      	add	r1, sp, #16
 801e7c6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e7ca:	f7f9 fd99 	bl	8018300 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e7ce:	9a01      	ldr	r2, [sp, #4]
 801e7d0:	b11a      	cbz	r2, 801e7da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e7d2:	4621      	mov	r1, r4
 801e7d4:	4628      	mov	r0, r5
 801e7d6:	f7ff fed5 	bl	801e584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e7da:	b006      	add	sp, #24
 801e7dc:	bd70      	pop	{r4, r5, r6, pc}

0801e7de <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e7de:	4602      	mov	r2, r0
 801e7e0:	b530      	push	{r4, r5, lr}
 801e7e2:	4604      	mov	r4, r0
 801e7e4:	b085      	sub	sp, #20
 801e7e6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e7ea:	460d      	mov	r5, r1
 801e7ec:	466b      	mov	r3, sp
 801e7ee:	6851      	ldr	r1, [r2, #4]
 801e7f0:	c303      	stmia	r3!, {r0, r1}
 801e7f2:	4629      	mov	r1, r5
 801e7f4:	4668      	mov	r0, sp
 801e7f6:	f7f9 fcab 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 801e7fa:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801e7fe:	b12b      	cbz	r3, 801e80c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e800:	4669      	mov	r1, sp
 801e802:	4620      	mov	r0, r4
 801e804:	f7ff ffbf 	bl	801e786 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e808:	b005      	add	sp, #20
 801e80a:	bd30      	pop	{r4, r5, pc}
 801e80c:	3404      	adds	r4, #4
 801e80e:	a802      	add	r0, sp, #8
 801e810:	4621      	mov	r1, r4
 801e812:	f7ff f937 	bl	801da84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e816:	f8bd 3000 	ldrh.w	r3, [sp]
 801e81a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e81e:	4669      	mov	r1, sp
 801e820:	4620      	mov	r0, r4
 801e822:	1a9b      	subs	r3, r3, r2
 801e824:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e828:	f8ad 3000 	strh.w	r3, [sp]
 801e82c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e830:	1a9b      	subs	r3, r3, r2
 801e832:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e836:	f7f9 fd2a 	bl	801828e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e83a:	e7e5      	b.n	801e808 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e83c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e83c:	460b      	mov	r3, r1
 801e83e:	680a      	ldr	r2, [r1, #0]
 801e840:	1d01      	adds	r1, r0, #4
 801e842:	6992      	ldr	r2, [r2, #24]
 801e844:	4618      	mov	r0, r3
 801e846:	4710      	bx	r2

0801e848 <_ZN8touchgfx12TextProviderC1Ev>:
 801e848:	b538      	push	{r3, r4, r5, lr}
 801e84a:	2500      	movs	r5, #0
 801e84c:	2302      	movs	r3, #2
 801e84e:	4604      	mov	r4, r0
 801e850:	220e      	movs	r2, #14
 801e852:	7403      	strb	r3, [r0, #16]
 801e854:	4629      	mov	r1, r5
 801e856:	6145      	str	r5, [r0, #20]
 801e858:	7605      	strb	r5, [r0, #24]
 801e85a:	83c5      	strh	r5, [r0, #30]
 801e85c:	8405      	strh	r5, [r0, #32]
 801e85e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801e860:	8705      	strh	r5, [r0, #56]	@ 0x38
 801e862:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801e864:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801e868:	e9c0 5500 	strd	r5, r5, [r0]
 801e86c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801e870:	304c      	adds	r0, #76	@ 0x4c
 801e872:	f00c fc69 	bl	802b148 <memset>
 801e876:	2301      	movs	r3, #1
 801e878:	4620      	mov	r0, r4
 801e87a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801e87e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e882:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801e886:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801e88a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801e88e:	f7e5 f97f 	bl	8003b90 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e892:	4620      	mov	r0, r4
 801e894:	bd38      	pop	{r3, r4, r5, pc}

0801e896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e896:	b530      	push	{r4, r5, lr}
 801e898:	2500      	movs	r5, #0
 801e89a:	2401      	movs	r4, #1
 801e89c:	6843      	ldr	r3, [r0, #4]
 801e89e:	b913      	cbnz	r3, 801e8a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e8a0:	6803      	ldr	r3, [r0, #0]
 801e8a2:	b313      	cbz	r3, 801e8ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e8a4:	6043      	str	r3, [r0, #4]
 801e8a6:	7e03      	ldrb	r3, [r0, #24]
 801e8a8:	b143      	cbz	r3, 801e8bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e8aa:	6943      	ldr	r3, [r0, #20]
 801e8ac:	b12b      	cbz	r3, 801e8ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e8ae:	881a      	ldrh	r2, [r3, #0]
 801e8b0:	b11a      	cbz	r2, 801e8ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e8b2:	1c9a      	adds	r2, r3, #2
 801e8b4:	6142      	str	r2, [r0, #20]
 801e8b6:	8818      	ldrh	r0, [r3, #0]
 801e8b8:	bd30      	pop	{r4, r5, pc}
 801e8ba:	7605      	strb	r5, [r0, #24]
 801e8bc:	6843      	ldr	r3, [r0, #4]
 801e8be:	8819      	ldrh	r1, [r3, #0]
 801e8c0:	b199      	cbz	r1, 801e8ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e8c2:	1c9a      	adds	r2, r3, #2
 801e8c4:	2902      	cmp	r1, #2
 801e8c6:	6042      	str	r2, [r0, #4]
 801e8c8:	d1f5      	bne.n	801e8b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e8ca:	7c03      	ldrb	r3, [r0, #16]
 801e8cc:	2b01      	cmp	r3, #1
 801e8ce:	d8e5      	bhi.n	801e89c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e8d0:	1c5a      	adds	r2, r3, #1
 801e8d2:	3302      	adds	r3, #2
 801e8d4:	7402      	strb	r2, [r0, #16]
 801e8d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e8da:	6143      	str	r3, [r0, #20]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d0dd      	beq.n	801e89c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e8e0:	881b      	ldrh	r3, [r3, #0]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d0da      	beq.n	801e89c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e8e6:	7604      	strb	r4, [r0, #24]
 801e8e8:	e7d8      	b.n	801e89c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e8ea:	2000      	movs	r0, #0
 801e8ec:	e7e4      	b.n	801e8b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e8ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e8ee:	6001      	str	r1, [r0, #0]
 801e8f0:	2100      	movs	r1, #0
 801e8f2:	b430      	push	{r4, r5}
 801e8f4:	6041      	str	r1, [r0, #4]
 801e8f6:	6815      	ldr	r5, [r2, #0]
 801e8f8:	6085      	str	r5, [r0, #8]
 801e8fa:	6852      	ldr	r2, [r2, #4]
 801e8fc:	6443      	str	r3, [r0, #68]	@ 0x44
 801e8fe:	9b02      	ldr	r3, [sp, #8]
 801e900:	60c2      	str	r2, [r0, #12]
 801e902:	7401      	strb	r1, [r0, #16]
 801e904:	6141      	str	r1, [r0, #20]
 801e906:	7601      	strb	r1, [r0, #24]
 801e908:	8701      	strh	r1, [r0, #56]	@ 0x38
 801e90a:	8401      	strh	r1, [r0, #32]
 801e90c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801e910:	6483      	str	r3, [r0, #72]	@ 0x48
 801e912:	bc30      	pop	{r4, r5}
 801e914:	f7e5 b93c 	b.w	8003b90 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e918 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801e918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e91a:	4605      	mov	r5, r0
 801e91c:	4608      	mov	r0, r1
 801e91e:	b1f1      	cbz	r1, 801e95e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801e920:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801e924:	460b      	mov	r3, r1
 801e926:	f101 0708 	add.w	r7, r1, #8
 801e92a:	4622      	mov	r2, r4
 801e92c:	6818      	ldr	r0, [r3, #0]
 801e92e:	3308      	adds	r3, #8
 801e930:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e934:	4626      	mov	r6, r4
 801e936:	42bb      	cmp	r3, r7
 801e938:	c603      	stmia	r6!, {r0, r1}
 801e93a:	4634      	mov	r4, r6
 801e93c:	d1f6      	bne.n	801e92c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801e93e:	6818      	ldr	r0, [r3, #0]
 801e940:	6030      	str	r0, [r6, #0]
 801e942:	4610      	mov	r0, r2
 801e944:	889b      	ldrh	r3, [r3, #4]
 801e946:	80b3      	strh	r3, [r6, #4]
 801e948:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801e94c:	015b      	lsls	r3, r3, #5
 801e94e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801e952:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801e956:	430b      	orrs	r3, r1
 801e958:	425b      	negs	r3, r3
 801e95a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801e95e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e960 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801e960:	b538      	push	{r3, r4, r5, lr}
 801e962:	460c      	mov	r4, r1
 801e964:	6811      	ldr	r1, [r2, #0]
 801e966:	4610      	mov	r0, r2
 801e968:	68cd      	ldr	r5, [r1, #12]
 801e96a:	4619      	mov	r1, r3
 801e96c:	47a8      	blx	r5
 801e96e:	2800      	cmp	r0, #0
 801e970:	bf08      	it	eq
 801e972:	4620      	moveq	r0, r4
 801e974:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801e978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e97c:	468c      	mov	ip, r1
 801e97e:	4604      	mov	r4, r0
 801e980:	4615      	mov	r5, r2
 801e982:	b942      	cbnz	r2, 801e996 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801e984:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801e988:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801e98c:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801e990:	4628      	mov	r0, r5
 801e992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e996:	7b50      	ldrb	r0, [r2, #13]
 801e998:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801e99c:	8893      	ldrh	r3, [r2, #4]
 801e99e:	0106      	lsls	r6, r0, #4
 801e9a0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801e9a4:	79ee      	ldrb	r6, [r5, #7]
 801e9a6:	4316      	orrs	r6, r2
 801e9a8:	185a      	adds	r2, r3, r1
 801e9aa:	b291      	uxth	r1, r2
 801e9ac:	b2b7      	uxth	r7, r6
 801e9ae:	291d      	cmp	r1, #29
 801e9b0:	d87f      	bhi.n	801eab2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801e9b2:	2201      	movs	r2, #1
 801e9b4:	10f6      	asrs	r6, r6, #3
 801e9b6:	408a      	lsls	r2, r1
 801e9b8:	4974      	ldr	r1, [pc, #464]	@ (801eb8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801e9ba:	420a      	tst	r2, r1
 801e9bc:	d12e      	bne.n	801ea1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801e9be:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801e9c2:	d076      	beq.n	801eab2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801e9c4:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801e9c8:	462b      	mov	r3, r5
 801e9ca:	f105 0e08 	add.w	lr, r5, #8
 801e9ce:	4615      	mov	r5, r2
 801e9d0:	6818      	ldr	r0, [r3, #0]
 801e9d2:	3308      	adds	r3, #8
 801e9d4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e9d8:	4694      	mov	ip, r2
 801e9da:	4573      	cmp	r3, lr
 801e9dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e9e0:	4662      	mov	r2, ip
 801e9e2:	d1f5      	bne.n	801e9d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801e9e4:	6818      	ldr	r0, [r3, #0]
 801e9e6:	f8cc 0000 	str.w	r0, [ip]
 801e9ea:	889b      	ldrh	r3, [r3, #4]
 801e9ec:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e9f0:	b2b3      	uxth	r3, r6
 801e9f2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801e9f6:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801e9fa:	1aca      	subs	r2, r1, r3
 801e9fc:	1bcf      	subs	r7, r1, r7
 801e9fe:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801ea02:	b292      	uxth	r2, r2
 801ea04:	1afb      	subs	r3, r7, r3
 801ea06:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801ea0a:	10d2      	asrs	r2, r2, #3
 801ea0c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801ea10:	4302      	orrs	r2, r0
 801ea12:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801ea16:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801ea1a:	e7b9      	b.n	801e990 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ea1c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801ea20:	462b      	mov	r3, r5
 801ea22:	f105 0808 	add.w	r8, r5, #8
 801ea26:	4615      	mov	r5, r2
 801ea28:	6818      	ldr	r0, [r3, #0]
 801ea2a:	3308      	adds	r3, #8
 801ea2c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ea30:	4696      	mov	lr, r2
 801ea32:	4543      	cmp	r3, r8
 801ea34:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ea38:	4672      	mov	r2, lr
 801ea3a:	d1f5      	bne.n	801ea28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801ea3c:	6818      	ldr	r0, [r3, #0]
 801ea3e:	f8ce 0000 	str.w	r0, [lr]
 801ea42:	889b      	ldrh	r3, [r3, #4]
 801ea44:	f8ae 3004 	strh.w	r3, [lr, #4]
 801ea48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801ea4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ea4e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801ea50:	f640 6333 	movw	r3, #3635	@ 0xe33
 801ea54:	4299      	cmp	r1, r3
 801ea56:	d111      	bne.n	801ea7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801ea58:	f8dc 3000 	ldr.w	r3, [ip]
 801ea5c:	4660      	mov	r0, ip
 801ea5e:	68db      	ldr	r3, [r3, #12]
 801ea60:	4798      	blx	r3
 801ea62:	7b41      	ldrb	r1, [r0, #13]
 801ea64:	00cb      	lsls	r3, r1, #3
 801ea66:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ea6a:	7a03      	ldrb	r3, [r0, #8]
 801ea6c:	4313      	orrs	r3, r2
 801ea6e:	064a      	lsls	r2, r1, #25
 801ea70:	bf44      	itt	mi
 801ea72:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ea76:	b21b      	sxthmi	r3, r3
 801ea78:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ea7c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801ea80:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801ea84:	443b      	add	r3, r7
 801ea86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ea8a:	4433      	add	r3, r6
 801ea8c:	b29b      	uxth	r3, r3
 801ea8e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ea92:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801ea96:	10db      	asrs	r3, r3, #3
 801ea98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ea9c:	4313      	orrs	r3, r2
 801ea9e:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801eaa2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801eaa6:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801eaaa:	1a9b      	subs	r3, r3, r2
 801eaac:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801eab0:	e76e      	b.n	801e990 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801eab2:	f023 0204 	bic.w	r2, r3, #4
 801eab6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801eaba:	428a      	cmp	r2, r1
 801eabc:	d003      	beq.n	801eac6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801eabe:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801eac2:	4293      	cmp	r3, r2
 801eac4:	d120      	bne.n	801eb08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801eac6:	3b01      	subs	r3, #1
 801eac8:	4662      	mov	r2, ip
 801eaca:	4629      	mov	r1, r5
 801eacc:	4620      	mov	r0, r4
 801eace:	b29b      	uxth	r3, r3
 801ead0:	f7ff ff46 	bl	801e960 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ead4:	7b41      	ldrb	r1, [r0, #13]
 801ead6:	00cb      	lsls	r3, r1, #3
 801ead8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801eadc:	7a03      	ldrb	r3, [r0, #8]
 801eade:	0648      	lsls	r0, r1, #25
 801eae0:	ea43 0302 	orr.w	r3, r3, r2
 801eae4:	bf44      	itt	mi
 801eae6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801eaea:	b21b      	sxthmi	r3, r3
 801eaec:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801eaf0:	7b6b      	ldrb	r3, [r5, #13]
 801eaf2:	7aaa      	ldrb	r2, [r5, #10]
 801eaf4:	005b      	lsls	r3, r3, #1
 801eaf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eafa:	4313      	orrs	r3, r2
 801eafc:	115a      	asrs	r2, r3, #5
 801eafe:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801eb02:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801eb06:	e032      	b.n	801eb6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801eb08:	00c2      	lsls	r2, r0, #3
 801eb0a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801eb0e:	7a2a      	ldrb	r2, [r5, #8]
 801eb10:	430a      	orrs	r2, r1
 801eb12:	0641      	lsls	r1, r0, #25
 801eb14:	f640 6109 	movw	r1, #3593	@ 0xe09
 801eb18:	bf44      	itt	mi
 801eb1a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801eb1e:	b212      	sxthmi	r2, r2
 801eb20:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801eb24:	f023 0210 	bic.w	r2, r3, #16
 801eb28:	428a      	cmp	r2, r1
 801eb2a:	d003      	beq.n	801eb34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801eb2c:	f640 6213 	movw	r2, #3603	@ 0xe13
 801eb30:	4293      	cmp	r3, r2
 801eb32:	d129      	bne.n	801eb88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801eb34:	7b6e      	ldrb	r6, [r5, #13]
 801eb36:	4629      	mov	r1, r5
 801eb38:	4620      	mov	r0, r4
 801eb3a:	0076      	lsls	r6, r6, #1
 801eb3c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801eb40:	7aae      	ldrb	r6, [r5, #10]
 801eb42:	4316      	orrs	r6, r2
 801eb44:	f640 6213 	movw	r2, #3603	@ 0xe13
 801eb48:	4293      	cmp	r3, r2
 801eb4a:	4662      	mov	r2, ip
 801eb4c:	bf16      	itet	ne
 801eb4e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801eb52:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801eb56:	b29b      	uxthne	r3, r3
 801eb58:	f7ff ff02 	bl	801e960 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801eb5c:	7b43      	ldrb	r3, [r0, #13]
 801eb5e:	7a82      	ldrb	r2, [r0, #10]
 801eb60:	005b      	lsls	r3, r3, #1
 801eb62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eb66:	4313      	orrs	r3, r2
 801eb68:	1af6      	subs	r6, r6, r3
 801eb6a:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801eb6e:	7b69      	ldrb	r1, [r5, #13]
 801eb70:	00cb      	lsls	r3, r1, #3
 801eb72:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801eb76:	7a2b      	ldrb	r3, [r5, #8]
 801eb78:	4313      	orrs	r3, r2
 801eb7a:	064a      	lsls	r2, r1, #25
 801eb7c:	bf44      	itt	mi
 801eb7e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801eb82:	b21b      	sxthmi	r3, r3
 801eb84:	1bdb      	subs	r3, r3, r7
 801eb86:	e746      	b.n	801ea16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801eb88:	2300      	movs	r3, #0
 801eb8a:	e7ba      	b.n	801eb02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801eb8c:	3fc00079 	.word	0x3fc00079

0801eb90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801eb90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eb94:	4604      	mov	r4, r0
 801eb96:	b942      	cbnz	r2, 801ebaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801eb98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801eb9c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801eba0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801eba4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801eba8:	e047      	b.n	801ec3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ebaa:	7b51      	ldrb	r1, [r2, #13]
 801ebac:	8893      	ldrh	r3, [r2, #4]
 801ebae:	010d      	lsls	r5, r1, #4
 801ebb0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801ebb4:	79d5      	ldrb	r5, [r2, #7]
 801ebb6:	4305      	orrs	r5, r0
 801ebb8:	2d04      	cmp	r5, #4
 801ebba:	bfcc      	ite	gt
 801ebbc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ebc0:	f04f 0e01 	movle.w	lr, #1
 801ebc4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801ebc8:	f200 80ab 	bhi.w	801ed22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ebcc:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801ebd0:	4283      	cmp	r3, r0
 801ebd2:	d216      	bcs.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ebd4:	f240 605b 	movw	r0, #1627	@ 0x65b
 801ebd8:	4283      	cmp	r3, r0
 801ebda:	d859      	bhi.n	801ec90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ebdc:	f240 6057 	movw	r0, #1623	@ 0x657
 801ebe0:	4283      	cmp	r3, r0
 801ebe2:	d20e      	bcs.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ebe4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801ebe8:	d24a      	bcs.n	801ec80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ebea:	f240 604e 	movw	r0, #1614	@ 0x64e
 801ebee:	4283      	cmp	r3, r0
 801ebf0:	d207      	bcs.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ebf2:	f240 601a 	movw	r0, #1562	@ 0x61a
 801ebf6:	4283      	cmp	r3, r0
 801ebf8:	d02a      	beq.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ebfa:	d821      	bhi.n	801ec40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ebfc:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801ec00:	d35b      	bcc.n	801ecba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ec02:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801ec06:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ec0a:	f040 80d0 	bne.w	801edae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ec0e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801ec12:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ec16:	f040 80ca 	bne.w	801edae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ec1a:	00cb      	lsls	r3, r1, #3
 801ec1c:	0649      	lsls	r1, r1, #25
 801ec1e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801ec22:	7a13      	ldrb	r3, [r2, #8]
 801ec24:	ea43 0300 	orr.w	r3, r3, r0
 801ec28:	bf44      	itt	mi
 801ec2a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ec2e:	b21b      	sxthmi	r3, r3
 801ec30:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ec34:	1b5d      	subs	r5, r3, r5
 801ec36:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801ec3a:	4610      	mov	r0, r2
 801ec3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec40:	f240 604b 	movw	r0, #1611	@ 0x64b
 801ec44:	4283      	cmp	r3, r0
 801ec46:	d338      	bcc.n	801ecba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ec48:	f240 604c 	movw	r0, #1612	@ 0x64c
 801ec4c:	4283      	cmp	r3, r0
 801ec4e:	d9d8      	bls.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ec50:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801ec54:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801ec58:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ec5c:	f040 80f3 	bne.w	801ee46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801ec60:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ec64:	f040 80ef 	bne.w	801ee46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801ec68:	00cb      	lsls	r3, r1, #3
 801ec6a:	064e      	lsls	r6, r1, #25
 801ec6c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801ec70:	7a13      	ldrb	r3, [r2, #8]
 801ec72:	ea43 0300 	orr.w	r3, r3, r0
 801ec76:	bf44      	itt	mi
 801ec78:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ec7c:	b21b      	sxthmi	r3, r3
 801ec7e:	e7d9      	b.n	801ec34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801ec80:	f240 6054 	movw	r0, #1620	@ 0x654
 801ec84:	4283      	cmp	r3, r0
 801ec86:	d8e3      	bhi.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ec88:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801ec8c:	d9e0      	bls.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ec8e:	e7b8      	b.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ec90:	f240 6074 	movw	r0, #1652	@ 0x674
 801ec94:	4283      	cmp	r3, r0
 801ec96:	d0b4      	beq.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ec98:	d82d      	bhi.n	801ecf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801ec9a:	f240 605e 	movw	r0, #1630	@ 0x65e
 801ec9e:	4283      	cmp	r3, r0
 801eca0:	d804      	bhi.n	801ecac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801eca2:	f240 605d 	movw	r0, #1629	@ 0x65d
 801eca6:	4283      	cmp	r3, r0
 801eca8:	d3d2      	bcc.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ecaa:	e7aa      	b.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ecac:	f240 605f 	movw	r0, #1631	@ 0x65f
 801ecb0:	4283      	cmp	r3, r0
 801ecb2:	d0cd      	beq.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ecb4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801ecb8:	d0a3      	beq.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ecba:	00cb      	lsls	r3, r1, #3
 801ecbc:	0649      	lsls	r1, r1, #25
 801ecbe:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801ecc2:	7a13      	ldrb	r3, [r2, #8]
 801ecc4:	ea43 0300 	orr.w	r3, r3, r0
 801ecc8:	bf44      	itt	mi
 801ecca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ecce:	b21b      	sxthmi	r3, r3
 801ecd0:	1b5d      	subs	r5, r3, r5
 801ecd2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ecd6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801ecda:	7b53      	ldrb	r3, [r2, #13]
 801ecdc:	015b      	lsls	r3, r3, #5
 801ecde:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ece2:	7993      	ldrb	r3, [r2, #6]
 801ece4:	430b      	orrs	r3, r1
 801ece6:	2105      	movs	r1, #5
 801ece8:	005b      	lsls	r3, r3, #1
 801ecea:	fb93 f3f1 	sdiv	r3, r3, r1
 801ecee:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ecf2:	440b      	add	r3, r1
 801ecf4:	e756      	b.n	801eba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ecf6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801ecfa:	4283      	cmp	r3, r0
 801ecfc:	d809      	bhi.n	801ed12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801ecfe:	f240 60df 	movw	r0, #1759	@ 0x6df
 801ed02:	4283      	cmp	r3, r0
 801ed04:	f4bf af7d 	bcs.w	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed08:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801ed0c:	2b05      	cmp	r3, #5
 801ed0e:	d8d4      	bhi.n	801ecba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ed10:	e777      	b.n	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed12:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801ed16:	4283      	cmp	r3, r0
 801ed18:	d09a      	beq.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed1a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801ed1e:	4283      	cmp	r3, r0
 801ed20:	e7ca      	b.n	801ecb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ed22:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801ed26:	d22b      	bcs.n	801ed80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801ed28:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801ed2c:	4283      	cmp	r3, r0
 801ed2e:	d28f      	bcs.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed30:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ed34:	4283      	cmp	r3, r0
 801ed36:	d816      	bhi.n	801ed66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ed38:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801ed3c:	4283      	cmp	r3, r0
 801ed3e:	f4bf af60 	bcs.w	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed42:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801ed46:	4283      	cmp	r3, r0
 801ed48:	d80a      	bhi.n	801ed60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ed4a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801ed4e:	4283      	cmp	r3, r0
 801ed50:	f4bf af57 	bcs.w	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed54:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801ed58:	4283      	cmp	r3, r0
 801ed5a:	f43f af79 	beq.w	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed5e:	e7ac      	b.n	801ecba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ed60:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801ed64:	e7f8      	b.n	801ed58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ed66:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801ed6a:	4283      	cmp	r3, r0
 801ed6c:	d802      	bhi.n	801ed74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ed6e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801ed72:	e798      	b.n	801eca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ed74:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801ed78:	4283      	cmp	r3, r0
 801ed7a:	f47f af42 	bne.w	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed7e:	e767      	b.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed80:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801ed84:	4283      	cmp	r3, r0
 801ed86:	f43f af63 	beq.w	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed8a:	d802      	bhi.n	801ed92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ed8c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801ed90:	e7f2      	b.n	801ed78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ed92:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801ed96:	4283      	cmp	r3, r0
 801ed98:	d805      	bhi.n	801eda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ed9a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801ed9e:	4283      	cmp	r3, r0
 801eda0:	f4ff af2f 	bcc.w	801ec02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eda4:	e754      	b.n	801ec50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eda6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801edaa:	4283      	cmp	r3, r0
 801edac:	e7af      	b.n	801ed0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801edae:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801edb2:	4617      	mov	r7, r2
 801edb4:	f102 0808 	add.w	r8, r2, #8
 801edb8:	4666      	mov	r6, ip
 801edba:	6838      	ldr	r0, [r7, #0]
 801edbc:	3708      	adds	r7, #8
 801edbe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801edc2:	46e6      	mov	lr, ip
 801edc4:	4547      	cmp	r7, r8
 801edc6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801edca:	46f4      	mov	ip, lr
 801edcc:	d1f5      	bne.n	801edba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801edce:	6838      	ldr	r0, [r7, #0]
 801edd0:	f8ce 0000 	str.w	r0, [lr]
 801edd4:	88b9      	ldrh	r1, [r7, #4]
 801edd6:	f8ae 1004 	strh.w	r1, [lr, #4]
 801edda:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801edde:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ede2:	d009      	beq.n	801edf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801ede4:	7b51      	ldrb	r1, [r2, #13]
 801ede6:	7992      	ldrb	r2, [r2, #6]
 801ede8:	0149      	lsls	r1, r1, #5
 801edea:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801edee:	4311      	orrs	r1, r2
 801edf0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801edf4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801edf8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801edfc:	b2ad      	uxth	r5, r5
 801edfe:	d00d      	beq.n	801ee1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801ee00:	442b      	add	r3, r5
 801ee02:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801ee06:	b29b      	uxth	r3, r3
 801ee08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ee0c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801ee10:	10db      	asrs	r3, r3, #3
 801ee12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ee16:	4313      	orrs	r3, r2
 801ee18:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801ee1c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801ee20:	00cb      	lsls	r3, r1, #3
 801ee22:	064f      	lsls	r7, r1, #25
 801ee24:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ee28:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801ee2c:	ea43 0302 	orr.w	r3, r3, r2
 801ee30:	bf44      	itt	mi
 801ee32:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ee36:	b21b      	sxthmi	r3, r3
 801ee38:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ee3c:	1b5b      	subs	r3, r3, r5
 801ee3e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801ee42:	4632      	mov	r2, r6
 801ee44:	e6f9      	b.n	801ec3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ee46:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801ee4a:	4617      	mov	r7, r2
 801ee4c:	f102 0908 	add.w	r9, r2, #8
 801ee50:	4666      	mov	r6, ip
 801ee52:	6838      	ldr	r0, [r7, #0]
 801ee54:	3708      	adds	r7, #8
 801ee56:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ee5a:	46e0      	mov	r8, ip
 801ee5c:	454f      	cmp	r7, r9
 801ee5e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ee62:	46c4      	mov	ip, r8
 801ee64:	d1f5      	bne.n	801ee52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801ee66:	6838      	ldr	r0, [r7, #0]
 801ee68:	f8c8 0000 	str.w	r0, [r8]
 801ee6c:	88b9      	ldrh	r1, [r7, #4]
 801ee6e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ee72:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801ee76:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ee7a:	d009      	beq.n	801ee90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801ee7c:	7b51      	ldrb	r1, [r2, #13]
 801ee7e:	7992      	ldrb	r2, [r2, #6]
 801ee80:	0149      	lsls	r1, r1, #5
 801ee82:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801ee86:	4311      	orrs	r1, r2
 801ee88:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ee8c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801ee90:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ee94:	d00e      	beq.n	801eeb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801ee96:	eba3 030e 	sub.w	r3, r3, lr
 801ee9a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801ee9e:	b29b      	uxth	r3, r3
 801eea0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801eea4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801eea8:	10db      	asrs	r3, r3, #3
 801eeaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801eeae:	4313      	orrs	r3, r2
 801eeb0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801eeb4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801eeb8:	00cb      	lsls	r3, r1, #3
 801eeba:	0648      	lsls	r0, r1, #25
 801eebc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801eec0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801eec4:	ea43 0302 	orr.w	r3, r3, r2
 801eec8:	bf44      	itt	mi
 801eeca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801eece:	b21b      	sxthmi	r3, r3
 801eed0:	1b5d      	subs	r5, r3, r5
 801eed2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801eed6:	e7b4      	b.n	801ee42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801eed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801eed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eedc:	461e      	mov	r6, r3
 801eede:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801eee0:	4604      	mov	r4, r0
 801eee2:	4617      	mov	r7, r2
 801eee4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eee8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801eeec:	f7e4 fe0e 	bl	8003b0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eef0:	4605      	mov	r5, r0
 801eef2:	b918      	cbnz	r0, 801eefc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801eef4:	6030      	str	r0, [r6, #0]
 801eef6:	4628      	mov	r0, r5
 801eef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eefc:	683b      	ldr	r3, [r7, #0]
 801eefe:	4601      	mov	r1, r0
 801ef00:	4638      	mov	r0, r7
 801ef02:	68db      	ldr	r3, [r3, #12]
 801ef04:	4798      	blx	r3
 801ef06:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801ef0a:	4602      	mov	r2, r0
 801ef0c:	6030      	str	r0, [r6, #0]
 801ef0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ef12:	d213      	bcs.n	801ef3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801ef14:	4643      	mov	r3, r8
 801ef16:	4639      	mov	r1, r7
 801ef18:	4620      	mov	r0, r4
 801ef1a:	f7ff fe39 	bl	801eb90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ef1e:	6030      	str	r0, [r6, #0]
 801ef20:	6833      	ldr	r3, [r6, #0]
 801ef22:	b143      	cbz	r3, 801ef36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801ef24:	7b5a      	ldrb	r2, [r3, #13]
 801ef26:	7a9b      	ldrb	r3, [r3, #10]
 801ef28:	0052      	lsls	r2, r2, #1
 801ef2a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801ef2e:	4313      	orrs	r3, r2
 801ef30:	bf0c      	ite	eq
 801ef32:	2301      	moveq	r3, #1
 801ef34:	2300      	movne	r3, #0
 801ef36:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801ef3a:	e7dc      	b.n	801eef6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801ef3c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801ef40:	b29b      	uxth	r3, r3
 801ef42:	2b7f      	cmp	r3, #127	@ 0x7f
 801ef44:	d804      	bhi.n	801ef50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801ef46:	4639      	mov	r1, r7
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f7ff fd15 	bl	801e978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ef4e:	e7e6      	b.n	801ef1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ef50:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d0e3      	beq.n	801ef20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ef58:	f640 1302 	movw	r3, #2306	@ 0x902
 801ef5c:	429d      	cmp	r5, r3
 801ef5e:	d1df      	bne.n	801ef20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ef60:	4601      	mov	r1, r0
 801ef62:	4620      	mov	r0, r4
 801ef64:	f7ff fcd8 	bl	801e918 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ef68:	e7d9      	b.n	801ef1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ef6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ef6a:	b510      	push	{r4, lr}
 801ef6c:	4604      	mov	r4, r0
 801ef6e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801ef72:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801ef74:	b1e1      	cbz	r1, 801efb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ef76:	2b0a      	cmp	r3, #10
 801ef78:	d02d      	beq.n	801efd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ef7a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801ef7c:	3901      	subs	r1, #1
 801ef7e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ef82:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801ef84:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801ef88:	1c51      	adds	r1, r2, #1
 801ef8a:	b289      	uxth	r1, r1
 801ef8c:	2901      	cmp	r1, #1
 801ef8e:	bf8a      	itet	hi
 801ef90:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ef94:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801ef96:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801ef98:	1c5a      	adds	r2, r3, #1
 801ef9a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801ef9c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801ef9e:	4413      	add	r3, r2
 801efa0:	b29b      	uxth	r3, r3
 801efa2:	2b09      	cmp	r3, #9
 801efa4:	bf88      	it	hi
 801efa6:	3b0a      	subhi	r3, #10
 801efa8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801efac:	8458      	strh	r0, [r3, #34]	@ 0x22
 801efae:	e7de      	b.n	801ef6e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801efb0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801efb2:	2b0a      	cmp	r3, #10
 801efb4:	d00f      	beq.n	801efd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801efb6:	4620      	mov	r0, r4
 801efb8:	f7ff fc6d 	bl	801e896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801efbc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801efbe:	1c5a      	adds	r2, r3, #1
 801efc0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801efc2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801efc4:	4413      	add	r3, r2
 801efc6:	b29b      	uxth	r3, r3
 801efc8:	2b09      	cmp	r3, #9
 801efca:	bf88      	it	hi
 801efcc:	3b0a      	subhi	r3, #10
 801efce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801efd2:	8458      	strh	r0, [r3, #34]	@ 0x22
 801efd4:	e7ec      	b.n	801efb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801efd6:	bd10      	pop	{r4, pc}

0801efd8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801efd8:	b538      	push	{r3, r4, r5, lr}
 801efda:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801efdc:	4604      	mov	r4, r0
 801efde:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801efe2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801efe4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801efe6:	3a01      	subs	r2, #1
 801efe8:	8702      	strh	r2, [r0, #56]	@ 0x38
 801efea:	1c5a      	adds	r2, r3, #1
 801efec:	b292      	uxth	r2, r2
 801efee:	2a09      	cmp	r2, #9
 801eff0:	bf8a      	itet	hi
 801eff2:	3b09      	subhi	r3, #9
 801eff4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801eff6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801eff8:	f7ff ffb7 	bl	801ef6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801effc:	8c23      	ldrh	r3, [r4, #32]
 801effe:	2b01      	cmp	r3, #1
 801f000:	bf9c      	itt	ls
 801f002:	3301      	addls	r3, #1
 801f004:	8423      	strhls	r3, [r4, #32]
 801f006:	8be3      	ldrh	r3, [r4, #30]
 801f008:	b90b      	cbnz	r3, 801f00e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801f00a:	2302      	movs	r3, #2
 801f00c:	83e3      	strh	r3, [r4, #30]
 801f00e:	8be3      	ldrh	r3, [r4, #30]
 801f010:	4628      	mov	r0, r5
 801f012:	3b01      	subs	r3, #1
 801f014:	b29b      	uxth	r3, r3
 801f016:	83e3      	strh	r3, [r4, #30]
 801f018:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f01c:	8365      	strh	r5, [r4, #26]
 801f01e:	bd38      	pop	{r3, r4, r5, pc}

0801f020 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801f020:	428a      	cmp	r2, r1
 801f022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f026:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801f028:	d932      	bls.n	801f090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801f02a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801f02c:	1a54      	subs	r4, r2, r1
 801f02e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801f032:	19ee      	adds	r6, r5, r7
 801f034:	fa1f fe84 	uxth.w	lr, r4
 801f038:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801f03c:	3e01      	subs	r6, #1
 801f03e:	b2b4      	uxth	r4, r6
 801f040:	eba4 090e 	sub.w	r9, r4, lr
 801f044:	fa1f f989 	uxth.w	r9, r9
 801f048:	2c09      	cmp	r4, #9
 801f04a:	4626      	mov	r6, r4
 801f04c:	bf88      	it	hi
 801f04e:	f1a4 060a 	subhi.w	r6, r4, #10
 801f052:	f1bc 0f00 	cmp.w	ip, #0
 801f056:	f104 34ff 	add.w	r4, r4, #4294967295
 801f05a:	bf08      	it	eq
 801f05c:	f04f 0c02 	moveq.w	ip, #2
 801f060:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f064:	b2a4      	uxth	r4, r4
 801f066:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f06a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801f06e:	454c      	cmp	r4, r9
 801f070:	fa1f fc8c 	uxth.w	ip, ip
 801f074:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801f078:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801f07c:	d1e4      	bne.n	801f048 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801f07e:	eba5 050e 	sub.w	r5, r5, lr
 801f082:	eb0e 0408 	add.w	r4, lr, r8
 801f086:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801f08a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801f08c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801f090:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801f092:	250a      	movs	r5, #10
 801f094:	1a64      	subs	r4, r4, r1
 801f096:	4439      	add	r1, r7
 801f098:	b289      	uxth	r1, r1
 801f09a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801f09c:	2909      	cmp	r1, #9
 801f09e:	bf88      	it	hi
 801f0a0:	390a      	subhi	r1, #10
 801f0a2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801f0a4:	b18a      	cbz	r2, 801f0ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801f0a6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801f0a8:	3a01      	subs	r2, #1
 801f0aa:	3101      	adds	r1, #1
 801f0ac:	b292      	uxth	r2, r2
 801f0ae:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801f0b2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801f0b4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801f0b6:	b901      	cbnz	r1, 801f0ba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801f0b8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801f0ba:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801f0bc:	3901      	subs	r1, #1
 801f0be:	b289      	uxth	r1, r1
 801f0c0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801f0c2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801f0c6:	844c      	strh	r4, [r1, #34]	@ 0x22
 801f0c8:	e7ec      	b.n	801f0a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801f0ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0ce:	f7ff bf4c 	b.w	801ef6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801f0d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801f0d2:	b570      	push	{r4, r5, r6, lr}
 801f0d4:	2500      	movs	r5, #0
 801f0d6:	4295      	cmp	r5, r2
 801f0d8:	d011      	beq.n	801f0fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801f0da:	8bc4      	ldrh	r4, [r0, #30]
 801f0dc:	f831 6b02 	ldrh.w	r6, [r1], #2
 801f0e0:	4414      	add	r4, r2
 801f0e2:	3c01      	subs	r4, #1
 801f0e4:	1b64      	subs	r4, r4, r5
 801f0e6:	b2a4      	uxth	r4, r4
 801f0e8:	2c01      	cmp	r4, #1
 801f0ea:	bf88      	it	hi
 801f0ec:	3c02      	subhi	r4, #2
 801f0ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f0f2:	8b64      	ldrh	r4, [r4, #26]
 801f0f4:	42b4      	cmp	r4, r6
 801f0f6:	d117      	bne.n	801f128 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801f0f8:	3501      	adds	r5, #1
 801f0fa:	b2ad      	uxth	r5, r5
 801f0fc:	e7eb      	b.n	801f0d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801f0fe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f102:	2400      	movs	r4, #0
 801f104:	4413      	add	r3, r2
 801f106:	b2a2      	uxth	r2, r4
 801f108:	429a      	cmp	r2, r3
 801f10a:	da0f      	bge.n	801f12c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801f10c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801f10e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801f112:	3401      	adds	r4, #1
 801f114:	4432      	add	r2, r6
 801f116:	b292      	uxth	r2, r2
 801f118:	2a09      	cmp	r2, #9
 801f11a:	bf88      	it	hi
 801f11c:	3a0a      	subhi	r2, #10
 801f11e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f122:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801f124:	42aa      	cmp	r2, r5
 801f126:	d0ee      	beq.n	801f106 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801f128:	2000      	movs	r0, #0
 801f12a:	bd70      	pop	{r4, r5, r6, pc}
 801f12c:	2001      	movs	r0, #1
 801f12e:	e7fc      	b.n	801f12a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801f130 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801f130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f134:	4605      	mov	r5, r0
 801f136:	4616      	mov	r6, r2
 801f138:	1c8c      	adds	r4, r1, #2
 801f13a:	8809      	ldrh	r1, [r1, #0]
 801f13c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801f140:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801f144:	42b3      	cmp	r3, r6
 801f146:	d124      	bne.n	801f192 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801f148:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801f14c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801f150:	f001 070f 	and.w	r7, r1, #15
 801f154:	4652      	mov	r2, sl
 801f156:	f8cd 8000 	str.w	r8, [sp]
 801f15a:	464b      	mov	r3, r9
 801f15c:	4621      	mov	r1, r4
 801f15e:	4628      	mov	r0, r5
 801f160:	f7ff ffb7 	bl	801f0d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801f164:	4683      	mov	fp, r0
 801f166:	b168      	cbz	r0, 801f184 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801f168:	eb0a 0109 	add.w	r1, sl, r9
 801f16c:	463a      	mov	r2, r7
 801f16e:	4628      	mov	r0, r5
 801f170:	4441      	add	r1, r8
 801f172:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801f176:	4649      	mov	r1, r9
 801f178:	f7ff ff52 	bl	801f020 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801f17c:	4658      	mov	r0, fp
 801f17e:	b003      	add	sp, #12
 801f180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f184:	eb07 010a 	add.w	r1, r7, sl
 801f188:	4449      	add	r1, r9
 801f18a:	4441      	add	r1, r8
 801f18c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801f190:	e7d2      	b.n	801f138 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801f192:	f04f 0b00 	mov.w	fp, #0
 801f196:	e7f1      	b.n	801f17c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801f198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801f198:	b570      	push	{r4, r5, r6, lr}
 801f19a:	8810      	ldrh	r0, [r2, #0]
 801f19c:	4298      	cmp	r0, r3
 801f19e:	d817      	bhi.n	801f1d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f1a0:	1e48      	subs	r0, r1, #1
 801f1a2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801f1a6:	4298      	cmp	r0, r3
 801f1a8:	d312      	bcc.n	801f1d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f1aa:	2400      	movs	r4, #0
 801f1ac:	428c      	cmp	r4, r1
 801f1ae:	d20f      	bcs.n	801f1d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f1b0:	1860      	adds	r0, r4, r1
 801f1b2:	1040      	asrs	r0, r0, #1
 801f1b4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801f1b8:	0085      	lsls	r5, r0, #2
 801f1ba:	42b3      	cmp	r3, r6
 801f1bc:	d902      	bls.n	801f1c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801f1be:	3001      	adds	r0, #1
 801f1c0:	b284      	uxth	r4, r0
 801f1c2:	e7f3      	b.n	801f1ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f1c4:	d201      	bcs.n	801f1ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801f1c6:	b281      	uxth	r1, r0
 801f1c8:	e7f0      	b.n	801f1ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f1ca:	442a      	add	r2, r5
 801f1cc:	8850      	ldrh	r0, [r2, #2]
 801f1ce:	bd70      	pop	{r4, r5, r6, pc}
 801f1d0:	2000      	movs	r0, #0
 801f1d2:	e7fc      	b.n	801f1ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801f1d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1d8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801f1da:	4604      	mov	r4, r0
 801f1dc:	260b      	movs	r6, #11
 801f1de:	886f      	ldrh	r7, [r5, #2]
 801f1e0:	087f      	lsrs	r7, r7, #1
 801f1e2:	3e01      	subs	r6, #1
 801f1e4:	d013      	beq.n	801f20e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f1e6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801f1e8:	462a      	mov	r2, r5
 801f1ea:	4639      	mov	r1, r7
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f1f2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801f1f6:	4643      	mov	r3, r8
 801f1f8:	f7ff ffce 	bl	801f198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801f1fc:	b138      	cbz	r0, 801f20e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f1fe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801f202:	4642      	mov	r2, r8
 801f204:	4620      	mov	r0, r4
 801f206:	f7ff ff93 	bl	801f130 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801f20a:	2800      	cmp	r0, #0
 801f20c:	d1e9      	bne.n	801f1e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801f214 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801f214:	b570      	push	{r4, r5, r6, lr}
 801f216:	694a      	ldr	r2, [r1, #20]
 801f218:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801f21a:	684b      	ldr	r3, [r1, #4]
 801f21c:	1b54      	subs	r4, r2, r5
 801f21e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801f220:	f000 8106 	beq.w	801f430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801f224:	1b9b      	subs	r3, r3, r6
 801f226:	d003      	beq.n	801f230 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f228:	4363      	muls	r3, r4
 801f22a:	2210      	movs	r2, #16
 801f22c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f230:	680c      	ldr	r4, [r1, #0]
 801f232:	698a      	ldr	r2, [r1, #24]
 801f234:	1b65      	subs	r5, r4, r5
 801f236:	f000 80fd 	beq.w	801f434 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801f23a:	1b92      	subs	r2, r2, r6
 801f23c:	d003      	beq.n	801f246 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f23e:	436a      	muls	r2, r5
 801f240:	2410      	movs	r4, #16
 801f242:	fb92 f2f4 	sdiv	r2, r2, r4
 801f246:	1a9b      	subs	r3, r3, r2
 801f248:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801f470 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801f24c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f250:	460a      	mov	r2, r1
 801f252:	ee07 3a90 	vmov	s15, r3
 801f256:	f100 040c 	add.w	r4, r0, #12
 801f25a:	4603      	mov	r3, r0
 801f25c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f260:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f264:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801f268:	eeb1 6a43 	vneg.f32	s12, s6
 801f26c:	edd2 7a02 	vldr	s15, [r2, #8]
 801f270:	3214      	adds	r2, #20
 801f272:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f276:	ece3 6a01 	vstmia	r3!, {s13}
 801f27a:	429c      	cmp	r4, r3
 801f27c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801f280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f284:	edc3 7a02 	vstr	s15, [r3, #8]
 801f288:	ed52 7a01 	vldr	s15, [r2, #-4]
 801f28c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f290:	edc3 7a05 	vstr	s15, [r3, #20]
 801f294:	d1ea      	bne.n	801f26c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801f296:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f298:	698b      	ldr	r3, [r1, #24]
 801f29a:	edd0 4a02 	vldr	s9, [r0, #8]
 801f29e:	1a9b      	subs	r3, r3, r2
 801f2a0:	edd0 3a00 	vldr	s7, [r0]
 801f2a4:	edd0 6a01 	vldr	s13, [r0, #4]
 801f2a8:	ee07 3a90 	vmov	s15, r3
 801f2ac:	684b      	ldr	r3, [r1, #4]
 801f2ae:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801f2b2:	ed90 5a05 	vldr	s10, [r0, #20]
 801f2b6:	1a9b      	subs	r3, r3, r2
 801f2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f2bc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801f2c0:	ed90 2a03 	vldr	s4, [r0, #12]
 801f2c4:	ee07 3a10 	vmov	s14, r3
 801f2c8:	edd0 5a04 	vldr	s11, [r0, #16]
 801f2cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f2d0:	ed90 1a07 	vldr	s2, [r0, #28]
 801f2d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f2d8:	edd0 2a06 	vldr	s5, [r0, #24]
 801f2dc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801f2e0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801f2e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f2e8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801f2ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f2f0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801f2f4:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801f2f8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801f2fa:	694a      	ldr	r2, [r1, #20]
 801f2fc:	1b13      	subs	r3, r2, r4
 801f2fe:	ee07 3a10 	vmov	s14, r3
 801f302:	680b      	ldr	r3, [r1, #0]
 801f304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f308:	1b1b      	subs	r3, r3, r4
 801f30a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f30e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801f312:	ee07 3a10 	vmov	s14, r3
 801f316:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f31a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f31e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801f322:	ee64 4a86 	vmul.f32	s9, s9, s12
 801f326:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801f32a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f32c:	698b      	ldr	r3, [r1, #24]
 801f32e:	1a9b      	subs	r3, r3, r2
 801f330:	ee06 3a90 	vmov	s13, r3
 801f334:	684b      	ldr	r3, [r1, #4]
 801f336:	1a9b      	subs	r3, r3, r2
 801f338:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f33c:	ee07 3a10 	vmov	s14, r3
 801f340:	ee66 6a84 	vmul.f32	s13, s13, s8
 801f344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f348:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801f34c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f350:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f354:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f358:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801f35c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801f35e:	694a      	ldr	r2, [r1, #20]
 801f360:	1b13      	subs	r3, r2, r4
 801f362:	ee07 3a10 	vmov	s14, r3
 801f366:	680b      	ldr	r3, [r1, #0]
 801f368:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f36c:	1b1b      	subs	r3, r3, r4
 801f36e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f372:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801f376:	ee07 3a10 	vmov	s14, r3
 801f37a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f37e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f382:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f386:	edd0 5a08 	vldr	s11, [r0, #32]
 801f38a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801f38e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801f392:	ee25 5a06 	vmul.f32	s10, s10, s12
 801f396:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801f39a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f39c:	698b      	ldr	r3, [r1, #24]
 801f39e:	1a9b      	subs	r3, r3, r2
 801f3a0:	ee07 3a10 	vmov	s14, r3
 801f3a4:	684b      	ldr	r3, [r1, #4]
 801f3a6:	1a9b      	subs	r3, r3, r2
 801f3a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f3ac:	ee01 3a90 	vmov	s3, r3
 801f3b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f3b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f3b8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f3bc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801f3c0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801f3c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f3c8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801f3cc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801f3ce:	694a      	ldr	r2, [r1, #20]
 801f3d0:	1b13      	subs	r3, r2, r4
 801f3d2:	ee03 3a10 	vmov	s6, r3
 801f3d6:	680b      	ldr	r3, [r1, #0]
 801f3d8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f3dc:	1b1b      	subs	r3, r3, r4
 801f3de:	ee23 3a04 	vmul.f32	s6, s6, s8
 801f3e2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801f3e6:	ee03 3a10 	vmov	s6, r3
 801f3ea:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f3ee:	ee23 4a04 	vmul.f32	s8, s6, s8
 801f3f2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801f3f6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f3fa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801f3fe:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801f402:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801f406:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f40e:	dd13      	ble.n	801f438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801f410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801f414:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801f418:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801f41a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801f41e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f426:	dd15      	ble.n	801f454 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801f428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801f42c:	6403      	str	r3, [r0, #64]	@ 0x40
 801f42e:	bd70      	pop	{r4, r5, r6, pc}
 801f430:	4623      	mov	r3, r4
 801f432:	e6fd      	b.n	801f230 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f434:	462a      	mov	r2, r5
 801f436:	e706      	b.n	801f246 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f438:	d502      	bpl.n	801f440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801f43a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801f43e:	e7e9      	b.n	801f414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801f440:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801f444:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f448:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f450:	dade      	bge.n	801f410 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f452:	e7f2      	b.n	801f43a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f454:	d502      	bpl.n	801f45c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f456:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801f45a:	e7e7      	b.n	801f42c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f45c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f460:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f464:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f46c:	dadc      	bge.n	801f428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f46e:	e7f2      	b.n	801f456 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f470:	3d800000 	.word	0x3d800000

0801f474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f478:	2714      	movs	r7, #20
 801f47a:	435f      	muls	r7, r3
 801f47c:	eb02 0c07 	add.w	ip, r2, r7
 801f480:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f484:	f115 0e0f 	adds.w	lr, r5, #15
 801f488:	f100 80a2 	bmi.w	801f5d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f48c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801f490:	9c08      	ldr	r4, [sp, #32]
 801f492:	2614      	movs	r6, #20
 801f494:	f8c0 e014 	str.w	lr, [r0, #20]
 801f498:	4366      	muls	r6, r4
 801f49a:	eb02 0806 	add.w	r8, r2, r6
 801f49e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f4a2:	f115 040f 	adds.w	r4, r5, #15
 801f4a6:	f100 809f 	bmi.w	801f5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801f4aa:	1124      	asrs	r4, r4, #4
 801f4ac:	eba4 040e 	sub.w	r4, r4, lr
 801f4b0:	6184      	str	r4, [r0, #24]
 801f4b2:	2c00      	cmp	r4, #0
 801f4b4:	f000 808a 	beq.w	801f5cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801f4b8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801f4bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801f4c0:	5995      	ldr	r5, [r2, r6]
 801f4c2:	eba4 0809 	sub.w	r8, r4, r9
 801f4c6:	59d4      	ldr	r4, [r2, r7]
 801f4c8:	eba5 0a04 	sub.w	sl, r5, r4
 801f4cc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801f4d0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801f4d4:	fb0e fe05 	mul.w	lr, lr, r5
 801f4d8:	fb0a ee19 	mls	lr, sl, r9, lr
 801f4dc:	fb08 e404 	mla	r4, r8, r4, lr
 801f4e0:	3c01      	subs	r4, #1
 801f4e2:	19a4      	adds	r4, r4, r6
 801f4e4:	f100 808c 	bmi.w	801f600 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801f4e8:	fb94 fef6 	sdiv	lr, r4, r6
 801f4ec:	fb06 441e 	mls	r4, r6, lr, r4
 801f4f0:	f8c0 e000 	str.w	lr, [r0]
 801f4f4:	6104      	str	r4, [r0, #16]
 801f4f6:	2d00      	cmp	r5, #0
 801f4f8:	f2c0 8095 	blt.w	801f626 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801f4fc:	fb95 f4f6 	sdiv	r4, r5, r6
 801f500:	fb06 5514 	mls	r5, r6, r4, r5
 801f504:	6044      	str	r4, [r0, #4]
 801f506:	6085      	str	r5, [r0, #8]
 801f508:	60c6      	str	r6, [r0, #12]
 801f50a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f50e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f512:	6945      	ldr	r5, [r0, #20]
 801f514:	59d2      	ldr	r2, [r2, r7]
 801f516:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801f51a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801f648 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801f51e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801f522:	ee07 4a10 	vmov	s14, r4
 801f526:	6804      	ldr	r4, [r0, #0]
 801f528:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801f52c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f530:	ee07 2a90 	vmov	s15, r2
 801f534:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f53c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f540:	edd3 6a00 	vldr	s13, [r3]
 801f544:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f548:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801f54c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f550:	edc0 6a07 	vstr	s13, [r0, #28]
 801f554:	edd0 6a01 	vldr	s13, [r0, #4]
 801f558:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801f55c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f560:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801f564:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f568:	ed80 6a08 	vstr	s12, [r0, #32]
 801f56c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801f56e:	6242      	str	r2, [r0, #36]	@ 0x24
 801f570:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801f574:	ed93 6a03 	vldr	s12, [r3, #12]
 801f578:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f57c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801f580:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f584:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801f588:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801f58c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801f590:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f594:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801f598:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f59a:	6302      	str	r2, [r0, #48]	@ 0x30
 801f59c:	ed93 6a06 	vldr	s12, [r3, #24]
 801f5a0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801f5a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f5a8:	eeb0 7a46 	vmov.f32	s14, s12
 801f5ac:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801f5b0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f5b4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801f5b8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801f5bc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801f5c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f5c4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801f5c8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801f5ca:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801f5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5d0:	2410      	movs	r4, #16
 801f5d2:	f1c5 0501 	rsb	r5, r5, #1
 801f5d6:	fb9e fef4 	sdiv	lr, lr, r4
 801f5da:	f015 050f 	ands.w	r5, r5, #15
 801f5de:	bf18      	it	ne
 801f5e0:	2501      	movne	r5, #1
 801f5e2:	ebae 0e05 	sub.w	lr, lr, r5
 801f5e6:	e753      	b.n	801f490 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801f5e8:	f04f 0910 	mov.w	r9, #16
 801f5ec:	f1c5 0501 	rsb	r5, r5, #1
 801f5f0:	fb94 f4f9 	sdiv	r4, r4, r9
 801f5f4:	f015 050f 	ands.w	r5, r5, #15
 801f5f8:	bf18      	it	ne
 801f5fa:	2501      	movne	r5, #1
 801f5fc:	1b64      	subs	r4, r4, r5
 801f5fe:	e755      	b.n	801f4ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801f600:	4264      	negs	r4, r4
 801f602:	fb94 fef6 	sdiv	lr, r4, r6
 801f606:	f1ce 0800 	rsb	r8, lr, #0
 801f60a:	fb06 441e 	mls	r4, r6, lr, r4
 801f60e:	f8c0 8000 	str.w	r8, [r0]
 801f612:	6104      	str	r4, [r0, #16]
 801f614:	2c00      	cmp	r4, #0
 801f616:	f43f af6e 	beq.w	801f4f6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801f61a:	ea6f 0e0e 	mvn.w	lr, lr
 801f61e:	1b34      	subs	r4, r6, r4
 801f620:	f8c0 e000 	str.w	lr, [r0]
 801f624:	e766      	b.n	801f4f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801f626:	426d      	negs	r5, r5
 801f628:	fb95 f4f6 	sdiv	r4, r5, r6
 801f62c:	f1c4 0e00 	rsb	lr, r4, #0
 801f630:	fb06 5514 	mls	r5, r6, r4, r5
 801f634:	f8c0 e004 	str.w	lr, [r0, #4]
 801f638:	6085      	str	r5, [r0, #8]
 801f63a:	2d00      	cmp	r5, #0
 801f63c:	f43f af64 	beq.w	801f508 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801f640:	43e4      	mvns	r4, r4
 801f642:	1b75      	subs	r5, r6, r5
 801f644:	6044      	str	r4, [r0, #4]
 801f646:	e75e      	b.n	801f506 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801f648:	3d800000 	.word	0x3d800000

0801f64c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f64c:	4b01      	ldr	r3, [pc, #4]	@ (801f654 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f64e:	6018      	str	r0, [r3, #0]
 801f650:	4770      	bx	lr
 801f652:	bf00      	nop
 801f654:	24015e3c 	.word	0x24015e3c

0801f658 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f658:	4b06      	ldr	r3, [pc, #24]	@ (801f674 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f65a:	881a      	ldrh	r2, [r3, #0]
 801f65c:	4282      	cmp	r2, r0
 801f65e:	d807      	bhi.n	801f670 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f660:	4b05      	ldr	r3, [pc, #20]	@ (801f678 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f662:	881b      	ldrh	r3, [r3, #0]
 801f664:	4413      	add	r3, r2
 801f666:	4298      	cmp	r0, r3
 801f668:	bfac      	ite	ge
 801f66a:	2000      	movge	r0, #0
 801f66c:	2001      	movlt	r0, #1
 801f66e:	4770      	bx	lr
 801f670:	2000      	movs	r0, #0
 801f672:	4770      	bx	lr
 801f674:	24015e5c 	.word	0x24015e5c
 801f678:	24015e60 	.word	0x24015e60

0801f67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f67c:	b508      	push	{r3, lr}
 801f67e:	4601      	mov	r1, r0
 801f680:	f7ff ffea 	bl	801f658 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f684:	b118      	cbz	r0, 801f68e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f686:	4b02      	ldr	r3, [pc, #8]	@ (801f690 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f68e:	bd08      	pop	{r3, pc}
 801f690:	24015e40 	.word	0x24015e40

0801f694 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801f694:	b538      	push	{r3, r4, r5, lr}
 801f696:	4604      	mov	r4, r0
 801f698:	f7ff ffde 	bl	801f658 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f69c:	b1d8      	cbz	r0, 801f6d6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801f69e:	4b0f      	ldr	r3, [pc, #60]	@ (801f6dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801f6a0:	881b      	ldrh	r3, [r3, #0]
 801f6a2:	1ae4      	subs	r4, r4, r3
 801f6a4:	230e      	movs	r3, #14
 801f6a6:	4363      	muls	r3, r4
 801f6a8:	4c0d      	ldr	r4, [pc, #52]	@ (801f6e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801f6aa:	6825      	ldr	r5, [r4, #0]
 801f6ac:	18ea      	adds	r2, r5, r3
 801f6ae:	7b12      	ldrb	r2, [r2, #12]
 801f6b0:	f012 0220 	ands.w	r2, r2, #32
 801f6b4:	d010      	beq.n	801f6d8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801f6b6:	f9b1 2000 	ldrsh.w	r2, [r1]
 801f6ba:	52ea      	strh	r2, [r5, r3]
 801f6bc:	6822      	ldr	r2, [r4, #0]
 801f6be:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801f6c2:	441a      	add	r2, r3
 801f6c4:	8055      	strh	r5, [r2, #2]
 801f6c6:	6822      	ldr	r2, [r4, #0]
 801f6c8:	4413      	add	r3, r2
 801f6ca:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801f6ce:	809a      	strh	r2, [r3, #4]
 801f6d0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801f6d4:	80da      	strh	r2, [r3, #6]
 801f6d6:	bd38      	pop	{r3, r4, r5, pc}
 801f6d8:	4610      	mov	r0, r2
 801f6da:	e7fc      	b.n	801f6d6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801f6dc:	24015e5c 	.word	0x24015e5c
 801f6e0:	24015e44 	.word	0x24015e44

0801f6e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801f6e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f6e8:	4606      	mov	r6, r0
 801f6ea:	460c      	mov	r4, r1
 801f6ec:	f7ff ffb4 	bl	801f658 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f6f0:	b918      	cbnz	r0, 801f6fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801f6f2:	2000      	movs	r0, #0
 801f6f4:	b002      	add	sp, #8
 801f6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6fa:	4608      	mov	r0, r1
 801f6fc:	f7f8 fd6b 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f700:	2800      	cmp	r0, #0
 801f702:	d1f6      	bne.n	801f6f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f704:	4b3f      	ldr	r3, [pc, #252]	@ (801f804 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801f706:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801f808 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801f70a:	881d      	ldrh	r5, [r3, #0]
 801f70c:	f8d9 a000 	ldr.w	sl, [r9]
 801f710:	46c8      	mov	r8, r9
 801f712:	1b73      	subs	r3, r6, r5
 801f714:	250e      	movs	r5, #14
 801f716:	435d      	muls	r5, r3
 801f718:	eb0a 0705 	add.w	r7, sl, r5
 801f71c:	7b3b      	ldrb	r3, [r7, #12]
 801f71e:	f013 0f20 	tst.w	r3, #32
 801f722:	d0e6      	beq.n	801f6f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f724:	4621      	mov	r1, r4
 801f726:	4638      	mov	r0, r7
 801f728:	f7fd f82c 	bl	801c784 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f72c:	2800      	cmp	r0, #0
 801f72e:	d1e1      	bne.n	801f6f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f730:	4639      	mov	r1, r7
 801f732:	4620      	mov	r0, r4
 801f734:	f7fd f826 	bl	801c784 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f738:	b108      	cbz	r0, 801f73e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801f73a:	4621      	mov	r1, r4
 801f73c:	e020      	b.n	801f780 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801f73e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f742:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801f746:	429a      	cmp	r2, r3
 801f748:	d11e      	bne.n	801f788 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f74a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f74e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f752:	429a      	cmp	r2, r3
 801f754:	d118      	bne.n	801f788 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f756:	6820      	ldr	r0, [r4, #0]
 801f758:	466b      	mov	r3, sp
 801f75a:	6861      	ldr	r1, [r4, #4]
 801f75c:	c303      	stmia	r3!, {r0, r1}
 801f75e:	4639      	mov	r1, r7
 801f760:	4668      	mov	r0, sp
 801f762:	f7fd f835 	bl	801c7d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f766:	f8d9 3000 	ldr.w	r3, [r9]
 801f76a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f76e:	442b      	add	r3, r5
 801f770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f774:	4413      	add	r3, r2
 801f776:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f77a:	4293      	cmp	r3, r2
 801f77c:	dc04      	bgt.n	801f788 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f77e:	4669      	mov	r1, sp
 801f780:	4630      	mov	r0, r6
 801f782:	f7ff ff87 	bl	801f694 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801f786:	e7b5      	b.n	801f6f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f788:	f8d8 3000 	ldr.w	r3, [r8]
 801f78c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f790:	442b      	add	r3, r5
 801f792:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f796:	4291      	cmp	r1, r2
 801f798:	d119      	bne.n	801f7ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f79a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f79e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f7a2:	4291      	cmp	r1, r2
 801f7a4:	d113      	bne.n	801f7ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f7a6:	6820      	ldr	r0, [r4, #0]
 801f7a8:	466a      	mov	r2, sp
 801f7aa:	6861      	ldr	r1, [r4, #4]
 801f7ac:	c203      	stmia	r2!, {r0, r1}
 801f7ae:	4619      	mov	r1, r3
 801f7b0:	4668      	mov	r0, sp
 801f7b2:	f7fd f80d 	bl	801c7d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f7b6:	f8d8 3000 	ldr.w	r3, [r8]
 801f7ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f7be:	442b      	add	r3, r5
 801f7c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f7c4:	4413      	add	r3, r2
 801f7c6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f7ca:	4293      	cmp	r3, r2
 801f7cc:	ddd7      	ble.n	801f77e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801f7ce:	4620      	mov	r0, r4
 801f7d0:	f7f8 fd01 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f7d4:	b990      	cbnz	r0, 801f7fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801f7d6:	88a7      	ldrh	r7, [r4, #4]
 801f7d8:	88e3      	ldrh	r3, [r4, #6]
 801f7da:	fb17 f703 	smulbb	r7, r7, r3
 801f7de:	f8d8 3000 	ldr.w	r3, [r8]
 801f7e2:	441d      	add	r5, r3
 801f7e4:	4628      	mov	r0, r5
 801f7e6:	f7f8 fcf6 	bl	80181d6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f7ea:	b948      	cbnz	r0, 801f800 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801f7ec:	88ab      	ldrh	r3, [r5, #4]
 801f7ee:	88ea      	ldrh	r2, [r5, #6]
 801f7f0:	fb13 f302 	smulbb	r3, r3, r2
 801f7f4:	42bb      	cmp	r3, r7
 801f7f6:	f6bf af7c 	bge.w	801f6f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f7fa:	e79e      	b.n	801f73a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801f7fc:	2700      	movs	r7, #0
 801f7fe:	e7ee      	b.n	801f7de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801f800:	2300      	movs	r3, #0
 801f802:	e7f7      	b.n	801f7f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801f804:	24015e5c 	.word	0x24015e5c
 801f808:	24015e44 	.word	0x24015e44

0801f80c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f80e:	4c24      	ldr	r4, [pc, #144]	@ (801f8a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f810:	6823      	ldr	r3, [r4, #0]
 801f812:	2b00      	cmp	r3, #0
 801f814:	d042      	beq.n	801f89c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f816:	4a23      	ldr	r2, [pc, #140]	@ (801f8a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f818:	4d23      	ldr	r5, [pc, #140]	@ (801f8a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f81a:	8811      	ldrh	r1, [r2, #0]
 801f81c:	f8b5 c000 	ldrh.w	ip, [r5]
 801f820:	4822      	ldr	r0, [pc, #136]	@ (801f8ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f822:	4461      	add	r1, ip
 801f824:	1c4a      	adds	r2, r1, #1
 801f826:	008f      	lsls	r7, r1, #2
 801f828:	f022 0201 	bic.w	r2, r2, #1
 801f82c:	19de      	adds	r6, r3, r7
 801f82e:	0412      	lsls	r2, r2, #16
 801f830:	6006      	str	r6, [r0, #0]
 801f832:	4e1f      	ldr	r6, [pc, #124]	@ (801f8b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f834:	0c12      	lsrs	r2, r2, #16
 801f836:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f83a:	19da      	adds	r2, r3, r7
 801f83c:	6032      	str	r2, [r6, #0]
 801f83e:	220e      	movs	r2, #14
 801f840:	fb02 f20c 	mul.w	r2, r2, ip
 801f844:	3203      	adds	r2, #3
 801f846:	f022 0203 	bic.w	r2, r2, #3
 801f84a:	443a      	add	r2, r7
 801f84c:	4f19      	ldr	r7, [pc, #100]	@ (801f8b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f84e:	4413      	add	r3, r2
 801f850:	603b      	str	r3, [r7, #0]
 801f852:	2300      	movs	r3, #0
 801f854:	4f18      	ldr	r7, [pc, #96]	@ (801f8b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f856:	469c      	mov	ip, r3
 801f858:	803b      	strh	r3, [r7, #0]
 801f85a:	4f18      	ldr	r7, [pc, #96]	@ (801f8bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f85c:	683f      	ldr	r7, [r7, #0]
 801f85e:	1aba      	subs	r2, r7, r2
 801f860:	4f17      	ldr	r7, [pc, #92]	@ (801f8c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f862:	603a      	str	r2, [r7, #0]
 801f864:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801f868:	4a16      	ldr	r2, [pc, #88]	@ (801f8c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f86a:	8013      	strh	r3, [r2, #0]
 801f86c:	428b      	cmp	r3, r1
 801f86e:	d10d      	bne.n	801f88c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f870:	882d      	ldrh	r5, [r5, #0]
 801f872:	2300      	movs	r3, #0
 801f874:	6830      	ldr	r0, [r6, #0]
 801f876:	240e      	movs	r4, #14
 801f878:	429d      	cmp	r5, r3
 801f87a:	d90f      	bls.n	801f89c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f87c:	fb04 0203 	mla	r2, r4, r3, r0
 801f880:	3301      	adds	r3, #1
 801f882:	7b11      	ldrb	r1, [r2, #12]
 801f884:	f36f 1145 	bfc	r1, #5, #1
 801f888:	7311      	strb	r1, [r2, #12]
 801f88a:	e7f5      	b.n	801f878 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801f88c:	6822      	ldr	r2, [r4, #0]
 801f88e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f892:	6802      	ldr	r2, [r0, #0]
 801f894:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801f898:	3301      	adds	r3, #1
 801f89a:	e7e7      	b.n	801f86c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801f89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f89e:	bf00      	nop
 801f8a0:	24015e40 	.word	0x24015e40
 801f8a4:	24015e5c 	.word	0x24015e5c
 801f8a8:	24015e60 	.word	0x24015e60
 801f8ac:	24015e54 	.word	0x24015e54
 801f8b0:	24015e44 	.word	0x24015e44
 801f8b4:	24015e4c 	.word	0x24015e4c
 801f8b8:	24015e5e 	.word	0x24015e5e
 801f8bc:	24015e48 	.word	0x24015e48
 801f8c0:	24015e58 	.word	0x24015e58
 801f8c4:	24015e50 	.word	0x24015e50

0801f8c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f8c8:	4b06      	ldr	r3, [pc, #24]	@ (801f8e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	b943      	cbnz	r3, 801f8e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f8ce:	b139      	cbz	r1, 801f8e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f8d0:	4b05      	ldr	r3, [pc, #20]	@ (801f8e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801f8d2:	801a      	strh	r2, [r3, #0]
 801f8d4:	4b05      	ldr	r3, [pc, #20]	@ (801f8ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801f8d6:	6019      	str	r1, [r3, #0]
 801f8d8:	4b05      	ldr	r3, [pc, #20]	@ (801f8f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801f8da:	6018      	str	r0, [r3, #0]
 801f8dc:	f7ff bf96 	b.w	801f80c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f8e0:	4770      	bx	lr
 801f8e2:	bf00      	nop
 801f8e4:	24015e4c 	.word	0x24015e4c
 801f8e8:	24015e60 	.word	0x24015e60
 801f8ec:	24015e48 	.word	0x24015e48
 801f8f0:	24015e40 	.word	0x24015e40

0801f8f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f8f4:	b470      	push	{r4, r5, r6}
 801f8f6:	4c07      	ldr	r4, [pc, #28]	@ (801f914 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f8f8:	4605      	mov	r5, r0
 801f8fa:	4610      	mov	r0, r2
 801f8fc:	9a03      	ldr	r2, [sp, #12]
 801f8fe:	6826      	ldr	r6, [r4, #0]
 801f900:	b936      	cbnz	r6, 801f910 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f902:	6025      	str	r5, [r4, #0]
 801f904:	4c04      	ldr	r4, [pc, #16]	@ (801f918 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f906:	8021      	strh	r1, [r4, #0]
 801f908:	4619      	mov	r1, r3
 801f90a:	bc70      	pop	{r4, r5, r6}
 801f90c:	f7ff bfdc 	b.w	801f8c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f910:	bc70      	pop	{r4, r5, r6}
 801f912:	4770      	bx	lr
 801f914:	24015e64 	.word	0x24015e64
 801f918:	24015e5c 	.word	0x24015e5c

0801f91c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f91c:	4a12      	ldr	r2, [pc, #72]	@ (801f968 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801f91e:	8803      	ldrh	r3, [r0, #0]
 801f920:	8812      	ldrh	r2, [r2, #0]
 801f922:	4293      	cmp	r3, r2
 801f924:	d207      	bcs.n	801f936 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801f926:	4a11      	ldr	r2, [pc, #68]	@ (801f96c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801f928:	2114      	movs	r1, #20
 801f92a:	6812      	ldr	r2, [r2, #0]
 801f92c:	fb01 2303 	mla	r3, r1, r3, r2
 801f930:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801f934:	4770      	bx	lr
 801f936:	490e      	ldr	r1, [pc, #56]	@ (801f970 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f938:	8809      	ldrh	r1, [r1, #0]
 801f93a:	4411      	add	r1, r2
 801f93c:	428b      	cmp	r3, r1
 801f93e:	da04      	bge.n	801f94a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801f940:	1a9b      	subs	r3, r3, r2
 801f942:	4a0c      	ldr	r2, [pc, #48]	@ (801f974 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f944:	210e      	movs	r1, #14
 801f946:	6812      	ldr	r2, [r2, #0]
 801f948:	e7f0      	b.n	801f92c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801f94a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f94e:	4293      	cmp	r3, r2
 801f950:	d108      	bne.n	801f964 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801f952:	4b09      	ldr	r3, [pc, #36]	@ (801f978 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f954:	781b      	ldrb	r3, [r3, #0]
 801f956:	b91b      	cbnz	r3, 801f960 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801f958:	4b08      	ldr	r3, [pc, #32]	@ (801f97c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f95a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f95e:	4770      	bx	lr
 801f960:	4b07      	ldr	r3, [pc, #28]	@ (801f980 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f962:	e7fa      	b.n	801f95a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801f964:	2000      	movs	r0, #0
 801f966:	4770      	bx	lr
 801f968:	24015e5c 	.word	0x24015e5c
 801f96c:	24015e64 	.word	0x24015e64
 801f970:	24015e60 	.word	0x24015e60
 801f974:	24015e44 	.word	0x24015e44
 801f978:	24015dcc 	.word	0x24015dcc
 801f97c:	24015dce 	.word	0x24015dce
 801f980:	24015dd0 	.word	0x24015dd0

0801f984 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f984:	4a12      	ldr	r2, [pc, #72]	@ (801f9d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801f986:	8803      	ldrh	r3, [r0, #0]
 801f988:	8812      	ldrh	r2, [r2, #0]
 801f98a:	4293      	cmp	r3, r2
 801f98c:	d207      	bcs.n	801f99e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801f98e:	4a11      	ldr	r2, [pc, #68]	@ (801f9d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801f990:	2114      	movs	r1, #20
 801f992:	6812      	ldr	r2, [r2, #0]
 801f994:	fb01 2303 	mla	r3, r1, r3, r2
 801f998:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801f99c:	4770      	bx	lr
 801f99e:	490e      	ldr	r1, [pc, #56]	@ (801f9d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f9a0:	8809      	ldrh	r1, [r1, #0]
 801f9a2:	4411      	add	r1, r2
 801f9a4:	428b      	cmp	r3, r1
 801f9a6:	da04      	bge.n	801f9b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801f9a8:	1a9b      	subs	r3, r3, r2
 801f9aa:	4a0c      	ldr	r2, [pc, #48]	@ (801f9dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f9ac:	210e      	movs	r1, #14
 801f9ae:	6812      	ldr	r2, [r2, #0]
 801f9b0:	e7f0      	b.n	801f994 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801f9b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f9b6:	4293      	cmp	r3, r2
 801f9b8:	d108      	bne.n	801f9cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801f9ba:	4b09      	ldr	r3, [pc, #36]	@ (801f9e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f9bc:	781b      	ldrb	r3, [r3, #0]
 801f9be:	b91b      	cbnz	r3, 801f9c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801f9c0:	4b08      	ldr	r3, [pc, #32]	@ (801f9e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f9c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f9c6:	4770      	bx	lr
 801f9c8:	4b07      	ldr	r3, [pc, #28]	@ (801f9e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f9ca:	e7fa      	b.n	801f9c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801f9cc:	2000      	movs	r0, #0
 801f9ce:	4770      	bx	lr
 801f9d0:	24015e5c 	.word	0x24015e5c
 801f9d4:	24015e64 	.word	0x24015e64
 801f9d8:	24015e60 	.word	0x24015e60
 801f9dc:	24015e44 	.word	0x24015e44
 801f9e0:	24015dcc 	.word	0x24015dcc
 801f9e4:	24015dd0 	.word	0x24015dd0
 801f9e8:	24015dce 	.word	0x24015dce

0801f9ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f9ec:	4a22      	ldr	r2, [pc, #136]	@ (801fa78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801f9ee:	b530      	push	{r4, r5, lr}
 801f9f0:	880b      	ldrh	r3, [r1, #0]
 801f9f2:	8812      	ldrh	r2, [r2, #0]
 801f9f4:	4293      	cmp	r3, r2
 801f9f6:	d213      	bcs.n	801fa20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801f9f8:	4a20      	ldr	r2, [pc, #128]	@ (801fa7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f9fa:	2114      	movs	r1, #20
 801f9fc:	6812      	ldr	r2, [r2, #0]
 801f9fe:	fb01 2303 	mla	r3, r1, r3, r2
 801fa02:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801fa06:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801fa0a:	8a1a      	ldrh	r2, [r3, #16]
 801fa0c:	8a5b      	ldrh	r3, [r3, #18]
 801fa0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fa12:	8004      	strh	r4, [r0, #0]
 801fa14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fa18:	8041      	strh	r1, [r0, #2]
 801fa1a:	8082      	strh	r2, [r0, #4]
 801fa1c:	80c3      	strh	r3, [r0, #6]
 801fa1e:	e024      	b.n	801fa6a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801fa20:	4917      	ldr	r1, [pc, #92]	@ (801fa80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801fa22:	8809      	ldrh	r1, [r1, #0]
 801fa24:	4411      	add	r1, r2
 801fa26:	428b      	cmp	r3, r1
 801fa28:	da10      	bge.n	801fa4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801fa2a:	1a9b      	subs	r3, r3, r2
 801fa2c:	220e      	movs	r2, #14
 801fa2e:	4353      	muls	r3, r2
 801fa30:	4a14      	ldr	r2, [pc, #80]	@ (801fa84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801fa32:	6811      	ldr	r1, [r2, #0]
 801fa34:	18ca      	adds	r2, r1, r3
 801fa36:	5ecd      	ldrsh	r5, [r1, r3]
 801fa38:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801fa3c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801fa40:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801fa44:	8005      	strh	r5, [r0, #0]
 801fa46:	8044      	strh	r4, [r0, #2]
 801fa48:	8081      	strh	r1, [r0, #4]
 801fa4a:	e7e7      	b.n	801fa1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801fa4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801fa50:	4293      	cmp	r3, r2
 801fa52:	d10b      	bne.n	801fa6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801fa54:	4b0c      	ldr	r3, [pc, #48]	@ (801fa88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801fa56:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fa5a:	4b0c      	ldr	r3, [pc, #48]	@ (801fa8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801fa5c:	8081      	strh	r1, [r0, #4]
 801fa5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fa62:	2300      	movs	r3, #0
 801fa64:	80c2      	strh	r2, [r0, #6]
 801fa66:	8003      	strh	r3, [r0, #0]
 801fa68:	8043      	strh	r3, [r0, #2]
 801fa6a:	bd30      	pop	{r4, r5, pc}
 801fa6c:	2300      	movs	r3, #0
 801fa6e:	8003      	strh	r3, [r0, #0]
 801fa70:	8043      	strh	r3, [r0, #2]
 801fa72:	8083      	strh	r3, [r0, #4]
 801fa74:	e7d2      	b.n	801fa1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801fa76:	bf00      	nop
 801fa78:	24015e5c 	.word	0x24015e5c
 801fa7c:	24015e64 	.word	0x24015e64
 801fa80:	24015e60 	.word	0x24015e60
 801fa84:	24015e44 	.word	0x24015e44
 801fa88:	24015dc8 	.word	0x24015dc8
 801fa8c:	24015dca 	.word	0x24015dca

0801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fa90:	4a12      	ldr	r2, [pc, #72]	@ (801fadc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fa92:	8803      	ldrh	r3, [r0, #0]
 801fa94:	8811      	ldrh	r1, [r2, #0]
 801fa96:	428b      	cmp	r3, r1
 801fa98:	d20b      	bcs.n	801fab2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801fa9a:	4a11      	ldr	r2, [pc, #68]	@ (801fae0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fa9c:	6812      	ldr	r2, [r2, #0]
 801fa9e:	b112      	cbz	r2, 801faa6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801faa0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801faa4:	b9c0      	cbnz	r0, 801fad8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801faa6:	4a0f      	ldr	r2, [pc, #60]	@ (801fae4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801faa8:	6811      	ldr	r1, [r2, #0]
 801faaa:	2214      	movs	r2, #20
 801faac:	4353      	muls	r3, r2
 801faae:	58c8      	ldr	r0, [r1, r3]
 801fab0:	4770      	bx	lr
 801fab2:	4a0d      	ldr	r2, [pc, #52]	@ (801fae8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fab4:	8812      	ldrh	r2, [r2, #0]
 801fab6:	440a      	add	r2, r1
 801fab8:	4293      	cmp	r3, r2
 801faba:	da04      	bge.n	801fac6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801fabc:	4a08      	ldr	r2, [pc, #32]	@ (801fae0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fabe:	6812      	ldr	r2, [r2, #0]
 801fac0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fac4:	4770      	bx	lr
 801fac6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801faca:	4293      	cmp	r3, r2
 801facc:	d103      	bne.n	801fad6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801face:	4b07      	ldr	r3, [pc, #28]	@ (801faec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801fad4:	4770      	bx	lr
 801fad6:	2000      	movs	r0, #0
 801fad8:	4770      	bx	lr
 801fada:	bf00      	nop
 801fadc:	24015e5c 	.word	0x24015e5c
 801fae0:	24015e40 	.word	0x24015e40
 801fae4:	24015e64 	.word	0x24015e64
 801fae8:	24015e60 	.word	0x24015e60
 801faec:	24015dd4 	.word	0x24015dd4

0801faf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801faf0:	4b24      	ldr	r3, [pc, #144]	@ (801fb84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801faf2:	8802      	ldrh	r2, [r0, #0]
 801faf4:	8818      	ldrh	r0, [r3, #0]
 801faf6:	4282      	cmp	r2, r0
 801faf8:	d221      	bcs.n	801fb3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801fafa:	4b23      	ldr	r3, [pc, #140]	@ (801fb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801fafc:	6819      	ldr	r1, [r3, #0]
 801fafe:	2314      	movs	r3, #20
 801fb00:	fb03 1302 	mla	r3, r3, r2, r1
 801fb04:	6858      	ldr	r0, [r3, #4]
 801fb06:	2800      	cmp	r0, #0
 801fb08:	d03a      	beq.n	801fb80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fb0a:	4920      	ldr	r1, [pc, #128]	@ (801fb8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fb0c:	6809      	ldr	r1, [r1, #0]
 801fb0e:	2900      	cmp	r1, #0
 801fb10:	d036      	beq.n	801fb80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fb12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fb16:	2900      	cmp	r1, #0
 801fb18:	d032      	beq.n	801fb80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fb1a:	891a      	ldrh	r2, [r3, #8]
 801fb1c:	8958      	ldrh	r0, [r3, #10]
 801fb1e:	4350      	muls	r0, r2
 801fb20:	7c5a      	ldrb	r2, [r3, #17]
 801fb22:	7cdb      	ldrb	r3, [r3, #19]
 801fb24:	0952      	lsrs	r2, r2, #5
 801fb26:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fb2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fb2e:	2b0b      	cmp	r3, #11
 801fb30:	bf18      	it	ne
 801fb32:	0040      	lslne	r0, r0, #1
 801fb34:	3003      	adds	r0, #3
 801fb36:	f020 0003 	bic.w	r0, r0, #3
 801fb3a:	4408      	add	r0, r1
 801fb3c:	4770      	bx	lr
 801fb3e:	4b14      	ldr	r3, [pc, #80]	@ (801fb90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801fb40:	881b      	ldrh	r3, [r3, #0]
 801fb42:	4403      	add	r3, r0
 801fb44:	429a      	cmp	r2, r3
 801fb46:	da1a      	bge.n	801fb7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fb48:	4b12      	ldr	r3, [pc, #72]	@ (801fb94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fb4a:	1a10      	subs	r0, r2, r0
 801fb4c:	210e      	movs	r1, #14
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	fb01 3000 	mla	r0, r1, r0, r3
 801fb54:	7b03      	ldrb	r3, [r0, #12]
 801fb56:	f003 031f 	and.w	r3, r3, #31
 801fb5a:	2b0b      	cmp	r3, #11
 801fb5c:	d10b      	bne.n	801fb76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801fb5e:	8903      	ldrh	r3, [r0, #8]
 801fb60:	8940      	ldrh	r0, [r0, #10]
 801fb62:	4358      	muls	r0, r3
 801fb64:	4b09      	ldr	r3, [pc, #36]	@ (801fb8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fb66:	3003      	adds	r0, #3
 801fb68:	6819      	ldr	r1, [r3, #0]
 801fb6a:	f020 0303 	bic.w	r3, r0, #3
 801fb6e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fb72:	4418      	add	r0, r3
 801fb74:	4770      	bx	lr
 801fb76:	2b0d      	cmp	r3, #13
 801fb78:	d101      	bne.n	801fb7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fb7a:	300d      	adds	r0, #13
 801fb7c:	4770      	bx	lr
 801fb7e:	2000      	movs	r0, #0
 801fb80:	4770      	bx	lr
 801fb82:	bf00      	nop
 801fb84:	24015e5c 	.word	0x24015e5c
 801fb88:	24015e64 	.word	0x24015e64
 801fb8c:	24015e40 	.word	0x24015e40
 801fb90:	24015e60 	.word	0x24015e60
 801fb94:	24015e44 	.word	0x24015e44

0801fb98 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fb98:	4b1f      	ldr	r3, [pc, #124]	@ (801fc18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801fb9a:	b510      	push	{r4, lr}
 801fb9c:	8802      	ldrh	r2, [r0, #0]
 801fb9e:	881b      	ldrh	r3, [r3, #0]
 801fba0:	429a      	cmp	r2, r3
 801fba2:	d21a      	bcs.n	801fbda <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801fba4:	4b1d      	ldr	r3, [pc, #116]	@ (801fc1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801fba6:	2114      	movs	r1, #20
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	fb01 3102 	mla	r1, r1, r2, r3
 801fbae:	7c4b      	ldrb	r3, [r1, #17]
 801fbb0:	0958      	lsrs	r0, r3, #5
 801fbb2:	7ccb      	ldrb	r3, [r1, #19]
 801fbb4:	491a      	ldr	r1, [pc, #104]	@ (801fc20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801fbb6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fbba:	6809      	ldr	r1, [r1, #0]
 801fbbc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801fbc0:	b2d8      	uxtb	r0, r3
 801fbc2:	b149      	cbz	r1, 801fbd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801fbc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801fbc8:	b132      	cbz	r2, 801fbd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801fbca:	2b0e      	cmp	r3, #14
 801fbcc:	d021      	beq.n	801fc12 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801fbce:	280f      	cmp	r0, #15
 801fbd0:	d01d      	beq.n	801fc0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801fbd2:	2810      	cmp	r0, #16
 801fbd4:	bf08      	it	eq
 801fbd6:	2002      	moveq	r0, #2
 801fbd8:	bd10      	pop	{r4, pc}
 801fbda:	4912      	ldr	r1, [pc, #72]	@ (801fc24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801fbdc:	8809      	ldrh	r1, [r1, #0]
 801fbde:	4419      	add	r1, r3
 801fbe0:	428a      	cmp	r2, r1
 801fbe2:	da09      	bge.n	801fbf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801fbe4:	1ad3      	subs	r3, r2, r3
 801fbe6:	4a10      	ldr	r2, [pc, #64]	@ (801fc28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801fbe8:	210e      	movs	r1, #14
 801fbea:	6812      	ldr	r2, [r2, #0]
 801fbec:	fb01 2303 	mla	r3, r1, r3, r2
 801fbf0:	7b18      	ldrb	r0, [r3, #12]
 801fbf2:	f000 001f 	and.w	r0, r0, #31
 801fbf6:	e7ef      	b.n	801fbd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801fbf8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801fbfc:	429a      	cmp	r2, r3
 801fbfe:	d108      	bne.n	801fc12 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801fc00:	f7e3 fc4c 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 801fc04:	6803      	ldr	r3, [r0, #0]
 801fc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc0c:	4718      	bx	r3
 801fc0e:	2001      	movs	r0, #1
 801fc10:	e7e2      	b.n	801fbd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801fc12:	2000      	movs	r0, #0
 801fc14:	e7e0      	b.n	801fbd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801fc16:	bf00      	nop
 801fc18:	24015e5c 	.word	0x24015e5c
 801fc1c:	24015e64 	.word	0x24015e64
 801fc20:	24015e40 	.word	0x24015e40
 801fc24:	24015e60 	.word	0x24015e60
 801fc28:	24015e44 	.word	0x24015e44

0801fc2c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801fc2c:	2018      	movs	r0, #24
 801fc2e:	4770      	bx	lr

0801fc30 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801fc30:	2001      	movs	r0, #1
 801fc32:	4770      	bx	lr

0801fc34 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801fc34:	4b02      	ldr	r3, [pc, #8]	@ (801fc40 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801fc36:	8818      	ldrh	r0, [r3, #0]
 801fc38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc3c:	b280      	uxth	r0, r0
 801fc3e:	4770      	bx	lr
 801fc40:	24015dce 	.word	0x24015dce

0801fc44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801fc44:	2bff      	cmp	r3, #255	@ 0xff
 801fc46:	d04c      	beq.n	801fce2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fc48:	2a2c      	cmp	r2, #44	@ 0x2c
 801fc4a:	d030      	beq.n	801fcae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801fc4c:	d80f      	bhi.n	801fc6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801fc4e:	2a08      	cmp	r2, #8
 801fc50:	d043      	beq.n	801fcda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801fc52:	d805      	bhi.n	801fc60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801fc54:	2a04      	cmp	r2, #4
 801fc56:	d03e      	beq.n	801fcd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801fc58:	2a05      	cmp	r2, #5
 801fc5a:	d03a      	beq.n	801fcd2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801fc5c:	2300      	movs	r3, #0
 801fc5e:	e024      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fc60:	2a0a      	cmp	r2, #10
 801fc62:	d03a      	beq.n	801fcda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801fc64:	d301      	bcc.n	801fc6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801fc66:	2a0b      	cmp	r2, #11
 801fc68:	d1f8      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc6a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801fc6c:	e01d      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fc6e:	2a30      	cmp	r2, #48	@ 0x30
 801fc70:	d035      	beq.n	801fcde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fc72:	d80a      	bhi.n	801fc8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801fc74:	2a2e      	cmp	r2, #46	@ 0x2e
 801fc76:	684b      	ldr	r3, [r1, #4]
 801fc78:	d023      	beq.n	801fcc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fc7a:	d90d      	bls.n	801fc98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fc7c:	781a      	ldrb	r2, [r3, #0]
 801fc7e:	785b      	ldrb	r3, [r3, #1]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d1eb      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc84:	b98a      	cbnz	r2, 801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fc86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801fc88:	e00f      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fc8a:	2a32      	cmp	r2, #50	@ 0x32
 801fc8c:	d027      	beq.n	801fcde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fc8e:	d301      	bcc.n	801fc94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801fc90:	2a33      	cmp	r2, #51	@ 0x33
 801fc92:	d1e3      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc94:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801fc96:	e008      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fc98:	781a      	ldrb	r2, [r3, #0]
 801fc9a:	785b      	ldrb	r3, [r3, #1]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d1dd      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fca0:	2a00      	cmp	r2, #0
 801fca2:	d0f0      	beq.n	801fc86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801fca4:	2a01      	cmp	r2, #1
 801fca6:	d1d9      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fca8:	6943      	ldr	r3, [r0, #20]
 801fcaa:	4618      	mov	r0, r3
 801fcac:	4770      	bx	lr
 801fcae:	684b      	ldr	r3, [r1, #4]
 801fcb0:	781a      	ldrb	r2, [r3, #0]
 801fcb2:	785b      	ldrb	r3, [r3, #1]
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d1d1      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fcb8:	b14a      	cbz	r2, 801fcce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801fcba:	2a01      	cmp	r2, #1
 801fcbc:	bf08      	it	eq
 801fcbe:	68c3      	ldreq	r3, [r0, #12]
 801fcc0:	e7f3      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcc2:	781a      	ldrb	r2, [r3, #0]
 801fcc4:	785b      	ldrb	r3, [r3, #1]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d1c8      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fcca:	2a00      	cmp	r2, #0
 801fccc:	d1ed      	bne.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcce:	69c3      	ldr	r3, [r0, #28]
 801fcd0:	e7eb      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcd2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801fcd4:	e7e9      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcd6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801fcd8:	e7e7      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcda:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801fcdc:	e7e5      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcde:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801fce0:	e7e3      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fce2:	2a2c      	cmp	r2, #44	@ 0x2c
 801fce4:	d030      	beq.n	801fd48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801fce6:	d80f      	bhi.n	801fd08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801fce8:	2a08      	cmp	r2, #8
 801fcea:	d042      	beq.n	801fd72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801fcec:	d805      	bhi.n	801fcfa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801fcee:	2a04      	cmp	r2, #4
 801fcf0:	d03d      	beq.n	801fd6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801fcf2:	2a05      	cmp	r2, #5
 801fcf4:	d1b2      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fcf6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801fcf8:	e7d7      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fcfa:	2a0a      	cmp	r2, #10
 801fcfc:	d039      	beq.n	801fd72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801fcfe:	d301      	bcc.n	801fd04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fd00:	2a0b      	cmp	r2, #11
 801fd02:	d1ab      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd04:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801fd06:	e7d0      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd08:	2a30      	cmp	r2, #48	@ 0x30
 801fd0a:	d034      	beq.n	801fd76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801fd0c:	d80b      	bhi.n	801fd26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801fd0e:	2a2e      	cmp	r2, #46	@ 0x2e
 801fd10:	684b      	ldr	r3, [r1, #4]
 801fd12:	d023      	beq.n	801fd5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801fd14:	d90e      	bls.n	801fd34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801fd16:	781a      	ldrb	r2, [r3, #0]
 801fd18:	785b      	ldrb	r3, [r3, #1]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d19e      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd1e:	2a00      	cmp	r2, #0
 801fd20:	d1c3      	bne.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd22:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801fd24:	e7c1      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd26:	2a32      	cmp	r2, #50	@ 0x32
 801fd28:	d025      	beq.n	801fd76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801fd2a:	d301      	bcc.n	801fd30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801fd2c:	2a33      	cmp	r2, #51	@ 0x33
 801fd2e:	d195      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd30:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801fd32:	e7ba      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd34:	781a      	ldrb	r2, [r3, #0]
 801fd36:	785b      	ldrb	r3, [r3, #1]
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	d18f      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd3c:	2a00      	cmp	r2, #0
 801fd3e:	d0f0      	beq.n	801fd22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801fd40:	2a01      	cmp	r2, #1
 801fd42:	d18b      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd44:	6983      	ldr	r3, [r0, #24]
 801fd46:	e7b0      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd48:	684b      	ldr	r3, [r1, #4]
 801fd4a:	781a      	ldrb	r2, [r3, #0]
 801fd4c:	785b      	ldrb	r3, [r3, #1]
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	d184      	bne.n	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd52:	b152      	cbz	r2, 801fd6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801fd54:	2a01      	cmp	r2, #1
 801fd56:	bf08      	it	eq
 801fd58:	6903      	ldreq	r3, [r0, #16]
 801fd5a:	e7a6      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd5c:	781a      	ldrb	r2, [r3, #0]
 801fd5e:	785b      	ldrb	r3, [r3, #1]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	f47f af7b 	bne.w	801fc5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd66:	2a00      	cmp	r2, #0
 801fd68:	d19f      	bne.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd6a:	6a03      	ldr	r3, [r0, #32]
 801fd6c:	e79d      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801fd70:	e79b      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd72:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801fd74:	e799      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801fd76:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801fd78:	e797      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801fd7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd7e:	b085      	sub	sp, #20
 801fd80:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801fd82:	9203      	str	r2, [sp, #12]
 801fd84:	6870      	ldr	r0, [r6, #4]
 801fd86:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801fd8a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801fd8e:	9101      	str	r1, [sp, #4]
 801fd90:	fa1f f885 	uxth.w	r8, r5
 801fd94:	43ed      	mvns	r5, r5
 801fd96:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801fd9a:	b2ed      	uxtb	r5, r5
 801fd9c:	fb00 2404 	mla	r4, r0, r4, r2
 801fda0:	6832      	ldr	r2, [r6, #0]
 801fda2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fda6:	4414      	add	r4, r2
 801fda8:	f8dc 2000 	ldr.w	r2, [ip]
 801fdac:	9202      	str	r2, [sp, #8]
 801fdae:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fdb2:	f102 0e04 	add.w	lr, r2, #4
 801fdb6:	9a01      	ldr	r2, [sp, #4]
 801fdb8:	2a00      	cmp	r2, #0
 801fdba:	dc03      	bgt.n	801fdc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fdbc:	9a03      	ldr	r2, [sp, #12]
 801fdbe:	2a00      	cmp	r2, #0
 801fdc0:	f340 8116 	ble.w	801fff0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fdc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fdc6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801fdca:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fdce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fdd0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801fdd4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	dd0e      	ble.n	801fdfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fddc:	1406      	asrs	r6, r0, #16
 801fdde:	d405      	bmi.n	801fdec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fde0:	4556      	cmp	r6, sl
 801fde2:	da03      	bge.n	801fdec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fde4:	1416      	asrs	r6, r2, #16
 801fde6:	d401      	bmi.n	801fdec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fde8:	454e      	cmp	r6, r9
 801fdea:	db07      	blt.n	801fdfc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fdec:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801fdee:	3b01      	subs	r3, #1
 801fdf0:	3403      	adds	r4, #3
 801fdf2:	4430      	add	r0, r6
 801fdf4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801fdf6:	4432      	add	r2, r6
 801fdf8:	e7ee      	b.n	801fdd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fdfa:	d063      	beq.n	801fec4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fdfc:	1e5e      	subs	r6, r3, #1
 801fdfe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801fe00:	fb07 0706 	mla	r7, r7, r6, r0
 801fe04:	143f      	asrs	r7, r7, #16
 801fe06:	d454      	bmi.n	801feb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe08:	4557      	cmp	r7, sl
 801fe0a:	da52      	bge.n	801feb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe0c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801fe0e:	fb07 2606 	mla	r6, r7, r6, r2
 801fe12:	1436      	asrs	r6, r6, #16
 801fe14:	d44d      	bmi.n	801feb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe16:	454e      	cmp	r6, r9
 801fe18:	da4b      	bge.n	801feb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe1a:	1ce6      	adds	r6, r4, #3
 801fe1c:	4699      	mov	r9, r3
 801fe1e:	f1b9 0f00 	cmp.w	r9, #0
 801fe22:	f106 0603 	add.w	r6, r6, #3
 801fe26:	dd48      	ble.n	801feba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801fe28:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801fe2c:	1417      	asrs	r7, r2, #16
 801fe2e:	9902      	ldr	r1, [sp, #8]
 801fe30:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801fe34:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe38:	fb0b 1707 	mla	r7, fp, r7, r1
 801fe3c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801fe40:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fe42:	f817 700a 	ldrb.w	r7, [r7, sl]
 801fe46:	fb1b fb05 	smulbb	fp, fp, r5
 801fe4a:	4408      	add	r0, r1
 801fe4c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fe4e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fe52:	440a      	add	r2, r1
 801fe54:	eb0e 0a07 	add.w	sl, lr, r7
 801fe58:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801fe5c:	fb07 b708 	mla	r7, r7, r8, fp
 801fe60:	b2bf      	uxth	r7, r7
 801fe62:	f107 0b01 	add.w	fp, r7, #1
 801fe66:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fe6a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801fe6e:	fb1b fb05 	smulbb	fp, fp, r5
 801fe72:	123f      	asrs	r7, r7, #8
 801fe74:	f806 7c06 	strb.w	r7, [r6, #-6]
 801fe78:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801fe7c:	fb07 b708 	mla	r7, r7, r8, fp
 801fe80:	b2bf      	uxth	r7, r7
 801fe82:	f107 0b01 	add.w	fp, r7, #1
 801fe86:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fe8a:	123f      	asrs	r7, r7, #8
 801fe8c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801fe90:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801fe94:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801fe98:	fb1a fa05 	smulbb	sl, sl, r5
 801fe9c:	fb07 a708 	mla	r7, r7, r8, sl
 801fea0:	b2bf      	uxth	r7, r7
 801fea2:	f107 0a01 	add.w	sl, r7, #1
 801fea6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801feaa:	123f      	asrs	r7, r7, #8
 801feac:	f806 7c04 	strb.w	r7, [r6, #-4]
 801feb0:	e7b5      	b.n	801fe1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801feb2:	2700      	movs	r7, #0
 801feb4:	1bde      	subs	r6, r3, r7
 801feb6:	2e00      	cmp	r6, #0
 801feb8:	dc42      	bgt.n	801ff40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801feba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801febe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fec2:	441c      	add	r4, r3
 801fec4:	9b01      	ldr	r3, [sp, #4]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	f340 8092 	ble.w	801fff0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fed2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fed6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801feda:	eef0 6a62 	vmov.f32	s13, s5
 801fede:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fee2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fee6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801feea:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801feee:	eef0 6a43 	vmov.f32	s13, s6
 801fef2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fef6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801fefa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fefe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff02:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff12:	ee12 2a90 	vmov	r2, s5
 801ff16:	eef0 2a47 	vmov.f32	s5, s14
 801ff1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff1e:	ee13 2a10 	vmov	r2, s6
 801ff22:	9311      	str	r3, [sp, #68]	@ 0x44
 801ff24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff26:	eeb0 3a67 	vmov.f32	s6, s15
 801ff2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff2e:	9312      	str	r3, [sp, #72]	@ 0x48
 801ff30:	9b01      	ldr	r3, [sp, #4]
 801ff32:	9a03      	ldr	r2, [sp, #12]
 801ff34:	3b01      	subs	r3, #1
 801ff36:	9301      	str	r3, [sp, #4]
 801ff38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff3a:	bf08      	it	eq
 801ff3c:	4613      	moveq	r3, r2
 801ff3e:	e73a      	b.n	801fdb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ff40:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ff44:	d44e      	bmi.n	801ffe4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ff46:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ff4a:	4556      	cmp	r6, sl
 801ff4c:	dd4a      	ble.n	801ffe4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ff4e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ff52:	d447      	bmi.n	801ffe4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ff54:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801ff58:	4559      	cmp	r1, fp
 801ff5a:	dd43      	ble.n	801ffe4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ff5c:	fa0f f986 	sxth.w	r9, r6
 801ff60:	9902      	ldr	r1, [sp, #8]
 801ff62:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ff66:	fb0b 1909 	mla	r9, fp, r9, r1
 801ff6a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ff6e:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ff72:	fb1b fb05 	smulbb	fp, fp, r5
 801ff76:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ff7a:	eb0e 0a09 	add.w	sl, lr, r9
 801ff7e:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801ff82:	fb09 b908 	mla	r9, r9, r8, fp
 801ff86:	fa1f f989 	uxth.w	r9, r9
 801ff8a:	f109 0b01 	add.w	fp, r9, #1
 801ff8e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ff92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff96:	f804 9006 	strb.w	r9, [r4, r6]
 801ff9a:	4426      	add	r6, r4
 801ff9c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ffa0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ffa4:	fb1b fb05 	smulbb	fp, fp, r5
 801ffa8:	fb09 b908 	mla	r9, r9, r8, fp
 801ffac:	fa1f f989 	uxth.w	r9, r9
 801ffb0:	f109 0b01 	add.w	fp, r9, #1
 801ffb4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ffb8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ffbc:	f886 9001 	strb.w	r9, [r6, #1]
 801ffc0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ffc4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ffc8:	fb1a fa05 	smulbb	sl, sl, r5
 801ffcc:	fb09 a908 	mla	r9, r9, r8, sl
 801ffd0:	fa1f f989 	uxth.w	r9, r9
 801ffd4:	f109 0a01 	add.w	sl, r9, #1
 801ffd8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ffdc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ffe0:	f886 9002 	strb.w	r9, [r6, #2]
 801ffe4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ffe6:	3701      	adds	r7, #1
 801ffe8:	4408      	add	r0, r1
 801ffea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ffec:	440a      	add	r2, r1
 801ffee:	e761      	b.n	801feb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fff0:	b005      	add	sp, #20
 801fff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fff6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fff6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fffa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fffc:	4693      	mov	fp, r2
 801fffe:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8020000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020004:	6868      	ldr	r0, [r5, #4]
 8020006:	6877      	ldr	r7, [r6, #4]
 8020008:	9100      	str	r1, [sp, #0]
 802000a:	3704      	adds	r7, #4
 802000c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8020010:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8020014:	fb00 2404 	mla	r4, r0, r4, r2
 8020018:	682a      	ldr	r2, [r5, #0]
 802001a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802001e:	4414      	add	r4, r2
 8020020:	6832      	ldr	r2, [r6, #0]
 8020022:	9201      	str	r2, [sp, #4]
 8020024:	9a00      	ldr	r2, [sp, #0]
 8020026:	2a00      	cmp	r2, #0
 8020028:	dc03      	bgt.n	8020032 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802002a:	f1bb 0f00 	cmp.w	fp, #0
 802002e:	f340 80bc 	ble.w	80201aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020032:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020034:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8020038:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802003c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802003e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8020042:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020046:	2b00      	cmp	r3, #0
 8020048:	dd0c      	ble.n	8020064 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802004a:	1405      	asrs	r5, r0, #16
 802004c:	d405      	bmi.n	802005a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802004e:	4555      	cmp	r5, sl
 8020050:	da03      	bge.n	802005a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020052:	1415      	asrs	r5, r2, #16
 8020054:	d401      	bmi.n	802005a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020056:	454d      	cmp	r5, r9
 8020058:	db05      	blt.n	8020066 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802005a:	4440      	add	r0, r8
 802005c:	4472      	add	r2, lr
 802005e:	3b01      	subs	r3, #1
 8020060:	3403      	adds	r4, #3
 8020062:	e7f0      	b.n	8020046 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020064:	d03f      	beq.n	80200e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8020066:	1e5d      	subs	r5, r3, #1
 8020068:	fb08 0c05 	mla	ip, r8, r5, r0
 802006c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8020070:	d42e      	bmi.n	80200d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020072:	45d4      	cmp	ip, sl
 8020074:	da2c      	bge.n	80200d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020076:	fb0e 2505 	mla	r5, lr, r5, r2
 802007a:	142d      	asrs	r5, r5, #16
 802007c:	d428      	bmi.n	80200d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 802007e:	454d      	cmp	r5, r9
 8020080:	da26      	bge.n	80200d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020082:	1ce5      	adds	r5, r4, #3
 8020084:	469c      	mov	ip, r3
 8020086:	f1bc 0f00 	cmp.w	ip, #0
 802008a:	f105 0503 	add.w	r5, r5, #3
 802008e:	dd25      	ble.n	80200dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020090:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8020094:	ea4f 4922 	mov.w	r9, r2, asr #16
 8020098:	f10c 3cff 	add.w	ip, ip, #4294967295
 802009c:	4472      	add	r2, lr
 802009e:	468a      	mov	sl, r1
 80200a0:	9901      	ldr	r1, [sp, #4]
 80200a2:	fb0a 1909 	mla	r9, sl, r9, r1
 80200a6:	1401      	asrs	r1, r0, #16
 80200a8:	4440      	add	r0, r8
 80200aa:	f819 9001 	ldrb.w	r9, [r9, r1]
 80200ae:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80200b2:	eb07 0a09 	add.w	sl, r7, r9
 80200b6:	f817 9009 	ldrb.w	r9, [r7, r9]
 80200ba:	f805 9c06 	strb.w	r9, [r5, #-6]
 80200be:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80200c2:	f805 9c05 	strb.w	r9, [r5, #-5]
 80200c6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80200ca:	f805 9c04 	strb.w	r9, [r5, #-4]
 80200ce:	e7da      	b.n	8020086 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80200d0:	2500      	movs	r5, #0
 80200d2:	eba3 0c05 	sub.w	ip, r3, r5
 80200d6:	f1bc 0f00 	cmp.w	ip, #0
 80200da:	dc3b      	bgt.n	8020154 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80200dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200e4:	441c      	add	r4, r3
 80200e6:	9b00      	ldr	r3, [sp, #0]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	dd5e      	ble.n	80201aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80200ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80200f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200f6:	eeb0 6a62 	vmov.f32	s12, s5
 80200fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80200fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020102:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020106:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 802010a:	eeb0 6a43 	vmov.f32	s12, s6
 802010e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020112:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020116:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802011a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802011e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020122:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020126:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802012a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802012e:	ee12 2a90 	vmov	r2, s5
 8020132:	eef0 2a47 	vmov.f32	s5, s14
 8020136:	fb92 f8f3 	sdiv	r8, r2, r3
 802013a:	ee13 2a10 	vmov	r2, s6
 802013e:	eeb0 3a67 	vmov.f32	s6, s15
 8020142:	fb92 fef3 	sdiv	lr, r2, r3
 8020146:	9b00      	ldr	r3, [sp, #0]
 8020148:	3b01      	subs	r3, #1
 802014a:	9300      	str	r3, [sp, #0]
 802014c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802014e:	bf08      	it	eq
 8020150:	465b      	moveq	r3, fp
 8020152:	e767      	b.n	8020024 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020154:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020158:	d423      	bmi.n	80201a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802015a:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802015e:	45cc      	cmp	ip, r9
 8020160:	dd1f      	ble.n	80201a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020162:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020166:	d41c      	bmi.n	80201a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020168:	68f1      	ldr	r1, [r6, #12]
 802016a:	4551      	cmp	r1, sl
 802016c:	dd19      	ble.n	80201a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802016e:	fa0f fc8c 	sxth.w	ip, ip
 8020172:	9901      	ldr	r1, [sp, #4]
 8020174:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8020178:	f81c c009 	ldrb.w	ip, [ip, r9]
 802017c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020180:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8020184:	eb07 090c 	add.w	r9, r7, ip
 8020188:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 802018c:	f804 a00c 	strb.w	sl, [r4, ip]
 8020190:	44a4      	add	ip, r4
 8020192:	f899 a001 	ldrb.w	sl, [r9, #1]
 8020196:	f88c a001 	strb.w	sl, [ip, #1]
 802019a:	f899 9002 	ldrb.w	r9, [r9, #2]
 802019e:	f88c 9002 	strb.w	r9, [ip, #2]
 80201a2:	4440      	add	r0, r8
 80201a4:	4472      	add	r2, lr
 80201a6:	3501      	adds	r5, #1
 80201a8:	e793      	b.n	80200d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80201aa:	b003      	add	sp, #12
 80201ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	b085      	sub	sp, #20
 80201b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80201ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80201bc:	9202      	str	r2, [sp, #8]
 80201be:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80201c2:	6860      	ldr	r0, [r4, #4]
 80201c4:	9203      	str	r2, [sp, #12]
 80201c6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80201ca:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80201ce:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80201d2:	fb00 2505 	mla	r5, r0, r5, r2
 80201d6:	6822      	ldr	r2, [r4, #0]
 80201d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80201dc:	4415      	add	r5, r2
 80201de:	f8dc 2000 	ldr.w	r2, [ip]
 80201e2:	9200      	str	r2, [sp, #0]
 80201e4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80201e8:	3204      	adds	r2, #4
 80201ea:	9201      	str	r2, [sp, #4]
 80201ec:	2900      	cmp	r1, #0
 80201ee:	dc03      	bgt.n	80201f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80201f0:	9a02      	ldr	r2, [sp, #8]
 80201f2:	2a00      	cmp	r2, #0
 80201f4:	f340 8127 	ble.w	8020446 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80201f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80201fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80201fe:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020202:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020204:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020208:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802020c:	2b00      	cmp	r3, #0
 802020e:	dd0d      	ble.n	802022c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020210:	1422      	asrs	r2, r4, #16
 8020212:	d405      	bmi.n	8020220 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020214:	4542      	cmp	r2, r8
 8020216:	da03      	bge.n	8020220 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020218:	1402      	asrs	r2, r0, #16
 802021a:	d401      	bmi.n	8020220 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802021c:	42ba      	cmp	r2, r7
 802021e:	db06      	blt.n	802022e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020220:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020222:	4474      	add	r4, lr
 8020224:	3b01      	subs	r3, #1
 8020226:	3503      	adds	r5, #3
 8020228:	4410      	add	r0, r2
 802022a:	e7ef      	b.n	802020c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802022c:	d075      	beq.n	802031a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 802022e:	1e5a      	subs	r2, r3, #1
 8020230:	fb0e 4602 	mla	r6, lr, r2, r4
 8020234:	1436      	asrs	r6, r6, #16
 8020236:	d465      	bmi.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020238:	4546      	cmp	r6, r8
 802023a:	da63      	bge.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802023c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 802023e:	fb06 0202 	mla	r2, r6, r2, r0
 8020242:	1412      	asrs	r2, r2, #16
 8020244:	d45e      	bmi.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020246:	42ba      	cmp	r2, r7
 8020248:	da5c      	bge.n	8020304 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802024a:	1cef      	adds	r7, r5, #3
 802024c:	4699      	mov	r9, r3
 802024e:	f1b9 0f00 	cmp.w	r9, #0
 8020252:	dd5d      	ble.n	8020310 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8020254:	1402      	asrs	r2, r0, #16
 8020256:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802025a:	1426      	asrs	r6, r4, #16
 802025c:	4692      	mov	sl, r2
 802025e:	9a00      	ldr	r2, [sp, #0]
 8020260:	fb08 220a 	mla	r2, r8, sl, r2
 8020264:	5d92      	ldrb	r2, [r2, r6]
 8020266:	9e01      	ldr	r6, [sp, #4]
 8020268:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 802026c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8020270:	d041      	beq.n	80202f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020272:	9a03      	ldr	r2, [sp, #12]
 8020274:	fa5f fb86 	uxtb.w	fp, r6
 8020278:	fb02 f808 	mul.w	r8, r2, r8
 802027c:	f108 0201 	add.w	r2, r8, #1
 8020280:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020284:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020288:	1212      	asrs	r2, r2, #8
 802028a:	fa1f fa82 	uxth.w	sl, r2
 802028e:	43d2      	mvns	r2, r2
 8020290:	fb1b fb0a 	smulbb	fp, fp, sl
 8020294:	b2d2      	uxtb	r2, r2
 8020296:	fb08 b802 	mla	r8, r8, r2, fp
 802029a:	fa1f f888 	uxth.w	r8, r8
 802029e:	f108 0b01 	add.w	fp, r8, #1
 80202a2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80202a6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80202aa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80202ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80202b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80202b6:	fb16 fa0a 	smulbb	sl, r6, sl
 80202ba:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80202be:	f807 8c03 	strb.w	r8, [r7, #-3]
 80202c2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80202c6:	fb06 aa02 	mla	sl, r6, r2, sl
 80202ca:	fb08 b802 	mla	r8, r8, r2, fp
 80202ce:	fa1f fa8a 	uxth.w	sl, sl
 80202d2:	fa1f f888 	uxth.w	r8, r8
 80202d6:	f10a 0601 	add.w	r6, sl, #1
 80202da:	f108 0b01 	add.w	fp, r8, #1
 80202de:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80202e2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80202e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80202ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 80202ee:	f807 ac01 	strb.w	sl, [r7, #-1]
 80202f2:	f807 8c02 	strb.w	r8, [r7, #-2]
 80202f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80202f8:	4474      	add	r4, lr
 80202fa:	3703      	adds	r7, #3
 80202fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8020300:	4410      	add	r0, r2
 8020302:	e7a4      	b.n	802024e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020304:	f04f 0800 	mov.w	r8, #0
 8020308:	eba3 0208 	sub.w	r2, r3, r8
 802030c:	2a00      	cmp	r2, #0
 802030e:	dc3b      	bgt.n	8020388 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020310:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020318:	441d      	add	r5, r3
 802031a:	2900      	cmp	r1, #0
 802031c:	f340 8093 	ble.w	8020446 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020320:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020326:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802032a:	3901      	subs	r1, #1
 802032c:	eeb0 6a62 	vmov.f32	s12, s5
 8020330:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020334:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020338:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802033c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020340:	eeb0 6a43 	vmov.f32	s12, s6
 8020344:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020348:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802034c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020350:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020354:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020358:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802035c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020360:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020364:	ee12 2a90 	vmov	r2, s5
 8020368:	eef0 2a47 	vmov.f32	s5, s14
 802036c:	fb92 fef3 	sdiv	lr, r2, r3
 8020370:	ee13 2a10 	vmov	r2, s6
 8020374:	eeb0 3a67 	vmov.f32	s6, s15
 8020378:	fb92 f3f3 	sdiv	r3, r2, r3
 802037c:	9a02      	ldr	r2, [sp, #8]
 802037e:	9312      	str	r3, [sp, #72]	@ 0x48
 8020380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020382:	bf08      	it	eq
 8020384:	4613      	moveq	r3, r2
 8020386:	e731      	b.n	80201ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020388:	1427      	asrs	r7, r4, #16
 802038a:	d456      	bmi.n	802043a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802038c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020390:	42be      	cmp	r6, r7
 8020392:	dd52      	ble.n	802043a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020394:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020398:	d44f      	bmi.n	802043a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802039a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802039e:	454a      	cmp	r2, r9
 80203a0:	dd4b      	ble.n	802043a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80203a2:	9a00      	ldr	r2, [sp, #0]
 80203a4:	b236      	sxth	r6, r6
 80203a6:	fb09 2606 	mla	r6, r9, r6, r2
 80203aa:	5df2      	ldrb	r2, [r6, r7]
 80203ac:	9e01      	ldr	r6, [sp, #4]
 80203ae:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80203b2:	0e3a      	lsrs	r2, r7, #24
 80203b4:	d041      	beq.n	802043a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80203b6:	9e03      	ldr	r6, [sp, #12]
 80203b8:	fa5f fb87 	uxtb.w	fp, r7
 80203bc:	4372      	muls	r2, r6
 80203be:	1c56      	adds	r6, r2, #1
 80203c0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80203c4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80203c8:	1212      	asrs	r2, r2, #8
 80203ca:	f815 9006 	ldrb.w	r9, [r5, r6]
 80203ce:	fa1f fa82 	uxth.w	sl, r2
 80203d2:	43d2      	mvns	r2, r2
 80203d4:	fb1b fb0a 	smulbb	fp, fp, sl
 80203d8:	b2d2      	uxtb	r2, r2
 80203da:	fb09 b902 	mla	r9, r9, r2, fp
 80203de:	fa1f f989 	uxth.w	r9, r9
 80203e2:	f109 0b01 	add.w	fp, r9, #1
 80203e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80203ea:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80203ee:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80203f2:	fb1b fb0a 	smulbb	fp, fp, sl
 80203f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80203fa:	fb17 fa0a 	smulbb	sl, r7, sl
 80203fe:	f805 9006 	strb.w	r9, [r5, r6]
 8020402:	442e      	add	r6, r5
 8020404:	78b7      	ldrb	r7, [r6, #2]
 8020406:	f896 9001 	ldrb.w	r9, [r6, #1]
 802040a:	fb07 aa02 	mla	sl, r7, r2, sl
 802040e:	fb09 b902 	mla	r9, r9, r2, fp
 8020412:	fa1f fa8a 	uxth.w	sl, sl
 8020416:	fa1f f989 	uxth.w	r9, r9
 802041a:	f10a 0701 	add.w	r7, sl, #1
 802041e:	f109 0b01 	add.w	fp, r9, #1
 8020422:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020426:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802042a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802042e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020432:	f886 a002 	strb.w	sl, [r6, #2]
 8020436:	f886 9001 	strb.w	r9, [r6, #1]
 802043a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802043c:	4474      	add	r4, lr
 802043e:	f108 0801 	add.w	r8, r8, #1
 8020442:	4410      	add	r0, r2
 8020444:	e760      	b.n	8020308 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8020446:	b005      	add	sp, #20
 8020448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802044c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020450:	b085      	sub	sp, #20
 8020452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020456:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020458:	9203      	str	r2, [sp, #12]
 802045a:	6868      	ldr	r0, [r5, #4]
 802045c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8020460:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8020464:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8020468:	fb00 2404 	mla	r4, r0, r4, r2
 802046c:	682a      	ldr	r2, [r5, #0]
 802046e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020472:	4414      	add	r4, r2
 8020474:	f8dc 2000 	ldr.w	r2, [ip]
 8020478:	9201      	str	r2, [sp, #4]
 802047a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 802047e:	3204      	adds	r2, #4
 8020480:	9202      	str	r2, [sp, #8]
 8020482:	2900      	cmp	r1, #0
 8020484:	dc03      	bgt.n	802048e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020486:	9a03      	ldr	r2, [sp, #12]
 8020488:	2a00      	cmp	r2, #0
 802048a:	f340 8137 	ble.w	80206fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802048e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020490:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020494:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020498:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802049a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802049e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	dd0d      	ble.n	80204c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80204a6:	1405      	asrs	r5, r0, #16
 80204a8:	d405      	bmi.n	80204b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80204aa:	4545      	cmp	r5, r8
 80204ac:	da03      	bge.n	80204b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80204ae:	1415      	asrs	r5, r2, #16
 80204b0:	d401      	bmi.n	80204b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80204b2:	42bd      	cmp	r5, r7
 80204b4:	db06      	blt.n	80204c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80204b6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80204b8:	4470      	add	r0, lr
 80204ba:	3b01      	subs	r3, #1
 80204bc:	3403      	adds	r4, #3
 80204be:	442a      	add	r2, r5
 80204c0:	e7ef      	b.n	80204a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80204c2:	d070      	beq.n	80205a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80204c4:	1e5d      	subs	r5, r3, #1
 80204c6:	fb0e 0605 	mla	r6, lr, r5, r0
 80204ca:	1436      	asrs	r6, r6, #16
 80204cc:	d462      	bmi.n	8020594 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80204ce:	4546      	cmp	r6, r8
 80204d0:	da60      	bge.n	8020594 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80204d2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80204d4:	fb06 2505 	mla	r5, r6, r5, r2
 80204d8:	142d      	asrs	r5, r5, #16
 80204da:	d45b      	bmi.n	8020594 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80204dc:	42bd      	cmp	r5, r7
 80204de:	da59      	bge.n	8020594 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80204e0:	1ce5      	adds	r5, r4, #3
 80204e2:	469a      	mov	sl, r3
 80204e4:	f1ba 0f00 	cmp.w	sl, #0
 80204e8:	dd58      	ble.n	802059c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80204ea:	1416      	asrs	r6, r2, #16
 80204ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80204f0:	1407      	asrs	r7, r0, #16
 80204f2:	46b1      	mov	r9, r6
 80204f4:	9e01      	ldr	r6, [sp, #4]
 80204f6:	fb08 6609 	mla	r6, r8, r9, r6
 80204fa:	5df6      	ldrb	r6, [r6, r7]
 80204fc:	9f02      	ldr	r7, [sp, #8]
 80204fe:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8020502:	0e37      	lsrs	r7, r6, #24
 8020504:	2fff      	cmp	r7, #255	@ 0xff
 8020506:	f000 80f0 	beq.w	80206ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802050a:	fa5f f887 	uxtb.w	r8, r7
 802050e:	b3d7      	cbz	r7, 8020586 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020510:	fa1f f788 	uxth.w	r7, r8
 8020514:	ea6f 0808 	mvn.w	r8, r8
 8020518:	fa5f fb86 	uxtb.w	fp, r6
 802051c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8020520:	fa5f f888 	uxtb.w	r8, r8
 8020524:	fb1b fb07 	smulbb	fp, fp, r7
 8020528:	fb09 b908 	mla	r9, r9, r8, fp
 802052c:	fa1f f989 	uxth.w	r9, r9
 8020530:	f109 0b01 	add.w	fp, r9, #1
 8020534:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020538:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802053c:	fb1b fb08 	smulbb	fp, fp, r8
 8020540:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020544:	f805 9c03 	strb.w	r9, [r5, #-3]
 8020548:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802054c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020550:	fb09 b907 	mla	r9, r9, r7, fp
 8020554:	fa1f f989 	uxth.w	r9, r9
 8020558:	f109 0b01 	add.w	fp, r9, #1
 802055c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020560:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020564:	f805 9c02 	strb.w	r9, [r5, #-2]
 8020568:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 802056c:	fb19 f808 	smulbb	r8, r9, r8
 8020570:	fb06 8607 	mla	r6, r6, r7, r8
 8020574:	b2b6      	uxth	r6, r6
 8020576:	f106 0801 	add.w	r8, r6, #1
 802057a:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 802057e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020582:	f805 8c01 	strb.w	r8, [r5, #-1]
 8020586:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020588:	4470      	add	r0, lr
 802058a:	3503      	adds	r5, #3
 802058c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020590:	4432      	add	r2, r6
 8020592:	e7a7      	b.n	80204e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020594:	2600      	movs	r6, #0
 8020596:	1b9d      	subs	r5, r3, r6
 8020598:	2d00      	cmp	r5, #0
 802059a:	dc3b      	bgt.n	8020614 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802059c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80205a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80205a4:	441c      	add	r4, r3
 80205a6:	2900      	cmp	r1, #0
 80205a8:	f340 80a8 	ble.w	80206fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80205ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80205b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80205b6:	3901      	subs	r1, #1
 80205b8:	eeb0 6a62 	vmov.f32	s12, s5
 80205bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80205c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205c8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80205cc:	eeb0 6a43 	vmov.f32	s12, s6
 80205d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205d4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80205d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205f0:	ee12 2a90 	vmov	r2, s5
 80205f4:	eef0 2a47 	vmov.f32	s5, s14
 80205f8:	fb92 fef3 	sdiv	lr, r2, r3
 80205fc:	ee13 2a10 	vmov	r2, s6
 8020600:	eeb0 3a67 	vmov.f32	s6, s15
 8020604:	fb92 f3f3 	sdiv	r3, r2, r3
 8020608:	9a03      	ldr	r2, [sp, #12]
 802060a:	9312      	str	r3, [sp, #72]	@ 0x48
 802060c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802060e:	bf08      	it	eq
 8020610:	4613      	moveq	r3, r2
 8020612:	e736      	b.n	8020482 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020614:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020618:	d457      	bmi.n	80206ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802061a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 802061e:	4547      	cmp	r7, r8
 8020620:	dd53      	ble.n	80206ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020622:	ea5f 4922 	movs.w	r9, r2, asr #16
 8020626:	d450      	bmi.n	80206ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020628:	f8dc 500c 	ldr.w	r5, [ip, #12]
 802062c:	454d      	cmp	r5, r9
 802062e:	dd4c      	ble.n	80206ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020630:	9d01      	ldr	r5, [sp, #4]
 8020632:	b23f      	sxth	r7, r7
 8020634:	fb09 5707 	mla	r7, r9, r7, r5
 8020638:	f817 5008 	ldrb.w	r5, [r7, r8]
 802063c:	9f02      	ldr	r7, [sp, #8]
 802063e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020642:	0e2f      	lsrs	r7, r5, #24
 8020644:	2fff      	cmp	r7, #255	@ 0xff
 8020646:	d045      	beq.n	80206d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020648:	fa5f f987 	uxtb.w	r9, r7
 802064c:	b3ef      	cbz	r7, 80206ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802064e:	fa1f f889 	uxth.w	r8, r9
 8020652:	ea6f 0909 	mvn.w	r9, r9
 8020656:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 802065a:	fa5f fb85 	uxtb.w	fp, r5
 802065e:	f814 a007 	ldrb.w	sl, [r4, r7]
 8020662:	fa5f f989 	uxtb.w	r9, r9
 8020666:	fb1b fb08 	smulbb	fp, fp, r8
 802066a:	fb0a ba09 	mla	sl, sl, r9, fp
 802066e:	fa1f fa8a 	uxth.w	sl, sl
 8020672:	f10a 0b01 	add.w	fp, sl, #1
 8020676:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802067a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802067e:	f804 a007 	strb.w	sl, [r4, r7]
 8020682:	4427      	add	r7, r4
 8020684:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020688:	f3c5 4507 	ubfx	r5, r5, #16, #8
 802068c:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020690:	fb1b fb09 	smulbb	fp, fp, r9
 8020694:	fb0a ba08 	mla	sl, sl, r8, fp
 8020698:	fa1f fa8a 	uxth.w	sl, sl
 802069c:	f10a 0b01 	add.w	fp, sl, #1
 80206a0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80206a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80206a8:	f887 a001 	strb.w	sl, [r7, #1]
 80206ac:	f897 a002 	ldrb.w	sl, [r7, #2]
 80206b0:	fb1a f909 	smulbb	r9, sl, r9
 80206b4:	fb05 9508 	mla	r5, r5, r8, r9
 80206b8:	b2ad      	uxth	r5, r5
 80206ba:	f105 0901 	add.w	r9, r5, #1
 80206be:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80206c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80206c6:	f887 9002 	strb.w	r9, [r7, #2]
 80206ca:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80206cc:	4470      	add	r0, lr
 80206ce:	3601      	adds	r6, #1
 80206d0:	442a      	add	r2, r5
 80206d2:	e760      	b.n	8020596 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80206d4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80206d8:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80206dc:	55e5      	strb	r5, [r4, r7]
 80206de:	4427      	add	r7, r4
 80206e0:	0c2d      	lsrs	r5, r5, #16
 80206e2:	f887 8001 	strb.w	r8, [r7, #1]
 80206e6:	70bd      	strb	r5, [r7, #2]
 80206e8:	e7ef      	b.n	80206ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80206ea:	0a37      	lsrs	r7, r6, #8
 80206ec:	f805 6c03 	strb.w	r6, [r5, #-3]
 80206f0:	0c36      	lsrs	r6, r6, #16
 80206f2:	f805 7c02 	strb.w	r7, [r5, #-2]
 80206f6:	f805 6c01 	strb.w	r6, [r5, #-1]
 80206fa:	e744      	b.n	8020586 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80206fc:	b005      	add	sp, #20
 80206fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020702 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020702:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020706:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020708:	9201      	str	r2, [sp, #4]
 802070a:	6870      	ldr	r0, [r6, #4]
 802070c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8020710:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8020714:	fa1f fe85 	uxth.w	lr, r5
 8020718:	43ed      	mvns	r5, r5
 802071a:	f8dc 8000 	ldr.w	r8, [ip]
 802071e:	b2ed      	uxtb	r5, r5
 8020720:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8020724:	fb00 2404 	mla	r4, r0, r4, r2
 8020728:	6832      	ldr	r2, [r6, #0]
 802072a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802072e:	4414      	add	r4, r2
 8020730:	2900      	cmp	r1, #0
 8020732:	dc03      	bgt.n	802073c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020734:	9a01      	ldr	r2, [sp, #4]
 8020736:	2a00      	cmp	r2, #0
 8020738:	f340 810d 	ble.w	8020956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802073c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802073e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8020742:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020748:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 802074c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020750:	2b00      	cmp	r3, #0
 8020752:	dd0e      	ble.n	8020772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020754:	1406      	asrs	r6, r0, #16
 8020756:	d405      	bmi.n	8020764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020758:	4556      	cmp	r6, sl
 802075a:	da03      	bge.n	8020764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802075c:	1416      	asrs	r6, r2, #16
 802075e:	d401      	bmi.n	8020764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020760:	454e      	cmp	r6, r9
 8020762:	db07      	blt.n	8020774 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020764:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8020766:	3b01      	subs	r3, #1
 8020768:	3403      	adds	r4, #3
 802076a:	4430      	add	r0, r6
 802076c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 802076e:	4432      	add	r2, r6
 8020770:	e7ee      	b.n	8020750 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020772:	d060      	beq.n	8020836 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8020774:	1e5e      	subs	r6, r3, #1
 8020776:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8020778:	fb07 0706 	mla	r7, r7, r6, r0
 802077c:	143f      	asrs	r7, r7, #16
 802077e:	d451      	bmi.n	8020824 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020780:	4557      	cmp	r7, sl
 8020782:	da4f      	bge.n	8020824 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020784:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020786:	fb07 2606 	mla	r6, r7, r6, r2
 802078a:	1436      	asrs	r6, r6, #16
 802078c:	d44a      	bmi.n	8020824 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802078e:	454e      	cmp	r6, r9
 8020790:	da48      	bge.n	8020824 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020792:	1ce6      	adds	r6, r4, #3
 8020794:	4699      	mov	r9, r3
 8020796:	f1b9 0f00 	cmp.w	r9, #0
 802079a:	f106 0603 	add.w	r6, r6, #3
 802079e:	dd45      	ble.n	802082c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80207a0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80207a4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80207a8:	1417      	asrs	r7, r2, #16
 80207aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80207ae:	fb0b a707 	mla	r7, fp, r7, sl
 80207b2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80207b6:	fb1b fb05 	smulbb	fp, fp, r5
 80207ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80207be:	eb08 0a07 	add.w	sl, r8, r7
 80207c2:	f818 7007 	ldrb.w	r7, [r8, r7]
 80207c6:	fb07 b70e 	mla	r7, r7, lr, fp
 80207ca:	b2bf      	uxth	r7, r7
 80207cc:	f107 0b01 	add.w	fp, r7, #1
 80207d0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80207d4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80207d8:	fb1b fb05 	smulbb	fp, fp, r5
 80207dc:	123f      	asrs	r7, r7, #8
 80207de:	f806 7c06 	strb.w	r7, [r6, #-6]
 80207e2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80207e6:	fb07 b70e 	mla	r7, r7, lr, fp
 80207ea:	b2bf      	uxth	r7, r7
 80207ec:	f107 0b01 	add.w	fp, r7, #1
 80207f0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80207f4:	123f      	asrs	r7, r7, #8
 80207f6:	f806 7c05 	strb.w	r7, [r6, #-5]
 80207fa:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80207fe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8020802:	fb1a fa05 	smulbb	sl, sl, r5
 8020806:	fb07 a70e 	mla	r7, r7, lr, sl
 802080a:	b2bf      	uxth	r7, r7
 802080c:	f107 0a01 	add.w	sl, r7, #1
 8020810:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8020814:	123f      	asrs	r7, r7, #8
 8020816:	f806 7c04 	strb.w	r7, [r6, #-4]
 802081a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802081c:	4438      	add	r0, r7
 802081e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020820:	443a      	add	r2, r7
 8020822:	e7b8      	b.n	8020796 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020824:	2700      	movs	r7, #0
 8020826:	1bde      	subs	r6, r3, r7
 8020828:	2e00      	cmp	r6, #0
 802082a:	dc3f      	bgt.n	80208ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802082c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020834:	441c      	add	r4, r3
 8020836:	2900      	cmp	r1, #0
 8020838:	f340 808d 	ble.w	8020956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802083c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020842:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020846:	3901      	subs	r1, #1
 8020848:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802084c:	eef0 6a62 	vmov.f32	s13, s5
 8020850:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020854:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020858:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802085c:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8020860:	eef0 6a43 	vmov.f32	s13, s6
 8020864:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020868:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 802086c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020870:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020874:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020878:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802087c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020880:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020884:	ee12 2a90 	vmov	r2, s5
 8020888:	eef0 2a47 	vmov.f32	s5, s14
 802088c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020890:	ee13 2a10 	vmov	r2, s6
 8020894:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020898:	eeb0 3a67 	vmov.f32	s6, s15
 802089c:	fb92 f3f3 	sdiv	r3, r2, r3
 80208a0:	9a01      	ldr	r2, [sp, #4]
 80208a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80208a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80208a6:	bf08      	it	eq
 80208a8:	4613      	moveq	r3, r2
 80208aa:	e741      	b.n	8020730 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80208ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 80208b0:	d44b      	bmi.n	802094a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80208b2:	f8dc b008 	ldr.w	fp, [ip, #8]
 80208b6:	45cb      	cmp	fp, r9
 80208b8:	dd47      	ble.n	802094a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80208ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80208be:	d444      	bmi.n	802094a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80208c0:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80208c4:	4556      	cmp	r6, sl
 80208c6:	dd40      	ble.n	802094a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80208c8:	fa0f f68b 	sxth.w	r6, fp
 80208cc:	fb0a 9906 	mla	r9, sl, r6, r9
 80208d0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80208d4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80208d8:	f814 b006 	ldrb.w	fp, [r4, r6]
 80208dc:	fb1b fb05 	smulbb	fp, fp, r5
 80208e0:	eb08 0a09 	add.w	sl, r8, r9
 80208e4:	f818 9009 	ldrb.w	r9, [r8, r9]
 80208e8:	fb09 b90e 	mla	r9, r9, lr, fp
 80208ec:	fa1f f989 	uxth.w	r9, r9
 80208f0:	f109 0b01 	add.w	fp, r9, #1
 80208f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80208f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80208fc:	f804 9006 	strb.w	r9, [r4, r6]
 8020900:	4426      	add	r6, r4
 8020902:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020906:	f896 b001 	ldrb.w	fp, [r6, #1]
 802090a:	fb1b fb05 	smulbb	fp, fp, r5
 802090e:	fb09 b90e 	mla	r9, r9, lr, fp
 8020912:	fa1f f989 	uxth.w	r9, r9
 8020916:	f109 0b01 	add.w	fp, r9, #1
 802091a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802091e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020922:	f886 9001 	strb.w	r9, [r6, #1]
 8020926:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802092a:	f896 a002 	ldrb.w	sl, [r6, #2]
 802092e:	fb1a fa05 	smulbb	sl, sl, r5
 8020932:	fb09 a90e 	mla	r9, r9, lr, sl
 8020936:	fa1f f989 	uxth.w	r9, r9
 802093a:	f109 0a01 	add.w	sl, r9, #1
 802093e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020942:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020946:	f886 9002 	strb.w	r9, [r6, #2]
 802094a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 802094c:	3701      	adds	r7, #1
 802094e:	4430      	add	r0, r6
 8020950:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8020952:	4432      	add	r2, r6
 8020954:	e767      	b.n	8020826 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020956:	b003      	add	sp, #12
 8020958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802095c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802095c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020960:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020966:	9201      	str	r2, [sp, #4]
 8020968:	6868      	ldr	r0, [r5, #4]
 802096a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 802096c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8020970:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8020974:	fb00 2404 	mla	r4, r0, r4, r2
 8020978:	682a      	ldr	r2, [r5, #0]
 802097a:	f8d7 8000 	ldr.w	r8, [r7]
 802097e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020982:	4414      	add	r4, r2
 8020984:	2900      	cmp	r1, #0
 8020986:	dc03      	bgt.n	8020990 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020988:	9a01      	ldr	r2, [sp, #4]
 802098a:	2a00      	cmp	r2, #0
 802098c:	f340 80af 	ble.w	8020aee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020990:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020992:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8020996:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802099a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802099c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80209a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	dd0c      	ble.n	80209c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80209a8:	1405      	asrs	r5, r0, #16
 80209aa:	d405      	bmi.n	80209b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80209ac:	4555      	cmp	r5, sl
 80209ae:	da03      	bge.n	80209b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80209b0:	1415      	asrs	r5, r2, #16
 80209b2:	d401      	bmi.n	80209b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80209b4:	454d      	cmp	r5, r9
 80209b6:	db05      	blt.n	80209c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80209b8:	4470      	add	r0, lr
 80209ba:	4462      	add	r2, ip
 80209bc:	3b01      	subs	r3, #1
 80209be:	3403      	adds	r4, #3
 80209c0:	e7f0      	b.n	80209a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80209c2:	d038      	beq.n	8020a36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80209c4:	1e5d      	subs	r5, r3, #1
 80209c6:	fb0e 0605 	mla	r6, lr, r5, r0
 80209ca:	1436      	asrs	r6, r6, #16
 80209cc:	d42a      	bmi.n	8020a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80209ce:	4556      	cmp	r6, sl
 80209d0:	da28      	bge.n	8020a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80209d2:	fb0c 2505 	mla	r5, ip, r5, r2
 80209d6:	142d      	asrs	r5, r5, #16
 80209d8:	d424      	bmi.n	8020a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80209da:	454d      	cmp	r5, r9
 80209dc:	da22      	bge.n	8020a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80209de:	1ce6      	adds	r6, r4, #3
 80209e0:	4699      	mov	r9, r3
 80209e2:	f1b9 0f00 	cmp.w	r9, #0
 80209e6:	f106 0603 	add.w	r6, r6, #3
 80209ea:	dd1f      	ble.n	8020a2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80209ec:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80209f0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80209f4:	1415      	asrs	r5, r2, #16
 80209f6:	4470      	add	r0, lr
 80209f8:	4462      	add	r2, ip
 80209fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80209fe:	fb0b a505 	mla	r5, fp, r5, sl
 8020a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a06:	eb08 0a05 	add.w	sl, r8, r5
 8020a0a:	f818 5005 	ldrb.w	r5, [r8, r5]
 8020a0e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020a12:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020a16:	f806 5c05 	strb.w	r5, [r6, #-5]
 8020a1a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8020a1e:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020a22:	e7de      	b.n	80209e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020a24:	2600      	movs	r6, #0
 8020a26:	1b9d      	subs	r5, r3, r6
 8020a28:	2d00      	cmp	r5, #0
 8020a2a:	dc38      	bgt.n	8020a9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020a2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a34:	441c      	add	r4, r3
 8020a36:	2900      	cmp	r1, #0
 8020a38:	dd59      	ble.n	8020aee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020a3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a44:	3901      	subs	r1, #1
 8020a46:	eeb0 6a62 	vmov.f32	s12, s5
 8020a4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020a4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a56:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020a5a:	eeb0 6a43 	vmov.f32	s12, s6
 8020a5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a62:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020a66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a7e:	ee12 2a90 	vmov	r2, s5
 8020a82:	eef0 2a47 	vmov.f32	s5, s14
 8020a86:	fb92 fef3 	sdiv	lr, r2, r3
 8020a8a:	ee13 2a10 	vmov	r2, s6
 8020a8e:	eeb0 3a67 	vmov.f32	s6, s15
 8020a92:	fb92 fcf3 	sdiv	ip, r2, r3
 8020a96:	9a01      	ldr	r2, [sp, #4]
 8020a98:	bf08      	it	eq
 8020a9a:	4613      	moveq	r3, r2
 8020a9c:	e772      	b.n	8020984 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020a9e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020aa2:	d420      	bmi.n	8020ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020aa4:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8020aa8:	45cb      	cmp	fp, r9
 8020aaa:	dd1c      	ble.n	8020ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020aac:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020ab0:	d419      	bmi.n	8020ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020ab2:	68fd      	ldr	r5, [r7, #12]
 8020ab4:	4555      	cmp	r5, sl
 8020ab6:	dd16      	ble.n	8020ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020ab8:	fa0f f58b 	sxth.w	r5, fp
 8020abc:	fb0a 9505 	mla	r5, sl, r5, r9
 8020ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020ac4:	f818 9005 	ldrb.w	r9, [r8, r5]
 8020ac8:	eb08 0b05 	add.w	fp, r8, r5
 8020acc:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8020ad0:	f804 9005 	strb.w	r9, [r4, r5]
 8020ad4:	4425      	add	r5, r4
 8020ad6:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8020ada:	f885 9001 	strb.w	r9, [r5, #1]
 8020ade:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8020ae2:	f885 9002 	strb.w	r9, [r5, #2]
 8020ae6:	4470      	add	r0, lr
 8020ae8:	4462      	add	r2, ip
 8020aea:	3601      	adds	r6, #1
 8020aec:	e79b      	b.n	8020a26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8020aee:	b003      	add	sp, #12
 8020af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020af4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020af8:	b085      	sub	sp, #20
 8020afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020afe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020b00:	9202      	str	r2, [sp, #8]
 8020b02:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8020b06:	6860      	ldr	r0, [r4, #4]
 8020b08:	9203      	str	r2, [sp, #12]
 8020b0a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8020b0e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8020b12:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8020b16:	fb00 2505 	mla	r5, r0, r5, r2
 8020b1a:	6822      	ldr	r2, [r4, #0]
 8020b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b20:	4415      	add	r5, r2
 8020b22:	f8dc 2000 	ldr.w	r2, [ip]
 8020b26:	9201      	str	r2, [sp, #4]
 8020b28:	2900      	cmp	r1, #0
 8020b2a:	dc03      	bgt.n	8020b34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020b2c:	9a02      	ldr	r2, [sp, #8]
 8020b2e:	2a00      	cmp	r2, #0
 8020b30:	f340 8122 	ble.w	8020d78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020b34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b36:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020b3a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020b3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020b40:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020b44:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	dd0d      	ble.n	8020b68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020b4c:	1422      	asrs	r2, r4, #16
 8020b4e:	d405      	bmi.n	8020b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020b50:	4542      	cmp	r2, r8
 8020b52:	da03      	bge.n	8020b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020b54:	1402      	asrs	r2, r0, #16
 8020b56:	d401      	bmi.n	8020b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020b58:	42ba      	cmp	r2, r7
 8020b5a:	db06      	blt.n	8020b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020b5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020b5e:	4474      	add	r4, lr
 8020b60:	3b01      	subs	r3, #1
 8020b62:	3503      	adds	r5, #3
 8020b64:	4410      	add	r0, r2
 8020b66:	e7ef      	b.n	8020b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020b68:	d072      	beq.n	8020c50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020b6a:	1e5a      	subs	r2, r3, #1
 8020b6c:	fb0e 4602 	mla	r6, lr, r2, r4
 8020b70:	1436      	asrs	r6, r6, #16
 8020b72:	d462      	bmi.n	8020c3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020b74:	4546      	cmp	r6, r8
 8020b76:	da60      	bge.n	8020c3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020b78:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020b7a:	fb06 0202 	mla	r2, r6, r2, r0
 8020b7e:	1412      	asrs	r2, r2, #16
 8020b80:	d45b      	bmi.n	8020c3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020b82:	42ba      	cmp	r2, r7
 8020b84:	da59      	bge.n	8020c3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020b86:	1cef      	adds	r7, r5, #3
 8020b88:	4699      	mov	r9, r3
 8020b8a:	f1b9 0f00 	cmp.w	r9, #0
 8020b8e:	dd5a      	ble.n	8020c46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020b90:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020b94:	1426      	asrs	r6, r4, #16
 8020b96:	1402      	asrs	r2, r0, #16
 8020b98:	fb08 6202 	mla	r2, r8, r2, r6
 8020b9c:	9e01      	ldr	r6, [sp, #4]
 8020b9e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8020ba2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8020ba6:	d041      	beq.n	8020c2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020ba8:	9a03      	ldr	r2, [sp, #12]
 8020baa:	fa5f fb86 	uxtb.w	fp, r6
 8020bae:	fb02 f808 	mul.w	r8, r2, r8
 8020bb2:	f108 0201 	add.w	r2, r8, #1
 8020bb6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020bba:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020bbe:	1212      	asrs	r2, r2, #8
 8020bc0:	fa1f fa82 	uxth.w	sl, r2
 8020bc4:	43d2      	mvns	r2, r2
 8020bc6:	fb1b fb0a 	smulbb	fp, fp, sl
 8020bca:	b2d2      	uxtb	r2, r2
 8020bcc:	fb08 b802 	mla	r8, r8, r2, fp
 8020bd0:	fa1f f888 	uxth.w	r8, r8
 8020bd4:	f108 0b01 	add.w	fp, r8, #1
 8020bd8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020bdc:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020be0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020be4:	fb1b fb0a 	smulbb	fp, fp, sl
 8020be8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020bec:	fb16 fa0a 	smulbb	sl, r6, sl
 8020bf0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020bf4:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020bf8:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8020bfc:	fb06 aa02 	mla	sl, r6, r2, sl
 8020c00:	fb08 b802 	mla	r8, r8, r2, fp
 8020c04:	fa1f fa8a 	uxth.w	sl, sl
 8020c08:	fa1f f888 	uxth.w	r8, r8
 8020c0c:	f10a 0601 	add.w	r6, sl, #1
 8020c10:	f108 0b01 	add.w	fp, r8, #1
 8020c14:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020c18:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020c1c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020c20:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c24:	f807 ac01 	strb.w	sl, [r7, #-1]
 8020c28:	f807 8c02 	strb.w	r8, [r7, #-2]
 8020c2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020c2e:	4474      	add	r4, lr
 8020c30:	3703      	adds	r7, #3
 8020c32:	f109 39ff 	add.w	r9, r9, #4294967295
 8020c36:	4410      	add	r0, r2
 8020c38:	e7a7      	b.n	8020b8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020c3a:	f04f 0800 	mov.w	r8, #0
 8020c3e:	eba3 0208 	sub.w	r2, r3, r8
 8020c42:	2a00      	cmp	r2, #0
 8020c44:	dc3b      	bgt.n	8020cbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020c46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c4e:	441d      	add	r5, r3
 8020c50:	2900      	cmp	r1, #0
 8020c52:	f340 8091 	ble.w	8020d78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020c56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c60:	3901      	subs	r1, #1
 8020c62:	eeb0 6a62 	vmov.f32	s12, s5
 8020c66:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c72:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020c76:	eeb0 6a43 	vmov.f32	s12, s6
 8020c7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c7e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020c82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c86:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c9a:	ee12 2a90 	vmov	r2, s5
 8020c9e:	eef0 2a47 	vmov.f32	s5, s14
 8020ca2:	fb92 fef3 	sdiv	lr, r2, r3
 8020ca6:	ee13 2a10 	vmov	r2, s6
 8020caa:	eeb0 3a67 	vmov.f32	s6, s15
 8020cae:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cb2:	9a02      	ldr	r2, [sp, #8]
 8020cb4:	9312      	str	r3, [sp, #72]	@ 0x48
 8020cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cb8:	bf08      	it	eq
 8020cba:	4613      	moveq	r3, r2
 8020cbc:	e734      	b.n	8020b28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020cbe:	1427      	asrs	r7, r4, #16
 8020cc0:	d454      	bmi.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020cc2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020cc6:	42be      	cmp	r6, r7
 8020cc8:	dd50      	ble.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020cca:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020cce:	d44d      	bmi.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020cd0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020cd4:	454a      	cmp	r2, r9
 8020cd6:	dd49      	ble.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020cd8:	b236      	sxth	r6, r6
 8020cda:	9a01      	ldr	r2, [sp, #4]
 8020cdc:	fb09 7606 	mla	r6, r9, r6, r7
 8020ce0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020ce4:	0e3a      	lsrs	r2, r7, #24
 8020ce6:	d041      	beq.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020ce8:	9e03      	ldr	r6, [sp, #12]
 8020cea:	fa5f fb87 	uxtb.w	fp, r7
 8020cee:	4372      	muls	r2, r6
 8020cf0:	1c56      	adds	r6, r2, #1
 8020cf2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020cf6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8020cfa:	1212      	asrs	r2, r2, #8
 8020cfc:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020d00:	fa1f fa82 	uxth.w	sl, r2
 8020d04:	43d2      	mvns	r2, r2
 8020d06:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d0a:	b2d2      	uxtb	r2, r2
 8020d0c:	fb09 b902 	mla	r9, r9, r2, fp
 8020d10:	fa1f f989 	uxth.w	r9, r9
 8020d14:	f109 0b01 	add.w	fp, r9, #1
 8020d18:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020d1c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020d20:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020d24:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d2c:	fb17 fa0a 	smulbb	sl, r7, sl
 8020d30:	f805 9006 	strb.w	r9, [r5, r6]
 8020d34:	442e      	add	r6, r5
 8020d36:	78b7      	ldrb	r7, [r6, #2]
 8020d38:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020d3c:	fb07 aa02 	mla	sl, r7, r2, sl
 8020d40:	fb09 b902 	mla	r9, r9, r2, fp
 8020d44:	fa1f fa8a 	uxth.w	sl, sl
 8020d48:	fa1f f989 	uxth.w	r9, r9
 8020d4c:	f10a 0701 	add.w	r7, sl, #1
 8020d50:	f109 0b01 	add.w	fp, r9, #1
 8020d54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d58:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020d5c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020d60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d64:	f886 a002 	strb.w	sl, [r6, #2]
 8020d68:	f886 9001 	strb.w	r9, [r6, #1]
 8020d6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020d6e:	4474      	add	r4, lr
 8020d70:	f108 0801 	add.w	r8, r8, #1
 8020d74:	4410      	add	r0, r2
 8020d76:	e762      	b.n	8020c3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020d78:	b005      	add	sp, #20
 8020d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d82:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020d88:	9201      	str	r2, [sp, #4]
 8020d8a:	6860      	ldr	r0, [r4, #4]
 8020d8c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8020d90:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8020d94:	fb00 2505 	mla	r5, r0, r5, r2
 8020d98:	6822      	ldr	r2, [r4, #0]
 8020d9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020d9e:	4415      	add	r5, r2
 8020da0:	f8dc 2000 	ldr.w	r2, [ip]
 8020da4:	9200      	str	r2, [sp, #0]
 8020da6:	2900      	cmp	r1, #0
 8020da8:	dc03      	bgt.n	8020db2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020daa:	9a01      	ldr	r2, [sp, #4]
 8020dac:	2a00      	cmp	r2, #0
 8020dae:	f340 812b 	ble.w	8021008 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020db2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020db4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020db8:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020dbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020dbe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020dc2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	dd0e      	ble.n	8020de8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020dca:	1422      	asrs	r2, r4, #16
 8020dcc:	d405      	bmi.n	8020dda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020dce:	4572      	cmp	r2, lr
 8020dd0:	da03      	bge.n	8020dda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020dd2:	1402      	asrs	r2, r0, #16
 8020dd4:	d401      	bmi.n	8020dda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020dd6:	42ba      	cmp	r2, r7
 8020dd8:	db07      	blt.n	8020dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020dda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020ddc:	3b01      	subs	r3, #1
 8020dde:	3503      	adds	r5, #3
 8020de0:	4414      	add	r4, r2
 8020de2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020de4:	4410      	add	r0, r2
 8020de6:	e7ee      	b.n	8020dc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020de8:	d06f      	beq.n	8020eca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020dea:	1e5a      	subs	r2, r3, #1
 8020dec:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8020dee:	fb06 4602 	mla	r6, r6, r2, r4
 8020df2:	1436      	asrs	r6, r6, #16
 8020df4:	d45e      	bmi.n	8020eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020df6:	4576      	cmp	r6, lr
 8020df8:	da5c      	bge.n	8020eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020dfa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8020dfc:	fb06 0202 	mla	r2, r6, r2, r0
 8020e00:	1412      	asrs	r2, r2, #16
 8020e02:	d457      	bmi.n	8020eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020e04:	42ba      	cmp	r2, r7
 8020e06:	da55      	bge.n	8020eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020e08:	1cee      	adds	r6, r5, #3
 8020e0a:	469a      	mov	sl, r3
 8020e0c:	f1ba 0f00 	cmp.w	sl, #0
 8020e10:	dd56      	ble.n	8020ec0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020e12:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020e16:	1427      	asrs	r7, r4, #16
 8020e18:	1402      	asrs	r2, r0, #16
 8020e1a:	fb0e 7202 	mla	r2, lr, r2, r7
 8020e1e:	9f00      	ldr	r7, [sp, #0]
 8020e20:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020e24:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8020e28:	d03c      	beq.n	8020ea4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020e2a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020e2e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020e32:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020e36:	fa5f f28e 	uxtb.w	r2, lr
 8020e3a:	b2ff      	uxtb	r7, r7
 8020e3c:	f000 80dd 	beq.w	8020ffa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020e40:	fa1f f882 	uxth.w	r8, r2
 8020e44:	43d2      	mvns	r2, r2
 8020e46:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8020e4a:	fb17 f708 	smulbb	r7, r7, r8
 8020e4e:	b2d2      	uxtb	r2, r2
 8020e50:	fb19 f908 	smulbb	r9, r9, r8
 8020e54:	fb0e 7702 	mla	r7, lr, r2, r7
 8020e58:	fb1b f808 	smulbb	r8, fp, r8
 8020e5c:	b2bf      	uxth	r7, r7
 8020e5e:	f107 0e01 	add.w	lr, r7, #1
 8020e62:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020e66:	123f      	asrs	r7, r7, #8
 8020e68:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020e6c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020e70:	fb07 9902 	mla	r9, r7, r2, r9
 8020e74:	fa1f f989 	uxth.w	r9, r9
 8020e78:	f109 0701 	add.w	r7, r9, #1
 8020e7c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020e80:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020e84:	fb07 8802 	mla	r8, r7, r2, r8
 8020e88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e8c:	fa1f f888 	uxth.w	r8, r8
 8020e90:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020e94:	f108 0201 	add.w	r2, r8, #1
 8020e98:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020e9c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020ea0:	f806 8c01 	strb.w	r8, [r6, #-1]
 8020ea4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020ea6:	3603      	adds	r6, #3
 8020ea8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020eac:	4414      	add	r4, r2
 8020eae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020eb0:	4410      	add	r0, r2
 8020eb2:	e7ab      	b.n	8020e0c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020eb4:	f04f 0e00 	mov.w	lr, #0
 8020eb8:	eba3 020e 	sub.w	r2, r3, lr
 8020ebc:	2a00      	cmp	r2, #0
 8020ebe:	dc3d      	bgt.n	8020f3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020ec0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ec8:	441d      	add	r5, r3
 8020eca:	2900      	cmp	r1, #0
 8020ecc:	f340 809c 	ble.w	8021008 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020ed0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ed4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020ed6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020eda:	3901      	subs	r1, #1
 8020edc:	eeb0 6a62 	vmov.f32	s12, s5
 8020ee0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ee4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ee8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020eec:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020ef0:	eeb0 6a43 	vmov.f32	s12, s6
 8020ef4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ef8:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020efc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f14:	ee12 2a90 	vmov	r2, s5
 8020f18:	eef0 2a47 	vmov.f32	s5, s14
 8020f1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f20:	ee13 2a10 	vmov	r2, s6
 8020f24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f28:	eeb0 3a67 	vmov.f32	s6, s15
 8020f2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f30:	9a01      	ldr	r2, [sp, #4]
 8020f32:	9310      	str	r3, [sp, #64]	@ 0x40
 8020f34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f36:	bf08      	it	eq
 8020f38:	4613      	moveq	r3, r2
 8020f3a:	e734      	b.n	8020da6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020f3c:	1427      	asrs	r7, r4, #16
 8020f3e:	d44d      	bmi.n	8020fdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020f40:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020f44:	42be      	cmp	r6, r7
 8020f46:	dd49      	ble.n	8020fdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020f48:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020f4c:	d446      	bmi.n	8020fdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020f4e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020f52:	4542      	cmp	r2, r8
 8020f54:	dd42      	ble.n	8020fdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020f56:	b236      	sxth	r6, r6
 8020f58:	9a00      	ldr	r2, [sp, #0]
 8020f5a:	fb08 7606 	mla	r6, r8, r6, r7
 8020f5e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020f62:	0e3a      	lsrs	r2, r7, #24
 8020f64:	d03a      	beq.n	8020fdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020f66:	2aff      	cmp	r2, #255	@ 0xff
 8020f68:	b2d6      	uxtb	r6, r2
 8020f6a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020f6e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020f72:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8020f76:	b2ff      	uxtb	r7, r7
 8020f78:	d037      	beq.n	8020fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020f7a:	fa1f f986 	uxth.w	r9, r6
 8020f7e:	4472      	add	r2, lr
 8020f80:	43f6      	mvns	r6, r6
 8020f82:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020f86:	fb17 f709 	smulbb	r7, r7, r9
 8020f8a:	fb1a fa09 	smulbb	sl, sl, r9
 8020f8e:	b2f6      	uxtb	r6, r6
 8020f90:	fb1b f909 	smulbb	r9, fp, r9
 8020f94:	fb08 7706 	mla	r7, r8, r6, r7
 8020f98:	b2bf      	uxth	r7, r7
 8020f9a:	f107 0801 	add.w	r8, r7, #1
 8020f9e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020fa2:	123f      	asrs	r7, r7, #8
 8020fa4:	54af      	strb	r7, [r5, r2]
 8020fa6:	442a      	add	r2, r5
 8020fa8:	7857      	ldrb	r7, [r2, #1]
 8020faa:	fb07 aa06 	mla	sl, r7, r6, sl
 8020fae:	fa1f fa8a 	uxth.w	sl, sl
 8020fb2:	f10a 0701 	add.w	r7, sl, #1
 8020fb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020fba:	7897      	ldrb	r7, [r2, #2]
 8020fbc:	fb07 9906 	mla	r9, r7, r6, r9
 8020fc0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020fc4:	fa1f f989 	uxth.w	r9, r9
 8020fc8:	f882 a001 	strb.w	sl, [r2, #1]
 8020fcc:	f109 0601 	add.w	r6, r9, #1
 8020fd0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020fd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020fd8:	f882 9002 	strb.w	r9, [r2, #2]
 8020fdc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020fde:	f10e 0e01 	add.w	lr, lr, #1
 8020fe2:	4414      	add	r4, r2
 8020fe4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020fe6:	4410      	add	r0, r2
 8020fe8:	e766      	b.n	8020eb8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020fea:	4472      	add	r2, lr
 8020fec:	54af      	strb	r7, [r5, r2]
 8020fee:	442a      	add	r2, r5
 8020ff0:	f882 a001 	strb.w	sl, [r2, #1]
 8020ff4:	f882 b002 	strb.w	fp, [r2, #2]
 8020ff8:	e7f0      	b.n	8020fdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020ffa:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020ffe:	f806 9c02 	strb.w	r9, [r6, #-2]
 8021002:	f806 bc01 	strb.w	fp, [r6, #-1]
 8021006:	e74d      	b.n	8020ea4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021008:	b003      	add	sp, #12
 802100a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021010 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021014:	b087      	sub	sp, #28
 8021016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802101a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802101c:	9204      	str	r2, [sp, #16]
 802101e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021022:	6860      	ldr	r0, [r4, #4]
 8021024:	9205      	str	r2, [sp, #20]
 8021026:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 802102a:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 802102e:	9101      	str	r1, [sp, #4]
 8021030:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8021034:	fb00 2505 	mla	r5, r0, r5, r2
 8021038:	6822      	ldr	r2, [r4, #0]
 802103a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802103e:	4415      	add	r5, r2
 8021040:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8021044:	3201      	adds	r2, #1
 8021046:	f022 0201 	bic.w	r2, r2, #1
 802104a:	9202      	str	r2, [sp, #8]
 802104c:	f8dc 2000 	ldr.w	r2, [ip]
 8021050:	9203      	str	r2, [sp, #12]
 8021052:	9a01      	ldr	r2, [sp, #4]
 8021054:	2a00      	cmp	r2, #0
 8021056:	dc03      	bgt.n	8021060 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021058:	9a04      	ldr	r2, [sp, #16]
 802105a:	2a00      	cmp	r2, #0
 802105c:	f340 8135 	ble.w	80212ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021060:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021062:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021066:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802106a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802106c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021070:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021074:	2b00      	cmp	r3, #0
 8021076:	dd0d      	ble.n	8021094 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021078:	1422      	asrs	r2, r4, #16
 802107a:	d405      	bmi.n	8021088 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802107c:	4542      	cmp	r2, r8
 802107e:	da03      	bge.n	8021088 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021080:	1402      	asrs	r2, r0, #16
 8021082:	d401      	bmi.n	8021088 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021084:	42ba      	cmp	r2, r7
 8021086:	db06      	blt.n	8021096 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021088:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802108a:	4474      	add	r4, lr
 802108c:	3b01      	subs	r3, #1
 802108e:	3503      	adds	r5, #3
 8021090:	4410      	add	r0, r2
 8021092:	e7ef      	b.n	8021074 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021094:	d077      	beq.n	8021186 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021096:	1e5a      	subs	r2, r3, #1
 8021098:	fb0e 4602 	mla	r6, lr, r2, r4
 802109c:	1436      	asrs	r6, r6, #16
 802109e:	d469      	bmi.n	8021174 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210a0:	4546      	cmp	r6, r8
 80210a2:	da67      	bge.n	8021174 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210a4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80210a6:	fb06 0202 	mla	r2, r6, r2, r0
 80210aa:	1412      	asrs	r2, r2, #16
 80210ac:	d462      	bmi.n	8021174 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210ae:	42ba      	cmp	r2, r7
 80210b0:	da60      	bge.n	8021174 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210b2:	1cee      	adds	r6, r5, #3
 80210b4:	4699      	mov	r9, r3
 80210b6:	f1b9 0f00 	cmp.w	r9, #0
 80210ba:	dd5f      	ble.n	802117c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80210bc:	1422      	asrs	r2, r4, #16
 80210be:	9902      	ldr	r1, [sp, #8]
 80210c0:	1407      	asrs	r7, r0, #16
 80210c2:	fb01 2707 	mla	r7, r1, r7, r2
 80210c6:	9903      	ldr	r1, [sp, #12]
 80210c8:	087a      	lsrs	r2, r7, #1
 80210ca:	5c8a      	ldrb	r2, [r1, r2]
 80210cc:	07f9      	lsls	r1, r7, #31
 80210ce:	bf54      	ite	pl
 80210d0:	f002 020f 	andpl.w	r2, r2, #15
 80210d4:	1112      	asrmi	r2, r2, #4
 80210d6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80210da:	b2d2      	uxtb	r2, r2
 80210dc:	2a00      	cmp	r2, #0
 80210de:	d042      	beq.n	8021166 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80210e0:	497b      	ldr	r1, [pc, #492]	@ (80212d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80210e2:	680f      	ldr	r7, [r1, #0]
 80210e4:	9905      	ldr	r1, [sp, #20]
 80210e6:	fa5f fb87 	uxtb.w	fp, r7
 80210ea:	434a      	muls	r2, r1
 80210ec:	f102 0801 	add.w	r8, r2, #1
 80210f0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80210f4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80210f8:	1212      	asrs	r2, r2, #8
 80210fa:	fa1f fa82 	uxth.w	sl, r2
 80210fe:	43d2      	mvns	r2, r2
 8021100:	fb1b fb0a 	smulbb	fp, fp, sl
 8021104:	b2d2      	uxtb	r2, r2
 8021106:	fb08 b802 	mla	r8, r8, r2, fp
 802110a:	fa1f f888 	uxth.w	r8, r8
 802110e:	f108 0b01 	add.w	fp, r8, #1
 8021112:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021116:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802111a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802111e:	fb1b fb0a 	smulbb	fp, fp, sl
 8021122:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021126:	fb17 fa0a 	smulbb	sl, r7, sl
 802112a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 802112e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8021132:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8021136:	fb07 aa02 	mla	sl, r7, r2, sl
 802113a:	fb08 b802 	mla	r8, r8, r2, fp
 802113e:	fa1f fa8a 	uxth.w	sl, sl
 8021142:	fa1f f888 	uxth.w	r8, r8
 8021146:	f10a 0701 	add.w	r7, sl, #1
 802114a:	f108 0b01 	add.w	fp, r8, #1
 802114e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021152:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021156:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802115a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802115e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8021162:	f806 8c02 	strb.w	r8, [r6, #-2]
 8021166:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021168:	4474      	add	r4, lr
 802116a:	3603      	adds	r6, #3
 802116c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021170:	4410      	add	r0, r2
 8021172:	e7a0      	b.n	80210b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021174:	2700      	movs	r7, #0
 8021176:	1bda      	subs	r2, r3, r7
 8021178:	2a00      	cmp	r2, #0
 802117a:	dc3e      	bgt.n	80211fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802117c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021184:	441d      	add	r5, r3
 8021186:	9b01      	ldr	r3, [sp, #4]
 8021188:	2b00      	cmp	r3, #0
 802118a:	f340 809e 	ble.w	80212ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802118e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021192:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021194:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021198:	eeb0 6a62 	vmov.f32	s12, s5
 802119c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80211a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80211a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80211a8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80211ac:	eeb0 6a43 	vmov.f32	s12, s6
 80211b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80211b4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80211b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80211c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80211cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211d0:	ee12 2a90 	vmov	r2, s5
 80211d4:	eef0 2a47 	vmov.f32	s5, s14
 80211d8:	fb92 fef3 	sdiv	lr, r2, r3
 80211dc:	ee13 2a10 	vmov	r2, s6
 80211e0:	eeb0 3a67 	vmov.f32	s6, s15
 80211e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80211e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80211ea:	9b01      	ldr	r3, [sp, #4]
 80211ec:	9a04      	ldr	r2, [sp, #16]
 80211ee:	3b01      	subs	r3, #1
 80211f0:	9301      	str	r3, [sp, #4]
 80211f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80211f4:	bf08      	it	eq
 80211f6:	4613      	moveq	r3, r2
 80211f8:	e72b      	b.n	8021052 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80211fa:	1426      	asrs	r6, r4, #16
 80211fc:	d460      	bmi.n	80212c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80211fe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8021202:	42b2      	cmp	r2, r6
 8021204:	dd5c      	ble.n	80212c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021206:	ea5f 4820 	movs.w	r8, r0, asr #16
 802120a:	d459      	bmi.n	80212c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802120c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8021210:	4542      	cmp	r2, r8
 8021212:	dd55      	ble.n	80212c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021214:	9a02      	ldr	r2, [sp, #8]
 8021216:	9903      	ldr	r1, [sp, #12]
 8021218:	fb08 6602 	mla	r6, r8, r2, r6
 802121c:	0872      	lsrs	r2, r6, #1
 802121e:	07f6      	lsls	r6, r6, #31
 8021220:	5c8a      	ldrb	r2, [r1, r2]
 8021222:	bf54      	ite	pl
 8021224:	f002 020f 	andpl.w	r2, r2, #15
 8021228:	1112      	asrmi	r2, r2, #4
 802122a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802122e:	b2d2      	uxtb	r2, r2
 8021230:	2a00      	cmp	r2, #0
 8021232:	d045      	beq.n	80212c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021234:	4926      	ldr	r1, [pc, #152]	@ (80212d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8021236:	f8d1 8000 	ldr.w	r8, [r1]
 802123a:	9905      	ldr	r1, [sp, #20]
 802123c:	fa5f fb88 	uxtb.w	fp, r8
 8021240:	434a      	muls	r2, r1
 8021242:	1c56      	adds	r6, r2, #1
 8021244:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021248:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 802124c:	1212      	asrs	r2, r2, #8
 802124e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8021252:	fa1f fa82 	uxth.w	sl, r2
 8021256:	43d2      	mvns	r2, r2
 8021258:	fb1b fb0a 	smulbb	fp, fp, sl
 802125c:	b2d2      	uxtb	r2, r2
 802125e:	fb09 b902 	mla	r9, r9, r2, fp
 8021262:	fa1f f989 	uxth.w	r9, r9
 8021266:	f109 0b01 	add.w	fp, r9, #1
 802126a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802126e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8021272:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8021276:	fb1b fb0a 	smulbb	fp, fp, sl
 802127a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802127e:	fb18 fa0a 	smulbb	sl, r8, sl
 8021282:	f805 9006 	strb.w	r9, [r5, r6]
 8021286:	442e      	add	r6, r5
 8021288:	f896 8002 	ldrb.w	r8, [r6, #2]
 802128c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021290:	fb08 aa02 	mla	sl, r8, r2, sl
 8021294:	fb09 b902 	mla	r9, r9, r2, fp
 8021298:	fa1f fa8a 	uxth.w	sl, sl
 802129c:	fa1f f989 	uxth.w	r9, r9
 80212a0:	f10a 0801 	add.w	r8, sl, #1
 80212a4:	f109 0b01 	add.w	fp, r9, #1
 80212a8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80212ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80212b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80212b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80212b8:	f886 a002 	strb.w	sl, [r6, #2]
 80212bc:	f886 9001 	strb.w	r9, [r6, #1]
 80212c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80212c2:	4474      	add	r4, lr
 80212c4:	3701      	adds	r7, #1
 80212c6:	4410      	add	r0, r2
 80212c8:	e755      	b.n	8021176 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80212ca:	b007      	add	sp, #28
 80212cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212d0:	24015de4 	.word	0x24015de4

080212d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d8:	b085      	sub	sp, #20
 80212da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80212de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80212e0:	9203      	str	r2, [sp, #12]
 80212e2:	6860      	ldr	r0, [r4, #4]
 80212e4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80212e8:	9100      	str	r1, [sp, #0]
 80212ea:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 80212ee:	fb00 2606 	mla	r6, r0, r6, r2
 80212f2:	6822      	ldr	r2, [r4, #0]
 80212f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80212f8:	4416      	add	r6, r2
 80212fa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80212fe:	3201      	adds	r2, #1
 8021300:	f022 0201 	bic.w	r2, r2, #1
 8021304:	9201      	str	r2, [sp, #4]
 8021306:	f8dc 2000 	ldr.w	r2, [ip]
 802130a:	9202      	str	r2, [sp, #8]
 802130c:	9a00      	ldr	r2, [sp, #0]
 802130e:	2a00      	cmp	r2, #0
 8021310:	dc03      	bgt.n	802131a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8021312:	9a03      	ldr	r2, [sp, #12]
 8021314:	2a00      	cmp	r2, #0
 8021316:	f340 8140 	ble.w	802159a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802131a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802131c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8021320:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8021324:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021326:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802132a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802132e:	2b00      	cmp	r3, #0
 8021330:	dd0e      	ble.n	8021350 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021332:	142a      	asrs	r2, r5, #16
 8021334:	d405      	bmi.n	8021342 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021336:	4572      	cmp	r2, lr
 8021338:	da03      	bge.n	8021342 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802133a:	1422      	asrs	r2, r4, #16
 802133c:	d401      	bmi.n	8021342 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802133e:	42ba      	cmp	r2, r7
 8021340:	db07      	blt.n	8021352 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021342:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021344:	3b01      	subs	r3, #1
 8021346:	3603      	adds	r6, #3
 8021348:	4415      	add	r5, r2
 802134a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802134c:	4414      	add	r4, r2
 802134e:	e7ee      	b.n	802132e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021350:	d072      	beq.n	8021438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021352:	1e5a      	subs	r2, r3, #1
 8021354:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021356:	fb00 5002 	mla	r0, r0, r2, r5
 802135a:	1400      	asrs	r0, r0, #16
 802135c:	d463      	bmi.n	8021426 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802135e:	4570      	cmp	r0, lr
 8021360:	da61      	bge.n	8021426 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021362:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021364:	fb00 4202 	mla	r2, r0, r2, r4
 8021368:	1412      	asrs	r2, r2, #16
 802136a:	d45c      	bmi.n	8021426 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802136c:	42ba      	cmp	r2, r7
 802136e:	da5a      	bge.n	8021426 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021370:	1cf0      	adds	r0, r6, #3
 8021372:	469a      	mov	sl, r3
 8021374:	f1ba 0f00 	cmp.w	sl, #0
 8021378:	dd59      	ble.n	802142e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802137a:	142a      	asrs	r2, r5, #16
 802137c:	9901      	ldr	r1, [sp, #4]
 802137e:	1427      	asrs	r7, r4, #16
 8021380:	fb01 2707 	mla	r7, r1, r7, r2
 8021384:	9902      	ldr	r1, [sp, #8]
 8021386:	087a      	lsrs	r2, r7, #1
 8021388:	5c8a      	ldrb	r2, [r1, r2]
 802138a:	07f9      	lsls	r1, r7, #31
 802138c:	bf54      	ite	pl
 802138e:	f002 020f 	andpl.w	r2, r2, #15
 8021392:	1112      	asrmi	r2, r2, #4
 8021394:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021398:	b2d2      	uxtb	r2, r2
 802139a:	2a00      	cmp	r2, #0
 802139c:	d03b      	beq.n	8021416 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802139e:	4980      	ldr	r1, [pc, #512]	@ (80215a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80213a0:	2aff      	cmp	r2, #255	@ 0xff
 80213a2:	680f      	ldr	r7, [r1, #0]
 80213a4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80213a8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80213ac:	b2ff      	uxtb	r7, r7
 80213ae:	f000 80ed 	beq.w	802158c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80213b2:	fa1f f882 	uxth.w	r8, r2
 80213b6:	43d2      	mvns	r2, r2
 80213b8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80213bc:	fb17 f708 	smulbb	r7, r7, r8
 80213c0:	b2d2      	uxtb	r2, r2
 80213c2:	fb19 f908 	smulbb	r9, r9, r8
 80213c6:	fb0e 7702 	mla	r7, lr, r2, r7
 80213ca:	fb1b f808 	smulbb	r8, fp, r8
 80213ce:	b2bf      	uxth	r7, r7
 80213d0:	f107 0e01 	add.w	lr, r7, #1
 80213d4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80213d8:	123f      	asrs	r7, r7, #8
 80213da:	f800 7c03 	strb.w	r7, [r0, #-3]
 80213de:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80213e2:	fb07 9902 	mla	r9, r7, r2, r9
 80213e6:	fa1f f989 	uxth.w	r9, r9
 80213ea:	f109 0701 	add.w	r7, r9, #1
 80213ee:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80213f2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80213f6:	fb07 8802 	mla	r8, r7, r2, r8
 80213fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213fe:	fa1f f888 	uxth.w	r8, r8
 8021402:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021406:	f108 0201 	add.w	r2, r8, #1
 802140a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802140e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021412:	f800 8c01 	strb.w	r8, [r0, #-1]
 8021416:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021418:	3003      	adds	r0, #3
 802141a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802141e:	4415      	add	r5, r2
 8021420:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021422:	4414      	add	r4, r2
 8021424:	e7a6      	b.n	8021374 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021426:	2700      	movs	r7, #0
 8021428:	1bda      	subs	r2, r3, r7
 802142a:	2a00      	cmp	r2, #0
 802142c:	dc40      	bgt.n	80214b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802142e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021436:	441e      	add	r6, r3
 8021438:	9b00      	ldr	r3, [sp, #0]
 802143a:	2b00      	cmp	r3, #0
 802143c:	f340 80ad 	ble.w	802159a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8021440:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021446:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802144a:	eeb0 6a62 	vmov.f32	s12, s5
 802144e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021452:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021456:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802145a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802145e:	eeb0 6a43 	vmov.f32	s12, s6
 8021462:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021466:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802146a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802146e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021472:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021476:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802147a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802147e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021482:	ee12 2a90 	vmov	r2, s5
 8021486:	eef0 2a47 	vmov.f32	s5, s14
 802148a:	fb92 f3f3 	sdiv	r3, r2, r3
 802148e:	ee13 2a10 	vmov	r2, s6
 8021492:	9311      	str	r3, [sp, #68]	@ 0x44
 8021494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021496:	eeb0 3a67 	vmov.f32	s6, s15
 802149a:	fb92 f3f3 	sdiv	r3, r2, r3
 802149e:	9312      	str	r3, [sp, #72]	@ 0x48
 80214a0:	9b00      	ldr	r3, [sp, #0]
 80214a2:	9a03      	ldr	r2, [sp, #12]
 80214a4:	3b01      	subs	r3, #1
 80214a6:	9300      	str	r3, [sp, #0]
 80214a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214aa:	bf08      	it	eq
 80214ac:	4613      	moveq	r3, r2
 80214ae:	e72d      	b.n	802130c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80214b0:	1428      	asrs	r0, r5, #16
 80214b2:	d45c      	bmi.n	802156e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80214b4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80214b8:	4282      	cmp	r2, r0
 80214ba:	dd58      	ble.n	802156e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80214bc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80214c0:	d455      	bmi.n	802156e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80214c2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80214c6:	4572      	cmp	r2, lr
 80214c8:	dd51      	ble.n	802156e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80214ca:	9a01      	ldr	r2, [sp, #4]
 80214cc:	9902      	ldr	r1, [sp, #8]
 80214ce:	fb0e 0002 	mla	r0, lr, r2, r0
 80214d2:	0842      	lsrs	r2, r0, #1
 80214d4:	07c0      	lsls	r0, r0, #31
 80214d6:	5c8a      	ldrb	r2, [r1, r2]
 80214d8:	bf54      	ite	pl
 80214da:	f002 020f 	andpl.w	r2, r2, #15
 80214de:	1112      	asrmi	r2, r2, #4
 80214e0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80214e4:	b2d2      	uxtb	r2, r2
 80214e6:	2a00      	cmp	r2, #0
 80214e8:	d041      	beq.n	802156e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80214ea:	492d      	ldr	r1, [pc, #180]	@ (80215a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80214ec:	2aff      	cmp	r2, #255	@ 0xff
 80214ee:	6808      	ldr	r0, [r1, #0]
 80214f0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80214f4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80214f8:	fa5f fe80 	uxtb.w	lr, r0
 80214fc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8021500:	d03b      	beq.n	802157a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8021502:	fa1f f982 	uxth.w	r9, r2
 8021506:	4438      	add	r0, r7
 8021508:	43d2      	mvns	r2, r2
 802150a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802150e:	fb1e fe09 	smulbb	lr, lr, r9
 8021512:	fb1a fa09 	smulbb	sl, sl, r9
 8021516:	b2d2      	uxtb	r2, r2
 8021518:	fb1b f909 	smulbb	r9, fp, r9
 802151c:	fb08 ee02 	mla	lr, r8, r2, lr
 8021520:	fa1f fe8e 	uxth.w	lr, lr
 8021524:	f10e 0801 	add.w	r8, lr, #1
 8021528:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 802152c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021530:	f806 e000 	strb.w	lr, [r6, r0]
 8021534:	4430      	add	r0, r6
 8021536:	f890 e001 	ldrb.w	lr, [r0, #1]
 802153a:	fb0e aa02 	mla	sl, lr, r2, sl
 802153e:	fa1f fa8a 	uxth.w	sl, sl
 8021542:	f10a 0e01 	add.w	lr, sl, #1
 8021546:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 802154a:	f890 e002 	ldrb.w	lr, [r0, #2]
 802154e:	fb0e 9902 	mla	r9, lr, r2, r9
 8021552:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021556:	fa1f f989 	uxth.w	r9, r9
 802155a:	f880 a001 	strb.w	sl, [r0, #1]
 802155e:	f109 0201 	add.w	r2, r9, #1
 8021562:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021566:	ea4f 2929 	mov.w	r9, r9, asr #8
 802156a:	f880 9002 	strb.w	r9, [r0, #2]
 802156e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021570:	3701      	adds	r7, #1
 8021572:	4415      	add	r5, r2
 8021574:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021576:	4414      	add	r4, r2
 8021578:	e756      	b.n	8021428 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802157a:	4438      	add	r0, r7
 802157c:	f806 e000 	strb.w	lr, [r6, r0]
 8021580:	4430      	add	r0, r6
 8021582:	f880 a001 	strb.w	sl, [r0, #1]
 8021586:	f880 b002 	strb.w	fp, [r0, #2]
 802158a:	e7f0      	b.n	802156e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802158c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021590:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021594:	f800 bc01 	strb.w	fp, [r0, #-1]
 8021598:	e73d      	b.n	8021416 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802159a:	b005      	add	sp, #20
 802159c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215a0:	24015de4 	.word	0x24015de4

080215a4 <_ZN8touchgfx8LCD24bppD1Ev>:
 80215a4:	4770      	bx	lr

080215a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 80215a6:	4770      	bx	lr

080215a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 80215a8:	4770      	bx	lr

080215aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 80215aa:	4770      	bx	lr

080215ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 80215ac:	4770      	bx	lr

080215ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80215ae:	4770      	bx	lr

080215b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80215b0:	4770      	bx	lr

080215b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80215b2:	4770      	bx	lr

080215b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80215b4:	4770      	bx	lr

080215b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80215b6:	4770      	bx	lr

080215b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80215b8:	4770      	bx	lr

080215ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80215ba:	4770      	bx	lr

080215bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80215bc:	4770      	bx	lr

080215be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80215be:	4770      	bx	lr

080215c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80215c0:	4770      	bx	lr

080215c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80215c2:	4770      	bx	lr

080215c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80215c4:	4770      	bx	lr

080215c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80215c6:	4770      	bx	lr

080215c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80215c8:	4770      	bx	lr

080215ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80215ca:	4770      	bx	lr

080215cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80215cc:	4770      	bx	lr

080215ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80215ce:	4770      	bx	lr

080215d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80215d0:	4770      	bx	lr

080215d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80215d2:	4770      	bx	lr

080215d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80215d4:	4770      	bx	lr
	...

080215d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80215d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215da:	4606      	mov	r6, r0
 80215dc:	b087      	sub	sp, #28
 80215de:	4615      	mov	r5, r2
 80215e0:	461f      	mov	r7, r3
 80215e2:	b353      	cbz	r3, 802163a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80215e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	dd26      	ble.n	802163a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80215ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	dd22      	ble.n	802163a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80215f4:	6808      	ldr	r0, [r1, #0]
 80215f6:	aa04      	add	r2, sp, #16
 80215f8:	6849      	ldr	r1, [r1, #4]
 80215fa:	4c1b      	ldr	r4, [pc, #108]	@ (8021668 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80215fc:	c203      	stmia	r2!, {r0, r1}
 80215fe:	a804      	add	r0, sp, #16
 8021600:	f7fa ff94 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021604:	6820      	ldr	r0, [r4, #0]
 8021606:	6803      	ldr	r3, [r0, #0]
 8021608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802160a:	4798      	blx	r3
 802160c:	2fff      	cmp	r7, #255	@ 0xff
 802160e:	d016      	beq.n	802163e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021610:	f010 0f08 	tst.w	r0, #8
 8021614:	6820      	ldr	r0, [r4, #0]
 8021616:	d015      	beq.n	8021644 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021618:	2400      	movs	r4, #0
 802161a:	6801      	ldr	r1, [r0, #0]
 802161c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021620:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021624:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8021628:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802162c:	9401      	str	r4, [sp, #4]
 802162e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021632:	9400      	str	r4, [sp, #0]
 8021634:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8021636:	4629      	mov	r1, r5
 8021638:	47a0      	blx	r4
 802163a:	b007      	add	sp, #28
 802163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802163e:	f010 0f02 	tst.w	r0, #2
 8021642:	e7e7      	b.n	8021614 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8021644:	6803      	ldr	r3, [r0, #0]
 8021646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021648:	4798      	blx	r3
 802164a:	4b08      	ldr	r3, [pc, #32]	@ (802166c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 802164c:	4601      	mov	r1, r0
 802164e:	4630      	mov	r0, r6
 8021650:	881a      	ldrh	r2, [r3, #0]
 8021652:	6833      	ldr	r3, [r6, #0]
 8021654:	e9cd 5700 	strd	r5, r7, [sp]
 8021658:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 802165a:	ab04      	add	r3, sp, #16
 802165c:	47a8      	blx	r5
 802165e:	6820      	ldr	r0, [r4, #0]
 8021660:	6803      	ldr	r3, [r0, #0]
 8021662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021664:	4798      	blx	r3
 8021666:	e7e8      	b.n	802163a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021668:	24015dd4 	.word	0x24015dd4
 802166c:	24015dce 	.word	0x24015dce

08021670 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021674:	b08b      	sub	sp, #44	@ 0x2c
 8021676:	460d      	mov	r5, r1
 8021678:	4616      	mov	r6, r2
 802167a:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 802167e:	f1b8 0f00 	cmp.w	r8, #0
 8021682:	d047      	beq.n	8021714 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021684:	6810      	ldr	r0, [r2, #0]
 8021686:	ac06      	add	r4, sp, #24
 8021688:	6851      	ldr	r1, [r2, #4]
 802168a:	4f51      	ldr	r7, [pc, #324]	@ (80217d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 802168c:	c403      	stmia	r4!, {r0, r1}
 802168e:	6818      	ldr	r0, [r3, #0]
 8021690:	ac08      	add	r4, sp, #32
 8021692:	6859      	ldr	r1, [r3, #4]
 8021694:	c403      	stmia	r4!, {r0, r1}
 8021696:	a806      	add	r0, sp, #24
 8021698:	f7fa ff48 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802169c:	4631      	mov	r1, r6
 802169e:	a808      	add	r0, sp, #32
 80216a0:	f7fa ff6c 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80216a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80216ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80216b0:	6838      	ldr	r0, [r7, #0]
 80216b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80216b6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80216ba:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 80216be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80216c2:	440d      	add	r5, r1
 80216c4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80216c8:	440a      	add	r2, r1
 80216ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80216ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80216d2:	4413      	add	r3, r2
 80216d4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80216d8:	6803      	ldr	r3, [r0, #0]
 80216da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80216dc:	4798      	blx	r3
 80216de:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80216e2:	d01a      	beq.n	802171a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80216e4:	f010 0f04 	tst.w	r0, #4
 80216e8:	6838      	ldr	r0, [r7, #0]
 80216ea:	d019      	beq.n	8021720 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80216ec:	2100      	movs	r1, #0
 80216ee:	6807      	ldr	r7, [r0, #0]
 80216f0:	b2a4      	uxth	r4, r4
 80216f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80216f6:	b2b6      	uxth	r6, r6
 80216f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80216fc:	9401      	str	r4, [sp, #4]
 80216fe:	9600      	str	r6, [sp, #0]
 8021700:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021704:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8021708:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802170c:	9102      	str	r1, [sp, #8]
 802170e:	4629      	mov	r1, r5
 8021710:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8021712:	47a0      	blx	r4
 8021714:	b00b      	add	sp, #44	@ 0x2c
 8021716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802171a:	f010 0f01 	tst.w	r0, #1
 802171e:	e7e3      	b.n	80216e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8021720:	6803      	ldr	r3, [r0, #0]
 8021722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021724:	4798      	blx	r3
 8021726:	4a2b      	ldr	r2, [pc, #172]	@ (80217d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8021728:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802172c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021730:	8813      	ldrh	r3, [r2, #0]
 8021732:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8021736:	fb03 f404 	mul.w	r4, r3, r4
 802173a:	fb03 c101 	mla	r1, r3, r1, ip
 802173e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021742:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021746:	4408      	add	r0, r1
 8021748:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 802174c:	4404      	add	r4, r0
 802174e:	d02e      	beq.n	80217ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8021750:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021754:	1b9b      	subs	r3, r3, r6
 8021756:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 802175a:	1b96      	subs	r6, r2, r6
 802175c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021760:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021764:	42a0      	cmp	r0, r4
 8021766:	d22d      	bcs.n	80217c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8021768:	eb00 0e01 	add.w	lr, r0, r1
 802176c:	4570      	cmp	r0, lr
 802176e:	d210      	bcs.n	8021792 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8021770:	f890 9000 	ldrb.w	r9, [r0]
 8021774:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021778:	fb19 f90c 	smulbb	r9, r9, ip
 802177c:	fb02 9208 	mla	r2, r2, r8, r9
 8021780:	b292      	uxth	r2, r2
 8021782:	f102 0901 	add.w	r9, r2, #1
 8021786:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802178a:	1212      	asrs	r2, r2, #8
 802178c:	f800 2b01 	strb.w	r2, [r0], #1
 8021790:	e7ec      	b.n	802176c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8021792:	4418      	add	r0, r3
 8021794:	4435      	add	r5, r6
 8021796:	e7e5      	b.n	8021764 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8021798:	8813      	ldrh	r3, [r2, #0]
 802179a:	1b9b      	subs	r3, r3, r6
 802179c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217a0:	4418      	add	r0, r3
 80217a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80217a6:	1b9b      	subs	r3, r3, r6
 80217a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217ac:	441d      	add	r5, r3
 80217ae:	42a0      	cmp	r0, r4
 80217b0:	d208      	bcs.n	80217c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80217b2:	eb00 0c01 	add.w	ip, r0, r1
 80217b6:	4560      	cmp	r0, ip
 80217b8:	d2ee      	bcs.n	8021798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80217ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80217be:	f800 3b01 	strb.w	r3, [r0], #1
 80217c2:	e7f8      	b.n	80217b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80217c4:	6838      	ldr	r0, [r7, #0]
 80217c6:	6803      	ldr	r3, [r0, #0]
 80217c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80217ca:	4798      	blx	r3
 80217cc:	e7a2      	b.n	8021714 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80217ce:	bf00      	nop
 80217d0:	24015dd4 	.word	0x24015dd4
 80217d4:	24015dce 	.word	0x24015dce

080217d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80217d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80217da:	2300      	movs	r3, #0
 80217dc:	b085      	sub	sp, #20
 80217de:	9300      	str	r3, [sp, #0]
 80217e0:	4b41      	ldr	r3, [pc, #260]	@ (80218e8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80217e2:	781b      	ldrb	r3, [r3, #0]
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d136      	bne.n	8021856 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80217e8:	4a40      	ldr	r2, [pc, #256]	@ (80218ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80217ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80217ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d131      	bne.n	802185a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80217f6:	4b3e      	ldr	r3, [pc, #248]	@ (80218f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80217f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80217fc:	ac02      	add	r4, sp, #8
 80217fe:	6808      	ldr	r0, [r1, #0]
 8021800:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021804:	ab02      	add	r3, sp, #8
 8021806:	6849      	ldr	r1, [r1, #4]
 8021808:	4d3a      	ldr	r5, [pc, #232]	@ (80218f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 802180a:	c303      	stmia	r3!, {r0, r1}
 802180c:	4669      	mov	r1, sp
 802180e:	4620      	mov	r0, r4
 8021810:	f7fa feb4 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021814:	4668      	mov	r0, sp
 8021816:	f7fa fe89 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802181a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802181e:	f8bd 2000 	ldrh.w	r2, [sp]
 8021822:	462e      	mov	r6, r5
 8021824:	6828      	ldr	r0, [r5, #0]
 8021826:	4413      	add	r3, r2
 8021828:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802182c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021830:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021834:	4413      	add	r3, r2
 8021836:	f8ad 300a 	strh.w	r3, [sp, #10]
 802183a:	6803      	ldr	r3, [r0, #0]
 802183c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802183e:	4798      	blx	r3
 8021840:	f010 0f01 	tst.w	r0, #1
 8021844:	d00b      	beq.n	802185e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8021846:	6828      	ldr	r0, [r5, #0]
 8021848:	6803      	ldr	r3, [r0, #0]
 802184a:	e894 0006 	ldmia.w	r4, {r1, r2}
 802184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021850:	4798      	blx	r3
 8021852:	b005      	add	sp, #20
 8021854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021856:	4a26      	ldr	r2, [pc, #152]	@ (80218f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8021858:	e7c7      	b.n	80217ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802185a:	4b24      	ldr	r3, [pc, #144]	@ (80218ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802185c:	e7cc      	b.n	80217f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 802185e:	6830      	ldr	r0, [r6, #0]
 8021860:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8021864:	6803      	ldr	r3, [r0, #0]
 8021866:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 802186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802186c:	4798      	blx	r3
 802186e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8021872:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021876:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802187a:	fb14 3402 	smlabb	r4, r4, r2, r3
 802187e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021882:	4404      	add	r4, r0
 8021884:	6830      	ldr	r0, [r6, #0]
 8021886:	6803      	ldr	r3, [r0, #0]
 8021888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802188a:	4798      	blx	r3
 802188c:	4917      	ldr	r1, [pc, #92]	@ (80218ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802188e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021892:	880b      	ldrh	r3, [r1, #0]
 8021894:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8021898:	fb03 c202 	mla	r2, r3, r2, ip
 802189c:	437b      	muls	r3, r7
 802189e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80218a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80218a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218aa:	4410      	add	r0, r2
 80218ac:	18c2      	adds	r2, r0, r3
 80218ae:	4290      	cmp	r0, r2
 80218b0:	d214      	bcs.n	80218dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80218b2:	eb00 0c07 	add.w	ip, r0, r7
 80218b6:	4560      	cmp	r0, ip
 80218b8:	d204      	bcs.n	80218c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80218ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80218be:	f800 3b01 	strb.w	r3, [r0], #1
 80218c2:	e7f8      	b.n	80218b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80218c4:	880b      	ldrh	r3, [r1, #0]
 80218c6:	1b5b      	subs	r3, r3, r5
 80218c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218cc:	4418      	add	r0, r3
 80218ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80218d2:	1b5b      	subs	r3, r3, r5
 80218d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218d8:	441c      	add	r4, r3
 80218da:	e7e8      	b.n	80218ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80218dc:	6830      	ldr	r0, [r6, #0]
 80218de:	6803      	ldr	r3, [r0, #0]
 80218e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218e2:	4798      	blx	r3
 80218e4:	e7b5      	b.n	8021852 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80218e6:	bf00      	nop
 80218e8:	24015dcc 	.word	0x24015dcc
 80218ec:	24015dce 	.word	0x24015dce
 80218f0:	24015dd0 	.word	0x24015dd0
 80218f4:	24015dd4 	.word	0x24015dd4

080218f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80218f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218fc:	b08f      	sub	sp, #60	@ 0x3c
 80218fe:	461c      	mov	r4, r3
 8021900:	9203      	str	r2, [sp, #12]
 8021902:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021906:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021908:	6820      	ldr	r0, [r4, #0]
 802190a:	9100      	str	r1, [sp, #0]
 802190c:	9204      	str	r2, [sp, #16]
 802190e:	aa0a      	add	r2, sp, #40	@ 0x28
 8021910:	6861      	ldr	r1, [r4, #4]
 8021912:	c203      	stmia	r2!, {r0, r1}
 8021914:	6818      	ldr	r0, [r3, #0]
 8021916:	aa0c      	add	r2, sp, #48	@ 0x30
 8021918:	6859      	ldr	r1, [r3, #4]
 802191a:	c203      	stmia	r2!, {r0, r1}
 802191c:	a80a      	add	r0, sp, #40	@ 0x28
 802191e:	f7fa fe05 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021922:	4621      	mov	r1, r4
 8021924:	a80c      	add	r0, sp, #48	@ 0x30
 8021926:	f7fa fe29 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802192a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 802192e:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021932:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021936:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802193a:	bfdb      	ittet	le
 802193c:	b2b3      	uxthle	r3, r6
 802193e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021942:	2301      	movgt	r3, #1
 8021944:	fb92 f3f3 	sdivle	r3, r2, r3
 8021948:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802194c:	441d      	add	r5, r3
 802194e:	fb92 f1f3 	sdiv	r1, r2, r3
 8021952:	fa1f fc81 	uxth.w	ip, r1
 8021956:	3d01      	subs	r5, #1
 8021958:	fb0c 2413 	mls	r4, ip, r3, r2
 802195c:	4661      	mov	r1, ip
 802195e:	fb14 f406 	smulbb	r4, r4, r6
 8021962:	4404      	add	r4, r0
 8021964:	fb95 f5f3 	sdiv	r5, r5, r3
 8021968:	b2a4      	uxth	r4, r4
 802196a:	b131      	cbz	r1, 802197a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 802196c:	9b03      	ldr	r3, [sp, #12]
 802196e:	9900      	ldr	r1, [sp, #0]
 8021970:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021974:	ba1b      	rev	r3, r3
 8021976:	4419      	add	r1, r3
 8021978:	9100      	str	r1, [sp, #0]
 802197a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802197e:	b2ad      	uxth	r5, r5
 8021980:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021984:	4418      	add	r0, r3
 8021986:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802198a:	00ad      	lsls	r5, r5, #2
 802198c:	441a      	add	r2, r3
 802198e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021992:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021996:	9301      	str	r3, [sp, #4]
 8021998:	4b79      	ldr	r3, [pc, #484]	@ (8021b80 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 802199a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802199e:	6818      	ldr	r0, [r3, #0]
 80219a0:	6803      	ldr	r3, [r0, #0]
 80219a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219a4:	4798      	blx	r3
 80219a6:	4a77      	ldr	r2, [pc, #476]	@ (8021b84 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80219a8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80219ac:	2c00      	cmp	r4, #0
 80219ae:	8813      	ldrh	r3, [r2, #0]
 80219b0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80219b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80219b6:	fb03 c101 	mla	r1, r3, r1, ip
 80219ba:	fb06 f303 	mul.w	r3, r6, r3
 80219be:	bf18      	it	ne
 80219c0:	2600      	movne	r6, #0
 80219c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80219c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219ca:	4408      	add	r0, r1
 80219cc:	4403      	add	r3, r0
 80219ce:	9306      	str	r3, [sp, #24]
 80219d0:	f105 0304 	add.w	r3, r5, #4
 80219d4:	9305      	str	r3, [sp, #20]
 80219d6:	9b01      	ldr	r3, [sp, #4]
 80219d8:	bf08      	it	eq
 80219da:	461e      	moveq	r6, r3
 80219dc:	2300      	movs	r3, #0
 80219de:	b2b6      	uxth	r6, r6
 80219e0:	9302      	str	r3, [sp, #8]
 80219e2:	9a06      	ldr	r2, [sp, #24]
 80219e4:	4290      	cmp	r0, r2
 80219e6:	f080 80c2 	bcs.w	8021b6e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 80219ea:	b963      	cbnz	r3, 8021a06 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80219ec:	9b00      	ldr	r3, [sp, #0]
 80219ee:	781a      	ldrb	r2, [r3, #0]
 80219f0:	0993      	lsrs	r3, r2, #6
 80219f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80219f6:	9202      	str	r2, [sp, #8]
 80219f8:	1e5a      	subs	r2, r3, #1
 80219fa:	2a02      	cmp	r2, #2
 80219fc:	d815      	bhi.n	8021a2a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 80219fe:	9a00      	ldr	r2, [sp, #0]
 8021a00:	b29b      	uxth	r3, r3
 8021a02:	3201      	adds	r2, #1
 8021a04:	9200      	str	r2, [sp, #0]
 8021a06:	b1b4      	cbz	r4, 8021a36 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8021a08:	429c      	cmp	r4, r3
 8021a0a:	bf91      	iteee	ls
 8021a0c:	1b1c      	subls	r4, r3, r4
 8021a0e:	1ae4      	subhi	r4, r4, r3
 8021a10:	4635      	movhi	r5, r6
 8021a12:	f04f 0e00 	movhi.w	lr, #0
 8021a16:	bf9b      	ittet	ls
 8021a18:	fa1f fe84 	uxthls.w	lr, r4
 8021a1c:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8021a20:	b2a4      	uxthhi	r4, r4
 8021a22:	2400      	movls	r4, #0
 8021a24:	4673      	mov	r3, lr
 8021a26:	462e      	mov	r6, r5
 8021a28:	e7db      	b.n	80219e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021a2a:	9a00      	ldr	r2, [sp, #0]
 8021a2c:	9b00      	ldr	r3, [sp, #0]
 8021a2e:	3202      	adds	r2, #2
 8021a30:	785b      	ldrb	r3, [r3, #1]
 8021a32:	9200      	str	r2, [sp, #0]
 8021a34:	e7e7      	b.n	8021a06 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8021a36:	2204      	movs	r2, #4
 8021a38:	9905      	ldr	r1, [sp, #20]
 8021a3a:	429e      	cmp	r6, r3
 8021a3c:	4615      	mov	r5, r2
 8021a3e:	9a02      	ldr	r2, [sp, #8]
 8021a40:	bf94      	ite	ls
 8021a42:	eba3 0e06 	subls.w	lr, r3, r6
 8021a46:	46a6      	movhi	lr, r4
 8021a48:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021a4c:	9903      	ldr	r1, [sp, #12]
 8021a4e:	bf8c      	ite	hi
 8021a50:	1af5      	subhi	r5, r6, r3
 8021a52:	fa1f fe8e 	uxthls.w	lr, lr
 8021a56:	f851 c002 	ldr.w	ip, [r1, r2]
 8021a5a:	bf9a      	itte	ls
 8021a5c:	4625      	movls	r5, r4
 8021a5e:	4632      	movls	r2, r6
 8021a60:	b2ad      	uxthhi	r5, r5
 8021a62:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8021a66:	bf88      	it	hi
 8021a68:	461a      	movhi	r2, r3
 8021a6a:	b179      	cbz	r1, 8021a8c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8021a6c:	29ff      	cmp	r1, #255	@ 0xff
 8021a6e:	fa5f f98c 	uxtb.w	r9, ip
 8021a72:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8021a76:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8021a7a:	d126      	bne.n	8021aca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021a7c:	9f04      	ldr	r7, [sp, #16]
 8021a7e:	2fff      	cmp	r7, #255	@ 0xff
 8021a80:	d123      	bne.n	8021aca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021a82:	4682      	mov	sl, r0
 8021a84:	4611      	mov	r1, r2
 8021a86:	f10a 0a03 	add.w	sl, sl, #3
 8021a8a:	b9a9      	cbnz	r1, 8021ab8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8021a8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021a90:	429e      	cmp	r6, r3
 8021a92:	4410      	add	r0, r2
 8021a94:	d8c6      	bhi.n	8021a24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021a96:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8021a9a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8021a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021aa0:	1b64      	subs	r4, r4, r5
 8021aa2:	9a01      	ldr	r2, [sp, #4]
 8021aa4:	881b      	ldrh	r3, [r3, #0]
 8021aa6:	b2a4      	uxth	r4, r4
 8021aa8:	1a9b      	subs	r3, r3, r2
 8021aaa:	2c00      	cmp	r4, #0
 8021aac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ab0:	bf18      	it	ne
 8021ab2:	2500      	movne	r5, #0
 8021ab4:	4418      	add	r0, r3
 8021ab6:	e7b5      	b.n	8021a24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021ab8:	3901      	subs	r1, #1
 8021aba:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8021abe:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8021ac2:	f80a cc01 	strb.w	ip, [sl, #-1]
 8021ac6:	b289      	uxth	r1, r1
 8021ac8:	e7dd      	b.n	8021a86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8021aca:	9f04      	ldr	r7, [sp, #16]
 8021acc:	fb07 fa01 	mul.w	sl, r7, r1
 8021ad0:	f10a 0101 	add.w	r1, sl, #1
 8021ad4:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8021ad8:	1209      	asrs	r1, r1, #8
 8021ada:	ea6f 0a01 	mvn.w	sl, r1
 8021ade:	b289      	uxth	r1, r1
 8021ae0:	fb19 f901 	smulbb	r9, r9, r1
 8021ae4:	fa5f fa8a 	uxtb.w	sl, sl
 8021ae8:	fb18 f801 	smulbb	r8, r8, r1
 8021aec:	fb1c f101 	smulbb	r1, ip, r1
 8021af0:	fa1f f789 	uxth.w	r7, r9
 8021af4:	4684      	mov	ip, r0
 8021af6:	4691      	mov	r9, r2
 8021af8:	9707      	str	r7, [sp, #28]
 8021afa:	b289      	uxth	r1, r1
 8021afc:	fa1f f788 	uxth.w	r7, r8
 8021b00:	9708      	str	r7, [sp, #32]
 8021b02:	f10c 0c03 	add.w	ip, ip, #3
 8021b06:	f1b9 0f00 	cmp.w	r9, #0
 8021b0a:	d0bf      	beq.n	8021a8c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8021b0c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8021b10:	f109 39ff 	add.w	r9, r9, #4294967295
 8021b14:	9f07      	ldr	r7, [sp, #28]
 8021b16:	fa1f f989 	uxth.w	r9, r9
 8021b1a:	fb08 780a 	mla	r8, r8, sl, r7
 8021b1e:	9f08      	ldr	r7, [sp, #32]
 8021b20:	fa1f f888 	uxth.w	r8, r8
 8021b24:	f108 0b01 	add.w	fp, r8, #1
 8021b28:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021b2c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b30:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8021b34:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8021b38:	fb08 780a 	mla	r8, r8, sl, r7
 8021b3c:	fa1f f888 	uxth.w	r8, r8
 8021b40:	f108 0b01 	add.w	fp, r8, #1
 8021b44:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021b48:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b4c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8021b50:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8021b54:	fb08 180a 	mla	r8, r8, sl, r1
 8021b58:	fa1f f888 	uxth.w	r8, r8
 8021b5c:	f108 0b01 	add.w	fp, r8, #1
 8021b60:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021b64:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b68:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8021b6c:	e7c9      	b.n	8021b02 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021b6e:	4b04      	ldr	r3, [pc, #16]	@ (8021b80 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8021b70:	6818      	ldr	r0, [r3, #0]
 8021b72:	6803      	ldr	r3, [r0, #0]
 8021b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b76:	4798      	blx	r3
 8021b78:	b00f      	add	sp, #60	@ 0x3c
 8021b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b7e:	bf00      	nop
 8021b80:	24015dd4 	.word	0x24015dd4
 8021b84:	24015dce 	.word	0x24015dce

08021b88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b8c:	b089      	sub	sp, #36	@ 0x24
 8021b8e:	4607      	mov	r7, r0
 8021b90:	4689      	mov	r9, r1
 8021b92:	4692      	mov	sl, r2
 8021b94:	ac08      	add	r4, sp, #32
 8021b96:	461e      	mov	r6, r3
 8021b98:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8021b9c:	4620      	mov	r0, r4
 8021b9e:	f7fd ff77 	bl	801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021ba2:	683b      	ldr	r3, [r7, #0]
 8021ba4:	4605      	mov	r5, r0
 8021ba6:	4620      	mov	r0, r4
 8021ba8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8021bac:	f7fd feb6 	bl	801f91c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021bb0:	4683      	mov	fp, r0
 8021bb2:	4620      	mov	r0, r4
 8021bb4:	f7fd fee6 	bl	801f984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021bb8:	4653      	mov	r3, sl
 8021bba:	464a      	mov	r2, r9
 8021bbc:	4639      	mov	r1, r7
 8021bbe:	9500      	str	r5, [sp, #0]
 8021bc0:	e9cd b001 	strd	fp, r0, [sp, #4]
 8021bc4:	a806      	add	r0, sp, #24
 8021bc6:	47c0      	blx	r8
 8021bc8:	a906      	add	r1, sp, #24
 8021bca:	4630      	mov	r0, r6
 8021bcc:	f7fd fd8a 	bl	801f6e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8021bd0:	4628      	mov	r0, r5
 8021bd2:	b009      	add	sp, #36	@ 0x24
 8021bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021bd8 <_ZN8touchgfx8LCD24bppD0Ev>:
 8021bd8:	b510      	push	{r4, lr}
 8021bda:	4604      	mov	r4, r0
 8021bdc:	216c      	movs	r1, #108	@ 0x6c
 8021bde:	f008 fc7f 	bl	802a4e0 <_ZdlPvj>
 8021be2:	4620      	mov	r0, r4
 8021be4:	bd10      	pop	{r4, pc}

08021be6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8021be6:	b510      	push	{r4, lr}
 8021be8:	4604      	mov	r4, r0
 8021bea:	2104      	movs	r1, #4
 8021bec:	f008 fc78 	bl	802a4e0 <_ZdlPvj>
 8021bf0:	4620      	mov	r0, r4
 8021bf2:	bd10      	pop	{r4, pc}

08021bf4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8021bf4:	b510      	push	{r4, lr}
 8021bf6:	4604      	mov	r4, r0
 8021bf8:	2104      	movs	r1, #4
 8021bfa:	f008 fc71 	bl	802a4e0 <_ZdlPvj>
 8021bfe:	4620      	mov	r0, r4
 8021c00:	bd10      	pop	{r4, pc}

08021c02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8021c02:	b510      	push	{r4, lr}
 8021c04:	4604      	mov	r4, r0
 8021c06:	f640 0144 	movw	r1, #2116	@ 0x844
 8021c0a:	f008 fc69 	bl	802a4e0 <_ZdlPvj>
 8021c0e:	4620      	mov	r0, r4
 8021c10:	bd10      	pop	{r4, pc}

08021c12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8021c12:	b510      	push	{r4, lr}
 8021c14:	4604      	mov	r4, r0
 8021c16:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8021c1a:	f008 fc61 	bl	802a4e0 <_ZdlPvj>
 8021c1e:	4620      	mov	r0, r4
 8021c20:	bd10      	pop	{r4, pc}

08021c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021c22:	b510      	push	{r4, lr}
 8021c24:	4604      	mov	r4, r0
 8021c26:	2104      	movs	r1, #4
 8021c28:	f008 fc5a 	bl	802a4e0 <_ZdlPvj>
 8021c2c:	4620      	mov	r0, r4
 8021c2e:	bd10      	pop	{r4, pc}

08021c30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021c30:	b510      	push	{r4, lr}
 8021c32:	4604      	mov	r4, r0
 8021c34:	2104      	movs	r1, #4
 8021c36:	f008 fc53 	bl	802a4e0 <_ZdlPvj>
 8021c3a:	4620      	mov	r0, r4
 8021c3c:	bd10      	pop	{r4, pc}

08021c3e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021c3e:	b510      	push	{r4, lr}
 8021c40:	4604      	mov	r4, r0
 8021c42:	2104      	movs	r1, #4
 8021c44:	f008 fc4c 	bl	802a4e0 <_ZdlPvj>
 8021c48:	4620      	mov	r0, r4
 8021c4a:	bd10      	pop	{r4, pc}

08021c4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021c4c:	b510      	push	{r4, lr}
 8021c4e:	4604      	mov	r4, r0
 8021c50:	2104      	movs	r1, #4
 8021c52:	f008 fc45 	bl	802a4e0 <_ZdlPvj>
 8021c56:	4620      	mov	r0, r4
 8021c58:	bd10      	pop	{r4, pc}

08021c5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021c5a:	b510      	push	{r4, lr}
 8021c5c:	4604      	mov	r4, r0
 8021c5e:	2104      	movs	r1, #4
 8021c60:	f008 fc3e 	bl	802a4e0 <_ZdlPvj>
 8021c64:	4620      	mov	r0, r4
 8021c66:	bd10      	pop	{r4, pc}

08021c68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021c68:	b510      	push	{r4, lr}
 8021c6a:	4604      	mov	r4, r0
 8021c6c:	2104      	movs	r1, #4
 8021c6e:	f008 fc37 	bl	802a4e0 <_ZdlPvj>
 8021c72:	4620      	mov	r0, r4
 8021c74:	bd10      	pop	{r4, pc}

08021c76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021c76:	b510      	push	{r4, lr}
 8021c78:	4604      	mov	r4, r0
 8021c7a:	2104      	movs	r1, #4
 8021c7c:	f008 fc30 	bl	802a4e0 <_ZdlPvj>
 8021c80:	4620      	mov	r0, r4
 8021c82:	bd10      	pop	{r4, pc}

08021c84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021c84:	b510      	push	{r4, lr}
 8021c86:	4604      	mov	r4, r0
 8021c88:	2104      	movs	r1, #4
 8021c8a:	f008 fc29 	bl	802a4e0 <_ZdlPvj>
 8021c8e:	4620      	mov	r0, r4
 8021c90:	bd10      	pop	{r4, pc}

08021c92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021c92:	b510      	push	{r4, lr}
 8021c94:	4604      	mov	r4, r0
 8021c96:	2104      	movs	r1, #4
 8021c98:	f008 fc22 	bl	802a4e0 <_ZdlPvj>
 8021c9c:	4620      	mov	r0, r4
 8021c9e:	bd10      	pop	{r4, pc}

08021ca0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021ca0:	b510      	push	{r4, lr}
 8021ca2:	4604      	mov	r4, r0
 8021ca4:	2104      	movs	r1, #4
 8021ca6:	f008 fc1b 	bl	802a4e0 <_ZdlPvj>
 8021caa:	4620      	mov	r0, r4
 8021cac:	bd10      	pop	{r4, pc}

08021cae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021cae:	b510      	push	{r4, lr}
 8021cb0:	4604      	mov	r4, r0
 8021cb2:	2104      	movs	r1, #4
 8021cb4:	f008 fc14 	bl	802a4e0 <_ZdlPvj>
 8021cb8:	4620      	mov	r0, r4
 8021cba:	bd10      	pop	{r4, pc}

08021cbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021cbc:	b510      	push	{r4, lr}
 8021cbe:	4604      	mov	r4, r0
 8021cc0:	2104      	movs	r1, #4
 8021cc2:	f008 fc0d 	bl	802a4e0 <_ZdlPvj>
 8021cc6:	4620      	mov	r0, r4
 8021cc8:	bd10      	pop	{r4, pc}

08021cca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021cca:	b510      	push	{r4, lr}
 8021ccc:	4604      	mov	r4, r0
 8021cce:	2104      	movs	r1, #4
 8021cd0:	f008 fc06 	bl	802a4e0 <_ZdlPvj>
 8021cd4:	4620      	mov	r0, r4
 8021cd6:	bd10      	pop	{r4, pc}

08021cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021cd8:	b510      	push	{r4, lr}
 8021cda:	4604      	mov	r4, r0
 8021cdc:	2104      	movs	r1, #4
 8021cde:	f008 fbff 	bl	802a4e0 <_ZdlPvj>
 8021ce2:	4620      	mov	r0, r4
 8021ce4:	bd10      	pop	{r4, pc}

08021ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021ce6:	b510      	push	{r4, lr}
 8021ce8:	4604      	mov	r4, r0
 8021cea:	2104      	movs	r1, #4
 8021cec:	f008 fbf8 	bl	802a4e0 <_ZdlPvj>
 8021cf0:	4620      	mov	r0, r4
 8021cf2:	bd10      	pop	{r4, pc}

08021cf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021cf4:	b510      	push	{r4, lr}
 8021cf6:	4604      	mov	r4, r0
 8021cf8:	2104      	movs	r1, #4
 8021cfa:	f008 fbf1 	bl	802a4e0 <_ZdlPvj>
 8021cfe:	4620      	mov	r0, r4
 8021d00:	bd10      	pop	{r4, pc}

08021d02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021d02:	b510      	push	{r4, lr}
 8021d04:	4604      	mov	r4, r0
 8021d06:	2104      	movs	r1, #4
 8021d08:	f008 fbea 	bl	802a4e0 <_ZdlPvj>
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	bd10      	pop	{r4, pc}

08021d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021d10:	b510      	push	{r4, lr}
 8021d12:	4604      	mov	r4, r0
 8021d14:	2104      	movs	r1, #4
 8021d16:	f008 fbe3 	bl	802a4e0 <_ZdlPvj>
 8021d1a:	4620      	mov	r0, r4
 8021d1c:	bd10      	pop	{r4, pc}

08021d1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021d1e:	b510      	push	{r4, lr}
 8021d20:	4604      	mov	r4, r0
 8021d22:	2104      	movs	r1, #4
 8021d24:	f008 fbdc 	bl	802a4e0 <_ZdlPvj>
 8021d28:	4620      	mov	r0, r4
 8021d2a:	bd10      	pop	{r4, pc}

08021d2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021d2c:	b510      	push	{r4, lr}
 8021d2e:	4604      	mov	r4, r0
 8021d30:	2104      	movs	r1, #4
 8021d32:	f008 fbd5 	bl	802a4e0 <_ZdlPvj>
 8021d36:	4620      	mov	r0, r4
 8021d38:	bd10      	pop	{r4, pc}
	...

08021d3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d40:	b08f      	sub	sp, #60	@ 0x3c
 8021d42:	461c      	mov	r4, r3
 8021d44:	460e      	mov	r6, r1
 8021d46:	9206      	str	r2, [sp, #24]
 8021d48:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021d4c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021d4e:	9202      	str	r2, [sp, #8]
 8021d50:	2a00      	cmp	r2, #0
 8021d52:	f000 8128 	beq.w	8021fa6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8021d56:	6820      	ldr	r0, [r4, #0]
 8021d58:	aa0a      	add	r2, sp, #40	@ 0x28
 8021d5a:	6861      	ldr	r1, [r4, #4]
 8021d5c:	c203      	stmia	r2!, {r0, r1}
 8021d5e:	6818      	ldr	r0, [r3, #0]
 8021d60:	aa0c      	add	r2, sp, #48	@ 0x30
 8021d62:	6859      	ldr	r1, [r3, #4]
 8021d64:	c203      	stmia	r2!, {r0, r1}
 8021d66:	a80a      	add	r0, sp, #40	@ 0x28
 8021d68:	f7fa fbe0 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d6c:	4621      	mov	r1, r4
 8021d6e:	a80c      	add	r0, sp, #48	@ 0x30
 8021d70:	f7fa fc04 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d74:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8021d78:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021d7c:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8021d80:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8021d84:	bfdb      	ittet	le
 8021d86:	b2bb      	uxthle	r3, r7
 8021d88:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021d8c:	2301      	movgt	r3, #1
 8021d8e:	fb92 f3f3 	sdivle	r3, r2, r3
 8021d92:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021d96:	441d      	add	r5, r3
 8021d98:	fb92 f1f3 	sdiv	r1, r2, r3
 8021d9c:	fa1f fc81 	uxth.w	ip, r1
 8021da0:	3d01      	subs	r5, #1
 8021da2:	fb0c 2413 	mls	r4, ip, r3, r2
 8021da6:	4661      	mov	r1, ip
 8021da8:	fb14 f407 	smulbb	r4, r4, r7
 8021dac:	4404      	add	r4, r0
 8021dae:	fb95 f5f3 	sdiv	r5, r5, r3
 8021db2:	b2a4      	uxth	r4, r4
 8021db4:	b121      	cbz	r1, 8021dc0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8021db6:	9b06      	ldr	r3, [sp, #24]
 8021db8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021dbc:	ba1b      	rev	r3, r3
 8021dbe:	441e      	add	r6, r3
 8021dc0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021dc4:	b2ad      	uxth	r5, r5
 8021dc6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8021dca:	4418      	add	r0, r3
 8021dcc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021dd0:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8021dd4:	00ad      	lsls	r5, r5, #2
 8021dd6:	441a      	add	r2, r3
 8021dd8:	4b74      	ldr	r3, [pc, #464]	@ (8021fac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021dda:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021dde:	6818      	ldr	r0, [r3, #0]
 8021de0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8021de4:	6803      	ldr	r3, [r0, #0]
 8021de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021de8:	4798      	blx	r3
 8021dea:	4a71      	ldr	r2, [pc, #452]	@ (8021fb0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021dec:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021df0:	2c00      	cmp	r4, #0
 8021df2:	8813      	ldrh	r3, [r2, #0]
 8021df4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8021dfa:	fb03 c101 	mla	r1, r3, r1, ip
 8021dfe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8021e02:	fb03 f307 	mul.w	r3, r3, r7
 8021e06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021e0a:	9204      	str	r2, [sp, #16]
 8021e0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e10:	9a02      	ldr	r2, [sp, #8]
 8021e12:	4408      	add	r0, r1
 8021e14:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8021e18:	4403      	add	r3, r0
 8021e1a:	b292      	uxth	r2, r2
 8021e1c:	9307      	str	r3, [sp, #28]
 8021e1e:	f105 0304 	add.w	r3, r5, #4
 8021e22:	bf0c      	ite	eq
 8021e24:	4645      	moveq	r5, r8
 8021e26:	2500      	movne	r5, #0
 8021e28:	9308      	str	r3, [sp, #32]
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	b2ad      	uxth	r5, r5
 8021e2e:	9205      	str	r2, [sp, #20]
 8021e30:	9303      	str	r3, [sp, #12]
 8021e32:	9a07      	ldr	r2, [sp, #28]
 8021e34:	4282      	cmp	r2, r0
 8021e36:	f240 80b1 	bls.w	8021f9c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8021e3a:	b95b      	cbnz	r3, 8021e54 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8021e3c:	7832      	ldrb	r2, [r6, #0]
 8021e3e:	0993      	lsrs	r3, r2, #6
 8021e40:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021e44:	9203      	str	r2, [sp, #12]
 8021e46:	1e5a      	subs	r2, r3, #1
 8021e48:	2a02      	cmp	r2, #2
 8021e4a:	bf8d      	iteet	hi
 8021e4c:	7873      	ldrbhi	r3, [r6, #1]
 8021e4e:	3601      	addls	r6, #1
 8021e50:	b29b      	uxthls	r3, r3
 8021e52:	3602      	addhi	r6, #2
 8021e54:	b184      	cbz	r4, 8021e78 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8021e56:	429c      	cmp	r4, r3
 8021e58:	bf91      	iteee	ls
 8021e5a:	1b1c      	subls	r4, r3, r4
 8021e5c:	1ae4      	subhi	r4, r4, r3
 8021e5e:	4629      	movhi	r1, r5
 8021e60:	f04f 0e00 	movhi.w	lr, #0
 8021e64:	bf9b      	ittet	ls
 8021e66:	fa1f fe84 	uxthls.w	lr, r4
 8021e6a:	2400      	movls	r4, #0
 8021e6c:	b2a4      	uxthhi	r4, r4
 8021e6e:	fa1f f188 	uxthls.w	r1, r8
 8021e72:	4673      	mov	r3, lr
 8021e74:	460d      	mov	r5, r1
 8021e76:	e7dc      	b.n	8021e32 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8021e78:	2203      	movs	r2, #3
 8021e7a:	9908      	ldr	r1, [sp, #32]
 8021e7c:	42ab      	cmp	r3, r5
 8021e7e:	4617      	mov	r7, r2
 8021e80:	9a03      	ldr	r2, [sp, #12]
 8021e82:	bf24      	itt	cs
 8021e84:	eba3 0e05 	subcs.w	lr, r3, r5
 8021e88:	9501      	strcs	r5, [sp, #4]
 8021e8a:	fb17 1702 	smlabb	r7, r7, r2, r1
 8021e8e:	9a06      	ldr	r2, [sp, #24]
 8021e90:	bf34      	ite	cc
 8021e92:	1ae9      	subcc	r1, r5, r3
 8021e94:	fa1f fe8e 	uxthcs.w	lr, lr
 8021e98:	4417      	add	r7, r2
 8021e9a:	9a02      	ldr	r2, [sp, #8]
 8021e9c:	bf2f      	iteee	cs
 8021e9e:	4621      	movcs	r1, r4
 8021ea0:	b289      	uxthcc	r1, r1
 8021ea2:	9301      	strcc	r3, [sp, #4]
 8021ea4:	46a6      	movcc	lr, r4
 8021ea6:	2aff      	cmp	r2, #255	@ 0xff
 8021ea8:	d11e      	bne.n	8021ee8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8021eaa:	4681      	mov	r9, r0
 8021eac:	f8dd c004 	ldr.w	ip, [sp, #4]
 8021eb0:	f109 0903 	add.w	r9, r9, #3
 8021eb4:	f1bc 0f00 	cmp.w	ip, #0
 8021eb8:	d15f      	bne.n	8021f7a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8021eba:	9a01      	ldr	r2, [sp, #4]
 8021ebc:	42ab      	cmp	r3, r5
 8021ebe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ec2:	4410      	add	r0, r2
 8021ec4:	d3d5      	bcc.n	8021e72 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8021ec6:	fa1f f188 	uxth.w	r1, r8
 8021eca:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8021ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ed0:	1a64      	subs	r4, r4, r1
 8021ed2:	881b      	ldrh	r3, [r3, #0]
 8021ed4:	b2a4      	uxth	r4, r4
 8021ed6:	eba3 0308 	sub.w	r3, r3, r8
 8021eda:	2c00      	cmp	r4, #0
 8021edc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ee0:	bf18      	it	ne
 8021ee2:	2100      	movne	r1, #0
 8021ee4:	4418      	add	r0, r3
 8021ee6:	e7c4      	b.n	8021e72 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8021ee8:	4684      	mov	ip, r0
 8021eea:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021eee:	f10c 0c03 	add.w	ip, ip, #3
 8021ef2:	f1ba 0f00 	cmp.w	sl, #0
 8021ef6:	d0e0      	beq.n	8021eba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8021ef8:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8021efc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f00:	9a05      	ldr	r2, [sp, #20]
 8021f02:	f897 9000 	ldrb.w	r9, [r7]
 8021f06:	fa1f fa8a 	uxth.w	sl, sl
 8021f0a:	fb1b fb02 	smulbb	fp, fp, r2
 8021f0e:	9a04      	ldr	r2, [sp, #16]
 8021f10:	fb09 b902 	mla	r9, r9, r2, fp
 8021f14:	9a05      	ldr	r2, [sp, #20]
 8021f16:	fa1f f989 	uxth.w	r9, r9
 8021f1a:	f109 0b01 	add.w	fp, r9, #1
 8021f1e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021f22:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8021f26:	fb1b fb02 	smulbb	fp, fp, r2
 8021f2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f2e:	9a04      	ldr	r2, [sp, #16]
 8021f30:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8021f34:	f897 9001 	ldrb.w	r9, [r7, #1]
 8021f38:	fb09 b902 	mla	r9, r9, r2, fp
 8021f3c:	9a05      	ldr	r2, [sp, #20]
 8021f3e:	fa1f f989 	uxth.w	r9, r9
 8021f42:	f109 0b01 	add.w	fp, r9, #1
 8021f46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021f4a:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8021f4e:	fb1b fb02 	smulbb	fp, fp, r2
 8021f52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f56:	9a04      	ldr	r2, [sp, #16]
 8021f58:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8021f5c:	f897 9002 	ldrb.w	r9, [r7, #2]
 8021f60:	fb09 b902 	mla	r9, r9, r2, fp
 8021f64:	fa1f f989 	uxth.w	r9, r9
 8021f68:	f109 0b01 	add.w	fp, r9, #1
 8021f6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021f70:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f74:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8021f78:	e7b9      	b.n	8021eee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8021f7a:	f897 a000 	ldrb.w	sl, [r7]
 8021f7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021f82:	f809 ac03 	strb.w	sl, [r9, #-3]
 8021f86:	fa1f fc8c 	uxth.w	ip, ip
 8021f8a:	f897 a001 	ldrb.w	sl, [r7, #1]
 8021f8e:	f809 ac02 	strb.w	sl, [r9, #-2]
 8021f92:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021f96:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021f9a:	e789      	b.n	8021eb0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8021f9c:	4b03      	ldr	r3, [pc, #12]	@ (8021fac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021f9e:	6818      	ldr	r0, [r3, #0]
 8021fa0:	6803      	ldr	r3, [r0, #0]
 8021fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021fa4:	4798      	blx	r3
 8021fa6:	b00f      	add	sp, #60	@ 0x3c
 8021fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fac:	24015dd4 	.word	0x24015dd4
 8021fb0:	24015dce 	.word	0x24015dce

08021fb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb8:	b09b      	sub	sp, #108	@ 0x6c
 8021fba:	461d      	mov	r5, r3
 8021fbc:	4604      	mov	r4, r0
 8021fbe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021fc0:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8021fc4:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8021fc8:	9208      	str	r2, [sp, #32]
 8021fca:	2a00      	cmp	r2, #0
 8021fcc:	f000 81f3 	beq.w	80223b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8021fd0:	6828      	ldr	r0, [r5, #0]
 8021fd2:	aa16      	add	r2, sp, #88	@ 0x58
 8021fd4:	6869      	ldr	r1, [r5, #4]
 8021fd6:	c203      	stmia	r2!, {r0, r1}
 8021fd8:	6818      	ldr	r0, [r3, #0]
 8021fda:	aa18      	add	r2, sp, #96	@ 0x60
 8021fdc:	6859      	ldr	r1, [r3, #4]
 8021fde:	c203      	stmia	r2!, {r0, r1}
 8021fe0:	a816      	add	r0, sp, #88	@ 0x58
 8021fe2:	f7fa faa3 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fe6:	4629      	mov	r1, r5
 8021fe8:	a818      	add	r0, sp, #96	@ 0x60
 8021fea:	f7fa fac7 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fee:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8021ff2:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8021ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021ffa:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8021ffe:	bfdb      	ittet	le
 8022000:	b29a      	uxthle	r2, r3
 8022002:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022006:	f04f 0a01 	movgt.w	sl, #1
 802200a:	fb91 faf2 	sdivle	sl, r1, r2
 802200e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8022012:	4456      	add	r6, sl
 8022014:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8022018:	3e01      	subs	r6, #1
 802201a:	fb92 f0fa 	sdiv	r0, r2, sl
 802201e:	b280      	uxth	r0, r0
 8022020:	fb00 281a 	mls	r8, r0, sl, r2
 8022024:	900e      	str	r0, [sp, #56]	@ 0x38
 8022026:	fb18 f803 	smulbb	r8, r8, r3
 802202a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 802202e:	4488      	add	r8, r1
 8022030:	4419      	add	r1, r3
 8022032:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8022036:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 802203a:	fa1f f888 	uxth.w	r8, r8
 802203e:	441a      	add	r2, r3
 8022040:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8022044:	9303      	str	r3, [sp, #12]
 8022046:	4b9c      	ldr	r3, [pc, #624]	@ (80222b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8022048:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 802204c:	6818      	ldr	r0, [r3, #0]
 802204e:	6803      	ldr	r3, [r0, #0]
 8022050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022052:	4798      	blx	r3
 8022054:	4b99      	ldr	r3, [pc, #612]	@ (80222bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8022056:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 802205a:	f1b8 0f00 	cmp.w	r8, #0
 802205e:	881a      	ldrh	r2, [r3, #0]
 8022060:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8022064:	fb02 f505 	mul.w	r5, r2, r5
 8022068:	fb02 7101 	mla	r1, r2, r1, r7
 802206c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022070:	9314      	str	r3, [sp, #80]	@ 0x50
 8022072:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022076:	9b08      	ldr	r3, [sp, #32]
 8022078:	fb96 f6fa 	sdiv	r6, r6, sl
 802207c:	4408      	add	r0, r1
 802207e:	f106 0601 	add.w	r6, r6, #1
 8022082:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8022086:	f04f 0100 	mov.w	r1, #0
 802208a:	eb00 0205 	add.w	r2, r0, r5
 802208e:	b2b6      	uxth	r6, r6
 8022090:	b29b      	uxth	r3, r3
 8022092:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022094:	9209      	str	r2, [sp, #36]	@ 0x24
 8022096:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022098:	930d      	str	r3, [sp, #52]	@ 0x34
 802209a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802209e:	4b88      	ldr	r3, [pc, #544]	@ (80222c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 80220a0:	f106 0204 	add.w	r2, r6, #4
 80220a4:	eba3 0304 	sub.w	r3, r3, r4
 80220a8:	9205      	str	r2, [sp, #20]
 80220aa:	9a03      	ldr	r2, [sp, #12]
 80220ac:	bf18      	it	ne
 80220ae:	2200      	movne	r2, #0
 80220b0:	9315      	str	r3, [sp, #84]	@ 0x54
 80220b2:	b292      	uxth	r2, r2
 80220b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80220b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80220b8:	fa11 f383 	uxtah	r3, r1, r3
 80220bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80220be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80220c2:	3304      	adds	r3, #4
 80220c4:	9306      	str	r3, [sp, #24]
 80220c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80220c8:	4283      	cmp	r3, r0
 80220ca:	f240 816f 	bls.w	80223ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 80220ce:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 80220d2:	f04f 0900 	mov.w	r9, #0
 80220d6:	9d06      	ldr	r5, [sp, #24]
 80220d8:	fbb8 f3f3 	udiv	r3, r8, r3
 80220dc:	ebaa 0303 	sub.w	r3, sl, r3
 80220e0:	782d      	ldrb	r5, [r5, #0]
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	950f      	str	r5, [sp, #60]	@ 0x3c
 80220e6:	3501      	adds	r5, #1
 80220e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80220ea:	9b06      	ldr	r3, [sp, #24]
 80220ec:	9504      	str	r5, [sp, #16]
 80220ee:	7859      	ldrb	r1, [r3, #1]
 80220f0:	789b      	ldrb	r3, [r3, #2]
 80220f2:	021b      	lsls	r3, r3, #8
 80220f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80220f8:	9906      	ldr	r1, [sp, #24]
 80220fa:	78c9      	ldrb	r1, [r1, #3]
 80220fc:	430b      	orrs	r3, r1
 80220fe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022100:	4419      	add	r1, r3
 8022102:	1c4d      	adds	r5, r1, #1
 8022104:	7849      	ldrb	r1, [r1, #1]
 8022106:	9502      	str	r5, [sp, #8]
 8022108:	0209      	lsls	r1, r1, #8
 802210a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802210c:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8022110:	5ceb      	ldrb	r3, [r5, r3]
 8022112:	4319      	orrs	r1, r3
 8022114:	b28b      	uxth	r3, r1
 8022116:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 802211a:	930a      	str	r3, [sp, #40]	@ 0x28
 802211c:	2300      	movs	r3, #0
 802211e:	9307      	str	r3, [sp, #28]
 8022120:	2301      	movs	r3, #1
 8022122:	e9cd 3300 	strd	r3, r3, [sp]
 8022126:	469c      	mov	ip, r3
 8022128:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802212c:	930c      	str	r3, [sp, #48]	@ 0x30
 802212e:	f1b8 0f00 	cmp.w	r8, #0
 8022132:	f000 8082 	beq.w	802223a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8022136:	45c4      	cmp	ip, r8
 8022138:	d270      	bcs.n	802221c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 802213a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802213c:	eba8 080c 	sub.w	r8, r8, ip
 8022140:	4611      	mov	r1, r2
 8022142:	4283      	cmp	r3, r0
 8022144:	fa1f f888 	uxth.w	r8, r8
 8022148:	d802      	bhi.n	8022150 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 802214a:	e074      	b.n	8022236 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 802214c:	2b00      	cmp	r3, #0
 802214e:	d15f      	bne.n	8022210 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8022150:	9b02      	ldr	r3, [sp, #8]
 8022152:	9a01      	ldr	r2, [sp, #4]
 8022154:	785b      	ldrb	r3, [r3, #1]
 8022156:	f1c2 0207 	rsb	r2, r2, #7
 802215a:	9d01      	ldr	r5, [sp, #4]
 802215c:	4093      	lsls	r3, r2
 802215e:	005b      	lsls	r3, r3, #1
 8022160:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022164:	9b02      	ldr	r3, [sp, #8]
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	412b      	asrs	r3, r5
 802216a:	b2db      	uxtb	r3, r3
 802216c:	4313      	orrs	r3, r2
 802216e:	462a      	mov	r2, r5
 8022170:	3201      	adds	r2, #1
 8022172:	b29e      	uxth	r6, r3
 8022174:	b2d2      	uxtb	r2, r2
 8022176:	2a08      	cmp	r2, #8
 8022178:	9201      	str	r2, [sp, #4]
 802217a:	9a02      	ldr	r2, [sp, #8]
 802217c:	bf09      	itett	eq
 802217e:	3202      	addeq	r2, #2
 8022180:	3201      	addne	r2, #1
 8022182:	9202      	streq	r2, [sp, #8]
 8022184:	2200      	moveq	r2, #0
 8022186:	bf14      	ite	ne
 8022188:	9202      	strne	r2, [sp, #8]
 802218a:	9201      	streq	r2, [sp, #4]
 802218c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802218e:	42b2      	cmp	r2, r6
 8022190:	d309      	bcc.n	80221a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8022192:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8022196:	2301      	movs	r3, #1
 8022198:	9a04      	ldr	r2, [sp, #16]
 802219a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 802219e:	d30e      	bcc.n	80221be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 80221a0:	9300      	str	r3, [sp, #0]
 80221a2:	2500      	movs	r5, #0
 80221a4:	e035      	b.n	8022212 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 80221a6:	9b04      	ldr	r3, [sp, #16]
 80221a8:	429e      	cmp	r6, r3
 80221aa:	d318      	bcc.n	80221de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 80221ac:	9b00      	ldr	r3, [sp, #0]
 80221ae:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 80221b2:	18e3      	adds	r3, r4, r3
 80221b4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80221b8:	9b00      	ldr	r3, [sp, #0]
 80221ba:	3301      	adds	r3, #1
 80221bc:	b29b      	uxth	r3, r3
 80221be:	9a04      	ldr	r2, [sp, #16]
 80221c0:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 80221c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80221c8:	9f00      	ldr	r7, [sp, #0]
 80221ca:	7115      	strb	r5, [r2, #4]
 80221cc:	3701      	adds	r7, #1
 80221ce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80221d0:	7157      	strb	r7, [r2, #5]
 80221d2:	80d5      	strh	r5, [r2, #6]
 80221d4:	9a04      	ldr	r2, [sp, #16]
 80221d6:	3201      	adds	r2, #1
 80221d8:	b292      	uxth	r2, r2
 80221da:	9204      	str	r2, [sp, #16]
 80221dc:	e7e0      	b.n	80221a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 80221de:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80221e2:	4632      	mov	r2, r6
 80221e4:	795b      	ldrb	r3, [r3, #5]
 80221e6:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 80221ea:	4425      	add	r5, r4
 80221ec:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80221ee:	eb07 0c05 	add.w	ip, r7, r5
 80221f2:	f1bc 0f00 	cmp.w	ip, #0
 80221f6:	dd07      	ble.n	8022208 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 80221f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80221fc:	f892 c004 	ldrb.w	ip, [r2, #4]
 8022200:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8022204:	88d2      	ldrh	r2, [r2, #6]
 8022206:	e7f1      	b.n	80221ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8022208:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 802220c:	b29b      	uxth	r3, r3
 802220e:	e7c3      	b.n	8022198 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8022210:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022212:	460a      	mov	r2, r1
 8022214:	960a      	str	r6, [sp, #40]	@ 0x28
 8022216:	46a9      	mov	r9, r5
 8022218:	469c      	mov	ip, r3
 802221a:	e788      	b.n	802212e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 802221c:	ebac 0308 	sub.w	r3, ip, r8
 8022220:	eb09 0508 	add.w	r5, r9, r8
 8022224:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022228:	b29b      	uxth	r3, r3
 802222a:	b2ad      	uxth	r5, r5
 802222c:	f04f 0800 	mov.w	r8, #0
 8022230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022232:	4282      	cmp	r2, r0
 8022234:	d88a      	bhi.n	802214c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8022236:	460a      	mov	r2, r1
 8022238:	e745      	b.n	80220c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 802223a:	4594      	cmp	ip, r2
 802223c:	9d08      	ldr	r5, [sp, #32]
 802223e:	4686      	mov	lr, r0
 8022240:	bf27      	ittee	cs
 8022242:	ebac 0302 	subcs.w	r3, ip, r2
 8022246:	4616      	movcs	r6, r2
 8022248:	eba2 010c 	subcc.w	r1, r2, ip
 802224c:	4666      	movcc	r6, ip
 802224e:	bf27      	ittee	cs
 8022250:	b29b      	uxthcs	r3, r3
 8022252:	4641      	movcs	r1, r8
 8022254:	b289      	uxthcc	r1, r1
 8022256:	4643      	movcc	r3, r8
 8022258:	2dff      	cmp	r5, #255	@ 0xff
 802225a:	eb09 0506 	add.w	r5, r9, r6
 802225e:	b2ad      	uxth	r5, r5
 8022260:	d130      	bne.n	80222c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8022262:	45a9      	cmp	r9, r5
 8022264:	f10e 0e03 	add.w	lr, lr, #3
 8022268:	d17a      	bne.n	8022360 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 802226a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802226e:	4594      	cmp	ip, r2
 8022270:	4430      	add	r0, r6
 8022272:	d3db      	bcc.n	802222c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8022274:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022276:	9903      	ldr	r1, [sp, #12]
 8022278:	8812      	ldrh	r2, [r2, #0]
 802227a:	1a52      	subs	r2, r2, r1
 802227c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802227e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022282:	4410      	add	r0, r2
 8022284:	9a07      	ldr	r2, [sp, #28]
 8022286:	3201      	adds	r2, #1
 8022288:	428a      	cmp	r2, r1
 802228a:	9207      	str	r2, [sp, #28]
 802228c:	f040 8081 	bne.w	8022392 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8022290:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8022294:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8022298:	9b03      	ldr	r3, [sp, #12]
 802229a:	eba8 080c 	sub.w	r8, r8, ip
 802229e:	fa1f f888 	uxth.w	r8, r8
 80222a2:	f1b8 0f00 	cmp.w	r8, #0
 80222a6:	bf08      	it	eq
 80222a8:	461a      	moveq	r2, r3
 80222aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80222ac:	bf18      	it	ne
 80222ae:	2200      	movne	r2, #0
 80222b0:	3301      	adds	r3, #1
 80222b2:	b292      	uxth	r2, r2
 80222b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80222b6:	e6fd      	b.n	80220b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 80222b8:	24015dd4 	.word	0x24015dd4
 80222bc:	24015dce 	.word	0x24015dce
 80222c0:	fffff7fb 	.word	0xfffff7fb
 80222c4:	45a9      	cmp	r9, r5
 80222c6:	f10e 0e03 	add.w	lr, lr, #3
 80222ca:	d0ce      	beq.n	802226a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 80222cc:	f109 0701 	add.w	r7, r9, #1
 80222d0:	44a1      	add	r9, r4
 80222d2:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 80222d6:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 80222da:	9713      	str	r7, [sp, #76]	@ 0x4c
 80222dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80222e0:	9f05      	ldr	r7, [sp, #20]
 80222e2:	eb07 0908 	add.w	r9, r7, r8
 80222e6:	f817 8008 	ldrb.w	r8, [r7, r8]
 80222ea:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80222ec:	fb1b fb07 	smulbb	fp, fp, r7
 80222f0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80222f2:	fb08 b807 	mla	r8, r8, r7, fp
 80222f6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80222f8:	fa1f f888 	uxth.w	r8, r8
 80222fc:	f108 0b01 	add.w	fp, r8, #1
 8022300:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022304:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8022308:	fb1b fb07 	smulbb	fp, fp, r7
 802230c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022310:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022312:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8022316:	f899 8001 	ldrb.w	r8, [r9, #1]
 802231a:	fb08 b807 	mla	r8, r8, r7, fp
 802231e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8022320:	fa1f f888 	uxth.w	r8, r8
 8022324:	f108 0b01 	add.w	fp, r8, #1
 8022328:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802232c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022330:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8022334:	f899 8002 	ldrb.w	r8, [r9, #2]
 8022338:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 802233c:	fb19 f907 	smulbb	r9, r9, r7
 8022340:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022342:	fb08 9807 	mla	r8, r8, r7, r9
 8022346:	fa1f f888 	uxth.w	r8, r8
 802234a:	f108 0901 	add.w	r9, r8, #1
 802234e:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8022352:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8022356:	ea4f 2828 	mov.w	r8, r8, asr #8
 802235a:	f80e 8c01 	strb.w	r8, [lr, #-1]
 802235e:	e7b1      	b.n	80222c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8022360:	f109 0b01 	add.w	fp, r9, #1
 8022364:	44a1      	add	r9, r4
 8022366:	9f05      	ldr	r7, [sp, #20]
 8022368:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 802236c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022370:	eb07 0908 	add.w	r9, r7, r8
 8022374:	f817 8008 	ldrb.w	r8, [r7, r8]
 8022378:	f80e 8c03 	strb.w	r8, [lr, #-3]
 802237c:	f899 8001 	ldrb.w	r8, [r9, #1]
 8022380:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8022384:	f899 8002 	ldrb.w	r8, [r9, #2]
 8022388:	fa1f f98b 	uxth.w	r9, fp
 802238c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8022390:	e767      	b.n	8022262 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8022392:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022396:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 802239a:	eba8 0801 	sub.w	r8, r8, r1
 802239e:	fa1f f888 	uxth.w	r8, r8
 80223a2:	f1b8 0f00 	cmp.w	r8, #0
 80223a6:	bf18      	it	ne
 80223a8:	2100      	movne	r1, #0
 80223aa:	e741      	b.n	8022230 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 80223ac:	4b03      	ldr	r3, [pc, #12]	@ (80223bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 80223ae:	6818      	ldr	r0, [r3, #0]
 80223b0:	6803      	ldr	r3, [r0, #0]
 80223b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223b4:	4798      	blx	r3
 80223b6:	b01b      	add	sp, #108	@ 0x6c
 80223b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223bc:	24015dd4 	.word	0x24015dd4

080223c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80223c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223c4:	b09d      	sub	sp, #116	@ 0x74
 80223c6:	461d      	mov	r5, r3
 80223c8:	4604      	mov	r4, r0
 80223ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80223cc:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 80223d0:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80223d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80223d6:	2a00      	cmp	r2, #0
 80223d8:	f000 81de 	beq.w	8022798 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 80223dc:	6828      	ldr	r0, [r5, #0]
 80223de:	aa18      	add	r2, sp, #96	@ 0x60
 80223e0:	6869      	ldr	r1, [r5, #4]
 80223e2:	c203      	stmia	r2!, {r0, r1}
 80223e4:	6818      	ldr	r0, [r3, #0]
 80223e6:	aa1a      	add	r2, sp, #104	@ 0x68
 80223e8:	6859      	ldr	r1, [r3, #4]
 80223ea:	c203      	stmia	r2!, {r0, r1}
 80223ec:	a818      	add	r0, sp, #96	@ 0x60
 80223ee:	f7fa f89d 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223f2:	4629      	mov	r1, r5
 80223f4:	a81a      	add	r0, sp, #104	@ 0x68
 80223f6:	f7fa f8c1 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223fa:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80223fe:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8022402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022406:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 802240a:	bfdb      	ittet	le
 802240c:	b29a      	uxthle	r2, r3
 802240e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022412:	2201      	movgt	r2, #1
 8022414:	fb91 f2f2 	sdivle	r2, r1, r2
 8022418:	9201      	str	r2, [sp, #4]
 802241a:	9801      	ldr	r0, [sp, #4]
 802241c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8022420:	9901      	ldr	r1, [sp, #4]
 8022422:	fb92 f0f0 	sdiv	r0, r2, r0
 8022426:	b280      	uxth	r0, r0
 8022428:	440f      	add	r7, r1
 802242a:	900d      	str	r0, [sp, #52]	@ 0x34
 802242c:	3f01      	subs	r7, #1
 802242e:	9801      	ldr	r0, [sp, #4]
 8022430:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022432:	fb05 2510 	mls	r5, r5, r0, r2
 8022436:	fb97 f7f1 	sdiv	r7, r7, r1
 802243a:	fb15 f503 	smulbb	r5, r5, r3
 802243e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8022442:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8022446:	3701      	adds	r7, #1
 8022448:	440d      	add	r5, r1
 802244a:	4419      	add	r1, r3
 802244c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8022450:	b2bf      	uxth	r7, r7
 8022452:	441a      	add	r2, r3
 8022454:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8022458:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 802245c:	00bf      	lsls	r7, r7, #2
 802245e:	9304      	str	r3, [sp, #16]
 8022460:	b2ad      	uxth	r5, r5
 8022462:	4bb0      	ldr	r3, [pc, #704]	@ (8022724 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8022464:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8022468:	6818      	ldr	r0, [r3, #0]
 802246a:	6803      	ldr	r3, [r0, #0]
 802246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802246e:	4798      	blx	r3
 8022470:	4bad      	ldr	r3, [pc, #692]	@ (8022728 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8022472:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8022476:	2d00      	cmp	r5, #0
 8022478:	881a      	ldrh	r2, [r3, #0]
 802247a:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 802247e:	fb02 f606 	mul.w	r6, r2, r6
 8022482:	fb02 c101 	mla	r1, r2, r1, ip
 8022486:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802248a:	9316      	str	r3, [sp, #88]	@ 0x58
 802248c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022490:	4ba6      	ldr	r3, [pc, #664]	@ (802272c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8022492:	eb00 0801 	add.w	r8, r0, r1
 8022496:	bf18      	it	ne
 8022498:	2100      	movne	r1, #0
 802249a:	eba3 0304 	sub.w	r3, r3, r4
 802249e:	eb08 0206 	add.w	r2, r8, r6
 80224a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80224a4:	9208      	str	r2, [sp, #32]
 80224a6:	f107 0204 	add.w	r2, r7, #4
 80224aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80224ac:	9a04      	ldr	r2, [sp, #16]
 80224ae:	bf08      	it	eq
 80224b0:	4611      	moveq	r1, r2
 80224b2:	2200      	movs	r2, #0
 80224b4:	b289      	uxth	r1, r1
 80224b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80224b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80224ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80224bc:	fa12 f383 	uxtah	r3, r2, r3
 80224c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80224c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80224c6:	3304      	adds	r3, #4
 80224c8:	9306      	str	r3, [sp, #24]
 80224ca:	9b08      	ldr	r3, [sp, #32]
 80224cc:	4543      	cmp	r3, r8
 80224ce:	f240 815e 	bls.w	802278e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 80224d2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80224d6:	f04f 0b01 	mov.w	fp, #1
 80224da:	9a01      	ldr	r2, [sp, #4]
 80224dc:	9806      	ldr	r0, [sp, #24]
 80224de:	465e      	mov	r6, fp
 80224e0:	f8cd b008 	str.w	fp, [sp, #8]
 80224e4:	7800      	ldrb	r0, [r0, #0]
 80224e6:	fbb5 f3f3 	udiv	r3, r5, r3
 80224ea:	1ad3      	subs	r3, r2, r3
 80224ec:	900e      	str	r0, [sp, #56]	@ 0x38
 80224ee:	3001      	adds	r0, #1
 80224f0:	b29b      	uxth	r3, r3
 80224f2:	9005      	str	r0, [sp, #20]
 80224f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80224f6:	9b06      	ldr	r3, [sp, #24]
 80224f8:	785a      	ldrb	r2, [r3, #1]
 80224fa:	789b      	ldrb	r3, [r3, #2]
 80224fc:	021b      	lsls	r3, r3, #8
 80224fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022502:	9a06      	ldr	r2, [sp, #24]
 8022504:	78d2      	ldrb	r2, [r2, #3]
 8022506:	4313      	orrs	r3, r2
 8022508:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802250a:	441a      	add	r2, r3
 802250c:	1c50      	adds	r0, r2, #1
 802250e:	7852      	ldrb	r2, [r2, #1]
 8022510:	9003      	str	r0, [sp, #12]
 8022512:	0212      	lsls	r2, r2, #8
 8022514:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022516:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 802251a:	5cc3      	ldrb	r3, [r0, r3]
 802251c:	431a      	orrs	r2, r3
 802251e:	b293      	uxth	r3, r2
 8022520:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8022524:	930a      	str	r3, [sp, #40]	@ 0x28
 8022526:	2300      	movs	r3, #0
 8022528:	461a      	mov	r2, r3
 802252a:	9307      	str	r3, [sp, #28]
 802252c:	2d00      	cmp	r5, #0
 802252e:	d07c      	beq.n	802262a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8022530:	42ae      	cmp	r6, r5
 8022532:	d26c      	bcs.n	802260e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8022534:	9b08      	ldr	r3, [sp, #32]
 8022536:	1bad      	subs	r5, r5, r6
 8022538:	4608      	mov	r0, r1
 802253a:	4543      	cmp	r3, r8
 802253c:	b2ad      	uxth	r5, r5
 802253e:	d802      	bhi.n	8022546 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8022540:	e071      	b.n	8022626 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8022542:	2b00      	cmp	r3, #0
 8022544:	d15d      	bne.n	8022602 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8022546:	9b03      	ldr	r3, [sp, #12]
 8022548:	9a02      	ldr	r2, [sp, #8]
 802254a:	785b      	ldrb	r3, [r3, #1]
 802254c:	f1c2 0207 	rsb	r2, r2, #7
 8022550:	9902      	ldr	r1, [sp, #8]
 8022552:	4093      	lsls	r3, r2
 8022554:	005b      	lsls	r3, r3, #1
 8022556:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802255a:	9b03      	ldr	r3, [sp, #12]
 802255c:	781b      	ldrb	r3, [r3, #0]
 802255e:	410b      	asrs	r3, r1
 8022560:	3101      	adds	r1, #1
 8022562:	b2c9      	uxtb	r1, r1
 8022564:	b2db      	uxtb	r3, r3
 8022566:	2908      	cmp	r1, #8
 8022568:	9102      	str	r1, [sp, #8]
 802256a:	9903      	ldr	r1, [sp, #12]
 802256c:	ea43 0302 	orr.w	r3, r3, r2
 8022570:	bf0c      	ite	eq
 8022572:	3102      	addeq	r1, #2
 8022574:	3101      	addne	r1, #1
 8022576:	b29a      	uxth	r2, r3
 8022578:	bf05      	ittet	eq
 802257a:	9103      	streq	r1, [sp, #12]
 802257c:	2100      	moveq	r1, #0
 802257e:	9103      	strne	r1, [sp, #12]
 8022580:	9102      	streq	r1, [sp, #8]
 8022582:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022584:	4291      	cmp	r1, r2
 8022586:	d30a      	bcc.n	802259e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8022588:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802258c:	2301      	movs	r3, #1
 802258e:	9905      	ldr	r1, [sp, #20]
 8022590:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022594:	d30f      	bcc.n	80225b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8022596:	469b      	mov	fp, r3
 8022598:	f04f 0c00 	mov.w	ip, #0
 802259c:	e032      	b.n	8022604 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 802259e:	9b05      	ldr	r3, [sp, #20]
 80225a0:	429a      	cmp	r2, r3
 80225a2:	d318      	bcc.n	80225d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 80225a4:	eb04 030b 	add.w	r3, r4, fp
 80225a8:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80225ac:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80225b0:	f10b 0301 	add.w	r3, fp, #1
 80225b4:	b29b      	uxth	r3, r3
 80225b6:	9905      	ldr	r1, [sp, #20]
 80225b8:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80225bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80225c0:	710e      	strb	r6, [r1, #4]
 80225c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80225c4:	80ce      	strh	r6, [r1, #6]
 80225c6:	f10b 0601 	add.w	r6, fp, #1
 80225ca:	714e      	strb	r6, [r1, #5]
 80225cc:	9905      	ldr	r1, [sp, #20]
 80225ce:	3101      	adds	r1, #1
 80225d0:	b289      	uxth	r1, r1
 80225d2:	9105      	str	r1, [sp, #20]
 80225d4:	e7df      	b.n	8022596 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80225d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80225da:	4611      	mov	r1, r2
 80225dc:	795b      	ldrb	r3, [r3, #5]
 80225de:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80225e2:	4426      	add	r6, r4
 80225e4:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80225e6:	4437      	add	r7, r6
 80225e8:	2f00      	cmp	r7, #0
 80225ea:	dd06      	ble.n	80225fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 80225ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80225f0:	790f      	ldrb	r7, [r1, #4]
 80225f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80225f6:	88c9      	ldrh	r1, [r1, #6]
 80225f8:	e7f4      	b.n	80225e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 80225fa:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80225fe:	b29b      	uxth	r3, r3
 8022600:	e7c5      	b.n	802258e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8022602:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022604:	920a      	str	r2, [sp, #40]	@ 0x28
 8022606:	4601      	mov	r1, r0
 8022608:	4662      	mov	r2, ip
 802260a:	461e      	mov	r6, r3
 802260c:	e78e      	b.n	802252c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 802260e:	1b73      	subs	r3, r6, r5
 8022610:	eb02 0c05 	add.w	ip, r2, r5
 8022614:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022618:	b29b      	uxth	r3, r3
 802261a:	fa1f fc8c 	uxth.w	ip, ip
 802261e:	2500      	movs	r5, #0
 8022620:	9a08      	ldr	r2, [sp, #32]
 8022622:	4542      	cmp	r2, r8
 8022624:	d88d      	bhi.n	8022542 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8022626:	4601      	mov	r1, r0
 8022628:	e74f      	b.n	80224ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 802262a:	428e      	cmp	r6, r1
 802262c:	bf2b      	itete	cs
 802262e:	468e      	movcs	lr, r1
 8022630:	46b6      	movcc	lr, r6
 8022632:	1a73      	subcs	r3, r6, r1
 8022634:	1b88      	subcc	r0, r1, r6
 8022636:	eb02 0c0e 	add.w	ip, r2, lr
 802263a:	bf2b      	itete	cs
 802263c:	4628      	movcs	r0, r5
 802263e:	462b      	movcc	r3, r5
 8022640:	b29b      	uxthcs	r3, r3
 8022642:	b280      	uxthcc	r0, r0
 8022644:	f108 0503 	add.w	r5, r8, #3
 8022648:	fa1f fc8c 	uxth.w	ip, ip
 802264c:	4562      	cmp	r2, ip
 802264e:	d06f      	beq.n	8022730 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8022650:	1c57      	adds	r7, r2, #1
 8022652:	4422      	add	r2, r4
 8022654:	b2bf      	uxth	r7, r7
 8022656:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802265a:	9713      	str	r7, [sp, #76]	@ 0x4c
 802265c:	2704      	movs	r7, #4
 802265e:	46b9      	mov	r9, r7
 8022660:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8022662:	fb19 7202 	smlabb	r2, r9, r2, r7
 8022666:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8022668:	58bf      	ldr	r7, [r7, r2]
 802266a:	0e3a      	lsrs	r2, r7, #24
 802266c:	9209      	str	r2, [sp, #36]	@ 0x24
 802266e:	d016      	beq.n	802269e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8022670:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022674:	fa5f fa87 	uxtb.w	sl, r7
 8022678:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802267c:	fa5f f289 	uxtb.w	r2, r9
 8022680:	9214      	str	r2, [sp, #80]	@ 0x50
 8022682:	b2fa      	uxtb	r2, r7
 8022684:	9215      	str	r2, [sp, #84]	@ 0x54
 8022686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022688:	2aff      	cmp	r2, #255	@ 0xff
 802268a:	d10b      	bne.n	80226a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 802268c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802268e:	2aff      	cmp	r2, #255	@ 0xff
 8022690:	d108      	bne.n	80226a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8022692:	f805 ac03 	strb.w	sl, [r5, #-3]
 8022696:	f805 9c02 	strb.w	r9, [r5, #-2]
 802269a:	f805 7c01 	strb.w	r7, [r5, #-1]
 802269e:	3503      	adds	r5, #3
 80226a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80226a2:	e7d3      	b.n	802264c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80226a4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80226a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80226a8:	437a      	muls	r2, r7
 80226aa:	1c57      	adds	r7, r2, #1
 80226ac:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80226b0:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80226b4:	1212      	asrs	r2, r2, #8
 80226b6:	fa1f f982 	uxth.w	r9, r2
 80226ba:	43d2      	mvns	r2, r2
 80226bc:	fb1a fa09 	smulbb	sl, sl, r9
 80226c0:	b2d2      	uxtb	r2, r2
 80226c2:	fb07 a702 	mla	r7, r7, r2, sl
 80226c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80226c8:	b2bf      	uxth	r7, r7
 80226ca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80226cc:	f107 0a01 	add.w	sl, r7, #1
 80226d0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80226d4:	fb12 fa09 	smulbb	sl, r2, r9
 80226d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80226da:	123f      	asrs	r7, r7, #8
 80226dc:	f805 7c03 	strb.w	r7, [r5, #-3]
 80226e0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 80226e4:	fb07 aa02 	mla	sl, r7, r2, sl
 80226e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80226ea:	fb12 f909 	smulbb	r9, r2, r9
 80226ee:	fa1f fa8a 	uxth.w	sl, sl
 80226f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80226f4:	f10a 0701 	add.w	r7, sl, #1
 80226f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80226fc:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8022700:	fb07 9902 	mla	r9, r7, r2, r9
 8022704:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022708:	fa1f f989 	uxth.w	r9, r9
 802270c:	f805 ac02 	strb.w	sl, [r5, #-2]
 8022710:	f109 0201 	add.w	r2, r9, #1
 8022714:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8022718:	ea4f 2929 	mov.w	r9, r9, asr #8
 802271c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8022720:	e7bd      	b.n	802269e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8022722:	bf00      	nop
 8022724:	24015dd4 	.word	0x24015dd4
 8022728:	24015dce 	.word	0x24015dce
 802272c:	fffff7fb 	.word	0xfffff7fb
 8022730:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022734:	428e      	cmp	r6, r1
 8022736:	44f0      	add	r8, lr
 8022738:	f4ff af71 	bcc.w	802261e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 802273c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802273e:	9904      	ldr	r1, [sp, #16]
 8022740:	8812      	ldrh	r2, [r2, #0]
 8022742:	1a52      	subs	r2, r2, r1
 8022744:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8022746:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802274a:	4490      	add	r8, r2
 802274c:	9a07      	ldr	r2, [sp, #28]
 802274e:	3201      	adds	r2, #1
 8022750:	428a      	cmp	r2, r1
 8022752:	9207      	str	r2, [sp, #28]
 8022754:	d111      	bne.n	802277a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8022756:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 802275a:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 802275e:	9b04      	ldr	r3, [sp, #16]
 8022760:	eba5 050c 	sub.w	r5, r5, ip
 8022764:	b2ad      	uxth	r5, r5
 8022766:	2d00      	cmp	r5, #0
 8022768:	bf08      	it	eq
 802276a:	4619      	moveq	r1, r3
 802276c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802276e:	bf18      	it	ne
 8022770:	2100      	movne	r1, #0
 8022772:	3301      	adds	r3, #1
 8022774:	b289      	uxth	r1, r1
 8022776:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022778:	e69e      	b.n	80224b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 802277a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802277e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8022782:	1a2d      	subs	r5, r5, r0
 8022784:	b2ad      	uxth	r5, r5
 8022786:	2d00      	cmp	r5, #0
 8022788:	bf18      	it	ne
 802278a:	2000      	movne	r0, #0
 802278c:	e748      	b.n	8022620 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 802278e:	4b04      	ldr	r3, [pc, #16]	@ (80227a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8022790:	6818      	ldr	r0, [r3, #0]
 8022792:	6803      	ldr	r3, [r0, #0]
 8022794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022796:	4798      	blx	r3
 8022798:	b01d      	add	sp, #116	@ 0x74
 802279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802279e:	bf00      	nop
 80227a0:	24015dd4 	.word	0x24015dd4

080227a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 80227a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227a8:	b08f      	sub	sp, #60	@ 0x3c
 80227aa:	4616      	mov	r6, r2
 80227ac:	4681      	mov	r9, r0
 80227ae:	460d      	mov	r5, r1
 80227b0:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 80227b4:	9205      	str	r2, [sp, #20]
 80227b6:	2a00      	cmp	r2, #0
 80227b8:	f000 82a8 	beq.w	8022d0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 80227bc:	6830      	ldr	r0, [r6, #0]
 80227be:	ac0a      	add	r4, sp, #40	@ 0x28
 80227c0:	6871      	ldr	r1, [r6, #4]
 80227c2:	c403      	stmia	r4!, {r0, r1}
 80227c4:	6818      	ldr	r0, [r3, #0]
 80227c6:	ac0c      	add	r4, sp, #48	@ 0x30
 80227c8:	6859      	ldr	r1, [r3, #4]
 80227ca:	c403      	stmia	r4!, {r0, r1}
 80227cc:	a80a      	add	r0, sp, #40	@ 0x28
 80227ce:	f7f9 fead 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80227d2:	4631      	mov	r1, r6
 80227d4:	a80c      	add	r0, sp, #48	@ 0x30
 80227d6:	f7f9 fed1 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80227da:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80227de:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80227e2:	bfdb      	ittet	le
 80227e4:	b293      	uxthle	r3, r2
 80227e6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80227ea:	2301      	movgt	r3, #1
 80227ec:	fb91 f3f3 	sdivle	r3, r1, r3
 80227f0:	9300      	str	r3, [sp, #0]
 80227f2:	f105 0308 	add.w	r3, r5, #8
 80227f6:	9900      	ldr	r1, [sp, #0]
 80227f8:	9306      	str	r3, [sp, #24]
 80227fa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80227fe:	440b      	add	r3, r1
 8022800:	3b01      	subs	r3, #1
 8022802:	fb93 f3f1 	sdiv	r3, r3, r1
 8022806:	3b01      	subs	r3, #1
 8022808:	9906      	ldr	r1, [sp, #24]
 802280a:	b29b      	uxth	r3, r3
 802280c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022810:	9900      	ldr	r1, [sp, #0]
 8022812:	9307      	str	r3, [sp, #28]
 8022814:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022818:	fb93 f0f1 	sdiv	r0, r3, r1
 802281c:	b284      	uxth	r4, r0
 802281e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022822:	b280      	uxth	r0, r0
 8022824:	9402      	str	r4, [sp, #8]
 8022826:	9d02      	ldr	r5, [sp, #8]
 8022828:	9c00      	ldr	r4, [sp, #0]
 802282a:	fb05 3514 	mls	r5, r5, r4, r3
 802282e:	fb15 f502 	smulbb	r5, r5, r2
 8022832:	440d      	add	r5, r1
 8022834:	b2ad      	uxth	r5, r5
 8022836:	2800      	cmp	r0, #0
 8022838:	d071      	beq.n	802291e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 802283a:	1e42      	subs	r2, r0, #1
 802283c:	9806      	ldr	r0, [sp, #24]
 802283e:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8022842:	9a07      	ldr	r2, [sp, #28]
 8022844:	fa98 f888 	rev.w	r8, r8
 8022848:	4490      	add	r8, r2
 802284a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 802284e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8022852:	4411      	add	r1, r2
 8022854:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022858:	f8df b348 	ldr.w	fp, [pc, #840]	@ 8022ba4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 802285c:	4413      	add	r3, r2
 802285e:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8022862:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022866:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802286a:	9301      	str	r3, [sp, #4]
 802286c:	4bcb      	ldr	r3, [pc, #812]	@ (8022b9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 802286e:	6818      	ldr	r0, [r3, #0]
 8022870:	6803      	ldr	r3, [r0, #0]
 8022872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022874:	4798      	blx	r3
 8022876:	4bca      	ldr	r3, [pc, #808]	@ (8022ba0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8022878:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802287c:	881b      	ldrh	r3, [r3, #0]
 802287e:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8022882:	fb03 2707 	mla	r7, r3, r7, r2
 8022886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802288a:	4363      	muls	r3, r4
 802288c:	2400      	movs	r4, #0
 802288e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022896:	4621      	mov	r1, r4
 8022898:	4407      	add	r7, r0
 802289a:	18fb      	adds	r3, r7, r3
 802289c:	9309      	str	r3, [sp, #36]	@ 0x24
 802289e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80228a2:	fb95 f3f3 	sdiv	r3, r5, r3
 80228a6:	9304      	str	r3, [sp, #16]
 80228a8:	f109 0304 	add.w	r3, r9, #4
 80228ac:	4618      	mov	r0, r3
 80228ae:	9308      	str	r3, [sp, #32]
 80228b0:	f008 fc4a 	bl	802b148 <memset>
 80228b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228b6:	42bb      	cmp	r3, r7
 80228b8:	f240 8223 	bls.w	8022d02 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 80228bc:	2003      	movs	r0, #3
 80228be:	f04f 0c07 	mov.w	ip, #7
 80228c2:	f04f 0e0b 	mov.w	lr, #11
 80228c6:	2d00      	cmp	r5, #0
 80228c8:	f000 813c 	beq.w	8022b44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 80228cc:	f898 3000 	ldrb.w	r3, [r8]
 80228d0:	b2db      	uxtb	r3, r3
 80228d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80228d4:	d126      	bne.n	8022924 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 80228d6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80228da:	f108 0604 	add.w	r6, r8, #4
 80228de:	f898 2002 	ldrb.w	r2, [r8, #2]
 80228e2:	3d01      	subs	r5, #1
 80228e4:	b2c9      	uxtb	r1, r1
 80228e6:	f898 8003 	ldrb.w	r8, [r8, #3]
 80228ea:	b2d2      	uxtb	r2, r2
 80228ec:	f361 0407 	bfi	r4, r1, #0, #8
 80228f0:	fa5f f888 	uxtb.w	r8, r8
 80228f4:	b2ad      	uxth	r5, r5
 80228f6:	f362 240f 	bfi	r4, r2, #8, #8
 80228fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80228fe:	fb10 2208 	smlabb	r2, r0, r8, r2
 8022902:	f368 4417 	bfi	r4, r8, #16, #8
 8022906:	fb1c 2201 	smlabb	r2, ip, r1, r2
 802290a:	0e23      	lsrs	r3, r4, #24
 802290c:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8022910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022914:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022918:	605c      	str	r4, [r3, #4]
 802291a:	46b0      	mov	r8, r6
 802291c:	e7d3      	b.n	80228c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 802291e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022922:	e792      	b.n	802284a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8022924:	2bff      	cmp	r3, #255	@ 0xff
 8022926:	d127      	bne.n	8022978 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8022928:	f898 2001 	ldrb.w	r2, [r8, #1]
 802292c:	f108 0605 	add.w	r6, r8, #5
 8022930:	f898 3002 	ldrb.w	r3, [r8, #2]
 8022934:	3d01      	subs	r5, #1
 8022936:	b2d2      	uxtb	r2, r2
 8022938:	f898 1003 	ldrb.w	r1, [r8, #3]
 802293c:	b2db      	uxtb	r3, r3
 802293e:	f898 8004 	ldrb.w	r8, [r8, #4]
 8022942:	f362 0407 	bfi	r4, r2, #0, #8
 8022946:	b2c9      	uxtb	r1, r1
 8022948:	fa5f f888 	uxtb.w	r8, r8
 802294c:	f363 240f 	bfi	r4, r3, #8, #8
 8022950:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022954:	b2ad      	uxth	r5, r5
 8022956:	fb10 3301 	smlabb	r3, r0, r1, r3
 802295a:	f361 4417 	bfi	r4, r1, #16, #8
 802295e:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8022962:	f368 641f 	bfi	r4, r8, #24, #8
 8022966:	fb1e 3808 	smlabb	r8, lr, r8, r3
 802296a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 802296e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8022972:	f8c8 4004 	str.w	r4, [r8, #4]
 8022976:	e7d0      	b.n	802291a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8022978:	119a      	asrs	r2, r3, #6
 802297a:	f108 0601 	add.w	r6, r8, #1
 802297e:	d107      	bne.n	8022990 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8022980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022984:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022988:	685c      	ldr	r4, [r3, #4]
 802298a:	3d01      	subs	r5, #1
 802298c:	b2ad      	uxth	r5, r5
 802298e:	e7c4      	b.n	802291a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8022990:	2a01      	cmp	r2, #1
 8022992:	d129      	bne.n	80229e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8022994:	f003 0203 	and.w	r2, r3, #3
 8022998:	1ea1      	subs	r1, r4, #2
 802299a:	4411      	add	r1, r2
 802299c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80229a0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80229a4:	b2c9      	uxtb	r1, r1
 80229a6:	3a02      	subs	r2, #2
 80229a8:	3b02      	subs	r3, #2
 80229aa:	f361 0407 	bfi	r4, r1, #0, #8
 80229ae:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80229b2:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80229b6:	f362 240f 	bfi	r4, r2, #8, #8
 80229ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80229be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80229c2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80229c6:	fb10 2203 	smlabb	r2, r0, r3, r2
 80229ca:	f363 4417 	bfi	r4, r3, #16, #8
 80229ce:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80229d2:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80229d6:	fb1e 2808 	smlabb	r8, lr, r8, r2
 80229da:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80229de:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80229e2:	f8c8 4004 	str.w	r4, [r8, #4]
 80229e6:	e7d0      	b.n	802298a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80229e8:	2a02      	cmp	r2, #2
 80229ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80229ee:	d12e      	bne.n	8022a4e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 80229f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80229f4:	f1a3 0a20 	sub.w	sl, r3, #32
 80229f8:	f108 0602 	add.w	r6, r8, #2
 80229fc:	b2d2      	uxtb	r2, r2
 80229fe:	f002 010f 	and.w	r1, r2, #15
 8022a02:	1112      	asrs	r2, r2, #4
 8022a04:	3908      	subs	r1, #8
 8022a06:	3a08      	subs	r2, #8
 8022a08:	4451      	add	r1, sl
 8022a0a:	4492      	add	sl, r2
 8022a0c:	4421      	add	r1, r4
 8022a0e:	b2c9      	uxtb	r1, r1
 8022a10:	f361 0407 	bfi	r4, r1, #0, #8
 8022a14:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8022a18:	f1a8 0820 	sub.w	r8, r8, #32
 8022a1c:	4443      	add	r3, r8
 8022a1e:	b2db      	uxtb	r3, r3
 8022a20:	f363 240f 	bfi	r4, r3, #8, #8
 8022a24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022a28:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8022a2c:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8022a30:	fb10 330a 	smlabb	r3, r0, sl, r3
 8022a34:	f36a 4417 	bfi	r4, sl, #16, #8
 8022a38:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8022a3c:	0e22      	lsrs	r2, r4, #24
 8022a3e:	fb1e 3202 	smlabb	r2, lr, r2, r3
 8022a42:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022a46:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8022a4a:	6054      	str	r4, [r2, #4]
 8022a4c:	e79d      	b.n	802298a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8022a4e:	3301      	adds	r3, #1
 8022a50:	42ab      	cmp	r3, r5
 8022a52:	dd59      	ble.n	8022b08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 8022a54:	1b5d      	subs	r5, r3, r5
 8022a56:	2d00      	cmp	r5, #0
 8022a58:	dc58      	bgt.n	8022b0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8022a5a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8022a5e:	f04f 0800 	mov.w	r8, #0
 8022a62:	f1ba 0f00 	cmp.w	sl, #0
 8022a66:	f340 8108 	ble.w	8022c7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8022a6a:	1c73      	adds	r3, r6, #1
 8022a6c:	9303      	str	r3, [sp, #12]
 8022a6e:	7833      	ldrb	r3, [r6, #0]
 8022a70:	b2db      	uxtb	r3, r3
 8022a72:	2bfe      	cmp	r3, #254	@ 0xfe
 8022a74:	d16a      	bne.n	8022b4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 8022a76:	7871      	ldrb	r1, [r6, #1]
 8022a78:	1d33      	adds	r3, r6, #4
 8022a7a:	78b2      	ldrb	r2, [r6, #2]
 8022a7c:	b2c9      	uxtb	r1, r1
 8022a7e:	78f0      	ldrb	r0, [r6, #3]
 8022a80:	b2d2      	uxtb	r2, r2
 8022a82:	9303      	str	r3, [sp, #12]
 8022a84:	f361 0407 	bfi	r4, r1, #0, #8
 8022a88:	b2c0      	uxtb	r0, r0
 8022a8a:	2303      	movs	r3, #3
 8022a8c:	f362 240f 	bfi	r4, r2, #8, #8
 8022a90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022a94:	fb13 2200 	smlabb	r2, r3, r0, r2
 8022a98:	f360 4417 	bfi	r4, r0, #16, #8
 8022a9c:	2307      	movs	r3, #7
 8022a9e:	0e25      	lsrs	r5, r4, #24
 8022aa0:	fb13 2101 	smlabb	r1, r3, r1, r2
 8022aa4:	230b      	movs	r3, #11
 8022aa6:	fb13 1305 	smlabb	r3, r3, r5, r1
 8022aaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022aae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022ab2:	605c      	str	r4, [r3, #4]
 8022ab4:	2501      	movs	r5, #1
 8022ab6:	462e      	mov	r6, r5
 8022ab8:	eb06 0308 	add.w	r3, r6, r8
 8022abc:	ebaa 0a06 	sub.w	sl, sl, r6
 8022ac0:	1bad      	subs	r5, r5, r6
 8022ac2:	2b40      	cmp	r3, #64	@ 0x40
 8022ac4:	dd16      	ble.n	8022af4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8022ac6:	4658      	mov	r0, fp
 8022ac8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8022acc:	f7df f986 	bl	8001ddc <_ZN8touchgfx5paint9flushLineEPmi>
 8022ad0:	4659      	mov	r1, fp
 8022ad2:	9b05      	ldr	r3, [sp, #20]
 8022ad4:	4642      	mov	r2, r8
 8022ad6:	4638      	mov	r0, r7
 8022ad8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022adc:	f7df f9e6 	bl	8001eac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8022ae0:	4b30      	ldr	r3, [pc, #192]	@ (8022ba4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 8022ae2:	4447      	add	r7, r8
 8022ae4:	f04f 0800 	mov.w	r8, #0
 8022ae8:	459b      	cmp	fp, r3
 8022aea:	bf0c      	ite	eq
 8022aec:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8022ba8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 8022af0:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 8022ba4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8022af4:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8022af8:	4633      	mov	r3, r6
 8022afa:	3b01      	subs	r3, #1
 8022afc:	f842 4b04 	str.w	r4, [r2], #4
 8022b00:	d1fb      	bne.n	8022afa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 8022b02:	44b0      	add	r8, r6
 8022b04:	9e03      	ldr	r6, [sp, #12]
 8022b06:	e7ac      	b.n	8022a62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8022b08:	1aed      	subs	r5, r5, r3
 8022b0a:	e73f      	b.n	802298c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8022b0c:	9b01      	ldr	r3, [sp, #4]
 8022b0e:	42ab      	cmp	r3, r5
 8022b10:	bfa8      	it	ge
 8022b12:	462b      	movge	r3, r5
 8022b14:	4698      	mov	r8, r3
 8022b16:	9b01      	ldr	r3, [sp, #4]
 8022b18:	eba3 0a08 	sub.w	sl, r3, r8
 8022b1c:	0e23      	lsrs	r3, r4, #24
 8022b1e:	eba5 0508 	sub.w	r5, r5, r8
 8022b22:	d00b      	beq.n	8022b3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8022b24:	9a05      	ldr	r2, [sp, #20]
 8022b26:	4641      	mov	r1, r8
 8022b28:	4638      	mov	r0, r7
 8022b2a:	4353      	muls	r3, r2
 8022b2c:	1c5a      	adds	r2, r3, #1
 8022b2e:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8022b32:	4622      	mov	r2, r4
 8022b34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b38:	f7df f96a 	bl	8001e10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8022b3c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022b40:	4447      	add	r7, r8
 8022b42:	e78c      	b.n	8022a5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8022b44:	f8dd a004 	ldr.w	sl, [sp, #4]
 8022b48:	4646      	mov	r6, r8
 8022b4a:	e788      	b.n	8022a5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8022b4c:	2bff      	cmp	r3, #255	@ 0xff
 8022b4e:	d11d      	bne.n	8022b8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8022b50:	7870      	ldrb	r0, [r6, #1]
 8022b52:	1d73      	adds	r3, r6, #5
 8022b54:	78b2      	ldrb	r2, [r6, #2]
 8022b56:	b2c0      	uxtb	r0, r0
 8022b58:	78f5      	ldrb	r5, [r6, #3]
 8022b5a:	b2d2      	uxtb	r2, r2
 8022b5c:	9303      	str	r3, [sp, #12]
 8022b5e:	f360 0407 	bfi	r4, r0, #0, #8
 8022b62:	7933      	ldrb	r3, [r6, #4]
 8022b64:	b2ed      	uxtb	r5, r5
 8022b66:	b2d9      	uxtb	r1, r3
 8022b68:	f362 240f 	bfi	r4, r2, #8, #8
 8022b6c:	2303      	movs	r3, #3
 8022b6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022b72:	f365 4417 	bfi	r4, r5, #16, #8
 8022b76:	fb13 2205 	smlabb	r2, r3, r5, r2
 8022b7a:	2307      	movs	r3, #7
 8022b7c:	f361 641f 	bfi	r4, r1, #24, #8
 8022b80:	fb13 2000 	smlabb	r0, r3, r0, r2
 8022b84:	230b      	movs	r3, #11
 8022b86:	fb13 0301 	smlabb	r3, r3, r1, r0
 8022b8a:	e78e      	b.n	8022aaa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8022b8c:	119d      	asrs	r5, r3, #6
 8022b8e:	d10d      	bne.n	8022bac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8022b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022b94:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022b98:	685c      	ldr	r4, [r3, #4]
 8022b9a:	e78b      	b.n	8022ab4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8022b9c:	24015dd4 	.word	0x24015dd4
 8022ba0:	24015dce 	.word	0x24015dce
 8022ba4:	24000120 	.word	0x24000120
 8022ba8:	24000220 	.word	0x24000220
 8022bac:	2d01      	cmp	r5, #1
 8022bae:	d12a      	bne.n	8022c06 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8022bb0:	f003 0203 	and.w	r2, r3, #3
 8022bb4:	1ea1      	subs	r1, r4, #2
 8022bb6:	2603      	movs	r6, #3
 8022bb8:	4411      	add	r1, r2
 8022bba:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8022bbe:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8022bc2:	b2c9      	uxtb	r1, r1
 8022bc4:	3a02      	subs	r2, #2
 8022bc6:	3b02      	subs	r3, #2
 8022bc8:	f361 0407 	bfi	r4, r1, #0, #8
 8022bcc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022bd0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8022bd4:	f362 240f 	bfi	r4, r2, #8, #8
 8022bd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022bdc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8022be0:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8022be4:	fb16 2203 	smlabb	r2, r6, r3, r2
 8022be8:	f363 4417 	bfi	r4, r3, #16, #8
 8022bec:	2307      	movs	r3, #7
 8022bee:	0e20      	lsrs	r0, r4, #24
 8022bf0:	fb13 2101 	smlabb	r1, r3, r1, r2
 8022bf4:	230b      	movs	r3, #11
 8022bf6:	fb13 1300 	smlabb	r3, r3, r0, r1
 8022bfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022bfe:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022c02:	605c      	str	r4, [r3, #4]
 8022c04:	e757      	b.n	8022ab6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8022c06:	2d02      	cmp	r5, #2
 8022c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022c0c:	d12f      	bne.n	8022c6e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 8022c0e:	1cb2      	adds	r2, r6, #2
 8022c10:	f1a3 0020 	sub.w	r0, r3, #32
 8022c14:	9203      	str	r2, [sp, #12]
 8022c16:	7872      	ldrb	r2, [r6, #1]
 8022c18:	b2d2      	uxtb	r2, r2
 8022c1a:	f002 010f 	and.w	r1, r2, #15
 8022c1e:	1112      	asrs	r2, r2, #4
 8022c20:	3908      	subs	r1, #8
 8022c22:	3a08      	subs	r2, #8
 8022c24:	4401      	add	r1, r0
 8022c26:	4402      	add	r2, r0
 8022c28:	4421      	add	r1, r4
 8022c2a:	b2c9      	uxtb	r1, r1
 8022c2c:	f361 0407 	bfi	r4, r1, #0, #8
 8022c30:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8022c34:	3d20      	subs	r5, #32
 8022c36:	442b      	add	r3, r5
 8022c38:	2503      	movs	r5, #3
 8022c3a:	b2db      	uxtb	r3, r3
 8022c3c:	f363 240f 	bfi	r4, r3, #8, #8
 8022c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022c44:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8022c48:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8022c4c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8022c50:	f362 4417 	bfi	r4, r2, #16, #8
 8022c54:	2207      	movs	r2, #7
 8022c56:	0e20      	lsrs	r0, r4, #24
 8022c58:	fb12 3201 	smlabb	r2, r2, r1, r3
 8022c5c:	210b      	movs	r1, #11
 8022c5e:	fb11 2100 	smlabb	r1, r1, r0, r2
 8022c62:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8022c66:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8022c6a:	604c      	str	r4, [r1, #4]
 8022c6c:	e722      	b.n	8022ab4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8022c6e:	1c5d      	adds	r5, r3, #1
 8022c70:	4656      	mov	r6, sl
 8022c72:	45aa      	cmp	sl, r5
 8022c74:	bfa8      	it	ge
 8022c76:	462e      	movge	r6, r5
 8022c78:	e71e      	b.n	8022ab8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8022c7a:	f1b8 0f00 	cmp.w	r8, #0
 8022c7e:	d00d      	beq.n	8022c9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8022c80:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8022c84:	4658      	mov	r0, fp
 8022c86:	f7df f8a9 	bl	8001ddc <_ZN8touchgfx5paint9flushLineEPmi>
 8022c8a:	4642      	mov	r2, r8
 8022c8c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022c90:	4638      	mov	r0, r7
 8022c92:	9b05      	ldr	r3, [sp, #20]
 8022c94:	4659      	mov	r1, fp
 8022c96:	4447      	add	r7, r8
 8022c98:	f7df f908 	bl	8001eac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8022c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8022d14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 8022c9e:	9a01      	ldr	r2, [sp, #4]
 8022ca0:	881b      	ldrh	r3, [r3, #0]
 8022ca2:	1a9b      	subs	r3, r3, r2
 8022ca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ca8:	441f      	add	r7, r3
 8022caa:	9b04      	ldr	r3, [sp, #16]
 8022cac:	3301      	adds	r3, #1
 8022cae:	9304      	str	r3, [sp, #16]
 8022cb0:	9a04      	ldr	r2, [sp, #16]
 8022cb2:	9b00      	ldr	r3, [sp, #0]
 8022cb4:	4293      	cmp	r3, r2
 8022cb6:	d11d      	bne.n	8022cf4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8022cb8:	9b02      	ldr	r3, [sp, #8]
 8022cba:	2400      	movs	r4, #0
 8022cbc:	9a02      	ldr	r2, [sp, #8]
 8022cbe:	f103 0801 	add.w	r8, r3, #1
 8022cc2:	9b06      	ldr	r3, [sp, #24]
 8022cc4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8022cc8:	4621      	mov	r1, r4
 8022cca:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022cd2:	9b07      	ldr	r3, [sp, #28]
 8022cd4:	ba36      	rev	r6, r6
 8022cd6:	9808      	ldr	r0, [sp, #32]
 8022cd8:	441e      	add	r6, r3
 8022cda:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8022cde:	1aed      	subs	r5, r5, r3
 8022ce0:	f008 fa32 	bl	802b148 <memset>
 8022ce4:	f8cd 8008 	str.w	r8, [sp, #8]
 8022ce8:	b2ad      	uxth	r5, r5
 8022cea:	9404      	str	r4, [sp, #16]
 8022cec:	f7df f86c 	bl	8001dc8 <_ZN8touchgfx5paint8tearDownEv>
 8022cf0:	46b0      	mov	r8, r6
 8022cf2:	e5df      	b.n	80228b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 8022cf4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8022cf8:	9a01      	ldr	r2, [sp, #4]
 8022cfa:	1a9b      	subs	r3, r3, r2
 8022cfc:	1b5d      	subs	r5, r3, r5
 8022cfe:	b2ad      	uxth	r5, r5
 8022d00:	e7f4      	b.n	8022cec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 8022d02:	4b05      	ldr	r3, [pc, #20]	@ (8022d18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8022d04:	6818      	ldr	r0, [r3, #0]
 8022d06:	6803      	ldr	r3, [r0, #0]
 8022d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d0a:	4798      	blx	r3
 8022d0c:	b00f      	add	sp, #60	@ 0x3c
 8022d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d12:	bf00      	nop
 8022d14:	24015dce 	.word	0x24015dce
 8022d18:	24015dd4 	.word	0x24015dd4

08022d1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 8022d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d20:	b093      	sub	sp, #76	@ 0x4c
 8022d22:	460d      	mov	r5, r1
 8022d24:	4616      	mov	r6, r2
 8022d26:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8022d2a:	9000      	str	r0, [sp, #0]
 8022d2c:	f1bb 0f00 	cmp.w	fp, #0
 8022d30:	f000 82ac 	beq.w	802328c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8022d34:	6810      	ldr	r0, [r2, #0]
 8022d36:	ac0e      	add	r4, sp, #56	@ 0x38
 8022d38:	6851      	ldr	r1, [r2, #4]
 8022d3a:	c403      	stmia	r4!, {r0, r1}
 8022d3c:	6818      	ldr	r0, [r3, #0]
 8022d3e:	ac10      	add	r4, sp, #64	@ 0x40
 8022d40:	6859      	ldr	r1, [r3, #4]
 8022d42:	c403      	stmia	r4!, {r0, r1}
 8022d44:	a80e      	add	r0, sp, #56	@ 0x38
 8022d46:	f7f9 fbf1 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d4a:	4631      	mov	r1, r6
 8022d4c:	a810      	add	r0, sp, #64	@ 0x40
 8022d4e:	f7f9 fc15 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d52:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022d56:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022d5a:	bfdb      	ittet	le
 8022d5c:	b293      	uxthle	r3, r2
 8022d5e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022d62:	2301      	movgt	r3, #1
 8022d64:	fb91 f3f3 	sdivle	r3, r1, r3
 8022d68:	9301      	str	r3, [sp, #4]
 8022d6a:	f105 0308 	add.w	r3, r5, #8
 8022d6e:	9901      	ldr	r1, [sp, #4]
 8022d70:	9305      	str	r3, [sp, #20]
 8022d72:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8022d76:	440b      	add	r3, r1
 8022d78:	3b01      	subs	r3, #1
 8022d7a:	fb93 f3f1 	sdiv	r3, r3, r1
 8022d7e:	3b01      	subs	r3, #1
 8022d80:	9905      	ldr	r1, [sp, #20]
 8022d82:	b29b      	uxth	r3, r3
 8022d84:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022d88:	9901      	ldr	r1, [sp, #4]
 8022d8a:	9306      	str	r3, [sp, #24]
 8022d8c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022d90:	fb93 f0f1 	sdiv	r0, r3, r1
 8022d94:	b284      	uxth	r4, r0
 8022d96:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8022d9a:	9403      	str	r4, [sp, #12]
 8022d9c:	9d03      	ldr	r5, [sp, #12]
 8022d9e:	9c01      	ldr	r4, [sp, #4]
 8022da0:	fb05 3714 	mls	r7, r5, r4, r3
 8022da4:	fb17 f702 	smulbb	r7, r7, r2
 8022da8:	440f      	add	r7, r1
 8022daa:	b2bf      	uxth	r7, r7
 8022dac:	2d00      	cmp	r5, #0
 8022dae:	d06b      	beq.n	8022e88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8022db0:	1e6a      	subs	r2, r5, #1
 8022db2:	9805      	ldr	r0, [sp, #20]
 8022db4:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8022db8:	9a06      	ldr	r2, [sp, #24]
 8022dba:	fa99 f989 	rev.w	r9, r9
 8022dbe:	4491      	add	r9, r2
 8022dc0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8022dc4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8022dc8:	4411      	add	r1, r2
 8022dca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022dce:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 802312c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 8022dd2:	4413      	add	r3, r2
 8022dd4:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8022dd8:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022ddc:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8022de0:	9302      	str	r3, [sp, #8]
 8022de2:	4bd0      	ldr	r3, [pc, #832]	@ (8023124 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 8022de4:	6818      	ldr	r0, [r3, #0]
 8022de6:	6803      	ldr	r3, [r0, #0]
 8022de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022dea:	4798      	blx	r3
 8022dec:	4bce      	ldr	r3, [pc, #824]	@ (8023128 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8022dee:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8022df2:	881b      	ldrh	r3, [r3, #0]
 8022df4:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8022df8:	fb03 2404 	mla	r4, r3, r4, r2
 8022dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022e00:	436b      	muls	r3, r5
 8022e02:	2500      	movs	r5, #0
 8022e04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e0c:	4629      	mov	r1, r5
 8022e0e:	4404      	add	r4, r0
 8022e10:	18e3      	adds	r3, r4, r3
 8022e12:	930d      	str	r3, [sp, #52]	@ 0x34
 8022e14:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022e18:	fb97 f3f3 	sdiv	r3, r7, r3
 8022e1c:	9304      	str	r3, [sp, #16]
 8022e1e:	9b00      	ldr	r3, [sp, #0]
 8022e20:	3304      	adds	r3, #4
 8022e22:	4618      	mov	r0, r3
 8022e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e26:	f008 f98f 	bl	802b148 <memset>
 8022e2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022e2c:	42a3      	cmp	r3, r4
 8022e2e:	f240 8228 	bls.w	8023282 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8022e32:	2003      	movs	r0, #3
 8022e34:	2607      	movs	r6, #7
 8022e36:	2f00      	cmp	r7, #0
 8022e38:	f000 80cb 	beq.w	8022fd2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8022e3c:	f899 3000 	ldrb.w	r3, [r9]
 8022e40:	b2db      	uxtb	r3, r3
 8022e42:	2bfe      	cmp	r3, #254	@ 0xfe
 8022e44:	d123      	bne.n	8022e8e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8022e46:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022e4a:	3f01      	subs	r7, #1
 8022e4c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8022e50:	f109 0804 	add.w	r8, r9, #4
 8022e54:	b2db      	uxtb	r3, r3
 8022e56:	f899 1003 	ldrb.w	r1, [r9, #3]
 8022e5a:	b2d2      	uxtb	r2, r2
 8022e5c:	f363 0507 	bfi	r5, r3, #0, #8
 8022e60:	b2c9      	uxtb	r1, r1
 8022e62:	b2bf      	uxth	r7, r7
 8022e64:	f362 250f 	bfi	r5, r2, #8, #8
 8022e68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022e6c:	fb10 2201 	smlabb	r2, r0, r1, r2
 8022e70:	f361 4517 	bfi	r5, r1, #16, #8
 8022e74:	fb16 2303 	smlabb	r3, r6, r3, r2
 8022e78:	9a00      	ldr	r2, [sp, #0]
 8022e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022e82:	605d      	str	r5, [r3, #4]
 8022e84:	46c1      	mov	r9, r8
 8022e86:	e7d6      	b.n	8022e36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8022e88:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022e8c:	e798      	b.n	8022dc0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8022e8e:	119a      	asrs	r2, r3, #6
 8022e90:	f109 0801 	add.w	r8, r9, #1
 8022e94:	d108      	bne.n	8022ea8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8022e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022e9a:	9a00      	ldr	r2, [sp, #0]
 8022e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022ea0:	685d      	ldr	r5, [r3, #4]
 8022ea2:	3f01      	subs	r7, #1
 8022ea4:	b2bf      	uxth	r7, r7
 8022ea6:	e7ed      	b.n	8022e84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8022ea8:	2a01      	cmp	r2, #1
 8022eaa:	d125      	bne.n	8022ef8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8022eac:	f003 0103 	and.w	r1, r3, #3
 8022eb0:	1eaa      	subs	r2, r5, #2
 8022eb2:	440a      	add	r2, r1
 8022eb4:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8022eb8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8022ebc:	b2d2      	uxtb	r2, r2
 8022ebe:	3902      	subs	r1, #2
 8022ec0:	3b02      	subs	r3, #2
 8022ec2:	f362 0507 	bfi	r5, r2, #0, #8
 8022ec6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022eca:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8022ece:	f361 250f 	bfi	r5, r1, #8, #8
 8022ed2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8022ed6:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8022eda:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8022ede:	fb10 1103 	smlabb	r1, r0, r3, r1
 8022ee2:	f363 4517 	bfi	r5, r3, #16, #8
 8022ee6:	9b00      	ldr	r3, [sp, #0]
 8022ee8:	fb16 1202 	smlabb	r2, r6, r2, r1
 8022eec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022ef0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8022ef4:	6055      	str	r5, [r2, #4]
 8022ef6:	e7d4      	b.n	8022ea2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8022ef8:	2a02      	cmp	r2, #2
 8022efa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022efe:	d12c      	bne.n	8022f5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8022f00:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022f04:	f1a3 0c20 	sub.w	ip, r3, #32
 8022f08:	f109 0802 	add.w	r8, r9, #2
 8022f0c:	b2d2      	uxtb	r2, r2
 8022f0e:	f002 010f 	and.w	r1, r2, #15
 8022f12:	1112      	asrs	r2, r2, #4
 8022f14:	3908      	subs	r1, #8
 8022f16:	3a08      	subs	r2, #8
 8022f18:	4461      	add	r1, ip
 8022f1a:	4494      	add	ip, r2
 8022f1c:	4429      	add	r1, r5
 8022f1e:	b2c9      	uxtb	r1, r1
 8022f20:	f361 0507 	bfi	r5, r1, #0, #8
 8022f24:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8022f28:	f1ae 0e20 	sub.w	lr, lr, #32
 8022f2c:	4473      	add	r3, lr
 8022f2e:	b2db      	uxtb	r3, r3
 8022f30:	f363 250f 	bfi	r5, r3, #8, #8
 8022f34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022f38:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8022f3c:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8022f40:	fb10 330c 	smlabb	r3, r0, ip, r3
 8022f44:	f36c 4517 	bfi	r5, ip, #16, #8
 8022f48:	fb16 3101 	smlabb	r1, r6, r1, r3
 8022f4c:	9b00      	ldr	r3, [sp, #0]
 8022f4e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8022f52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8022f56:	604d      	str	r5, [r1, #4]
 8022f58:	e7a3      	b.n	8022ea2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8022f5a:	3301      	adds	r3, #1
 8022f5c:	42bb      	cmp	r3, r7
 8022f5e:	dd23      	ble.n	8022fa8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8022f60:	eba3 0907 	sub.w	r9, r3, r7
 8022f64:	f1b9 0f00 	cmp.w	r9, #0
 8022f68:	dc20      	bgt.n	8022fac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8022f6a:	9e02      	ldr	r6, [sp, #8]
 8022f6c:	2700      	movs	r7, #0
 8022f6e:	2e00      	cmp	r6, #0
 8022f70:	f340 8142 	ble.w	80231f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8022f74:	f108 0301 	add.w	r3, r8, #1
 8022f78:	9307      	str	r3, [sp, #28]
 8022f7a:	f898 3000 	ldrb.w	r3, [r8]
 8022f7e:	b2db      	uxtb	r3, r3
 8022f80:	119a      	asrs	r2, r3, #6
 8022f82:	d12a      	bne.n	8022fda <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8022f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022f88:	9a00      	ldr	r2, [sp, #0]
 8022f8a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022f8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022f92:	685d      	ldr	r5, [r3, #4]
 8022f94:	f040 811f 	bne.w	80231d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8022f98:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022f9c:	7025      	strb	r5, [r4, #0]
 8022f9e:	7063      	strb	r3, [r4, #1]
 8022fa0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8022fa4:	70a3      	strb	r3, [r4, #2]
 8022fa6:	e04e      	b.n	8023046 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8022fa8:	1aff      	subs	r7, r7, r3
 8022faa:	e77b      	b.n	8022ea4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8022fac:	9b02      	ldr	r3, [sp, #8]
 8022fae:	4620      	mov	r0, r4
 8022fb0:	462a      	mov	r2, r5
 8022fb2:	454b      	cmp	r3, r9
 8022fb4:	bfa8      	it	ge
 8022fb6:	464b      	movge	r3, r9
 8022fb8:	461f      	mov	r7, r3
 8022fba:	9b02      	ldr	r3, [sp, #8]
 8022fbc:	4639      	mov	r1, r7
 8022fbe:	1bde      	subs	r6, r3, r7
 8022fc0:	eba9 0907 	sub.w	r9, r9, r7
 8022fc4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022fc8:	465b      	mov	r3, fp
 8022fca:	f7de ff21 	bl	8001e10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8022fce:	443c      	add	r4, r7
 8022fd0:	e7cc      	b.n	8022f6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8022fd2:	46c8      	mov	r8, r9
 8022fd4:	9e02      	ldr	r6, [sp, #8]
 8022fd6:	46b9      	mov	r9, r7
 8022fd8:	e7c8      	b.n	8022f6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8022fda:	2a01      	cmp	r2, #1
 8022fdc:	d136      	bne.n	802304c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8022fde:	f003 0103 	and.w	r1, r3, #3
 8022fe2:	1ea8      	subs	r0, r5, #2
 8022fe4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022fe8:	4408      	add	r0, r1
 8022fea:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8022fee:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8022ff2:	b2c0      	uxtb	r0, r0
 8022ff4:	f1a1 0102 	sub.w	r1, r1, #2
 8022ff8:	f1a3 0302 	sub.w	r3, r3, #2
 8022ffc:	f360 0507 	bfi	r5, r0, #0, #8
 8023000:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8023004:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8023008:	f361 250f 	bfi	r5, r1, #8, #8
 802300c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8023010:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8023014:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8023018:	f04f 0303 	mov.w	r3, #3
 802301c:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8023020:	f04f 0c07 	mov.w	ip, #7
 8023024:	9b00      	ldr	r3, [sp, #0]
 8023026:	f368 4517 	bfi	r5, r8, #16, #8
 802302a:	fb1c ec00 	smlabb	ip, ip, r0, lr
 802302e:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8023032:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8023036:	f8cc 5004 	str.w	r5, [ip, #4]
 802303a:	f040 80cd 	bne.w	80231d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 802303e:	7020      	strb	r0, [r4, #0]
 8023040:	7061      	strb	r1, [r4, #1]
 8023042:	f884 8002 	strb.w	r8, [r4, #2]
 8023046:	3e01      	subs	r6, #1
 8023048:	3403      	adds	r4, #3
 802304a:	e0c1      	b.n	80231d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 802304c:	2a02      	cmp	r2, #2
 802304e:	d13d      	bne.n	80230cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8023050:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023058:	f108 0202 	add.w	r2, r8, #2
 802305c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8023060:	b2c9      	uxtb	r1, r1
 8023062:	f1a3 0c20 	sub.w	ip, r3, #32
 8023066:	9207      	str	r2, [sp, #28]
 8023068:	f001 000f 	and.w	r0, r1, #15
 802306c:	f1a0 0008 	sub.w	r0, r0, #8
 8023070:	4460      	add	r0, ip
 8023072:	4428      	add	r0, r5
 8023074:	b2c0      	uxtb	r0, r0
 8023076:	f360 0507 	bfi	r5, r0, #0, #8
 802307a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 802307e:	f1a2 0220 	sub.w	r2, r2, #32
 8023082:	4413      	add	r3, r2
 8023084:	ea4f 1221 	mov.w	r2, r1, asr #4
 8023088:	b2db      	uxtb	r3, r3
 802308a:	f1a2 0208 	sub.w	r2, r2, #8
 802308e:	f363 250f 	bfi	r5, r3, #8, #8
 8023092:	4462      	add	r2, ip
 8023094:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8023098:	f04f 0c03 	mov.w	ip, #3
 802309c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 80230a0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80230a4:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 80230a8:	f04f 0107 	mov.w	r1, #7
 80230ac:	f362 4517 	bfi	r5, r2, #16, #8
 80230b0:	fb11 c100 	smlabb	r1, r1, r0, ip
 80230b4:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 80230b8:	9900      	ldr	r1, [sp, #0]
 80230ba:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80230be:	604d      	str	r5, [r1, #4]
 80230c0:	f040 8089 	bne.w	80231d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 80230c4:	7020      	strb	r0, [r4, #0]
 80230c6:	7063      	strb	r3, [r4, #1]
 80230c8:	70a2      	strb	r2, [r4, #2]
 80230ca:	e7bc      	b.n	8023046 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80230cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80230ce:	d12f      	bne.n	8023130 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 80230d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80230d4:	f108 0304 	add.w	r3, r8, #4
 80230d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80230dc:	f04f 0c03 	mov.w	ip, #3
 80230e0:	f898 1003 	ldrb.w	r1, [r8, #3]
 80230e4:	b2c0      	uxtb	r0, r0
 80230e6:	b2d2      	uxtb	r2, r2
 80230e8:	9307      	str	r3, [sp, #28]
 80230ea:	b2c9      	uxtb	r1, r1
 80230ec:	f360 0507 	bfi	r5, r0, #0, #8
 80230f0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80230f4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80230f8:	f362 250f 	bfi	r5, r2, #8, #8
 80230fc:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8023100:	f04f 0307 	mov.w	r3, #7
 8023104:	f361 4517 	bfi	r5, r1, #16, #8
 8023108:	fb13 c300 	smlabb	r3, r3, r0, ip
 802310c:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8023110:	9b00      	ldr	r3, [sp, #0]
 8023112:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8023116:	605d      	str	r5, [r3, #4]
 8023118:	d15d      	bne.n	80231d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 802311a:	7020      	strb	r0, [r4, #0]
 802311c:	7062      	strb	r2, [r4, #1]
 802311e:	70a1      	strb	r1, [r4, #2]
 8023120:	e791      	b.n	8023046 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8023122:	bf00      	nop
 8023124:	24015dd4 	.word	0x24015dd4
 8023128:	24015dce 	.word	0x24015dce
 802312c:	24000120 	.word	0x24000120
 8023130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023134:	1c5a      	adds	r2, r3, #1
 8023136:	b94b      	cbnz	r3, 802314c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8023138:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802313c:	d14c      	bne.n	80231d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 802313e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8023142:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8023146:	7025      	strb	r5, [r4, #0]
 8023148:	7062      	strb	r2, [r4, #1]
 802314a:	e72b      	b.n	8022fa4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 802314c:	4296      	cmp	r6, r2
 802314e:	46b0      	mov	r8, r6
 8023150:	bfa8      	it	ge
 8023152:	4690      	movge	r8, r2
 8023154:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023158:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802315c:	eba6 0608 	sub.w	r6, r6, r8
 8023160:	eba2 0908 	sub.w	r9, r2, r8
 8023164:	9308      	str	r3, [sp, #32]
 8023166:	b2eb      	uxtb	r3, r5
 8023168:	930c      	str	r3, [sp, #48]	@ 0x30
 802316a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802316e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023170:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8023174:	930a      	str	r3, [sp, #40]	@ 0x28
 8023176:	9b08      	ldr	r3, [sp, #32]
 8023178:	d030      	beq.n	80231dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 802317a:	18fb      	adds	r3, r7, r3
 802317c:	2bc0      	cmp	r3, #192	@ 0xc0
 802317e:	dd15      	ble.n	80231ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8023180:	4650      	mov	r0, sl
 8023182:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8023186:	f7de fe29 	bl	8001ddc <_ZN8touchgfx5paint9flushLineEPmi>
 802318a:	2203      	movs	r2, #3
 802318c:	4651      	mov	r1, sl
 802318e:	465b      	mov	r3, fp
 8023190:	4620      	mov	r0, r4
 8023192:	443c      	add	r4, r7
 8023194:	fb97 f2f2 	sdiv	r2, r7, r2
 8023198:	f7de fe64 	bl	8001e64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 802319c:	4b3d      	ldr	r3, [pc, #244]	@ (8023294 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 802319e:	2700      	movs	r7, #0
 80231a0:	459a      	cmp	sl, r3
 80231a2:	bf0c      	ite	eq
 80231a4:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 80232a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 80231a8:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8023294 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 80231ac:	eb0a 0307 	add.w	r3, sl, r7
 80231b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231b2:	f1b8 0801 	subs.w	r8, r8, #1
 80231b6:	f103 0303 	add.w	r3, r3, #3
 80231ba:	f803 2c03 	strb.w	r2, [r3, #-3]
 80231be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80231c0:	f803 2c02 	strb.w	r2, [r3, #-2]
 80231c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231c6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80231ca:	d1f1      	bne.n	80231b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 80231cc:	9b08      	ldr	r3, [sp, #32]
 80231ce:	441f      	add	r7, r3
 80231d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80231d4:	e6cb      	b.n	8022f6e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 80231d6:	2201      	movs	r2, #1
 80231d8:	4690      	mov	r8, r2
 80231da:	e7bb      	b.n	8023154 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 80231dc:	4423      	add	r3, r4
 80231de:	42a3      	cmp	r3, r4
 80231e0:	d9f6      	bls.n	80231d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 80231e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231e4:	3403      	adds	r4, #3
 80231e6:	f804 2c03 	strb.w	r2, [r4, #-3]
 80231ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80231ec:	f804 2c02 	strb.w	r2, [r4, #-2]
 80231f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231f2:	f804 2c01 	strb.w	r2, [r4, #-1]
 80231f6:	e7f2      	b.n	80231de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 80231f8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80231fc:	d00e      	beq.n	802321c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 80231fe:	b16f      	cbz	r7, 802321c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8023200:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8023204:	4650      	mov	r0, sl
 8023206:	f7de fde9 	bl	8001ddc <_ZN8touchgfx5paint9flushLineEPmi>
 802320a:	2203      	movs	r2, #3
 802320c:	4620      	mov	r0, r4
 802320e:	443c      	add	r4, r7
 8023210:	465b      	mov	r3, fp
 8023212:	4651      	mov	r1, sl
 8023214:	fb97 f2f2 	sdiv	r2, r7, r2
 8023218:	f7de fe24 	bl	8001e64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 802321c:	4b1e      	ldr	r3, [pc, #120]	@ (8023298 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 802321e:	9a02      	ldr	r2, [sp, #8]
 8023220:	881b      	ldrh	r3, [r3, #0]
 8023222:	1a9b      	subs	r3, r3, r2
 8023224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023228:	441c      	add	r4, r3
 802322a:	9b04      	ldr	r3, [sp, #16]
 802322c:	3301      	adds	r3, #1
 802322e:	9304      	str	r3, [sp, #16]
 8023230:	9a04      	ldr	r2, [sp, #16]
 8023232:	9b01      	ldr	r3, [sp, #4]
 8023234:	4293      	cmp	r3, r2
 8023236:	d11c      	bne.n	8023272 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8023238:	9b03      	ldr	r3, [sp, #12]
 802323a:	2500      	movs	r5, #0
 802323c:	9a03      	ldr	r2, [sp, #12]
 802323e:	1c5e      	adds	r6, r3, #1
 8023240:	9b05      	ldr	r3, [sp, #20]
 8023242:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8023246:	4629      	mov	r1, r5
 8023248:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 802324c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023250:	9b06      	ldr	r3, [sp, #24]
 8023252:	fa98 f888 	rev.w	r8, r8
 8023256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023258:	4498      	add	r8, r3
 802325a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802325e:	1aff      	subs	r7, r7, r3
 8023260:	f007 ff72 	bl	802b148 <memset>
 8023264:	b2bf      	uxth	r7, r7
 8023266:	e9cd 6503 	strd	r6, r5, [sp, #12]
 802326a:	f7de fdad 	bl	8001dc8 <_ZN8touchgfx5paint8tearDownEv>
 802326e:	46c1      	mov	r9, r8
 8023270:	e5db      	b.n	8022e2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8023272:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8023276:	9b02      	ldr	r3, [sp, #8]
 8023278:	1aff      	subs	r7, r7, r3
 802327a:	eba7 0709 	sub.w	r7, r7, r9
 802327e:	b2bf      	uxth	r7, r7
 8023280:	e7f3      	b.n	802326a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8023282:	4b06      	ldr	r3, [pc, #24]	@ (802329c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8023284:	6818      	ldr	r0, [r3, #0]
 8023286:	6803      	ldr	r3, [r0, #0]
 8023288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802328a:	4798      	blx	r3
 802328c:	b013      	add	sp, #76	@ 0x4c
 802328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023292:	bf00      	nop
 8023294:	24000120 	.word	0x24000120
 8023298:	24015dce 	.word	0x24015dce
 802329c:	24015dd4 	.word	0x24015dd4
 80232a0:	24000220 	.word	0x24000220

080232a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80232a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232a8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80232ac:	9c06      	ldr	r4, [sp, #24]
 80232ae:	2800      	cmp	r0, #0
 80232b0:	d06e      	beq.n	8023390 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80232b2:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80232b6:	2d00      	cmp	r5, #0
 80232b8:	dd6a      	ble.n	8023390 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80232ba:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80232be:	f1bc 0f00 	cmp.w	ip, #0
 80232c2:	dd65      	ble.n	8023390 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80232c4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80232c8:	28ff      	cmp	r0, #255	@ 0xff
 80232ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80232ce:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80232d2:	fb02 3306 	mla	r3, r2, r6, r3
 80232d6:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80232da:	b2e4      	uxtb	r4, r4
 80232dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80232e0:	4419      	add	r1, r3
 80232e2:	fb02 f30c 	mul.w	r3, r2, ip
 80232e6:	eba2 0205 	sub.w	r2, r2, r5
 80232ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80232ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80232f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80232f6:	440b      	add	r3, r1
 80232f8:	d03e      	beq.n	8023378 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80232fa:	fa1f fc80 	uxth.w	ip, r0
 80232fe:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8023302:	fb06 f60c 	mul.w	r6, r6, ip
 8023306:	b280      	uxth	r0, r0
 8023308:	fb07 f70c 	mul.w	r7, r7, ip
 802330c:	fb04 f40c 	mul.w	r4, r4, ip
 8023310:	4299      	cmp	r1, r3
 8023312:	d23d      	bcs.n	8023390 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8023314:	eb01 0c05 	add.w	ip, r1, r5
 8023318:	458c      	cmp	ip, r1
 802331a:	f101 0e03 	add.w	lr, r1, #3
 802331e:	d928      	bls.n	8023372 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8023320:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023324:	fb11 f100 	smulbb	r1, r1, r0
 8023328:	4421      	add	r1, r4
 802332a:	b289      	uxth	r1, r1
 802332c:	f101 0801 	add.w	r8, r1, #1
 8023330:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023334:	1209      	asrs	r1, r1, #8
 8023336:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802333a:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 802333e:	fb11 f100 	smulbb	r1, r1, r0
 8023342:	4439      	add	r1, r7
 8023344:	b289      	uxth	r1, r1
 8023346:	f101 0801 	add.w	r8, r1, #1
 802334a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802334e:	1209      	asrs	r1, r1, #8
 8023350:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023354:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023358:	fb11 f100 	smulbb	r1, r1, r0
 802335c:	4431      	add	r1, r6
 802335e:	b289      	uxth	r1, r1
 8023360:	f101 0801 	add.w	r8, r1, #1
 8023364:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023368:	1209      	asrs	r1, r1, #8
 802336a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 802336e:	4671      	mov	r1, lr
 8023370:	e7d2      	b.n	8023318 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8023372:	4411      	add	r1, r2
 8023374:	e7cc      	b.n	8023310 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8023376:	4411      	add	r1, r2
 8023378:	4299      	cmp	r1, r3
 802337a:	d209      	bcs.n	8023390 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802337c:	1948      	adds	r0, r1, r5
 802337e:	4281      	cmp	r1, r0
 8023380:	d2f9      	bcs.n	8023376 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8023382:	700c      	strb	r4, [r1, #0]
 8023384:	3103      	adds	r1, #3
 8023386:	f801 7c02 	strb.w	r7, [r1, #-2]
 802338a:	f801 6c01 	strb.w	r6, [r1, #-1]
 802338e:	e7f6      	b.n	802337e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8023390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023394 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8023394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023398:	b093      	sub	sp, #76	@ 0x4c
 802339a:	4699      	mov	r9, r3
 802339c:	4617      	mov	r7, r2
 802339e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80233a2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 80233a6:	4604      	mov	r4, r0
 80233a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80233ac:	a80c      	add	r0, sp, #48	@ 0x30
 80233ae:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 80233b2:	460d      	mov	r5, r1
 80233b4:	4649      	mov	r1, r9
 80233b6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80233ba:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80233be:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 80233c2:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 80233c6:	f7f4 fec3 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 80233ca:	4639      	mov	r1, r7
 80233cc:	a80c      	add	r0, sp, #48	@ 0x30
 80233ce:	f7f4 febf 	bl	8018150 <_ZN8touchgfx4RectaNERKS0_>
 80233d2:	4b78      	ldr	r3, [pc, #480]	@ (80235b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80233d4:	8818      	ldrh	r0, [r3, #0]
 80233d6:	4b78      	ldr	r3, [pc, #480]	@ (80235b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 80233d8:	b202      	sxth	r2, r0
 80233da:	8819      	ldrh	r1, [r3, #0]
 80233dc:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80233e0:	b20f      	sxth	r7, r1
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	da07      	bge.n	80233f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 80233e6:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 80233ea:	4463      	add	r3, ip
 80233ec:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80233f0:	2300      	movs	r3, #0
 80233f2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80233f6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80233fa:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 80233fe:	1ad2      	subs	r2, r2, r3
 8023400:	4594      	cmp	ip, r2
 8023402:	bfc4      	itt	gt
 8023404:	1ac2      	subgt	r2, r0, r3
 8023406:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 802340a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802340e:	2a00      	cmp	r2, #0
 8023410:	da07      	bge.n	8023422 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8023412:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8023416:	4462      	add	r2, ip
 8023418:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 802341c:	2200      	movs	r2, #0
 802341e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8023422:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8023426:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 802342a:	1abf      	subs	r7, r7, r2
 802342c:	45bc      	cmp	ip, r7
 802342e:	f8df c190 	ldr.w	ip, [pc, #400]	@ 80235c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8023432:	bfc8      	it	gt
 8023434:	1a8f      	subgt	r7, r1, r2
 8023436:	f89c c000 	ldrb.w	ip, [ip]
 802343a:	bfc8      	it	gt
 802343c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8023440:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8023444:	f1bc 0f00 	cmp.w	ip, #0
 8023448:	d176      	bne.n	8023538 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 802344a:	4287      	cmp	r7, r0
 802344c:	bf14      	ite	ne
 802344e:	2100      	movne	r1, #0
 8023450:	2101      	moveq	r1, #1
 8023452:	2f00      	cmp	r7, #0
 8023454:	9107      	str	r1, [sp, #28]
 8023456:	dd73      	ble.n	8023540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8023458:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 802345c:	2900      	cmp	r1, #0
 802345e:	9104      	str	r1, [sp, #16]
 8023460:	dd6e      	ble.n	8023540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8023462:	f8b9 1000 	ldrh.w	r1, [r9]
 8023466:	a80e      	add	r0, sp, #56	@ 0x38
 8023468:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 802346c:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8023470:	1a5b      	subs	r3, r3, r1
 8023472:	a910      	add	r1, sp, #64	@ 0x40
 8023474:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8023478:	b21b      	sxth	r3, r3
 802347a:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 802347e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 80235c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8023482:	9305      	str	r3, [sp, #20]
 8023484:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8023488:	1ad2      	subs	r2, r2, r3
 802348a:	b213      	sxth	r3, r2
 802348c:	9306      	str	r3, [sp, #24]
 802348e:	9b05      	ldr	r3, [sp, #20]
 8023490:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8023494:	9b06      	ldr	r3, [sp, #24]
 8023496:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802349a:	9b04      	ldr	r3, [sp, #16]
 802349c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80234a0:	2300      	movs	r3, #0
 80234a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80234a4:	f7f9 f86a 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80234a8:	4640      	mov	r0, r8
 80234aa:	f7f9 f83f 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80234ae:	a810      	add	r0, sp, #64	@ 0x40
 80234b0:	f7f9 f83c 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80234b4:	4b41      	ldr	r3, [pc, #260]	@ (80235bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80234b6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80234ba:	4628      	mov	r0, r5
 80234bc:	881b      	ldrh	r3, [r3, #0]
 80234be:	9308      	str	r3, [sp, #32]
 80234c0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80234c4:	b21b      	sxth	r3, r3
 80234c6:	9303      	str	r3, [sp, #12]
 80234c8:	682b      	ldr	r3, [r5, #0]
 80234ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234cc:	4798      	blx	r3
 80234ce:	9a03      	ldr	r2, [sp, #12]
 80234d0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80234d4:	4681      	mov	r9, r0
 80234d6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80234da:	fb13 f302 	smulbb	r3, r3, r2
 80234de:	2203      	movs	r2, #3
 80234e0:	f8da 0000 	ldr.w	r0, [sl]
 80234e4:	fb15 3302 	smlabb	r3, r5, r2, r3
 80234e8:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80234ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80234ec:	441d      	add	r5, r3
 80234ee:	6803      	ldr	r3, [r0, #0]
 80234f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234f2:	4798      	blx	r3
 80234f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80234f6:	f8da 0000 	ldr.w	r0, [sl]
 80234fa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80234fe:	6803      	ldr	r3, [r0, #0]
 8023500:	910a      	str	r1, [sp, #40]	@ 0x28
 8023502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023504:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8023508:	4798      	blx	r3
 802350a:	f010 0f01 	tst.w	r0, #1
 802350e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8023512:	d01e      	beq.n	8023552 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8023514:	f8da 0000 	ldr.w	r0, [sl]
 8023518:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802351c:	6803      	ldr	r3, [r0, #0]
 802351e:	9200      	str	r2, [sp, #0]
 8023520:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8023522:	462b      	mov	r3, r5
 8023524:	e898 0006 	ldmia.w	r8, {r1, r2}
 8023528:	47b0      	blx	r6
 802352a:	9b05      	ldr	r3, [sp, #20]
 802352c:	80a7      	strh	r7, [r4, #4]
 802352e:	8023      	strh	r3, [r4, #0]
 8023530:	9b06      	ldr	r3, [sp, #24]
 8023532:	8063      	strh	r3, [r4, #2]
 8023534:	9b04      	ldr	r3, [sp, #16]
 8023536:	e007      	b.n	8023548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8023538:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 802353c:	4288      	cmp	r0, r1
 802353e:	e785      	b.n	802344c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8023540:	2300      	movs	r3, #0
 8023542:	8023      	strh	r3, [r4, #0]
 8023544:	8063      	strh	r3, [r4, #2]
 8023546:	80a3      	strh	r3, [r4, #4]
 8023548:	4620      	mov	r0, r4
 802354a:	80e3      	strh	r3, [r4, #6]
 802354c:	b013      	add	sp, #76	@ 0x4c
 802354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023552:	fb09 f606 	mul.w	r6, r9, r6
 8023556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023558:	fb11 6602 	smlabb	r6, r1, r2, r6
 802355c:	9a07      	ldr	r2, [sp, #28]
 802355e:	4433      	add	r3, r6
 8023560:	461e      	mov	r6, r3
 8023562:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8023566:	b16a      	cbz	r2, 8023584 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8023568:	9a08      	ldr	r2, [sp, #32]
 802356a:	4593      	cmp	fp, r2
 802356c:	d10a      	bne.n	8023584 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 802356e:	f8da 0000 	ldr.w	r0, [sl]
 8023572:	fb09 f303 	mul.w	r3, r9, r3
 8023576:	4629      	mov	r1, r5
 8023578:	6802      	ldr	r2, [r0, #0]
 802357a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 802357e:	4632      	mov	r2, r6
 8023580:	47d0      	blx	sl
 8023582:	e7d2      	b.n	802352a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8023584:	9a03      	ldr	r2, [sp, #12]
 8023586:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80235c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802358a:	fb02 5803 	mla	r8, r2, r3, r5
 802358e:	4545      	cmp	r5, r8
 8023590:	d2cb      	bcs.n	802352a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8023592:	f8db 0000 	ldr.w	r0, [fp]
 8023596:	4629      	mov	r1, r5
 8023598:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802359c:	6802      	ldr	r2, [r0, #0]
 802359e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235a2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80235a6:	4632      	mov	r2, r6
 80235a8:	47d0      	blx	sl
 80235aa:	9b03      	ldr	r3, [sp, #12]
 80235ac:	444e      	add	r6, r9
 80235ae:	441d      	add	r5, r3
 80235b0:	e7ed      	b.n	802358e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80235b2:	bf00      	nop
 80235b4:	24015dc8 	.word	0x24015dc8
 80235b8:	24015dca 	.word	0x24015dca
 80235bc:	24015dce 	.word	0x24015dce
 80235c0:	24015dcc 	.word	0x24015dcc
 80235c4:	24015dd4 	.word	0x24015dd4

080235c8 <_ZN8touchgfx8LCD24bppC1Ev>:
 80235c8:	2200      	movs	r2, #0
 80235ca:	490e      	ldr	r1, [pc, #56]	@ (8023604 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 80235cc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80235d0:	6001      	str	r1, [r0, #0]
 80235d2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80235d6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80235da:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80235de:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 80235e2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80235e6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 80235ea:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80235ee:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80235f2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 80235f6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80235fa:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80235fe:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8023602:	4770      	bx	lr
 8023604:	08030bcc 	.word	0x08030bcc

08023608 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802360c:	b091      	sub	sp, #68	@ 0x44
 802360e:	4607      	mov	r7, r0
 8023610:	4688      	mov	r8, r1
 8023612:	6810      	ldr	r0, [r2, #0]
 8023614:	6851      	ldr	r1, [r2, #4]
 8023616:	ac0c      	add	r4, sp, #48	@ 0x30
 8023618:	4616      	mov	r6, r2
 802361a:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 802361e:	4d64      	ldr	r5, [pc, #400]	@ (80237b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8023620:	f8df a190 	ldr.w	sl, [pc, #400]	@ 80237b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8023624:	c403      	stmia	r4!, {r0, r1}
 8023626:	6818      	ldr	r0, [r3, #0]
 8023628:	ac0e      	add	r4, sp, #56	@ 0x38
 802362a:	6859      	ldr	r1, [r3, #4]
 802362c:	c403      	stmia	r4!, {r0, r1}
 802362e:	a80c      	add	r0, sp, #48	@ 0x30
 8023630:	f7f8 ff7c 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023634:	4631      	mov	r1, r6
 8023636:	a80e      	add	r0, sp, #56	@ 0x38
 8023638:	f7f8 ffa0 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802363c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8023640:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023644:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8023648:	6828      	ldr	r0, [r5, #0]
 802364a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802364e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8023652:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8023656:	440f      	add	r7, r1
 8023658:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802365c:	440a      	add	r2, r1
 802365e:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8023662:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8023666:	4413      	add	r3, r2
 8023668:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802366c:	6803      	ldr	r3, [r0, #0]
 802366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023670:	4798      	blx	r3
 8023672:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8023676:	6828      	ldr	r0, [r5, #0]
 8023678:	d01f      	beq.n	80236ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 802367a:	2201      	movs	r2, #1
 802367c:	2500      	movs	r5, #0
 802367e:	6801      	ldr	r1, [r0, #0]
 8023680:	b2a4      	uxth	r4, r4
 8023682:	b2b6      	uxth	r6, r6
 8023684:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8023688:	e9cd 2508 	strd	r2, r5, [sp, #32]
 802368c:	250b      	movs	r5, #11
 802368e:	9507      	str	r5, [sp, #28]
 8023690:	f8ba 5000 	ldrh.w	r5, [sl]
 8023694:	f8cd 9010 	str.w	r9, [sp, #16]
 8023698:	9602      	str	r6, [sp, #8]
 802369a:	9401      	str	r4, [sp, #4]
 802369c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80236a0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80236a4:	9203      	str	r2, [sp, #12]
 80236a6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80236aa:	9200      	str	r2, [sp, #0]
 80236ac:	4642      	mov	r2, r8
 80236ae:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80236b0:	4639      	mov	r1, r7
 80236b2:	47a0      	blx	r4
 80236b4:	b011      	add	sp, #68	@ 0x44
 80236b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236ba:	6803      	ldr	r3, [r0, #0]
 80236bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80236be:	4798      	blx	r3
 80236c0:	f8ba 5000 	ldrh.w	r5, [sl]
 80236c4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80236c8:	f04f 0e04 	mov.w	lr, #4
 80236cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80236d0:	436e      	muls	r6, r5
 80236d2:	fb05 2303 	mla	r3, r5, r3, r2
 80236d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80236da:	1b2d      	subs	r5, r5, r4
 80236dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80236e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80236e4:	4418      	add	r0, r3
 80236e6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80236ea:	1982      	adds	r2, r0, r6
 80236ec:	1b1b      	subs	r3, r3, r4
 80236ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80236f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80236f4:	4290      	cmp	r0, r2
 80236f6:	d254      	bcs.n	80237a2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80236f8:	eb00 0a04 	add.w	sl, r0, r4
 80236fc:	4550      	cmp	r0, sl
 80236fe:	d24c      	bcs.n	802379a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8023700:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023704:	fb1e e101 	smlabb	r1, lr, r1, lr
 8023708:	eb08 0c01 	add.w	ip, r8, r1
 802370c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8023710:	b173      	cbz	r3, 8023730 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8023712:	2bff      	cmp	r3, #255	@ 0xff
 8023714:	f818 b001 	ldrb.w	fp, [r8, r1]
 8023718:	d10c      	bne.n	8023734 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802371a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802371e:	d109      	bne.n	8023734 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8023720:	f880 b000 	strb.w	fp, [r0]
 8023724:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023728:	7043      	strb	r3, [r0, #1]
 802372a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802372e:	7083      	strb	r3, [r0, #2]
 8023730:	3003      	adds	r0, #3
 8023732:	e7e3      	b.n	80236fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8023734:	fb09 f103 	mul.w	r1, r9, r3
 8023738:	1c4b      	adds	r3, r1, #1
 802373a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802373e:	7801      	ldrb	r1, [r0, #0]
 8023740:	121b      	asrs	r3, r3, #8
 8023742:	b29e      	uxth	r6, r3
 8023744:	43db      	mvns	r3, r3
 8023746:	fb1b fb06 	smulbb	fp, fp, r6
 802374a:	b2db      	uxtb	r3, r3
 802374c:	fb01 b103 	mla	r1, r1, r3, fp
 8023750:	b289      	uxth	r1, r1
 8023752:	f101 0b01 	add.w	fp, r1, #1
 8023756:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802375a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802375e:	fb1b fb03 	smulbb	fp, fp, r3
 8023762:	1209      	asrs	r1, r1, #8
 8023764:	7001      	strb	r1, [r0, #0]
 8023766:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802376a:	fb01 b106 	mla	r1, r1, r6, fp
 802376e:	b289      	uxth	r1, r1
 8023770:	f101 0b01 	add.w	fp, r1, #1
 8023774:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023778:	1209      	asrs	r1, r1, #8
 802377a:	7041      	strb	r1, [r0, #1]
 802377c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8023780:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023784:	fb1c f303 	smulbb	r3, ip, r3
 8023788:	fb01 3606 	mla	r6, r1, r6, r3
 802378c:	b2b6      	uxth	r6, r6
 802378e:	1c73      	adds	r3, r6, #1
 8023790:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023794:	1236      	asrs	r6, r6, #8
 8023796:	7086      	strb	r6, [r0, #2]
 8023798:	e7ca      	b.n	8023730 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802379a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802379c:	4428      	add	r0, r5
 802379e:	441f      	add	r7, r3
 80237a0:	e7a8      	b.n	80236f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80237a2:	4b03      	ldr	r3, [pc, #12]	@ (80237b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80237a4:	6818      	ldr	r0, [r3, #0]
 80237a6:	6803      	ldr	r3, [r0, #0]
 80237a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80237aa:	4798      	blx	r3
 80237ac:	e782      	b.n	80236b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80237ae:	bf00      	nop
 80237b0:	24015dd4 	.word	0x24015dd4
 80237b4:	24015dce 	.word	0x24015dce

080237b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80237b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237bc:	b091      	sub	sp, #68	@ 0x44
 80237be:	4680      	mov	r8, r0
 80237c0:	460e      	mov	r6, r1
 80237c2:	6810      	ldr	r0, [r2, #0]
 80237c4:	6851      	ldr	r1, [r2, #4]
 80237c6:	ad0c      	add	r5, sp, #48	@ 0x30
 80237c8:	4614      	mov	r4, r2
 80237ca:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80237ce:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8023968 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80237d2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 802396c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80237d6:	c503      	stmia	r5!, {r0, r1}
 80237d8:	6818      	ldr	r0, [r3, #0]
 80237da:	ad0e      	add	r5, sp, #56	@ 0x38
 80237dc:	6859      	ldr	r1, [r3, #4]
 80237de:	c503      	stmia	r5!, {r0, r1}
 80237e0:	a80c      	add	r0, sp, #48	@ 0x30
 80237e2:	f7f8 fea3 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80237e6:	4621      	mov	r1, r4
 80237e8:	a80e      	add	r0, sp, #56	@ 0x38
 80237ea:	f7f8 fec7 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80237ee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80237f2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80237f6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80237fa:	f8d9 0000 	ldr.w	r0, [r9]
 80237fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023802:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8023806:	eb08 0401 	add.w	r4, r8, r1
 802380a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802380e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8023812:	440a      	add	r2, r1
 8023814:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8023818:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802381c:	4413      	add	r3, r2
 802381e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8023822:	6803      	ldr	r3, [r0, #0]
 8023824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023826:	4798      	blx	r3
 8023828:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802382c:	f8d9 0000 	ldr.w	r0, [r9]
 8023830:	d022      	beq.n	8023878 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8023832:	2200      	movs	r2, #0
 8023834:	f04f 0c01 	mov.w	ip, #1
 8023838:	6801      	ldr	r1, [r0, #0]
 802383a:	b2ad      	uxth	r5, r5
 802383c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8023840:	e9cd c208 	strd	ip, r2, [sp, #32]
 8023844:	f04f 0c0b 	mov.w	ip, #11
 8023848:	f8cd c01c 	str.w	ip, [sp, #28]
 802384c:	f8ba c000 	ldrh.w	ip, [sl]
 8023850:	9704      	str	r7, [sp, #16]
 8023852:	9502      	str	r5, [sp, #8]
 8023854:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8023858:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802385c:	9203      	str	r2, [sp, #12]
 802385e:	fa1f f288 	uxth.w	r2, r8
 8023862:	9201      	str	r2, [sp, #4]
 8023864:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8023868:	9200      	str	r2, [sp, #0]
 802386a:	4632      	mov	r2, r6
 802386c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 802386e:	4621      	mov	r1, r4
 8023870:	47a8      	blx	r5
 8023872:	b011      	add	sp, #68	@ 0x44
 8023874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023878:	6803      	ldr	r3, [r0, #0]
 802387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802387c:	4798      	blx	r3
 802387e:	f8ba 2000 	ldrh.w	r2, [sl]
 8023882:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023886:	f04f 0e03 	mov.w	lr, #3
 802388a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 802388e:	4355      	muls	r5, r2
 8023890:	fa1f fc87 	uxth.w	ip, r7
 8023894:	fb02 1303 	mla	r3, r2, r3, r1
 8023898:	eba2 0208 	sub.w	r2, r2, r8
 802389c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80238a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238a8:	4418      	add	r0, r3
 80238aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80238ac:	1943      	adds	r3, r0, r5
 80238ae:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80238b2:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 80238b6:	eba2 0208 	sub.w	r2, r2, r8
 80238ba:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80238be:	b2ad      	uxth	r5, r5
 80238c0:	4298      	cmp	r0, r3
 80238c2:	d24a      	bcs.n	802395a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80238c4:	eb00 0908 	add.w	r9, r0, r8
 80238c8:	4621      	mov	r1, r4
 80238ca:	4548      	cmp	r0, r9
 80238cc:	460c      	mov	r4, r1
 80238ce:	d240      	bcs.n	8023952 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80238d0:	f04f 0a04 	mov.w	sl, #4
 80238d4:	7824      	ldrb	r4, [r4, #0]
 80238d6:	2fff      	cmp	r7, #255	@ 0xff
 80238d8:	f101 0101 	add.w	r1, r1, #1
 80238dc:	fb1e a404 	smlabb	r4, lr, r4, sl
 80238e0:	eb06 0a04 	add.w	sl, r6, r4
 80238e4:	f816 b004 	ldrb.w	fp, [r6, r4]
 80238e8:	d02b      	beq.n	8023942 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80238ea:	7804      	ldrb	r4, [r0, #0]
 80238ec:	fb14 f405 	smulbb	r4, r4, r5
 80238f0:	fb0b 440c 	mla	r4, fp, ip, r4
 80238f4:	b2a4      	uxth	r4, r4
 80238f6:	f104 0b01 	add.w	fp, r4, #1
 80238fa:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80238fe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023902:	fb1b fb05 	smulbb	fp, fp, r5
 8023906:	1224      	asrs	r4, r4, #8
 8023908:	7004      	strb	r4, [r0, #0]
 802390a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802390e:	fb04 b40c 	mla	r4, r4, ip, fp
 8023912:	b2a4      	uxth	r4, r4
 8023914:	f104 0b01 	add.w	fp, r4, #1
 8023918:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 802391c:	1224      	asrs	r4, r4, #8
 802391e:	7044      	strb	r4, [r0, #1]
 8023920:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8023924:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023928:	fb1a fa05 	smulbb	sl, sl, r5
 802392c:	fb04 a40c 	mla	r4, r4, ip, sl
 8023930:	b2a4      	uxth	r4, r4
 8023932:	f104 0a01 	add.w	sl, r4, #1
 8023936:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802393a:	1224      	asrs	r4, r4, #8
 802393c:	7084      	strb	r4, [r0, #2]
 802393e:	3003      	adds	r0, #3
 8023940:	e7c3      	b.n	80238ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8023942:	f880 b000 	strb.w	fp, [r0]
 8023946:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802394a:	7044      	strb	r4, [r0, #1]
 802394c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8023950:	e7f4      	b.n	802393c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8023952:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023954:	4420      	add	r0, r4
 8023956:	188c      	adds	r4, r1, r2
 8023958:	e7b2      	b.n	80238c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 802395a:	4b03      	ldr	r3, [pc, #12]	@ (8023968 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802395c:	6818      	ldr	r0, [r3, #0]
 802395e:	6803      	ldr	r3, [r0, #0]
 8023960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023962:	4798      	blx	r3
 8023964:	e785      	b.n	8023872 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8023966:	bf00      	nop
 8023968:	24015dd4 	.word	0x24015dd4
 802396c:	24015dce 	.word	0x24015dce

08023970 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023970:	b4f0      	push	{r4, r5, r6, r7}
 8023972:	460c      	mov	r4, r1
 8023974:	4611      	mov	r1, r2
 8023976:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802397a:	461a      	mov	r2, r3
 802397c:	780f      	ldrb	r7, [r1, #0]
 802397e:	9b04      	ldr	r3, [sp, #16]
 8023980:	784e      	ldrb	r6, [r1, #1]
 8023982:	b11f      	cbz	r7, 802398c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8023984:	2f01      	cmp	r7, #1
 8023986:	d01d      	beq.n	80239c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8023988:	bcf0      	pop	{r4, r5, r6, r7}
 802398a:	4770      	bx	lr
 802398c:	2e03      	cmp	r6, #3
 802398e:	d8fb      	bhi.n	8023988 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8023990:	e8df f006 	tbb	[pc, r6]
 8023994:	16140702 	.word	0x16140702
 8023998:	9504      	str	r5, [sp, #16]
 802399a:	4620      	mov	r0, r4
 802399c:	bcf0      	pop	{r4, r5, r6, r7}
 802399e:	f7ff be33 	b.w	8023608 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80239a2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80239a4:	2800      	cmp	r0, #0
 80239a6:	d0ef      	beq.n	8023988 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80239a8:	6806      	ldr	r6, [r0, #0]
 80239aa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80239ae:	68f5      	ldr	r5, [r6, #12]
 80239b0:	4613      	mov	r3, r2
 80239b2:	46ac      	mov	ip, r5
 80239b4:	460a      	mov	r2, r1
 80239b6:	4621      	mov	r1, r4
 80239b8:	bcf0      	pop	{r4, r5, r6, r7}
 80239ba:	4760      	bx	ip
 80239bc:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80239be:	e7f1      	b.n	80239a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80239c0:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80239c2:	e7ef      	b.n	80239a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80239c4:	2e03      	cmp	r6, #3
 80239c6:	d8df      	bhi.n	8023988 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80239c8:	e8df f006 	tbb	[pc, r6]
 80239cc:	110f0702 	.word	0x110f0702
 80239d0:	9504      	str	r5, [sp, #16]
 80239d2:	4620      	mov	r0, r4
 80239d4:	bcf0      	pop	{r4, r5, r6, r7}
 80239d6:	f7ff beef 	b.w	80237b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80239da:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80239dc:	2800      	cmp	r0, #0
 80239de:	d0d3      	beq.n	8023988 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80239e0:	6806      	ldr	r6, [r0, #0]
 80239e2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80239e6:	68b5      	ldr	r5, [r6, #8]
 80239e8:	e7e2      	b.n	80239b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80239ea:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80239ec:	e7f6      	b.n	80239dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80239ee:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80239f0:	e7f4      	b.n	80239dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

080239f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80239f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80239f8:	4605      	mov	r5, r0
 80239fa:	b08f      	sub	sp, #60	@ 0x3c
 80239fc:	460c      	mov	r4, r1
 80239fe:	461f      	mov	r7, r3
 8023a00:	2b00      	cmp	r3, #0
 8023a02:	d052      	beq.n	8023aaa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023a04:	6808      	ldr	r0, [r1, #0]
 8023a06:	ab0a      	add	r3, sp, #40	@ 0x28
 8023a08:	6849      	ldr	r1, [r1, #4]
 8023a0a:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8023bd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8023a0e:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8023bd8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8023a12:	c303      	stmia	r3!, {r0, r1}
 8023a14:	6810      	ldr	r0, [r2, #0]
 8023a16:	ab0c      	add	r3, sp, #48	@ 0x30
 8023a18:	6851      	ldr	r1, [r2, #4]
 8023a1a:	c303      	stmia	r3!, {r0, r1}
 8023a1c:	a80a      	add	r0, sp, #40	@ 0x28
 8023a1e:	f7f8 fd85 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a22:	4621      	mov	r1, r4
 8023a24:	a80c      	add	r0, sp, #48	@ 0x30
 8023a26:	f7f8 fda9 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023a2a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023a2e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8023a32:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023a36:	f8d8 0000 	ldr.w	r0, [r8]
 8023a3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023a3e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8023a42:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8023a46:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8023a4a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8023a4e:	440a      	add	r2, r1
 8023a50:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023a54:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8023a58:	4413      	add	r3, r2
 8023a5a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023a5e:	6803      	ldr	r3, [r0, #0]
 8023a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023a62:	4798      	blx	r3
 8023a64:	2fff      	cmp	r7, #255	@ 0xff
 8023a66:	d023      	beq.n	8023ab0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8023a68:	f010 0f04 	tst.w	r0, #4
 8023a6c:	f8d8 0000 	ldr.w	r0, [r8]
 8023a70:	d021      	beq.n	8023ab6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8023a72:	2100      	movs	r1, #0
 8023a74:	f04f 0e01 	mov.w	lr, #1
 8023a78:	f8d0 c000 	ldr.w	ip, [r0]
 8023a7c:	b2a4      	uxth	r4, r4
 8023a7e:	9106      	str	r1, [sp, #24]
 8023a80:	b2b6      	uxth	r6, r6
 8023a82:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8023a86:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8023a8a:	e9cd e107 	strd	lr, r1, [sp, #28]
 8023a8e:	f8b9 e000 	ldrh.w	lr, [r9]
 8023a92:	9703      	str	r7, [sp, #12]
 8023a94:	9401      	str	r4, [sp, #4]
 8023a96:	9600      	str	r6, [sp, #0]
 8023a98:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8023a9c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023aa0:	9102      	str	r1, [sp, #8]
 8023aa2:	4629      	mov	r1, r5
 8023aa4:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8023aa8:	47a0      	blx	r4
 8023aaa:	b00f      	add	sp, #60	@ 0x3c
 8023aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023ab0:	f010 0f01 	tst.w	r0, #1
 8023ab4:	e7da      	b.n	8023a6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8023ab6:	6803      	ldr	r3, [r0, #0]
 8023ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023aba:	4798      	blx	r3
 8023abc:	f8b9 1000 	ldrh.w	r1, [r9]
 8023ac0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8023ac4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8023ac8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023acc:	434c      	muls	r4, r1
 8023ace:	2fff      	cmp	r7, #255	@ 0xff
 8023ad0:	fb01 2303 	mla	r3, r1, r3, r2
 8023ad4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023ad8:	eba1 0106 	sub.w	r1, r1, r6
 8023adc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ae0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023ae4:	4418      	add	r0, r3
 8023ae6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023aea:	eba3 0606 	sub.w	r6, r3, r6
 8023aee:	4404      	add	r4, r0
 8023af0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8023af4:	d04a      	beq.n	8023b8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8023af6:	43fa      	mvns	r2, r7
 8023af8:	b2bb      	uxth	r3, r7
 8023afa:	b2d7      	uxtb	r7, r2
 8023afc:	42a0      	cmp	r0, r4
 8023afe:	d263      	bcs.n	8023bc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8023b00:	eb00 0e0c 	add.w	lr, r0, ip
 8023b04:	4586      	cmp	lr, r0
 8023b06:	f100 0803 	add.w	r8, r0, #3
 8023b0a:	d93a      	bls.n	8023b82 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8023b0c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8023b10:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8023b14:	00d0      	lsls	r0, r2, #3
 8023b16:	fb19 f907 	smulbb	r9, r9, r7
 8023b1a:	b2c0      	uxtb	r0, r0
 8023b1c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023b20:	fb00 9003 	mla	r0, r0, r3, r9
 8023b24:	b280      	uxth	r0, r0
 8023b26:	f100 0901 	add.w	r9, r0, #1
 8023b2a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8023b2e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8023b32:	fb19 f907 	smulbb	r9, r9, r7
 8023b36:	1200      	asrs	r0, r0, #8
 8023b38:	f808 0c03 	strb.w	r0, [r8, #-3]
 8023b3c:	10d0      	asrs	r0, r2, #3
 8023b3e:	1212      	asrs	r2, r2, #8
 8023b40:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023b44:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023b48:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8023b4c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023b50:	fb00 9003 	mla	r0, r0, r3, r9
 8023b54:	b280      	uxth	r0, r0
 8023b56:	f100 0901 	add.w	r9, r0, #1
 8023b5a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8023b5e:	1200      	asrs	r0, r0, #8
 8023b60:	f808 0c02 	strb.w	r0, [r8, #-2]
 8023b64:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8023b68:	fb10 f007 	smulbb	r0, r0, r7
 8023b6c:	fb02 0203 	mla	r2, r2, r3, r0
 8023b70:	b292      	uxth	r2, r2
 8023b72:	1c50      	adds	r0, r2, #1
 8023b74:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023b78:	4640      	mov	r0, r8
 8023b7a:	1212      	asrs	r2, r2, #8
 8023b7c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8023b80:	e7c0      	b.n	8023b04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8023b82:	4408      	add	r0, r1
 8023b84:	4435      	add	r5, r6
 8023b86:	e7b9      	b.n	8023afc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8023b88:	4408      	add	r0, r1
 8023b8a:	4435      	add	r5, r6
 8023b8c:	42a0      	cmp	r0, r4
 8023b8e:	d21b      	bcs.n	8023bc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8023b90:	eb00 070c 	add.w	r7, r0, ip
 8023b94:	42b8      	cmp	r0, r7
 8023b96:	d2f7      	bcs.n	8023b88 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8023b98:	f835 3b02 	ldrh.w	r3, [r5], #2
 8023b9c:	3003      	adds	r0, #3
 8023b9e:	00da      	lsls	r2, r3, #3
 8023ba0:	b2d2      	uxtb	r2, r2
 8023ba2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023ba6:	f800 2c03 	strb.w	r2, [r0, #-3]
 8023baa:	10da      	asrs	r2, r3, #3
 8023bac:	121b      	asrs	r3, r3, #8
 8023bae:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023bb2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8023bb6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023bba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023bbe:	f800 2c02 	strb.w	r2, [r0, #-2]
 8023bc2:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023bc6:	e7e5      	b.n	8023b94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8023bc8:	4b02      	ldr	r3, [pc, #8]	@ (8023bd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8023bca:	6818      	ldr	r0, [r3, #0]
 8023bcc:	6803      	ldr	r3, [r0, #0]
 8023bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023bd0:	4798      	blx	r3
 8023bd2:	e76a      	b.n	8023aaa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023bd4:	24015dd4 	.word	0x24015dd4
 8023bd8:	24015dce 	.word	0x24015dce

08023bdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8023bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023be0:	b08a      	sub	sp, #40	@ 0x28
 8023be2:	460d      	mov	r5, r1
 8023be4:	4604      	mov	r4, r0
 8023be6:	461e      	mov	r6, r3
 8023be8:	6808      	ldr	r0, [r1, #0]
 8023bea:	ab06      	add	r3, sp, #24
 8023bec:	6849      	ldr	r1, [r1, #4]
 8023bee:	4f5d      	ldr	r7, [pc, #372]	@ (8023d64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8023bf0:	c303      	stmia	r3!, {r0, r1}
 8023bf2:	6810      	ldr	r0, [r2, #0]
 8023bf4:	ab08      	add	r3, sp, #32
 8023bf6:	6851      	ldr	r1, [r2, #4]
 8023bf8:	c303      	stmia	r3!, {r0, r1}
 8023bfa:	a806      	add	r0, sp, #24
 8023bfc:	f7f8 fc96 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023c00:	4629      	mov	r1, r5
 8023c02:	a808      	add	r0, sp, #32
 8023c04:	f7f8 fcba 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023c08:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023c0c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8023c10:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8023c14:	6838      	ldr	r0, [r7, #0]
 8023c16:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023c1a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8023c1e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8023c22:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023c26:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8023c2a:	440a      	add	r2, r1
 8023c2c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023c30:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8023c34:	4413      	add	r3, r2
 8023c36:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8023c3a:	6803      	ldr	r3, [r0, #0]
 8023c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023c3e:	4798      	blx	r3
 8023c40:	2eff      	cmp	r6, #255	@ 0xff
 8023c42:	d119      	bne.n	8023c78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8023c44:	f010 0f20 	tst.w	r0, #32
 8023c48:	6838      	ldr	r0, [r7, #0]
 8023c4a:	d018      	beq.n	8023c7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8023c4c:	b2ad      	uxth	r5, r5
 8023c4e:	2700      	movs	r7, #0
 8023c50:	6801      	ldr	r1, [r0, #0]
 8023c52:	9501      	str	r5, [sp, #4]
 8023c54:	fa1f f588 	uxth.w	r5, r8
 8023c58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8023c5c:	9500      	str	r5, [sp, #0]
 8023c5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023c62:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8023c66:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8023c6a:	9602      	str	r6, [sp, #8]
 8023c6c:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8023c6e:	4621      	mov	r1, r4
 8023c70:	47a8      	blx	r5
 8023c72:	b00a      	add	sp, #40	@ 0x28
 8023c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c78:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8023c7c:	e7e4      	b.n	8023c48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8023c7e:	6803      	ldr	r3, [r0, #0]
 8023c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023c82:	4798      	blx	r3
 8023c84:	4b38      	ldr	r3, [pc, #224]	@ (8023d68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8023c86:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023c8a:	f8b3 c000 	ldrh.w	ip, [r3]
 8023c8e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8023c92:	fb0c f505 	mul.w	r5, ip, r5
 8023c96:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8023c9a:	fb0c 2303 	mla	r3, ip, r3, r2
 8023c9e:	ebac 0c08 	sub.w	ip, ip, r8
 8023ca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023ca6:	ebae 0e08 	sub.w	lr, lr, r8
 8023caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023cae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023cb2:	4418      	add	r0, r3
 8023cb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8023cb8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023cbc:	4405      	add	r5, r0
 8023cbe:	42a8      	cmp	r0, r5
 8023cc0:	d24a      	bcs.n	8023d58 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8023cc2:	eb00 0803 	add.w	r8, r0, r3
 8023cc6:	4540      	cmp	r0, r8
 8023cc8:	d243      	bcs.n	8023d52 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8023cca:	78e2      	ldrb	r2, [r4, #3]
 8023ccc:	b15a      	cbz	r2, 8023ce6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8023cce:	2aff      	cmp	r2, #255	@ 0xff
 8023cd0:	f894 9000 	ldrb.w	r9, [r4]
 8023cd4:	d10a      	bne.n	8023cec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8023cd6:	2eff      	cmp	r6, #255	@ 0xff
 8023cd8:	d108      	bne.n	8023cec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8023cda:	f880 9000 	strb.w	r9, [r0]
 8023cde:	7862      	ldrb	r2, [r4, #1]
 8023ce0:	7042      	strb	r2, [r0, #1]
 8023ce2:	78a2      	ldrb	r2, [r4, #2]
 8023ce4:	7082      	strb	r2, [r0, #2]
 8023ce6:	3003      	adds	r0, #3
 8023ce8:	3404      	adds	r4, #4
 8023cea:	e7ec      	b.n	8023cc6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8023cec:	4372      	muls	r2, r6
 8023cee:	1c51      	adds	r1, r2, #1
 8023cf0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023cf4:	1209      	asrs	r1, r1, #8
 8023cf6:	fa1f fa81 	uxth.w	sl, r1
 8023cfa:	43c9      	mvns	r1, r1
 8023cfc:	fb19 f90a 	smulbb	r9, r9, sl
 8023d00:	b2ca      	uxtb	r2, r1
 8023d02:	7801      	ldrb	r1, [r0, #0]
 8023d04:	fb01 9902 	mla	r9, r1, r2, r9
 8023d08:	fa1f f989 	uxth.w	r9, r9
 8023d0c:	f109 0101 	add.w	r1, r9, #1
 8023d10:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8023d14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023d18:	f880 9000 	strb.w	r9, [r0]
 8023d1c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8023d20:	7861      	ldrb	r1, [r4, #1]
 8023d22:	fb19 f902 	smulbb	r9, r9, r2
 8023d26:	fb01 910a 	mla	r1, r1, sl, r9
 8023d2a:	b289      	uxth	r1, r1
 8023d2c:	f101 0901 	add.w	r9, r1, #1
 8023d30:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8023d34:	1209      	asrs	r1, r1, #8
 8023d36:	7041      	strb	r1, [r0, #1]
 8023d38:	7881      	ldrb	r1, [r0, #2]
 8023d3a:	f894 9002 	ldrb.w	r9, [r4, #2]
 8023d3e:	fb11 f202 	smulbb	r2, r1, r2
 8023d42:	fb09 220a 	mla	r2, r9, sl, r2
 8023d46:	b292      	uxth	r2, r2
 8023d48:	1c51      	adds	r1, r2, #1
 8023d4a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023d4e:	1212      	asrs	r2, r2, #8
 8023d50:	e7c8      	b.n	8023ce4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8023d52:	4460      	add	r0, ip
 8023d54:	4474      	add	r4, lr
 8023d56:	e7b2      	b.n	8023cbe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8023d58:	6838      	ldr	r0, [r7, #0]
 8023d5a:	6803      	ldr	r3, [r0, #0]
 8023d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d5e:	4798      	blx	r3
 8023d60:	e787      	b.n	8023c72 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8023d62:	bf00      	nop
 8023d64:	24015dd4 	.word	0x24015dd4
 8023d68:	24015dce 	.word	0x24015dce

08023d6c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023d70:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8023d74:	4607      	mov	r7, r0
 8023d76:	460c      	mov	r4, r1
 8023d78:	4692      	mov	sl, r2
 8023d7a:	4699      	mov	r9, r3
 8023d7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023d7e:	b335      	cbz	r5, 8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023d80:	4608      	mov	r0, r1
 8023d82:	f7fb fdcb 	bl	801f91c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023d86:	4680      	mov	r8, r0
 8023d88:	4620      	mov	r0, r4
 8023d8a:	f7fb fdfb 	bl	801f984 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023d8e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023d92:	4620      	mov	r0, r4
 8023d94:	f8ad a008 	strh.w	sl, [sp, #8]
 8023d98:	f8ad 900a 	strh.w	r9, [sp, #10]
 8023d9c:	f8ad 800c 	strh.w	r8, [sp, #12]
 8023da0:	f7fb fefa 	bl	801fb98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023da4:	2810      	cmp	r0, #16
 8023da6:	d812      	bhi.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023da8:	e8df f000 	tbb	[pc, r0]
 8023dac:	11092d24 	.word	0x11092d24
 8023db0:	11111111 	.word	0x11111111
 8023db4:	14111111 	.word	0x14111111
 8023db8:	4c111111 	.word	0x4c111111
 8023dbc:	3c          	.byte	0x3c
 8023dbd:	00          	.byte	0x00
 8023dbe:	4620      	mov	r0, r4
 8023dc0:	f7fb fe66 	bl	801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023dc4:	462b      	mov	r3, r5
 8023dc6:	4632      	mov	r2, r6
 8023dc8:	a902      	add	r1, sp, #8
 8023dca:	f7ff ff07 	bl	8023bdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023dce:	b004      	add	sp, #16
 8023dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023dd4:	4620      	mov	r0, r4
 8023dd6:	f7fb fe5b 	bl	801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023dda:	4680      	mov	r8, r0
 8023ddc:	4620      	mov	r0, r4
 8023dde:	f7fb fe87 	bl	801faf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023de2:	ab02      	add	r3, sp, #8
 8023de4:	4602      	mov	r2, r0
 8023de6:	4641      	mov	r1, r8
 8023de8:	4638      	mov	r0, r7
 8023dea:	e9cd 6500 	strd	r6, r5, [sp]
 8023dee:	f7ff fdbf 	bl	8023970 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023df2:	e7ec      	b.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023df4:	4620      	mov	r0, r4
 8023df6:	f7fb fe4b 	bl	801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023dfa:	462b      	mov	r3, r5
 8023dfc:	4632      	mov	r2, r6
 8023dfe:	a902      	add	r1, sp, #8
 8023e00:	f7ff fdf8 	bl	80239f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023e04:	e7e3      	b.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023e06:	683b      	ldr	r3, [r7, #0]
 8023e08:	4620      	mov	r0, r4
 8023e0a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8023e0e:	f7fb fe3f 	bl	801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023e12:	2300      	movs	r3, #0
 8023e14:	4601      	mov	r1, r0
 8023e16:	aa02      	add	r2, sp, #8
 8023e18:	4638      	mov	r0, r7
 8023e1a:	e9cd 5300 	strd	r5, r3, [sp]
 8023e1e:	4633      	mov	r3, r6
 8023e20:	47c0      	blx	r8
 8023e22:	e7d4      	b.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023e24:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8023e26:	2f00      	cmp	r7, #0
 8023e28:	d0d1      	beq.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023e2a:	683b      	ldr	r3, [r7, #0]
 8023e2c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8023e30:	4620      	mov	r0, r4
 8023e32:	f7fb fe2d 	bl	801fa90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023e36:	9500      	str	r5, [sp, #0]
 8023e38:	4601      	mov	r1, r0
 8023e3a:	4633      	mov	r3, r6
 8023e3c:	aa02      	add	r2, sp, #8
 8023e3e:	4638      	mov	r0, r7
 8023e40:	47c0      	blx	r8
 8023e42:	e7c4      	b.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023e44:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8023e46:	2f00      	cmp	r7, #0
 8023e48:	d0c1      	beq.n	8023dce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023e4a:	683b      	ldr	r3, [r7, #0]
 8023e4c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8023e50:	e7ee      	b.n	8023e30 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08023e52 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8023e52:	b4f0      	push	{r4, r5, r6, r7}
 8023e54:	4616      	mov	r6, r2
 8023e56:	461c      	mov	r4, r3
 8023e58:	460d      	mov	r5, r1
 8023e5a:	9a04      	ldr	r2, [sp, #16]
 8023e5c:	2e01      	cmp	r6, #1
 8023e5e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8023e62:	d00e      	beq.n	8023e82 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8023e64:	d303      	bcc.n	8023e6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8023e66:	2e02      	cmp	r6, #2
 8023e68:	d006      	beq.n	8023e78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8023e6a:	bcf0      	pop	{r4, r5, r6, r7}
 8023e6c:	4770      	bx	lr
 8023e6e:	4621      	mov	r1, r4
 8023e70:	4628      	mov	r0, r5
 8023e72:	bcf0      	pop	{r4, r5, r6, r7}
 8023e74:	f7ff bdbe 	b.w	80239f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023e78:	4621      	mov	r1, r4
 8023e7a:	4628      	mov	r0, r5
 8023e7c:	bcf0      	pop	{r4, r5, r6, r7}
 8023e7e:	f7ff bead 	b.w	8023bdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023e82:	6805      	ldr	r5, [r0, #0]
 8023e84:	2600      	movs	r6, #0
 8023e86:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023e8a:	68ed      	ldr	r5, [r5, #12]
 8023e8c:	4613      	mov	r3, r2
 8023e8e:	4622      	mov	r2, r4
 8023e90:	46ac      	mov	ip, r5
 8023e92:	bcf0      	pop	{r4, r5, r6, r7}
 8023e94:	4760      	bx	ip
	...

08023e98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8023e98:	b160      	cbz	r0, 8023eb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8023e9a:	2903      	cmp	r1, #3
 8023e9c:	d818      	bhi.n	8023ed0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8023e9e:	e8df f001 	tbb	[pc, r1]
 8023ea2:	1902      	.short	0x1902
 8023ea4:	1b06      	.short	0x1b06
 8023ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8023ee0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8023ea8:	8818      	ldrh	r0, [r3, #0]
 8023eaa:	4240      	negs	r0, r0
 8023eac:	4770      	bx	lr
 8023eae:	4b0c      	ldr	r3, [pc, #48]	@ (8023ee0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8023eb0:	8818      	ldrh	r0, [r3, #0]
 8023eb2:	4770      	bx	lr
 8023eb4:	2903      	cmp	r1, #3
 8023eb6:	d80b      	bhi.n	8023ed0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8023eb8:	a301      	add	r3, pc, #4	@ (adr r3, 8023ec0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8023eba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023ebe:	bf00      	nop
 8023ec0:	08023ed5 	.word	0x08023ed5
 8023ec4:	08023eaf 	.word	0x08023eaf
 8023ec8:	08023ed9 	.word	0x08023ed9
 8023ecc:	08023ea7 	.word	0x08023ea7
 8023ed0:	2000      	movs	r0, #0
 8023ed2:	4770      	bx	lr
 8023ed4:	2001      	movs	r0, #1
 8023ed6:	4770      	bx	lr
 8023ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8023edc:	4770      	bx	lr
 8023ede:	bf00      	nop
 8023ee0:	24015dce 	.word	0x24015dce

08023ee4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8023ee4:	b160      	cbz	r0, 8023f00 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8023ee6:	2903      	cmp	r1, #3
 8023ee8:	d818      	bhi.n	8023f1c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023eea:	e8df f001 	tbb	[pc, r1]
 8023eee:	0219      	.short	0x0219
 8023ef0:	051b      	.short	0x051b
 8023ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8023f2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8023ef4:	8818      	ldrh	r0, [r3, #0]
 8023ef6:	4770      	bx	lr
 8023ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8023f2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8023efa:	8818      	ldrh	r0, [r3, #0]
 8023efc:	4240      	negs	r0, r0
 8023efe:	4770      	bx	lr
 8023f00:	2903      	cmp	r1, #3
 8023f02:	d80b      	bhi.n	8023f1c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023f04:	a301      	add	r3, pc, #4	@ (adr r3, 8023f0c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8023f06:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023f0a:	bf00      	nop
 8023f0c:	08023ef3 	.word	0x08023ef3
 8023f10:	08023f25 	.word	0x08023f25
 8023f14:	08023ef9 	.word	0x08023ef9
 8023f18:	08023f21 	.word	0x08023f21
 8023f1c:	2000      	movs	r0, #0
 8023f1e:	4770      	bx	lr
 8023f20:	2001      	movs	r0, #1
 8023f22:	4770      	bx	lr
 8023f24:	f04f 30ff 	mov.w	r0, #4294967295
 8023f28:	4770      	bx	lr
 8023f2a:	bf00      	nop
 8023f2c:	24015dce 	.word	0x24015dce

08023f30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f34:	b097      	sub	sp, #92	@ 0x5c
 8023f36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023f38:	a912      	add	r1, sp, #72	@ 0x48
 8023f3a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8023f3e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8023f42:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8023f46:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8023f4a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8023f4e:	e881 000c 	stmia.w	r1, {r2, r3}
 8023f52:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8023f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8023f58:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8023f5c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8023f60:	9311      	str	r3, [sp, #68]	@ 0x44
 8023f62:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8023f66:	798d      	ldrb	r5, [r1, #6]
 8023f68:	930c      	str	r3, [sp, #48]	@ 0x30
 8023f6a:	7b4b      	ldrb	r3, [r1, #13]
 8023f6c:	0158      	lsls	r0, r3, #5
 8023f6e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8023f72:	4328      	orrs	r0, r5
 8023f74:	9009      	str	r0, [sp, #36]	@ 0x24
 8023f76:	f000 817c 	beq.w	8024272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023f7a:	011b      	lsls	r3, r3, #4
 8023f7c:	79c8      	ldrb	r0, [r1, #7]
 8023f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023f82:	4303      	orrs	r3, r0
 8023f84:	930e      	str	r3, [sp, #56]	@ 0x38
 8023f86:	f000 8174 	beq.w	8024272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023f8a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023f8e:	b29b      	uxth	r3, r3
 8023f90:	2f00      	cmp	r7, #0
 8023f92:	f000 8116 	beq.w	80241c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8023f96:	1aff      	subs	r7, r7, r3
 8023f98:	b2bf      	uxth	r7, r7
 8023f9a:	043b      	lsls	r3, r7, #16
 8023f9c:	d502      	bpl.n	8023fa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023f9e:	1bf6      	subs	r6, r6, r7
 8023fa0:	2700      	movs	r7, #0
 8023fa2:	b236      	sxth	r6, r6
 8023fa4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023fa8:	a812      	add	r0, sp, #72	@ 0x48
 8023faa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8023fae:	428e      	cmp	r6, r1
 8023fb0:	b28b      	uxth	r3, r1
 8023fb2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8023fb6:	bfbf      	itttt	lt
 8023fb8:	18ff      	addlt	r7, r7, r3
 8023fba:	1bbe      	sublt	r6, r7, r6
 8023fbc:	b2b7      	uxthlt	r7, r6
 8023fbe:	460e      	movlt	r6, r1
 8023fc0:	8891      	ldrh	r1, [r2, #4]
 8023fc2:	440b      	add	r3, r1
 8023fc4:	4631      	mov	r1, r6
 8023fc6:	b21b      	sxth	r3, r3
 8023fc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8023fca:	88d3      	ldrh	r3, [r2, #6]
 8023fcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023fce:	449a      	add	sl, r3
 8023fd0:	fa0f f38a 	sxth.w	r3, sl
 8023fd4:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8023fd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023fda:	4bb5      	ldr	r3, [pc, #724]	@ (80242b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8023fdc:	f893 b000 	ldrb.w	fp, [r3]
 8023fe0:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023fe4:	f1dc 0300 	rsbs	r3, ip, #0
 8023fe8:	eb43 030c 	adc.w	r3, r3, ip
 8023fec:	930d      	str	r3, [sp, #52]	@ 0x34
 8023fee:	464b      	mov	r3, r9
 8023ff0:	f7f8 f910 	bl	801c214 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023ff4:	4631      	mov	r1, r6
 8023ff6:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8023ffa:	464b      	mov	r3, r9
 8023ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023ffe:	a812      	add	r0, sp, #72	@ 0x48
 8024000:	f7f8 f925 	bl	801c24e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024004:	a916      	add	r1, sp, #88	@ 0x58
 8024006:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802400a:	a815      	add	r0, sp, #84	@ 0x54
 802400c:	f7f8 fa4c 	bl	801c4a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024010:	f1b9 0f00 	cmp.w	r9, #0
 8024014:	f040 80d8 	bne.w	80241c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8024018:	f1bb 0f01 	cmp.w	fp, #1
 802401c:	f040 80dc 	bne.w	80241d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8024020:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024022:	b153      	cbz	r3, 802403a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8024024:	2508      	movs	r5, #8
 8024026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024028:	fb95 f3f8 	sdiv	r3, r5, r8
 802402c:	1e5d      	subs	r5, r3, #1
 802402e:	4415      	add	r5, r2
 8024030:	fb95 f5f3 	sdiv	r5, r5, r3
 8024034:	fb15 f503 	smulbb	r5, r5, r3
 8024038:	b2ad      	uxth	r5, r5
 802403a:	b907      	cbnz	r7, 802403e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 802403c:	b16c      	cbz	r4, 802405a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802403e:	fb04 7305 	mla	r3, r4, r5, r7
 8024042:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024044:	ebaa 0a04 	sub.w	sl, sl, r4
 8024048:	fb08 f303 	mul.w	r3, r8, r3
 802404c:	fa1f fa8a 	uxth.w	sl, sl
 8024050:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8024054:	f003 0407 	and.w	r4, r3, #7
 8024058:	9226      	str	r2, [sp, #152]	@ 0x98
 802405a:	4649      	mov	r1, r9
 802405c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802405e:	f7ff ff1b 	bl	8023e98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8024062:	4683      	mov	fp, r0
 8024064:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024066:	f7ff ff3d 	bl	8023ee4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802406a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802406c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802406e:	4681      	mov	r9, r0
 8024070:	1a9b      	subs	r3, r3, r2
 8024072:	459a      	cmp	sl, r3
 8024074:	bfa8      	it	ge
 8024076:	469a      	movge	sl, r3
 8024078:	f1ba 0f00 	cmp.w	sl, #0
 802407c:	f340 80f9 	ble.w	8024272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8024080:	1bf6      	subs	r6, r6, r7
 8024082:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024084:	1b9e      	subs	r6, r3, r6
 8024086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024088:	429e      	cmp	r6, r3
 802408a:	bfd4      	ite	le
 802408c:	ebc7 0706 	rsble	r7, r7, r6
 8024090:	ebc7 0703 	rsbgt	r7, r7, r3
 8024094:	2f00      	cmp	r7, #0
 8024096:	f340 80ec 	ble.w	8024272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802409a:	1bed      	subs	r5, r5, r7
 802409c:	fb08 f305 	mul.w	r3, r8, r5
 80240a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80240a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80240a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80240a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80240aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80240ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80240b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80240b4:	b2db      	uxtb	r3, r3
 80240b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80240b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80240ba:	2b00      	cmp	r3, #0
 80240bc:	f040 80de 	bne.w	802427c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80240c0:	4b7c      	ldr	r3, [pc, #496]	@ (80242b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80240c2:	6818      	ldr	r0, [r3, #0]
 80240c4:	6803      	ldr	r3, [r0, #0]
 80240c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80240c8:	4798      	blx	r3
 80240ca:	2301      	movs	r3, #1
 80240cc:	4a7a      	ldr	r2, [pc, #488]	@ (80242b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80240ce:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80240d2:	fb07 9b1b 	mls	fp, r7, fp, r9
 80240d6:	fa03 f308 	lsl.w	r3, r3, r8
 80240da:	8811      	ldrh	r1, [r2, #0]
 80240dc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 80240e0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80240e4:	3b01      	subs	r3, #1
 80240e6:	fb06 bb07 	mla	fp, r6, r7, fp
 80240ea:	b2db      	uxtb	r3, r3
 80240ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80240ee:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80240f2:	fb01 2303 	mla	r3, r1, r3, r2
 80240f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80240fa:	18c3      	adds	r3, r0, r3
 80240fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80240fe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024100:	781a      	ldrb	r2, [r3, #0]
 8024102:	4122      	asrs	r2, r4
 8024104:	b2d2      	uxtb	r2, r2
 8024106:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802410a:	f0c0 80d7 	bcc.w	80242bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 802410e:	46be      	mov	lr, r7
 8024110:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024112:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8024116:	f0c0 80ba 	bcc.w	802428e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 802411a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802411c:	4013      	ands	r3, r2
 802411e:	d041      	beq.n	80241a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8024120:	20ff      	movs	r0, #255	@ 0xff
 8024122:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8024124:	fb90 f5f5 	sdiv	r5, r0, r5
 8024128:	436b      	muls	r3, r5
 802412a:	2bfe      	cmp	r3, #254	@ 0xfe
 802412c:	dd03      	ble.n	8024136 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802412e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024130:	4285      	cmp	r5, r0
 8024132:	f000 80a5 	beq.w	8024280 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8024136:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024138:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802413a:	fb15 f303 	smulbb	r3, r5, r3
 802413e:	b29b      	uxth	r3, r3
 8024140:	1c5d      	adds	r5, r3, #1
 8024142:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8024146:	780d      	ldrb	r5, [r1, #0]
 8024148:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802414c:	fa1f fc83 	uxth.w	ip, r3
 8024150:	43db      	mvns	r3, r3
 8024152:	fb10 f90c 	smulbb	r9, r0, ip
 8024156:	b2db      	uxtb	r3, r3
 8024158:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802415a:	fb05 9503 	mla	r5, r5, r3, r9
 802415e:	b2ad      	uxth	r5, r5
 8024160:	f105 0901 	add.w	r9, r5, #1
 8024164:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8024168:	fb10 f90c 	smulbb	r9, r0, ip
 802416c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802416e:	122d      	asrs	r5, r5, #8
 8024170:	fb10 fc0c 	smulbb	ip, r0, ip
 8024174:	700d      	strb	r5, [r1, #0]
 8024176:	784d      	ldrb	r5, [r1, #1]
 8024178:	fb05 9503 	mla	r5, r5, r3, r9
 802417c:	b2ad      	uxth	r5, r5
 802417e:	f105 0901 	add.w	r9, r5, #1
 8024182:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8024186:	122d      	asrs	r5, r5, #8
 8024188:	704d      	strb	r5, [r1, #1]
 802418a:	788d      	ldrb	r5, [r1, #2]
 802418c:	fb05 cc03 	mla	ip, r5, r3, ip
 8024190:	fa1f fc8c 	uxth.w	ip, ip
 8024194:	f10c 0301 	add.w	r3, ip, #1
 8024198:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802419c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80241a0:	f881 c002 	strb.w	ip, [r1, #2]
 80241a4:	4444      	add	r4, r8
 80241a6:	4431      	add	r1, r6
 80241a8:	b2a4      	uxth	r4, r4
 80241aa:	2c07      	cmp	r4, #7
 80241ac:	bf89      	itett	hi
 80241ae:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 80241b0:	fa42 f208 	asrls.w	r2, r2, r8
 80241b4:	2400      	movhi	r4, #0
 80241b6:	785a      	ldrbhi	r2, [r3, #1]
 80241b8:	bf8a      	itet	hi
 80241ba:	3301      	addhi	r3, #1
 80241bc:	b2d2      	uxtbls	r2, r2
 80241be:	9326      	strhi	r3, [sp, #152]	@ 0x98
 80241c0:	e7a7      	b.n	8024112 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80241c2:	441e      	add	r6, r3
 80241c4:	b236      	sxth	r6, r6
 80241c6:	e6ed      	b.n	8023fa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80241c8:	f1b9 0f01 	cmp.w	r9, #1
 80241cc:	f47f af28 	bne.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80241d0:	f1bb 0f01 	cmp.w	fp, #1
 80241d4:	f47f af24 	bne.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80241d8:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80242b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80241dc:	f8db 0000 	ldr.w	r0, [fp]
 80241e0:	6803      	ldr	r3, [r0, #0]
 80241e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80241e4:	4798      	blx	r3
 80241e6:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80241ea:	465a      	mov	r2, fp
 80241ec:	d006      	beq.n	80241fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80241ee:	f1b8 0f04 	cmp.w	r8, #4
 80241f2:	d141      	bne.n	8024278 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80241f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80241f6:	3300      	adds	r3, #0
 80241f8:	bf18      	it	ne
 80241fa:	2301      	movne	r3, #1
 80241fc:	0580      	lsls	r0, r0, #22
 80241fe:	d566      	bpl.n	80242ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8024200:	f1b8 0f08 	cmp.w	r8, #8
 8024204:	d163      	bne.n	80242ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8024206:	2b00      	cmp	r3, #0
 8024208:	bf0c      	ite	eq
 802420a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 802420e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8024212:	2f00      	cmp	r7, #0
 8024214:	f47f af04 	bne.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024218:	2c00      	cmp	r4, #0
 802421a:	f47f af01 	bne.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802421e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024220:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024222:	18f3      	adds	r3, r6, r3
 8024224:	4283      	cmp	r3, r0
 8024226:	f73f aefb 	bgt.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802422a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802422c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802422e:	4403      	add	r3, r0
 8024230:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024232:	4283      	cmp	r3, r0
 8024234:	f73f aef4 	bgt.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024238:	f1b8 0f08 	cmp.w	r8, #8
 802423c:	6810      	ldr	r0, [r2, #0]
 802423e:	f04f 0600 	mov.w	r6, #0
 8024242:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8024246:	bf18      	it	ne
 8024248:	3501      	addne	r5, #1
 802424a:	6804      	ldr	r4, [r0, #0]
 802424c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8024250:	bf18      	it	ne
 8024252:	f025 0501 	bicne.w	r5, r5, #1
 8024256:	e9cd 1605 	strd	r1, r6, [sp, #20]
 802425a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802425c:	bf18      	it	ne
 802425e:	b2ad      	uxthne	r5, r5
 8024260:	9104      	str	r1, [sp, #16]
 8024262:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024264:	e9cd 5a00 	strd	r5, sl, [sp]
 8024268:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802426c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802426e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8024270:	47a0      	blx	r4
 8024272:	b017      	add	sp, #92	@ 0x5c
 8024274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024278:	2300      	movs	r3, #0
 802427a:	e7bf      	b.n	80241fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802427c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802427e:	e724      	b.n	80240ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8024280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024282:	700b      	strb	r3, [r1, #0]
 8024284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024286:	704b      	strb	r3, [r1, #1]
 8024288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802428a:	708b      	strb	r3, [r1, #2]
 802428c:	e78a      	b.n	80241a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802428e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024290:	b153      	cbz	r3, 80242a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8024292:	441c      	add	r4, r3
 8024294:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024296:	b2a4      	uxth	r4, r4
 8024298:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802429c:	f004 0407 	and.w	r4, r4, #7
 80242a0:	781a      	ldrb	r2, [r3, #0]
 80242a2:	9326      	str	r3, [sp, #152]	@ 0x98
 80242a4:	4122      	asrs	r2, r4
 80242a6:	b2d2      	uxtb	r2, r2
 80242a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242aa:	445b      	add	r3, fp
 80242ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80242ae:	e72a      	b.n	8024106 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80242b0:	24015dcc 	.word	0x24015dcc
 80242b4:	24015dd4 	.word	0x24015dd4
 80242b8:	24015dce 	.word	0x24015dce
 80242bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d1d7      	bne.n	8024272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80242c2:	4b06      	ldr	r3, [pc, #24]	@ (80242dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80242c4:	6818      	ldr	r0, [r3, #0]
 80242c6:	6803      	ldr	r3, [r0, #0]
 80242c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80242ca:	4798      	blx	r3
 80242cc:	e7d1      	b.n	8024272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80242ce:	2b00      	cmp	r3, #0
 80242d0:	f43f aea6 	beq.w	8024020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80242d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80242d8:	e79b      	b.n	8024212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80242da:	bf00      	nop
 80242dc:	24015dd4 	.word	0x24015dd4

080242e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80242e0:	b538      	push	{r3, r4, r5, lr}
 80242e2:	4c15      	ldr	r4, [pc, #84]	@ (8024338 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80242e4:	4605      	mov	r5, r0
 80242e6:	7823      	ldrb	r3, [r4, #0]
 80242e8:	f3bf 8f5b 	dmb	ish
 80242ec:	07da      	lsls	r2, r3, #31
 80242ee:	d40b      	bmi.n	8024308 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80242f0:	4620      	mov	r0, r4
 80242f2:	f006 f8f7 	bl	802a4e4 <__cxa_guard_acquire>
 80242f6:	b138      	cbz	r0, 8024308 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80242f8:	4620      	mov	r0, r4
 80242fa:	f006 f8ff 	bl	802a4fc <__cxa_guard_release>
 80242fe:	4a0f      	ldr	r2, [pc, #60]	@ (802433c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024300:	490f      	ldr	r1, [pc, #60]	@ (8024340 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024302:	4810      	ldr	r0, [pc, #64]	@ (8024344 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024304:	f006 f8e7 	bl	802a4d6 <__aeabi_atexit>
 8024308:	4c0f      	ldr	r4, [pc, #60]	@ (8024348 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802430a:	7823      	ldrb	r3, [r4, #0]
 802430c:	f3bf 8f5b 	dmb	ish
 8024310:	07db      	lsls	r3, r3, #31
 8024312:	d40b      	bmi.n	802432c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024314:	4620      	mov	r0, r4
 8024316:	f006 f8e5 	bl	802a4e4 <__cxa_guard_acquire>
 802431a:	b138      	cbz	r0, 802432c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802431c:	4620      	mov	r0, r4
 802431e:	f006 f8ed 	bl	802a4fc <__cxa_guard_release>
 8024322:	4a06      	ldr	r2, [pc, #24]	@ (802433c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024324:	4909      	ldr	r1, [pc, #36]	@ (802434c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024326:	480a      	ldr	r0, [pc, #40]	@ (8024350 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024328:	f006 f8d5 	bl	802a4d6 <__aeabi_atexit>
 802432c:	4b05      	ldr	r3, [pc, #20]	@ (8024344 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802432e:	616b      	str	r3, [r5, #20]
 8024330:	4b07      	ldr	r3, [pc, #28]	@ (8024350 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024332:	61ab      	str	r3, [r5, #24]
 8024334:	bd38      	pop	{r3, r4, r5, pc}
 8024336:	bf00      	nop
 8024338:	24015eb8 	.word	0x24015eb8
 802433c:	24000000 	.word	0x24000000
 8024340:	080215d1 	.word	0x080215d1
 8024344:	2400009c 	.word	0x2400009c
 8024348:	24015ebc 	.word	0x24015ebc
 802434c:	080215cf 	.word	0x080215cf
 8024350:	240000a0 	.word	0x240000a0

08024354 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024354:	b538      	push	{r3, r4, r5, lr}
 8024356:	4c15      	ldr	r4, [pc, #84]	@ (80243ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024358:	4605      	mov	r5, r0
 802435a:	7823      	ldrb	r3, [r4, #0]
 802435c:	f3bf 8f5b 	dmb	ish
 8024360:	07da      	lsls	r2, r3, #31
 8024362:	d40b      	bmi.n	802437c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024364:	4620      	mov	r0, r4
 8024366:	f006 f8bd 	bl	802a4e4 <__cxa_guard_acquire>
 802436a:	b138      	cbz	r0, 802437c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802436c:	4620      	mov	r0, r4
 802436e:	f006 f8c5 	bl	802a4fc <__cxa_guard_release>
 8024372:	4a0f      	ldr	r2, [pc, #60]	@ (80243b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024374:	490f      	ldr	r1, [pc, #60]	@ (80243b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024376:	4810      	ldr	r0, [pc, #64]	@ (80243b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024378:	f006 f8ad 	bl	802a4d6 <__aeabi_atexit>
 802437c:	4c0f      	ldr	r4, [pc, #60]	@ (80243bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802437e:	7823      	ldrb	r3, [r4, #0]
 8024380:	f3bf 8f5b 	dmb	ish
 8024384:	07db      	lsls	r3, r3, #31
 8024386:	d40b      	bmi.n	80243a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024388:	4620      	mov	r0, r4
 802438a:	f006 f8ab 	bl	802a4e4 <__cxa_guard_acquire>
 802438e:	b138      	cbz	r0, 80243a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024390:	4620      	mov	r0, r4
 8024392:	f006 f8b3 	bl	802a4fc <__cxa_guard_release>
 8024396:	4a06      	ldr	r2, [pc, #24]	@ (80243b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024398:	4909      	ldr	r1, [pc, #36]	@ (80243c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802439a:	480a      	ldr	r0, [pc, #40]	@ (80243c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802439c:	f006 f89b 	bl	802a4d6 <__aeabi_atexit>
 80243a0:	4b05      	ldr	r3, [pc, #20]	@ (80243b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80243a2:	60eb      	str	r3, [r5, #12]
 80243a4:	4b07      	ldr	r3, [pc, #28]	@ (80243c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80243a6:	612b      	str	r3, [r5, #16]
 80243a8:	bd38      	pop	{r3, r4, r5, pc}
 80243aa:	bf00      	nop
 80243ac:	24015e98 	.word	0x24015e98
 80243b0:	24000000 	.word	0x24000000
 80243b4:	080215d5 	.word	0x080215d5
 80243b8:	2400007c 	.word	0x2400007c
 80243bc:	24015e9c 	.word	0x24015e9c
 80243c0:	080215d3 	.word	0x080215d3
 80243c4:	24000080 	.word	0x24000080

080243c8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80243c8:	b510      	push	{r4, lr}
 80243ca:	4604      	mov	r4, r0
 80243cc:	f7ff ff88 	bl	80242e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80243d0:	4620      	mov	r0, r4
 80243d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243d6:	f7ff bfbd 	b.w	8024354 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080243dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80243dc:	b538      	push	{r3, r4, r5, lr}
 80243de:	4c15      	ldr	r4, [pc, #84]	@ (8024434 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80243e0:	4605      	mov	r5, r0
 80243e2:	7823      	ldrb	r3, [r4, #0]
 80243e4:	f3bf 8f5b 	dmb	ish
 80243e8:	07da      	lsls	r2, r3, #31
 80243ea:	d40b      	bmi.n	8024404 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80243ec:	4620      	mov	r0, r4
 80243ee:	f006 f879 	bl	802a4e4 <__cxa_guard_acquire>
 80243f2:	b138      	cbz	r0, 8024404 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80243f4:	4620      	mov	r0, r4
 80243f6:	f006 f881 	bl	802a4fc <__cxa_guard_release>
 80243fa:	4a0f      	ldr	r2, [pc, #60]	@ (8024438 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80243fc:	490f      	ldr	r1, [pc, #60]	@ (802443c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80243fe:	4810      	ldr	r0, [pc, #64]	@ (8024440 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024400:	f006 f869 	bl	802a4d6 <__aeabi_atexit>
 8024404:	4c0f      	ldr	r4, [pc, #60]	@ (8024444 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8024406:	7823      	ldrb	r3, [r4, #0]
 8024408:	f3bf 8f5b 	dmb	ish
 802440c:	07db      	lsls	r3, r3, #31
 802440e:	d40b      	bmi.n	8024428 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024410:	4620      	mov	r0, r4
 8024412:	f006 f867 	bl	802a4e4 <__cxa_guard_acquire>
 8024416:	b138      	cbz	r0, 8024428 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024418:	4620      	mov	r0, r4
 802441a:	f006 f86f 	bl	802a4fc <__cxa_guard_release>
 802441e:	4a06      	ldr	r2, [pc, #24]	@ (8024438 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024420:	4909      	ldr	r1, [pc, #36]	@ (8024448 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024422:	480a      	ldr	r0, [pc, #40]	@ (802444c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024424:	f006 f857 	bl	802a4d6 <__aeabi_atexit>
 8024428:	4b05      	ldr	r3, [pc, #20]	@ (8024440 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802442a:	626b      	str	r3, [r5, #36]	@ 0x24
 802442c:	4b07      	ldr	r3, [pc, #28]	@ (802444c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802442e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024430:	bd38      	pop	{r3, r4, r5, pc}
 8024432:	bf00      	nop
 8024434:	24015ec0 	.word	0x24015ec0
 8024438:	24000000 	.word	0x24000000
 802443c:	080215c9 	.word	0x080215c9
 8024440:	240000a4 	.word	0x240000a4
 8024444:	24015ec4 	.word	0x24015ec4
 8024448:	080215c7 	.word	0x080215c7
 802444c:	240000a8 	.word	0x240000a8

08024450 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024450:	b538      	push	{r3, r4, r5, lr}
 8024452:	4c15      	ldr	r4, [pc, #84]	@ (80244a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024454:	4605      	mov	r5, r0
 8024456:	7823      	ldrb	r3, [r4, #0]
 8024458:	f3bf 8f5b 	dmb	ish
 802445c:	07da      	lsls	r2, r3, #31
 802445e:	d40b      	bmi.n	8024478 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024460:	4620      	mov	r0, r4
 8024462:	f006 f83f 	bl	802a4e4 <__cxa_guard_acquire>
 8024466:	b138      	cbz	r0, 8024478 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024468:	4620      	mov	r0, r4
 802446a:	f006 f847 	bl	802a4fc <__cxa_guard_release>
 802446e:	4a0f      	ldr	r2, [pc, #60]	@ (80244ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024470:	490f      	ldr	r1, [pc, #60]	@ (80244b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024472:	4810      	ldr	r0, [pc, #64]	@ (80244b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024474:	f006 f82f 	bl	802a4d6 <__aeabi_atexit>
 8024478:	4c0f      	ldr	r4, [pc, #60]	@ (80244b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802447a:	7823      	ldrb	r3, [r4, #0]
 802447c:	f3bf 8f5b 	dmb	ish
 8024480:	07db      	lsls	r3, r3, #31
 8024482:	d40b      	bmi.n	802449c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024484:	4620      	mov	r0, r4
 8024486:	f006 f82d 	bl	802a4e4 <__cxa_guard_acquire>
 802448a:	b138      	cbz	r0, 802449c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802448c:	4620      	mov	r0, r4
 802448e:	f006 f835 	bl	802a4fc <__cxa_guard_release>
 8024492:	4a06      	ldr	r2, [pc, #24]	@ (80244ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024494:	4909      	ldr	r1, [pc, #36]	@ (80244bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024496:	480a      	ldr	r0, [pc, #40]	@ (80244c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024498:	f006 f81d 	bl	802a4d6 <__aeabi_atexit>
 802449c:	4b05      	ldr	r3, [pc, #20]	@ (80244b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802449e:	61eb      	str	r3, [r5, #28]
 80244a0:	4b07      	ldr	r3, [pc, #28]	@ (80244c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80244a2:	622b      	str	r3, [r5, #32]
 80244a4:	bd38      	pop	{r3, r4, r5, pc}
 80244a6:	bf00      	nop
 80244a8:	24015ea0 	.word	0x24015ea0
 80244ac:	24000000 	.word	0x24000000
 80244b0:	080215cd 	.word	0x080215cd
 80244b4:	24000084 	.word	0x24000084
 80244b8:	24015ea4 	.word	0x24015ea4
 80244bc:	080215cb 	.word	0x080215cb
 80244c0:	24000088 	.word	0x24000088

080244c4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80244c4:	b510      	push	{r4, lr}
 80244c6:	4604      	mov	r4, r0
 80244c8:	f7ff ff88 	bl	80243dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80244cc:	4620      	mov	r0, r4
 80244ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244d2:	f7ff bfbd 	b.w	8024450 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080244d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80244d8:	b538      	push	{r3, r4, r5, lr}
 80244da:	4c15      	ldr	r4, [pc, #84]	@ (8024530 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80244dc:	4605      	mov	r5, r0
 80244de:	7823      	ldrb	r3, [r4, #0]
 80244e0:	f3bf 8f5b 	dmb	ish
 80244e4:	07da      	lsls	r2, r3, #31
 80244e6:	d40b      	bmi.n	8024500 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80244e8:	4620      	mov	r0, r4
 80244ea:	f005 fffb 	bl	802a4e4 <__cxa_guard_acquire>
 80244ee:	b138      	cbz	r0, 8024500 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80244f0:	4620      	mov	r0, r4
 80244f2:	f006 f803 	bl	802a4fc <__cxa_guard_release>
 80244f6:	4a0f      	ldr	r2, [pc, #60]	@ (8024534 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80244f8:	490f      	ldr	r1, [pc, #60]	@ (8024538 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80244fa:	4810      	ldr	r0, [pc, #64]	@ (802453c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80244fc:	f005 ffeb 	bl	802a4d6 <__aeabi_atexit>
 8024500:	4c0f      	ldr	r4, [pc, #60]	@ (8024540 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8024502:	7823      	ldrb	r3, [r4, #0]
 8024504:	f3bf 8f5b 	dmb	ish
 8024508:	07db      	lsls	r3, r3, #31
 802450a:	d40b      	bmi.n	8024524 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802450c:	4620      	mov	r0, r4
 802450e:	f005 ffe9 	bl	802a4e4 <__cxa_guard_acquire>
 8024512:	b138      	cbz	r0, 8024524 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8024514:	4620      	mov	r0, r4
 8024516:	f005 fff1 	bl	802a4fc <__cxa_guard_release>
 802451a:	4a06      	ldr	r2, [pc, #24]	@ (8024534 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802451c:	4909      	ldr	r1, [pc, #36]	@ (8024544 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802451e:	480a      	ldr	r0, [pc, #40]	@ (8024548 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8024520:	f005 ffd9 	bl	802a4d6 <__aeabi_atexit>
 8024524:	4b05      	ldr	r3, [pc, #20]	@ (802453c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8024526:	636b      	str	r3, [r5, #52]	@ 0x34
 8024528:	4b07      	ldr	r3, [pc, #28]	@ (8024548 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802452a:	63ab      	str	r3, [r5, #56]	@ 0x38
 802452c:	bd38      	pop	{r3, r4, r5, pc}
 802452e:	bf00      	nop
 8024530:	24015ea8 	.word	0x24015ea8
 8024534:	24000000 	.word	0x24000000
 8024538:	080215c1 	.word	0x080215c1
 802453c:	2400008c 	.word	0x2400008c
 8024540:	24015eac 	.word	0x24015eac
 8024544:	080215bf 	.word	0x080215bf
 8024548:	24000090 	.word	0x24000090

0802454c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 802454c:	b538      	push	{r3, r4, r5, lr}
 802454e:	4c15      	ldr	r4, [pc, #84]	@ (80245a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8024550:	4605      	mov	r5, r0
 8024552:	7823      	ldrb	r3, [r4, #0]
 8024554:	f3bf 8f5b 	dmb	ish
 8024558:	07da      	lsls	r2, r3, #31
 802455a:	d40b      	bmi.n	8024574 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802455c:	4620      	mov	r0, r4
 802455e:	f005 ffc1 	bl	802a4e4 <__cxa_guard_acquire>
 8024562:	b138      	cbz	r0, 8024574 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024564:	4620      	mov	r0, r4
 8024566:	f005 ffc9 	bl	802a4fc <__cxa_guard_release>
 802456a:	4a0f      	ldr	r2, [pc, #60]	@ (80245a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802456c:	490f      	ldr	r1, [pc, #60]	@ (80245ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802456e:	4810      	ldr	r0, [pc, #64]	@ (80245b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024570:	f005 ffb1 	bl	802a4d6 <__aeabi_atexit>
 8024574:	4c0f      	ldr	r4, [pc, #60]	@ (80245b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8024576:	7823      	ldrb	r3, [r4, #0]
 8024578:	f3bf 8f5b 	dmb	ish
 802457c:	07db      	lsls	r3, r3, #31
 802457e:	d40b      	bmi.n	8024598 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024580:	4620      	mov	r0, r4
 8024582:	f005 ffaf 	bl	802a4e4 <__cxa_guard_acquire>
 8024586:	b138      	cbz	r0, 8024598 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024588:	4620      	mov	r0, r4
 802458a:	f005 ffb7 	bl	802a4fc <__cxa_guard_release>
 802458e:	4a06      	ldr	r2, [pc, #24]	@ (80245a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024590:	4909      	ldr	r1, [pc, #36]	@ (80245b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8024592:	480a      	ldr	r0, [pc, #40]	@ (80245bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024594:	f005 ff9f 	bl	802a4d6 <__aeabi_atexit>
 8024598:	4b05      	ldr	r3, [pc, #20]	@ (80245b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802459a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 802459c:	4b07      	ldr	r3, [pc, #28]	@ (80245bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 802459e:	632b      	str	r3, [r5, #48]	@ 0x30
 80245a0:	bd38      	pop	{r3, r4, r5, pc}
 80245a2:	bf00      	nop
 80245a4:	24015e80 	.word	0x24015e80
 80245a8:	24000000 	.word	0x24000000
 80245ac:	080215c5 	.word	0x080215c5
 80245b0:	24000064 	.word	0x24000064
 80245b4:	24015e84 	.word	0x24015e84
 80245b8:	080215c3 	.word	0x080215c3
 80245bc:	24000068 	.word	0x24000068

080245c0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80245c0:	b510      	push	{r4, lr}
 80245c2:	4604      	mov	r4, r0
 80245c4:	f7ff ff88 	bl	80244d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80245c8:	4620      	mov	r0, r4
 80245ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245ce:	f7ff bfbd 	b.w	802454c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080245d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80245d4:	b538      	push	{r3, r4, r5, lr}
 80245d6:	4c15      	ldr	r4, [pc, #84]	@ (802462c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80245d8:	4605      	mov	r5, r0
 80245da:	7823      	ldrb	r3, [r4, #0]
 80245dc:	f3bf 8f5b 	dmb	ish
 80245e0:	07da      	lsls	r2, r3, #31
 80245e2:	d40b      	bmi.n	80245fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80245e4:	4620      	mov	r0, r4
 80245e6:	f005 ff7d 	bl	802a4e4 <__cxa_guard_acquire>
 80245ea:	b138      	cbz	r0, 80245fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80245ec:	4620      	mov	r0, r4
 80245ee:	f005 ff85 	bl	802a4fc <__cxa_guard_release>
 80245f2:	4a0f      	ldr	r2, [pc, #60]	@ (8024630 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80245f4:	490f      	ldr	r1, [pc, #60]	@ (8024634 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80245f6:	4810      	ldr	r0, [pc, #64]	@ (8024638 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80245f8:	f005 ff6d 	bl	802a4d6 <__aeabi_atexit>
 80245fc:	4c0f      	ldr	r4, [pc, #60]	@ (802463c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80245fe:	7823      	ldrb	r3, [r4, #0]
 8024600:	f3bf 8f5b 	dmb	ish
 8024604:	07db      	lsls	r3, r3, #31
 8024606:	d40b      	bmi.n	8024620 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024608:	4620      	mov	r0, r4
 802460a:	f005 ff6b 	bl	802a4e4 <__cxa_guard_acquire>
 802460e:	b138      	cbz	r0, 8024620 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024610:	4620      	mov	r0, r4
 8024612:	f005 ff73 	bl	802a4fc <__cxa_guard_release>
 8024616:	4a06      	ldr	r2, [pc, #24]	@ (8024630 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024618:	4909      	ldr	r1, [pc, #36]	@ (8024640 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802461a:	480a      	ldr	r0, [pc, #40]	@ (8024644 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802461c:	f005 ff5b 	bl	802a4d6 <__aeabi_atexit>
 8024620:	4b05      	ldr	r3, [pc, #20]	@ (8024638 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024622:	646b      	str	r3, [r5, #68]	@ 0x44
 8024624:	4b07      	ldr	r3, [pc, #28]	@ (8024644 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024626:	64ab      	str	r3, [r5, #72]	@ 0x48
 8024628:	bd38      	pop	{r3, r4, r5, pc}
 802462a:	bf00      	nop
 802462c:	24015eb0 	.word	0x24015eb0
 8024630:	24000000 	.word	0x24000000
 8024634:	080215b9 	.word	0x080215b9
 8024638:	24000094 	.word	0x24000094
 802463c:	24015eb4 	.word	0x24015eb4
 8024640:	080215b7 	.word	0x080215b7
 8024644:	24000098 	.word	0x24000098

08024648 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024648:	b538      	push	{r3, r4, r5, lr}
 802464a:	4c15      	ldr	r4, [pc, #84]	@ (80246a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802464c:	4605      	mov	r5, r0
 802464e:	7823      	ldrb	r3, [r4, #0]
 8024650:	f3bf 8f5b 	dmb	ish
 8024654:	07da      	lsls	r2, r3, #31
 8024656:	d40b      	bmi.n	8024670 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024658:	4620      	mov	r0, r4
 802465a:	f005 ff43 	bl	802a4e4 <__cxa_guard_acquire>
 802465e:	b138      	cbz	r0, 8024670 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024660:	4620      	mov	r0, r4
 8024662:	f005 ff4b 	bl	802a4fc <__cxa_guard_release>
 8024666:	4a0f      	ldr	r2, [pc, #60]	@ (80246a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024668:	490f      	ldr	r1, [pc, #60]	@ (80246a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802466a:	4810      	ldr	r0, [pc, #64]	@ (80246ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802466c:	f005 ff33 	bl	802a4d6 <__aeabi_atexit>
 8024670:	4c0f      	ldr	r4, [pc, #60]	@ (80246b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024672:	7823      	ldrb	r3, [r4, #0]
 8024674:	f3bf 8f5b 	dmb	ish
 8024678:	07db      	lsls	r3, r3, #31
 802467a:	d40b      	bmi.n	8024694 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802467c:	4620      	mov	r0, r4
 802467e:	f005 ff31 	bl	802a4e4 <__cxa_guard_acquire>
 8024682:	b138      	cbz	r0, 8024694 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024684:	4620      	mov	r0, r4
 8024686:	f005 ff39 	bl	802a4fc <__cxa_guard_release>
 802468a:	4a06      	ldr	r2, [pc, #24]	@ (80246a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802468c:	4909      	ldr	r1, [pc, #36]	@ (80246b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802468e:	480a      	ldr	r0, [pc, #40]	@ (80246b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024690:	f005 ff21 	bl	802a4d6 <__aeabi_atexit>
 8024694:	4b05      	ldr	r3, [pc, #20]	@ (80246ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024696:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8024698:	4b07      	ldr	r3, [pc, #28]	@ (80246b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802469a:	642b      	str	r3, [r5, #64]	@ 0x40
 802469c:	bd38      	pop	{r3, r4, r5, pc}
 802469e:	bf00      	nop
 80246a0:	24015e90 	.word	0x24015e90
 80246a4:	24000000 	.word	0x24000000
 80246a8:	080215bd 	.word	0x080215bd
 80246ac:	24000074 	.word	0x24000074
 80246b0:	24015e94 	.word	0x24015e94
 80246b4:	080215bb 	.word	0x080215bb
 80246b8:	24000078 	.word	0x24000078

080246bc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80246bc:	b510      	push	{r4, lr}
 80246be:	4604      	mov	r4, r0
 80246c0:	f7ff ff88 	bl	80245d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80246c4:	4620      	mov	r0, r4
 80246c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80246ca:	f7ff bfbd 	b.w	8024648 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080246d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80246d0:	b538      	push	{r3, r4, r5, lr}
 80246d2:	4c15      	ldr	r4, [pc, #84]	@ (8024728 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80246d4:	4605      	mov	r5, r0
 80246d6:	7823      	ldrb	r3, [r4, #0]
 80246d8:	f3bf 8f5b 	dmb	ish
 80246dc:	07da      	lsls	r2, r3, #31
 80246de:	d40b      	bmi.n	80246f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80246e0:	4620      	mov	r0, r4
 80246e2:	f005 feff 	bl	802a4e4 <__cxa_guard_acquire>
 80246e6:	b138      	cbz	r0, 80246f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80246e8:	4620      	mov	r0, r4
 80246ea:	f005 ff07 	bl	802a4fc <__cxa_guard_release>
 80246ee:	4a0f      	ldr	r2, [pc, #60]	@ (802472c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80246f0:	490f      	ldr	r1, [pc, #60]	@ (8024730 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80246f2:	4810      	ldr	r0, [pc, #64]	@ (8024734 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80246f4:	f005 feef 	bl	802a4d6 <__aeabi_atexit>
 80246f8:	4c0f      	ldr	r4, [pc, #60]	@ (8024738 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80246fa:	7823      	ldrb	r3, [r4, #0]
 80246fc:	f3bf 8f5b 	dmb	ish
 8024700:	07db      	lsls	r3, r3, #31
 8024702:	d40b      	bmi.n	802471c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024704:	4620      	mov	r0, r4
 8024706:	f005 feed 	bl	802a4e4 <__cxa_guard_acquire>
 802470a:	b138      	cbz	r0, 802471c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802470c:	4620      	mov	r0, r4
 802470e:	f005 fef5 	bl	802a4fc <__cxa_guard_release>
 8024712:	4a06      	ldr	r2, [pc, #24]	@ (802472c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024714:	4909      	ldr	r1, [pc, #36]	@ (802473c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024716:	480a      	ldr	r0, [pc, #40]	@ (8024740 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024718:	f005 fedd 	bl	802a4d6 <__aeabi_atexit>
 802471c:	4b05      	ldr	r3, [pc, #20]	@ (8024734 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802471e:	656b      	str	r3, [r5, #84]	@ 0x54
 8024720:	4b07      	ldr	r3, [pc, #28]	@ (8024740 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024722:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024724:	bd38      	pop	{r3, r4, r5, pc}
 8024726:	bf00      	nop
 8024728:	24015e88 	.word	0x24015e88
 802472c:	24000000 	.word	0x24000000
 8024730:	080215b1 	.word	0x080215b1
 8024734:	2400006c 	.word	0x2400006c
 8024738:	24015e8c 	.word	0x24015e8c
 802473c:	080215af 	.word	0x080215af
 8024740:	24000070 	.word	0x24000070

08024744 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024744:	b538      	push	{r3, r4, r5, lr}
 8024746:	4c15      	ldr	r4, [pc, #84]	@ (802479c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024748:	4605      	mov	r5, r0
 802474a:	7823      	ldrb	r3, [r4, #0]
 802474c:	f3bf 8f5b 	dmb	ish
 8024750:	07da      	lsls	r2, r3, #31
 8024752:	d40b      	bmi.n	802476c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024754:	4620      	mov	r0, r4
 8024756:	f005 fec5 	bl	802a4e4 <__cxa_guard_acquire>
 802475a:	b138      	cbz	r0, 802476c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802475c:	4620      	mov	r0, r4
 802475e:	f005 fecd 	bl	802a4fc <__cxa_guard_release>
 8024762:	4a0f      	ldr	r2, [pc, #60]	@ (80247a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024764:	490f      	ldr	r1, [pc, #60]	@ (80247a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024766:	4810      	ldr	r0, [pc, #64]	@ (80247a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024768:	f005 feb5 	bl	802a4d6 <__aeabi_atexit>
 802476c:	4c0f      	ldr	r4, [pc, #60]	@ (80247ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802476e:	7823      	ldrb	r3, [r4, #0]
 8024770:	f3bf 8f5b 	dmb	ish
 8024774:	07db      	lsls	r3, r3, #31
 8024776:	d40b      	bmi.n	8024790 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024778:	4620      	mov	r0, r4
 802477a:	f005 feb3 	bl	802a4e4 <__cxa_guard_acquire>
 802477e:	b138      	cbz	r0, 8024790 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024780:	4620      	mov	r0, r4
 8024782:	f005 febb 	bl	802a4fc <__cxa_guard_release>
 8024786:	4a06      	ldr	r2, [pc, #24]	@ (80247a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024788:	4909      	ldr	r1, [pc, #36]	@ (80247b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802478a:	480a      	ldr	r0, [pc, #40]	@ (80247b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802478c:	f005 fea3 	bl	802a4d6 <__aeabi_atexit>
 8024790:	4b05      	ldr	r3, [pc, #20]	@ (80247a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024792:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8024794:	4b07      	ldr	r3, [pc, #28]	@ (80247b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024796:	652b      	str	r3, [r5, #80]	@ 0x50
 8024798:	bd38      	pop	{r3, r4, r5, pc}
 802479a:	bf00      	nop
 802479c:	24015e78 	.word	0x24015e78
 80247a0:	24000000 	.word	0x24000000
 80247a4:	080215b5 	.word	0x080215b5
 80247a8:	2400005c 	.word	0x2400005c
 80247ac:	24015e7c 	.word	0x24015e7c
 80247b0:	080215b3 	.word	0x080215b3
 80247b4:	24000060 	.word	0x24000060

080247b8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80247b8:	b510      	push	{r4, lr}
 80247ba:	4604      	mov	r4, r0
 80247bc:	f7ff ff88 	bl	80246d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80247c0:	4620      	mov	r0, r4
 80247c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247c6:	f7ff bfbd 	b.w	8024744 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080247ca <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80247ca:	b510      	push	{r4, lr}
 80247cc:	4604      	mov	r4, r0
 80247ce:	f7ff fff3 	bl	80247b8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80247d2:	4620      	mov	r0, r4
 80247d4:	f7ff ff72 	bl	80246bc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80247d8:	4620      	mov	r0, r4
 80247da:	f7ff fe73 	bl	80244c4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80247de:	4620      	mov	r0, r4
 80247e0:	f7ff fdf2 	bl	80243c8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80247e4:	4620      	mov	r0, r4
 80247e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247ea:	f7ff bee9 	b.w	80245c0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080247f0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80247f0:	b538      	push	{r3, r4, r5, lr}
 80247f2:	4c0b      	ldr	r4, [pc, #44]	@ (8024820 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 80247f4:	4605      	mov	r5, r0
 80247f6:	7823      	ldrb	r3, [r4, #0]
 80247f8:	f3bf 8f5b 	dmb	ish
 80247fc:	07db      	lsls	r3, r3, #31
 80247fe:	d40b      	bmi.n	8024818 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8024800:	4620      	mov	r0, r4
 8024802:	f005 fe6f 	bl	802a4e4 <__cxa_guard_acquire>
 8024806:	b138      	cbz	r0, 8024818 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8024808:	4620      	mov	r0, r4
 802480a:	f005 fe77 	bl	802a4fc <__cxa_guard_release>
 802480e:	4a05      	ldr	r2, [pc, #20]	@ (8024824 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8024810:	4905      	ldr	r1, [pc, #20]	@ (8024828 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8024812:	4806      	ldr	r0, [pc, #24]	@ (802482c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8024814:	f005 fe5f 	bl	802a4d6 <__aeabi_atexit>
 8024818:	4b04      	ldr	r3, [pc, #16]	@ (802482c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802481a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 802481c:	bd38      	pop	{r3, r4, r5, pc}
 802481e:	bf00      	nop
 8024820:	24015e6c 	.word	0x24015e6c
 8024824:	24000000 	.word	0x24000000
 8024828:	080215ad 	.word	0x080215ad
 802482c:	24000054 	.word	0x24000054

08024830 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8024830:	b538      	push	{r3, r4, r5, lr}
 8024832:	4c0b      	ldr	r4, [pc, #44]	@ (8024860 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8024834:	4605      	mov	r5, r0
 8024836:	7823      	ldrb	r3, [r4, #0]
 8024838:	f3bf 8f5b 	dmb	ish
 802483c:	07db      	lsls	r3, r3, #31
 802483e:	d40b      	bmi.n	8024858 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8024840:	4620      	mov	r0, r4
 8024842:	f005 fe4f 	bl	802a4e4 <__cxa_guard_acquire>
 8024846:	b138      	cbz	r0, 8024858 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8024848:	4620      	mov	r0, r4
 802484a:	f005 fe57 	bl	802a4fc <__cxa_guard_release>
 802484e:	4a05      	ldr	r2, [pc, #20]	@ (8024864 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8024850:	4905      	ldr	r1, [pc, #20]	@ (8024868 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8024852:	4806      	ldr	r0, [pc, #24]	@ (802486c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8024854:	f005 fe3f 	bl	802a4d6 <__aeabi_atexit>
 8024858:	4b04      	ldr	r3, [pc, #16]	@ (802486c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 802485a:	662b      	str	r3, [r5, #96]	@ 0x60
 802485c:	bd38      	pop	{r3, r4, r5, pc}
 802485e:	bf00      	nop
 8024860:	24015e70 	.word	0x24015e70
 8024864:	24000000 	.word	0x24000000
 8024868:	080215ab 	.word	0x080215ab
 802486c:	24000058 	.word	0x24000058

08024870 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8024870:	b570      	push	{r4, r5, r6, lr}
 8024872:	4d0c      	ldr	r5, [pc, #48]	@ (80248a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8024874:	4606      	mov	r6, r0
 8024876:	4c0c      	ldr	r4, [pc, #48]	@ (80248a8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8024878:	782b      	ldrb	r3, [r5, #0]
 802487a:	f3bf 8f5b 	dmb	ish
 802487e:	f013 0f01 	tst.w	r3, #1
 8024882:	d10d      	bne.n	80248a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8024884:	4628      	mov	r0, r5
 8024886:	f005 fe2d 	bl	802a4e4 <__cxa_guard_acquire>
 802488a:	b148      	cbz	r0, 80248a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 802488c:	4b07      	ldr	r3, [pc, #28]	@ (80248ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802488e:	4628      	mov	r0, r5
 8024890:	6023      	str	r3, [r4, #0]
 8024892:	f005 fe33 	bl	802a4fc <__cxa_guard_release>
 8024896:	4a06      	ldr	r2, [pc, #24]	@ (80248b0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8024898:	4620      	mov	r0, r4
 802489a:	4906      	ldr	r1, [pc, #24]	@ (80248b4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 802489c:	f005 fe1b 	bl	802a4d6 <__aeabi_atexit>
 80248a0:	6674      	str	r4, [r6, #100]	@ 0x64
 80248a2:	bd70      	pop	{r4, r5, r6, pc}
 80248a4:	24015e74 	.word	0x24015e74
 80248a8:	24015fcc 	.word	0x24015fcc
 80248ac:	08030a0c 	.word	0x08030a0c
 80248b0:	24000000 	.word	0x24000000
 80248b4:	080215a9 	.word	0x080215a9

080248b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80248b8:	b510      	push	{r4, lr}
 80248ba:	4604      	mov	r4, r0
 80248bc:	f7ff ff98 	bl	80247f0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80248c0:	4620      	mov	r0, r4
 80248c2:	f7ff ffb5 	bl	8024830 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80248c6:	4620      	mov	r0, r4
 80248c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80248cc:	f7ff bfd0 	b.w	8024870 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080248d0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 80248d0:	b570      	push	{r4, r5, r6, lr}
 80248d2:	4d0c      	ldr	r5, [pc, #48]	@ (8024904 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 80248d4:	4606      	mov	r6, r0
 80248d6:	4c0c      	ldr	r4, [pc, #48]	@ (8024908 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 80248d8:	782b      	ldrb	r3, [r5, #0]
 80248da:	f3bf 8f5b 	dmb	ish
 80248de:	f013 0f01 	tst.w	r3, #1
 80248e2:	d10d      	bne.n	8024900 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80248e4:	4628      	mov	r0, r5
 80248e6:	f005 fdfd 	bl	802a4e4 <__cxa_guard_acquire>
 80248ea:	b148      	cbz	r0, 8024900 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80248ec:	4b07      	ldr	r3, [pc, #28]	@ (802490c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 80248ee:	4628      	mov	r0, r5
 80248f0:	6023      	str	r3, [r4, #0]
 80248f2:	f005 fe03 	bl	802a4fc <__cxa_guard_release>
 80248f6:	4a06      	ldr	r2, [pc, #24]	@ (8024910 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 80248f8:	4620      	mov	r0, r4
 80248fa:	4906      	ldr	r1, [pc, #24]	@ (8024914 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 80248fc:	f005 fdeb 	bl	802a4d6 <__aeabi_atexit>
 8024900:	66b4      	str	r4, [r6, #104]	@ 0x68
 8024902:	bd70      	pop	{r4, r5, r6, pc}
 8024904:	24015e68 	.word	0x24015e68
 8024908:	24015ec8 	.word	0x24015ec8
 802490c:	08030a24 	.word	0x08030a24
 8024910:	24000000 	.word	0x24000000
 8024914:	080215a7 	.word	0x080215a7

08024918 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8024918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802491c:	b087      	sub	sp, #28
 802491e:	788d      	ldrb	r5, [r1, #2]
 8024920:	f891 9000 	ldrb.w	r9, [r1]
 8024924:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8024928:	9501      	str	r5, [sp, #4]
 802492a:	784d      	ldrb	r5, [r1, #1]
 802492c:	9203      	str	r2, [sp, #12]
 802492e:	9502      	str	r5, [sp, #8]
 8024930:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8024934:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8024938:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 802493c:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8024940:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8024944:	fb06 0708 	mla	r7, r6, r8, r0
 8024948:	2e00      	cmp	r6, #0
 802494a:	eb02 0a07 	add.w	sl, r2, r7
 802494e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8024952:	9d01      	ldr	r5, [sp, #4]
 8024954:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8024958:	ea45 0509 	orr.w	r5, r5, r9
 802495c:	9505      	str	r5, [sp, #20]
 802495e:	f2c0 80b2 	blt.w	8024ac6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8024962:	45b3      	cmp	fp, r6
 8024964:	f340 80af 	ble.w	8024ac6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8024968:	2800      	cmp	r0, #0
 802496a:	f2c0 80aa 	blt.w	8024ac2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802496e:	4580      	cmp	r8, r0
 8024970:	f340 80a7 	ble.w	8024ac2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8024974:	9a03      	ldr	r2, [sp, #12]
 8024976:	5dd7      	ldrb	r7, [r2, r7]
 8024978:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802497c:	441f      	add	r7, r3
 802497e:	1c42      	adds	r2, r0, #1
 8024980:	f100 80a4 	bmi.w	8024acc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8024984:	4590      	cmp	r8, r2
 8024986:	f340 80a1 	ble.w	8024acc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802498a:	2c00      	cmp	r4, #0
 802498c:	f000 809e 	beq.w	8024acc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8024990:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8024994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024998:	441d      	add	r5, r3
 802499a:	3601      	adds	r6, #1
 802499c:	f100 809a 	bmi.w	8024ad4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80249a0:	45b3      	cmp	fp, r6
 80249a2:	f340 8097 	ble.w	8024ad4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80249a6:	f1bc 0f00 	cmp.w	ip, #0
 80249aa:	f000 8093 	beq.w	8024ad4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80249ae:	2800      	cmp	r0, #0
 80249b0:	f2c0 808e 	blt.w	8024ad0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80249b4:	4580      	cmp	r8, r0
 80249b6:	f340 808b 	ble.w	8024ad0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80249ba:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80249be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80249c2:	441e      	add	r6, r3
 80249c4:	3001      	adds	r0, #1
 80249c6:	f100 8088 	bmi.w	8024ada <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80249ca:	4580      	cmp	r8, r0
 80249cc:	f340 8085 	ble.w	8024ada <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80249d0:	2c00      	cmp	r4, #0
 80249d2:	f000 8082 	beq.w	8024ada <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80249d6:	44d0      	add	r8, sl
 80249d8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80249dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80249e0:	4413      	add	r3, r2
 80249e2:	b2a4      	uxth	r4, r4
 80249e4:	f895 a000 	ldrb.w	sl, [r5]
 80249e8:	fa1f fc8c 	uxth.w	ip, ip
 80249ec:	fb04 fb0c 	mul.w	fp, r4, ip
 80249f0:	0124      	lsls	r4, r4, #4
 80249f2:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80249f6:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 80249fa:	eba4 040b 	sub.w	r4, r4, fp
 80249fe:	fa1f f08c 	uxth.w	r0, ip
 8024a02:	b2a2      	uxth	r2, r4
 8024a04:	783c      	ldrb	r4, [r7, #0]
 8024a06:	eba8 0800 	sub.w	r8, r8, r0
 8024a0a:	fa1f fc8e 	uxth.w	ip, lr
 8024a0e:	fb02 fa0a 	mul.w	sl, r2, sl
 8024a12:	ea6f 0e0e 	mvn.w	lr, lr
 8024a16:	fa1f f888 	uxth.w	r8, r8
 8024a1a:	fa5f fe8e 	uxtb.w	lr, lr
 8024a1e:	fb08 aa04 	mla	sl, r8, r4, sl
 8024a22:	7834      	ldrb	r4, [r6, #0]
 8024a24:	fb19 f90e 	smulbb	r9, r9, lr
 8024a28:	fb00 aa04 	mla	sl, r0, r4, sl
 8024a2c:	781c      	ldrb	r4, [r3, #0]
 8024a2e:	fb0b a404 	mla	r4, fp, r4, sl
 8024a32:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024a36:	fb04 990c 	mla	r9, r4, ip, r9
 8024a3a:	fa1f f989 	uxth.w	r9, r9
 8024a3e:	f109 0401 	add.w	r4, r9, #1
 8024a42:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024a46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024a4a:	f881 9000 	strb.w	r9, [r1]
 8024a4e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8024a52:	787c      	ldrb	r4, [r7, #1]
 8024a54:	fb02 f909 	mul.w	r9, r2, r9
 8024a58:	fb08 9904 	mla	r9, r8, r4, r9
 8024a5c:	7874      	ldrb	r4, [r6, #1]
 8024a5e:	fb00 9904 	mla	r9, r0, r4, r9
 8024a62:	785c      	ldrb	r4, [r3, #1]
 8024a64:	fb0b 9404 	mla	r4, fp, r4, r9
 8024a68:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8024a6c:	9c02      	ldr	r4, [sp, #8]
 8024a6e:	fb14 f90e 	smulbb	r9, r4, lr
 8024a72:	fb0a 940c 	mla	r4, sl, ip, r9
 8024a76:	b2a4      	uxth	r4, r4
 8024a78:	f104 0901 	add.w	r9, r4, #1
 8024a7c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8024a80:	1224      	asrs	r4, r4, #8
 8024a82:	704c      	strb	r4, [r1, #1]
 8024a84:	78ad      	ldrb	r5, [r5, #2]
 8024a86:	78bc      	ldrb	r4, [r7, #2]
 8024a88:	436a      	muls	r2, r5
 8024a8a:	789b      	ldrb	r3, [r3, #2]
 8024a8c:	fb08 2204 	mla	r2, r8, r4, r2
 8024a90:	78b4      	ldrb	r4, [r6, #2]
 8024a92:	fb00 2004 	mla	r0, r0, r4, r2
 8024a96:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024a9a:	9b01      	ldr	r3, [sp, #4]
 8024a9c:	fb13 fe0e 	smulbb	lr, r3, lr
 8024aa0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024aa4:	fb0b ec0c 	mla	ip, fp, ip, lr
 8024aa8:	fa1f fc8c 	uxth.w	ip, ip
 8024aac:	f10c 0e01 	add.w	lr, ip, #1
 8024ab0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8024ab4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024ab8:	f881 c002 	strb.w	ip, [r1, #2]
 8024abc:	b007      	add	sp, #28
 8024abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ac2:	af05      	add	r7, sp, #20
 8024ac4:	e75b      	b.n	802497e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8024ac6:	ad05      	add	r5, sp, #20
 8024ac8:	462f      	mov	r7, r5
 8024aca:	e766      	b.n	802499a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8024acc:	ad05      	add	r5, sp, #20
 8024ace:	e764      	b.n	802499a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8024ad0:	ae05      	add	r6, sp, #20
 8024ad2:	e777      	b.n	80249c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8024ad4:	ab05      	add	r3, sp, #20
 8024ad6:	461e      	mov	r6, r3
 8024ad8:	e783      	b.n	80249e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8024ada:	ab05      	add	r3, sp, #20
 8024adc:	e781      	b.n	80249e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08024ade <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ae2:	b093      	sub	sp, #76	@ 0x4c
 8024ae4:	9210      	str	r2, [sp, #64]	@ 0x40
 8024ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ae8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024aea:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8024aee:	9011      	str	r0, [sp, #68]	@ 0x44
 8024af0:	930e      	str	r3, [sp, #56]	@ 0x38
 8024af2:	6850      	ldr	r0, [r2, #4]
 8024af4:	910d      	str	r1, [sp, #52]	@ 0x34
 8024af6:	6812      	ldr	r2, [r2, #0]
 8024af8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8024afc:	fb00 1303 	mla	r3, r0, r3, r1
 8024b00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b04:	18d3      	adds	r3, r2, r3
 8024b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b0a:	681b      	ldr	r3, [r3, #0]
 8024b0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b0e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b10:	685c      	ldr	r4, [r3, #4]
 8024b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024b14:	3404      	adds	r4, #4
 8024b16:	43db      	mvns	r3, r3
 8024b18:	b2db      	uxtb	r3, r3
 8024b1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	dc03      	bgt.n	8024b2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024b22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	f340 8250 	ble.w	8024fca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8024b2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b34:	1e48      	subs	r0, r1, #1
 8024b36:	1e55      	subs	r5, r2, #1
 8024b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	f340 80ee 	ble.w	8024d1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024b40:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8024b42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024b44:	1436      	asrs	r6, r6, #16
 8024b46:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024b4a:	d406      	bmi.n	8024b5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024b4c:	4286      	cmp	r6, r0
 8024b4e:	da04      	bge.n	8024b5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024b50:	2b00      	cmp	r3, #0
 8024b52:	db02      	blt.n	8024b5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024b54:	42ab      	cmp	r3, r5
 8024b56:	f2c0 80e2 	blt.w	8024d1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024b5a:	3601      	adds	r6, #1
 8024b5c:	f100 80cf 	bmi.w	8024cfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024b60:	42b1      	cmp	r1, r6
 8024b62:	f2c0 80cc 	blt.w	8024cfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024b66:	3301      	adds	r3, #1
 8024b68:	f100 80c9 	bmi.w	8024cfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024b6c:	429a      	cmp	r2, r3
 8024b6e:	f2c0 80c6 	blt.w	8024cfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024b72:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 8024b76:	f1bb 0f00 	cmp.w	fp, #0
 8024b7a:	f340 80f1 	ble.w	8024d60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024b7e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024b80:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024b82:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8024b84:	141d      	asrs	r5, r3, #16
 8024b86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b88:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024b8c:	68c7      	ldr	r7, [r0, #12]
 8024b8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024b90:	1418      	asrs	r0, r3, #16
 8024b92:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8024b96:	6892      	ldr	r2, [r2, #8]
 8024b98:	f100 8137 	bmi.w	8024e0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024b9c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024ba0:	4560      	cmp	r0, ip
 8024ba2:	f280 8132 	bge.w	8024e0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024ba6:	2d00      	cmp	r5, #0
 8024ba8:	f2c0 812f 	blt.w	8024e0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024bac:	f107 3cff 	add.w	ip, r7, #4294967295
 8024bb0:	4565      	cmp	r5, ip
 8024bb2:	f280 812a 	bge.w	8024e0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024bb6:	b212      	sxth	r2, r2
 8024bb8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024bba:	fb05 0002 	mla	r0, r5, r2, r0
 8024bbe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024bc0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024bc4:	4405      	add	r5, r0
 8024bc6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024bca:	eb04 0e0c 	add.w	lr, r4, ip
 8024bce:	f1b8 0f00 	cmp.w	r8, #0
 8024bd2:	f000 810c 	beq.w	8024dee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8024bd6:	786f      	ldrb	r7, [r5, #1]
 8024bd8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024bdc:	4427      	add	r7, r4
 8024bde:	2900      	cmp	r1, #0
 8024be0:	f000 810d 	beq.w	8024dfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024be4:	18a8      	adds	r0, r5, r2
 8024be6:	5caa      	ldrb	r2, [r5, r2]
 8024be8:	7840      	ldrb	r0, [r0, #1]
 8024bea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024bee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024bf2:	4422      	add	r2, r4
 8024bf4:	4420      	add	r0, r4
 8024bf6:	fa1f f388 	uxth.w	r3, r8
 8024bfa:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8024bfe:	b289      	uxth	r1, r1
 8024c00:	f897 c000 	ldrb.w	ip, [r7]
 8024c04:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8024c08:	fb03 f901 	mul.w	r9, r3, r1
 8024c0c:	011b      	lsls	r3, r3, #4
 8024c0e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024c12:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8024c16:	eba3 0309 	sub.w	r3, r3, r9
 8024c1a:	b289      	uxth	r1, r1
 8024c1c:	b29b      	uxth	r3, r3
 8024c1e:	eba8 0801 	sub.w	r8, r8, r1
 8024c22:	fb03 fc0c 	mul.w	ip, r3, ip
 8024c26:	fa1f f888 	uxth.w	r8, r8
 8024c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024c2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c2e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8024c32:	f892 a000 	ldrb.w	sl, [r2]
 8024c36:	fb01 cc0a 	mla	ip, r1, sl, ip
 8024c3a:	f890 a000 	ldrb.w	sl, [r0]
 8024c3e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8024c42:	f896 a000 	ldrb.w	sl, [r6]
 8024c46:	fb1a fa03 	smulbb	sl, sl, r3
 8024c4a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024c4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024c50:	fb0c ac05 	mla	ip, ip, r5, sl
 8024c54:	fa1f fc8c 	uxth.w	ip, ip
 8024c58:	f10c 0a01 	add.w	sl, ip, #1
 8024c5c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8024c60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024c64:	f886 a000 	strb.w	sl, [r6]
 8024c68:	f897 c001 	ldrb.w	ip, [r7, #1]
 8024c6c:	f89e a001 	ldrb.w	sl, [lr, #1]
 8024c70:	fb03 fc0c 	mul.w	ip, r3, ip
 8024c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c76:	fb08 cc0a 	mla	ip, r8, sl, ip
 8024c7a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024c7e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8024c82:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024c86:	fb09 cc0a 	mla	ip, r9, sl, ip
 8024c8a:	f896 a001 	ldrb.w	sl, [r6, #1]
 8024c8e:	fb1a fa03 	smulbb	sl, sl, r3
 8024c92:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024c96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024c98:	fb0c ac05 	mla	ip, ip, r5, sl
 8024c9c:	fa1f fc8c 	uxth.w	ip, ip
 8024ca0:	f10c 0a01 	add.w	sl, ip, #1
 8024ca4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8024ca8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024cac:	f886 c001 	strb.w	ip, [r6, #1]
 8024cb0:	78bf      	ldrb	r7, [r7, #2]
 8024cb2:	f89e c002 	ldrb.w	ip, [lr, #2]
 8024cb6:	437b      	muls	r3, r7
 8024cb8:	fb08 330c 	mla	r3, r8, ip, r3
 8024cbc:	f892 c002 	ldrb.w	ip, [r2, #2]
 8024cc0:	7882      	ldrb	r2, [r0, #2]
 8024cc2:	fb01 310c 	mla	r1, r1, ip, r3
 8024cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024cc8:	fb09 1902 	mla	r9, r9, r2, r1
 8024ccc:	78b1      	ldrb	r1, [r6, #2]
 8024cce:	fb11 f103 	smulbb	r1, r1, r3
 8024cd2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024cd6:	fb09 1505 	mla	r5, r9, r5, r1
 8024cda:	b2ad      	uxth	r5, r5
 8024cdc:	1c6b      	adds	r3, r5, #1
 8024cde:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024ce2:	122d      	asrs	r5, r5, #8
 8024ce4:	70b5      	strb	r5, [r6, #2]
 8024ce6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ce8:	3603      	adds	r6, #3
 8024cea:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8024cec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024cf0:	4413      	add	r3, r2
 8024cf2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024cf4:	931d      	str	r3, [sp, #116]	@ 0x74
 8024cf6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024cf8:	4413      	add	r3, r2
 8024cfa:	931e      	str	r3, [sp, #120]	@ 0x78
 8024cfc:	e73b      	b.n	8024b76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024cfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d00:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8024d02:	4433      	add	r3, r6
 8024d04:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d06:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d08:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024d0a:	4433      	add	r3, r6
 8024d0c:	931e      	str	r3, [sp, #120]	@ 0x78
 8024d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d10:	3b01      	subs	r3, #1
 8024d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d16:	3303      	adds	r3, #3
 8024d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8024d1a:	e70d      	b.n	8024b38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024d1c:	d028      	beq.n	8024d70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8024d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d20:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024d22:	3b01      	subs	r3, #1
 8024d24:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024d26:	fb00 5003 	mla	r0, r0, r3, r5
 8024d2a:	1400      	asrs	r0, r0, #16
 8024d2c:	f53f af21 	bmi.w	8024b72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024d30:	3901      	subs	r1, #1
 8024d32:	4288      	cmp	r0, r1
 8024d34:	f6bf af1d 	bge.w	8024b72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024d38:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024d3a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8024d3c:	fb01 0303 	mla	r3, r1, r3, r0
 8024d40:	141b      	asrs	r3, r3, #16
 8024d42:	f53f af16 	bmi.w	8024b72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024d46:	3a01      	subs	r2, #1
 8024d48:	4293      	cmp	r3, r2
 8024d4a:	f6bf af12 	bge.w	8024b72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024d4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d50:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8024d54:	1cdf      	adds	r7, r3, #3
 8024d56:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8024d5a:	f1b9 0f00 	cmp.w	r9, #0
 8024d5e:	dc73      	bgt.n	8024e48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024d68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024d6c:	441a      	add	r2, r3
 8024d6e:	920a      	str	r2, [sp, #40]	@ 0x28
 8024d70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024d72:	2b00      	cmp	r3, #0
 8024d74:	f340 8129 	ble.w	8024fca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8024d78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024d7c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024d7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024d82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024d86:	eef0 6a62 	vmov.f32	s13, s5
 8024d8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024d8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024d92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d96:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8024d9a:	eef0 6a43 	vmov.f32	s13, s6
 8024d9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024da2:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8024da6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024daa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024dae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024db2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024db6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024dba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024dbe:	ee12 2a90 	vmov	r2, s5
 8024dc2:	eef0 2a47 	vmov.f32	s5, s14
 8024dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024dca:	ee13 2a10 	vmov	r2, s6
 8024dce:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024dd0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024dd2:	eeb0 3a67 	vmov.f32	s6, s15
 8024dd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024dda:	9320      	str	r3, [sp, #128]	@ 0x80
 8024ddc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024dde:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024de0:	3b01      	subs	r3, #1
 8024de2:	930d      	str	r3, [sp, #52]	@ 0x34
 8024de4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024de6:	bf08      	it	eq
 8024de8:	4613      	moveq	r3, r2
 8024dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8024dec:	e696      	b.n	8024b1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024dee:	b149      	cbz	r1, 8024e04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024df0:	5caa      	ldrb	r2, [r5, r2]
 8024df2:	4670      	mov	r0, lr
 8024df4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024df8:	4422      	add	r2, r4
 8024dfa:	4677      	mov	r7, lr
 8024dfc:	e6fb      	b.n	8024bf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024dfe:	4670      	mov	r0, lr
 8024e00:	4672      	mov	r2, lr
 8024e02:	e6f8      	b.n	8024bf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024e04:	4670      	mov	r0, lr
 8024e06:	4672      	mov	r2, lr
 8024e08:	e7f7      	b.n	8024dfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024e0a:	f110 0c01 	adds.w	ip, r0, #1
 8024e0e:	f53f af6a 	bmi.w	8024ce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024e12:	4562      	cmp	r2, ip
 8024e14:	f6ff af67 	blt.w	8024ce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024e18:	f115 0c01 	adds.w	ip, r5, #1
 8024e1c:	f53f af63 	bmi.w	8024ce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024e20:	4567      	cmp	r7, ip
 8024e22:	f6ff af60 	blt.w	8024ce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024e28:	b23f      	sxth	r7, r7
 8024e2a:	b212      	sxth	r2, r2
 8024e2c:	9002      	str	r0, [sp, #8]
 8024e2e:	9701      	str	r7, [sp, #4]
 8024e30:	9200      	str	r2, [sp, #0]
 8024e32:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024e34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e36:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8024e3a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8024e3e:	4623      	mov	r3, r4
 8024e40:	4631      	mov	r1, r6
 8024e42:	f7ff fd69 	bl	8024918 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8024e46:	e74e      	b.n	8024ce6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024e48:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024e4a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8024e4c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024e50:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024e52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024e54:	1400      	asrs	r0, r0, #16
 8024e56:	142d      	asrs	r5, r5, #16
 8024e58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e5a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024e5e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024e62:	fb02 5000 	mla	r0, r2, r0, r5
 8024e66:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024e68:	f815 e000 	ldrb.w	lr, [r5, r0]
 8024e6c:	eb05 0c00 	add.w	ip, r5, r0
 8024e70:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024e74:	eb04 060e 	add.w	r6, r4, lr
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	f000 8097 	beq.w	8024fac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024e7e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024e86:	4425      	add	r5, r4
 8024e88:	2900      	cmp	r1, #0
 8024e8a:	f000 8098 	beq.w	8024fbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8024e8e:	eb0c 0002 	add.w	r0, ip, r2
 8024e92:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8024e96:	7840      	ldrb	r0, [r0, #1]
 8024e98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ea0:	4422      	add	r2, r4
 8024ea2:	4420      	add	r0, r4
 8024ea4:	b29b      	uxth	r3, r3
 8024ea6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8024eaa:	b289      	uxth	r1, r1
 8024eac:	f895 e000 	ldrb.w	lr, [r5]
 8024eb0:	3703      	adds	r7, #3
 8024eb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8024eb6:	fb03 f801 	mul.w	r8, r3, r1
 8024eba:	011b      	lsls	r3, r3, #4
 8024ebc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024ec0:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8024ec4:	eba3 0308 	sub.w	r3, r3, r8
 8024ec8:	b289      	uxth	r1, r1
 8024eca:	b29b      	uxth	r3, r3
 8024ecc:	ebac 0c01 	sub.w	ip, ip, r1
 8024ed0:	fb03 fe0e 	mul.w	lr, r3, lr
 8024ed4:	fa1f fc8c 	uxth.w	ip, ip
 8024ed8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024edc:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024ee0:	f892 b000 	ldrb.w	fp, [r2]
 8024ee4:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024ee8:	f890 b000 	ldrb.w	fp, [r0]
 8024eec:	fb08 ee0b 	mla	lr, r8, fp, lr
 8024ef0:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8024ef4:	fb1b fb03 	smulbb	fp, fp, r3
 8024ef8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024efe:	fb0e be0a 	mla	lr, lr, sl, fp
 8024f02:	fa1f fe8e 	uxth.w	lr, lr
 8024f06:	f10e 0b01 	add.w	fp, lr, #1
 8024f0a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8024f0e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024f12:	f807 ec06 	strb.w	lr, [r7, #-6]
 8024f16:	f895 e001 	ldrb.w	lr, [r5, #1]
 8024f1a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8024f1e:	fb03 fe0e 	mul.w	lr, r3, lr
 8024f22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024f24:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024f28:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024f2c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024f30:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024f34:	fb08 ee0b 	mla	lr, r8, fp, lr
 8024f38:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8024f3c:	fb1b fb03 	smulbb	fp, fp, r3
 8024f40:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024f46:	fb0e be0a 	mla	lr, lr, sl, fp
 8024f4a:	fa1f fe8e 	uxth.w	lr, lr
 8024f4e:	f10e 0b01 	add.w	fp, lr, #1
 8024f52:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8024f56:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024f5a:	f807 ec05 	strb.w	lr, [r7, #-5]
 8024f5e:	78ad      	ldrb	r5, [r5, #2]
 8024f60:	78b6      	ldrb	r6, [r6, #2]
 8024f62:	436b      	muls	r3, r5
 8024f64:	7895      	ldrb	r5, [r2, #2]
 8024f66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024f68:	fb0c 3306 	mla	r3, ip, r6, r3
 8024f6c:	fb01 3305 	mla	r3, r1, r5, r3
 8024f70:	7885      	ldrb	r5, [r0, #2]
 8024f72:	fb08 3805 	mla	r8, r8, r5, r3
 8024f76:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8024f7a:	fb13 f302 	smulbb	r3, r3, r2
 8024f7e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024f82:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8024f84:	fb08 380a 	mla	r8, r8, sl, r3
 8024f88:	fa1f f888 	uxth.w	r8, r8
 8024f8c:	f108 0301 	add.w	r3, r8, #1
 8024f90:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8024f94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f96:	4413      	add	r3, r2
 8024f98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024f9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024f9e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024fa0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024fa2:	f807 8c04 	strb.w	r8, [r7, #-4]
 8024fa6:	4413      	add	r3, r2
 8024fa8:	931e      	str	r3, [sp, #120]	@ 0x78
 8024faa:	e6d6      	b.n	8024d5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024fac:	b151      	cbz	r1, 8024fc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8024fae:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8024fb2:	4630      	mov	r0, r6
 8024fb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024fb8:	4422      	add	r2, r4
 8024fba:	4635      	mov	r5, r6
 8024fbc:	e772      	b.n	8024ea4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024fbe:	4630      	mov	r0, r6
 8024fc0:	4632      	mov	r2, r6
 8024fc2:	e76f      	b.n	8024ea4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024fc4:	4630      	mov	r0, r6
 8024fc6:	4632      	mov	r2, r6
 8024fc8:	e7f7      	b.n	8024fba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024fca:	b013      	add	sp, #76	@ 0x4c
 8024fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024fd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024fd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8024fd4:	784c      	ldrb	r4, [r1, #1]
 8024fd6:	f891 a002 	ldrb.w	sl, [r1, #2]
 8024fda:	0224      	lsls	r4, r4, #8
 8024fdc:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8024fe0:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8024fe4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8024fe8:	f891 a000 	ldrb.w	sl, [r1]
 8024fec:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8024ff0:	ea44 040a 	orr.w	r4, r4, sl
 8024ff4:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8024ff8:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8024ffc:	9401      	str	r4, [sp, #4]
 8024ffe:	fb05 c70e 	mla	r7, r5, lr, ip
 8025002:	2d00      	cmp	r5, #0
 8025004:	eb02 0807 	add.w	r8, r2, r7
 8025008:	db72      	blt.n	80250f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 802500a:	45a9      	cmp	r9, r5
 802500c:	dd70      	ble.n	80250f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 802500e:	f1bc 0f00 	cmp.w	ip, #0
 8025012:	db6b      	blt.n	80250ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8025014:	45e6      	cmp	lr, ip
 8025016:	dd69      	ble.n	80250ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8025018:	5dd7      	ldrb	r7, [r2, r7]
 802501a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802501e:	441f      	add	r7, r3
 8025020:	f11c 0201 	adds.w	r2, ip, #1
 8025024:	d467      	bmi.n	80250f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8025026:	4596      	cmp	lr, r2
 8025028:	dd65      	ble.n	80250f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802502a:	2800      	cmp	r0, #0
 802502c:	d063      	beq.n	80250f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802502e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025032:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025036:	441c      	add	r4, r3
 8025038:	3501      	adds	r5, #1
 802503a:	d460      	bmi.n	80250fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802503c:	45a9      	cmp	r9, r5
 802503e:	dd5e      	ble.n	80250fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025040:	2e00      	cmp	r6, #0
 8025042:	d05c      	beq.n	80250fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025044:	f1bc 0f00 	cmp.w	ip, #0
 8025048:	db57      	blt.n	80250fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802504a:	45e6      	cmp	lr, ip
 802504c:	dd55      	ble.n	80250fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802504e:	f818 500e 	ldrb.w	r5, [r8, lr]
 8025052:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025056:	441d      	add	r5, r3
 8025058:	f11c 0201 	adds.w	r2, ip, #1
 802505c:	d452      	bmi.n	8025104 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802505e:	4596      	cmp	lr, r2
 8025060:	dd50      	ble.n	8025104 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8025062:	2800      	cmp	r0, #0
 8025064:	d04e      	beq.n	8025104 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8025066:	44c6      	add	lr, r8
 8025068:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802506c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025070:	4413      	add	r3, r2
 8025072:	b280      	uxth	r0, r0
 8025074:	f897 8000 	ldrb.w	r8, [r7]
 8025078:	b2b2      	uxth	r2, r6
 802507a:	fb00 f602 	mul.w	r6, r0, r2
 802507e:	0100      	lsls	r0, r0, #4
 8025080:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025084:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8025088:	1b80      	subs	r0, r0, r6
 802508a:	fa1f fc82 	uxth.w	ip, r2
 802508e:	b282      	uxth	r2, r0
 8025090:	7820      	ldrb	r0, [r4, #0]
 8025092:	ebae 0e0c 	sub.w	lr, lr, ip
 8025096:	4350      	muls	r0, r2
 8025098:	fa1f fe8e 	uxth.w	lr, lr
 802509c:	fb0e 0808 	mla	r8, lr, r8, r0
 80250a0:	7828      	ldrb	r0, [r5, #0]
 80250a2:	fb0c 8800 	mla	r8, ip, r0, r8
 80250a6:	7818      	ldrb	r0, [r3, #0]
 80250a8:	fb06 8000 	mla	r0, r6, r0, r8
 80250ac:	1200      	asrs	r0, r0, #8
 80250ae:	7008      	strb	r0, [r1, #0]
 80250b0:	7860      	ldrb	r0, [r4, #1]
 80250b2:	f897 8001 	ldrb.w	r8, [r7, #1]
 80250b6:	4350      	muls	r0, r2
 80250b8:	fb0e 0808 	mla	r8, lr, r8, r0
 80250bc:	7868      	ldrb	r0, [r5, #1]
 80250be:	fb0c 8800 	mla	r8, ip, r0, r8
 80250c2:	7858      	ldrb	r0, [r3, #1]
 80250c4:	fb06 8000 	mla	r0, r6, r0, r8
 80250c8:	1200      	asrs	r0, r0, #8
 80250ca:	7048      	strb	r0, [r1, #1]
 80250cc:	78a0      	ldrb	r0, [r4, #2]
 80250ce:	78bf      	ldrb	r7, [r7, #2]
 80250d0:	4350      	muls	r0, r2
 80250d2:	78aa      	ldrb	r2, [r5, #2]
 80250d4:	fb0e 0007 	mla	r0, lr, r7, r0
 80250d8:	fb0c 0c02 	mla	ip, ip, r2, r0
 80250dc:	789a      	ldrb	r2, [r3, #2]
 80250de:	fb06 c202 	mla	r2, r6, r2, ip
 80250e2:	1212      	asrs	r2, r2, #8
 80250e4:	708a      	strb	r2, [r1, #2]
 80250e6:	b002      	add	sp, #8
 80250e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80250ec:	af01      	add	r7, sp, #4
 80250ee:	e797      	b.n	8025020 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80250f0:	ac01      	add	r4, sp, #4
 80250f2:	4627      	mov	r7, r4
 80250f4:	e7a0      	b.n	8025038 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80250f6:	ac01      	add	r4, sp, #4
 80250f8:	e79e      	b.n	8025038 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80250fa:	ad01      	add	r5, sp, #4
 80250fc:	e7ac      	b.n	8025058 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80250fe:	ab01      	add	r3, sp, #4
 8025100:	461d      	mov	r5, r3
 8025102:	e7b6      	b.n	8025072 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8025104:	ab01      	add	r3, sp, #4
 8025106:	e7b4      	b.n	8025072 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08025108 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802510c:	b08d      	sub	sp, #52	@ 0x34
 802510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025112:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8025116:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8025118:	900b      	str	r0, [sp, #44]	@ 0x2c
 802511a:	9306      	str	r3, [sp, #24]
 802511c:	6850      	ldr	r0, [r2, #4]
 802511e:	6812      	ldr	r2, [r2, #0]
 8025120:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025122:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8025126:	fb00 1303 	mla	r3, r0, r3, r1
 802512a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802512e:	18d3      	adds	r3, r2, r3
 8025130:	9307      	str	r3, [sp, #28]
 8025132:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	9308      	str	r3, [sp, #32]
 8025138:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802513a:	685d      	ldr	r5, [r3, #4]
 802513c:	3504      	adds	r5, #4
 802513e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025140:	2b00      	cmp	r3, #0
 8025142:	dc03      	bgt.n	802514c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8025144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025146:	2b00      	cmp	r3, #0
 8025148:	f340 81e6 	ble.w	8025518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802514c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802514e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025152:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025156:	1e48      	subs	r0, r1, #1
 8025158:	1e56      	subs	r6, r2, #1
 802515a:	9b06      	ldr	r3, [sp, #24]
 802515c:	2b00      	cmp	r3, #0
 802515e:	f340 80bd 	ble.w	80252dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025162:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025164:	1427      	asrs	r7, r4, #16
 8025166:	ea4f 4323 	mov.w	r3, r3, asr #16
 802516a:	d406      	bmi.n	802517a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802516c:	4287      	cmp	r7, r0
 802516e:	da04      	bge.n	802517a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025170:	2b00      	cmp	r3, #0
 8025172:	db02      	blt.n	802517a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025174:	42b3      	cmp	r3, r6
 8025176:	f2c0 80b2 	blt.w	80252de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802517a:	3701      	adds	r7, #1
 802517c:	f100 80a1 	bmi.w	80252c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025180:	42b9      	cmp	r1, r7
 8025182:	f2c0 809e 	blt.w	80252c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025186:	3301      	adds	r3, #1
 8025188:	f100 809b 	bmi.w	80252c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802518c:	429a      	cmp	r2, r3
 802518e:	f2c0 8098 	blt.w	80252c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025192:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8025196:	f1bb 0f00 	cmp.w	fp, #0
 802519a:	f340 80bf 	ble.w	802531c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802519e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80251a0:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80251a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80251a4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80251a8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80251ac:	1420      	asrs	r0, r4, #16
 80251ae:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80251b0:	ea4f 4723 	mov.w	r7, r3, asr #16
 80251b4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80251b8:	6892      	ldr	r2, [r2, #8]
 80251ba:	f100 8103 	bmi.w	80253c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80251be:	f102 3eff 	add.w	lr, r2, #4294967295
 80251c2:	4570      	cmp	r0, lr
 80251c4:	f280 80fe 	bge.w	80253c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80251c8:	2f00      	cmp	r7, #0
 80251ca:	f2c0 80fb 	blt.w	80253c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80251ce:	f10c 3eff 	add.w	lr, ip, #4294967295
 80251d2:	4577      	cmp	r7, lr
 80251d4:	f280 80f6 	bge.w	80253c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80251d8:	b212      	sxth	r2, r2
 80251da:	fb07 0002 	mla	r0, r7, r2, r0
 80251de:	9f08      	ldr	r7, [sp, #32]
 80251e0:	f817 8000 	ldrb.w	r8, [r7, r0]
 80251e4:	eb07 0e00 	add.w	lr, r7, r0
 80251e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80251ec:	eb05 0c08 	add.w	ip, r5, r8
 80251f0:	2b00      	cmp	r3, #0
 80251f2:	f000 80d8 	beq.w	80253a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80251f6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80251fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80251fe:	442f      	add	r7, r5
 8025200:	2900      	cmp	r1, #0
 8025202:	f000 80d9 	beq.w	80253b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025206:	eb0e 0002 	add.w	r0, lr, r2
 802520a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802520e:	7840      	ldrb	r0, [r0, #1]
 8025210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025214:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025218:	442a      	add	r2, r5
 802521a:	4428      	add	r0, r5
 802521c:	b29b      	uxth	r3, r3
 802521e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8025222:	b289      	uxth	r1, r1
 8025224:	f897 8000 	ldrb.w	r8, [r7]
 8025228:	fb03 f901 	mul.w	r9, r3, r1
 802522c:	011b      	lsls	r3, r3, #4
 802522e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025232:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8025236:	eba3 0309 	sub.w	r3, r3, r9
 802523a:	b289      	uxth	r1, r1
 802523c:	b29b      	uxth	r3, r3
 802523e:	ebae 0e01 	sub.w	lr, lr, r1
 8025242:	fb03 f808 	mul.w	r8, r3, r8
 8025246:	fa1f fe8e 	uxth.w	lr, lr
 802524a:	fb0e 880a 	mla	r8, lr, sl, r8
 802524e:	f892 a000 	ldrb.w	sl, [r2]
 8025252:	fb01 880a 	mla	r8, r1, sl, r8
 8025256:	f890 a000 	ldrb.w	sl, [r0]
 802525a:	fb09 880a 	mla	r8, r9, sl, r8
 802525e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025262:	f886 8000 	strb.w	r8, [r6]
 8025266:	f897 8001 	ldrb.w	r8, [r7, #1]
 802526a:	f89c a001 	ldrb.w	sl, [ip, #1]
 802526e:	fb03 f808 	mul.w	r8, r3, r8
 8025272:	fb0e 880a 	mla	r8, lr, sl, r8
 8025276:	f892 a001 	ldrb.w	sl, [r2, #1]
 802527a:	fb01 880a 	mla	r8, r1, sl, r8
 802527e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025282:	fb09 880a 	mla	r8, r9, sl, r8
 8025286:	ea4f 2828 	mov.w	r8, r8, asr #8
 802528a:	f886 8001 	strb.w	r8, [r6, #1]
 802528e:	78bf      	ldrb	r7, [r7, #2]
 8025290:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025294:	437b      	muls	r3, r7
 8025296:	7892      	ldrb	r2, [r2, #2]
 8025298:	fb0e 330c 	mla	r3, lr, ip, r3
 802529c:	fb01 3102 	mla	r1, r1, r2, r3
 80252a0:	7882      	ldrb	r2, [r0, #2]
 80252a2:	fb09 1902 	mla	r9, r9, r2, r1
 80252a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80252aa:	f886 9002 	strb.w	r9, [r6, #2]
 80252ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80252b0:	3603      	adds	r6, #3
 80252b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80252b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80252b8:	441c      	add	r4, r3
 80252ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80252bc:	4413      	add	r3, r2
 80252be:	9318      	str	r3, [sp, #96]	@ 0x60
 80252c0:	e769      	b.n	8025196 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80252c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80252c4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80252c6:	441c      	add	r4, r3
 80252c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80252ca:	443b      	add	r3, r7
 80252cc:	9318      	str	r3, [sp, #96]	@ 0x60
 80252ce:	9b06      	ldr	r3, [sp, #24]
 80252d0:	3b01      	subs	r3, #1
 80252d2:	9306      	str	r3, [sp, #24]
 80252d4:	9b07      	ldr	r3, [sp, #28]
 80252d6:	3303      	adds	r3, #3
 80252d8:	9307      	str	r3, [sp, #28]
 80252da:	e73e      	b.n	802515a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80252dc:	d026      	beq.n	802532c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80252de:	9b06      	ldr	r3, [sp, #24]
 80252e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80252e2:	3b01      	subs	r3, #1
 80252e4:	fb00 4003 	mla	r0, r0, r3, r4
 80252e8:	1400      	asrs	r0, r0, #16
 80252ea:	f53f af52 	bmi.w	8025192 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80252ee:	3901      	subs	r1, #1
 80252f0:	4288      	cmp	r0, r1
 80252f2:	f6bf af4e 	bge.w	8025192 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80252f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80252f8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80252fa:	fb01 0303 	mla	r3, r1, r3, r0
 80252fe:	141b      	asrs	r3, r3, #16
 8025300:	f53f af47 	bmi.w	8025192 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025304:	3a01      	subs	r2, #1
 8025306:	4293      	cmp	r3, r2
 8025308:	f6bf af43 	bge.w	8025192 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802530c:	9b07      	ldr	r3, [sp, #28]
 802530e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8025312:	f103 0803 	add.w	r8, r3, #3
 8025316:	f1ba 0f00 	cmp.w	sl, #0
 802531a:	dc71      	bgt.n	8025400 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802531c:	9b06      	ldr	r3, [sp, #24]
 802531e:	9a07      	ldr	r2, [sp, #28]
 8025320:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025324:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025328:	441a      	add	r2, r3
 802532a:	9207      	str	r2, [sp, #28]
 802532c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802532e:	2b00      	cmp	r3, #0
 8025330:	f340 80f2 	ble.w	8025518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025334:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802533a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802533e:	eeb0 6a62 	vmov.f32	s12, s5
 8025342:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025346:	ee31 1a05 	vadd.f32	s2, s2, s10
 802534a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802534e:	ee16 4a10 	vmov	r4, s12
 8025352:	eeb0 6a43 	vmov.f32	s12, s6
 8025356:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802535a:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 802535e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025362:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025366:	ee77 2a62 	vsub.f32	s5, s14, s5
 802536a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802536e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025372:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025376:	ee12 2a90 	vmov	r2, s5
 802537a:	eef0 2a47 	vmov.f32	s5, s14
 802537e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025382:	ee13 2a10 	vmov	r2, s6
 8025386:	9319      	str	r3, [sp, #100]	@ 0x64
 8025388:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802538a:	eeb0 3a67 	vmov.f32	s6, s15
 802538e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025392:	931a      	str	r3, [sp, #104]	@ 0x68
 8025394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025396:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025398:	3b01      	subs	r3, #1
 802539a:	9309      	str	r3, [sp, #36]	@ 0x24
 802539c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802539e:	bf08      	it	eq
 80253a0:	4613      	moveq	r3, r2
 80253a2:	9306      	str	r3, [sp, #24]
 80253a4:	e6cb      	b.n	802513e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80253a6:	b151      	cbz	r1, 80253be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80253a8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80253ac:	4660      	mov	r0, ip
 80253ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80253b2:	442a      	add	r2, r5
 80253b4:	4667      	mov	r7, ip
 80253b6:	e731      	b.n	802521c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80253b8:	4660      	mov	r0, ip
 80253ba:	4662      	mov	r2, ip
 80253bc:	e72e      	b.n	802521c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80253be:	4660      	mov	r0, ip
 80253c0:	4662      	mov	r2, ip
 80253c2:	e7f7      	b.n	80253b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80253c4:	f110 0e01 	adds.w	lr, r0, #1
 80253c8:	f53f af71 	bmi.w	80252ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80253cc:	4572      	cmp	r2, lr
 80253ce:	f6ff af6e 	blt.w	80252ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80253d2:	f117 0e01 	adds.w	lr, r7, #1
 80253d6:	f53f af6a 	bmi.w	80252ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80253da:	45f4      	cmp	ip, lr
 80253dc:	f6ff af67 	blt.w	80252ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80253e0:	b212      	sxth	r2, r2
 80253e2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80253e6:	fa0f f38c 	sxth.w	r3, ip
 80253ea:	9200      	str	r2, [sp, #0]
 80253ec:	4631      	mov	r1, r6
 80253ee:	9a08      	ldr	r2, [sp, #32]
 80253f0:	9301      	str	r3, [sp, #4]
 80253f2:	462b      	mov	r3, r5
 80253f4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80253f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80253fa:	f7ff fde9 	bl	8024fd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80253fe:	e756      	b.n	80252ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8025400:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025402:	1426      	asrs	r6, r4, #16
 8025404:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8025406:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802540a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802540e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025410:	1400      	asrs	r0, r0, #16
 8025412:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025416:	fb02 6000 	mla	r0, r2, r0, r6
 802541a:	9e08      	ldr	r6, [sp, #32]
 802541c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8025420:	eb06 0c00 	add.w	ip, r6, r0
 8025424:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025428:	eb05 070e 	add.w	r7, r5, lr
 802542c:	2b00      	cmp	r3, #0
 802542e:	d064      	beq.n	80254fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025430:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8025434:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025438:	442e      	add	r6, r5
 802543a:	2900      	cmp	r1, #0
 802543c:	d066      	beq.n	802550c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 802543e:	eb0c 0002 	add.w	r0, ip, r2
 8025442:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025446:	7840      	ldrb	r0, [r0, #1]
 8025448:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802544c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025450:	442a      	add	r2, r5
 8025452:	4428      	add	r0, r5
 8025454:	b29b      	uxth	r3, r3
 8025456:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802545a:	b289      	uxth	r1, r1
 802545c:	f896 e000 	ldrb.w	lr, [r6]
 8025460:	f108 0803 	add.w	r8, r8, #3
 8025464:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025468:	fb03 f901 	mul.w	r9, r3, r1
 802546c:	011b      	lsls	r3, r3, #4
 802546e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025472:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8025476:	eba3 0309 	sub.w	r3, r3, r9
 802547a:	b289      	uxth	r1, r1
 802547c:	b29b      	uxth	r3, r3
 802547e:	ebac 0c01 	sub.w	ip, ip, r1
 8025482:	fb03 fe0e 	mul.w	lr, r3, lr
 8025486:	fa1f fc8c 	uxth.w	ip, ip
 802548a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802548e:	f892 b000 	ldrb.w	fp, [r2]
 8025492:	fb01 ee0b 	mla	lr, r1, fp, lr
 8025496:	f890 b000 	ldrb.w	fp, [r0]
 802549a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802549e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80254a2:	f808 ec06 	strb.w	lr, [r8, #-6]
 80254a6:	f896 e001 	ldrb.w	lr, [r6, #1]
 80254aa:	f897 b001 	ldrb.w	fp, [r7, #1]
 80254ae:	fb03 fe0e 	mul.w	lr, r3, lr
 80254b2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80254b6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80254ba:	fb01 ee0b 	mla	lr, r1, fp, lr
 80254be:	f890 b001 	ldrb.w	fp, [r0, #1]
 80254c2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80254c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80254ca:	f808 ec05 	strb.w	lr, [r8, #-5]
 80254ce:	78b6      	ldrb	r6, [r6, #2]
 80254d0:	78bf      	ldrb	r7, [r7, #2]
 80254d2:	4373      	muls	r3, r6
 80254d4:	7896      	ldrb	r6, [r2, #2]
 80254d6:	7882      	ldrb	r2, [r0, #2]
 80254d8:	fb0c 3307 	mla	r3, ip, r7, r3
 80254dc:	fb01 3306 	mla	r3, r1, r6, r3
 80254e0:	fb09 3902 	mla	r9, r9, r2, r3
 80254e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80254e8:	441c      	add	r4, r3
 80254ea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80254ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 80254f0:	4413      	add	r3, r2
 80254f2:	f808 9c04 	strb.w	r9, [r8, #-4]
 80254f6:	9318      	str	r3, [sp, #96]	@ 0x60
 80254f8:	e70d      	b.n	8025316 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80254fa:	b151      	cbz	r1, 8025512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80254fc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025500:	4638      	mov	r0, r7
 8025502:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025506:	442a      	add	r2, r5
 8025508:	463e      	mov	r6, r7
 802550a:	e7a3      	b.n	8025454 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802550c:	4638      	mov	r0, r7
 802550e:	463a      	mov	r2, r7
 8025510:	e7a0      	b.n	8025454 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8025512:	4638      	mov	r0, r7
 8025514:	463a      	mov	r2, r7
 8025516:	e7f7      	b.n	8025508 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025518:	b00d      	add	sp, #52	@ 0x34
 802551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802551e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 802551e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025522:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8025526:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 802552a:	2d00      	cmp	r5, #0
 802552c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8025530:	fb05 700c 	mla	r0, r5, ip, r7
 8025534:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8025538:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 802553c:	eb02 0800 	add.w	r8, r2, r0
 8025540:	f2c0 8118 	blt.w	8025774 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8025544:	45a9      	cmp	r9, r5
 8025546:	f340 8115 	ble.w	8025774 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802554a:	2f00      	cmp	r7, #0
 802554c:	f2c0 8110 	blt.w	8025770 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8025550:	45bc      	cmp	ip, r7
 8025552:	f340 810d 	ble.w	8025770 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8025556:	5c12      	ldrb	r2, [r2, r0]
 8025558:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802555c:	1c7a      	adds	r2, r7, #1
 802555e:	f100 810c 	bmi.w	802577a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8025562:	4594      	cmp	ip, r2
 8025564:	f340 8109 	ble.w	802577a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8025568:	2c00      	cmp	r4, #0
 802556a:	f000 8108 	beq.w	802577e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 802556e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025572:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025576:	3501      	adds	r5, #1
 8025578:	f100 8105 	bmi.w	8025786 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802557c:	45a9      	cmp	r9, r5
 802557e:	f340 8102 	ble.w	8025786 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8025582:	f1be 0f00 	cmp.w	lr, #0
 8025586:	f000 8101 	beq.w	802578c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 802558a:	2f00      	cmp	r7, #0
 802558c:	f2c0 80f9 	blt.w	8025782 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8025590:	45bc      	cmp	ip, r7
 8025592:	f340 80f6 	ble.w	8025782 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8025596:	f818 200c 	ldrb.w	r2, [r8, ip]
 802559a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802559e:	3701      	adds	r7, #1
 80255a0:	f100 80f7 	bmi.w	8025792 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80255a4:	45bc      	cmp	ip, r7
 80255a6:	f340 80f4 	ble.w	8025792 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80255aa:	2c00      	cmp	r4, #0
 80255ac:	f000 80f3 	beq.w	8025796 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 80255b0:	44c4      	add	ip, r8
 80255b2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80255b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80255ba:	fa1f fc84 	uxth.w	ip, r4
 80255be:	fa1f f48e 	uxth.w	r4, lr
 80255c2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80255c6:	fb04 fe0c 	mul.w	lr, r4, ip
 80255ca:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80255ce:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80255d2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80255d6:	ebac 070e 	sub.w	r7, ip, lr
 80255da:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80255de:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80255e2:	b2a4      	uxth	r4, r4
 80255e4:	b2bf      	uxth	r7, r7
 80255e6:	1b1b      	subs	r3, r3, r4
 80255e8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80255ec:	fb07 fc0a 	mul.w	ip, r7, sl
 80255f0:	b29b      	uxth	r3, r3
 80255f2:	fb03 cc0b 	mla	ip, r3, fp, ip
 80255f6:	9300      	str	r3, [sp, #0]
 80255f8:	fb04 cc09 	mla	ip, r4, r9, ip
 80255fc:	fb0e cc08 	mla	ip, lr, r8, ip
 8025600:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025604:	9301      	str	r3, [sp, #4]
 8025606:	2b00      	cmp	r3, #0
 8025608:	f000 80af 	beq.w	802576a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 802560c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8025610:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025614:	fb0b fc0c 	mul.w	ip, fp, ip
 8025618:	fb0b f606 	mul.w	r6, fp, r6
 802561c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025620:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025624:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8025628:	44dc      	add	ip, fp
 802562a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 802562e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025632:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025636:	fb0a fb0b 	mul.w	fp, sl, fp
 802563a:	fb0a fa00 	mul.w	sl, sl, r0
 802563e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8025642:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8025646:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802564a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802564e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025652:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025656:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802565a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802565e:	0a36      	lsrs	r6, r6, #8
 8025660:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025664:	44dc      	add	ip, fp
 8025666:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802566a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802566e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025672:	fb09 fb0b 	mul.w	fp, r9, fp
 8025676:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802567a:	fb09 f905 	mul.w	r9, r9, r5
 802567e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8025682:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025686:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802568a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802568e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025692:	fb0c fc07 	mul.w	ip, ip, r7
 8025696:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802569a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802569e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80256a2:	4458      	add	r0, fp
 80256a4:	fb08 f505 	mul.w	r5, r8, r5
 80256a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80256ac:	fb08 f802 	mul.w	r8, r8, r2
 80256b0:	0a00      	lsrs	r0, r0, #8
 80256b2:	0a2a      	lsrs	r2, r5, #8
 80256b4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80256b8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80256bc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80256c0:	4415      	add	r5, r2
 80256c2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80256c6:	0a2d      	lsrs	r5, r5, #8
 80256c8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80256cc:	9a00      	ldr	r2, [sp, #0]
 80256ce:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80256d2:	fb03 cc02 	mla	ip, r3, r2, ip
 80256d6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80256da:	9b01      	ldr	r3, [sp, #4]
 80256dc:	fb05 c50e 	mla	r5, r5, lr, ip
 80256e0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80256e4:	fb00 5004 	mla	r0, r0, r4, r5
 80256e8:	0a00      	lsrs	r0, r0, #8
 80256ea:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80256ee:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80256f2:	4378      	muls	r0, r7
 80256f4:	fb02 0006 	mla	r0, r2, r6, r0
 80256f8:	fb0e 0e08 	mla	lr, lr, r8, r0
 80256fc:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8025700:	fb04 e000 	mla	r0, r4, r0, lr
 8025704:	0a00      	lsrs	r0, r0, #8
 8025706:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802570a:	4328      	orrs	r0, r5
 802570c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8025710:	b2ad      	uxth	r5, r5
 8025712:	b2c4      	uxtb	r4, r0
 8025714:	436b      	muls	r3, r5
 8025716:	fb14 f405 	smulbb	r4, r4, r5
 802571a:	1c5a      	adds	r2, r3, #1
 802571c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025720:	780b      	ldrb	r3, [r1, #0]
 8025722:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8025726:	b2d2      	uxtb	r2, r2
 8025728:	fb03 4302 	mla	r3, r3, r2, r4
 802572c:	b29b      	uxth	r3, r3
 802572e:	1c5c      	adds	r4, r3, #1
 8025730:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8025734:	784c      	ldrb	r4, [r1, #1]
 8025736:	fb14 f402 	smulbb	r4, r4, r2
 802573a:	121b      	asrs	r3, r3, #8
 802573c:	700b      	strb	r3, [r1, #0]
 802573e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8025742:	fb03 4305 	mla	r3, r3, r5, r4
 8025746:	b29b      	uxth	r3, r3
 8025748:	1c5c      	adds	r4, r3, #1
 802574a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802574e:	0c04      	lsrs	r4, r0, #16
 8025750:	7888      	ldrb	r0, [r1, #2]
 8025752:	121b      	asrs	r3, r3, #8
 8025754:	fb10 f002 	smulbb	r0, r0, r2
 8025758:	704b      	strb	r3, [r1, #1]
 802575a:	fb04 0005 	mla	r0, r4, r5, r0
 802575e:	b280      	uxth	r0, r0
 8025760:	1c43      	adds	r3, r0, #1
 8025762:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025766:	1200      	asrs	r0, r0, #8
 8025768:	7088      	strb	r0, [r1, #2]
 802576a:	b003      	add	sp, #12
 802576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025770:	2600      	movs	r6, #0
 8025772:	e6f3      	b.n	802555c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8025774:	2000      	movs	r0, #0
 8025776:	4606      	mov	r6, r0
 8025778:	e6fd      	b.n	8025576 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802577a:	2000      	movs	r0, #0
 802577c:	e6fb      	b.n	8025576 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802577e:	4620      	mov	r0, r4
 8025780:	e6f9      	b.n	8025576 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8025782:	2500      	movs	r5, #0
 8025784:	e70b      	b.n	802559e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8025786:	2200      	movs	r2, #0
 8025788:	4615      	mov	r5, r2
 802578a:	e716      	b.n	80255ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802578c:	4672      	mov	r2, lr
 802578e:	4675      	mov	r5, lr
 8025790:	e713      	b.n	80255ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8025792:	2200      	movs	r2, #0
 8025794:	e711      	b.n	80255ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8025796:	4622      	mov	r2, r4
 8025798:	e70f      	b.n	80255ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0802579a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802579a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802579e:	b09f      	sub	sp, #124	@ 0x7c
 80257a0:	921b      	str	r2, [sp, #108]	@ 0x6c
 80257a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80257a4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80257a6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80257aa:	901d      	str	r0, [sp, #116]	@ 0x74
 80257ac:	931c      	str	r3, [sp, #112]	@ 0x70
 80257ae:	6850      	ldr	r0, [r2, #4]
 80257b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80257b2:	6812      	ldr	r2, [r2, #0]
 80257b4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80257b6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80257ba:	fb00 1303 	mla	r3, r0, r3, r1
 80257be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80257c2:	18d3      	adds	r3, r2, r3
 80257c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80257c6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80257c8:	681b      	ldr	r3, [r3, #0]
 80257ca:	9312      	str	r3, [sp, #72]	@ 0x48
 80257cc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80257ce:	685e      	ldr	r6, [r3, #4]
 80257d0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80257d4:	3604      	adds	r6, #4
 80257d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80257d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80257da:	2b00      	cmp	r3, #0
 80257dc:	dc03      	bgt.n	80257e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80257de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80257e0:	2b00      	cmp	r3, #0
 80257e2:	f340 8378 	ble.w	8025ed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80257e6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80257e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80257f0:	1e48      	subs	r0, r1, #1
 80257f2:	1e57      	subs	r7, r2, #1
 80257f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257f6:	2b00      	cmp	r3, #0
 80257f8:	f340 818c 	ble.w	8025b14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80257fc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80257fe:	142b      	asrs	r3, r5, #16
 8025800:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025804:	d406      	bmi.n	8025814 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025806:	4584      	cmp	ip, r0
 8025808:	da04      	bge.n	8025814 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802580a:	2b00      	cmp	r3, #0
 802580c:	db02      	blt.n	8025814 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802580e:	42bb      	cmp	r3, r7
 8025810:	f2c0 8181 	blt.w	8025b16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025814:	f11c 0c01 	adds.w	ip, ip, #1
 8025818:	f100 816f 	bmi.w	8025afa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802581c:	4561      	cmp	r1, ip
 802581e:	f2c0 816c 	blt.w	8025afa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8025822:	3301      	adds	r3, #1
 8025824:	f100 8169 	bmi.w	8025afa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8025828:	429a      	cmp	r2, r3
 802582a:	f2c0 8166 	blt.w	8025afa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802582e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025830:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025832:	931a      	str	r3, [sp, #104]	@ 0x68
 8025834:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025836:	2b00      	cmp	r3, #0
 8025838:	f340 818c 	ble.w	8025b54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802583c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802583e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025842:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025846:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802584a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802584c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025850:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025852:	141b      	asrs	r3, r3, #16
 8025854:	f100 81d0 	bmi.w	8025bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025858:	f100 38ff 	add.w	r8, r0, #4294967295
 802585c:	4543      	cmp	r3, r8
 802585e:	f280 81cb 	bge.w	8025bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025862:	f1bc 0f00 	cmp.w	ip, #0
 8025866:	f2c0 81c7 	blt.w	8025bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802586a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802586e:	45c4      	cmp	ip, r8
 8025870:	f280 81c2 	bge.w	8025bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025874:	b200      	sxth	r0, r0
 8025876:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025878:	fb0c 3300 	mla	r3, ip, r0, r3
 802587c:	eb04 0803 	add.w	r8, r4, r3
 8025880:	5ce3      	ldrb	r3, [r4, r3]
 8025882:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025886:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802588a:	2a00      	cmp	r2, #0
 802588c:	f000 81a9 	beq.w	8025be2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8025890:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025894:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025898:	940e      	str	r4, [sp, #56]	@ 0x38
 802589a:	0e24      	lsrs	r4, r4, #24
 802589c:	9415      	str	r4, [sp, #84]	@ 0x54
 802589e:	b179      	cbz	r1, 80258c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80258a0:	eb08 0c00 	add.w	ip, r8, r0
 80258a4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80258a8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80258ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80258ae:	0e00      	lsrs	r0, r0, #24
 80258b0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80258b2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80258b6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80258ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80258bc:	0e00      	lsrs	r0, r0, #24
 80258be:	9016      	str	r0, [sp, #88]	@ 0x58
 80258c0:	b292      	uxth	r2, r2
 80258c2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80258c4:	b289      	uxth	r1, r1
 80258c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80258c8:	fb02 f901 	mul.w	r9, r2, r1
 80258cc:	0112      	lsls	r2, r2, #4
 80258ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80258d2:	eba2 0809 	sub.w	r8, r2, r9
 80258d6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80258da:	b289      	uxth	r1, r1
 80258dc:	fa1f f888 	uxth.w	r8, r8
 80258e0:	1a52      	subs	r2, r2, r1
 80258e2:	fb08 f000 	mul.w	r0, r8, r0
 80258e6:	b292      	uxth	r2, r2
 80258e8:	fb02 000e 	mla	r0, r2, lr, r0
 80258ec:	fb01 0004 	mla	r0, r1, r4, r0
 80258f0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80258f2:	fb09 0004 	mla	r0, r9, r4, r0
 80258f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80258fa:	2800      	cmp	r0, #0
 80258fc:	f000 80f2 	beq.w	8025ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025900:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025904:	d01b      	beq.n	802593e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025906:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802590a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802590e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025912:	fb0e fe03 	mul.w	lr, lr, r3
 8025916:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802591a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802591e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025922:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025926:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802592a:	4453      	add	r3, sl
 802592c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025930:	0a1b      	lsrs	r3, r3, #8
 8025932:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025936:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802593a:	ea43 030c 	orr.w	r3, r3, ip
 802593e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025940:	2cff      	cmp	r4, #255	@ 0xff
 8025942:	d021      	beq.n	8025988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025944:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025946:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802594a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802594c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025950:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025952:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025956:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025958:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802595c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025960:	fb04 fa0a 	mul.w	sl, r4, sl
 8025964:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025968:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802596c:	44de      	add	lr, fp
 802596e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025972:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025976:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802597a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802597e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025982:	ea4e 040a 	orr.w	r4, lr, sl
 8025986:	940e      	str	r4, [sp, #56]	@ 0x38
 8025988:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802598a:	2cff      	cmp	r4, #255	@ 0xff
 802598c:	d021      	beq.n	80259d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802598e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025990:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025994:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025996:	fb04 fb0b 	mul.w	fp, r4, fp
 802599a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802599c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80259a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80259a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80259a6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80259aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80259ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80259b2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80259b6:	44de      	add	lr, fp
 80259b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80259bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259c4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80259c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80259cc:	ea4e 040a 	orr.w	r4, lr, sl
 80259d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80259d2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80259d4:	2cff      	cmp	r4, #255	@ 0xff
 80259d6:	d021      	beq.n	8025a1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80259d8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80259da:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80259de:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80259e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80259e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80259e6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80259ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80259ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80259f0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80259f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80259f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80259fc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025a00:	44de      	add	lr, fp
 8025a02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a12:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a16:	ea4e 040a 	orr.w	r4, lr, sl
 8025a1a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025a1c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025a1e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025a22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025a26:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025a2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a2c:	fb08 fc0c 	mul.w	ip, r8, ip
 8025a30:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025a34:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025a38:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025a3a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025a3e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025a42:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025a44:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025a48:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025a4c:	fb08 f80e 	mul.w	r8, r8, lr
 8025a50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a54:	fb02 8303 	mla	r3, r2, r3, r8
 8025a58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025a5a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a5e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025a62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025a64:	fb01 330a 	mla	r3, r1, sl, r3
 8025a68:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8025a6c:	fb09 3901 	mla	r9, r9, r1, r3
 8025a70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025a72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025a74:	4343      	muls	r3, r0
 8025a76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a7a:	1c58      	adds	r0, r3, #1
 8025a7c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025a80:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025a84:	ea4c 0c09 	orr.w	ip, ip, r9
 8025a88:	783b      	ldrb	r3, [r7, #0]
 8025a8a:	fa5f f28c 	uxtb.w	r2, ip
 8025a8e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025a92:	fb12 f201 	smulbb	r2, r2, r1
 8025a96:	b2c0      	uxtb	r0, r0
 8025a98:	fb03 2300 	mla	r3, r3, r0, r2
 8025a9c:	b29b      	uxth	r3, r3
 8025a9e:	1c5a      	adds	r2, r3, #1
 8025aa0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025aa4:	787a      	ldrb	r2, [r7, #1]
 8025aa6:	fb12 f200 	smulbb	r2, r2, r0
 8025aaa:	121b      	asrs	r3, r3, #8
 8025aac:	703b      	strb	r3, [r7, #0]
 8025aae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025ab2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025ab6:	fb03 2301 	mla	r3, r3, r1, r2
 8025aba:	b29b      	uxth	r3, r3
 8025abc:	1c5a      	adds	r2, r3, #1
 8025abe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ac2:	121b      	asrs	r3, r3, #8
 8025ac4:	707b      	strb	r3, [r7, #1]
 8025ac6:	78bb      	ldrb	r3, [r7, #2]
 8025ac8:	fb13 f000 	smulbb	r0, r3, r0
 8025acc:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025ad0:	fa1f fc8c 	uxth.w	ip, ip
 8025ad4:	f10c 0301 	add.w	r3, ip, #1
 8025ad8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025adc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025ae0:	f887 c002 	strb.w	ip, [r7, #2]
 8025ae4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025ae6:	3703      	adds	r7, #3
 8025ae8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025aea:	441a      	add	r2, r3
 8025aec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025aee:	441d      	add	r5, r3
 8025af0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025af2:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025af4:	3b01      	subs	r3, #1
 8025af6:	931a      	str	r3, [sp, #104]	@ 0x68
 8025af8:	e69c      	b.n	8025834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025afa:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025afc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025afe:	441c      	add	r4, r3
 8025b00:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025b02:	441d      	add	r5, r3
 8025b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b06:	9429      	str	r4, [sp, #164]	@ 0xa4
 8025b08:	3b01      	subs	r3, #1
 8025b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b0e:	3303      	adds	r3, #3
 8025b10:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b12:	e66f      	b.n	80257f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8025b14:	d026      	beq.n	8025b64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8025b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b18:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8025b1a:	3b01      	subs	r3, #1
 8025b1c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025b1e:	fb00 4003 	mla	r0, r0, r3, r4
 8025b22:	1400      	asrs	r0, r0, #16
 8025b24:	f53f ae83 	bmi.w	802582e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025b28:	3901      	subs	r1, #1
 8025b2a:	4288      	cmp	r0, r1
 8025b2c:	f6bf ae7f 	bge.w	802582e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025b30:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025b32:	fb01 5303 	mla	r3, r1, r3, r5
 8025b36:	141b      	asrs	r3, r3, #16
 8025b38:	f53f ae79 	bmi.w	802582e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025b3c:	3a01      	subs	r2, #1
 8025b3e:	4293      	cmp	r3, r2
 8025b40:	f6bf ae75 	bge.w	802582e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025b44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b46:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025b4a:	f103 0e03 	add.w	lr, r3, #3
 8025b4e:	f1bb 0f00 	cmp.w	fp, #0
 8025b52:	dc71      	bgt.n	8025c38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b56:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025b5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025b60:	4423      	add	r3, r4
 8025b62:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	f340 81b5 	ble.w	8025ed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8025b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025b70:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025b72:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025b76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025b7a:	eef0 6a62 	vmov.f32	s13, s5
 8025b7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025b86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b8a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8025b8e:	eef0 6a43 	vmov.f32	s13, s6
 8025b92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b96:	ee16 5a90 	vmov	r5, s13
 8025b9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025b9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025ba2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ba6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025baa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025bae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025bb2:	ee12 2a90 	vmov	r2, s5
 8025bb6:	eef0 2a47 	vmov.f32	s5, s14
 8025bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bbe:	ee13 2a10 	vmov	r2, s6
 8025bc2:	932b      	str	r3, [sp, #172]	@ 0xac
 8025bc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025bc6:	eeb0 3a67 	vmov.f32	s6, s15
 8025bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bce:	932c      	str	r3, [sp, #176]	@ 0xb0
 8025bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025bd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8025bd4:	3b01      	subs	r3, #1
 8025bd6:	9319      	str	r3, [sp, #100]	@ 0x64
 8025bd8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025bda:	bf08      	it	eq
 8025bdc:	4613      	moveq	r3, r2
 8025bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8025be0:	e5fa      	b.n	80257d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025be2:	2900      	cmp	r1, #0
 8025be4:	f43f ae6c 	beq.w	80258c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8025be8:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025bec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025bf0:	900a      	str	r0, [sp, #40]	@ 0x28
 8025bf2:	0e00      	lsrs	r0, r0, #24
 8025bf4:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025bf6:	e663      	b.n	80258c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8025bf8:	f113 0801 	adds.w	r8, r3, #1
 8025bfc:	f53f af72 	bmi.w	8025ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025c00:	4540      	cmp	r0, r8
 8025c02:	f6ff af6f 	blt.w	8025ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025c06:	f11c 0801 	adds.w	r8, ip, #1
 8025c0a:	f53f af6b 	bmi.w	8025ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025c0e:	45c6      	cmp	lr, r8
 8025c10:	f6ff af68 	blt.w	8025ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025c14:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025c16:	b200      	sxth	r0, r0
 8025c18:	9302      	str	r3, [sp, #8]
 8025c1a:	fa0f f38e 	sxth.w	r3, lr
 8025c1e:	9000      	str	r0, [sp, #0]
 8025c20:	9301      	str	r3, [sp, #4]
 8025c22:	4633      	mov	r3, r6
 8025c24:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025c26:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025c2a:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025c2e:	4639      	mov	r1, r7
 8025c30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025c32:	f7ff fc74 	bl	802551e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8025c36:	e755      	b.n	8025ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025c38:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025c3a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025c3e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025c40:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025c44:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025c46:	1427      	asrs	r7, r4, #16
 8025c48:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025c4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025c4e:	142b      	asrs	r3, r5, #16
 8025c50:	fb01 7303 	mla	r3, r1, r3, r7
 8025c54:	18e7      	adds	r7, r4, r3
 8025c56:	5ce3      	ldrb	r3, [r4, r3]
 8025c58:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025c5c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025c60:	2a00      	cmp	r2, #0
 8025c62:	f000 812e 	beq.w	8025ec2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8025c66:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025c6a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025c6e:	9410      	str	r4, [sp, #64]	@ 0x40
 8025c70:	0e24      	lsrs	r4, r4, #24
 8025c72:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025c74:	b170      	cbz	r0, 8025c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8025c76:	eb07 0801 	add.w	r8, r7, r1
 8025c7a:	5c79      	ldrb	r1, [r7, r1]
 8025c7c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c80:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025c82:	0e09      	lsrs	r1, r1, #24
 8025c84:	9114      	str	r1, [sp, #80]	@ 0x50
 8025c86:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025c8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c8e:	9111      	str	r1, [sp, #68]	@ 0x44
 8025c90:	0e09      	lsrs	r1, r1, #24
 8025c92:	9118      	str	r1, [sp, #96]	@ 0x60
 8025c94:	b292      	uxth	r2, r2
 8025c96:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025c98:	b280      	uxth	r0, r0
 8025c9a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025c9c:	fb02 f900 	mul.w	r9, r2, r0
 8025ca0:	0112      	lsls	r2, r2, #4
 8025ca2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025ca6:	eba2 0809 	sub.w	r8, r2, r9
 8025caa:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025cae:	b280      	uxth	r0, r0
 8025cb0:	fa1f f888 	uxth.w	r8, r8
 8025cb4:	1a12      	subs	r2, r2, r0
 8025cb6:	fb08 f101 	mul.w	r1, r8, r1
 8025cba:	b292      	uxth	r2, r2
 8025cbc:	fb02 110c 	mla	r1, r2, ip, r1
 8025cc0:	fb00 1104 	mla	r1, r0, r4, r1
 8025cc4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025cc6:	fb09 1104 	mla	r1, r9, r4, r1
 8025cca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025cce:	2900      	cmp	r1, #0
 8025cd0:	f000 80ec 	beq.w	8025eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8025cd4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025cd8:	d019      	beq.n	8025d0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8025cda:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025cde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025ce2:	fb0c fa0a 	mul.w	sl, ip, sl
 8025ce6:	fb0c fc03 	mul.w	ip, ip, r3
 8025cea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025cee:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025cf2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025cf6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025cfa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025cfe:	4453      	add	r3, sl
 8025d00:	0a3f      	lsrs	r7, r7, #8
 8025d02:	0a1b      	lsrs	r3, r3, #8
 8025d04:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025d08:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025d0c:	433b      	orrs	r3, r7
 8025d0e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025d10:	2cff      	cmp	r4, #255	@ 0xff
 8025d12:	d020      	beq.n	8025d56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8025d14:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025d16:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025d1a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025d1c:	4367      	muls	r7, r4
 8025d1e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025d20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d24:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025d28:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025d2a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025d2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d32:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d36:	44bc      	add	ip, r7
 8025d38:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025d3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d4c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025d50:	ea4c 040a 	orr.w	r4, ip, sl
 8025d54:	9410      	str	r4, [sp, #64]	@ 0x40
 8025d56:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d58:	2cff      	cmp	r4, #255	@ 0xff
 8025d5a:	d020      	beq.n	8025d9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8025d5c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d5e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025d62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d64:	4367      	muls	r7, r4
 8025d66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d6c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025d70:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d72:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025d76:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d7e:	44bc      	add	ip, r7
 8025d80:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025d84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d8c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d94:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025d98:	ea4c 040a 	orr.w	r4, ip, sl
 8025d9c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025d9e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025da0:	2cff      	cmp	r4, #255	@ 0xff
 8025da2:	d020      	beq.n	8025de6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8025da4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025da6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025daa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025dac:	4367      	muls	r7, r4
 8025dae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025db0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025db4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025db8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025dba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025dbe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025dc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8025dc6:	44bc      	add	ip, r7
 8025dc8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025dcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025dd0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025dd4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025dd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ddc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025de0:	ea4c 040a 	orr.w	r4, ip, sl
 8025de4:	9411      	str	r4, [sp, #68]	@ 0x44
 8025de6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025de8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025dec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025df0:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025df4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025df6:	fb08 f707 	mul.w	r7, r8, r7
 8025dfa:	fb02 770c 	mla	r7, r2, ip, r7
 8025dfe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025e02:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025e04:	fb00 770c 	mla	r7, r0, ip, r7
 8025e08:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025e0c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025e0e:	fb09 770c 	mla	r7, r9, ip, r7
 8025e12:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025e16:	fb08 f80c 	mul.w	r8, r8, ip
 8025e1a:	0a3f      	lsrs	r7, r7, #8
 8025e1c:	fb02 8303 	mla	r3, r2, r3, r8
 8025e20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025e22:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025e26:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025e2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025e2c:	fb00 330a 	mla	r3, r0, sl, r3
 8025e30:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025e34:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025e36:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025e3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025e3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e40:	434b      	muls	r3, r1
 8025e42:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025e46:	1c59      	adds	r1, r3, #1
 8025e48:	ea47 070c 	orr.w	r7, r7, ip
 8025e4c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025e50:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025e54:	b2fa      	uxtb	r2, r7
 8025e56:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025e5a:	fb12 f200 	smulbb	r2, r2, r0
 8025e5e:	b2c9      	uxtb	r1, r1
 8025e60:	fb03 2301 	mla	r3, r3, r1, r2
 8025e64:	b29b      	uxth	r3, r3
 8025e66:	1c5a      	adds	r2, r3, #1
 8025e68:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025e6c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025e70:	fb12 f201 	smulbb	r2, r2, r1
 8025e74:	121b      	asrs	r3, r3, #8
 8025e76:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025e7a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8025e7e:	0c3f      	lsrs	r7, r7, #16
 8025e80:	fb03 2300 	mla	r3, r3, r0, r2
 8025e84:	b29b      	uxth	r3, r3
 8025e86:	1c5a      	adds	r2, r3, #1
 8025e88:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025e8c:	121b      	asrs	r3, r3, #8
 8025e8e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025e92:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025e96:	fb13 f101 	smulbb	r1, r3, r1
 8025e9a:	fb07 1700 	mla	r7, r7, r0, r1
 8025e9e:	b2bf      	uxth	r7, r7
 8025ea0:	1c7b      	adds	r3, r7, #1
 8025ea2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025ea6:	123f      	asrs	r7, r7, #8
 8025ea8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025eac:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025eae:	f10e 0e03 	add.w	lr, lr, #3
 8025eb2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025eb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025eb8:	441a      	add	r2, r3
 8025eba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ebc:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025ebe:	441d      	add	r5, r3
 8025ec0:	e645      	b.n	8025b4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8025ec2:	2800      	cmp	r0, #0
 8025ec4:	f43f aee6 	beq.w	8025c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8025ec8:	5c79      	ldrb	r1, [r7, r1]
 8025eca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ece:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025ed0:	0e09      	lsrs	r1, r1, #24
 8025ed2:	9114      	str	r1, [sp, #80]	@ 0x50
 8025ed4:	e6de      	b.n	8025c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8025ed6:	b01f      	add	sp, #124	@ 0x7c
 8025ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025edc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ee0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8025ee4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8025ee8:	2d00      	cmp	r5, #0
 8025eea:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8025eee:	fb05 700e 	mla	r0, r5, lr, r7
 8025ef2:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8025ef6:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8025efa:	eb02 0800 	add.w	r8, r2, r0
 8025efe:	f2c0 8105 	blt.w	802610c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8025f02:	45a9      	cmp	r9, r5
 8025f04:	f340 8102 	ble.w	802610c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8025f08:	2f00      	cmp	r7, #0
 8025f0a:	f2c0 80fd 	blt.w	8026108 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8025f0e:	45be      	cmp	lr, r7
 8025f10:	f340 80fa 	ble.w	8026108 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8025f14:	5c12      	ldrb	r2, [r2, r0]
 8025f16:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025f1a:	1c7a      	adds	r2, r7, #1
 8025f1c:	f100 80f9 	bmi.w	8026112 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8025f20:	4596      	cmp	lr, r2
 8025f22:	f340 80f6 	ble.w	8026112 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8025f26:	2c00      	cmp	r4, #0
 8025f28:	f000 80f5 	beq.w	8026116 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8025f2c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025f30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025f34:	3501      	adds	r5, #1
 8025f36:	f100 80f2 	bmi.w	802611e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8025f3a:	45a9      	cmp	r9, r5
 8025f3c:	f340 80ef 	ble.w	802611e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8025f40:	f1bc 0f00 	cmp.w	ip, #0
 8025f44:	f000 80ee 	beq.w	8026124 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8025f48:	2f00      	cmp	r7, #0
 8025f4a:	f2c0 80e6 	blt.w	802611a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025f4e:	45be      	cmp	lr, r7
 8025f50:	f340 80e3 	ble.w	802611a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025f54:	f818 200e 	ldrb.w	r2, [r8, lr]
 8025f58:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025f5c:	3701      	adds	r7, #1
 8025f5e:	f100 80e4 	bmi.w	802612a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8025f62:	45be      	cmp	lr, r7
 8025f64:	f340 80e1 	ble.w	802612a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8025f68:	2c00      	cmp	r4, #0
 8025f6a:	f000 80e0 	beq.w	802612e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8025f6e:	44c6      	add	lr, r8
 8025f70:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025f74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025f78:	b2a3      	uxth	r3, r4
 8025f7a:	fa1f fc8c 	uxth.w	ip, ip
 8025f7e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025f82:	fb0c fe03 	mul.w	lr, ip, r3
 8025f86:	011b      	lsls	r3, r3, #4
 8025f88:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025f8c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8025f90:	eba3 070e 	sub.w	r7, r3, lr
 8025f94:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025f98:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025f9c:	fa1f f48c 	uxth.w	r4, ip
 8025fa0:	b2bf      	uxth	r7, r7
 8025fa2:	1b1b      	subs	r3, r3, r4
 8025fa4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025fa8:	fb07 fc0a 	mul.w	ip, r7, sl
 8025fac:	b29b      	uxth	r3, r3
 8025fae:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025fb2:	9300      	str	r3, [sp, #0]
 8025fb4:	fb04 cc09 	mla	ip, r4, r9, ip
 8025fb8:	fb0e cc08 	mla	ip, lr, r8, ip
 8025fbc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025fc0:	9301      	str	r3, [sp, #4]
 8025fc2:	2b00      	cmp	r3, #0
 8025fc4:	f000 809d 	beq.w	8026102 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8025fc8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8025fcc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025fd0:	fb0b fc0c 	mul.w	ip, fp, ip
 8025fd4:	fb0b f606 	mul.w	r6, fp, r6
 8025fd8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025fdc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025fe0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8025fe4:	44dc      	add	ip, fp
 8025fe6:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8025fea:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025fee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ff2:	fb0a fb0b 	mul.w	fp, sl, fp
 8025ff6:	fb0a fa00 	mul.w	sl, sl, r0
 8025ffa:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8025ffe:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8026002:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8026006:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802600a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802600e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026012:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026016:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802601a:	0a36      	lsrs	r6, r6, #8
 802601c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026020:	44dc      	add	ip, fp
 8026022:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026026:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802602a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802602e:	fb09 fb0b 	mul.w	fp, r9, fp
 8026032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026036:	fb09 f905 	mul.w	r9, r9, r5
 802603a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802603e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026042:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8026046:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802604a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802604e:	fb0c fc07 	mul.w	ip, ip, r7
 8026052:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8026056:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802605a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802605e:	4458      	add	r0, fp
 8026060:	fb08 f505 	mul.w	r5, r8, r5
 8026064:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026068:	fb08 f802 	mul.w	r8, r8, r2
 802606c:	0a00      	lsrs	r0, r0, #8
 802606e:	0a2a      	lsrs	r2, r5, #8
 8026070:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8026074:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026078:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802607c:	4415      	add	r5, r2
 802607e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026082:	0a2d      	lsrs	r5, r5, #8
 8026084:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026088:	9a00      	ldr	r2, [sp, #0]
 802608a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802608e:	fb03 cc02 	mla	ip, r3, r2, ip
 8026092:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026096:	9b01      	ldr	r3, [sp, #4]
 8026098:	fb05 c50e 	mla	r5, r5, lr, ip
 802609c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80260a0:	43db      	mvns	r3, r3
 80260a2:	fb00 5004 	mla	r0, r0, r4, r5
 80260a6:	b2db      	uxtb	r3, r3
 80260a8:	0a00      	lsrs	r0, r0, #8
 80260aa:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80260ae:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80260b2:	4378      	muls	r0, r7
 80260b4:	fb02 0006 	mla	r0, r2, r6, r0
 80260b8:	780a      	ldrb	r2, [r1, #0]
 80260ba:	fb0e 0e08 	mla	lr, lr, r8, r0
 80260be:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80260c2:	fb04 e000 	mla	r0, r4, r0, lr
 80260c6:	fb02 f403 	mul.w	r4, r2, r3
 80260ca:	0a00      	lsrs	r0, r0, #8
 80260cc:	1c62      	adds	r2, r4, #1
 80260ce:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80260d2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80260d6:	4328      	orrs	r0, r5
 80260d8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80260dc:	700a      	strb	r2, [r1, #0]
 80260de:	784a      	ldrb	r2, [r1, #1]
 80260e0:	435a      	muls	r2, r3
 80260e2:	1c54      	adds	r4, r2, #1
 80260e4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80260e8:	0a02      	lsrs	r2, r0, #8
 80260ea:	0c00      	lsrs	r0, r0, #16
 80260ec:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80260f0:	704a      	strb	r2, [r1, #1]
 80260f2:	788a      	ldrb	r2, [r1, #2]
 80260f4:	4353      	muls	r3, r2
 80260f6:	1c5a      	adds	r2, r3, #1
 80260f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80260fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026100:	7088      	strb	r0, [r1, #2]
 8026102:	b003      	add	sp, #12
 8026104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026108:	2600      	movs	r6, #0
 802610a:	e706      	b.n	8025f1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 802610c:	2000      	movs	r0, #0
 802610e:	4606      	mov	r6, r0
 8026110:	e710      	b.n	8025f34 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8026112:	2000      	movs	r0, #0
 8026114:	e70e      	b.n	8025f34 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8026116:	4620      	mov	r0, r4
 8026118:	e70c      	b.n	8025f34 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802611a:	2500      	movs	r5, #0
 802611c:	e71e      	b.n	8025f5c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 802611e:	2200      	movs	r2, #0
 8026120:	4615      	mov	r5, r2
 8026122:	e729      	b.n	8025f78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8026124:	4662      	mov	r2, ip
 8026126:	4665      	mov	r5, ip
 8026128:	e726      	b.n	8025f78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802612a:	2200      	movs	r2, #0
 802612c:	e724      	b.n	8025f78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802612e:	4622      	mov	r2, r4
 8026130:	e722      	b.n	8025f78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08026132 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026136:	b09b      	sub	sp, #108	@ 0x6c
 8026138:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802613c:	9218      	str	r2, [sp, #96]	@ 0x60
 802613e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026140:	9019      	str	r0, [sp, #100]	@ 0x64
 8026142:	9116      	str	r1, [sp, #88]	@ 0x58
 8026144:	6850      	ldr	r0, [r2, #4]
 8026146:	9307      	str	r3, [sp, #28]
 8026148:	6812      	ldr	r2, [r2, #0]
 802614a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 802614c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8026150:	fb00 1303 	mla	r3, r0, r3, r1
 8026154:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026158:	18d3      	adds	r3, r2, r3
 802615a:	930a      	str	r3, [sp, #40]	@ 0x28
 802615c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802615e:	681b      	ldr	r3, [r3, #0]
 8026160:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026162:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026164:	685e      	ldr	r6, [r3, #4]
 8026166:	3604      	adds	r6, #4
 8026168:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802616a:	2b00      	cmp	r3, #0
 802616c:	dc03      	bgt.n	8026176 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802616e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026170:	2b00      	cmp	r3, #0
 8026172:	f340 834f 	ble.w	8026814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8026176:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026178:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802617c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026180:	1e48      	subs	r0, r1, #1
 8026182:	1e57      	subs	r7, r2, #1
 8026184:	9b07      	ldr	r3, [sp, #28]
 8026186:	2b00      	cmp	r3, #0
 8026188:	f340 8178 	ble.w	802647c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802618c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802618e:	142b      	asrs	r3, r5, #16
 8026190:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026194:	d406      	bmi.n	80261a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026196:	4584      	cmp	ip, r0
 8026198:	da04      	bge.n	80261a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802619a:	2b00      	cmp	r3, #0
 802619c:	db02      	blt.n	80261a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802619e:	42bb      	cmp	r3, r7
 80261a0:	f2c0 816d 	blt.w	802647e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80261a4:	f11c 0c01 	adds.w	ip, ip, #1
 80261a8:	f100 815b 	bmi.w	8026462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80261ac:	4561      	cmp	r1, ip
 80261ae:	f2c0 8158 	blt.w	8026462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80261b2:	3301      	adds	r3, #1
 80261b4:	f100 8155 	bmi.w	8026462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80261b8:	429a      	cmp	r2, r3
 80261ba:	f2c0 8152 	blt.w	8026462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80261be:	9b07      	ldr	r3, [sp, #28]
 80261c0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80261c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80261c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	f340 8178 	ble.w	80264bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80261cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80261ce:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80261d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80261d6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80261da:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80261dc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80261e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80261e2:	141b      	asrs	r3, r3, #16
 80261e4:	f100 81ba 	bmi.w	802655c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80261e8:	f101 38ff 	add.w	r8, r1, #4294967295
 80261ec:	4543      	cmp	r3, r8
 80261ee:	f280 81b5 	bge.w	802655c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80261f2:	f1bc 0f00 	cmp.w	ip, #0
 80261f6:	f2c0 81b1 	blt.w	802655c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80261fa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80261fe:	45c4      	cmp	ip, r8
 8026200:	f280 81ac 	bge.w	802655c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026204:	b209      	sxth	r1, r1
 8026206:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026208:	fb0c 3301 	mla	r3, ip, r1, r3
 802620c:	eb04 0803 	add.w	r8, r4, r3
 8026210:	5ce3      	ldrb	r3, [r4, r3]
 8026212:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026216:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802621a:	2a00      	cmp	r2, #0
 802621c:	f000 8193 	beq.w	8026546 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8026220:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026224:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026228:	940b      	str	r4, [sp, #44]	@ 0x2c
 802622a:	0e24      	lsrs	r4, r4, #24
 802622c:	9412      	str	r4, [sp, #72]	@ 0x48
 802622e:	b178      	cbz	r0, 8026250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8026230:	eb08 0c01 	add.w	ip, r8, r1
 8026234:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026238:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802623c:	9108      	str	r1, [sp, #32]
 802623e:	0e09      	lsrs	r1, r1, #24
 8026240:	9110      	str	r1, [sp, #64]	@ 0x40
 8026242:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026246:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802624a:	910c      	str	r1, [sp, #48]	@ 0x30
 802624c:	0e09      	lsrs	r1, r1, #24
 802624e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026250:	b292      	uxth	r2, r2
 8026252:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026254:	b280      	uxth	r0, r0
 8026256:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026258:	fb02 f900 	mul.w	r9, r2, r0
 802625c:	0112      	lsls	r2, r2, #4
 802625e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026262:	eba2 0809 	sub.w	r8, r2, r9
 8026266:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802626a:	b280      	uxth	r0, r0
 802626c:	fa1f f888 	uxth.w	r8, r8
 8026270:	1a12      	subs	r2, r2, r0
 8026272:	fb08 f101 	mul.w	r1, r8, r1
 8026276:	b292      	uxth	r2, r2
 8026278:	fb02 110e 	mla	r1, r2, lr, r1
 802627c:	fb00 1104 	mla	r1, r0, r4, r1
 8026280:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026282:	fb09 1104 	mla	r1, r9, r4, r1
 8026286:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802628a:	2900      	cmp	r1, #0
 802628c:	f000 80de 	beq.w	802644c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026290:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026294:	d01b      	beq.n	80262ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8026296:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802629a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802629e:	fb0e fa0a 	mul.w	sl, lr, sl
 80262a2:	fb0e fe03 	mul.w	lr, lr, r3
 80262a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80262aa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80262ae:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80262b2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80262b6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80262ba:	4453      	add	r3, sl
 80262bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262c0:	0a1b      	lsrs	r3, r3, #8
 80262c2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80262c6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80262ca:	ea43 030c 	orr.w	r3, r3, ip
 80262ce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80262d0:	2cff      	cmp	r4, #255	@ 0xff
 80262d2:	d021      	beq.n	8026318 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80262d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80262d6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80262da:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80262dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80262e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80262e2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80262e6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80262e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80262ec:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80262f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80262f4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80262f8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80262fc:	44de      	add	lr, fp
 80262fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026302:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026306:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802630a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802630e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026312:	ea4e 040a 	orr.w	r4, lr, sl
 8026316:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026318:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802631a:	2cff      	cmp	r4, #255	@ 0xff
 802631c:	d021      	beq.n	8026362 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802631e:	9c08      	ldr	r4, [sp, #32]
 8026320:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026324:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026326:	fb04 fb0b 	mul.w	fp, r4, fp
 802632a:	9c08      	ldr	r4, [sp, #32]
 802632c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026330:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026332:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026336:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802633a:	fb04 fa0a 	mul.w	sl, r4, sl
 802633e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026342:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026346:	44de      	add	lr, fp
 8026348:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802634c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026350:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026354:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026358:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802635c:	ea4e 040a 	orr.w	r4, lr, sl
 8026360:	9408      	str	r4, [sp, #32]
 8026362:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026364:	2cff      	cmp	r4, #255	@ 0xff
 8026366:	d021      	beq.n	80263ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026368:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802636a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802636e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026370:	fb04 fb0b 	mul.w	fp, r4, fp
 8026374:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026376:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802637a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802637c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026380:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026384:	fb04 fa0a 	mul.w	sl, r4, sl
 8026388:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802638c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026390:	44de      	add	lr, fp
 8026392:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026396:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802639a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802639e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80263a2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80263a6:	ea4e 040a 	orr.w	r4, lr, sl
 80263aa:	940c      	str	r4, [sp, #48]	@ 0x30
 80263ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80263ae:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80263b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80263b6:	43c9      	mvns	r1, r1
 80263b8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80263bc:	9c08      	ldr	r4, [sp, #32]
 80263be:	b2c9      	uxtb	r1, r1
 80263c0:	fb08 fc0c 	mul.w	ip, r8, ip
 80263c4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80263c8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80263cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80263ce:	fb00 cc0e 	mla	ip, r0, lr, ip
 80263d2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80263d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80263d8:	fb09 cc0e 	mla	ip, r9, lr, ip
 80263dc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80263e0:	fb08 f80e 	mul.w	r8, r8, lr
 80263e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263e8:	fb02 8303 	mla	r3, r2, r3, r8
 80263ec:	9a08      	ldr	r2, [sp, #32]
 80263ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80263f2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80263f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80263f8:	fb00 330a 	mla	r3, r0, sl, r3
 80263fc:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8026400:	fb09 3900 	mla	r9, r9, r0, r3
 8026404:	783b      	ldrb	r3, [r7, #0]
 8026406:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802640a:	fb03 f201 	mul.w	r2, r3, r1
 802640e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026412:	1c53      	adds	r3, r2, #1
 8026414:	ea4c 0c09 	orr.w	ip, ip, r9
 8026418:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802641c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026420:	703b      	strb	r3, [r7, #0]
 8026422:	787b      	ldrb	r3, [r7, #1]
 8026424:	434b      	muls	r3, r1
 8026426:	1c5a      	adds	r2, r3, #1
 8026428:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802642c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026430:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026434:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026438:	707b      	strb	r3, [r7, #1]
 802643a:	78bb      	ldrb	r3, [r7, #2]
 802643c:	4359      	muls	r1, r3
 802643e:	1c4b      	adds	r3, r1, #1
 8026440:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026444:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026448:	f887 c002 	strb.w	ip, [r7, #2]
 802644c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802644e:	3703      	adds	r7, #3
 8026450:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026452:	441a      	add	r2, r3
 8026454:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026456:	441d      	add	r5, r3
 8026458:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802645a:	9225      	str	r2, [sp, #148]	@ 0x94
 802645c:	3b01      	subs	r3, #1
 802645e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026460:	e6b0      	b.n	80261c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026462:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026464:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026466:	441c      	add	r4, r3
 8026468:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802646a:	441d      	add	r5, r3
 802646c:	9b07      	ldr	r3, [sp, #28]
 802646e:	9425      	str	r4, [sp, #148]	@ 0x94
 8026470:	3b01      	subs	r3, #1
 8026472:	9307      	str	r3, [sp, #28]
 8026474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026476:	3303      	adds	r3, #3
 8026478:	930a      	str	r3, [sp, #40]	@ 0x28
 802647a:	e683      	b.n	8026184 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802647c:	d026      	beq.n	80264cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802647e:	9b07      	ldr	r3, [sp, #28]
 8026480:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8026482:	3b01      	subs	r3, #1
 8026484:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026486:	fb00 4003 	mla	r0, r0, r3, r4
 802648a:	1400      	asrs	r0, r0, #16
 802648c:	f53f ae97 	bmi.w	80261be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026490:	3901      	subs	r1, #1
 8026492:	4288      	cmp	r0, r1
 8026494:	f6bf ae93 	bge.w	80261be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026498:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802649a:	fb01 5303 	mla	r3, r1, r3, r5
 802649e:	141b      	asrs	r3, r3, #16
 80264a0:	f53f ae8d 	bmi.w	80261be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80264a4:	3a01      	subs	r2, #1
 80264a6:	4293      	cmp	r3, r2
 80264a8:	f6bf ae89 	bge.w	80261be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80264ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80264ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80264b2:	f103 0e03 	add.w	lr, r3, #3
 80264b6:	f1bb 0f00 	cmp.w	fp, #0
 80264ba:	dc6d      	bgt.n	8026598 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80264bc:	9b07      	ldr	r3, [sp, #28]
 80264be:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80264c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80264c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80264c8:	4423      	add	r3, r4
 80264ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80264cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	f340 81a0 	ble.w	8026814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80264d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80264d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80264da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80264de:	eeb0 6a62 	vmov.f32	s12, s5
 80264e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80264e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80264ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80264ee:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 80264f2:	eeb0 6a43 	vmov.f32	s12, s6
 80264f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80264fa:	ee16 5a10 	vmov	r5, s12
 80264fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026502:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026506:	ee77 2a62 	vsub.f32	s5, s14, s5
 802650a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802650e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026512:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026516:	ee12 2a90 	vmov	r2, s5
 802651a:	eef0 2a47 	vmov.f32	s5, s14
 802651e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026522:	ee13 2a10 	vmov	r2, s6
 8026526:	9327      	str	r3, [sp, #156]	@ 0x9c
 8026528:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802652a:	eeb0 3a67 	vmov.f32	s6, s15
 802652e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026532:	9328      	str	r3, [sp, #160]	@ 0xa0
 8026534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026536:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026538:	3b01      	subs	r3, #1
 802653a:	9316      	str	r3, [sp, #88]	@ 0x58
 802653c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802653e:	bf08      	it	eq
 8026540:	4613      	moveq	r3, r2
 8026542:	9307      	str	r3, [sp, #28]
 8026544:	e610      	b.n	8026168 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8026546:	2800      	cmp	r0, #0
 8026548:	f43f ae82 	beq.w	8026250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802654c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026550:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026554:	9108      	str	r1, [sp, #32]
 8026556:	0e09      	lsrs	r1, r1, #24
 8026558:	9110      	str	r1, [sp, #64]	@ 0x40
 802655a:	e679      	b.n	8026250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802655c:	f113 0801 	adds.w	r8, r3, #1
 8026560:	f53f af74 	bmi.w	802644c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026564:	4541      	cmp	r1, r8
 8026566:	f6ff af71 	blt.w	802644c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802656a:	f11c 0801 	adds.w	r8, ip, #1
 802656e:	f53f af6d 	bmi.w	802644c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026572:	45c6      	cmp	lr, r8
 8026574:	f6ff af6a 	blt.w	802644c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026578:	b209      	sxth	r1, r1
 802657a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802657e:	fa0f f38e 	sxth.w	r3, lr
 8026582:	9100      	str	r1, [sp, #0]
 8026584:	4639      	mov	r1, r7
 8026586:	9301      	str	r3, [sp, #4]
 8026588:	4633      	mov	r3, r6
 802658a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802658e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026590:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026592:	f7ff fca3 	bl	8025edc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8026596:	e759      	b.n	802644c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026598:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802659a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802659e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80265a0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80265a4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80265a6:	1427      	asrs	r7, r4, #16
 80265a8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80265aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80265ae:	142b      	asrs	r3, r5, #16
 80265b0:	fb01 7303 	mla	r3, r1, r3, r7
 80265b4:	18e7      	adds	r7, r4, r3
 80265b6:	5ce3      	ldrb	r3, [r4, r3]
 80265b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80265bc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80265c0:	2a00      	cmp	r2, #0
 80265c2:	f000 811d 	beq.w	8026800 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80265c6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80265ca:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80265ce:	940d      	str	r4, [sp, #52]	@ 0x34
 80265d0:	0e24      	lsrs	r4, r4, #24
 80265d2:	9414      	str	r4, [sp, #80]	@ 0x50
 80265d4:	b170      	cbz	r0, 80265f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80265d6:	eb07 0801 	add.w	r8, r7, r1
 80265da:	5c79      	ldrb	r1, [r7, r1]
 80265dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80265e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80265e2:	0e09      	lsrs	r1, r1, #24
 80265e4:	9111      	str	r1, [sp, #68]	@ 0x44
 80265e6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80265ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80265ee:	910e      	str	r1, [sp, #56]	@ 0x38
 80265f0:	0e09      	lsrs	r1, r1, #24
 80265f2:	9115      	str	r1, [sp, #84]	@ 0x54
 80265f4:	b292      	uxth	r2, r2
 80265f6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80265f8:	b280      	uxth	r0, r0
 80265fa:	fb02 f900 	mul.w	r9, r2, r0
 80265fe:	0112      	lsls	r2, r2, #4
 8026600:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026604:	eba2 0809 	sub.w	r8, r2, r9
 8026608:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802660c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802660e:	b280      	uxth	r0, r0
 8026610:	fa1f f888 	uxth.w	r8, r8
 8026614:	1a09      	subs	r1, r1, r0
 8026616:	fb08 f202 	mul.w	r2, r8, r2
 802661a:	b289      	uxth	r1, r1
 802661c:	fb01 220c 	mla	r2, r1, ip, r2
 8026620:	fb00 2204 	mla	r2, r0, r4, r2
 8026624:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026626:	fb09 2204 	mla	r2, r9, r4, r2
 802662a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802662e:	2a00      	cmp	r2, #0
 8026630:	f000 80db 	beq.w	80267ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8026634:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026638:	d019      	beq.n	802666e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 802663a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802663e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026642:	fb0c fa0a 	mul.w	sl, ip, sl
 8026646:	fb0c fc03 	mul.w	ip, ip, r3
 802664a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802664e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026652:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026656:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802665a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802665e:	4453      	add	r3, sl
 8026660:	0a3f      	lsrs	r7, r7, #8
 8026662:	0a1b      	lsrs	r3, r3, #8
 8026664:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026668:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802666c:	433b      	orrs	r3, r7
 802666e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026670:	2cff      	cmp	r4, #255	@ 0xff
 8026672:	d020      	beq.n	80266b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8026674:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026676:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802667a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802667c:	4367      	muls	r7, r4
 802667e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026680:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026684:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026688:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802668a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802668e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026692:	fb04 fa0a 	mul.w	sl, r4, sl
 8026696:	44bc      	add	ip, r7
 8026698:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802669c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80266a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80266a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80266b0:	ea4c 040a 	orr.w	r4, ip, sl
 80266b4:	940d      	str	r4, [sp, #52]	@ 0x34
 80266b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80266b8:	2cff      	cmp	r4, #255	@ 0xff
 80266ba:	d020      	beq.n	80266fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80266bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80266be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80266c2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80266c4:	4367      	muls	r7, r4
 80266c6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80266c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80266cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80266d0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80266d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80266d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80266da:	fb04 fa0a 	mul.w	sl, r4, sl
 80266de:	44bc      	add	ip, r7
 80266e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80266e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80266ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80266f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80266f8:	ea4c 040a 	orr.w	r4, ip, sl
 80266fc:	9409      	str	r4, [sp, #36]	@ 0x24
 80266fe:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026700:	2cff      	cmp	r4, #255	@ 0xff
 8026702:	d020      	beq.n	8026746 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8026704:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026706:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802670a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802670c:	4367      	muls	r7, r4
 802670e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026710:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026714:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026718:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802671a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802671e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026722:	fb04 fa0a 	mul.w	sl, r4, sl
 8026726:	44bc      	add	ip, r7
 8026728:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802672c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026730:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026734:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026738:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802673c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026740:	ea4c 040a 	orr.w	r4, ip, sl
 8026744:	940e      	str	r4, [sp, #56]	@ 0x38
 8026746:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026748:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802674c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026750:	43d2      	mvns	r2, r2
 8026752:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026756:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026758:	b2d2      	uxtb	r2, r2
 802675a:	fb08 f707 	mul.w	r7, r8, r7
 802675e:	fb01 770c 	mla	r7, r1, ip, r7
 8026762:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026766:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026768:	fb00 770c 	mla	r7, r0, ip, r7
 802676c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026770:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026772:	fb09 770c 	mla	r7, r9, ip, r7
 8026776:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802677a:	fb08 f80c 	mul.w	r8, r8, ip
 802677e:	0a3f      	lsrs	r7, r7, #8
 8026780:	fb01 8303 	mla	r3, r1, r3, r8
 8026784:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026786:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802678a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802678e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026790:	fb00 330a 	mla	r3, r0, sl, r3
 8026794:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8026798:	fb09 3c0c 	mla	ip, r9, ip, r3
 802679c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80267a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267a4:	fb03 f102 	mul.w	r1, r3, r2
 80267a8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80267ac:	1c4b      	adds	r3, r1, #1
 80267ae:	ea47 070c 	orr.w	r7, r7, ip
 80267b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80267b6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80267ba:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80267be:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80267c2:	4353      	muls	r3, r2
 80267c4:	1c59      	adds	r1, r3, #1
 80267c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80267ca:	0a3b      	lsrs	r3, r7, #8
 80267cc:	0c3f      	lsrs	r7, r7, #16
 80267ce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80267d2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80267d6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80267da:	435a      	muls	r2, r3
 80267dc:	1c53      	adds	r3, r2, #1
 80267de:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80267e2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80267e6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80267ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80267ec:	f10e 0e03 	add.w	lr, lr, #3
 80267f0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80267f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80267f6:	441a      	add	r2, r3
 80267f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80267fa:	9225      	str	r2, [sp, #148]	@ 0x94
 80267fc:	441d      	add	r5, r3
 80267fe:	e65a      	b.n	80264b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8026800:	2800      	cmp	r0, #0
 8026802:	f43f aef7 	beq.w	80265f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026806:	5c79      	ldrb	r1, [r7, r1]
 8026808:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802680c:	9109      	str	r1, [sp, #36]	@ 0x24
 802680e:	0e09      	lsrs	r1, r1, #24
 8026810:	9111      	str	r1, [sp, #68]	@ 0x44
 8026812:	e6ef      	b.n	80265f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026814:	b01b      	add	sp, #108	@ 0x6c
 8026816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802681a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802681a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802681e:	b08d      	sub	sp, #52	@ 0x34
 8026820:	468b      	mov	fp, r1
 8026822:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8026826:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 802682a:	fb0c 5703 	mla	r7, ip, r3, r5
 802682e:	f1bc 0f00 	cmp.w	ip, #0
 8026832:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026834:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026838:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 802683c:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8026840:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8026844:	eb02 0607 	add.w	r6, r2, r7
 8026848:	f89b 4000 	ldrb.w	r4, [fp]
 802684c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8026850:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8026854:	f2c0 80c1 	blt.w	80269da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8026858:	45e6      	cmp	lr, ip
 802685a:	f340 80be 	ble.w	80269da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802685e:	2d00      	cmp	r5, #0
 8026860:	f2c0 80b7 	blt.w	80269d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8026864:	42ab      	cmp	r3, r5
 8026866:	f340 80b4 	ble.w	80269d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802686a:	5dd2      	ldrb	r2, [r2, r7]
 802686c:	9205      	str	r2, [sp, #20]
 802686e:	7872      	ldrb	r2, [r6, #1]
 8026870:	9206      	str	r2, [sp, #24]
 8026872:	78b2      	ldrb	r2, [r6, #2]
 8026874:	9207      	str	r2, [sp, #28]
 8026876:	1c6a      	adds	r2, r5, #1
 8026878:	f100 80b6 	bmi.w	80269e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802687c:	4293      	cmp	r3, r2
 802687e:	f340 80b3 	ble.w	80269e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8026882:	f1b8 0f00 	cmp.w	r8, #0
 8026886:	f000 80af 	beq.w	80269e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802688a:	78f2      	ldrb	r2, [r6, #3]
 802688c:	9201      	str	r2, [sp, #4]
 802688e:	7932      	ldrb	r2, [r6, #4]
 8026890:	9202      	str	r2, [sp, #8]
 8026892:	7972      	ldrb	r2, [r6, #5]
 8026894:	9203      	str	r2, [sp, #12]
 8026896:	f11c 0c01 	adds.w	ip, ip, #1
 802689a:	f100 80ad 	bmi.w	80269f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802689e:	45e6      	cmp	lr, ip
 80268a0:	f340 80aa 	ble.w	80269f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80268a4:	f1ba 0f00 	cmp.w	sl, #0
 80268a8:	f000 80a6 	beq.w	80269f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80268ac:	2d00      	cmp	r5, #0
 80268ae:	f2c0 809f 	blt.w	80269f0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80268b2:	42ab      	cmp	r3, r5
 80268b4:	f340 809c 	ble.w	80269f0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80268b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80268bc:	f816 9002 	ldrb.w	r9, [r6, r2]
 80268c0:	2203      	movs	r2, #3
 80268c2:	fb03 6c02 	mla	ip, r3, r2, r6
 80268c6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80268ca:	f89c e002 	ldrb.w	lr, [ip, #2]
 80268ce:	9704      	str	r7, [sp, #16]
 80268d0:	3501      	adds	r5, #1
 80268d2:	f100 8098 	bmi.w	8026a06 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80268d6:	42ab      	cmp	r3, r5
 80268d8:	f340 8095 	ble.w	8026a06 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80268dc:	f1b8 0f00 	cmp.w	r8, #0
 80268e0:	f000 8091 	beq.w	8026a06 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80268e4:	f04f 0c03 	mov.w	ip, #3
 80268e8:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80268ec:	5cb5      	ldrb	r5, [r6, r2]
 80268ee:	fb03 620c 	mla	r2, r3, ip, r6
 80268f2:	fb03 630c 	mla	r3, r3, ip, r6
 80268f6:	7912      	ldrb	r2, [r2, #4]
 80268f8:	795e      	ldrb	r6, [r3, #5]
 80268fa:	fa1f f388 	uxth.w	r3, r8
 80268fe:	fa1f fc8a 	uxth.w	ip, sl
 8026902:	fb03 f70c 	mul.w	r7, r3, ip
 8026906:	011b      	lsls	r3, r3, #4
 8026908:	9708      	str	r7, [sp, #32]
 802690a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 802690e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8026912:	1bdb      	subs	r3, r3, r7
 8026914:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8026918:	fa1f fc8c 	uxth.w	ip, ip
 802691c:	b29b      	uxth	r3, r3
 802691e:	9709      	str	r7, [sp, #36]	@ 0x24
 8026920:	ebaa 0a0c 	sub.w	sl, sl, ip
 8026924:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026926:	930a      	str	r3, [sp, #40]	@ 0x28
 8026928:	fa1f fa8a 	uxth.w	sl, sl
 802692c:	ea6f 0807 	mvn.w	r8, r7
 8026930:	9f01      	ldr	r7, [sp, #4]
 8026932:	435f      	muls	r7, r3
 8026934:	9b05      	ldr	r3, [sp, #20]
 8026936:	fa5f f888 	uxtb.w	r8, r8
 802693a:	fb0a 7703 	mla	r7, sl, r3, r7
 802693e:	9b08      	ldr	r3, [sp, #32]
 8026940:	fb14 f408 	smulbb	r4, r4, r8
 8026944:	fb0c 7709 	mla	r7, ip, r9, r7
 8026948:	fb10 f008 	smulbb	r0, r0, r8
 802694c:	fb11 f108 	smulbb	r1, r1, r8
 8026950:	fb03 7705 	mla	r7, r3, r5, r7
 8026954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026956:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802695a:	fb07 4703 	mla	r7, r7, r3, r4
 802695e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026960:	b2bf      	uxth	r7, r7
 8026962:	1c7c      	adds	r4, r7, #1
 8026964:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8026968:	1224      	asrs	r4, r4, #8
 802696a:	f88b 4000 	strb.w	r4, [fp]
 802696e:	9c02      	ldr	r4, [sp, #8]
 8026970:	435c      	muls	r4, r3
 8026972:	9b06      	ldr	r3, [sp, #24]
 8026974:	fb0a 4403 	mla	r4, sl, r3, r4
 8026978:	9b04      	ldr	r3, [sp, #16]
 802697a:	fb0c 4403 	mla	r4, ip, r3, r4
 802697e:	9b08      	ldr	r3, [sp, #32]
 8026980:	fb03 4402 	mla	r4, r3, r2, r4
 8026984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026986:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026988:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802698c:	fb04 0403 	mla	r4, r4, r3, r0
 8026990:	9b03      	ldr	r3, [sp, #12]
 8026992:	435a      	muls	r2, r3
 8026994:	b2a4      	uxth	r4, r4
 8026996:	4613      	mov	r3, r2
 8026998:	9a07      	ldr	r2, [sp, #28]
 802699a:	1c60      	adds	r0, r4, #1
 802699c:	fb0a 3a02 	mla	sl, sl, r2, r3
 80269a0:	9b08      	ldr	r3, [sp, #32]
 80269a2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80269a6:	fb0c ac0e 	mla	ip, ip, lr, sl
 80269aa:	1224      	asrs	r4, r4, #8
 80269ac:	fb03 c606 	mla	r6, r3, r6, ip
 80269b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80269b2:	f88b 4001 	strb.w	r4, [fp, #1]
 80269b6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80269ba:	fb06 1103 	mla	r1, r6, r3, r1
 80269be:	b289      	uxth	r1, r1
 80269c0:	1c4e      	adds	r6, r1, #1
 80269c2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80269c6:	1209      	asrs	r1, r1, #8
 80269c8:	f88b 1002 	strb.w	r1, [fp, #2]
 80269cc:	b00d      	add	sp, #52	@ 0x34
 80269ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80269d6:	9405      	str	r4, [sp, #20]
 80269d8:	e74d      	b.n	8026876 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80269da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80269de:	9401      	str	r4, [sp, #4]
 80269e0:	9405      	str	r4, [sp, #20]
 80269e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80269e6:	e756      	b.n	8026896 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80269e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80269ec:	9401      	str	r4, [sp, #4]
 80269ee:	e752      	b.n	8026896 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80269f0:	468e      	mov	lr, r1
 80269f2:	9004      	str	r0, [sp, #16]
 80269f4:	46a1      	mov	r9, r4
 80269f6:	e76b      	b.n	80268d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80269f8:	460e      	mov	r6, r1
 80269fa:	4602      	mov	r2, r0
 80269fc:	4625      	mov	r5, r4
 80269fe:	468e      	mov	lr, r1
 8026a00:	9004      	str	r0, [sp, #16]
 8026a02:	46a1      	mov	r9, r4
 8026a04:	e779      	b.n	80268fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8026a06:	460e      	mov	r6, r1
 8026a08:	4602      	mov	r2, r0
 8026a0a:	4625      	mov	r5, r4
 8026a0c:	e775      	b.n	80268fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08026a0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a12:	b09f      	sub	sp, #124	@ 0x7c
 8026a14:	920e      	str	r2, [sp, #56]	@ 0x38
 8026a16:	9307      	str	r3, [sp, #28]
 8026a18:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026a1a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8026a1e:	901d      	str	r0, [sp, #116]	@ 0x74
 8026a20:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a22:	6850      	ldr	r0, [r2, #4]
 8026a24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026a26:	6812      	ldr	r2, [r2, #0]
 8026a28:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8026a2c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8026a30:	fb00 1303 	mla	r3, r0, r3, r1
 8026a34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026a38:	18d3      	adds	r3, r2, r3
 8026a3a:	9308      	str	r3, [sp, #32]
 8026a3c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026a3e:	681b      	ldr	r3, [r3, #0]
 8026a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8026a42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026a44:	43db      	mvns	r3, r3
 8026a46:	b2db      	uxtb	r3, r3
 8026a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a4c:	2b00      	cmp	r3, #0
 8026a4e:	dc03      	bgt.n	8026a58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026a50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026a52:	2b00      	cmp	r3, #0
 8026a54:	f340 81f5 	ble.w	8026e42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026a58:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026a5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a62:	1e48      	subs	r0, r1, #1
 8026a64:	1e54      	subs	r4, r2, #1
 8026a66:	9b07      	ldr	r3, [sp, #28]
 8026a68:	2b00      	cmp	r3, #0
 8026a6a:	f340 80d5 	ble.w	8026c18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8026a6e:	ea5f 452a 	movs.w	r5, sl, asr #16
 8026a72:	ea4f 4328 	mov.w	r3, r8, asr #16
 8026a76:	d406      	bmi.n	8026a86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a78:	4285      	cmp	r5, r0
 8026a7a:	da04      	bge.n	8026a86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a7c:	2b00      	cmp	r3, #0
 8026a7e:	db02      	blt.n	8026a86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a80:	42a3      	cmp	r3, r4
 8026a82:	f2c0 80ca 	blt.w	8026c1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8026a86:	3501      	adds	r5, #1
 8026a88:	f100 80bb 	bmi.w	8026c02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8026a8c:	42a9      	cmp	r1, r5
 8026a8e:	f2c0 80b8 	blt.w	8026c02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8026a92:	3301      	adds	r3, #1
 8026a94:	f100 80b5 	bmi.w	8026c02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8026a98:	429a      	cmp	r2, r3
 8026a9a:	f2c0 80b2 	blt.w	8026c02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8026a9e:	9b07      	ldr	r3, [sp, #28]
 8026aa0:	9d08      	ldr	r5, [sp, #32]
 8026aa2:	930d      	str	r3, [sp, #52]	@ 0x34
 8026aa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	f340 80d6 	ble.w	8026c58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8026aac:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8026aae:	ea4f 4428 	mov.w	r4, r8, asr #16
 8026ab2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026ab4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8026ab8:	68c6      	ldr	r6, [r0, #12]
 8026aba:	ea5f 402a 	movs.w	r0, sl, asr #16
 8026abe:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8026ac2:	689b      	ldr	r3, [r3, #8]
 8026ac4:	f100 810f 	bmi.w	8026ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026ac8:	1e5f      	subs	r7, r3, #1
 8026aca:	42b8      	cmp	r0, r7
 8026acc:	f280 810b 	bge.w	8026ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026ad0:	2c00      	cmp	r4, #0
 8026ad2:	f2c0 8108 	blt.w	8026ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026ad6:	1e77      	subs	r7, r6, #1
 8026ad8:	42bc      	cmp	r4, r7
 8026ada:	f280 8104 	bge.w	8026ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026ade:	b21b      	sxth	r3, r3
 8026ae0:	fb04 0003 	mla	r0, r4, r3, r0
 8026ae4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026ae6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026aea:	1826      	adds	r6, r4, r0
 8026aec:	5c24      	ldrb	r4, [r4, r0]
 8026aee:	78b7      	ldrb	r7, [r6, #2]
 8026af0:	7870      	ldrb	r0, [r6, #1]
 8026af2:	970f      	str	r7, [sp, #60]	@ 0x3c
 8026af4:	7977      	ldrb	r7, [r6, #5]
 8026af6:	f896 e003 	ldrb.w	lr, [r6, #3]
 8026afa:	f896 c004 	ldrb.w	ip, [r6, #4]
 8026afe:	9710      	str	r7, [sp, #64]	@ 0x40
 8026b00:	b1c9      	cbz	r1, 8026b36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8026b02:	f04f 0b03 	mov.w	fp, #3
 8026b06:	f06f 0904 	mvn.w	r9, #4
 8026b0a:	3605      	adds	r6, #5
 8026b0c:	fb13 930b 	smlabb	r3, r3, fp, r9
 8026b10:	eb06 0b03 	add.w	fp, r6, r3
 8026b14:	5cf3      	ldrb	r3, [r6, r3]
 8026b16:	9311      	str	r3, [sp, #68]	@ 0x44
 8026b18:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8026b1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026b1e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8026b22:	9315      	str	r3, [sp, #84]	@ 0x54
 8026b24:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8026b28:	9312      	str	r3, [sp, #72]	@ 0x48
 8026b2a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8026b2e:	9314      	str	r3, [sp, #80]	@ 0x50
 8026b30:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8026b34:	9316      	str	r3, [sp, #88]	@ 0x58
 8026b36:	b292      	uxth	r2, r2
 8026b38:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8026b3a:	b289      	uxth	r1, r1
 8026b3c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8026b40:	fb02 f601 	mul.w	r6, r2, r1
 8026b44:	0112      	lsls	r2, r2, #4
 8026b46:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8026b4a:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8026b4e:	1b92      	subs	r2, r2, r6
 8026b50:	b289      	uxth	r1, r1
 8026b52:	b292      	uxth	r2, r2
 8026b54:	eba9 0901 	sub.w	r9, r9, r1
 8026b58:	fb02 fe0e 	mul.w	lr, r2, lr
 8026b5c:	fa1f f989 	uxth.w	r9, r9
 8026b60:	fb02 fc0c 	mul.w	ip, r2, ip
 8026b64:	fb09 e404 	mla	r4, r9, r4, lr
 8026b68:	f895 e000 	ldrb.w	lr, [r5]
 8026b6c:	fb09 c000 	mla	r0, r9, r0, ip
 8026b70:	fb01 4407 	mla	r4, r1, r7, r4
 8026b74:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8026b76:	fb06 4407 	mla	r4, r6, r7, r4
 8026b7a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026b7c:	fb1e fe07 	smulbb	lr, lr, r7
 8026b80:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8026b84:	fb04 e403 	mla	r4, r4, r3, lr
 8026b88:	b2a4      	uxth	r4, r4
 8026b8a:	f104 0e01 	add.w	lr, r4, #1
 8026b8e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8026b92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026b94:	fb01 0004 	mla	r0, r1, r4, r0
 8026b98:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026b9a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026b9e:	fb06 0004 	mla	r0, r6, r4, r0
 8026ba2:	786c      	ldrb	r4, [r5, #1]
 8026ba4:	f885 e000 	strb.w	lr, [r5]
 8026ba8:	fb14 f407 	smulbb	r4, r4, r7
 8026bac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026bb0:	fb00 4003 	mla	r0, r0, r3, r4
 8026bb4:	b280      	uxth	r0, r0
 8026bb6:	1c44      	adds	r4, r0, #1
 8026bb8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8026bbc:	1200      	asrs	r0, r0, #8
 8026bbe:	7068      	strb	r0, [r5, #1]
 8026bc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026bc2:	4342      	muls	r2, r0
 8026bc4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026bc6:	fb09 2200 	mla	r2, r9, r0, r2
 8026bca:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026bcc:	fb01 2100 	mla	r1, r1, r0, r2
 8026bd0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026bd2:	fb06 1602 	mla	r6, r6, r2, r1
 8026bd6:	78a9      	ldrb	r1, [r5, #2]
 8026bd8:	fb11 f107 	smulbb	r1, r1, r7
 8026bdc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026be0:	fb06 1303 	mla	r3, r6, r3, r1
 8026be4:	b29b      	uxth	r3, r3
 8026be6:	1c5e      	adds	r6, r3, #1
 8026be8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8026bec:	121b      	asrs	r3, r3, #8
 8026bee:	70ab      	strb	r3, [r5, #2]
 8026bf0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026bf2:	3503      	adds	r5, #3
 8026bf4:	449a      	add	sl, r3
 8026bf6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026bf8:	4498      	add	r8, r3
 8026bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026bfc:	3b01      	subs	r3, #1
 8026bfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8026c00:	e750      	b.n	8026aa4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026c02:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026c04:	449a      	add	sl, r3
 8026c06:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026c08:	4498      	add	r8, r3
 8026c0a:	9b07      	ldr	r3, [sp, #28]
 8026c0c:	3b01      	subs	r3, #1
 8026c0e:	9307      	str	r3, [sp, #28]
 8026c10:	9b08      	ldr	r3, [sp, #32]
 8026c12:	3303      	adds	r3, #3
 8026c14:	9308      	str	r3, [sp, #32]
 8026c16:	e726      	b.n	8026a66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026c18:	d026      	beq.n	8026c68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026c1a:	9b07      	ldr	r3, [sp, #28]
 8026c1c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8026c1e:	3b01      	subs	r3, #1
 8026c20:	fb00 a003 	mla	r0, r0, r3, sl
 8026c24:	1400      	asrs	r0, r0, #16
 8026c26:	f53f af3a 	bmi.w	8026a9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c2a:	3901      	subs	r1, #1
 8026c2c:	4288      	cmp	r0, r1
 8026c2e:	f6bf af36 	bge.w	8026a9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c32:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026c34:	fb01 8303 	mla	r3, r1, r3, r8
 8026c38:	141b      	asrs	r3, r3, #16
 8026c3a:	f53f af30 	bmi.w	8026a9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c3e:	3a01      	subs	r2, #1
 8026c40:	4293      	cmp	r3, r2
 8026c42:	f6bf af2c 	bge.w	8026a9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c46:	9b08      	ldr	r3, [sp, #32]
 8026c48:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026c4c:	1cdd      	adds	r5, r3, #3
 8026c4e:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8026c52:	f1bc 0f00 	cmp.w	ip, #0
 8026c56:	dc5f      	bgt.n	8026d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8026c58:	9b07      	ldr	r3, [sp, #28]
 8026c5a:	9a08      	ldr	r2, [sp, #32]
 8026c5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026c60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026c64:	441a      	add	r2, r3
 8026c66:	9208      	str	r2, [sp, #32]
 8026c68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c6a:	2b00      	cmp	r3, #0
 8026c6c:	f340 80e9 	ble.w	8026e42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026c74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026c76:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026c7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026c7e:	eef0 6a62 	vmov.f32	s13, s5
 8026c82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026c86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c8e:	ee16 aa90 	vmov	sl, s13
 8026c92:	eef0 6a43 	vmov.f32	s13, s6
 8026c96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c9a:	ee16 8a90 	vmov	r8, s13
 8026c9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026ca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026caa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026cae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026cb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026cb6:	ee12 2a90 	vmov	r2, s5
 8026cba:	eef0 2a47 	vmov.f32	s5, s14
 8026cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026cc2:	ee13 2a10 	vmov	r2, s6
 8026cc6:	932b      	str	r3, [sp, #172]	@ 0xac
 8026cc8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026cca:	eeb0 3a67 	vmov.f32	s6, s15
 8026cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8026cd2:	932c      	str	r3, [sp, #176]	@ 0xb0
 8026cd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026cd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026cd8:	3b01      	subs	r3, #1
 8026cda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026cdc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026cde:	bf08      	it	eq
 8026ce0:	4613      	moveq	r3, r2
 8026ce2:	9307      	str	r3, [sp, #28]
 8026ce4:	e6b1      	b.n	8026a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026ce6:	1c47      	adds	r7, r0, #1
 8026ce8:	d482      	bmi.n	8026bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026cea:	42bb      	cmp	r3, r7
 8026cec:	db80      	blt.n	8026bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026cee:	1c67      	adds	r7, r4, #1
 8026cf0:	f53f af7e 	bmi.w	8026bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026cf4:	42be      	cmp	r6, r7
 8026cf6:	f6ff af7b 	blt.w	8026bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026cfa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026cfc:	b236      	sxth	r6, r6
 8026cfe:	9001      	str	r0, [sp, #4]
 8026d00:	b21b      	sxth	r3, r3
 8026d02:	9600      	str	r6, [sp, #0]
 8026d04:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026d06:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8026d0a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8026d0e:	4629      	mov	r1, r5
 8026d10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026d12:	f7ff fd82 	bl	802681a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8026d16:	e76b      	b.n	8026bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026d18:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8026d1a:	ea4f 402a 	mov.w	r0, sl, asr #16
 8026d1e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8026d22:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8026d26:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8026d2a:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026d2e:	fb07 0101 	mla	r1, r7, r1, r0
 8026d32:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026d38:	1844      	adds	r4, r0, r1
 8026d3a:	5c40      	ldrb	r0, [r0, r1]
 8026d3c:	78a6      	ldrb	r6, [r4, #2]
 8026d3e:	7861      	ldrb	r1, [r4, #1]
 8026d40:	960f      	str	r6, [sp, #60]	@ 0x3c
 8026d42:	78e6      	ldrb	r6, [r4, #3]
 8026d44:	910d      	str	r1, [sp, #52]	@ 0x34
 8026d46:	9610      	str	r6, [sp, #64]	@ 0x40
 8026d48:	f894 9004 	ldrb.w	r9, [r4, #4]
 8026d4c:	f894 b005 	ldrb.w	fp, [r4, #5]
 8026d50:	b192      	cbz	r2, 8026d78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8026d52:	f06f 0604 	mvn.w	r6, #4
 8026d56:	2103      	movs	r1, #3
 8026d58:	3405      	adds	r4, #5
 8026d5a:	fb17 6701 	smlabb	r7, r7, r1, r6
 8026d5e:	19e6      	adds	r6, r4, r7
 8026d60:	5de4      	ldrb	r4, [r4, r7]
 8026d62:	9417      	str	r4, [sp, #92]	@ 0x5c
 8026d64:	7874      	ldrb	r4, [r6, #1]
 8026d66:	9419      	str	r4, [sp, #100]	@ 0x64
 8026d68:	78b4      	ldrb	r4, [r6, #2]
 8026d6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8026d6c:	78f4      	ldrb	r4, [r6, #3]
 8026d6e:	9418      	str	r4, [sp, #96]	@ 0x60
 8026d70:	7934      	ldrb	r4, [r6, #4]
 8026d72:	941a      	str	r4, [sp, #104]	@ 0x68
 8026d74:	7974      	ldrb	r4, [r6, #5]
 8026d76:	941c      	str	r4, [sp, #112]	@ 0x70
 8026d78:	b29b      	uxth	r3, r3
 8026d7a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026d7c:	b292      	uxth	r2, r2
 8026d7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026d80:	3503      	adds	r5, #3
 8026d82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026d86:	fb03 f402 	mul.w	r4, r3, r2
 8026d8a:	011b      	lsls	r3, r3, #4
 8026d8c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026d90:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8026d94:	1b1b      	subs	r3, r3, r4
 8026d96:	b292      	uxth	r2, r2
 8026d98:	b29b      	uxth	r3, r3
 8026d9a:	1ab6      	subs	r6, r6, r2
 8026d9c:	435f      	muls	r7, r3
 8026d9e:	b2b6      	uxth	r6, r6
 8026da0:	fb03 f909 	mul.w	r9, r3, r9
 8026da4:	fb03 fb0b 	mul.w	fp, r3, fp
 8026da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026daa:	fb06 7000 	mla	r0, r6, r0, r7
 8026dae:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8026db0:	fb06 bb03 	mla	fp, r6, r3, fp
 8026db4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026db6:	fb02 0007 	mla	r0, r2, r7, r0
 8026dba:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8026dbc:	fb02 bb03 	mla	fp, r2, r3, fp
 8026dc0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026dc2:	fb04 0007 	mla	r0, r4, r7, r0
 8026dc6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8026dca:	fb17 f701 	smulbb	r7, r7, r1
 8026dce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026dd2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026dd4:	fb00 700e 	mla	r0, r0, lr, r7
 8026dd8:	fb06 9101 	mla	r1, r6, r1, r9
 8026ddc:	b280      	uxth	r0, r0
 8026dde:	1c47      	adds	r7, r0, #1
 8026de0:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8026de4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026de6:	1200      	asrs	r0, r0, #8
 8026de8:	f805 0c06 	strb.w	r0, [r5, #-6]
 8026dec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026dee:	fb02 1100 	mla	r1, r2, r0, r1
 8026df2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8026df4:	fb04 1100 	mla	r1, r4, r0, r1
 8026df8:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8026dfc:	fb04 b403 	mla	r4, r4, r3, fp
 8026e00:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8026e04:	fb10 f007 	smulbb	r0, r0, r7
 8026e08:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026e0c:	fb13 f307 	smulbb	r3, r3, r7
 8026e10:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8026e14:	fb01 010e 	mla	r1, r1, lr, r0
 8026e18:	fb04 340e 	mla	r4, r4, lr, r3
 8026e1c:	b289      	uxth	r1, r1
 8026e1e:	b2a4      	uxth	r4, r4
 8026e20:	1c48      	adds	r0, r1, #1
 8026e22:	1c63      	adds	r3, r4, #1
 8026e24:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026e28:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026e2c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026e2e:	1209      	asrs	r1, r1, #8
 8026e30:	1224      	asrs	r4, r4, #8
 8026e32:	449a      	add	sl, r3
 8026e34:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026e36:	f805 1c05 	strb.w	r1, [r5, #-5]
 8026e3a:	f805 4c04 	strb.w	r4, [r5, #-4]
 8026e3e:	4498      	add	r8, r3
 8026e40:	e707      	b.n	8026c52 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8026e42:	b01f      	add	sp, #124	@ 0x7c
 8026e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8026e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e4c:	b087      	sub	sp, #28
 8026e4e:	780d      	ldrb	r5, [r1, #0]
 8026e50:	784c      	ldrb	r4, [r1, #1]
 8026e52:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8026e56:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8026e5a:	9004      	str	r0, [sp, #16]
 8026e5c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8026e60:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8026e64:	9005      	str	r0, [sp, #20]
 8026e66:	fb06 bc03 	mla	ip, r6, r3, fp
 8026e6a:	2e00      	cmp	r6, #0
 8026e6c:	7888      	ldrb	r0, [r1, #2]
 8026e6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026e72:	eb02 090c 	add.w	r9, r2, ip
 8026e76:	f2c0 8084 	blt.w	8026f82 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026e7a:	42b7      	cmp	r7, r6
 8026e7c:	f340 8081 	ble.w	8026f82 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026e80:	f1bb 0f00 	cmp.w	fp, #0
 8026e84:	db79      	blt.n	8026f7a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8026e86:	455b      	cmp	r3, fp
 8026e88:	dd77      	ble.n	8026f7a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8026e8a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8026e8e:	9201      	str	r2, [sp, #4]
 8026e90:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026e94:	9202      	str	r2, [sp, #8]
 8026e96:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026e9a:	9203      	str	r2, [sp, #12]
 8026e9c:	f11b 0201 	adds.w	r2, fp, #1
 8026ea0:	d476      	bmi.n	8026f90 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026ea2:	4293      	cmp	r3, r2
 8026ea4:	dd74      	ble.n	8026f90 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026ea6:	9a04      	ldr	r2, [sp, #16]
 8026ea8:	2a00      	cmp	r2, #0
 8026eaa:	d071      	beq.n	8026f90 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026eac:	f899 8003 	ldrb.w	r8, [r9, #3]
 8026eb0:	f899 c004 	ldrb.w	ip, [r9, #4]
 8026eb4:	f899 a005 	ldrb.w	sl, [r9, #5]
 8026eb8:	3601      	adds	r6, #1
 8026eba:	d471      	bmi.n	8026fa0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8026ebc:	42b7      	cmp	r7, r6
 8026ebe:	dd6f      	ble.n	8026fa0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8026ec0:	9a05      	ldr	r2, [sp, #20]
 8026ec2:	2a00      	cmp	r2, #0
 8026ec4:	d06c      	beq.n	8026fa0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8026ec6:	f1bb 0f00 	cmp.w	fp, #0
 8026eca:	db65      	blt.n	8026f98 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8026ecc:	455b      	cmp	r3, fp
 8026ece:	dd63      	ble.n	8026f98 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8026ed0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026ed4:	f819 e002 	ldrb.w	lr, [r9, r2]
 8026ed8:	2203      	movs	r2, #3
 8026eda:	fb03 9602 	mla	r6, r3, r2, r9
 8026ede:	7877      	ldrb	r7, [r6, #1]
 8026ee0:	78b6      	ldrb	r6, [r6, #2]
 8026ee2:	f11b 0b01 	adds.w	fp, fp, #1
 8026ee6:	d40c      	bmi.n	8026f02 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8026ee8:	455b      	cmp	r3, fp
 8026eea:	dd0a      	ble.n	8026f02 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8026eec:	9a04      	ldr	r2, [sp, #16]
 8026eee:	b142      	cbz	r2, 8026f02 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8026ef0:	2203      	movs	r2, #3
 8026ef2:	fb13 2002 	smlabb	r0, r3, r2, r2
 8026ef6:	f819 5000 	ldrb.w	r5, [r9, r0]
 8026efa:	fb03 9002 	mla	r0, r3, r2, r9
 8026efe:	7904      	ldrb	r4, [r0, #4]
 8026f00:	7940      	ldrb	r0, [r0, #5]
 8026f02:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8026f06:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026f0a:	fb03 fb02 	mul.w	fp, r3, r2
 8026f0e:	011b      	lsls	r3, r3, #4
 8026f10:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8026f14:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8026f18:	eba3 030b 	sub.w	r3, r3, fp
 8026f1c:	b292      	uxth	r2, r2
 8026f1e:	b29b      	uxth	r3, r3
 8026f20:	eba9 0902 	sub.w	r9, r9, r2
 8026f24:	9304      	str	r3, [sp, #16]
 8026f26:	fa1f f989 	uxth.w	r9, r9
 8026f2a:	fb03 f808 	mul.w	r8, r3, r8
 8026f2e:	9b01      	ldr	r3, [sp, #4]
 8026f30:	fb09 8803 	mla	r8, r9, r3, r8
 8026f34:	9b04      	ldr	r3, [sp, #16]
 8026f36:	fb03 fc0c 	mul.w	ip, r3, ip
 8026f3a:	9b02      	ldr	r3, [sp, #8]
 8026f3c:	fb02 880e 	mla	r8, r2, lr, r8
 8026f40:	fb09 cc03 	mla	ip, r9, r3, ip
 8026f44:	9b04      	ldr	r3, [sp, #16]
 8026f46:	fb0b 8805 	mla	r8, fp, r5, r8
 8026f4a:	fb02 c707 	mla	r7, r2, r7, ip
 8026f4e:	fb03 f30a 	mul.w	r3, r3, sl
 8026f52:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026f56:	fb0b 7404 	mla	r4, fp, r4, r7
 8026f5a:	f881 8000 	strb.w	r8, [r1]
 8026f5e:	1224      	asrs	r4, r4, #8
 8026f60:	704c      	strb	r4, [r1, #1]
 8026f62:	9c03      	ldr	r4, [sp, #12]
 8026f64:	fb09 3904 	mla	r9, r9, r4, r3
 8026f68:	fb02 9206 	mla	r2, r2, r6, r9
 8026f6c:	fb0b 2000 	mla	r0, fp, r0, r2
 8026f70:	1200      	asrs	r0, r0, #8
 8026f72:	7088      	strb	r0, [r1, #2]
 8026f74:	b007      	add	sp, #28
 8026f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f7a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026f7e:	9501      	str	r5, [sp, #4]
 8026f80:	e78c      	b.n	8026e9c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8026f82:	4682      	mov	sl, r0
 8026f84:	46a4      	mov	ip, r4
 8026f86:	46a8      	mov	r8, r5
 8026f88:	9501      	str	r5, [sp, #4]
 8026f8a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026f8e:	e793      	b.n	8026eb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026f90:	4682      	mov	sl, r0
 8026f92:	46a4      	mov	ip, r4
 8026f94:	46a8      	mov	r8, r5
 8026f96:	e78f      	b.n	8026eb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026f98:	4606      	mov	r6, r0
 8026f9a:	4627      	mov	r7, r4
 8026f9c:	46ae      	mov	lr, r5
 8026f9e:	e7a0      	b.n	8026ee2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8026fa0:	4606      	mov	r6, r0
 8026fa2:	4627      	mov	r7, r4
 8026fa4:	46ae      	mov	lr, r5
 8026fa6:	e7ac      	b.n	8026f02 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08026fa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fac:	b09b      	sub	sp, #108	@ 0x6c
 8026fae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026fb0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026fb2:	9019      	str	r0, [sp, #100]	@ 0x64
 8026fb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8026fb6:	6850      	ldr	r0, [r2, #4]
 8026fb8:	9306      	str	r3, [sp, #24]
 8026fba:	6812      	ldr	r2, [r2, #0]
 8026fbc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8026fc0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8026fc4:	fb00 1303 	mla	r3, r0, r3, r1
 8026fc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026fcc:	18d3      	adds	r3, r2, r3
 8026fce:	9307      	str	r3, [sp, #28]
 8026fd0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026fd2:	681b      	ldr	r3, [r3, #0]
 8026fd4:	9308      	str	r3, [sp, #32]
 8026fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026fd8:	2b00      	cmp	r3, #0
 8026fda:	dc03      	bgt.n	8026fe4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	f340 81ab 	ble.w	802733a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026fe4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026fe6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026fea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026fee:	1e48      	subs	r0, r1, #1
 8026ff0:	1e55      	subs	r5, r2, #1
 8026ff2:	9b06      	ldr	r3, [sp, #24]
 8026ff4:	2b00      	cmp	r3, #0
 8026ff6:	f340 80b1 	ble.w	802715c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026ffa:	ea5f 462b 	movs.w	r6, fp, asr #16
 8026ffe:	ea4f 4324 	mov.w	r3, r4, asr #16
 8027002:	d406      	bmi.n	8027012 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027004:	4286      	cmp	r6, r0
 8027006:	da04      	bge.n	8027012 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027008:	2b00      	cmp	r3, #0
 802700a:	db02      	blt.n	8027012 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802700c:	42ab      	cmp	r3, r5
 802700e:	f2c0 80a6 	blt.w	802715e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027012:	3601      	adds	r6, #1
 8027014:	f100 8097 	bmi.w	8027146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027018:	42b1      	cmp	r1, r6
 802701a:	f2c0 8094 	blt.w	8027146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802701e:	3301      	adds	r3, #1
 8027020:	f100 8091 	bmi.w	8027146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027024:	429a      	cmp	r2, r3
 8027026:	f2c0 808e 	blt.w	8027146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802702a:	9b06      	ldr	r3, [sp, #24]
 802702c:	9e07      	ldr	r6, [sp, #28]
 802702e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027032:	2b00      	cmp	r3, #0
 8027034:	f340 80b0 	ble.w	8027198 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8027038:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802703a:	1425      	asrs	r5, r4, #16
 802703c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802703e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8027042:	68c7      	ldr	r7, [r0, #12]
 8027044:	ea5f 402b 	movs.w	r0, fp, asr #16
 8027048:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802704c:	689b      	ldr	r3, [r3, #8]
 802704e:	f100 80ea 	bmi.w	8027226 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027052:	f103 3cff 	add.w	ip, r3, #4294967295
 8027056:	4560      	cmp	r0, ip
 8027058:	f280 80e5 	bge.w	8027226 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802705c:	2d00      	cmp	r5, #0
 802705e:	f2c0 80e2 	blt.w	8027226 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027062:	f107 3cff 	add.w	ip, r7, #4294967295
 8027066:	4565      	cmp	r5, ip
 8027068:	f280 80dd 	bge.w	8027226 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802706c:	b21b      	sxth	r3, r3
 802706e:	fb05 0003 	mla	r0, r5, r3, r0
 8027072:	9d08      	ldr	r5, [sp, #32]
 8027074:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027078:	182f      	adds	r7, r5, r0
 802707a:	5c2d      	ldrb	r5, [r5, r0]
 802707c:	7878      	ldrb	r0, [r7, #1]
 802707e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8027082:	900c      	str	r0, [sp, #48]	@ 0x30
 8027084:	f897 9003 	ldrb.w	r9, [r7, #3]
 8027088:	f897 8004 	ldrb.w	r8, [r7, #4]
 802708c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8027090:	b1c9      	cbz	r1, 80270c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8027092:	f04f 0c03 	mov.w	ip, #3
 8027096:	f06f 0004 	mvn.w	r0, #4
 802709a:	3705      	adds	r7, #5
 802709c:	fb13 030c 	smlabb	r3, r3, ip, r0
 80270a0:	eb07 0c03 	add.w	ip, r7, r3
 80270a4:	5cfb      	ldrb	r3, [r7, r3]
 80270a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80270a8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80270ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80270ae:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80270b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80270b4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80270b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80270ba:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80270be:	9310      	str	r3, [sp, #64]	@ 0x40
 80270c0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80270c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80270c6:	b292      	uxth	r2, r2
 80270c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80270ca:	b289      	uxth	r1, r1
 80270cc:	fb02 f301 	mul.w	r3, r2, r1
 80270d0:	0112      	lsls	r2, r2, #4
 80270d2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80270d6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80270da:	1ad2      	subs	r2, r2, r3
 80270dc:	b289      	uxth	r1, r1
 80270de:	b292      	uxth	r2, r2
 80270e0:	1a7f      	subs	r7, r7, r1
 80270e2:	fb02 f909 	mul.w	r9, r2, r9
 80270e6:	b2bf      	uxth	r7, r7
 80270e8:	fb02 f808 	mul.w	r8, r2, r8
 80270ec:	fb02 fa0a 	mul.w	sl, r2, sl
 80270f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80270f2:	fb07 9905 	mla	r9, r7, r5, r9
 80270f6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80270f8:	fb07 8800 	mla	r8, r7, r0, r8
 80270fc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80270fe:	fb07 aa0e 	mla	sl, r7, lr, sl
 8027102:	fb01 9905 	mla	r9, r1, r5, r9
 8027106:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027108:	fb01 8800 	mla	r8, r1, r0, r8
 802710c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802710e:	fb01 a102 	mla	r1, r1, r2, sl
 8027112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027114:	fb03 9905 	mla	r9, r3, r5, r9
 8027118:	fb03 8800 	mla	r8, r3, r0, r8
 802711c:	fb03 1302 	mla	r3, r3, r2, r1
 8027120:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027124:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027128:	121b      	asrs	r3, r3, #8
 802712a:	f886 9000 	strb.w	r9, [r6]
 802712e:	f886 8001 	strb.w	r8, [r6, #1]
 8027132:	70b3      	strb	r3, [r6, #2]
 8027134:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027136:	3603      	adds	r6, #3
 8027138:	449b      	add	fp, r3
 802713a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802713c:	441c      	add	r4, r3
 802713e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027140:	3b01      	subs	r3, #1
 8027142:	930a      	str	r3, [sp, #40]	@ 0x28
 8027144:	e774      	b.n	8027030 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027146:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027148:	449b      	add	fp, r3
 802714a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802714c:	441c      	add	r4, r3
 802714e:	9b06      	ldr	r3, [sp, #24]
 8027150:	3b01      	subs	r3, #1
 8027152:	9306      	str	r3, [sp, #24]
 8027154:	9b07      	ldr	r3, [sp, #28]
 8027156:	3303      	adds	r3, #3
 8027158:	9307      	str	r3, [sp, #28]
 802715a:	e74a      	b.n	8026ff2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802715c:	d024      	beq.n	80271a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802715e:	9b06      	ldr	r3, [sp, #24]
 8027160:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027162:	3b01      	subs	r3, #1
 8027164:	fb00 b003 	mla	r0, r0, r3, fp
 8027168:	1400      	asrs	r0, r0, #16
 802716a:	f53f af5e 	bmi.w	802702a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802716e:	3901      	subs	r1, #1
 8027170:	4288      	cmp	r0, r1
 8027172:	f6bf af5a 	bge.w	802702a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027176:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027178:	fb01 4303 	mla	r3, r1, r3, r4
 802717c:	141b      	asrs	r3, r3, #16
 802717e:	f53f af54 	bmi.w	802702a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027182:	3a01      	subs	r2, #1
 8027184:	4293      	cmp	r3, r2
 8027186:	f6bf af50 	bge.w	802702a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802718a:	9b07      	ldr	r3, [sp, #28]
 802718c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8027190:	1cde      	adds	r6, r3, #3
 8027192:	f1be 0f00 	cmp.w	lr, #0
 8027196:	dc5f      	bgt.n	8027258 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8027198:	9b06      	ldr	r3, [sp, #24]
 802719a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802719e:	9b07      	ldr	r3, [sp, #28]
 80271a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80271a4:	4423      	add	r3, r4
 80271a6:	9307      	str	r3, [sp, #28]
 80271a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271aa:	2b00      	cmp	r3, #0
 80271ac:	f340 80c5 	ble.w	802733a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80271b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80271b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80271b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80271ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80271be:	eef0 6a62 	vmov.f32	s13, s5
 80271c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80271c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80271ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271ce:	ee16 ba90 	vmov	fp, s13
 80271d2:	eef0 6a43 	vmov.f32	s13, s6
 80271d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271da:	ee16 4a90 	vmov	r4, s13
 80271de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80271e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80271e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80271ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80271ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80271f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80271f6:	ee12 2a90 	vmov	r2, s5
 80271fa:	eef0 2a47 	vmov.f32	s5, s14
 80271fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027202:	ee13 2a10 	vmov	r2, s6
 8027206:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027208:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802720a:	eeb0 3a67 	vmov.f32	s6, s15
 802720e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027212:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027216:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027218:	3b01      	subs	r3, #1
 802721a:	9309      	str	r3, [sp, #36]	@ 0x24
 802721c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802721e:	bf08      	it	eq
 8027220:	4613      	moveq	r3, r2
 8027222:	9306      	str	r3, [sp, #24]
 8027224:	e6d7      	b.n	8026fd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027226:	f110 0c01 	adds.w	ip, r0, #1
 802722a:	d483      	bmi.n	8027134 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802722c:	4563      	cmp	r3, ip
 802722e:	db81      	blt.n	8027134 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027230:	f115 0c01 	adds.w	ip, r5, #1
 8027234:	f53f af7e 	bmi.w	8027134 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027238:	4567      	cmp	r7, ip
 802723a:	f6ff af7b 	blt.w	8027134 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802723e:	b23f      	sxth	r7, r7
 8027240:	b21b      	sxth	r3, r3
 8027242:	9700      	str	r7, [sp, #0]
 8027244:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8027248:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802724c:	9a08      	ldr	r2, [sp, #32]
 802724e:	4631      	mov	r1, r6
 8027250:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8027252:	f7ff fdf9 	bl	8026e48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8027256:	e76d      	b.n	8027134 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027258:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802725a:	ea4f 402b 	mov.w	r0, fp, asr #16
 802725e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8027262:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027266:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802726a:	1421      	asrs	r1, r4, #16
 802726c:	930a      	str	r3, [sp, #40]	@ 0x28
 802726e:	fb0c 0101 	mla	r1, ip, r1, r0
 8027272:	9808      	ldr	r0, [sp, #32]
 8027274:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027278:	1845      	adds	r5, r0, r1
 802727a:	5c40      	ldrb	r0, [r0, r1]
 802727c:	796f      	ldrb	r7, [r5, #5]
 802727e:	7869      	ldrb	r1, [r5, #1]
 8027280:	f895 8002 	ldrb.w	r8, [r5, #2]
 8027284:	f895 a003 	ldrb.w	sl, [r5, #3]
 8027288:	f895 9004 	ldrb.w	r9, [r5, #4]
 802728c:	970c      	str	r7, [sp, #48]	@ 0x30
 802728e:	b1a2      	cbz	r2, 80272ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027290:	2703      	movs	r7, #3
 8027292:	f06f 0304 	mvn.w	r3, #4
 8027296:	3505      	adds	r5, #5
 8027298:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802729c:	eb05 070c 	add.w	r7, r5, ip
 80272a0:	f815 500c 	ldrb.w	r5, [r5, ip]
 80272a4:	9513      	str	r5, [sp, #76]	@ 0x4c
 80272a6:	787d      	ldrb	r5, [r7, #1]
 80272a8:	9515      	str	r5, [sp, #84]	@ 0x54
 80272aa:	78bd      	ldrb	r5, [r7, #2]
 80272ac:	9517      	str	r5, [sp, #92]	@ 0x5c
 80272ae:	78fd      	ldrb	r5, [r7, #3]
 80272b0:	9514      	str	r5, [sp, #80]	@ 0x50
 80272b2:	793d      	ldrb	r5, [r7, #4]
 80272b4:	9516      	str	r5, [sp, #88]	@ 0x58
 80272b6:	797d      	ldrb	r5, [r7, #5]
 80272b8:	9518      	str	r5, [sp, #96]	@ 0x60
 80272ba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80272be:	b292      	uxth	r2, r2
 80272c0:	3603      	adds	r6, #3
 80272c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80272c6:	fb03 f502 	mul.w	r5, r3, r2
 80272ca:	011b      	lsls	r3, r3, #4
 80272cc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80272d0:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 80272d4:	1b5b      	subs	r3, r3, r5
 80272d6:	b292      	uxth	r2, r2
 80272d8:	b29b      	uxth	r3, r3
 80272da:	1abf      	subs	r7, r7, r2
 80272dc:	fb03 f909 	mul.w	r9, r3, r9
 80272e0:	b2bf      	uxth	r7, r7
 80272e2:	fb03 fa0a 	mul.w	sl, r3, sl
 80272e6:	fb07 9901 	mla	r9, r7, r1, r9
 80272ea:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80272ec:	fb07 aa00 	mla	sl, r7, r0, sl
 80272f0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80272f2:	fb02 9901 	mla	r9, r2, r1, r9
 80272f6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80272f8:	fb02 aa00 	mla	sl, r2, r0, sl
 80272fc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80272fe:	fb05 9901 	mla	r9, r5, r1, r9
 8027302:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027304:	fb05 aa00 	mla	sl, r5, r0, sl
 8027308:	434b      	muls	r3, r1
 802730a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802730c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8027310:	fb07 3308 	mla	r3, r7, r8, r3
 8027314:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027318:	f806 ac06 	strb.w	sl, [r6, #-6]
 802731c:	fb02 3201 	mla	r2, r2, r1, r3
 8027320:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027322:	f806 9c05 	strb.w	r9, [r6, #-5]
 8027326:	fb05 2503 	mla	r5, r5, r3, r2
 802732a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802732c:	122d      	asrs	r5, r5, #8
 802732e:	449b      	add	fp, r3
 8027330:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027332:	f806 5c04 	strb.w	r5, [r6, #-4]
 8027336:	441c      	add	r4, r3
 8027338:	e72b      	b.n	8027192 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802733a:	b01b      	add	sp, #108	@ 0x6c
 802733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027340 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8027340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027344:	b087      	sub	sp, #28
 8027346:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 802734a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802734e:	fb05 7003 	mla	r0, r5, r3, r7
 8027352:	2d00      	cmp	r5, #0
 8027354:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8027358:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802735c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8027360:	f2c0 811f 	blt.w	80275a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8027364:	45a8      	cmp	r8, r5
 8027366:	f340 811c 	ble.w	80275a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802736a:	2f00      	cmp	r7, #0
 802736c:	f2c0 8117 	blt.w	802759e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8027370:	42bb      	cmp	r3, r7
 8027372:	f340 8114 	ble.w	802759e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8027376:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802737a:	1c7a      	adds	r2, r7, #1
 802737c:	f100 8114 	bmi.w	80275a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8027380:	4293      	cmp	r3, r2
 8027382:	f340 8111 	ble.w	80275a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8027386:	2c00      	cmp	r4, #0
 8027388:	f000 8110 	beq.w	80275ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 802738c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8027390:	3501      	adds	r5, #1
 8027392:	f100 810f 	bmi.w	80275b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8027396:	45a8      	cmp	r8, r5
 8027398:	f340 810c 	ble.w	80275b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802739c:	f1be 0f00 	cmp.w	lr, #0
 80273a0:	f000 810b 	beq.w	80275ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80273a4:	2f00      	cmp	r7, #0
 80273a6:	f2c0 8103 	blt.w	80275b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80273aa:	42bb      	cmp	r3, r7
 80273ac:	f340 8100 	ble.w	80275b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80273b0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80273b4:	3701      	adds	r7, #1
 80273b6:	f100 8103 	bmi.w	80275c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80273ba:	42bb      	cmp	r3, r7
 80273bc:	f340 8100 	ble.w	80275c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80273c0:	2c00      	cmp	r4, #0
 80273c2:	f000 80ff 	beq.w	80275c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80273c6:	3301      	adds	r3, #1
 80273c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80273cc:	fa1f fc84 	uxth.w	ip, r4
 80273d0:	fa1f fe8e 	uxth.w	lr, lr
 80273d4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80273d8:	fb0c f90e 	mul.w	r9, ip, lr
 80273dc:	0e13      	lsrs	r3, r2, #24
 80273de:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80273e2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80273e6:	9302      	str	r3, [sp, #8]
 80273e8:	ebac 0709 	sub.w	r7, ip, r9
 80273ec:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80273f0:	fa1f f48e 	uxth.w	r4, lr
 80273f4:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80273f8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80273fc:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8027400:	fb0a fe0e 	mul.w	lr, sl, lr
 8027404:	1b1b      	subs	r3, r3, r4
 8027406:	fb0a f606 	mul.w	r6, sl, r6
 802740a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802740e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027412:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027416:	b29b      	uxth	r3, r3
 8027418:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802741c:	b2bf      	uxth	r7, r7
 802741e:	9301      	str	r3, [sp, #4]
 8027420:	44e6      	add	lr, ip
 8027422:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8027426:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802742a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802742e:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8027432:	9303      	str	r3, [sp, #12]
 8027434:	0a33      	lsrs	r3, r6, #8
 8027436:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 802743a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802743e:	9304      	str	r3, [sp, #16]
 8027440:	fb0b f606 	mul.w	r6, fp, r6
 8027444:	fb0b f000 	mul.w	r0, fp, r0
 8027448:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802744c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027450:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027454:	44b6      	add	lr, r6
 8027456:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 802745a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802745e:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8027462:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8027466:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802746a:	fb08 f606 	mul.w	r6, r8, r6
 802746e:	0a03      	lsrs	r3, r0, #8
 8027470:	fb08 f505 	mul.w	r5, r8, r5
 8027474:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027478:	0a30      	lsrs	r0, r6, #8
 802747a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802747e:	9305      	str	r3, [sp, #20]
 8027480:	0e13      	lsrs	r3, r2, #24
 8027482:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027486:	fb0e fe07 	mul.w	lr, lr, r7
 802748a:	4430      	add	r0, r6
 802748c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8027490:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8027494:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8027498:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802749c:	0a00      	lsrs	r0, r0, #8
 802749e:	435e      	muls	r6, r3
 80274a0:	0a2d      	lsrs	r5, r5, #8
 80274a2:	435a      	muls	r2, r3
 80274a4:	9b03      	ldr	r3, [sp, #12]
 80274a6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80274aa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80274ae:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80274b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80274b6:	44b4      	add	ip, r6
 80274b8:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80274bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274c0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80274c4:	9e01      	ldr	r6, [sp, #4]
 80274c6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80274ca:	fb03 ee06 	mla	lr, r3, r6, lr
 80274ce:	9b04      	ldr	r3, [sp, #16]
 80274d0:	0a12      	lsrs	r2, r2, #8
 80274d2:	fb0c ee09 	mla	lr, ip, r9, lr
 80274d6:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80274da:	9b05      	ldr	r3, [sp, #20]
 80274dc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80274e0:	fb00 ee04 	mla	lr, r0, r4, lr
 80274e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80274e8:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80274ec:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80274f0:	9b01      	ldr	r3, [sp, #4]
 80274f2:	fb07 fe0e 	mul.w	lr, r7, lr
 80274f6:	fb07 f70b 	mul.w	r7, r7, fp
 80274fa:	fb03 ee06 	mla	lr, r3, r6, lr
 80274fe:	fb03 730a 	mla	r3, r3, sl, r7
 8027502:	fb09 e202 	mla	r2, r9, r2, lr
 8027506:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802750a:	fb04 2e0e 	mla	lr, r4, lr, r2
 802750e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8027512:	fb04 3408 	mla	r4, r4, r8, r3
 8027516:	9b02      	ldr	r3, [sp, #8]
 8027518:	b292      	uxth	r2, r2
 802751a:	fb09 4903 	mla	r9, r9, r3, r4
 802751e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027522:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027526:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802752a:	fb09 f902 	mul.w	r9, r9, r2
 802752e:	ea40 0e0e 	orr.w	lr, r0, lr
 8027532:	f109 0301 	add.w	r3, r9, #1
 8027536:	fa5f f08e 	uxtb.w	r0, lr
 802753a:	fb10 f002 	smulbb	r0, r0, r2
 802753e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8027542:	780b      	ldrb	r3, [r1, #0]
 8027544:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8027548:	fa5f f989 	uxtb.w	r9, r9
 802754c:	fb03 0309 	mla	r3, r3, r9, r0
 8027550:	b29b      	uxth	r3, r3
 8027552:	1c58      	adds	r0, r3, #1
 8027554:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027558:	7848      	ldrb	r0, [r1, #1]
 802755a:	fb10 f009 	smulbb	r0, r0, r9
 802755e:	121b      	asrs	r3, r3, #8
 8027560:	700b      	strb	r3, [r1, #0]
 8027562:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8027566:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802756a:	fb03 0302 	mla	r3, r3, r2, r0
 802756e:	b29b      	uxth	r3, r3
 8027570:	1c58      	adds	r0, r3, #1
 8027572:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027576:	121b      	asrs	r3, r3, #8
 8027578:	704b      	strb	r3, [r1, #1]
 802757a:	788b      	ldrb	r3, [r1, #2]
 802757c:	fb13 f909 	smulbb	r9, r3, r9
 8027580:	fb0e 9e02 	mla	lr, lr, r2, r9
 8027584:	fa1f fe8e 	uxth.w	lr, lr
 8027588:	f10e 0301 	add.w	r3, lr, #1
 802758c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8027590:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027594:	f881 e002 	strb.w	lr, [r1, #2]
 8027598:	b007      	add	sp, #28
 802759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802759e:	2600      	movs	r6, #0
 80275a0:	e6eb      	b.n	802737a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 80275a2:	2000      	movs	r0, #0
 80275a4:	4606      	mov	r6, r0
 80275a6:	e6f3      	b.n	8027390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80275a8:	2000      	movs	r0, #0
 80275aa:	e6f1      	b.n	8027390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80275ac:	4620      	mov	r0, r4
 80275ae:	e6ef      	b.n	8027390 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80275b0:	2500      	movs	r5, #0
 80275b2:	e6ff      	b.n	80273b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80275b4:	2200      	movs	r2, #0
 80275b6:	4615      	mov	r5, r2
 80275b8:	e708      	b.n	80273cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80275ba:	4672      	mov	r2, lr
 80275bc:	4675      	mov	r5, lr
 80275be:	e705      	b.n	80273cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80275c0:	2200      	movs	r2, #0
 80275c2:	e703      	b.n	80273cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80275c4:	4622      	mov	r2, r4
 80275c6:	e701      	b.n	80273cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080275c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80275c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275cc:	b09d      	sub	sp, #116	@ 0x74
 80275ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80275d0:	9307      	str	r3, [sp, #28]
 80275d2:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80275d4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80275d8:	901b      	str	r0, [sp, #108]	@ 0x6c
 80275da:	931a      	str	r3, [sp, #104]	@ 0x68
 80275dc:	6850      	ldr	r0, [r2, #4]
 80275de:	9117      	str	r1, [sp, #92]	@ 0x5c
 80275e0:	6812      	ldr	r2, [r2, #0]
 80275e2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80275e6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 80275ea:	fb00 1303 	mla	r3, r0, r3, r1
 80275ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80275f2:	18d3      	adds	r3, r2, r3
 80275f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80275f6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80275f8:	681b      	ldr	r3, [r3, #0]
 80275fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80275fc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8027600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027604:	2b00      	cmp	r3, #0
 8027606:	dc03      	bgt.n	8027610 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027608:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802760a:	2b00      	cmp	r3, #0
 802760c:	f340 8368 	ble.w	8027ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8027610:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027612:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027616:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802761a:	1e48      	subs	r0, r1, #1
 802761c:	1e57      	subs	r7, r2, #1
 802761e:	9b07      	ldr	r3, [sp, #28]
 8027620:	2b00      	cmp	r3, #0
 8027622:	f340 8187 	ble.w	8027934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027626:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802762a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802762e:	d406      	bmi.n	802763e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027630:	4584      	cmp	ip, r0
 8027632:	da04      	bge.n	802763e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027634:	2b00      	cmp	r3, #0
 8027636:	db02      	blt.n	802763e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027638:	42bb      	cmp	r3, r7
 802763a:	f2c0 817c 	blt.w	8027936 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802763e:	f11c 0c01 	adds.w	ip, ip, #1
 8027642:	f100 816c 	bmi.w	802791e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027646:	4561      	cmp	r1, ip
 8027648:	f2c0 8169 	blt.w	802791e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802764c:	3301      	adds	r3, #1
 802764e:	f100 8166 	bmi.w	802791e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027652:	429a      	cmp	r2, r3
 8027654:	f2c0 8163 	blt.w	802791e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027658:	9b07      	ldr	r3, [sp, #28]
 802765a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802765c:	9318      	str	r3, [sp, #96]	@ 0x60
 802765e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027660:	2b00      	cmp	r3, #0
 8027662:	f340 8186 	ble.w	8027972 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027666:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027668:	142a      	asrs	r2, r5, #16
 802766a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802766e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027672:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027676:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802767a:	f100 81cb 	bmi.w	8027a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802767e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027682:	4542      	cmp	r2, r8
 8027684:	f280 81c6 	bge.w	8027a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8027688:	2800      	cmp	r0, #0
 802768a:	f2c0 81c3 	blt.w	8027a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802768e:	f103 38ff 	add.w	r8, r3, #4294967295
 8027692:	4540      	cmp	r0, r8
 8027694:	f280 81be 	bge.w	8027a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8027698:	fa0f f38e 	sxth.w	r3, lr
 802769c:	fb00 2203 	mla	r2, r0, r3, r2
 80276a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80276a2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80276a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80276aa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80276ae:	2900      	cmp	r1, #0
 80276b0:	f000 81a6 	beq.w	8027a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80276b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80276b8:	900c      	str	r0, [sp, #48]	@ 0x30
 80276ba:	0e00      	lsrs	r0, r0, #24
 80276bc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80276be:	f1bc 0f00 	cmp.w	ip, #0
 80276c2:	d00f      	beq.n	80276e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80276c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80276c8:	3b01      	subs	r3, #1
 80276ca:	009b      	lsls	r3, r3, #2
 80276cc:	3304      	adds	r3, #4
 80276ce:	eb08 0003 	add.w	r0, r8, r3
 80276d2:	f858 3003 	ldr.w	r3, [r8, r3]
 80276d6:	9308      	str	r3, [sp, #32]
 80276d8:	0e1b      	lsrs	r3, r3, #24
 80276da:	9311      	str	r3, [sp, #68]	@ 0x44
 80276dc:	6843      	ldr	r3, [r0, #4]
 80276de:	930d      	str	r3, [sp, #52]	@ 0x34
 80276e0:	0e1b      	lsrs	r3, r3, #24
 80276e2:	9314      	str	r3, [sp, #80]	@ 0x50
 80276e4:	b289      	uxth	r1, r1
 80276e6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80276e8:	fa1f fc8c 	uxth.w	ip, ip
 80276ec:	0108      	lsls	r0, r1, #4
 80276ee:	fb01 f90c 	mul.w	r9, r1, ip
 80276f2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80276f6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80276fa:	eba0 0809 	sub.w	r8, r0, r9
 80276fe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8027700:	fa1f f18c 	uxth.w	r1, ip
 8027704:	fa1f f888 	uxth.w	r8, r8
 8027708:	1a5b      	subs	r3, r3, r1
 802770a:	fb08 f000 	mul.w	r0, r8, r0
 802770e:	b29b      	uxth	r3, r3
 8027710:	fb03 000e 	mla	r0, r3, lr, r0
 8027714:	fb01 0004 	mla	r0, r1, r4, r0
 8027718:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802771a:	fb09 0004 	mla	r0, r9, r4, r0
 802771e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027722:	2800      	cmp	r0, #0
 8027724:	f000 80f2 	beq.w	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8027728:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802772c:	d01b      	beq.n	8027766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802772e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8027732:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027736:	fb0e fa0a 	mul.w	sl, lr, sl
 802773a:	fb0e fe02 	mul.w	lr, lr, r2
 802773e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027742:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027746:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802774a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802774e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027752:	4452      	add	r2, sl
 8027754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027758:	0a12      	lsrs	r2, r2, #8
 802775a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802775e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027762:	ea42 020c 	orr.w	r2, r2, ip
 8027766:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027768:	2cff      	cmp	r4, #255	@ 0xff
 802776a:	d021      	beq.n	80277b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802776c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802776e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8027772:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027774:	fb04 fb0b 	mul.w	fp, r4, fp
 8027778:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802777a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802777e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027780:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027784:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027788:	fb04 fa0a 	mul.w	sl, r4, sl
 802778c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027790:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027794:	44de      	add	lr, fp
 8027796:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802779a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802779e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80277a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80277a6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80277aa:	ea4e 040a 	orr.w	r4, lr, sl
 80277ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80277b0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80277b2:	2cff      	cmp	r4, #255	@ 0xff
 80277b4:	d021      	beq.n	80277fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80277b6:	9c08      	ldr	r4, [sp, #32]
 80277b8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80277bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80277be:	fb04 fb0b 	mul.w	fp, r4, fp
 80277c2:	9c08      	ldr	r4, [sp, #32]
 80277c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80277c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80277ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80277ce:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80277d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80277d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80277da:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80277de:	44de      	add	lr, fp
 80277e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80277e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80277e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80277ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80277f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80277f4:	ea4e 040a 	orr.w	r4, lr, sl
 80277f8:	9408      	str	r4, [sp, #32]
 80277fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80277fc:	2cff      	cmp	r4, #255	@ 0xff
 80277fe:	d021      	beq.n	8027844 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8027800:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027802:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8027806:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027808:	fb04 fb0b 	mul.w	fp, r4, fp
 802780c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802780e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027812:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027814:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027818:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802781c:	fb04 fa0a 	mul.w	sl, r4, sl
 8027820:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027824:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027828:	44de      	add	lr, fp
 802782a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802782e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027832:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027836:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802783a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802783e:	ea4e 040a 	orr.w	r4, lr, sl
 8027842:	940d      	str	r4, [sp, #52]	@ 0x34
 8027844:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027846:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802784a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802784e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027852:	9c08      	ldr	r4, [sp, #32]
 8027854:	fb08 fc0c 	mul.w	ip, r8, ip
 8027858:	fb03 cc0e 	mla	ip, r3, lr, ip
 802785c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027860:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027862:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027866:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802786a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802786c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027870:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027874:	fb08 f80e 	mul.w	r8, r8, lr
 8027878:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802787c:	fb03 8202 	mla	r2, r3, r2, r8
 8027880:	9b08      	ldr	r3, [sp, #32]
 8027882:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027886:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802788a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802788c:	fb01 220a 	mla	r2, r1, sl, r2
 8027890:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8027894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027896:	fb09 2901 	mla	r9, r9, r1, r2
 802789a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802789c:	4343      	muls	r3, r0
 802789e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80278a2:	1c58      	adds	r0, r3, #1
 80278a4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80278a8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80278ac:	783b      	ldrb	r3, [r7, #0]
 80278ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80278b2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80278b6:	fa5f f28c 	uxtb.w	r2, ip
 80278ba:	b2c0      	uxtb	r0, r0
 80278bc:	fb12 f201 	smulbb	r2, r2, r1
 80278c0:	fb03 2300 	mla	r3, r3, r0, r2
 80278c4:	b29b      	uxth	r3, r3
 80278c6:	1c5a      	adds	r2, r3, #1
 80278c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80278cc:	787a      	ldrb	r2, [r7, #1]
 80278ce:	fb12 f200 	smulbb	r2, r2, r0
 80278d2:	121b      	asrs	r3, r3, #8
 80278d4:	703b      	strb	r3, [r7, #0]
 80278d6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80278da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80278de:	fb03 2301 	mla	r3, r3, r1, r2
 80278e2:	b29b      	uxth	r3, r3
 80278e4:	1c5a      	adds	r2, r3, #1
 80278e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80278ea:	121b      	asrs	r3, r3, #8
 80278ec:	707b      	strb	r3, [r7, #1]
 80278ee:	78bb      	ldrb	r3, [r7, #2]
 80278f0:	fb13 f000 	smulbb	r0, r3, r0
 80278f4:	fb0c 0c01 	mla	ip, ip, r1, r0
 80278f8:	fa1f fc8c 	uxth.w	ip, ip
 80278fc:	f10c 0301 	add.w	r3, ip, #1
 8027900:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027904:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027908:	f887 c002 	strb.w	ip, [r7, #2]
 802790c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802790e:	3703      	adds	r7, #3
 8027910:	441d      	add	r5, r3
 8027912:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027914:	441e      	add	r6, r3
 8027916:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027918:	3b01      	subs	r3, #1
 802791a:	9318      	str	r3, [sp, #96]	@ 0x60
 802791c:	e69f      	b.n	802765e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802791e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027920:	441d      	add	r5, r3
 8027922:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027924:	441e      	add	r6, r3
 8027926:	9b07      	ldr	r3, [sp, #28]
 8027928:	3b01      	subs	r3, #1
 802792a:	9307      	str	r3, [sp, #28]
 802792c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802792e:	3303      	adds	r3, #3
 8027930:	930a      	str	r3, [sp, #40]	@ 0x28
 8027932:	e674      	b.n	802761e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027934:	d025      	beq.n	8027982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8027936:	9b07      	ldr	r3, [sp, #28]
 8027938:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802793a:	3b01      	subs	r3, #1
 802793c:	fb00 5003 	mla	r0, r0, r3, r5
 8027940:	1400      	asrs	r0, r0, #16
 8027942:	f53f ae89 	bmi.w	8027658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027946:	3901      	subs	r1, #1
 8027948:	4288      	cmp	r0, r1
 802794a:	f6bf ae85 	bge.w	8027658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802794e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8027950:	fb01 6303 	mla	r3, r1, r3, r6
 8027954:	141b      	asrs	r3, r3, #16
 8027956:	f53f ae7f 	bmi.w	8027658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802795a:	3a01      	subs	r2, #1
 802795c:	4293      	cmp	r3, r2
 802795e:	f6bf ae7b 	bge.w	8027658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027964:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027968:	f103 0e03 	add.w	lr, r3, #3
 802796c:	f1bb 0f00 	cmp.w	fp, #0
 8027970:	dc6e      	bgt.n	8027a50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8027972:	9b07      	ldr	r3, [sp, #28]
 8027974:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802797a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802797e:	4423      	add	r3, r4
 8027980:	930a      	str	r3, [sp, #40]	@ 0x28
 8027982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027984:	2b00      	cmp	r3, #0
 8027986:	f340 81ab 	ble.w	8027ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802798a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802798e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027990:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027994:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027998:	eef0 6a62 	vmov.f32	s13, s5
 802799c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80279a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80279a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279a8:	ee16 5a90 	vmov	r5, s13
 80279ac:	eef0 6a43 	vmov.f32	s13, s6
 80279b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279b4:	ee16 6a90 	vmov	r6, s13
 80279b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80279bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80279c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80279c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80279c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80279cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80279d0:	ee12 2a90 	vmov	r2, s5
 80279d4:	eef0 2a47 	vmov.f32	s5, s14
 80279d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80279dc:	ee13 2a10 	vmov	r2, s6
 80279e0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80279e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80279e4:	eeb0 3a67 	vmov.f32	s6, s15
 80279e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80279ec:	932a      	str	r3, [sp, #168]	@ 0xa8
 80279ee:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80279f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80279f2:	3b01      	subs	r3, #1
 80279f4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80279f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80279f8:	bf08      	it	eq
 80279fa:	4613      	moveq	r3, r2
 80279fc:	9307      	str	r3, [sp, #28]
 80279fe:	e600      	b.n	8027602 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027a00:	f1bc 0f00 	cmp.w	ip, #0
 8027a04:	f43f ae6e 	beq.w	80276e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027a08:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027a0c:	9308      	str	r3, [sp, #32]
 8027a0e:	0e1b      	lsrs	r3, r3, #24
 8027a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8027a12:	e667      	b.n	80276e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027a14:	f112 0801 	adds.w	r8, r2, #1
 8027a18:	f53f af78 	bmi.w	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8027a1c:	45c6      	cmp	lr, r8
 8027a1e:	f6ff af75 	blt.w	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8027a22:	f110 0801 	adds.w	r8, r0, #1
 8027a26:	f53f af71 	bmi.w	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8027a2a:	4543      	cmp	r3, r8
 8027a2c:	f6ff af6e 	blt.w	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8027a30:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8027a32:	b21b      	sxth	r3, r3
 8027a34:	9201      	str	r2, [sp, #4]
 8027a36:	9300      	str	r3, [sp, #0]
 8027a38:	fa0f f38e 	sxth.w	r3, lr
 8027a3c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027a42:	e9cd c404 	strd	ip, r4, [sp, #16]
 8027a46:	4639      	mov	r1, r7
 8027a48:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8027a4a:	f7ff fc79 	bl	8027340 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8027a4e:	e75d      	b.n	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8027a50:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027a52:	142f      	asrs	r7, r5, #16
 8027a54:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027a56:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027a5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8027a5e:	1433      	asrs	r3, r6, #16
 8027a60:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027a64:	fb02 7303 	mla	r3, r2, r3, r7
 8027a68:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8027a6c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8027a70:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027a74:	2900      	cmp	r1, #0
 8027a76:	f000 812a 	beq.w	8027cce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8027a7a:	687c      	ldr	r4, [r7, #4]
 8027a7c:	940e      	str	r4, [sp, #56]	@ 0x38
 8027a7e:	0e24      	lsrs	r4, r4, #24
 8027a80:	9415      	str	r4, [sp, #84]	@ 0x54
 8027a82:	b178      	cbz	r0, 8027aa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027a84:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8027a88:	3a01      	subs	r2, #1
 8027a8a:	0092      	lsls	r2, r2, #2
 8027a8c:	3204      	adds	r2, #4
 8027a8e:	eb07 0802 	add.w	r8, r7, r2
 8027a92:	58ba      	ldr	r2, [r7, r2]
 8027a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8027a96:	0e12      	lsrs	r2, r2, #24
 8027a98:	9212      	str	r2, [sp, #72]	@ 0x48
 8027a9a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8027a9e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8027aa0:	0e12      	lsrs	r2, r2, #24
 8027aa2:	9216      	str	r2, [sp, #88]	@ 0x58
 8027aa4:	b289      	uxth	r1, r1
 8027aa6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027aa8:	b280      	uxth	r0, r0
 8027aaa:	fb01 f900 	mul.w	r9, r1, r0
 8027aae:	0109      	lsls	r1, r1, #4
 8027ab0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027ab4:	eba1 0809 	sub.w	r8, r1, r9
 8027ab8:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8027abc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8027abe:	b280      	uxth	r0, r0
 8027ac0:	fa1f f888 	uxth.w	r8, r8
 8027ac4:	1a12      	subs	r2, r2, r0
 8027ac6:	fb08 f101 	mul.w	r1, r8, r1
 8027aca:	b292      	uxth	r2, r2
 8027acc:	fb02 110c 	mla	r1, r2, ip, r1
 8027ad0:	fb00 1104 	mla	r1, r0, r4, r1
 8027ad4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027ad6:	fb09 1104 	mla	r1, r9, r4, r1
 8027ada:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027ade:	2900      	cmp	r1, #0
 8027ae0:	f000 80ec 	beq.w	8027cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8027ae4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8027ae8:	d019      	beq.n	8027b1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8027aea:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8027aee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027af2:	fb0c fa0a 	mul.w	sl, ip, sl
 8027af6:	fb0c fc03 	mul.w	ip, ip, r3
 8027afa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027afe:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027b02:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8027b06:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027b0a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027b0e:	4453      	add	r3, sl
 8027b10:	0a3f      	lsrs	r7, r7, #8
 8027b12:	0a1b      	lsrs	r3, r3, #8
 8027b14:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8027b18:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027b1c:	433b      	orrs	r3, r7
 8027b1e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027b20:	2cff      	cmp	r4, #255	@ 0xff
 8027b22:	d020      	beq.n	8027b66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8027b24:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027b26:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027b2a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027b2c:	4367      	muls	r7, r4
 8027b2e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027b30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027b34:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027b38:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027b3a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027b3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027b42:	fb04 fa0a 	mul.w	sl, r4, sl
 8027b46:	44bc      	add	ip, r7
 8027b48:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027b4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027b54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027b58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027b5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027b60:	ea4c 040a 	orr.w	r4, ip, sl
 8027b64:	940e      	str	r4, [sp, #56]	@ 0x38
 8027b66:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027b68:	2cff      	cmp	r4, #255	@ 0xff
 8027b6a:	d020      	beq.n	8027bae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8027b6c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027b6e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027b72:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027b74:	4367      	muls	r7, r4
 8027b76:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027b78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027b7c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027b80:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027b82:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027b86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027b8a:	fb04 fa0a 	mul.w	sl, r4, sl
 8027b8e:	44bc      	add	ip, r7
 8027b90:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027b94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027b9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027ba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ba4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027ba8:	ea4c 040a 	orr.w	r4, ip, sl
 8027bac:	9409      	str	r4, [sp, #36]	@ 0x24
 8027bae:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027bb0:	2cff      	cmp	r4, #255	@ 0xff
 8027bb2:	d020      	beq.n	8027bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8027bb4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027bb6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027bba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027bbc:	4367      	muls	r7, r4
 8027bbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027bc0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027bc4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027bc8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027bca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027bce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027bd2:	fb04 fa0a 	mul.w	sl, r4, sl
 8027bd6:	44bc      	add	ip, r7
 8027bd8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027bdc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027be0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027be4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027be8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027bf0:	ea4c 040a 	orr.w	r4, ip, sl
 8027bf4:	940f      	str	r4, [sp, #60]	@ 0x3c
 8027bf6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027bf8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027bfc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027c00:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027c04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027c06:	fb08 f707 	mul.w	r7, r8, r7
 8027c0a:	fb02 770c 	mla	r7, r2, ip, r7
 8027c0e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027c12:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027c14:	fb00 770c 	mla	r7, r0, ip, r7
 8027c18:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027c1c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027c1e:	fb09 770c 	mla	r7, r9, ip, r7
 8027c22:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8027c26:	fb08 f80c 	mul.w	r8, r8, ip
 8027c2a:	0a3f      	lsrs	r7, r7, #8
 8027c2c:	fb02 8303 	mla	r3, r2, r3, r8
 8027c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027c32:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027c36:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8027c3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027c3c:	fb00 330a 	mla	r3, r0, sl, r3
 8027c40:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8027c44:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8027c46:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027c4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c50:	434b      	muls	r3, r1
 8027c52:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027c56:	1c59      	adds	r1, r3, #1
 8027c58:	ea47 070c 	orr.w	r7, r7, ip
 8027c5c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027c60:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8027c64:	b2fa      	uxtb	r2, r7
 8027c66:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027c6a:	fb12 f200 	smulbb	r2, r2, r0
 8027c6e:	b2c9      	uxtb	r1, r1
 8027c70:	fb03 2301 	mla	r3, r3, r1, r2
 8027c74:	b29b      	uxth	r3, r3
 8027c76:	1c5a      	adds	r2, r3, #1
 8027c78:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027c7c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8027c80:	fb12 f201 	smulbb	r2, r2, r1
 8027c84:	121b      	asrs	r3, r3, #8
 8027c86:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8027c8a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8027c8e:	0c3f      	lsrs	r7, r7, #16
 8027c90:	fb03 2300 	mla	r3, r3, r0, r2
 8027c94:	b29b      	uxth	r3, r3
 8027c96:	1c5a      	adds	r2, r3, #1
 8027c98:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027c9c:	121b      	asrs	r3, r3, #8
 8027c9e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8027ca2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8027ca6:	fb13 f101 	smulbb	r1, r3, r1
 8027caa:	fb07 1700 	mla	r7, r7, r0, r1
 8027cae:	b2bf      	uxth	r7, r7
 8027cb0:	1c79      	adds	r1, r7, #1
 8027cb2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027cb6:	123f      	asrs	r7, r7, #8
 8027cb8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8027cbc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027cbe:	f10e 0e03 	add.w	lr, lr, #3
 8027cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027cc6:	441d      	add	r5, r3
 8027cc8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027cca:	441e      	add	r6, r3
 8027ccc:	e64e      	b.n	802796c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8027cce:	2800      	cmp	r0, #0
 8027cd0:	f43f aee8 	beq.w	8027aa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027cd4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8027cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8027cda:	0e12      	lsrs	r2, r2, #24
 8027cdc:	9212      	str	r2, [sp, #72]	@ 0x48
 8027cde:	e6e1      	b.n	8027aa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027ce0:	b01d      	add	sp, #116	@ 0x74
 8027ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027ce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8027ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cea:	b087      	sub	sp, #28
 8027cec:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8027cf0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8027cf4:	fb05 7003 	mla	r0, r5, r3, r7
 8027cf8:	2d00      	cmp	r5, #0
 8027cfa:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8027cfe:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8027d02:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8027d06:	f2c0 810a 	blt.w	8027f1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8027d0a:	45a8      	cmp	r8, r5
 8027d0c:	f340 8107 	ble.w	8027f1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8027d10:	2f00      	cmp	r7, #0
 8027d12:	f2c0 8102 	blt.w	8027f1a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8027d16:	42bb      	cmp	r3, r7
 8027d18:	f340 80ff 	ble.w	8027f1a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8027d1c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8027d20:	1c7a      	adds	r2, r7, #1
 8027d22:	f100 80ff 	bmi.w	8027f24 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8027d26:	4293      	cmp	r3, r2
 8027d28:	f340 80fc 	ble.w	8027f24 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8027d2c:	2c00      	cmp	r4, #0
 8027d2e:	f000 80fb 	beq.w	8027f28 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8027d32:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8027d36:	3501      	adds	r5, #1
 8027d38:	f100 80fa 	bmi.w	8027f30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027d3c:	45a8      	cmp	r8, r5
 8027d3e:	f340 80f7 	ble.w	8027f30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027d42:	f1be 0f00 	cmp.w	lr, #0
 8027d46:	f000 80f6 	beq.w	8027f36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8027d4a:	2f00      	cmp	r7, #0
 8027d4c:	f2c0 80ee 	blt.w	8027f2c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8027d50:	42bb      	cmp	r3, r7
 8027d52:	f340 80eb 	ble.w	8027f2c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8027d56:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8027d5a:	3701      	adds	r7, #1
 8027d5c:	f100 80ee 	bmi.w	8027f3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8027d60:	42bb      	cmp	r3, r7
 8027d62:	f340 80eb 	ble.w	8027f3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8027d66:	2c00      	cmp	r4, #0
 8027d68:	f000 80ea 	beq.w	8027f40 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8027d6c:	3301      	adds	r3, #1
 8027d6e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8027d72:	fa1f fc84 	uxth.w	ip, r4
 8027d76:	fa1f fe8e 	uxth.w	lr, lr
 8027d7a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027d7e:	fb0c f90e 	mul.w	r9, ip, lr
 8027d82:	0e13      	lsrs	r3, r2, #24
 8027d84:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027d88:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8027d8c:	9302      	str	r3, [sp, #8]
 8027d8e:	ebac 0709 	sub.w	r7, ip, r9
 8027d92:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8027d96:	fa1f f48e 	uxth.w	r4, lr
 8027d9a:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8027d9e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8027da2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8027da6:	fb0a fe0e 	mul.w	lr, sl, lr
 8027daa:	1b1b      	subs	r3, r3, r4
 8027dac:	fb0a f606 	mul.w	r6, sl, r6
 8027db0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8027db4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027db8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027dbc:	b29b      	uxth	r3, r3
 8027dbe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027dc2:	b2bf      	uxth	r7, r7
 8027dc4:	9301      	str	r3, [sp, #4]
 8027dc6:	44e6      	add	lr, ip
 8027dc8:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8027dcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027dd0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8027dd4:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8027dd8:	9303      	str	r3, [sp, #12]
 8027dda:	0a33      	lsrs	r3, r6, #8
 8027ddc:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8027de0:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027de4:	9304      	str	r3, [sp, #16]
 8027de6:	fb0b f606 	mul.w	r6, fp, r6
 8027dea:	fb0b f000 	mul.w	r0, fp, r0
 8027dee:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8027df2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027df6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027dfa:	44b6      	add	lr, r6
 8027dfc:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8027e00:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8027e04:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8027e08:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8027e0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e10:	fb08 f606 	mul.w	r6, r8, r6
 8027e14:	0a03      	lsrs	r3, r0, #8
 8027e16:	fb08 f505 	mul.w	r5, r8, r5
 8027e1a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027e1e:	0a30      	lsrs	r0, r6, #8
 8027e20:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027e24:	9305      	str	r3, [sp, #20]
 8027e26:	0e13      	lsrs	r3, r2, #24
 8027e28:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027e2c:	fb0e fe07 	mul.w	lr, lr, r7
 8027e30:	4430      	add	r0, r6
 8027e32:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8027e36:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8027e3a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8027e3e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027e42:	0a00      	lsrs	r0, r0, #8
 8027e44:	435e      	muls	r6, r3
 8027e46:	0a2d      	lsrs	r5, r5, #8
 8027e48:	435a      	muls	r2, r3
 8027e4a:	9b03      	ldr	r3, [sp, #12]
 8027e4c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8027e50:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027e54:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027e58:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027e5c:	44b4      	add	ip, r6
 8027e5e:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8027e62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e66:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027e6a:	9e01      	ldr	r6, [sp, #4]
 8027e6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027e70:	fb03 ee06 	mla	lr, r3, r6, lr
 8027e74:	9b04      	ldr	r3, [sp, #16]
 8027e76:	0a12      	lsrs	r2, r2, #8
 8027e78:	fb0c ee09 	mla	lr, ip, r9, lr
 8027e7c:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8027e80:	9b05      	ldr	r3, [sp, #20]
 8027e82:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027e86:	fb00 ee04 	mla	lr, r0, r4, lr
 8027e8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e8e:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8027e92:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8027e96:	9b01      	ldr	r3, [sp, #4]
 8027e98:	fb07 fe0e 	mul.w	lr, r7, lr
 8027e9c:	fb07 f70b 	mul.w	r7, r7, fp
 8027ea0:	fb03 ee06 	mla	lr, r3, r6, lr
 8027ea4:	fb03 730a 	mla	r3, r3, sl, r7
 8027ea8:	fb09 e202 	mla	r2, r9, r2, lr
 8027eac:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027eb0:	fb04 2e0e 	mla	lr, r4, lr, r2
 8027eb4:	fb04 3408 	mla	r4, r4, r8, r3
 8027eb8:	9b02      	ldr	r3, [sp, #8]
 8027eba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ebe:	fb09 4903 	mla	r9, r9, r3, r4
 8027ec2:	780b      	ldrb	r3, [r1, #0]
 8027ec4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027ec8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8027ecc:	ea40 0e0e 	orr.w	lr, r0, lr
 8027ed0:	fa5f f989 	uxtb.w	r9, r9
 8027ed4:	fb03 f209 	mul.w	r2, r3, r9
 8027ed8:	1c53      	adds	r3, r2, #1
 8027eda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027ede:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8027ee2:	700b      	strb	r3, [r1, #0]
 8027ee4:	784b      	ldrb	r3, [r1, #1]
 8027ee6:	fb03 f309 	mul.w	r3, r3, r9
 8027eea:	1c5a      	adds	r2, r3, #1
 8027eec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027ef0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8027ef4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8027ef8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027efc:	704b      	strb	r3, [r1, #1]
 8027efe:	788b      	ldrb	r3, [r1, #2]
 8027f00:	fb03 f909 	mul.w	r9, r3, r9
 8027f04:	f109 0301 	add.w	r3, r9, #1
 8027f08:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8027f0c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8027f10:	f881 e002 	strb.w	lr, [r1, #2]
 8027f14:	b007      	add	sp, #28
 8027f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f1a:	2600      	movs	r6, #0
 8027f1c:	e700      	b.n	8027d20 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8027f1e:	2000      	movs	r0, #0
 8027f20:	4606      	mov	r6, r0
 8027f22:	e708      	b.n	8027d36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027f24:	2000      	movs	r0, #0
 8027f26:	e706      	b.n	8027d36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027f28:	4620      	mov	r0, r4
 8027f2a:	e704      	b.n	8027d36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027f2c:	2500      	movs	r5, #0
 8027f2e:	e714      	b.n	8027d5a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8027f30:	2200      	movs	r2, #0
 8027f32:	4615      	mov	r5, r2
 8027f34:	e71d      	b.n	8027d72 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027f36:	4672      	mov	r2, lr
 8027f38:	4675      	mov	r5, lr
 8027f3a:	e71a      	b.n	8027d72 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027f3c:	2200      	movs	r2, #0
 8027f3e:	e718      	b.n	8027d72 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027f40:	4622      	mov	r2, r4
 8027f42:	e716      	b.n	8027d72 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08027f44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f48:	b099      	sub	sp, #100	@ 0x64
 8027f4a:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8027f4e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027f50:	9017      	str	r0, [sp, #92]	@ 0x5c
 8027f52:	9306      	str	r3, [sp, #24]
 8027f54:	6850      	ldr	r0, [r2, #4]
 8027f56:	6812      	ldr	r2, [r2, #0]
 8027f58:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8027f5c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8027f60:	fb00 1303 	mla	r3, r0, r3, r1
 8027f64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027f68:	18d3      	adds	r3, r2, r3
 8027f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f6c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027f6e:	681b      	ldr	r3, [r3, #0]
 8027f70:	930e      	str	r3, [sp, #56]	@ 0x38
 8027f72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	dc03      	bgt.n	8027f80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027f78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027f7a:	2b00      	cmp	r3, #0
 8027f7c:	f340 8360 	ble.w	8028640 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8027f80:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027f82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f8a:	1e48      	subs	r0, r1, #1
 8027f8c:	1e57      	subs	r7, r2, #1
 8027f8e:	9b06      	ldr	r3, [sp, #24]
 8027f90:	2b00      	cmp	r3, #0
 8027f92:	f340 817b 	ble.w	802828c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8027f96:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027f9a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027f9e:	d406      	bmi.n	8027fae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027fa0:	4584      	cmp	ip, r0
 8027fa2:	da04      	bge.n	8027fae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027fa4:	2b00      	cmp	r3, #0
 8027fa6:	db02      	blt.n	8027fae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027fa8:	42bb      	cmp	r3, r7
 8027faa:	f2c0 8170 	blt.w	802828e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8027fae:	f11c 0c01 	adds.w	ip, ip, #1
 8027fb2:	f100 8160 	bmi.w	8028276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8027fb6:	4561      	cmp	r1, ip
 8027fb8:	f2c0 815d 	blt.w	8028276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8027fbc:	3301      	adds	r3, #1
 8027fbe:	f100 815a 	bmi.w	8028276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8027fc2:	429a      	cmp	r2, r3
 8027fc4:	f2c0 8157 	blt.w	8028276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8027fc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8027fcc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027fce:	f1b8 0f00 	cmp.w	r8, #0
 8027fd2:	f340 8179 	ble.w	80282c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8027fd6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8027fd8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027fdc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027fde:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027fe2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027fe6:	142a      	asrs	r2, r5, #16
 8027fe8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027fec:	689b      	ldr	r3, [r3, #8]
 8027fee:	f100 81be 	bmi.w	802836e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027ff2:	f103 39ff 	add.w	r9, r3, #4294967295
 8027ff6:	454a      	cmp	r2, r9
 8027ff8:	f280 81b9 	bge.w	802836e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027ffc:	f1bc 0f00 	cmp.w	ip, #0
 8028000:	f2c0 81b5 	blt.w	802836e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028004:	f10e 39ff 	add.w	r9, lr, #4294967295
 8028008:	45cc      	cmp	ip, r9
 802800a:	f280 81b0 	bge.w	802836e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802800e:	b21b      	sxth	r3, r3
 8028010:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8028012:	fb0c 2203 	mla	r2, ip, r3, r2
 8028016:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802801a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802801e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028022:	2900      	cmp	r1, #0
 8028024:	f000 8197 	beq.w	8028356 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8028028:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802802c:	940a      	str	r4, [sp, #40]	@ 0x28
 802802e:	0e24      	lsrs	r4, r4, #24
 8028030:	9411      	str	r4, [sp, #68]	@ 0x44
 8028032:	b180      	cbz	r0, 8028056 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8028034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028038:	3b01      	subs	r3, #1
 802803a:	009b      	lsls	r3, r3, #2
 802803c:	3304      	adds	r3, #4
 802803e:	eb09 0c03 	add.w	ip, r9, r3
 8028042:	f859 3003 	ldr.w	r3, [r9, r3]
 8028046:	9307      	str	r3, [sp, #28]
 8028048:	0e1b      	lsrs	r3, r3, #24
 802804a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802804c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028052:	0e1b      	lsrs	r3, r3, #24
 8028054:	9312      	str	r3, [sp, #72]	@ 0x48
 8028056:	b289      	uxth	r1, r1
 8028058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802805a:	b280      	uxth	r0, r0
 802805c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802805e:	fb01 fa00 	mul.w	sl, r1, r0
 8028062:	0109      	lsls	r1, r1, #4
 8028064:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028068:	eba1 090a 	sub.w	r9, r1, sl
 802806c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8028070:	b280      	uxth	r0, r0
 8028072:	fa1f f989 	uxth.w	r9, r9
 8028076:	1a09      	subs	r1, r1, r0
 8028078:	fb09 f303 	mul.w	r3, r9, r3
 802807c:	b289      	uxth	r1, r1
 802807e:	fb01 330e 	mla	r3, r1, lr, r3
 8028082:	fb00 3304 	mla	r3, r0, r4, r3
 8028086:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028088:	fb0a 3304 	mla	r3, sl, r4, r3
 802808c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028090:	2b00      	cmp	r3, #0
 8028092:	f000 80e8 	beq.w	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028096:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802809a:	d01b      	beq.n	80280d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802809c:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80280a0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80280a4:	fb0e fb0b 	mul.w	fp, lr, fp
 80280a8:	fb0e fe02 	mul.w	lr, lr, r2
 80280ac:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80280b0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80280b4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80280b8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80280bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80280c0:	445a      	add	r2, fp
 80280c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280c6:	0a12      	lsrs	r2, r2, #8
 80280c8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80280cc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80280d0:	ea42 020c 	orr.w	r2, r2, ip
 80280d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80280d6:	2cff      	cmp	r4, #255	@ 0xff
 80280d8:	d021      	beq.n	802811e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80280da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80280dc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80280e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80280e2:	fb04 fc0c 	mul.w	ip, r4, ip
 80280e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80280e8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80280ec:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80280f0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80280f2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80280f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80280fa:	fb04 fb0b 	mul.w	fp, r4, fp
 80280fe:	44e6      	add	lr, ip
 8028100:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8028104:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028108:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802810c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028110:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028114:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8028118:	ea4e 040b 	orr.w	r4, lr, fp
 802811c:	940a      	str	r4, [sp, #40]	@ 0x28
 802811e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8028120:	2cff      	cmp	r4, #255	@ 0xff
 8028122:	d021      	beq.n	8028168 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028124:	9c07      	ldr	r4, [sp, #28]
 8028126:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802812a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802812c:	fb04 fc0c 	mul.w	ip, r4, ip
 8028130:	9c07      	ldr	r4, [sp, #28]
 8028132:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028136:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802813a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802813c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028140:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028144:	fb04 fb0b 	mul.w	fp, r4, fp
 8028148:	44e6      	add	lr, ip
 802814a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802814e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028152:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8028156:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802815a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802815e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8028162:	ea4e 040b 	orr.w	r4, lr, fp
 8028166:	9407      	str	r4, [sp, #28]
 8028168:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802816a:	2cff      	cmp	r4, #255	@ 0xff
 802816c:	d021      	beq.n	80281b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802816e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028170:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8028174:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028176:	fb04 fc0c 	mul.w	ip, r4, ip
 802817a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802817c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028180:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8028184:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028186:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802818a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802818e:	fb04 fb0b 	mul.w	fp, r4, fp
 8028192:	44e6      	add	lr, ip
 8028194:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8028198:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802819c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80281a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80281a4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80281a8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80281ac:	ea4e 040b 	orr.w	r4, lr, fp
 80281b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80281b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80281b4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80281b8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80281bc:	2bff      	cmp	r3, #255	@ 0xff
 80281be:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80281c2:	9c07      	ldr	r4, [sp, #28]
 80281c4:	fb09 fc0c 	mul.w	ip, r9, ip
 80281c8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80281cc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80281d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80281d2:	fb00 cc0e 	mla	ip, r0, lr, ip
 80281d6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80281da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80281dc:	fb0a cc0e 	mla	ip, sl, lr, ip
 80281e0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80281e4:	fb09 f90e 	mul.w	r9, r9, lr
 80281e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281ec:	fb01 9202 	mla	r2, r1, r2, r9
 80281f0:	9907      	ldr	r1, [sp, #28]
 80281f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80281f6:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80281fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80281fc:	fb00 220b 	mla	r2, r0, fp, r2
 8028200:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8028204:	fb0a 2a00 	mla	sl, sl, r0, r2
 8028208:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802820c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028210:	ea4c 0c0a 	orr.w	ip, ip, sl
 8028214:	fa5f f08c 	uxtb.w	r0, ip
 8028218:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802821c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8028220:	f000 80a2 	beq.w	8028368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8028224:	43db      	mvns	r3, r3
 8028226:	783a      	ldrb	r2, [r7, #0]
 8028228:	f897 a002 	ldrb.w	sl, [r7, #2]
 802822c:	b2db      	uxtb	r3, r3
 802822e:	fb02 fe03 	mul.w	lr, r2, r3
 8028232:	fb0a fa03 	mul.w	sl, sl, r3
 8028236:	f10e 0201 	add.w	r2, lr, #1
 802823a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 802823e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028242:	703a      	strb	r2, [r7, #0]
 8028244:	787a      	ldrb	r2, [r7, #1]
 8028246:	fb02 f003 	mul.w	r0, r2, r3
 802824a:	f10a 0301 	add.w	r3, sl, #1
 802824e:	1c42      	adds	r2, r0, #1
 8028250:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8028254:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028258:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802825c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028260:	707a      	strb	r2, [r7, #1]
 8028262:	f887 c002 	strb.w	ip, [r7, #2]
 8028266:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8028268:	3703      	adds	r7, #3
 802826a:	f108 38ff 	add.w	r8, r8, #4294967295
 802826e:	441d      	add	r5, r3
 8028270:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028272:	441e      	add	r6, r3
 8028274:	e6ab      	b.n	8027fce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028276:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8028278:	441d      	add	r5, r3
 802827a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802827c:	441e      	add	r6, r3
 802827e:	9b06      	ldr	r3, [sp, #24]
 8028280:	3b01      	subs	r3, #1
 8028282:	9306      	str	r3, [sp, #24]
 8028284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028286:	3303      	adds	r3, #3
 8028288:	9309      	str	r3, [sp, #36]	@ 0x24
 802828a:	e680      	b.n	8027f8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802828c:	d024      	beq.n	80282d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802828e:	9b06      	ldr	r3, [sp, #24]
 8028290:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8028292:	3b01      	subs	r3, #1
 8028294:	fb00 5003 	mla	r0, r0, r3, r5
 8028298:	1400      	asrs	r0, r0, #16
 802829a:	f53f ae95 	bmi.w	8027fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802829e:	3901      	subs	r1, #1
 80282a0:	4288      	cmp	r0, r1
 80282a2:	f6bf ae91 	bge.w	8027fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80282a6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80282a8:	fb01 6303 	mla	r3, r1, r3, r6
 80282ac:	141b      	asrs	r3, r3, #16
 80282ae:	f53f ae8b 	bmi.w	8027fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80282b2:	3a01      	subs	r2, #1
 80282b4:	4293      	cmp	r3, r2
 80282b6:	f6bf ae87 	bge.w	8027fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80282ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80282bc:	f8dd b018 	ldr.w	fp, [sp, #24]
 80282c0:	1cdf      	adds	r7, r3, #3
 80282c2:	f1bb 0f00 	cmp.w	fp, #0
 80282c6:	dc6e      	bgt.n	80283a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80282c8:	9b06      	ldr	r3, [sp, #24]
 80282ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80282ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80282d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80282d4:	4423      	add	r3, r4
 80282d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80282d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80282da:	2b00      	cmp	r3, #0
 80282dc:	f340 81b0 	ble.w	8028640 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80282e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80282e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80282e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80282ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80282ee:	eef0 6a62 	vmov.f32	s13, s5
 80282f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80282f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80282fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282fe:	ee16 5a90 	vmov	r5, s13
 8028302:	eef0 6a43 	vmov.f32	s13, s6
 8028306:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802830a:	ee16 6a90 	vmov	r6, s13
 802830e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028312:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028316:	ee77 2a62 	vsub.f32	s5, s14, s5
 802831a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802831e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028322:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028326:	ee12 2a90 	vmov	r2, s5
 802832a:	eef0 2a47 	vmov.f32	s5, s14
 802832e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028332:	ee13 2a10 	vmov	r2, s6
 8028336:	9325      	str	r3, [sp, #148]	@ 0x94
 8028338:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802833a:	eeb0 3a67 	vmov.f32	s6, s15
 802833e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028342:	9326      	str	r3, [sp, #152]	@ 0x98
 8028344:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028346:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8028348:	3b01      	subs	r3, #1
 802834a:	9315      	str	r3, [sp, #84]	@ 0x54
 802834c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802834e:	bf08      	it	eq
 8028350:	4613      	moveq	r3, r2
 8028352:	9306      	str	r3, [sp, #24]
 8028354:	e60d      	b.n	8027f72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8028356:	2800      	cmp	r0, #0
 8028358:	f43f ae7d 	beq.w	8028056 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802835c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8028360:	9307      	str	r3, [sp, #28]
 8028362:	0e1b      	lsrs	r3, r3, #24
 8028364:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028366:	e676      	b.n	8028056 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8028368:	7038      	strb	r0, [r7, #0]
 802836a:	7079      	strb	r1, [r7, #1]
 802836c:	e779      	b.n	8028262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802836e:	f112 0901 	adds.w	r9, r2, #1
 8028372:	f53f af78 	bmi.w	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028376:	454b      	cmp	r3, r9
 8028378:	f6ff af75 	blt.w	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802837c:	f11c 0901 	adds.w	r9, ip, #1
 8028380:	f53f af71 	bmi.w	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028384:	45ce      	cmp	lr, r9
 8028386:	f6ff af6e 	blt.w	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802838a:	b21b      	sxth	r3, r3
 802838c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028390:	fa0f f28e 	sxth.w	r2, lr
 8028394:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028398:	9200      	str	r2, [sp, #0]
 802839a:	4639      	mov	r1, r7
 802839c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802839e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80283a0:	f7ff fca1 	bl	8027ce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80283a4:	e75f      	b.n	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80283a6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80283a8:	1429      	asrs	r1, r5, #16
 80283aa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80283ac:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80283b0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80283b4:	1433      	asrs	r3, r6, #16
 80283b6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80283ba:	fb0c 1303 	mla	r3, ip, r3, r1
 80283be:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80283c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80283c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80283c8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80283cc:	2a00      	cmp	r2, #0
 80283ce:	f000 8129 	beq.w	8028624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80283d2:	684c      	ldr	r4, [r1, #4]
 80283d4:	940c      	str	r4, [sp, #48]	@ 0x30
 80283d6:	0e24      	lsrs	r4, r4, #24
 80283d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80283da:	b198      	cbz	r0, 8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80283dc:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 80283e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80283e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80283e8:	f10c 0c04 	add.w	ip, ip, #4
 80283ec:	eb01 080c 	add.w	r8, r1, ip
 80283f0:	f851 100c 	ldr.w	r1, [r1, ip]
 80283f4:	9108      	str	r1, [sp, #32]
 80283f6:	0e09      	lsrs	r1, r1, #24
 80283f8:	9110      	str	r1, [sp, #64]	@ 0x40
 80283fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80283fe:	910d      	str	r1, [sp, #52]	@ 0x34
 8028400:	0e09      	lsrs	r1, r1, #24
 8028402:	9114      	str	r1, [sp, #80]	@ 0x50
 8028404:	b292      	uxth	r2, r2
 8028406:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8028408:	b280      	uxth	r0, r0
 802840a:	fb02 f900 	mul.w	r9, r2, r0
 802840e:	0112      	lsls	r2, r2, #4
 8028410:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028414:	eba2 0809 	sub.w	r8, r2, r9
 8028418:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802841c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802841e:	b280      	uxth	r0, r0
 8028420:	fa1f f888 	uxth.w	r8, r8
 8028424:	1a09      	subs	r1, r1, r0
 8028426:	fb08 f202 	mul.w	r2, r8, r2
 802842a:	b289      	uxth	r1, r1
 802842c:	fb01 220e 	mla	r2, r1, lr, r2
 8028430:	fb00 2204 	mla	r2, r0, r4, r2
 8028434:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028436:	fb09 2204 	mla	r2, r9, r4, r2
 802843a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802843e:	2a00      	cmp	r2, #0
 8028440:	f000 80e8 	beq.w	8028614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8028444:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028448:	d01b      	beq.n	8028482 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802844a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802844e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028452:	fb0e fa0a 	mul.w	sl, lr, sl
 8028456:	fb0e fe03 	mul.w	lr, lr, r3
 802845a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802845e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028462:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028466:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802846a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802846e:	4453      	add	r3, sl
 8028470:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028474:	0a1b      	lsrs	r3, r3, #8
 8028476:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802847a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802847e:	ea43 030c 	orr.w	r3, r3, ip
 8028482:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8028484:	2cff      	cmp	r4, #255	@ 0xff
 8028486:	d021      	beq.n	80284cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8028488:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802848a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802848e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8028490:	fb04 fc0c 	mul.w	ip, r4, ip
 8028494:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028496:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802849a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802849e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80284a0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80284a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80284a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80284ac:	44e6      	add	lr, ip
 80284ae:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80284b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80284b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80284ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80284be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284c2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80284c6:	ea4e 040a 	orr.w	r4, lr, sl
 80284ca:	940c      	str	r4, [sp, #48]	@ 0x30
 80284cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80284ce:	2cff      	cmp	r4, #255	@ 0xff
 80284d0:	d021      	beq.n	8028516 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80284d2:	9c08      	ldr	r4, [sp, #32]
 80284d4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80284d8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80284da:	fb04 fc0c 	mul.w	ip, r4, ip
 80284de:	9c08      	ldr	r4, [sp, #32]
 80284e0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80284e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80284e6:	fb04 fa0e 	mul.w	sl, r4, lr
 80284ea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80284ee:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80284f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80284f6:	44e6      	add	lr, ip
 80284f8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80284fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028500:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028504:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028508:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802850c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028510:	ea4e 040a 	orr.w	r4, lr, sl
 8028514:	9408      	str	r4, [sp, #32]
 8028516:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028518:	2cff      	cmp	r4, #255	@ 0xff
 802851a:	d021      	beq.n	8028560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802851c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802851e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8028522:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028524:	fb04 fc0c 	mul.w	ip, r4, ip
 8028528:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802852a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802852e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8028532:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028534:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028538:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802853c:	fb04 fa0a 	mul.w	sl, r4, sl
 8028540:	44e6      	add	lr, ip
 8028542:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028546:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802854a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802854e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028552:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028556:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802855a:	ea4e 040a 	orr.w	r4, lr, sl
 802855e:	940d      	str	r4, [sp, #52]	@ 0x34
 8028560:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028562:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8028566:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802856a:	2aff      	cmp	r2, #255	@ 0xff
 802856c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8028570:	9c08      	ldr	r4, [sp, #32]
 8028572:	fb08 fc0c 	mul.w	ip, r8, ip
 8028576:	fb01 cc0e 	mla	ip, r1, lr, ip
 802857a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802857e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028580:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028584:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8028588:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802858a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802858e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8028592:	fb08 f80e 	mul.w	r8, r8, lr
 8028596:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802859a:	fb01 8303 	mla	r3, r1, r3, r8
 802859e:	9908      	ldr	r1, [sp, #32]
 80285a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80285a4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80285a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80285aa:	fb00 330a 	mla	r3, r0, sl, r3
 80285ae:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80285b2:	fb09 3e0e 	mla	lr, r9, lr, r3
 80285b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80285ba:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80285be:	ea4c 0c0e 	orr.w	ip, ip, lr
 80285c2:	fa5f f08c 	uxtb.w	r0, ip
 80285c6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80285ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80285ce:	d032      	beq.n	8028636 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80285d0:	43d2      	mvns	r2, r2
 80285d2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80285d6:	b2d2      	uxtb	r2, r2
 80285d8:	fb0e fe02 	mul.w	lr, lr, r2
 80285dc:	f10e 0301 	add.w	r3, lr, #1
 80285e0:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80285e4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80285e8:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80285ec:	4350      	muls	r0, r2
 80285ee:	f807 3c03 	strb.w	r3, [r7, #-3]
 80285f2:	1c43      	adds	r3, r0, #1
 80285f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80285f8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80285fc:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8028600:	4353      	muls	r3, r2
 8028602:	f807 1c02 	strb.w	r1, [r7, #-2]
 8028606:	1c5a      	adds	r2, r3, #1
 8028608:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802860c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8028610:	f807 cc01 	strb.w	ip, [r7, #-1]
 8028614:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8028616:	3703      	adds	r7, #3
 8028618:	f10b 3bff 	add.w	fp, fp, #4294967295
 802861c:	441d      	add	r5, r3
 802861e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028620:	441e      	add	r6, r3
 8028622:	e64e      	b.n	80282c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028624:	2800      	cmp	r0, #0
 8028626:	f43f aeed 	beq.w	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802862a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802862e:	9108      	str	r1, [sp, #32]
 8028630:	0e09      	lsrs	r1, r1, #24
 8028632:	9110      	str	r1, [sp, #64]	@ 0x40
 8028634:	e6e6      	b.n	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8028636:	f807 0c03 	strb.w	r0, [r7, #-3]
 802863a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802863e:	e7e7      	b.n	8028610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8028640:	b019      	add	sp, #100	@ 0x64
 8028642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8028648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802864c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8028650:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028654:	2c00      	cmp	r4, #0
 8028656:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802865a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802865e:	fb00 4e03 	mla	lr, r0, r3, r4
 8028662:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8028666:	f2c0 80b8 	blt.w	80287da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802866a:	45a1      	cmp	r9, r4
 802866c:	f340 80b5 	ble.w	80287da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8028670:	2800      	cmp	r0, #0
 8028672:	f2c0 80b2 	blt.w	80287da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8028676:	4580      	cmp	r8, r0
 8028678:	f340 80af 	ble.w	80287da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802867c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8028680:	f01e 0f01 	tst.w	lr, #1
 8028684:	5d56      	ldrb	r6, [r2, r5]
 8028686:	bf0c      	ite	eq
 8028688:	f006 060f 	andeq.w	r6, r6, #15
 802868c:	1136      	asrne	r6, r6, #4
 802868e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028692:	b2f6      	uxtb	r6, r6
 8028694:	f114 0a01 	adds.w	sl, r4, #1
 8028698:	f100 80a1 	bmi.w	80287de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802869c:	45d1      	cmp	r9, sl
 802869e:	f340 809e 	ble.w	80287de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80286a2:	2800      	cmp	r0, #0
 80286a4:	f2c0 809b 	blt.w	80287de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80286a8:	4580      	cmp	r8, r0
 80286aa:	f340 8098 	ble.w	80287de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80286ae:	2f00      	cmp	r7, #0
 80286b0:	f000 8097 	beq.w	80287e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80286b4:	f10e 0b01 	add.w	fp, lr, #1
 80286b8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80286bc:	f01b 0f01 	tst.w	fp, #1
 80286c0:	5d55      	ldrb	r5, [r2, r5]
 80286c2:	bf0c      	ite	eq
 80286c4:	f005 050f 	andeq.w	r5, r5, #15
 80286c8:	112d      	asrne	r5, r5, #4
 80286ca:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80286ce:	b2ed      	uxtb	r5, r5
 80286d0:	f1bc 0f00 	cmp.w	ip, #0
 80286d4:	f000 8089 	beq.w	80287ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80286d8:	2c00      	cmp	r4, #0
 80286da:	f100 0001 	add.w	r0, r0, #1
 80286de:	f2c0 8082 	blt.w	80287e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80286e2:	45a1      	cmp	r9, r4
 80286e4:	dd7f      	ble.n	80287e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80286e6:	2800      	cmp	r0, #0
 80286e8:	db7d      	blt.n	80287e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80286ea:	4580      	cmp	r8, r0
 80286ec:	dd7b      	ble.n	80287e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80286ee:	eb03 0b0e 	add.w	fp, r3, lr
 80286f2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80286f6:	f01b 0f01 	tst.w	fp, #1
 80286fa:	5d14      	ldrb	r4, [r2, r4]
 80286fc:	bf0c      	ite	eq
 80286fe:	f004 040f 	andeq.w	r4, r4, #15
 8028702:	1124      	asrne	r4, r4, #4
 8028704:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028708:	b2e4      	uxtb	r4, r4
 802870a:	f1ba 0f00 	cmp.w	sl, #0
 802870e:	db6f      	blt.n	80287f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8028710:	45d1      	cmp	r9, sl
 8028712:	dd6d      	ble.n	80287f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8028714:	2800      	cmp	r0, #0
 8028716:	db6b      	blt.n	80287f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8028718:	4580      	cmp	r8, r0
 802871a:	dd69      	ble.n	80287f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802871c:	2f00      	cmp	r7, #0
 802871e:	d069      	beq.n	80287f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8028720:	3301      	adds	r3, #1
 8028722:	449e      	add	lr, r3
 8028724:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028728:	f01e 0f01 	tst.w	lr, #1
 802872c:	5cd0      	ldrb	r0, [r2, r3]
 802872e:	bf0c      	ite	eq
 8028730:	f000 000f 	andeq.w	r0, r0, #15
 8028734:	1100      	asrne	r0, r0, #4
 8028736:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802873a:	b2c3      	uxtb	r3, r0
 802873c:	b2ba      	uxth	r2, r7
 802873e:	fa1f fc8c 	uxth.w	ip, ip
 8028742:	fb02 f00c 	mul.w	r0, r2, ip
 8028746:	0112      	lsls	r2, r2, #4
 8028748:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802874c:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028750:	1a12      	subs	r2, r2, r0
 8028752:	fa1f fc8c 	uxth.w	ip, ip
 8028756:	b292      	uxth	r2, r2
 8028758:	eba7 070c 	sub.w	r7, r7, ip
 802875c:	436a      	muls	r2, r5
 802875e:	b2bf      	uxth	r7, r7
 8028760:	fb06 2207 	mla	r2, r6, r7, r2
 8028764:	fb0c 2404 	mla	r4, ip, r4, r2
 8028768:	fb00 4303 	mla	r3, r0, r3, r4
 802876c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028770:	b38b      	cbz	r3, 80287d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8028772:	4a21      	ldr	r2, [pc, #132]	@ (80287f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8028774:	6814      	ldr	r4, [r2, #0]
 8028776:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802877a:	b2e5      	uxtb	r5, r4
 802877c:	4353      	muls	r3, r2
 802877e:	1c5a      	adds	r2, r3, #1
 8028780:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028784:	1212      	asrs	r2, r2, #8
 8028786:	b290      	uxth	r0, r2
 8028788:	43d2      	mvns	r2, r2
 802878a:	fb15 f500 	smulbb	r5, r5, r0
 802878e:	b2d3      	uxtb	r3, r2
 8028790:	780a      	ldrb	r2, [r1, #0]
 8028792:	fb02 5203 	mla	r2, r2, r3, r5
 8028796:	b292      	uxth	r2, r2
 8028798:	1c55      	adds	r5, r2, #1
 802879a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802879e:	784d      	ldrb	r5, [r1, #1]
 80287a0:	fb15 f503 	smulbb	r5, r5, r3
 80287a4:	1212      	asrs	r2, r2, #8
 80287a6:	700a      	strb	r2, [r1, #0]
 80287a8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80287ac:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80287b0:	fb02 5200 	mla	r2, r2, r0, r5
 80287b4:	b292      	uxth	r2, r2
 80287b6:	1c55      	adds	r5, r2, #1
 80287b8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80287bc:	1212      	asrs	r2, r2, #8
 80287be:	704a      	strb	r2, [r1, #1]
 80287c0:	788a      	ldrb	r2, [r1, #2]
 80287c2:	fb12 f303 	smulbb	r3, r2, r3
 80287c6:	fb04 3300 	mla	r3, r4, r0, r3
 80287ca:	b29b      	uxth	r3, r3
 80287cc:	1c5a      	adds	r2, r3, #1
 80287ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80287d2:	121b      	asrs	r3, r3, #8
 80287d4:	708b      	strb	r3, [r1, #2]
 80287d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287da:	2600      	movs	r6, #0
 80287dc:	e75a      	b.n	8028694 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80287de:	2500      	movs	r5, #0
 80287e0:	e776      	b.n	80286d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80287e2:	463d      	mov	r5, r7
 80287e4:	e774      	b.n	80286d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80287e6:	2400      	movs	r4, #0
 80287e8:	e78f      	b.n	802870a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80287ea:	4663      	mov	r3, ip
 80287ec:	4664      	mov	r4, ip
 80287ee:	e7a5      	b.n	802873c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80287f0:	2300      	movs	r3, #0
 80287f2:	e7a3      	b.n	802873c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80287f4:	463b      	mov	r3, r7
 80287f6:	e7a1      	b.n	802873c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80287f8:	24015de4 	.word	0x24015de4

080287fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80287fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028800:	b097      	sub	sp, #92	@ 0x5c
 8028802:	9214      	str	r2, [sp, #80]	@ 0x50
 8028804:	9309      	str	r3, [sp, #36]	@ 0x24
 8028806:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8028808:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802880c:	9015      	str	r0, [sp, #84]	@ 0x54
 802880e:	910c      	str	r1, [sp, #48]	@ 0x30
 8028810:	6850      	ldr	r0, [r2, #4]
 8028812:	930e      	str	r3, [sp, #56]	@ 0x38
 8028814:	6812      	ldr	r2, [r2, #0]
 8028816:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802881a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 802881e:	fb00 1303 	mla	r3, r0, r3, r1
 8028822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028826:	eb02 0a03 	add.w	sl, r2, r3
 802882a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802882c:	689b      	ldr	r3, [r3, #8]
 802882e:	3301      	adds	r3, #1
 8028830:	f023 0301 	bic.w	r3, r3, #1
 8028834:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028836:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028838:	681f      	ldr	r7, [r3, #0]
 802883a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802883c:	2b00      	cmp	r3, #0
 802883e:	dc03      	bgt.n	8028848 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8028840:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028842:	2b00      	cmp	r3, #0
 8028844:	f340 8247 	ble.w	8028cd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8028848:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802884a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802884e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028852:	1e48      	subs	r0, r1, #1
 8028854:	f102 3cff 	add.w	ip, r2, #4294967295
 8028858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802885a:	2b00      	cmp	r3, #0
 802885c:	f340 80e5 	ble.w	8028a2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028860:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8028864:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028868:	d406      	bmi.n	8028878 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802886a:	4586      	cmp	lr, r0
 802886c:	da04      	bge.n	8028878 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802886e:	2b00      	cmp	r3, #0
 8028870:	db02      	blt.n	8028878 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028872:	4563      	cmp	r3, ip
 8028874:	f2c0 80da 	blt.w	8028a2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8028878:	f11e 0e01 	adds.w	lr, lr, #1
 802887c:	f100 80cb 	bmi.w	8028a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8028880:	4571      	cmp	r1, lr
 8028882:	f2c0 80c8 	blt.w	8028a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8028886:	3301      	adds	r3, #1
 8028888:	f100 80c5 	bmi.w	8028a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802888c:	429a      	cmp	r2, r3
 802888e:	f2c0 80c2 	blt.w	8028a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8028892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028894:	46d0      	mov	r8, sl
 8028896:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802889a:	930d      	str	r3, [sp, #52]	@ 0x34
 802889c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802889e:	2b00      	cmp	r3, #0
 80288a0:	f340 80e3 	ble.w	8028a6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80288a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80288a6:	1430      	asrs	r0, r6, #16
 80288a8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80288ac:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80288b0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80288b4:	142b      	asrs	r3, r5, #16
 80288b6:	f100 812e 	bmi.w	8028b16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80288ba:	f10c 3bff 	add.w	fp, ip, #4294967295
 80288be:	455b      	cmp	r3, fp
 80288c0:	f280 8129 	bge.w	8028b16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80288c4:	2800      	cmp	r0, #0
 80288c6:	f2c0 8126 	blt.w	8028b16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80288ca:	f10e 3bff 	add.w	fp, lr, #4294967295
 80288ce:	4558      	cmp	r0, fp
 80288d0:	f280 8121 	bge.w	8028b16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80288d4:	fb00 3309 	mla	r3, r0, r9, r3
 80288d8:	0858      	lsrs	r0, r3, #1
 80288da:	07dc      	lsls	r4, r3, #31
 80288dc:	f817 c000 	ldrb.w	ip, [r7, r0]
 80288e0:	bf54      	ite	pl
 80288e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80288e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80288ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80288ee:	fa5f fc8c 	uxtb.w	ip, ip
 80288f2:	2a00      	cmp	r2, #0
 80288f4:	f000 80fe 	beq.w	8028af4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80288f8:	1c58      	adds	r0, r3, #1
 80288fa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80288fe:	07c0      	lsls	r0, r0, #31
 8028900:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028904:	bf54      	ite	pl
 8028906:	f00e 0e0f 	andpl.w	lr, lr, #15
 802890a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802890e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028912:	fa5f f08e 	uxtb.w	r0, lr
 8028916:	9010      	str	r0, [sp, #64]	@ 0x40
 8028918:	b1d9      	cbz	r1, 8028952 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802891a:	444b      	add	r3, r9
 802891c:	0858      	lsrs	r0, r3, #1
 802891e:	07dc      	lsls	r4, r3, #31
 8028920:	f103 0301 	add.w	r3, r3, #1
 8028924:	5c38      	ldrb	r0, [r7, r0]
 8028926:	bf54      	ite	pl
 8028928:	f000 000f 	andpl.w	r0, r0, #15
 802892c:	1100      	asrmi	r0, r0, #4
 802892e:	07dc      	lsls	r4, r3, #31
 8028930:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028934:	b2c0      	uxtb	r0, r0
 8028936:	900a      	str	r0, [sp, #40]	@ 0x28
 8028938:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802893c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028940:	bf54      	ite	pl
 8028942:	f00e 030f 	andpl.w	r3, lr, #15
 8028946:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802894a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802894e:	b2db      	uxtb	r3, r3
 8028950:	9311      	str	r3, [sp, #68]	@ 0x44
 8028952:	b292      	uxth	r2, r2
 8028954:	b289      	uxth	r1, r1
 8028956:	0113      	lsls	r3, r2, #4
 8028958:	fb02 f001 	mul.w	r0, r2, r1
 802895c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802895e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8028962:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8028966:	1a1b      	subs	r3, r3, r0
 8028968:	b289      	uxth	r1, r1
 802896a:	b29b      	uxth	r3, r3
 802896c:	ebae 0e01 	sub.w	lr, lr, r1
 8028970:	4353      	muls	r3, r2
 8028972:	fa1f fe8e 	uxth.w	lr, lr
 8028976:	fb0c 320e 	mla	r2, ip, lr, r3
 802897a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802897c:	fb01 2203 	mla	r2, r1, r3, r2
 8028980:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028982:	fb00 2203 	mla	r2, r0, r3, r2
 8028986:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802898a:	2a00      	cmp	r2, #0
 802898c:	d039      	beq.n	8028a02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802898e:	4bc7      	ldr	r3, [pc, #796]	@ (8028cac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028990:	6819      	ldr	r1, [r3, #0]
 8028992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028994:	fa5f fc81 	uxtb.w	ip, r1
 8028998:	435a      	muls	r2, r3
 802899a:	1c53      	adds	r3, r2, #1
 802899c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80289a0:	1212      	asrs	r2, r2, #8
 80289a2:	b290      	uxth	r0, r2
 80289a4:	43d2      	mvns	r2, r2
 80289a6:	fb1c fc00 	smulbb	ip, ip, r0
 80289aa:	b2d3      	uxtb	r3, r2
 80289ac:	f898 2000 	ldrb.w	r2, [r8]
 80289b0:	fb02 c203 	mla	r2, r2, r3, ip
 80289b4:	b292      	uxth	r2, r2
 80289b6:	f102 0c01 	add.w	ip, r2, #1
 80289ba:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80289be:	f898 c001 	ldrb.w	ip, [r8, #1]
 80289c2:	fb1c fc03 	smulbb	ip, ip, r3
 80289c6:	1212      	asrs	r2, r2, #8
 80289c8:	f888 2000 	strb.w	r2, [r8]
 80289cc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80289d0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80289d4:	fb02 c200 	mla	r2, r2, r0, ip
 80289d8:	b292      	uxth	r2, r2
 80289da:	f102 0c01 	add.w	ip, r2, #1
 80289de:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80289e2:	1212      	asrs	r2, r2, #8
 80289e4:	f888 2001 	strb.w	r2, [r8, #1]
 80289e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80289ec:	fb12 f303 	smulbb	r3, r2, r3
 80289f0:	fb01 3300 	mla	r3, r1, r0, r3
 80289f4:	b29b      	uxth	r3, r3
 80289f6:	1c5a      	adds	r2, r3, #1
 80289f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80289fc:	121b      	asrs	r3, r3, #8
 80289fe:	f888 3002 	strb.w	r3, [r8, #2]
 8028a02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028a04:	f108 0803 	add.w	r8, r8, #3
 8028a08:	441d      	add	r5, r3
 8028a0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028a0c:	441e      	add	r6, r3
 8028a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028a10:	3b01      	subs	r3, #1
 8028a12:	930d      	str	r3, [sp, #52]	@ 0x34
 8028a14:	e742      	b.n	802889c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028a16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028a18:	f10a 0a03 	add.w	sl, sl, #3
 8028a1c:	441d      	add	r5, r3
 8028a1e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028a20:	441e      	add	r6, r3
 8028a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a24:	3b01      	subs	r3, #1
 8028a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a28:	e716      	b.n	8028858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028a2a:	d024      	beq.n	8028a76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8028a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a2e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8028a30:	3b01      	subs	r3, #1
 8028a32:	fb00 5003 	mla	r0, r0, r3, r5
 8028a36:	1400      	asrs	r0, r0, #16
 8028a38:	f53f af2b 	bmi.w	8028892 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028a3c:	3901      	subs	r1, #1
 8028a3e:	4288      	cmp	r0, r1
 8028a40:	f6bf af27 	bge.w	8028892 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028a44:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8028a46:	fb01 6303 	mla	r3, r1, r3, r6
 8028a4a:	141b      	asrs	r3, r3, #16
 8028a4c:	f53f af21 	bmi.w	8028892 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028a50:	3a01      	subs	r2, #1
 8028a52:	4293      	cmp	r3, r2
 8028a54:	f6bf af1d 	bge.w	8028892 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028a58:	f10a 0e03 	add.w	lr, sl, #3
 8028a5c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8028a60:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8028a64:	f1b8 0f00 	cmp.w	r8, #0
 8028a68:	dc76      	bgt.n	8028b58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8028a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a6c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028a70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028a74:	44a2      	add	sl, r4
 8028a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028a78:	2b00      	cmp	r3, #0
 8028a7a:	f340 812c 	ble.w	8028cd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8028a7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028a82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028a84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028a88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028a8c:	eef0 6a62 	vmov.f32	s13, s5
 8028a90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028a94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028a98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a9c:	ee16 5a90 	vmov	r5, s13
 8028aa0:	eef0 6a43 	vmov.f32	s13, s6
 8028aa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028aa8:	ee16 6a90 	vmov	r6, s13
 8028aac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028ab0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028ab4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028ab8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028abc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028ac0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028ac4:	ee12 2a90 	vmov	r2, s5
 8028ac8:	eef0 2a47 	vmov.f32	s5, s14
 8028acc:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ad0:	ee13 2a10 	vmov	r2, s6
 8028ad4:	9323      	str	r3, [sp, #140]	@ 0x8c
 8028ad6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028ad8:	eeb0 3a67 	vmov.f32	s6, s15
 8028adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ae0:	9324      	str	r3, [sp, #144]	@ 0x90
 8028ae2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028ae4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8028ae6:	3b01      	subs	r3, #1
 8028ae8:	930c      	str	r3, [sp, #48]	@ 0x30
 8028aea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028aec:	bf08      	it	eq
 8028aee:	4613      	moveq	r3, r2
 8028af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8028af2:	e6a2      	b.n	802883a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8028af4:	2900      	cmp	r1, #0
 8028af6:	f43f af2c 	beq.w	8028952 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8028afa:	eb09 0003 	add.w	r0, r9, r3
 8028afe:	0843      	lsrs	r3, r0, #1
 8028b00:	07c0      	lsls	r0, r0, #31
 8028b02:	5cfb      	ldrb	r3, [r7, r3]
 8028b04:	bf54      	ite	pl
 8028b06:	f003 030f 	andpl.w	r3, r3, #15
 8028b0a:	111b      	asrmi	r3, r3, #4
 8028b0c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028b10:	b2db      	uxtb	r3, r3
 8028b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b14:	e71d      	b.n	8028952 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8028b16:	f113 0b01 	adds.w	fp, r3, #1
 8028b1a:	f53f af72 	bmi.w	8028a02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028b1e:	45dc      	cmp	ip, fp
 8028b20:	f6ff af6f 	blt.w	8028a02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028b24:	f110 0b01 	adds.w	fp, r0, #1
 8028b28:	f53f af6b 	bmi.w	8028a02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028b2c:	45de      	cmp	lr, fp
 8028b2e:	f6ff af68 	blt.w	8028a02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028b32:	9302      	str	r3, [sp, #8]
 8028b34:	fa0f f38e 	sxth.w	r3, lr
 8028b38:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8028b3a:	9301      	str	r3, [sp, #4]
 8028b3c:	fa0f f38c 	sxth.w	r3, ip
 8028b40:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028b44:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8028b48:	9300      	str	r3, [sp, #0]
 8028b4a:	463a      	mov	r2, r7
 8028b4c:	464b      	mov	r3, r9
 8028b4e:	4641      	mov	r1, r8
 8028b50:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8028b52:	f7ff fd79 	bl	8028648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8028b56:	e754      	b.n	8028a02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028b58:	142a      	asrs	r2, r5, #16
 8028b5a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028b5e:	1433      	asrs	r3, r6, #16
 8028b60:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028b64:	fb09 2303 	mla	r3, r9, r3, r2
 8028b68:	085a      	lsrs	r2, r3, #1
 8028b6a:	07dc      	lsls	r4, r3, #31
 8028b6c:	5cba      	ldrb	r2, [r7, r2]
 8028b6e:	bf54      	ite	pl
 8028b70:	f002 020f 	andpl.w	r2, r2, #15
 8028b74:	1112      	asrmi	r2, r2, #4
 8028b76:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028b7a:	b2d2      	uxtb	r2, r2
 8028b7c:	2900      	cmp	r1, #0
 8028b7e:	f000 8097 	beq.w	8028cb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028b82:	f103 0b01 	add.w	fp, r3, #1
 8028b86:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8028b8a:	f01b 0f01 	tst.w	fp, #1
 8028b8e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028b92:	bf0c      	ite	eq
 8028b94:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028b98:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028b9c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028ba0:	fa5f f48c 	uxtb.w	r4, ip
 8028ba4:	9412      	str	r4, [sp, #72]	@ 0x48
 8028ba6:	b300      	cbz	r0, 8028bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028ba8:	444b      	add	r3, r9
 8028baa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028bae:	07dc      	lsls	r4, r3, #31
 8028bb0:	f103 0301 	add.w	r3, r3, #1
 8028bb4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028bb8:	bf54      	ite	pl
 8028bba:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028bbe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028bc2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028bc6:	fa5f f48c 	uxtb.w	r4, ip
 8028bca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028bce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028bd0:	07dc      	lsls	r4, r3, #31
 8028bd2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028bd6:	bf54      	ite	pl
 8028bd8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028bdc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028be0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028be4:	fa5f f38c 	uxtb.w	r3, ip
 8028be8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028bea:	b289      	uxth	r1, r1
 8028bec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028bee:	b280      	uxth	r0, r0
 8028bf0:	fb01 f300 	mul.w	r3, r1, r0
 8028bf4:	0109      	lsls	r1, r1, #4
 8028bf6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028bfa:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8028bfe:	1ac9      	subs	r1, r1, r3
 8028c00:	b280      	uxth	r0, r0
 8028c02:	b289      	uxth	r1, r1
 8028c04:	ebac 0c00 	sub.w	ip, ip, r0
 8028c08:	4361      	muls	r1, r4
 8028c0a:	fa1f fc8c 	uxth.w	ip, ip
 8028c0e:	fb02 120c 	mla	r2, r2, ip, r1
 8028c12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028c14:	fb00 2001 	mla	r0, r0, r1, r2
 8028c18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028c1a:	fb03 0302 	mla	r3, r3, r2, r0
 8028c1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c22:	2b00      	cmp	r3, #0
 8028c24:	d039      	beq.n	8028c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028c26:	4a21      	ldr	r2, [pc, #132]	@ (8028cac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028c28:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8028c2c:	6810      	ldr	r0, [r2, #0]
 8028c2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028c30:	fa5f fc80 	uxtb.w	ip, r0
 8028c34:	4353      	muls	r3, r2
 8028c36:	1c5a      	adds	r2, r3, #1
 8028c38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028c3c:	121b      	asrs	r3, r3, #8
 8028c3e:	b29a      	uxth	r2, r3
 8028c40:	43db      	mvns	r3, r3
 8028c42:	fb1c fc02 	smulbb	ip, ip, r2
 8028c46:	b2db      	uxtb	r3, r3
 8028c48:	fb01 c103 	mla	r1, r1, r3, ip
 8028c4c:	b289      	uxth	r1, r1
 8028c4e:	f101 0c01 	add.w	ip, r1, #1
 8028c52:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028c56:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8028c5a:	fb1c fc03 	smulbb	ip, ip, r3
 8028c5e:	1209      	asrs	r1, r1, #8
 8028c60:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8028c64:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8028c68:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8028c6c:	fb01 c102 	mla	r1, r1, r2, ip
 8028c70:	b289      	uxth	r1, r1
 8028c72:	f101 0c01 	add.w	ip, r1, #1
 8028c76:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028c7a:	1209      	asrs	r1, r1, #8
 8028c7c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8028c80:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8028c84:	fb11 f303 	smulbb	r3, r1, r3
 8028c88:	fb00 3002 	mla	r0, r0, r2, r3
 8028c8c:	b280      	uxth	r0, r0
 8028c8e:	1c42      	adds	r2, r0, #1
 8028c90:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028c94:	1200      	asrs	r0, r0, #8
 8028c96:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8028c9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028c9c:	f10e 0e03 	add.w	lr, lr, #3
 8028ca0:	f108 38ff 	add.w	r8, r8, #4294967295
 8028ca4:	441d      	add	r5, r3
 8028ca6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028ca8:	441e      	add	r6, r3
 8028caa:	e6db      	b.n	8028a64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8028cac:	24015de4 	.word	0x24015de4
 8028cb0:	2800      	cmp	r0, #0
 8028cb2:	d09a      	beq.n	8028bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028cb4:	444b      	add	r3, r9
 8028cb6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028cba:	07db      	lsls	r3, r3, #31
 8028cbc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028cc0:	bf54      	ite	pl
 8028cc2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028cc6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028cca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028cce:	fa5f f38c 	uxtb.w	r3, ip
 8028cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028cd4:	e789      	b.n	8028bea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028cd6:	b017      	add	sp, #92	@ 0x5c
 8028cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028cdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8028cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ce0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8028ce4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028ce8:	2d00      	cmp	r5, #0
 8028cea:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8028cee:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8028cf2:	fb04 5e03 	mla	lr, r4, r3, r5
 8028cf6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8028cfa:	f2c0 80b1 	blt.w	8028e60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028cfe:	45a9      	cmp	r9, r5
 8028d00:	f340 80ae 	ble.w	8028e60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028d04:	2c00      	cmp	r4, #0
 8028d06:	f2c0 80ab 	blt.w	8028e60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028d0a:	45a0      	cmp	r8, r4
 8028d0c:	f340 80a8 	ble.w	8028e60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028d10:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8028d14:	f01e 0f01 	tst.w	lr, #1
 8028d18:	5d97      	ldrb	r7, [r2, r6]
 8028d1a:	bf0c      	ite	eq
 8028d1c:	f007 070f 	andeq.w	r7, r7, #15
 8028d20:	113f      	asrne	r7, r7, #4
 8028d22:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8028d26:	b2ff      	uxtb	r7, r7
 8028d28:	f115 0a01 	adds.w	sl, r5, #1
 8028d2c:	f100 809a 	bmi.w	8028e64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028d30:	45d1      	cmp	r9, sl
 8028d32:	f340 8097 	ble.w	8028e64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028d36:	2c00      	cmp	r4, #0
 8028d38:	f2c0 8094 	blt.w	8028e64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028d3c:	45a0      	cmp	r8, r4
 8028d3e:	f340 8091 	ble.w	8028e64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028d42:	2800      	cmp	r0, #0
 8028d44:	f000 8090 	beq.w	8028e68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8028d48:	f10e 0b01 	add.w	fp, lr, #1
 8028d4c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8028d50:	f01b 0f01 	tst.w	fp, #1
 8028d54:	5d96      	ldrb	r6, [r2, r6]
 8028d56:	bf0c      	ite	eq
 8028d58:	f006 060f 	andeq.w	r6, r6, #15
 8028d5c:	1136      	asrne	r6, r6, #4
 8028d5e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028d62:	b2f6      	uxtb	r6, r6
 8028d64:	f1bc 0f00 	cmp.w	ip, #0
 8028d68:	f000 8082 	beq.w	8028e70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8028d6c:	2d00      	cmp	r5, #0
 8028d6e:	f104 0401 	add.w	r4, r4, #1
 8028d72:	db7b      	blt.n	8028e6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028d74:	45a9      	cmp	r9, r5
 8028d76:	dd79      	ble.n	8028e6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028d78:	2c00      	cmp	r4, #0
 8028d7a:	db77      	blt.n	8028e6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028d7c:	45a0      	cmp	r8, r4
 8028d7e:	dd75      	ble.n	8028e6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028d80:	eb03 0b0e 	add.w	fp, r3, lr
 8028d84:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8028d88:	f01b 0f01 	tst.w	fp, #1
 8028d8c:	5d55      	ldrb	r5, [r2, r5]
 8028d8e:	bf0c      	ite	eq
 8028d90:	f005 050f 	andeq.w	r5, r5, #15
 8028d94:	112d      	asrne	r5, r5, #4
 8028d96:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028d9a:	b2ed      	uxtb	r5, r5
 8028d9c:	f1ba 0f00 	cmp.w	sl, #0
 8028da0:	db69      	blt.n	8028e76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028da2:	45d1      	cmp	r9, sl
 8028da4:	dd67      	ble.n	8028e76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028da6:	2c00      	cmp	r4, #0
 8028da8:	db65      	blt.n	8028e76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028daa:	45a0      	cmp	r8, r4
 8028dac:	dd63      	ble.n	8028e76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028dae:	2800      	cmp	r0, #0
 8028db0:	d063      	beq.n	8028e7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8028db2:	3301      	adds	r3, #1
 8028db4:	449e      	add	lr, r3
 8028db6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028dba:	f01e 0f01 	tst.w	lr, #1
 8028dbe:	5cd4      	ldrb	r4, [r2, r3]
 8028dc0:	bf0c      	ite	eq
 8028dc2:	f004 040f 	andeq.w	r4, r4, #15
 8028dc6:	1124      	asrne	r4, r4, #4
 8028dc8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028dcc:	b2e3      	uxtb	r3, r4
 8028dce:	b282      	uxth	r2, r0
 8028dd0:	fa1f fc8c 	uxth.w	ip, ip
 8028dd4:	fb02 f40c 	mul.w	r4, r2, ip
 8028dd8:	0112      	lsls	r2, r2, #4
 8028dda:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8028dde:	fa1f f08c 	uxth.w	r0, ip
 8028de2:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8028de6:	1b12      	subs	r2, r2, r4
 8028de8:	ebac 0c00 	sub.w	ip, ip, r0
 8028dec:	b292      	uxth	r2, r2
 8028dee:	fa1f fc8c 	uxth.w	ip, ip
 8028df2:	4372      	muls	r2, r6
 8028df4:	fb07 220c 	mla	r2, r7, ip, r2
 8028df8:	fb00 2005 	mla	r0, r0, r5, r2
 8028dfc:	fb04 0303 	mla	r3, r4, r3, r0
 8028e00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028e04:	b353      	cbz	r3, 8028e5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8028e06:	4a1e      	ldr	r2, [pc, #120]	@ (8028e80 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8028e08:	7808      	ldrb	r0, [r1, #0]
 8028e0a:	6814      	ldr	r4, [r2, #0]
 8028e0c:	b29a      	uxth	r2, r3
 8028e0e:	43db      	mvns	r3, r3
 8028e10:	b2e5      	uxtb	r5, r4
 8028e12:	b2db      	uxtb	r3, r3
 8028e14:	fb15 f502 	smulbb	r5, r5, r2
 8028e18:	fb00 5003 	mla	r0, r0, r3, r5
 8028e1c:	b280      	uxth	r0, r0
 8028e1e:	1c45      	adds	r5, r0, #1
 8028e20:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028e24:	784d      	ldrb	r5, [r1, #1]
 8028e26:	fb15 f503 	smulbb	r5, r5, r3
 8028e2a:	1200      	asrs	r0, r0, #8
 8028e2c:	7008      	strb	r0, [r1, #0]
 8028e2e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8028e32:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028e36:	fb00 5002 	mla	r0, r0, r2, r5
 8028e3a:	b280      	uxth	r0, r0
 8028e3c:	1c45      	adds	r5, r0, #1
 8028e3e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028e42:	1200      	asrs	r0, r0, #8
 8028e44:	7048      	strb	r0, [r1, #1]
 8028e46:	7888      	ldrb	r0, [r1, #2]
 8028e48:	fb10 f303 	smulbb	r3, r0, r3
 8028e4c:	fb04 3202 	mla	r2, r4, r2, r3
 8028e50:	b292      	uxth	r2, r2
 8028e52:	1c53      	adds	r3, r2, #1
 8028e54:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028e58:	1212      	asrs	r2, r2, #8
 8028e5a:	708a      	strb	r2, [r1, #2]
 8028e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e60:	2700      	movs	r7, #0
 8028e62:	e761      	b.n	8028d28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8028e64:	2600      	movs	r6, #0
 8028e66:	e77d      	b.n	8028d64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028e68:	4606      	mov	r6, r0
 8028e6a:	e77b      	b.n	8028d64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028e6c:	2500      	movs	r5, #0
 8028e6e:	e795      	b.n	8028d9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8028e70:	4663      	mov	r3, ip
 8028e72:	4665      	mov	r5, ip
 8028e74:	e7ab      	b.n	8028dce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028e76:	2300      	movs	r3, #0
 8028e78:	e7a9      	b.n	8028dce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028e7a:	4603      	mov	r3, r0
 8028e7c:	e7a7      	b.n	8028dce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028e7e:	bf00      	nop
 8028e80:	24015de4 	.word	0x24015de4

08028e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e88:	b093      	sub	sp, #76	@ 0x4c
 8028e8a:	461c      	mov	r4, r3
 8028e8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8028e8e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028e90:	9011      	str	r0, [sp, #68]	@ 0x44
 8028e92:	9107      	str	r1, [sp, #28]
 8028e94:	6850      	ldr	r0, [r2, #4]
 8028e96:	6812      	ldr	r2, [r2, #0]
 8028e98:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8028e9c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8028ea0:	fb00 1303 	mla	r3, r0, r3, r1
 8028ea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028ea8:	eb02 0b03 	add.w	fp, r2, r3
 8028eac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028eae:	689b      	ldr	r3, [r3, #8]
 8028eb0:	3301      	adds	r3, #1
 8028eb2:	f023 0301 	bic.w	r3, r3, #1
 8028eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8028eb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028eba:	f8d3 8000 	ldr.w	r8, [r3]
 8028ebe:	9b07      	ldr	r3, [sp, #28]
 8028ec0:	2b00      	cmp	r3, #0
 8028ec2:	dc03      	bgt.n	8028ecc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028ec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	f340 822b 	ble.w	8029322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028ecc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028ece:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ed2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028ed6:	1e48      	subs	r0, r1, #1
 8028ed8:	1e57      	subs	r7, r2, #1
 8028eda:	2c00      	cmp	r4, #0
 8028edc:	f340 80d7 	ble.w	802908e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8028ee0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8028ee4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028ee8:	d406      	bmi.n	8028ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028eea:	4584      	cmp	ip, r0
 8028eec:	da04      	bge.n	8028ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028eee:	2b00      	cmp	r3, #0
 8028ef0:	db02      	blt.n	8028ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028ef2:	42bb      	cmp	r3, r7
 8028ef4:	f2c0 80cc 	blt.w	8029090 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8028ef8:	f11c 0c01 	adds.w	ip, ip, #1
 8028efc:	f100 80bf 	bmi.w	802907e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028f00:	4561      	cmp	r1, ip
 8028f02:	f2c0 80bc 	blt.w	802907e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028f06:	3301      	adds	r3, #1
 8028f08:	f100 80b9 	bmi.w	802907e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028f0c:	429a      	cmp	r2, r3
 8028f0e:	f2c0 80b6 	blt.w	802907e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028f12:	46a2      	mov	sl, r4
 8028f14:	465f      	mov	r7, fp
 8028f16:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028f1a:	f1ba 0f00 	cmp.w	sl, #0
 8028f1e:	f340 80d4 	ble.w	80290ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028f22:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8028f26:	1430      	asrs	r0, r6, #16
 8028f28:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028f2c:	9308      	str	r3, [sp, #32]
 8028f2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028f30:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028f34:	142b      	asrs	r3, r5, #16
 8028f36:	f100 8124 	bmi.w	8029182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028f3a:	f10c 32ff 	add.w	r2, ip, #4294967295
 8028f3e:	4293      	cmp	r3, r2
 8028f40:	f280 811f 	bge.w	8029182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028f44:	2800      	cmp	r0, #0
 8028f46:	f2c0 811c 	blt.w	8029182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028f4a:	f10e 32ff 	add.w	r2, lr, #4294967295
 8028f4e:	4290      	cmp	r0, r2
 8028f50:	f280 8117 	bge.w	8029182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028f54:	fb00 3309 	mla	r3, r0, r9, r3
 8028f58:	0858      	lsrs	r0, r3, #1
 8028f5a:	07da      	lsls	r2, r3, #31
 8028f5c:	9a08      	ldr	r2, [sp, #32]
 8028f5e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8028f62:	bf54      	ite	pl
 8028f64:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028f68:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028f6c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f70:	fa5f fc8c 	uxtb.w	ip, ip
 8028f74:	2a00      	cmp	r2, #0
 8028f76:	f000 80ed 	beq.w	8029154 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8028f7a:	1c58      	adds	r0, r3, #1
 8028f7c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028f80:	07c0      	lsls	r0, r0, #31
 8028f82:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8028f86:	bf54      	ite	pl
 8028f88:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028f8c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028f90:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028f94:	fa5f fe8e 	uxtb.w	lr, lr
 8028f98:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8028f9c:	b1c9      	cbz	r1, 8028fd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028f9e:	444b      	add	r3, r9
 8028fa0:	0858      	lsrs	r0, r3, #1
 8028fa2:	07da      	lsls	r2, r3, #31
 8028fa4:	f818 0000 	ldrb.w	r0, [r8, r0]
 8028fa8:	bf54      	ite	pl
 8028faa:	f000 000f 	andpl.w	r0, r0, #15
 8028fae:	1100      	asrmi	r0, r0, #4
 8028fb0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028fb4:	b2c0      	uxtb	r0, r0
 8028fb6:	900a      	str	r0, [sp, #40]	@ 0x28
 8028fb8:	1c58      	adds	r0, r3, #1
 8028fba:	0843      	lsrs	r3, r0, #1
 8028fbc:	07c2      	lsls	r2, r0, #31
 8028fbe:	f818 3003 	ldrb.w	r3, [r8, r3]
 8028fc2:	bf54      	ite	pl
 8028fc4:	f003 030f 	andpl.w	r3, r3, #15
 8028fc8:	111b      	asrmi	r3, r3, #4
 8028fca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028fce:	b2db      	uxtb	r3, r3
 8028fd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8028fd2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028fd6:	b289      	uxth	r1, r1
 8028fd8:	fb02 f301 	mul.w	r3, r2, r1
 8028fdc:	0112      	lsls	r2, r2, #4
 8028fde:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028fe2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028fe6:	1ad2      	subs	r2, r2, r3
 8028fe8:	b289      	uxth	r1, r1
 8028fea:	b292      	uxth	r2, r2
 8028fec:	1a40      	subs	r0, r0, r1
 8028fee:	fa1f fe80 	uxth.w	lr, r0
 8028ff2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028ff4:	4342      	muls	r2, r0
 8028ff6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028ffc:	fb01 c102 	mla	r1, r1, r2, ip
 8029000:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029002:	fb03 1302 	mla	r3, r3, r2, r1
 8029006:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802900a:	b383      	cbz	r3, 802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802900c:	4ac6      	ldr	r2, [pc, #792]	@ (8029328 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802900e:	2bff      	cmp	r3, #255	@ 0xff
 8029010:	6812      	ldr	r2, [r2, #0]
 8029012:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8029016:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802901a:	b2d2      	uxtb	r2, r2
 802901c:	f000 80ac 	beq.w	8029178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029020:	b299      	uxth	r1, r3
 8029022:	43db      	mvns	r3, r3
 8029024:	f897 c000 	ldrb.w	ip, [r7]
 8029028:	fb12 f201 	smulbb	r2, r2, r1
 802902c:	b2db      	uxtb	r3, r3
 802902e:	fb10 f001 	smulbb	r0, r0, r1
 8029032:	fb0c 2203 	mla	r2, ip, r3, r2
 8029036:	fb1e f101 	smulbb	r1, lr, r1
 802903a:	b292      	uxth	r2, r2
 802903c:	f102 0c01 	add.w	ip, r2, #1
 8029040:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029044:	1212      	asrs	r2, r2, #8
 8029046:	703a      	strb	r2, [r7, #0]
 8029048:	787a      	ldrb	r2, [r7, #1]
 802904a:	fb02 0003 	mla	r0, r2, r3, r0
 802904e:	b280      	uxth	r0, r0
 8029050:	1c42      	adds	r2, r0, #1
 8029052:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029056:	78ba      	ldrb	r2, [r7, #2]
 8029058:	fb02 1303 	mla	r3, r2, r3, r1
 802905c:	1200      	asrs	r0, r0, #8
 802905e:	b29b      	uxth	r3, r3
 8029060:	7078      	strb	r0, [r7, #1]
 8029062:	f103 0e01 	add.w	lr, r3, #1
 8029066:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802906a:	121b      	asrs	r3, r3, #8
 802906c:	70bb      	strb	r3, [r7, #2]
 802906e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8029070:	3703      	adds	r7, #3
 8029072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029076:	441d      	add	r5, r3
 8029078:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802907a:	441e      	add	r6, r3
 802907c:	e74d      	b.n	8028f1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802907e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8029080:	3c01      	subs	r4, #1
 8029082:	f10b 0b03 	add.w	fp, fp, #3
 8029086:	441d      	add	r5, r3
 8029088:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802908a:	441e      	add	r6, r3
 802908c:	e725      	b.n	8028eda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802908e:	d021      	beq.n	80290d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8029090:	1e63      	subs	r3, r4, #1
 8029092:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8029094:	fb00 5003 	mla	r0, r0, r3, r5
 8029098:	1400      	asrs	r0, r0, #16
 802909a:	f53f af3a 	bmi.w	8028f12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802909e:	3901      	subs	r1, #1
 80290a0:	4288      	cmp	r0, r1
 80290a2:	f6bf af36 	bge.w	8028f12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290a6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80290a8:	fb01 6303 	mla	r3, r1, r3, r6
 80290ac:	141b      	asrs	r3, r3, #16
 80290ae:	f53f af30 	bmi.w	8028f12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290b2:	3a01      	subs	r2, #1
 80290b4:	4293      	cmp	r3, r2
 80290b6:	f6bf af2c 	bge.w	8028f12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290ba:	f10b 0c03 	add.w	ip, fp, #3
 80290be:	46a6      	mov	lr, r4
 80290c0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80290c4:	f1be 0f00 	cmp.w	lr, #0
 80290c8:	dc79      	bgt.n	80291be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80290ca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80290ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80290d2:	44a3      	add	fp, r4
 80290d4:	9b07      	ldr	r3, [sp, #28]
 80290d6:	2b00      	cmp	r3, #0
 80290d8:	f340 8123 	ble.w	8029322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80290dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80290e0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80290e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80290e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80290ea:	eef0 6a62 	vmov.f32	s13, s5
 80290ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80290f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80290f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80290fa:	ee16 5a90 	vmov	r5, s13
 80290fe:	eef0 6a43 	vmov.f32	s13, s6
 8029102:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029106:	ee16 6a90 	vmov	r6, s13
 802910a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802910e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029112:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029116:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802911a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802911e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029122:	ee12 2a90 	vmov	r2, s5
 8029126:	eef0 2a47 	vmov.f32	s5, s14
 802912a:	fb92 f3f3 	sdiv	r3, r2, r3
 802912e:	ee13 2a10 	vmov	r2, s6
 8029132:	931f      	str	r3, [sp, #124]	@ 0x7c
 8029134:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029136:	eeb0 3a67 	vmov.f32	s6, s15
 802913a:	fb92 f3f3 	sdiv	r3, r2, r3
 802913e:	9320      	str	r3, [sp, #128]	@ 0x80
 8029140:	9b07      	ldr	r3, [sp, #28]
 8029142:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029144:	3b01      	subs	r3, #1
 8029146:	9307      	str	r3, [sp, #28]
 8029148:	bf08      	it	eq
 802914a:	4614      	moveq	r4, r2
 802914c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802914e:	bf18      	it	ne
 8029150:	461c      	movne	r4, r3
 8029152:	e6b4      	b.n	8028ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029154:	2900      	cmp	r1, #0
 8029156:	f43f af3c 	beq.w	8028fd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802915a:	eb09 0003 	add.w	r0, r9, r3
 802915e:	0843      	lsrs	r3, r0, #1
 8029160:	07c0      	lsls	r0, r0, #31
 8029162:	f818 3003 	ldrb.w	r3, [r8, r3]
 8029166:	bf54      	ite	pl
 8029168:	f003 030f 	andpl.w	r3, r3, #15
 802916c:	111b      	asrmi	r3, r3, #4
 802916e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029172:	b2db      	uxtb	r3, r3
 8029174:	930a      	str	r3, [sp, #40]	@ 0x28
 8029176:	e72c      	b.n	8028fd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8029178:	703a      	strb	r2, [r7, #0]
 802917a:	7078      	strb	r0, [r7, #1]
 802917c:	f887 e002 	strb.w	lr, [r7, #2]
 8029180:	e775      	b.n	802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029182:	1c5a      	adds	r2, r3, #1
 8029184:	f53f af73 	bmi.w	802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029188:	4594      	cmp	ip, r2
 802918a:	f6ff af70 	blt.w	802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802918e:	1c42      	adds	r2, r0, #1
 8029190:	f53f af6d 	bmi.w	802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029194:	4596      	cmp	lr, r2
 8029196:	f6ff af6a 	blt.w	802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802919a:	9302      	str	r3, [sp, #8]
 802919c:	fa0f f38e 	sxth.w	r3, lr
 80291a0:	9a08      	ldr	r2, [sp, #32]
 80291a2:	9301      	str	r3, [sp, #4]
 80291a4:	fa0f f38c 	sxth.w	r3, ip
 80291a8:	9105      	str	r1, [sp, #20]
 80291aa:	4639      	mov	r1, r7
 80291ac:	9300      	str	r3, [sp, #0]
 80291ae:	464b      	mov	r3, r9
 80291b0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80291b4:	4642      	mov	r2, r8
 80291b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80291b8:	f7ff fd90 	bl	8028cdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80291bc:	e757      	b.n	802906e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80291be:	142a      	asrs	r2, r5, #16
 80291c0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80291c4:	1433      	asrs	r3, r6, #16
 80291c6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80291ca:	fb09 2303 	mla	r3, r9, r3, r2
 80291ce:	085a      	lsrs	r2, r3, #1
 80291d0:	07d9      	lsls	r1, r3, #31
 80291d2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80291d6:	bf54      	ite	pl
 80291d8:	f002 020f 	andpl.w	r2, r2, #15
 80291dc:	1112      	asrmi	r2, r2, #4
 80291de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80291e2:	b2d2      	uxtb	r2, r2
 80291e4:	2800      	cmp	r0, #0
 80291e6:	f000 8085 	beq.w	80292f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80291ea:	f103 0a01 	add.w	sl, r3, #1
 80291ee:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80291f2:	f01a 0f01 	tst.w	sl, #1
 80291f6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80291fa:	bf0c      	ite	eq
 80291fc:	f001 010f 	andeq.w	r1, r1, #15
 8029200:	1109      	asrne	r1, r1, #4
 8029202:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029206:	b2c9      	uxtb	r1, r1
 8029208:	910f      	str	r1, [sp, #60]	@ 0x3c
 802920a:	b1df      	cbz	r7, 8029244 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802920c:	444b      	add	r3, r9
 802920e:	0859      	lsrs	r1, r3, #1
 8029210:	f013 0f01 	tst.w	r3, #1
 8029214:	f103 0301 	add.w	r3, r3, #1
 8029218:	f818 1001 	ldrb.w	r1, [r8, r1]
 802921c:	bf0c      	ite	eq
 802921e:	f001 010f 	andeq.w	r1, r1, #15
 8029222:	1109      	asrne	r1, r1, #4
 8029224:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029228:	b2c9      	uxtb	r1, r1
 802922a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802922c:	0859      	lsrs	r1, r3, #1
 802922e:	07db      	lsls	r3, r3, #31
 8029230:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029234:	bf54      	ite	pl
 8029236:	f001 010f 	andpl.w	r1, r1, #15
 802923a:	1109      	asrmi	r1, r1, #4
 802923c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029240:	b2c9      	uxtb	r1, r1
 8029242:	9110      	str	r1, [sp, #64]	@ 0x40
 8029244:	b280      	uxth	r0, r0
 8029246:	b2bf      	uxth	r7, r7
 8029248:	fb00 f307 	mul.w	r3, r0, r7
 802924c:	0100      	lsls	r0, r0, #4
 802924e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8029252:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8029256:	1ac0      	subs	r0, r0, r3
 8029258:	b2bf      	uxth	r7, r7
 802925a:	b280      	uxth	r0, r0
 802925c:	1bc9      	subs	r1, r1, r7
 802925e:	fa1f fa81 	uxth.w	sl, r1
 8029262:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029264:	4348      	muls	r0, r1
 8029266:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029268:	fb02 020a 	mla	r2, r2, sl, r0
 802926c:	fb07 2701 	mla	r7, r7, r1, r2
 8029270:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029272:	fb03 7302 	mla	r3, r3, r2, r7
 8029276:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802927a:	b393      	cbz	r3, 80292e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802927c:	4a2a      	ldr	r2, [pc, #168]	@ (8029328 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802927e:	2bff      	cmp	r3, #255	@ 0xff
 8029280:	6811      	ldr	r1, [r2, #0]
 8029282:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8029286:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802928a:	b2c9      	uxtb	r1, r1
 802928c:	d042      	beq.n	8029314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802928e:	b298      	uxth	r0, r3
 8029290:	43db      	mvns	r3, r3
 8029292:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8029296:	fb11 f100 	smulbb	r1, r1, r0
 802929a:	b2db      	uxtb	r3, r3
 802929c:	fb17 f700 	smulbb	r7, r7, r0
 80292a0:	fb02 1103 	mla	r1, r2, r3, r1
 80292a4:	fb1a f000 	smulbb	r0, sl, r0
 80292a8:	b289      	uxth	r1, r1
 80292aa:	1c4a      	adds	r2, r1, #1
 80292ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80292b0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80292b4:	fb02 7703 	mla	r7, r2, r3, r7
 80292b8:	1209      	asrs	r1, r1, #8
 80292ba:	b2bf      	uxth	r7, r7
 80292bc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80292c0:	1c7a      	adds	r2, r7, #1
 80292c2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80292c6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80292ca:	fb02 0303 	mla	r3, r2, r3, r0
 80292ce:	123f      	asrs	r7, r7, #8
 80292d0:	b29b      	uxth	r3, r3
 80292d2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80292d6:	1c5a      	adds	r2, r3, #1
 80292d8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80292dc:	121b      	asrs	r3, r3, #8
 80292de:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80292e2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80292e4:	f10c 0c03 	add.w	ip, ip, #3
 80292e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80292ec:	441d      	add	r5, r3
 80292ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80292f0:	441e      	add	r6, r3
 80292f2:	e6e7      	b.n	80290c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80292f4:	2f00      	cmp	r7, #0
 80292f6:	d0a5      	beq.n	8029244 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80292f8:	444b      	add	r3, r9
 80292fa:	0859      	lsrs	r1, r3, #1
 80292fc:	07db      	lsls	r3, r3, #31
 80292fe:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029302:	bf54      	ite	pl
 8029304:	f001 010f 	andpl.w	r1, r1, #15
 8029308:	1109      	asrmi	r1, r1, #4
 802930a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802930e:	b2c9      	uxtb	r1, r1
 8029310:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029312:	e797      	b.n	8029244 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8029314:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029318:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802931c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8029320:	e7df      	b.n	80292e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8029322:	b013      	add	sp, #76	@ 0x4c
 8029324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029328:	24015de4 	.word	0x24015de4

0802932c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 802932c:	b530      	push	{r4, r5, lr}
 802932e:	b29d      	uxth	r5, r3
 8029330:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8029334:	780c      	ldrb	r4, [r1, #0]
 8029336:	b298      	uxth	r0, r3
 8029338:	7813      	ldrb	r3, [r2, #0]
 802933a:	fb14 f405 	smulbb	r4, r4, r5
 802933e:	fb13 f300 	smulbb	r3, r3, r0
 8029342:	441c      	add	r4, r3
 8029344:	b2a4      	uxth	r4, r4
 8029346:	1c63      	adds	r3, r4, #1
 8029348:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802934c:	7853      	ldrb	r3, [r2, #1]
 802934e:	fb13 f300 	smulbb	r3, r3, r0
 8029352:	1224      	asrs	r4, r4, #8
 8029354:	7014      	strb	r4, [r2, #0]
 8029356:	784c      	ldrb	r4, [r1, #1]
 8029358:	fb14 f405 	smulbb	r4, r4, r5
 802935c:	441c      	add	r4, r3
 802935e:	b2a4      	uxth	r4, r4
 8029360:	1c63      	adds	r3, r4, #1
 8029362:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029366:	1224      	asrs	r4, r4, #8
 8029368:	7054      	strb	r4, [r2, #1]
 802936a:	788b      	ldrb	r3, [r1, #2]
 802936c:	7891      	ldrb	r1, [r2, #2]
 802936e:	fb13 f305 	smulbb	r3, r3, r5
 8029372:	fb11 f000 	smulbb	r0, r1, r0
 8029376:	4403      	add	r3, r0
 8029378:	b29b      	uxth	r3, r3
 802937a:	1c59      	adds	r1, r3, #1
 802937c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029380:	121b      	asrs	r3, r3, #8
 8029382:	7093      	strb	r3, [r2, #2]
 8029384:	bd30      	pop	{r4, r5, pc}
	...

08029388 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8029388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802938c:	461c      	mov	r4, r3
 802938e:	b08b      	sub	sp, #44	@ 0x2c
 8029390:	460e      	mov	r6, r1
 8029392:	4615      	mov	r5, r2
 8029394:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029396:	4682      	mov	sl, r0
 8029398:	6861      	ldr	r1, [r4, #4]
 802939a:	aa06      	add	r2, sp, #24
 802939c:	6820      	ldr	r0, [r4, #0]
 802939e:	2702      	movs	r7, #2
 80293a0:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80293a4:	3504      	adds	r5, #4
 80293a6:	c203      	stmia	r2!, {r0, r1}
 80293a8:	6818      	ldr	r0, [r3, #0]
 80293aa:	aa08      	add	r2, sp, #32
 80293ac:	6859      	ldr	r1, [r3, #4]
 80293ae:	c203      	stmia	r2!, {r0, r1}
 80293b0:	a806      	add	r0, sp, #24
 80293b2:	f7f3 f8bb 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80293b6:	4621      	mov	r1, r4
 80293b8:	a808      	add	r0, sp, #32
 80293ba:	f7f3 f8df 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80293be:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80293c2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 80293c6:	f002 0301 	and.w	r3, r2, #1
 80293ca:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80293ce:	9302      	str	r3, [sp, #8]
 80293d0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80293d4:	f003 0101 	and.w	r1, r3, #1
 80293d8:	9101      	str	r1, [sp, #4]
 80293da:	9801      	ldr	r0, [sp, #4]
 80293dc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80293e0:	4403      	add	r3, r0
 80293e2:	fb01 2303 	mla	r3, r1, r3, r2
 80293e6:	fb93 f3f7 	sdiv	r3, r3, r7
 80293ea:	441e      	add	r6, r3
 80293ec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80293f0:	441a      	add	r2, r3
 80293f2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80293f6:	4419      	add	r1, r3
 80293f8:	4b70      	ldr	r3, [pc, #448]	@ (80295bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80293fa:	f8ad 2020 	strh.w	r2, [sp, #32]
 80293fe:	6818      	ldr	r0, [r3, #0]
 8029400:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8029404:	6803      	ldr	r3, [r0, #0]
 8029406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029408:	4798      	blx	r3
 802940a:	4a6d      	ldr	r2, [pc, #436]	@ (80295c0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802940c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8029410:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8029414:	8813      	ldrh	r3, [r2, #0]
 8029416:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802941a:	fb03 1404 	mla	r4, r3, r4, r1
 802941e:	4611      	mov	r1, r2
 8029420:	fb0b f303 	mul.w	r3, fp, r3
 8029424:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802942c:	4404      	add	r4, r0
 802942e:	4423      	add	r3, r4
 8029430:	d073      	beq.n	802951a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8029432:	9705      	str	r7, [sp, #20]
 8029434:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8029438:	9b03      	ldr	r3, [sp, #12]
 802943a:	429c      	cmp	r4, r3
 802943c:	f080 80b5 	bcs.w	80295aa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8029440:	9b02      	ldr	r3, [sp, #8]
 8029442:	b35b      	cbz	r3, 802949c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8029444:	7831      	ldrb	r1, [r6, #0]
 8029446:	4622      	mov	r2, r4
 8029448:	1c77      	adds	r7, r6, #1
 802944a:	3403      	adds	r4, #3
 802944c:	f001 010f 	and.w	r1, r1, #15
 8029450:	f108 3bff 	add.w	fp, r8, #4294967295
 8029454:	464b      	mov	r3, r9
 8029456:	4650      	mov	r0, sl
 8029458:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802945c:	4429      	add	r1, r5
 802945e:	f7ff ff65 	bl	802932c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8029462:	f1bb 0f01 	cmp.w	fp, #1
 8029466:	dd1c      	ble.n	80294a2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8029468:	7839      	ldrb	r1, [r7, #0]
 802946a:	4622      	mov	r2, r4
 802946c:	464b      	mov	r3, r9
 802946e:	4650      	mov	r0, sl
 8029470:	0909      	lsrs	r1, r1, #4
 8029472:	f1ab 0b02 	sub.w	fp, fp, #2
 8029476:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802947a:	4429      	add	r1, r5
 802947c:	f7ff ff56 	bl	802932c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8029480:	f817 1b01 	ldrb.w	r1, [r7], #1
 8029484:	1ce2      	adds	r2, r4, #3
 8029486:	464b      	mov	r3, r9
 8029488:	f001 010f 	and.w	r1, r1, #15
 802948c:	4650      	mov	r0, sl
 802948e:	3406      	adds	r4, #6
 8029490:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029494:	4429      	add	r1, r5
 8029496:	f7ff ff49 	bl	802932c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802949a:	e7e2      	b.n	8029462 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802949c:	4637      	mov	r7, r6
 802949e:	46c3      	mov	fp, r8
 80294a0:	e7df      	b.n	8029462 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80294a2:	d10a      	bne.n	80294ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80294a4:	7839      	ldrb	r1, [r7, #0]
 80294a6:	4622      	mov	r2, r4
 80294a8:	3403      	adds	r4, #3
 80294aa:	464b      	mov	r3, r9
 80294ac:	0909      	lsrs	r1, r1, #4
 80294ae:	4650      	mov	r0, sl
 80294b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80294b4:	4429      	add	r1, r5
 80294b6:	f7ff ff39 	bl	802932c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80294ba:	9b04      	ldr	r3, [sp, #16]
 80294bc:	9a01      	ldr	r2, [sp, #4]
 80294be:	881b      	ldrh	r3, [r3, #0]
 80294c0:	eba3 0308 	sub.w	r3, r3, r8
 80294c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80294c8:	441c      	add	r4, r3
 80294ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80294ce:	4413      	add	r3, r2
 80294d0:	9a05      	ldr	r2, [sp, #20]
 80294d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80294d6:	441e      	add	r6, r3
 80294d8:	e7ae      	b.n	8029438 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80294da:	4632      	mov	r2, r6
 80294dc:	46c4      	mov	ip, r8
 80294de:	e037      	b.n	8029550 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80294e0:	d10e      	bne.n	8029500 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80294e2:	7812      	ldrb	r2, [r2, #0]
 80294e4:	3003      	adds	r0, #3
 80294e6:	0912      	lsrs	r2, r2, #4
 80294e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80294ec:	18ac      	adds	r4, r5, r2
 80294ee:	5caa      	ldrb	r2, [r5, r2]
 80294f0:	f800 2c03 	strb.w	r2, [r0, #-3]
 80294f4:	7862      	ldrb	r2, [r4, #1]
 80294f6:	f800 2c02 	strb.w	r2, [r0, #-2]
 80294fa:	78a2      	ldrb	r2, [r4, #2]
 80294fc:	f800 2c01 	strb.w	r2, [r0, #-1]
 8029500:	880c      	ldrh	r4, [r1, #0]
 8029502:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8029506:	eba4 0408 	sub.w	r4, r4, r8
 802950a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802950e:	4404      	add	r4, r0
 8029510:	9801      	ldr	r0, [sp, #4]
 8029512:	4402      	add	r2, r0
 8029514:	fb92 f2f7 	sdiv	r2, r2, r7
 8029518:	4416      	add	r6, r2
 802951a:	429c      	cmp	r4, r3
 802951c:	d245      	bcs.n	80295aa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802951e:	9a02      	ldr	r2, [sp, #8]
 8029520:	2a00      	cmp	r2, #0
 8029522:	d0da      	beq.n	80294da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8029524:	7830      	ldrb	r0, [r6, #0]
 8029526:	1c72      	adds	r2, r6, #1
 8029528:	3403      	adds	r4, #3
 802952a:	f000 000f 	and.w	r0, r0, #15
 802952e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029532:	eb05 0c00 	add.w	ip, r5, r0
 8029536:	5c28      	ldrb	r0, [r5, r0]
 8029538:	f804 0c03 	strb.w	r0, [r4, #-3]
 802953c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8029540:	f804 0c02 	strb.w	r0, [r4, #-2]
 8029544:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8029548:	f108 3cff 	add.w	ip, r8, #4294967295
 802954c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8029550:	f1bc 0f01 	cmp.w	ip, #1
 8029554:	4620      	mov	r0, r4
 8029556:	f104 0406 	add.w	r4, r4, #6
 802955a:	ddc1      	ble.n	80294e0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 802955c:	7810      	ldrb	r0, [r2, #0]
 802955e:	f1ac 0c02 	sub.w	ip, ip, #2
 8029562:	0900      	lsrs	r0, r0, #4
 8029564:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029568:	eb05 0e00 	add.w	lr, r5, r0
 802956c:	5c28      	ldrb	r0, [r5, r0]
 802956e:	f804 0c06 	strb.w	r0, [r4, #-6]
 8029572:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8029576:	f804 0c05 	strb.w	r0, [r4, #-5]
 802957a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802957e:	f804 0c04 	strb.w	r0, [r4, #-4]
 8029582:	f812 0b01 	ldrb.w	r0, [r2], #1
 8029586:	f000 000f 	and.w	r0, r0, #15
 802958a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802958e:	eb05 0e00 	add.w	lr, r5, r0
 8029592:	5c28      	ldrb	r0, [r5, r0]
 8029594:	f804 0c03 	strb.w	r0, [r4, #-3]
 8029598:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802959c:	f804 0c02 	strb.w	r0, [r4, #-2]
 80295a0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80295a4:	f804 0c01 	strb.w	r0, [r4, #-1]
 80295a8:	e7d2      	b.n	8029550 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80295aa:	4b04      	ldr	r3, [pc, #16]	@ (80295bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80295ac:	6818      	ldr	r0, [r3, #0]
 80295ae:	6803      	ldr	r3, [r0, #0]
 80295b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80295b2:	4798      	blx	r3
 80295b4:	b00b      	add	sp, #44	@ 0x2c
 80295b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295ba:	bf00      	nop
 80295bc:	24015dd4 	.word	0x24015dd4
 80295c0:	24015dce 	.word	0x24015dce

080295c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 80295c4:	b530      	push	{r4, r5, lr}
 80295c6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80295ca:	780d      	ldrb	r5, [r1, #0]
 80295cc:	28ff      	cmp	r0, #255	@ 0xff
 80295ce:	d107      	bne.n	80295e0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80295d0:	2bff      	cmp	r3, #255	@ 0xff
 80295d2:	d105      	bne.n	80295e0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80295d4:	7015      	strb	r5, [r2, #0]
 80295d6:	784b      	ldrb	r3, [r1, #1]
 80295d8:	7053      	strb	r3, [r2, #1]
 80295da:	788b      	ldrb	r3, [r1, #2]
 80295dc:	7093      	strb	r3, [r2, #2]
 80295de:	bd30      	pop	{r4, r5, pc}
 80295e0:	fb10 f003 	smulbb	r0, r0, r3
 80295e4:	b283      	uxth	r3, r0
 80295e6:	1c58      	adds	r0, r3, #1
 80295e8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80295ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80295f0:	b284      	uxth	r4, r0
 80295f2:	43c0      	mvns	r0, r0
 80295f4:	fb15 f504 	smulbb	r5, r5, r4
 80295f8:	b2c3      	uxtb	r3, r0
 80295fa:	7810      	ldrb	r0, [r2, #0]
 80295fc:	fb00 5003 	mla	r0, r0, r3, r5
 8029600:	b280      	uxth	r0, r0
 8029602:	1c45      	adds	r5, r0, #1
 8029604:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029608:	7855      	ldrb	r5, [r2, #1]
 802960a:	fb15 f503 	smulbb	r5, r5, r3
 802960e:	1200      	asrs	r0, r0, #8
 8029610:	7010      	strb	r0, [r2, #0]
 8029612:	7848      	ldrb	r0, [r1, #1]
 8029614:	fb00 5004 	mla	r0, r0, r4, r5
 8029618:	b280      	uxth	r0, r0
 802961a:	1c45      	adds	r5, r0, #1
 802961c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029620:	1200      	asrs	r0, r0, #8
 8029622:	7050      	strb	r0, [r2, #1]
 8029624:	7888      	ldrb	r0, [r1, #2]
 8029626:	7891      	ldrb	r1, [r2, #2]
 8029628:	fb11 f303 	smulbb	r3, r1, r3
 802962c:	fb00 3304 	mla	r3, r0, r4, r3
 8029630:	b29b      	uxth	r3, r3
 8029632:	1c59      	adds	r1, r3, #1
 8029634:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029638:	121b      	asrs	r3, r3, #8
 802963a:	e7cf      	b.n	80295dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0802963c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029640:	461d      	mov	r5, r3
 8029642:	b08f      	sub	sp, #60	@ 0x3c
 8029644:	460c      	mov	r4, r1
 8029646:	4616      	mov	r6, r2
 8029648:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802964a:	4680      	mov	r8, r0
 802964c:	6869      	ldr	r1, [r5, #4]
 802964e:	aa0a      	add	r2, sp, #40	@ 0x28
 8029650:	6828      	ldr	r0, [r5, #0]
 8029652:	3604      	adds	r6, #4
 8029654:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8029658:	4f57      	ldr	r7, [pc, #348]	@ (80297b8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802965a:	c203      	stmia	r2!, {r0, r1}
 802965c:	6818      	ldr	r0, [r3, #0]
 802965e:	aa0c      	add	r2, sp, #48	@ 0x30
 8029660:	6859      	ldr	r1, [r3, #4]
 8029662:	c203      	stmia	r2!, {r0, r1}
 8029664:	a80a      	add	r0, sp, #40	@ 0x28
 8029666:	f7f2 ff61 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802966a:	4629      	mov	r1, r5
 802966c:	a80c      	add	r0, sp, #48	@ 0x30
 802966e:	2502      	movs	r5, #2
 8029670:	f7f2 ff84 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029674:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8029678:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 802967c:	f002 0301 	and.w	r3, r2, #1
 8029680:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8029684:	9304      	str	r3, [sp, #16]
 8029686:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802968a:	f003 0101 	and.w	r1, r3, #1
 802968e:	9103      	str	r1, [sp, #12]
 8029690:	9803      	ldr	r0, [sp, #12]
 8029692:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8029696:	4403      	add	r3, r0
 8029698:	6838      	ldr	r0, [r7, #0]
 802969a:	fb01 2303 	mla	r3, r1, r3, r2
 802969e:	fb93 f3f5 	sdiv	r3, r3, r5
 80296a2:	18e5      	adds	r5, r4, r3
 80296a4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80296a8:	441a      	add	r2, r3
 80296aa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80296ae:	4419      	add	r1, r3
 80296b0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80296b4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80296b8:	6803      	ldr	r3, [r0, #0]
 80296ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80296bc:	4798      	blx	r3
 80296be:	4a3f      	ldr	r2, [pc, #252]	@ (80297bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80296c0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80296c4:	8813      	ldrh	r3, [r2, #0]
 80296c6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80296ca:	9207      	str	r2, [sp, #28]
 80296cc:	fb03 1404 	mla	r4, r3, r4, r1
 80296d0:	fb0a f303 	mul.w	r3, sl, r3
 80296d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80296d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80296dc:	4404      	add	r4, r0
 80296de:	18e3      	adds	r3, r4, r3
 80296e0:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80296e4:	9b05      	ldr	r3, [sp, #20]
 80296e6:	429c      	cmp	r4, r3
 80296e8:	d25d      	bcs.n	80297a6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80296ea:	9b04      	ldr	r3, [sp, #16]
 80296ec:	2b00      	cmp	r3, #0
 80296ee:	d037      	beq.n	8029760 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80296f0:	782b      	ldrb	r3, [r5, #0]
 80296f2:	1c6f      	adds	r7, r5, #1
 80296f4:	f003 030f 	and.w	r3, r3, #15
 80296f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80296fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80296fe:	0e1b      	lsrs	r3, r3, #24
 8029700:	d006      	beq.n	8029710 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8029702:	9300      	str	r3, [sp, #0]
 8029704:	4622      	mov	r2, r4
 8029706:	464b      	mov	r3, r9
 8029708:	a909      	add	r1, sp, #36	@ 0x24
 802970a:	4640      	mov	r0, r8
 802970c:	f7ff ff5a 	bl	80295c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8029710:	3403      	adds	r4, #3
 8029712:	f10b 3aff 	add.w	sl, fp, #4294967295
 8029716:	f1ba 0f01 	cmp.w	sl, #1
 802971a:	dd24      	ble.n	8029766 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 802971c:	783b      	ldrb	r3, [r7, #0]
 802971e:	091b      	lsrs	r3, r3, #4
 8029720:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029724:	9308      	str	r3, [sp, #32]
 8029726:	0e1b      	lsrs	r3, r3, #24
 8029728:	d006      	beq.n	8029738 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802972a:	9300      	str	r3, [sp, #0]
 802972c:	4622      	mov	r2, r4
 802972e:	464b      	mov	r3, r9
 8029730:	a908      	add	r1, sp, #32
 8029732:	4640      	mov	r0, r8
 8029734:	f7ff ff46 	bl	80295c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8029738:	f817 3b01 	ldrb.w	r3, [r7], #1
 802973c:	f003 030f 	and.w	r3, r3, #15
 8029740:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029744:	9309      	str	r3, [sp, #36]	@ 0x24
 8029746:	0e1b      	lsrs	r3, r3, #24
 8029748:	d006      	beq.n	8029758 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802974a:	9300      	str	r3, [sp, #0]
 802974c:	1ce2      	adds	r2, r4, #3
 802974e:	464b      	mov	r3, r9
 8029750:	a909      	add	r1, sp, #36	@ 0x24
 8029752:	4640      	mov	r0, r8
 8029754:	f7ff ff36 	bl	80295c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8029758:	3406      	adds	r4, #6
 802975a:	f1aa 0a02 	sub.w	sl, sl, #2
 802975e:	e7da      	b.n	8029716 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8029760:	462f      	mov	r7, r5
 8029762:	46da      	mov	sl, fp
 8029764:	e7d7      	b.n	8029716 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8029766:	d10e      	bne.n	8029786 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8029768:	783b      	ldrb	r3, [r7, #0]
 802976a:	091b      	lsrs	r3, r3, #4
 802976c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029770:	9309      	str	r3, [sp, #36]	@ 0x24
 8029772:	0e1b      	lsrs	r3, r3, #24
 8029774:	d006      	beq.n	8029784 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8029776:	9300      	str	r3, [sp, #0]
 8029778:	4622      	mov	r2, r4
 802977a:	464b      	mov	r3, r9
 802977c:	a909      	add	r1, sp, #36	@ 0x24
 802977e:	4640      	mov	r0, r8
 8029780:	f7ff ff20 	bl	80295c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8029784:	3403      	adds	r4, #3
 8029786:	9b07      	ldr	r3, [sp, #28]
 8029788:	9a03      	ldr	r2, [sp, #12]
 802978a:	881b      	ldrh	r3, [r3, #0]
 802978c:	eba3 030b 	sub.w	r3, r3, fp
 8029790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029794:	441c      	add	r4, r3
 8029796:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802979a:	4413      	add	r3, r2
 802979c:	2202      	movs	r2, #2
 802979e:	fb93 f3f2 	sdiv	r3, r3, r2
 80297a2:	441d      	add	r5, r3
 80297a4:	e79e      	b.n	80296e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80297a6:	9b06      	ldr	r3, [sp, #24]
 80297a8:	6818      	ldr	r0, [r3, #0]
 80297aa:	6803      	ldr	r3, [r0, #0]
 80297ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80297ae:	4798      	blx	r3
 80297b0:	b00f      	add	sp, #60	@ 0x3c
 80297b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297b6:	bf00      	nop
 80297b8:	24015dd4 	.word	0x24015dd4
 80297bc:	24015dce 	.word	0x24015dce

080297c0 <CRC_Lock>:
 80297c0:	4a2d      	ldr	r2, [pc, #180]	@ (8029878 <CRC_Lock+0xb8>)
 80297c2:	b530      	push	{r4, r5, lr}
 80297c4:	6813      	ldr	r3, [r2, #0]
 80297c6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80297ca:	f023 0301 	bic.w	r3, r3, #1
 80297ce:	6013      	str	r3, [r2, #0]
 80297d0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80297d4:	4b29      	ldr	r3, [pc, #164]	@ (802987c <CRC_Lock+0xbc>)
 80297d6:	681c      	ldr	r4, [r3, #0]
 80297d8:	4014      	ands	r4, r2
 80297da:	42ac      	cmp	r4, r5
 80297dc:	d005      	beq.n	80297ea <CRC_Lock+0x2a>
 80297de:	681c      	ldr	r4, [r3, #0]
 80297e0:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80297e4:	4014      	ands	r4, r2
 80297e6:	42ac      	cmp	r4, r5
 80297e8:	d125      	bne.n	8029836 <CRC_Lock+0x76>
 80297ea:	4b25      	ldr	r3, [pc, #148]	@ (8029880 <CRC_Lock+0xc0>)
 80297ec:	681b      	ldr	r3, [r3, #0]
 80297ee:	2b00      	cmp	r3, #0
 80297f0:	d139      	bne.n	8029866 <CRC_Lock+0xa6>
 80297f2:	4b24      	ldr	r3, [pc, #144]	@ (8029884 <CRC_Lock+0xc4>)
 80297f4:	681a      	ldr	r2, [r3, #0]
 80297f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80297fa:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80297fe:	d00d      	beq.n	802981c <CRC_Lock+0x5c>
 8029800:	681a      	ldr	r2, [r3, #0]
 8029802:	f240 4483 	movw	r4, #1155	@ 0x483
 8029806:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802980a:	42a2      	cmp	r2, r4
 802980c:	d006      	beq.n	802981c <CRC_Lock+0x5c>
 802980e:	681b      	ldr	r3, [r3, #0]
 8029810:	f240 4285 	movw	r2, #1157	@ 0x485
 8029814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029818:	4293      	cmp	r3, r2
 802981a:	d124      	bne.n	8029866 <CRC_Lock+0xa6>
 802981c:	4b1a      	ldr	r3, [pc, #104]	@ (8029888 <CRC_Lock+0xc8>)
 802981e:	2201      	movs	r2, #1
 8029820:	601a      	str	r2, [r3, #0]
 8029822:	681a      	ldr	r2, [r3, #0]
 8029824:	2a00      	cmp	r2, #0
 8029826:	d1fc      	bne.n	8029822 <CRC_Lock+0x62>
 8029828:	4b18      	ldr	r3, [pc, #96]	@ (802988c <CRC_Lock+0xcc>)
 802982a:	6018      	str	r0, [r3, #0]
 802982c:	6818      	ldr	r0, [r3, #0]
 802982e:	1a43      	subs	r3, r0, r1
 8029830:	4258      	negs	r0, r3
 8029832:	4158      	adcs	r0, r3
 8029834:	e00e      	b.n	8029854 <CRC_Lock+0x94>
 8029836:	681b      	ldr	r3, [r3, #0]
 8029838:	4013      	ands	r3, r2
 802983a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802983e:	4293      	cmp	r3, r2
 8029840:	d111      	bne.n	8029866 <CRC_Lock+0xa6>
 8029842:	4b13      	ldr	r3, [pc, #76]	@ (8029890 <CRC_Lock+0xd0>)
 8029844:	f240 4286 	movw	r2, #1158	@ 0x486
 8029848:	681b      	ldr	r3, [r3, #0]
 802984a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802984e:	4293      	cmp	r3, r2
 8029850:	d001      	beq.n	8029856 <CRC_Lock+0x96>
 8029852:	2000      	movs	r0, #0
 8029854:	bd30      	pop	{r4, r5, pc}
 8029856:	4b0f      	ldr	r3, [pc, #60]	@ (8029894 <CRC_Lock+0xd4>)
 8029858:	2201      	movs	r2, #1
 802985a:	601a      	str	r2, [r3, #0]
 802985c:	681a      	ldr	r2, [r3, #0]
 802985e:	2a00      	cmp	r2, #0
 8029860:	d1fc      	bne.n	802985c <CRC_Lock+0x9c>
 8029862:	4b0d      	ldr	r3, [pc, #52]	@ (8029898 <CRC_Lock+0xd8>)
 8029864:	e7e1      	b.n	802982a <CRC_Lock+0x6a>
 8029866:	4b0d      	ldr	r3, [pc, #52]	@ (802989c <CRC_Lock+0xdc>)
 8029868:	2201      	movs	r2, #1
 802986a:	601a      	str	r2, [r3, #0]
 802986c:	681a      	ldr	r2, [r3, #0]
 802986e:	2a00      	cmp	r2, #0
 8029870:	d1fc      	bne.n	802986c <CRC_Lock+0xac>
 8029872:	4b0b      	ldr	r3, [pc, #44]	@ (80298a0 <CRC_Lock+0xe0>)
 8029874:	e7d9      	b.n	802982a <CRC_Lock+0x6a>
 8029876:	bf00      	nop
 8029878:	e0002000 	.word	0xe0002000
 802987c:	e000ed00 	.word	0xe000ed00
 8029880:	e0042000 	.word	0xe0042000
 8029884:	5c001000 	.word	0x5c001000
 8029888:	58024c08 	.word	0x58024c08
 802988c:	58024c00 	.word	0x58024c00
 8029890:	46008ff0 	.word	0x46008ff0
 8029894:	46024c08 	.word	0x46024c08
 8029898:	46024c00 	.word	0x46024c00
 802989c:	40023008 	.word	0x40023008
 80298a0:	40023000 	.word	0x40023000

080298a4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80298a4:	6101      	str	r1, [r0, #16]
 80298a6:	4770      	bx	lr

080298a8 <_ZN8touchgfx8Gestures4tickEv>:
 80298a8:	7b83      	ldrb	r3, [r0, #14]
 80298aa:	b14b      	cbz	r3, 80298c0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80298ac:	8903      	ldrh	r3, [r0, #8]
 80298ae:	3301      	adds	r3, #1
 80298b0:	b29b      	uxth	r3, r3
 80298b2:	2b07      	cmp	r3, #7
 80298b4:	8103      	strh	r3, [r0, #8]
 80298b6:	bf81      	itttt	hi
 80298b8:	2300      	movhi	r3, #0
 80298ba:	8143      	strhhi	r3, [r0, #10]
 80298bc:	8183      	strhhi	r3, [r0, #12]
 80298be:	7383      	strbhi	r3, [r0, #14]
 80298c0:	4770      	bx	lr
	...

080298c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80298c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80298c8:	4698      	mov	r8, r3
 80298ca:	8883      	ldrh	r3, [r0, #4]
 80298cc:	4604      	mov	r4, r0
 80298ce:	4617      	mov	r7, r2
 80298d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80298d4:	eba8 0303 	sub.w	r3, r8, r3
 80298d8:	4a19      	ldr	r2, [pc, #100]	@ (8029940 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80298da:	460e      	mov	r6, r1
 80298dc:	b21b      	sxth	r3, r3
 80298de:	88c1      	ldrh	r1, [r0, #6]
 80298e0:	9200      	str	r2, [sp, #0]
 80298e2:	2000      	movs	r0, #0
 80298e4:	2b00      	cmp	r3, #0
 80298e6:	8aa2      	ldrh	r2, [r4, #20]
 80298e8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80298ec:	bfb8      	it	lt
 80298ee:	425b      	neglt	r3, r3
 80298f0:	f88d 0004 	strb.w	r0, [sp, #4]
 80298f4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80298f8:	b21b      	sxth	r3, r3
 80298fa:	f8ad 800a 	strh.w	r8, [sp, #10]
 80298fe:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029902:	4293      	cmp	r3, r2
 8029904:	dc07      	bgt.n	8029916 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8029906:	1a69      	subs	r1, r5, r1
 8029908:	b209      	sxth	r1, r1
 802990a:	2900      	cmp	r1, #0
 802990c:	bfb8      	it	lt
 802990e:	4249      	neglt	r1, r1
 8029910:	b209      	sxth	r1, r1
 8029912:	428a      	cmp	r2, r1
 8029914:	da10      	bge.n	8029938 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8029916:	6920      	ldr	r0, [r4, #16]
 8029918:	4669      	mov	r1, sp
 802991a:	eba8 0606 	sub.w	r6, r8, r6
 802991e:	1bef      	subs	r7, r5, r7
 8029920:	6803      	ldr	r3, [r0, #0]
 8029922:	685b      	ldr	r3, [r3, #4]
 8029924:	4798      	blx	r3
 8029926:	2300      	movs	r3, #0
 8029928:	2001      	movs	r0, #1
 802992a:	8166      	strh	r6, [r4, #10]
 802992c:	8123      	strh	r3, [r4, #8]
 802992e:	81a7      	strh	r7, [r4, #12]
 8029930:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029934:	80e5      	strh	r5, [r4, #6]
 8029936:	73a0      	strb	r0, [r4, #14]
 8029938:	b004      	add	sp, #16
 802993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802993e:	bf00      	nop
 8029940:	08030980 	.word	0x08030980

08029944 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029946:	461e      	mov	r6, r3
 8029948:	1e4b      	subs	r3, r1, #1
 802994a:	b085      	sub	sp, #20
 802994c:	4604      	mov	r4, r0
 802994e:	2b01      	cmp	r3, #1
 8029950:	460d      	mov	r5, r1
 8029952:	4617      	mov	r7, r2
 8029954:	d84b      	bhi.n	80299ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029956:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802995a:	1cd3      	adds	r3, r2, #3
 802995c:	b29b      	uxth	r3, r3
 802995e:	2b06      	cmp	r3, #6
 8029960:	d916      	bls.n	8029990 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029962:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8029a04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029966:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802996a:	f8cd c004 	str.w	ip, [sp, #4]
 802996e:	f04f 0c00 	mov.w	ip, #0
 8029972:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029976:	6900      	ldr	r0, [r0, #16]
 8029978:	f8ad 100c 	strh.w	r1, [sp, #12]
 802997c:	a901      	add	r1, sp, #4
 802997e:	f88d c008 	strb.w	ip, [sp, #8]
 8029982:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029986:	f8ad 300e 	strh.w	r3, [sp, #14]
 802998a:	6803      	ldr	r3, [r0, #0]
 802998c:	689b      	ldr	r3, [r3, #8]
 802998e:	4798      	blx	r3
 8029990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029994:	1cd3      	adds	r3, r2, #3
 8029996:	b29b      	uxth	r3, r3
 8029998:	2b06      	cmp	r3, #6
 802999a:	d916      	bls.n	80299ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802999c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8029a04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80299a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80299a4:	f8cd c004 	str.w	ip, [sp, #4]
 80299a8:	f04f 0c01 	mov.w	ip, #1
 80299ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80299b0:	6920      	ldr	r0, [r4, #16]
 80299b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80299b6:	a901      	add	r1, sp, #4
 80299b8:	f88d c008 	strb.w	ip, [sp, #8]
 80299bc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80299c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80299c4:	6803      	ldr	r3, [r0, #0]
 80299c6:	689b      	ldr	r3, [r3, #8]
 80299c8:	4798      	blx	r3
 80299ca:	4b0d      	ldr	r3, [pc, #52]	@ (8029a00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80299cc:	a901      	add	r1, sp, #4
 80299ce:	6920      	ldr	r0, [r4, #16]
 80299d0:	9301      	str	r3, [sp, #4]
 80299d2:	2300      	movs	r3, #0
 80299d4:	f88d 5008 	strb.w	r5, [sp, #8]
 80299d8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80299dc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80299e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80299e4:	6803      	ldr	r3, [r0, #0]
 80299e6:	681b      	ldr	r3, [r3, #0]
 80299e8:	4798      	blx	r3
 80299ea:	b005      	add	sp, #20
 80299ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80299ee:	2900      	cmp	r1, #0
 80299f0:	d1eb      	bne.n	80299ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80299f2:	80a2      	strh	r2, [r4, #4]
 80299f4:	80c6      	strh	r6, [r0, #6]
 80299f6:	60a1      	str	r1, [r4, #8]
 80299f8:	81a1      	strh	r1, [r4, #12]
 80299fa:	73a1      	strb	r1, [r4, #14]
 80299fc:	e7e5      	b.n	80299ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80299fe:	bf00      	nop
 8029a00:	0803096c 	.word	0x0803096c
 8029a04:	08030994 	.word	0x08030994

08029a08 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8029a08:	10c9      	asrs	r1, r1, #3
 8029a0a:	2900      	cmp	r1, #0
 8029a0c:	bfb8      	it	lt
 8029a0e:	4249      	neglt	r1, r1
 8029a10:	2801      	cmp	r0, #1
 8029a12:	d108      	bne.n	8029a26 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8029a14:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029a18:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8029a1c:	4601      	mov	r1, r0
 8029a1e:	dd02      	ble.n	8029a26 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8029a20:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8029a24:	4770      	bx	lr
 8029a26:	29ff      	cmp	r1, #255	@ 0xff
 8029a28:	bfa8      	it	ge
 8029a2a:	21ff      	movge	r1, #255	@ 0xff
 8029a2c:	4608      	mov	r0, r1
 8029a2e:	4770      	bx	lr

08029a30 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029a30:	b410      	push	{r4}
 8029a32:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8029a36:	429c      	cmp	r4, r3
 8029a38:	d803      	bhi.n	8029a42 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8029a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029a3e:	f7f1 bd29 	b.w	801b494 <_ZN8touchgfx7Outline6lineToEii>
 8029a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029a46:	4770      	bx	lr

08029a48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8029a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a4c:	b08b      	sub	sp, #44	@ 0x2c
 8029a4e:	4606      	mov	r6, r0
 8029a50:	468a      	mov	sl, r1
 8029a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029a56:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8029a5a:	9308      	str	r3, [sp, #32]
 8029a5c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8029a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8029a62:	f7f1 fe82 	bl	801b76a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8029a66:	68b5      	ldr	r5, [r6, #8]
 8029a68:	4604      	mov	r4, r0
 8029a6a:	2d00      	cmp	r5, #0
 8029a6c:	d044      	beq.n	8029af8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029a6e:	6873      	ldr	r3, [r6, #4]
 8029a70:	42ab      	cmp	r3, r5
 8029a72:	d33d      	bcc.n	8029af0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8029a74:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8029a78:	f04f 0800 	mov.w	r8, #0
 8029a7c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8029a80:	eb02 0b03 	add.w	fp, r2, r3
 8029a84:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029a88:	fb02 1203 	mla	r2, r2, r3, r1
 8029a8c:	9205      	str	r2, [sp, #20]
 8029a8e:	1e6a      	subs	r2, r5, #1
 8029a90:	9204      	str	r2, [sp, #16]
 8029a92:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8029a96:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029a9a:	454b      	cmp	r3, r9
 8029a9c:	463a      	mov	r2, r7
 8029a9e:	d008      	beq.n	8029ab2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8029aa0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8029aa4:	eb03 0b09 	add.w	fp, r3, r9
 8029aa8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8029aac:	fb03 1309 	mla	r3, r3, r9, r1
 8029ab0:	9305      	str	r3, [sp, #20]
 8029ab2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8029ab6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8029aba:	4498      	add	r8, r3
 8029abc:	9b04      	ldr	r3, [sp, #16]
 8029abe:	3b01      	subs	r3, #1
 8029ac0:	9304      	str	r3, [sp, #16]
 8029ac2:	9b04      	ldr	r3, [sp, #16]
 8029ac4:	3301      	adds	r3, #1
 8029ac6:	d015      	beq.n	8029af4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8029ac8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8029acc:	42bb      	cmp	r3, r7
 8029ace:	d117      	bne.n	8029b00 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8029ad0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8029ad4:	9b04      	ldr	r3, [sp, #16]
 8029ad6:	4548      	cmp	r0, r9
 8029ad8:	f103 33ff 	add.w	r3, r3, #4294967295
 8029adc:	d17d      	bne.n	8029bda <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8029ade:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8029ae2:	4401      	add	r1, r0
 8029ae4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029ae8:	4480      	add	r8, r0
 8029aea:	e7e9      	b.n	8029ac0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8029aec:	461f      	mov	r7, r3
 8029aee:	e042      	b.n	8029b76 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8029af0:	2000      	movs	r0, #0
 8029af2:	e002      	b.n	8029afa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8029af4:	2900      	cmp	r1, #0
 8029af6:	d16d      	bne.n	8029bd4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029af8:	2001      	movs	r0, #1
 8029afa:	b00b      	add	sp, #44	@ 0x2c
 8029afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b00:	b379      	cbz	r1, 8029b62 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8029b02:	2f00      	cmp	r7, #0
 8029b04:	db29      	blt.n	8029b5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029b06:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029b0a:	42bb      	cmp	r3, r7
 8029b0c:	dd25      	ble.n	8029b5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029b0e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8029b12:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029b16:	f7ff ff77 	bl	8029a08 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8029b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b1c:	fb10 f003 	smulbb	r0, r0, r3
 8029b20:	b280      	uxth	r0, r0
 8029b22:	1c41      	adds	r1, r0, #1
 8029b24:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029b28:	1209      	asrs	r1, r1, #8
 8029b2a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029b2e:	d014      	beq.n	8029b5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029b30:	b2c9      	uxtb	r1, r1
 8029b32:	9808      	ldr	r0, [sp, #32]
 8029b34:	b2ba      	uxth	r2, r7
 8029b36:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029b38:	9102      	str	r1, [sp, #8]
 8029b3a:	2101      	movs	r1, #1
 8029b3c:	4413      	add	r3, r2
 8029b3e:	4402      	add	r2, r0
 8029b40:	9101      	str	r1, [sp, #4]
 8029b42:	fa0f f18b 	sxth.w	r1, fp
 8029b46:	f8da 0000 	ldr.w	r0, [sl]
 8029b4a:	b21b      	sxth	r3, r3
 8029b4c:	9100      	str	r1, [sp, #0]
 8029b4e:	b212      	sxth	r2, r2
 8029b50:	6941      	ldr	r1, [r0, #20]
 8029b52:	4650      	mov	r0, sl
 8029b54:	460d      	mov	r5, r1
 8029b56:	9905      	ldr	r1, [sp, #20]
 8029b58:	47a8      	blx	r5
 8029b5a:	9b04      	ldr	r3, [sp, #16]
 8029b5c:	1c7a      	adds	r2, r7, #1
 8029b5e:	3301      	adds	r3, #1
 8029b60:	d0ca      	beq.n	8029af8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029b62:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029b66:	1abb      	subs	r3, r7, r2
 8029b68:	2b00      	cmp	r3, #0
 8029b6a:	dd31      	ble.n	8029bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029b6c:	2a00      	cmp	r2, #0
 8029b6e:	dabd      	bge.n	8029aec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8029b70:	2f00      	cmp	r7, #0
 8029b72:	dd2d      	ble.n	8029bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029b74:	2200      	movs	r2, #0
 8029b76:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029b7a:	19d1      	adds	r1, r2, r7
 8029b7c:	4299      	cmp	r1, r3
 8029b7e:	db02      	blt.n	8029b86 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8029b80:	1a9f      	subs	r7, r3, r2
 8029b82:	2f00      	cmp	r7, #0
 8029b84:	dd24      	ble.n	8029bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029b86:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029b8a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029b8e:	f7ff ff3b 	bl	8029a08 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8029b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b94:	fb10 f003 	smulbb	r0, r0, r3
 8029b98:	b280      	uxth	r0, r0
 8029b9a:	1c41      	adds	r1, r0, #1
 8029b9c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029ba0:	1209      	asrs	r1, r1, #8
 8029ba2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029ba6:	d013      	beq.n	8029bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029ba8:	b292      	uxth	r2, r2
 8029baa:	9808      	ldr	r0, [sp, #32]
 8029bac:	b2c9      	uxtb	r1, r1
 8029bae:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029bb0:	b23f      	sxth	r7, r7
 8029bb2:	4413      	add	r3, r2
 8029bb4:	9102      	str	r1, [sp, #8]
 8029bb6:	4402      	add	r2, r0
 8029bb8:	fa0f f18b 	sxth.w	r1, fp
 8029bbc:	f8da 0000 	ldr.w	r0, [sl]
 8029bc0:	b21b      	sxth	r3, r3
 8029bc2:	9100      	str	r1, [sp, #0]
 8029bc4:	b212      	sxth	r2, r2
 8029bc6:	9701      	str	r7, [sp, #4]
 8029bc8:	9905      	ldr	r1, [sp, #20]
 8029bca:	6947      	ldr	r7, [r0, #20]
 8029bcc:	4650      	mov	r0, sl
 8029bce:	47b8      	blx	r7
 8029bd0:	464b      	mov	r3, r9
 8029bd2:	e75e      	b.n	8029a92 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8029bd4:	2f00      	cmp	r7, #0
 8029bd6:	da96      	bge.n	8029b06 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8029bd8:	e78e      	b.n	8029af8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029bda:	2900      	cmp	r1, #0
 8029bdc:	d0f8      	beq.n	8029bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029bde:	e790      	b.n	8029b02 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08029be0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8029be0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029be4:	461e      	mov	r6, r3
 8029be6:	4b36      	ldr	r3, [pc, #216]	@ (8029cc0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8029be8:	2500      	movs	r5, #0
 8029bea:	f100 0814 	add.w	r8, r0, #20
 8029bee:	4604      	mov	r4, r0
 8029bf0:	4617      	mov	r7, r2
 8029bf2:	e9c0 3100 	strd	r3, r1, [r0]
 8029bf6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8029bfa:	8185      	strh	r5, [r0, #12]
 8029bfc:	8103      	strh	r3, [r0, #8]
 8029bfe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8029c02:	81c5      	strh	r5, [r0, #14]
 8029c04:	7283      	strb	r3, [r0, #10]
 8029c06:	8205      	strh	r5, [r0, #16]
 8029c08:	8245      	strh	r5, [r0, #18]
 8029c0a:	4640      	mov	r0, r8
 8029c0c:	f7f0 ff88 	bl	801ab20 <_ZN8touchgfx7OutlineC1Ev>
 8029c10:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8029c14:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8029c18:	466b      	mov	r3, sp
 8029c1a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8029c1e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8029c22:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8029c26:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8029c2a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8029c2e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8029c32:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8029c36:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8029c3a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8029c3e:	6830      	ldr	r0, [r6, #0]
 8029c40:	6871      	ldr	r1, [r6, #4]
 8029c42:	8872      	ldrh	r2, [r6, #2]
 8029c44:	8835      	ldrh	r5, [r6, #0]
 8029c46:	c303      	stmia	r3!, {r0, r1}
 8029c48:	887b      	ldrh	r3, [r7, #2]
 8029c4a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8029c4e:	4413      	add	r3, r2
 8029c50:	883a      	ldrh	r2, [r7, #0]
 8029c52:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8029c56:	442a      	add	r2, r5
 8029c58:	81e3      	strh	r3, [r4, #14]
 8029c5a:	8220      	strh	r0, [r4, #16]
 8029c5c:	4668      	mov	r0, sp
 8029c5e:	81a2      	strh	r2, [r4, #12]
 8029c60:	8261      	strh	r1, [r4, #18]
 8029c62:	4639      	mov	r1, r7
 8029c64:	f7f2 fc8a 	bl	801c57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029c68:	f104 000c 	add.w	r0, r4, #12
 8029c6c:	f7f2 fc5e 	bl	801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029c70:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029c74:	f8bd 2000 	ldrh.w	r2, [sp]
 8029c78:	4640      	mov	r0, r8
 8029c7a:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8029c7e:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8029c82:	f7f0 ff31 	bl	801aae8 <_ZN8touchgfx7Outline5resetEv>
 8029c86:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029c8a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8029c8e:	4620      	mov	r0, r4
 8029c90:	015b      	lsls	r3, r3, #5
 8029c92:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8029c94:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029c98:	015b      	lsls	r3, r3, #5
 8029c9a:	6523      	str	r3, [r4, #80]	@ 0x50
 8029c9c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029ca0:	015b      	lsls	r3, r3, #5
 8029ca2:	6563      	str	r3, [r4, #84]	@ 0x54
 8029ca4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029ca8:	015b      	lsls	r3, r3, #5
 8029caa:	65a3      	str	r3, [r4, #88]	@ 0x58
 8029cac:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8029cb0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8029cb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8029cb8:	b002      	add	sp, #8
 8029cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029cbe:	bf00      	nop
 8029cc0:	08030c24 	.word	0x08030c24

08029cc4 <_ZN8touchgfx6Canvas5closeEv>:
 8029cc4:	b538      	push	{r3, r4, r5, lr}
 8029cc6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029cca:	4604      	mov	r4, r0
 8029ccc:	b193      	cbz	r3, 8029cf4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029cce:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8029cd2:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8029cd6:	4213      	tst	r3, r2
 8029cd8:	d10c      	bne.n	8029cf4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029cda:	f100 0514 	add.w	r5, r0, #20
 8029cde:	b123      	cbz	r3, 8029cea <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029ce0:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8029ce4:	4628      	mov	r0, r5
 8029ce6:	f7ff fea3 	bl	8029a30 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029cea:	4628      	mov	r0, r5
 8029cec:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8029cf0:	f7ff fe9e 	bl	8029a30 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029cf4:	2300      	movs	r3, #0
 8029cf6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029cfa:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8029cfe:	4298      	cmp	r0, r3
 8029d00:	bf34      	ite	cc
 8029d02:	2000      	movcc	r0, #0
 8029d04:	2001      	movcs	r0, #1
 8029d06:	bd38      	pop	{r3, r4, r5, pc}

08029d08 <_ZN8touchgfx6Canvas6renderEh>:
 8029d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029d0c:	7a85      	ldrb	r5, [r0, #10]
 8029d0e:	4604      	mov	r4, r0
 8029d10:	4369      	muls	r1, r5
 8029d12:	1c4d      	adds	r5, r1, #1
 8029d14:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029d18:	122d      	asrs	r5, r5, #8
 8029d1a:	f000 8098 	beq.w	8029e4e <_ZN8touchgfx6Canvas6renderEh+0x146>
 8029d1e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8029d22:	2b00      	cmp	r3, #0
 8029d24:	f000 8093 	beq.w	8029e4e <_ZN8touchgfx6Canvas6renderEh+0x146>
 8029d28:	f7ff ffcc 	bl	8029cc4 <_ZN8touchgfx6Canvas5closeEv>
 8029d2c:	4607      	mov	r7, r0
 8029d2e:	2800      	cmp	r0, #0
 8029d30:	d045      	beq.n	8029dbe <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8029d32:	6860      	ldr	r0, [r4, #4]
 8029d34:	4e47      	ldr	r6, [pc, #284]	@ (8029e54 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8029d36:	6803      	ldr	r3, [r0, #0]
 8029d38:	6837      	ldr	r7, [r6, #0]
 8029d3a:	689b      	ldr	r3, [r3, #8]
 8029d3c:	4798      	blx	r3
 8029d3e:	4601      	mov	r1, r0
 8029d40:	4638      	mov	r0, r7
 8029d42:	f7ef f90b 	bl	8018f5c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8029d46:	4607      	mov	r7, r0
 8029d48:	f7d9 fba8 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8029d4c:	6803      	ldr	r3, [r0, #0]
 8029d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029d50:	4798      	blx	r3
 8029d52:	4680      	mov	r8, r0
 8029d54:	f7d9 fba2 	bl	800349c <_ZN8touchgfx3HAL3lcdEv>
 8029d58:	6803      	ldr	r3, [r0, #0]
 8029d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029d5c:	4798      	blx	r3
 8029d5e:	280b      	cmp	r0, #11
 8029d60:	d85a      	bhi.n	8029e18 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8029d62:	e8df f000 	tbb	[pc, r0]
 8029d66:	5b50      	.short	0x5b50
 8029d68:	3059066b 	.word	0x3059066b
 8029d6c:	64646440 	.word	0x64646440
 8029d70:	6464      	.short	0x6464
 8029d72:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029d76:	2208      	movs	r2, #8
 8029d78:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029d7c:	fb91 f2f2 	sdiv	r2, r1, r2
 8029d80:	fb08 2303 	mla	r3, r8, r3, r2
 8029d84:	441f      	add	r7, r3
 8029d86:	424b      	negs	r3, r1
 8029d88:	f001 0107 	and.w	r1, r1, #7
 8029d8c:	f003 0307 	and.w	r3, r3, #7
 8029d90:	bf58      	it	pl
 8029d92:	4259      	negpl	r1, r3
 8029d94:	b2c9      	uxtb	r1, r1
 8029d96:	b2ed      	uxtb	r5, r5
 8029d98:	463a      	mov	r2, r7
 8029d9a:	fa0f f388 	sxth.w	r3, r8
 8029d9e:	f104 0014 	add.w	r0, r4, #20
 8029da2:	e9cd 1500 	strd	r1, r5, [sp]
 8029da6:	6861      	ldr	r1, [r4, #4]
 8029da8:	f7ff fe4e 	bl	8029a48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8029dac:	4607      	mov	r7, r0
 8029dae:	6860      	ldr	r0, [r4, #4]
 8029db0:	6803      	ldr	r3, [r0, #0]
 8029db2:	691b      	ldr	r3, [r3, #16]
 8029db4:	4798      	blx	r3
 8029db6:	6830      	ldr	r0, [r6, #0]
 8029db8:	6803      	ldr	r3, [r0, #0]
 8029dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029dbc:	4798      	blx	r3
 8029dbe:	4638      	mov	r0, r7
 8029dc0:	b002      	add	sp, #8
 8029dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029dc6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029dca:	2204      	movs	r2, #4
 8029dcc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029dd0:	fb91 f2f2 	sdiv	r2, r1, r2
 8029dd4:	fb08 2303 	mla	r3, r8, r3, r2
 8029dd8:	441f      	add	r7, r3
 8029dda:	424b      	negs	r3, r1
 8029ddc:	f001 0103 	and.w	r1, r1, #3
 8029de0:	f003 0303 	and.w	r3, r3, #3
 8029de4:	e7d4      	b.n	8029d90 <_ZN8touchgfx6Canvas6renderEh+0x88>
 8029de6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029dea:	2202      	movs	r2, #2
 8029dec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029df0:	2900      	cmp	r1, #0
 8029df2:	fb91 f2f2 	sdiv	r2, r1, r2
 8029df6:	f001 0101 	and.w	r1, r1, #1
 8029dfa:	fb08 2303 	mla	r3, r8, r3, r2
 8029dfe:	bfb8      	it	lt
 8029e00:	4249      	neglt	r1, r1
 8029e02:	441f      	add	r7, r3
 8029e04:	e7c6      	b.n	8029d94 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8029e06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e0e:	fb08 f303 	mul.w	r3, r8, r3
 8029e12:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029e16:	441f      	add	r7, r3
 8029e18:	2100      	movs	r1, #0
 8029e1a:	e7bc      	b.n	8029d96 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8029e1c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e20:	2103      	movs	r1, #3
 8029e22:	fb08 f203 	mul.w	r2, r8, r3
 8029e26:	89a3      	ldrh	r3, [r4, #12]
 8029e28:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029e2c:	e7f3      	b.n	8029e16 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029e2e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e36:	fb08 2303 	mla	r3, r8, r3, r2
 8029e3a:	e7ec      	b.n	8029e16 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029e3c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e44:	fb08 f303 	mul.w	r3, r8, r3
 8029e48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029e4c:	e7e3      	b.n	8029e16 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029e4e:	2701      	movs	r7, #1
 8029e50:	e7b5      	b.n	8029dbe <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8029e52:	bf00      	nop
 8029e54:	24015dd4 	.word	0x24015dd4

08029e58 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029e58:	4b06      	ldr	r3, [pc, #24]	@ (8029e74 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8029e5a:	b510      	push	{r4, lr}
 8029e5c:	781b      	ldrb	r3, [r3, #0]
 8029e5e:	2b01      	cmp	r3, #1
 8029e60:	d107      	bne.n	8029e72 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8029e62:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8029e66:	680b      	ldr	r3, [r1, #0]
 8029e68:	6814      	ldr	r4, [r2, #0]
 8029e6a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029e6e:	6013      	str	r3, [r2, #0]
 8029e70:	600c      	str	r4, [r1, #0]
 8029e72:	bd10      	pop	{r4, pc}
 8029e74:	24015dcc 	.word	0x24015dcc

08029e78 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029e78:	b513      	push	{r0, r1, r4, lr}
 8029e7a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029e7e:	4604      	mov	r4, r0
 8029e80:	e9cd 2100 	strd	r2, r1, [sp]
 8029e84:	b9a3      	cbnz	r3, 8029eb0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029e86:	466a      	mov	r2, sp
 8029e88:	a901      	add	r1, sp, #4
 8029e8a:	4620      	mov	r0, r4
 8029e8c:	f7ff ffe4 	bl	8029e58 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029e90:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8029e92:	9901      	ldr	r1, [sp, #4]
 8029e94:	9a00      	ldr	r2, [sp, #0]
 8029e96:	1ac9      	subs	r1, r1, r3
 8029e98:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029e9a:	1ad2      	subs	r2, r2, r3
 8029e9c:	9101      	str	r1, [sp, #4]
 8029e9e:	2a00      	cmp	r2, #0
 8029ea0:	9200      	str	r2, [sp, #0]
 8029ea2:	da0b      	bge.n	8029ebc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8029ea4:	2301      	movs	r3, #1
 8029ea6:	2900      	cmp	r1, #0
 8029ea8:	da0e      	bge.n	8029ec8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8029eaa:	f043 0304 	orr.w	r3, r3, #4
 8029eae:	e013      	b.n	8029ed8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8029eb0:	f7ff ff08 	bl	8029cc4 <_ZN8touchgfx6Canvas5closeEv>
 8029eb4:	2800      	cmp	r0, #0
 8029eb6:	d1e6      	bne.n	8029e86 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8029eb8:	b002      	add	sp, #8
 8029eba:	bd10      	pop	{r4, pc}
 8029ebc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029ebe:	429a      	cmp	r2, r3
 8029ec0:	bfac      	ite	ge
 8029ec2:	2302      	movge	r3, #2
 8029ec4:	2300      	movlt	r3, #0
 8029ec6:	e7ee      	b.n	8029ea6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8029ec8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8029eca:	4281      	cmp	r1, r0
 8029ecc:	bfac      	ite	ge
 8029ece:	2008      	movge	r0, #8
 8029ed0:	2000      	movlt	r0, #0
 8029ed2:	4318      	orrs	r0, r3
 8029ed4:	b2c3      	uxtb	r3, r0
 8029ed6:	b158      	cbz	r0, 8029ef0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8029ed8:	2200      	movs	r2, #0
 8029eda:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8029ede:	9901      	ldr	r1, [sp, #4]
 8029ee0:	9a00      	ldr	r2, [sp, #0]
 8029ee2:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8029ee4:	6722      	str	r2, [r4, #112]	@ 0x70
 8029ee6:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8029eea:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8029eee:	e7e3      	b.n	8029eb8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029ef0:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8029ef4:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029ef8:	4298      	cmp	r0, r3
 8029efa:	d803      	bhi.n	8029f04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8029efc:	f104 0014 	add.w	r0, r4, #20
 8029f00:	f7f1 fae2 	bl	801b4c8 <_ZN8touchgfx7Outline6moveToEii>
 8029f04:	2301      	movs	r3, #1
 8029f06:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029f0a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8029f0e:	2300      	movs	r3, #0
 8029f10:	e7e5      	b.n	8029ede <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08029f12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029f14:	ab02      	add	r3, sp, #8
 8029f16:	4604      	mov	r4, r0
 8029f18:	9101      	str	r1, [sp, #4]
 8029f1a:	a901      	add	r1, sp, #4
 8029f1c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8029f20:	461a      	mov	r2, r3
 8029f22:	f7ff ff99 	bl	8029e58 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029f26:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8029f28:	9901      	ldr	r1, [sp, #4]
 8029f2a:	9a00      	ldr	r2, [sp, #0]
 8029f2c:	1ac9      	subs	r1, r1, r3
 8029f2e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029f30:	1ad2      	subs	r2, r2, r3
 8029f32:	9101      	str	r1, [sp, #4]
 8029f34:	2a00      	cmp	r2, #0
 8029f36:	9200      	str	r2, [sp, #0]
 8029f38:	db1c      	blt.n	8029f74 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8029f3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029f3c:	429a      	cmp	r2, r3
 8029f3e:	bfac      	ite	ge
 8029f40:	2002      	movge	r0, #2
 8029f42:	2000      	movlt	r0, #0
 8029f44:	2900      	cmp	r1, #0
 8029f46:	db17      	blt.n	8029f78 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8029f48:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029f4a:	4299      	cmp	r1, r3
 8029f4c:	bfac      	ite	ge
 8029f4e:	2308      	movge	r3, #8
 8029f50:	2300      	movlt	r3, #0
 8029f52:	4303      	orrs	r3, r0
 8029f54:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8029f58:	b2dd      	uxtb	r5, r3
 8029f5a:	b978      	cbnz	r0, 8029f7c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029f5c:	f104 0014 	add.w	r0, r4, #20
 8029f60:	f7ff fd66 	bl	8029a30 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029f64:	9b01      	ldr	r3, [sp, #4]
 8029f66:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8029f6a:	6623      	str	r3, [r4, #96]	@ 0x60
 8029f6c:	9b00      	ldr	r3, [sp, #0]
 8029f6e:	6663      	str	r3, [r4, #100]	@ 0x64
 8029f70:	b002      	add	sp, #8
 8029f72:	bd70      	pop	{r4, r5, r6, pc}
 8029f74:	2001      	movs	r0, #1
 8029f76:	e7e5      	b.n	8029f44 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029f78:	2304      	movs	r3, #4
 8029f7a:	e7ea      	b.n	8029f52 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029f7c:	b113      	cbz	r3, 8029f84 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029f7e:	ea10 0305 	ands.w	r3, r0, r5
 8029f82:	d11c      	bne.n	8029fbe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8029f84:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8029f88:	f104 0614 	add.w	r6, r4, #20
 8029f8c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8029f90:	b98b      	cbnz	r3, 8029fb6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8029f92:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8029f96:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029f9a:	4298      	cmp	r0, r3
 8029f9c:	d802      	bhi.n	8029fa4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8029f9e:	4630      	mov	r0, r6
 8029fa0:	f7f1 fa92 	bl	801b4c8 <_ZN8touchgfx7Outline6moveToEii>
 8029fa4:	2301      	movs	r3, #1
 8029fa6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029faa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8029fae:	4630      	mov	r0, r6
 8029fb0:	e9dd 2100 	ldrd	r2, r1, [sp]
 8029fb4:	e7d4      	b.n	8029f60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8029fb6:	4630      	mov	r0, r6
 8029fb8:	f7ff fd3a 	bl	8029a30 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029fbc:	e7f7      	b.n	8029fae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8029fbe:	461d      	mov	r5, r3
 8029fc0:	e7d0      	b.n	8029f64 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08029fc4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8029fc4:	b538      	push	{r3, r4, r5, lr}
 8029fc6:	ed2d 8b10 	vpush	{d8-d15}
 8029fca:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8029fce:	4605      	mov	r5, r0
 8029fd0:	eeb0 ca40 	vmov.f32	s24, s0
 8029fd4:	460c      	mov	r4, r1
 8029fd6:	eef0 ca60 	vmov.f32	s25, s1
 8029fda:	ed9f ba57 	vldr	s22, [pc, #348]	@ 802a138 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8029fde:	eeb0 da41 	vmov.f32	s26, s2
 8029fe2:	eef0 da61 	vmov.f32	s27, s3
 8029fe6:	eeb0 ea42 	vmov.f32	s28, s4
 8029fea:	eef0 ea62 	vmov.f32	s29, s5
 8029fee:	eef0 aa6b 	vmov.f32	s21, s23
 8029ff2:	2c08      	cmp	r4, #8
 8029ff4:	d86e      	bhi.n	802a0d4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8029ff6:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8029ffa:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8029ffe:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802a002:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802a006:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802a00a:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802a00e:	ee7c faad 	vadd.f32	s31, s25, s27
 802a012:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a016:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802a01a:	ee3d aaae 	vadd.f32	s20, s27, s29
 802a01e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802a022:	ee6f faab 	vmul.f32	s31, s31, s23
 802a026:	ee69 9aab 	vmul.f32	s19, s19, s23
 802a02a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802a02e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802a032:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802a036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a03a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802a03e:	ee68 8aab 	vmul.f32	s17, s17, s23
 802a042:	bf48      	it	mi
 802a044:	eef1 7a67 	vnegmi.f32	s15, s15
 802a048:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802a04c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802a050:	eef4 7acb 	vcmpe.f32	s15, s22
 802a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a058:	dd3f      	ble.n	802a0da <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802a05a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a05e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a062:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802a066:	ee27 7a06 	vmul.f32	s14, s14, s12
 802a06a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802a06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a072:	d847      	bhi.n	802a104 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802a074:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802a078:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802a07c:	f000 fa57 	bl	802a52e <atan2f>
 802a080:	eeb0 8a40 	vmov.f32	s16, s0
 802a084:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802a088:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802a08c:	f000 fa4f 	bl	802a52e <atan2f>
 802a090:	ee38 0a40 	vsub.f32	s0, s16, s0
 802a094:	eddf 7a29 	vldr	s15, [pc, #164]	@ 802a13c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802a098:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0a0:	bf48      	it	mi
 802a0a2:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a0a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0ae:	bfa4      	itt	ge
 802a0b0:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802a140 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802a0b4:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802a0b8:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802a144 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802a0bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0c4:	d51e      	bpl.n	802a104 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802a0c6:	eef0 0a49 	vmov.f32	s1, s18
 802a0ca:	4628      	mov	r0, r5
 802a0cc:	eeb0 0a68 	vmov.f32	s0, s17
 802a0d0:	f7ef fdd6 	bl	8019c80 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a0d4:	ecbd 8b10 	vpop	{d8-d15}
 802a0d8:	bd38      	pop	{r3, r4, r5, pc}
 802a0da:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802a0de:	eeb0 7a68 	vmov.f32	s14, s17
 802a0e2:	eef0 6a49 	vmov.f32	s13, s18
 802a0e6:	eea7 7aea 	vfms.f32	s14, s15, s21
 802a0ea:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802a0ee:	eee7 6aea 	vfms.f32	s13, s15, s21
 802a0f2:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802a0f6:	eee7 7a07 	vfma.f32	s15, s14, s14
 802a0fa:	eef4 7ac6 	vcmpe.f32	s15, s12
 802a0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a102:	d9e0      	bls.n	802a0c6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802a104:	3401      	adds	r4, #1
 802a106:	eef0 0a6c 	vmov.f32	s1, s25
 802a10a:	eeb0 0a4c 	vmov.f32	s0, s24
 802a10e:	4628      	mov	r0, r5
 802a110:	4621      	mov	r1, r4
 802a112:	eef0 2a49 	vmov.f32	s5, s18
 802a116:	eeb0 2a68 	vmov.f32	s4, s17
 802a11a:	eef0 1a6f 	vmov.f32	s3, s31
 802a11e:	eeb0 1a4f 	vmov.f32	s2, s30
 802a122:	f7ff ff4f 	bl	8029fc4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802a126:	eef0 da4a 	vmov.f32	s27, s20
 802a12a:	eeb0 da69 	vmov.f32	s26, s19
 802a12e:	eef0 ca49 	vmov.f32	s25, s18
 802a132:	eeb0 ca68 	vmov.f32	s24, s17
 802a136:	e75c      	b.n	8029ff2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802a138:	2edbe6ff 	.word	0x2edbe6ff
 802a13c:	40490fdb 	.word	0x40490fdb
 802a140:	40c90fdb 	.word	0x40c90fdb
 802a144:	3dcccccd 	.word	0x3dcccccd

0802a148 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802a148:	b530      	push	{r4, r5, lr}
 802a14a:	ed2d 8b10 	vpush	{d8-d15}
 802a14e:	eef0 8a40 	vmov.f32	s17, s0
 802a152:	b085      	sub	sp, #20
 802a154:	eef0 9a60 	vmov.f32	s19, s1
 802a158:	4604      	mov	r4, r0
 802a15a:	eef0 fa41 	vmov.f32	s31, s2
 802a15e:	460d      	mov	r5, r1
 802a160:	eeb0 fa61 	vmov.f32	s30, s3
 802a164:	eef0 ba42 	vmov.f32	s23, s4
 802a168:	eeb0 ca62 	vmov.f32	s24, s5
 802a16c:	eef0 aa43 	vmov.f32	s21, s6
 802a170:	eeb0 ba63 	vmov.f32	s22, s7
 802a174:	2d08      	cmp	r5, #8
 802a176:	f200 8113 	bhi.w	802a3a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802a17a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802a17e:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802a182:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802a186:	ee38 daaf 	vadd.f32	s26, s17, s31
 802a18a:	ee26 6a27 	vmul.f32	s12, s12, s15
 802a18e:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802a192:	ee2d da27 	vmul.f32	s26, s26, s15
 802a196:	ed8d 6a01 	vstr	s12, [sp, #4]
 802a19a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802a19e:	ee6c caa7 	vmul.f32	s25, s25, s15
 802a1a2:	eeb0 ea4d 	vmov.f32	s28, s26
 802a1a6:	ee79 da8f 	vadd.f32	s27, s19, s30
 802a1aa:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802a1ae:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802a1b2:	ee66 6a27 	vmul.f32	s13, s12, s15
 802a1b6:	ee6d daa7 	vmul.f32	s27, s27, s15
 802a1ba:	edcd 6a03 	vstr	s13, [sp, #12]
 802a1be:	eef0 6a6c 	vmov.f32	s13, s25
 802a1c2:	eef0 ea6d 	vmov.f32	s29, s27
 802a1c6:	ee2e ea27 	vmul.f32	s28, s28, s15
 802a1ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a1ce:	eee7 ea27 	vfma.f32	s29, s14, s15
 802a1d2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802a1d6:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802a1da:	eef0 6a67 	vmov.f32	s13, s15
 802a1de:	ed8d 7a02 	vstr	s14, [sp, #8]
 802a1e2:	ed9d 7a03 	vldr	s14, [sp, #12]
 802a1e6:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802a1ea:	ed9d 7a02 	vldr	s14, [sp, #8]
 802a1ee:	ee3e aa87 	vadd.f32	s20, s29, s14
 802a1f2:	ee29 9a27 	vmul.f32	s18, s18, s15
 802a1f6:	ee2a aa27 	vmul.f32	s20, s20, s15
 802a1fa:	2d00      	cmp	r5, #0
 802a1fc:	f000 810b 	beq.w	802a416 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a200:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802a204:	eddf 4a95 	vldr	s9, [pc, #596]	@ 802a45c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802a208:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802a20c:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802a210:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802a214:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802a218:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802a21c:	eea6 7a27 	vfma.f32	s14, s12, s15
 802a220:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802a224:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802a228:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802a22c:	eea5 6a27 	vfma.f32	s12, s10, s15
 802a230:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a238:	bf48      	it	mi
 802a23a:	eeb1 7a47 	vnegmi.f32	s14, s14
 802a23e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802a242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a246:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802a24a:	bf48      	it	mi
 802a24c:	eeb1 6a46 	vnegmi.f32	s12, s12
 802a250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a254:	f340 80a8 	ble.w	802a3a8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802a258:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802a25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a260:	dd5a      	ble.n	802a318 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802a262:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802a266:	ee37 7a06 	vadd.f32	s14, s14, s12
 802a26a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802a26e:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a272:	ee65 7a85 	vmul.f32	s15, s11, s10
 802a276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a27e:	f200 80ca 	bhi.w	802a416 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a282:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a286:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a28a:	f000 f950 	bl	802a52e <atan2f>
 802a28e:	eeb0 8a40 	vmov.f32	s16, s0
 802a292:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802a296:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802a29a:	f000 f948 	bl	802a52e <atan2f>
 802a29e:	ee38 fa40 	vsub.f32	s30, s16, s0
 802a2a2:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802a2a6:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802a2aa:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802a2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2b2:	bf48      	it	mi
 802a2b4:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802a2b8:	f000 f939 	bl	802a52e <atan2f>
 802a2bc:	ee30 0a48 	vsub.f32	s0, s0, s16
 802a2c0:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802a460 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802a2c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2cc:	eeb4 fae7 	vcmpe.f32	s30, s15
 802a2d0:	eddf 7a63 	vldr	s15, [pc, #396]	@ 802a460 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802a2d4:	bf48      	it	mi
 802a2d6:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a2e2:	eddf 7a60 	vldr	s15, [pc, #384]	@ 802a464 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802a2e6:	bfa4      	itt	ge
 802a2e8:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802a468 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802a2ec:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2f4:	bfa4      	itt	ge
 802a2f6:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802a468 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802a2fa:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802a2fe:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802a302:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a30a:	f140 8084 	bpl.w	802a416 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a30e:	eef0 0a4a 	vmov.f32	s1, s20
 802a312:	eeb0 0a49 	vmov.f32	s0, s18
 802a316:	e040      	b.n	802a39a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802a318:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a31c:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a320:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802a324:	ee67 7a85 	vmul.f32	s15, s15, s10
 802a328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a330:	d871      	bhi.n	802a416 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a332:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a336:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a33a:	f000 f8f8 	bl	802a52e <atan2f>
 802a33e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802a342:	eeb0 8a40 	vmov.f32	s16, s0
 802a346:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802a34a:	f000 f8f0 	bl	802a52e <atan2f>
 802a34e:	ee38 0a40 	vsub.f32	s0, s16, s0
 802a352:	eddf 7a43 	vldr	s15, [pc, #268]	@ 802a460 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802a356:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a35e:	bf48      	it	mi
 802a360:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a364:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a36c:	bfa4      	itt	ge
 802a36e:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 802a468 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802a372:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802a376:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802a464 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802a37a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a382:	d548      	bpl.n	802a416 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a384:	eef0 0a4f 	vmov.f32	s1, s30
 802a388:	4620      	mov	r0, r4
 802a38a:	eeb0 0a6f 	vmov.f32	s0, s31
 802a38e:	f7ef fc77 	bl	8019c80 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a392:	eef0 0a4c 	vmov.f32	s1, s24
 802a396:	eeb0 0a6b 	vmov.f32	s0, s23
 802a39a:	4620      	mov	r0, r4
 802a39c:	f7ef fc70 	bl	8019c80 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a3a0:	b005      	add	sp, #20
 802a3a2:	ecbd 8b10 	vpop	{d8-d15}
 802a3a6:	bd30      	pop	{r4, r5, pc}
 802a3a8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802a45c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802a3ac:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802a3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a3b4:	dd19      	ble.n	802a3ea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802a3b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a3ba:	ee26 7a06 	vmul.f32	s14, s12, s12
 802a3be:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802a3c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 802a3c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a3ce:	d822      	bhi.n	802a416 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a3d0:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802a3d4:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802a3d8:	f000 f8a9 	bl	802a52e <atan2f>
 802a3dc:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a3e0:	eeb0 8a40 	vmov.f32	s16, s0
 802a3e4:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a3e8:	e7af      	b.n	802a34a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802a3ea:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802a3ee:	eeb0 7a49 	vmov.f32	s14, s18
 802a3f2:	eeb0 6a4a 	vmov.f32	s12, s20
 802a3f6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802a3fa:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802a3fe:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802a402:	ee66 7a06 	vmul.f32	s15, s12, s12
 802a406:	eee7 7a07 	vfma.f32	s15, s14, s14
 802a40a:	eef4 7ac5 	vcmpe.f32	s15, s10
 802a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a412:	f67f af7c 	bls.w	802a30e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802a416:	3501      	adds	r5, #1
 802a418:	eef0 0a69 	vmov.f32	s1, s19
 802a41c:	eeb0 0a68 	vmov.f32	s0, s17
 802a420:	4620      	mov	r0, r4
 802a422:	4629      	mov	r1, r5
 802a424:	eef0 3a4a 	vmov.f32	s7, s20
 802a428:	eeb0 3a49 	vmov.f32	s6, s18
 802a42c:	eef0 2a6e 	vmov.f32	s5, s29
 802a430:	eeb0 2a4e 	vmov.f32	s4, s28
 802a434:	eef0 1a6d 	vmov.f32	s3, s27
 802a438:	eeb0 1a4d 	vmov.f32	s2, s26
 802a43c:	f7ff fe84 	bl	802a148 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802a440:	eeb0 ca6c 	vmov.f32	s24, s25
 802a444:	eddd ba01 	vldr	s23, [sp, #4]
 802a448:	eef0 9a4a 	vmov.f32	s19, s20
 802a44c:	ed9d fa02 	vldr	s30, [sp, #8]
 802a450:	eef0 8a49 	vmov.f32	s17, s18
 802a454:	eddd fa03 	vldr	s31, [sp, #12]
 802a458:	e68c      	b.n	802a174 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802a45a:	bf00      	nop
 802a45c:	2edbe6ff 	.word	0x2edbe6ff
 802a460:	40490fdb 	.word	0x40490fdb
 802a464:	3dcccccd 	.word	0x3dcccccd
 802a468:	40c90fdb 	.word	0x40c90fdb

0802a46c <_ZN8touchgfx6CanvasD1Ev>:
 802a46c:	4b04      	ldr	r3, [pc, #16]	@ (802a480 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802a46e:	b510      	push	{r4, lr}
 802a470:	4604      	mov	r4, r0
 802a472:	f840 3b14 	str.w	r3, [r0], #20
 802a476:	f7f0 fb2f 	bl	801aad8 <_ZN8touchgfx7OutlineD1Ev>
 802a47a:	4620      	mov	r0, r4
 802a47c:	bd10      	pop	{r4, pc}
 802a47e:	bf00      	nop
 802a480:	08030c24 	.word	0x08030c24

0802a484 <_ZN8touchgfx6CanvasD0Ev>:
 802a484:	b510      	push	{r4, lr}
 802a486:	4604      	mov	r4, r0
 802a488:	f7ff fff0 	bl	802a46c <_ZN8touchgfx6CanvasD1Ev>
 802a48c:	2174      	movs	r1, #116	@ 0x74
 802a48e:	4620      	mov	r0, r4
 802a490:	f000 f826 	bl	802a4e0 <_ZdlPvj>
 802a494:	4620      	mov	r0, r4
 802a496:	bd10      	pop	{r4, pc}

0802a498 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 802a498:	790b      	ldrb	r3, [r1, #4]
 802a49a:	2b00      	cmp	r3, #0
 802a49c:	bf0c      	ite	eq
 802a49e:	2301      	moveq	r3, #1
 802a4a0:	2300      	movne	r3, #0
 802a4a2:	b570      	push	{r4, r5, r6, lr}
 802a4a4:	4604      	mov	r4, r0
 802a4a6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 802a4aa:	460e      	mov	r6, r1
 802a4ac:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 802a4b0:	d109      	bne.n	802a4c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802a4b2:	b14d      	cbz	r5, 802a4c8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802a4b4:	7933      	ldrb	r3, [r6, #4]
 802a4b6:	2b01      	cmp	r3, #1
 802a4b8:	d10c      	bne.n	802a4d4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a4ba:	6823      	ldr	r3, [r4, #0]
 802a4bc:	4620      	mov	r0, r4
 802a4be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802a4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a4c4:	4718      	bx	r3
 802a4c6:	b12d      	cbz	r5, 802a4d4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a4c8:	6823      	ldr	r3, [r4, #0]
 802a4ca:	4620      	mov	r0, r4
 802a4cc:	695b      	ldr	r3, [r3, #20]
 802a4ce:	4798      	blx	r3
 802a4d0:	2d00      	cmp	r5, #0
 802a4d2:	d1ef      	bne.n	802a4b4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802a4d4:	bd70      	pop	{r4, r5, r6, pc}

0802a4d6 <__aeabi_atexit>:
 802a4d6:	460b      	mov	r3, r1
 802a4d8:	4601      	mov	r1, r0
 802a4da:	4618      	mov	r0, r3
 802a4dc:	f000 bc5a 	b.w	802ad94 <__cxa_atexit>

0802a4e0 <_ZdlPvj>:
 802a4e0:	f000 b812 	b.w	802a508 <_ZdlPv>

0802a4e4 <__cxa_guard_acquire>:
 802a4e4:	6802      	ldr	r2, [r0, #0]
 802a4e6:	07d2      	lsls	r2, r2, #31
 802a4e8:	4603      	mov	r3, r0
 802a4ea:	d405      	bmi.n	802a4f8 <__cxa_guard_acquire+0x14>
 802a4ec:	7842      	ldrb	r2, [r0, #1]
 802a4ee:	b102      	cbz	r2, 802a4f2 <__cxa_guard_acquire+0xe>
 802a4f0:	deff      	udf	#255	@ 0xff
 802a4f2:	2001      	movs	r0, #1
 802a4f4:	7058      	strb	r0, [r3, #1]
 802a4f6:	4770      	bx	lr
 802a4f8:	2000      	movs	r0, #0
 802a4fa:	4770      	bx	lr

0802a4fc <__cxa_guard_release>:
 802a4fc:	2301      	movs	r3, #1
 802a4fe:	6003      	str	r3, [r0, #0]
 802a500:	4770      	bx	lr

0802a502 <__cxa_pure_virtual>:
 802a502:	b508      	push	{r3, lr}
 802a504:	f000 f80e 	bl	802a524 <_ZSt9terminatev>

0802a508 <_ZdlPv>:
 802a508:	f000 bb8e 	b.w	802ac28 <free>

0802a50c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a50c:	b508      	push	{r3, lr}
 802a50e:	4780      	blx	r0
 802a510:	f000 fb57 	bl	802abc2 <abort>

0802a514 <_ZSt13get_terminatev>:
 802a514:	4b02      	ldr	r3, [pc, #8]	@ (802a520 <_ZSt13get_terminatev+0xc>)
 802a516:	6818      	ldr	r0, [r3, #0]
 802a518:	f3bf 8f5b 	dmb	ish
 802a51c:	4770      	bx	lr
 802a51e:	bf00      	nop
 802a520:	240000ac 	.word	0x240000ac

0802a524 <_ZSt9terminatev>:
 802a524:	b508      	push	{r3, lr}
 802a526:	f7ff fff5 	bl	802a514 <_ZSt13get_terminatev>
 802a52a:	f7ff ffef 	bl	802a50c <_ZN10__cxxabiv111__terminateEPFvvE>

0802a52e <atan2f>:
 802a52e:	f000 b9cf 	b.w	802a8d0 <__ieee754_atan2f>
	...

0802a534 <sqrtf>:
 802a534:	b508      	push	{r3, lr}
 802a536:	ed2d 8b02 	vpush	{d8}
 802a53a:	eeb0 8a40 	vmov.f32	s16, s0
 802a53e:	f000 f9c4 	bl	802a8ca <__ieee754_sqrtf>
 802a542:	eeb4 8a48 	vcmp.f32	s16, s16
 802a546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a54a:	d60c      	bvs.n	802a566 <sqrtf+0x32>
 802a54c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802a56c <sqrtf+0x38>
 802a550:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802a554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a558:	d505      	bpl.n	802a566 <sqrtf+0x32>
 802a55a:	f000 fea9 	bl	802b2b0 <__errno>
 802a55e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802a562:	2321      	movs	r3, #33	@ 0x21
 802a564:	6003      	str	r3, [r0, #0]
 802a566:	ecbd 8b02 	vpop	{d8}
 802a56a:	bd08      	pop	{r3, pc}
 802a56c:	00000000 	.word	0x00000000

0802a570 <sinf_poly>:
 802a570:	07cb      	lsls	r3, r1, #31
 802a572:	d412      	bmi.n	802a59a <sinf_poly+0x2a>
 802a574:	ee21 5b00 	vmul.f64	d5, d1, d0
 802a578:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802a57c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 802a580:	eea6 7b01 	vfma.f64	d7, d6, d1
 802a584:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 802a588:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a58c:	eea6 0b05 	vfma.f64	d0, d6, d5
 802a590:	eea7 0b01 	vfma.f64	d0, d7, d1
 802a594:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802a598:	4770      	bx	lr
 802a59a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802a59e:	ee21 5b01 	vmul.f64	d5, d1, d1
 802a5a2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802a5a6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802a5aa:	eea1 7b06 	vfma.f64	d7, d1, d6
 802a5ae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802a5b2:	eea1 0b06 	vfma.f64	d0, d1, d6
 802a5b6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802a5ba:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a5be:	eea5 0b06 	vfma.f64	d0, d5, d6
 802a5c2:	e7e5      	b.n	802a590 <sinf_poly+0x20>
 802a5c4:	0000      	movs	r0, r0
	...

0802a5c8 <sinf>:
 802a5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a5ca:	ee10 4a10 	vmov	r4, s0
 802a5ce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802a5d2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802a5d6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802a5da:	eef0 7a40 	vmov.f32	s15, s0
 802a5de:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802a5e2:	d218      	bcs.n	802a616 <sinf+0x4e>
 802a5e4:	ee26 1b06 	vmul.f64	d1, d6, d6
 802a5e8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802a5ec:	d20a      	bcs.n	802a604 <sinf+0x3c>
 802a5ee:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 802a5f2:	d103      	bne.n	802a5fc <sinf+0x34>
 802a5f4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802a5f8:	ed8d 1a01 	vstr	s2, [sp, #4]
 802a5fc:	eeb0 0a67 	vmov.f32	s0, s15
 802a600:	b003      	add	sp, #12
 802a602:	bd30      	pop	{r4, r5, pc}
 802a604:	483a      	ldr	r0, [pc, #232]	@ (802a6f0 <sinf+0x128>)
 802a606:	eeb0 0b46 	vmov.f64	d0, d6
 802a60a:	2100      	movs	r1, #0
 802a60c:	b003      	add	sp, #12
 802a60e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a612:	f7ff bfad 	b.w	802a570 <sinf_poly>
 802a616:	f240 422e 	movw	r2, #1070	@ 0x42e
 802a61a:	4293      	cmp	r3, r2
 802a61c:	d824      	bhi.n	802a668 <sinf+0xa0>
 802a61e:	4b34      	ldr	r3, [pc, #208]	@ (802a6f0 <sinf+0x128>)
 802a620:	ed93 7b08 	vldr	d7, [r3, #32]
 802a624:	ee26 7b07 	vmul.f64	d7, d6, d7
 802a628:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802a62c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802a630:	ee17 1a90 	vmov	r1, s15
 802a634:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802a638:	1609      	asrs	r1, r1, #24
 802a63a:	ee07 1a90 	vmov	s15, r1
 802a63e:	f001 0203 	and.w	r2, r1, #3
 802a642:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a646:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802a64a:	ed92 0b00 	vldr	d0, [r2]
 802a64e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802a652:	f011 0f02 	tst.w	r1, #2
 802a656:	eea5 6b47 	vfms.f64	d6, d5, d7
 802a65a:	bf08      	it	eq
 802a65c:	4618      	moveq	r0, r3
 802a65e:	ee26 1b06 	vmul.f64	d1, d6, d6
 802a662:	ee20 0b06 	vmul.f64	d0, d0, d6
 802a666:	e7d1      	b.n	802a60c <sinf+0x44>
 802a668:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802a66c:	d237      	bcs.n	802a6de <sinf+0x116>
 802a66e:	4921      	ldr	r1, [pc, #132]	@ (802a6f4 <sinf+0x12c>)
 802a670:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802a674:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802a678:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802a67c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802a680:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802a684:	6a10      	ldr	r0, [r2, #32]
 802a686:	6912      	ldr	r2, [r2, #16]
 802a688:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802a68c:	40ab      	lsls	r3, r5
 802a68e:	fba0 5003 	umull	r5, r0, r0, r3
 802a692:	4359      	muls	r1, r3
 802a694:	fbe3 0102 	umlal	r0, r1, r3, r2
 802a698:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802a69c:	0f9d      	lsrs	r5, r3, #30
 802a69e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802a6a2:	1ac9      	subs	r1, r1, r3
 802a6a4:	f7d6 f812 	bl	80006cc <__aeabi_l2d>
 802a6a8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802a6ac:	4b10      	ldr	r3, [pc, #64]	@ (802a6f0 <sinf+0x128>)
 802a6ae:	f004 0203 	and.w	r2, r4, #3
 802a6b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a6b6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 802a6e8 <sinf+0x120>
 802a6ba:	ed92 0b00 	vldr	d0, [r2]
 802a6be:	ec41 0b17 	vmov	d7, r0, r1
 802a6c2:	f014 0f02 	tst.w	r4, #2
 802a6c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 802a6ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802a6ce:	4629      	mov	r1, r5
 802a6d0:	bf08      	it	eq
 802a6d2:	4618      	moveq	r0, r3
 802a6d4:	ee27 1b07 	vmul.f64	d1, d7, d7
 802a6d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 802a6dc:	e796      	b.n	802a60c <sinf+0x44>
 802a6de:	b003      	add	sp, #12
 802a6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a6e4:	f000 b8e2 	b.w	802a8ac <__math_invalidf>
 802a6e8:	54442d18 	.word	0x54442d18
 802a6ec:	3c1921fb 	.word	0x3c1921fb
 802a6f0:	08030c90 	.word	0x08030c90
 802a6f4:	08030c30 	.word	0x08030c30

0802a6f8 <sinf_poly>:
 802a6f8:	07cb      	lsls	r3, r1, #31
 802a6fa:	d412      	bmi.n	802a722 <sinf_poly+0x2a>
 802a6fc:	ee21 5b00 	vmul.f64	d5, d1, d0
 802a700:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802a704:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 802a708:	eea6 7b01 	vfma.f64	d7, d6, d1
 802a70c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 802a710:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a714:	eea6 0b05 	vfma.f64	d0, d6, d5
 802a718:	eea7 0b01 	vfma.f64	d0, d7, d1
 802a71c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802a720:	4770      	bx	lr
 802a722:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802a726:	ee21 5b01 	vmul.f64	d5, d1, d1
 802a72a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802a72e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802a732:	eea1 7b06 	vfma.f64	d7, d1, d6
 802a736:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802a73a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802a73e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802a742:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a746:	eea5 0b06 	vfma.f64	d0, d5, d6
 802a74a:	e7e5      	b.n	802a718 <sinf_poly+0x20>
 802a74c:	0000      	movs	r0, r0
	...

0802a750 <cosf>:
 802a750:	b538      	push	{r3, r4, r5, lr}
 802a752:	ee10 4a10 	vmov	r4, s0
 802a756:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802a75a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802a75e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802a762:	d21f      	bcs.n	802a7a4 <cosf+0x54>
 802a764:	ee27 7b07 	vmul.f64	d7, d7, d7
 802a768:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802a76c:	f0c0 8082 	bcc.w	802a874 <cosf+0x124>
 802a770:	ee27 4b07 	vmul.f64	d4, d7, d7
 802a774:	4b44      	ldr	r3, [pc, #272]	@ (802a888 <cosf+0x138>)
 802a776:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802a77a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802a77e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802a782:	eea7 6b05 	vfma.f64	d6, d7, d5
 802a786:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802a78a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802a78e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802a792:	ee27 7b04 	vmul.f64	d7, d7, d4
 802a796:	eea4 0b05 	vfma.f64	d0, d4, d5
 802a79a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802a79e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802a7a2:	bd38      	pop	{r3, r4, r5, pc}
 802a7a4:	f240 422e 	movw	r2, #1070	@ 0x42e
 802a7a8:	4293      	cmp	r3, r2
 802a7aa:	d829      	bhi.n	802a800 <cosf+0xb0>
 802a7ac:	4b36      	ldr	r3, [pc, #216]	@ (802a888 <cosf+0x138>)
 802a7ae:	ed93 6b08 	vldr	d6, [r3, #32]
 802a7b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 802a7b6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802a7ba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802a7be:	ee16 1a90 	vmov	r1, s13
 802a7c2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802a7c6:	1609      	asrs	r1, r1, #24
 802a7c8:	ee06 1a90 	vmov	s13, r1
 802a7cc:	f001 0203 	and.w	r2, r1, #3
 802a7d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a7d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802a7d8:	ed92 0b00 	vldr	d0, [r2]
 802a7dc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 802a7e0:	f011 0f02 	tst.w	r1, #2
 802a7e4:	f081 0101 	eor.w	r1, r1, #1
 802a7e8:	eea5 7b46 	vfms.f64	d7, d5, d6
 802a7ec:	bf08      	it	eq
 802a7ee:	4618      	moveq	r0, r3
 802a7f0:	ee27 1b07 	vmul.f64	d1, d7, d7
 802a7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a7f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 802a7fc:	f7ff bf7c 	b.w	802a6f8 <sinf_poly>
 802a800:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802a804:	d232      	bcs.n	802a86c <cosf+0x11c>
 802a806:	4921      	ldr	r1, [pc, #132]	@ (802a88c <cosf+0x13c>)
 802a808:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802a80c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802a810:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802a814:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802a818:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802a81c:	6a10      	ldr	r0, [r2, #32]
 802a81e:	6912      	ldr	r2, [r2, #16]
 802a820:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802a824:	40ab      	lsls	r3, r5
 802a826:	fba0 5003 	umull	r5, r0, r0, r3
 802a82a:	4359      	muls	r1, r3
 802a82c:	fbe3 0102 	umlal	r0, r1, r3, r2
 802a830:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802a834:	0f9d      	lsrs	r5, r3, #30
 802a836:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802a83a:	1ac9      	subs	r1, r1, r3
 802a83c:	f7d5 ff46 	bl	80006cc <__aeabi_l2d>
 802a840:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802a844:	4b10      	ldr	r3, [pc, #64]	@ (802a888 <cosf+0x138>)
 802a846:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 802a880 <cosf+0x130>
 802a84a:	ec41 0b17 	vmov	d7, r0, r1
 802a84e:	f004 0203 	and.w	r2, r4, #3
 802a852:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a856:	ed92 0b00 	vldr	d0, [r2]
 802a85a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802a85e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802a862:	f014 0f02 	tst.w	r4, #2
 802a866:	f085 0101 	eor.w	r1, r5, #1
 802a86a:	e7bf      	b.n	802a7ec <cosf+0x9c>
 802a86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a870:	f000 b81c 	b.w	802a8ac <__math_invalidf>
 802a874:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802a878:	e793      	b.n	802a7a2 <cosf+0x52>
 802a87a:	bf00      	nop
 802a87c:	f3af 8000 	nop.w
 802a880:	54442d18 	.word	0x54442d18
 802a884:	3c1921fb 	.word	0x3c1921fb
 802a888:	08030c90 	.word	0x08030c90
 802a88c:	08030c30 	.word	0x08030c30

0802a890 <with_errnof>:
 802a890:	b510      	push	{r4, lr}
 802a892:	ed2d 8b02 	vpush	{d8}
 802a896:	eeb0 8a40 	vmov.f32	s16, s0
 802a89a:	4604      	mov	r4, r0
 802a89c:	f000 fd08 	bl	802b2b0 <__errno>
 802a8a0:	eeb0 0a48 	vmov.f32	s0, s16
 802a8a4:	ecbd 8b02 	vpop	{d8}
 802a8a8:	6004      	str	r4, [r0, #0]
 802a8aa:	bd10      	pop	{r4, pc}

0802a8ac <__math_invalidf>:
 802a8ac:	eef0 7a40 	vmov.f32	s15, s0
 802a8b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 802a8b4:	eef4 7a67 	vcmp.f32	s15, s15
 802a8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802a8c0:	d602      	bvs.n	802a8c8 <__math_invalidf+0x1c>
 802a8c2:	2021      	movs	r0, #33	@ 0x21
 802a8c4:	f7ff bfe4 	b.w	802a890 <with_errnof>
 802a8c8:	4770      	bx	lr

0802a8ca <__ieee754_sqrtf>:
 802a8ca:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802a8ce:	4770      	bx	lr

0802a8d0 <__ieee754_atan2f>:
 802a8d0:	ee10 2a90 	vmov	r2, s1
 802a8d4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802a8d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802a8dc:	b510      	push	{r4, lr}
 802a8de:	eef0 7a40 	vmov.f32	s15, s0
 802a8e2:	d806      	bhi.n	802a8f2 <__ieee754_atan2f+0x22>
 802a8e4:	ee10 0a10 	vmov	r0, s0
 802a8e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802a8ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a8f0:	d904      	bls.n	802a8fc <__ieee754_atan2f+0x2c>
 802a8f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802a8f6:	eeb0 0a67 	vmov.f32	s0, s15
 802a8fa:	bd10      	pop	{r4, pc}
 802a8fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802a900:	d103      	bne.n	802a90a <__ieee754_atan2f+0x3a>
 802a902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a906:	f000 b881 	b.w	802aa0c <atanf>
 802a90a:	1794      	asrs	r4, r2, #30
 802a90c:	f004 0402 	and.w	r4, r4, #2
 802a910:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802a914:	b93b      	cbnz	r3, 802a926 <__ieee754_atan2f+0x56>
 802a916:	2c02      	cmp	r4, #2
 802a918:	d05c      	beq.n	802a9d4 <__ieee754_atan2f+0x104>
 802a91a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802a9e8 <__ieee754_atan2f+0x118>
 802a91e:	2c03      	cmp	r4, #3
 802a920:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802a924:	e7e7      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a926:	b939      	cbnz	r1, 802a938 <__ieee754_atan2f+0x68>
 802a928:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802a9ec <__ieee754_atan2f+0x11c>
 802a92c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a9f0 <__ieee754_atan2f+0x120>
 802a930:	2800      	cmp	r0, #0
 802a932:	fe67 7a87 	vselge.f32	s15, s15, s14
 802a936:	e7de      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a938:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802a93c:	d110      	bne.n	802a960 <__ieee754_atan2f+0x90>
 802a93e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a942:	f104 34ff 	add.w	r4, r4, #4294967295
 802a946:	d107      	bne.n	802a958 <__ieee754_atan2f+0x88>
 802a948:	2c02      	cmp	r4, #2
 802a94a:	d846      	bhi.n	802a9da <__ieee754_atan2f+0x10a>
 802a94c:	4b29      	ldr	r3, [pc, #164]	@ (802a9f4 <__ieee754_atan2f+0x124>)
 802a94e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802a952:	edd3 7a00 	vldr	s15, [r3]
 802a956:	e7ce      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a958:	2c02      	cmp	r4, #2
 802a95a:	d841      	bhi.n	802a9e0 <__ieee754_atan2f+0x110>
 802a95c:	4b26      	ldr	r3, [pc, #152]	@ (802a9f8 <__ieee754_atan2f+0x128>)
 802a95e:	e7f6      	b.n	802a94e <__ieee754_atan2f+0x7e>
 802a960:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a964:	d0e0      	beq.n	802a928 <__ieee754_atan2f+0x58>
 802a966:	1a5b      	subs	r3, r3, r1
 802a968:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802a96c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802a970:	da1a      	bge.n	802a9a8 <__ieee754_atan2f+0xd8>
 802a972:	2a00      	cmp	r2, #0
 802a974:	da01      	bge.n	802a97a <__ieee754_atan2f+0xaa>
 802a976:	313c      	adds	r1, #60	@ 0x3c
 802a978:	db19      	blt.n	802a9ae <__ieee754_atan2f+0xde>
 802a97a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802a97e:	f000 f919 	bl	802abb4 <fabsf>
 802a982:	f000 f843 	bl	802aa0c <atanf>
 802a986:	eef0 7a40 	vmov.f32	s15, s0
 802a98a:	2c01      	cmp	r4, #1
 802a98c:	d012      	beq.n	802a9b4 <__ieee754_atan2f+0xe4>
 802a98e:	2c02      	cmp	r4, #2
 802a990:	d017      	beq.n	802a9c2 <__ieee754_atan2f+0xf2>
 802a992:	2c00      	cmp	r4, #0
 802a994:	d0af      	beq.n	802a8f6 <__ieee754_atan2f+0x26>
 802a996:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802a9fc <__ieee754_atan2f+0x12c>
 802a99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a99e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802aa00 <__ieee754_atan2f+0x130>
 802a9a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a9a6:	e7a6      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a9a8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802a9ec <__ieee754_atan2f+0x11c>
 802a9ac:	e7ed      	b.n	802a98a <__ieee754_atan2f+0xba>
 802a9ae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802aa04 <__ieee754_atan2f+0x134>
 802a9b2:	e7ea      	b.n	802a98a <__ieee754_atan2f+0xba>
 802a9b4:	ee17 3a90 	vmov	r3, s15
 802a9b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a9bc:	ee07 3a90 	vmov	s15, r3
 802a9c0:	e799      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a9c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802a9fc <__ieee754_atan2f+0x12c>
 802a9c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a9ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802aa00 <__ieee754_atan2f+0x130>
 802a9ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 802a9d2:	e790      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a9d4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802aa00 <__ieee754_atan2f+0x130>
 802a9d8:	e78d      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a9da:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802aa08 <__ieee754_atan2f+0x138>
 802a9de:	e78a      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a9e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802aa04 <__ieee754_atan2f+0x134>
 802a9e4:	e787      	b.n	802a8f6 <__ieee754_atan2f+0x26>
 802a9e6:	bf00      	nop
 802a9e8:	c0490fdb 	.word	0xc0490fdb
 802a9ec:	3fc90fdb 	.word	0x3fc90fdb
 802a9f0:	bfc90fdb 	.word	0xbfc90fdb
 802a9f4:	08030d7c 	.word	0x08030d7c
 802a9f8:	08030d70 	.word	0x08030d70
 802a9fc:	33bbbd2e 	.word	0x33bbbd2e
 802aa00:	40490fdb 	.word	0x40490fdb
 802aa04:	00000000 	.word	0x00000000
 802aa08:	3f490fdb 	.word	0x3f490fdb

0802aa0c <atanf>:
 802aa0c:	b538      	push	{r3, r4, r5, lr}
 802aa0e:	ee10 5a10 	vmov	r5, s0
 802aa12:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802aa16:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802aa1a:	eef0 7a40 	vmov.f32	s15, s0
 802aa1e:	d30f      	bcc.n	802aa40 <atanf+0x34>
 802aa20:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802aa24:	d904      	bls.n	802aa30 <atanf+0x24>
 802aa26:	ee70 7a00 	vadd.f32	s15, s0, s0
 802aa2a:	eeb0 0a67 	vmov.f32	s0, s15
 802aa2e:	bd38      	pop	{r3, r4, r5, pc}
 802aa30:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802ab68 <atanf+0x15c>
 802aa34:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802ab6c <atanf+0x160>
 802aa38:	2d00      	cmp	r5, #0
 802aa3a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802aa3e:	e7f4      	b.n	802aa2a <atanf+0x1e>
 802aa40:	4b4b      	ldr	r3, [pc, #300]	@ (802ab70 <atanf+0x164>)
 802aa42:	429c      	cmp	r4, r3
 802aa44:	d810      	bhi.n	802aa68 <atanf+0x5c>
 802aa46:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802aa4a:	d20a      	bcs.n	802aa62 <atanf+0x56>
 802aa4c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802ab74 <atanf+0x168>
 802aa50:	ee30 7a07 	vadd.f32	s14, s0, s14
 802aa54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802aa58:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802aa5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa60:	dce3      	bgt.n	802aa2a <atanf+0x1e>
 802aa62:	f04f 33ff 	mov.w	r3, #4294967295
 802aa66:	e013      	b.n	802aa90 <atanf+0x84>
 802aa68:	f000 f8a4 	bl	802abb4 <fabsf>
 802aa6c:	4b42      	ldr	r3, [pc, #264]	@ (802ab78 <atanf+0x16c>)
 802aa6e:	429c      	cmp	r4, r3
 802aa70:	d84f      	bhi.n	802ab12 <atanf+0x106>
 802aa72:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802aa76:	429c      	cmp	r4, r3
 802aa78:	d841      	bhi.n	802aafe <atanf+0xf2>
 802aa7a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802aa7e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802aa82:	eea0 7a27 	vfma.f32	s14, s0, s15
 802aa86:	2300      	movs	r3, #0
 802aa88:	ee30 0a27 	vadd.f32	s0, s0, s15
 802aa8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802aa90:	1c5a      	adds	r2, r3, #1
 802aa92:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802aa96:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802ab7c <atanf+0x170>
 802aa9a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802ab80 <atanf+0x174>
 802aa9e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802ab84 <atanf+0x178>
 802aaa2:	ee66 6a06 	vmul.f32	s13, s12, s12
 802aaa6:	eee6 5a87 	vfma.f32	s11, s13, s14
 802aaaa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802ab88 <atanf+0x17c>
 802aaae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802aab2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802ab8c <atanf+0x180>
 802aab6:	eee7 5a26 	vfma.f32	s11, s14, s13
 802aaba:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802ab90 <atanf+0x184>
 802aabe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802aac2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802ab94 <atanf+0x188>
 802aac6:	eee7 5a26 	vfma.f32	s11, s14, s13
 802aaca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802ab98 <atanf+0x18c>
 802aace:	eea6 5a87 	vfma.f32	s10, s13, s14
 802aad2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802ab9c <atanf+0x190>
 802aad6:	eea5 7a26 	vfma.f32	s14, s10, s13
 802aada:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802aba0 <atanf+0x194>
 802aade:	eea7 5a26 	vfma.f32	s10, s14, s13
 802aae2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802aba4 <atanf+0x198>
 802aae6:	eea5 7a26 	vfma.f32	s14, s10, s13
 802aaea:	ee27 7a26 	vmul.f32	s14, s14, s13
 802aaee:	eea5 7a86 	vfma.f32	s14, s11, s12
 802aaf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 802aaf6:	d121      	bne.n	802ab3c <atanf+0x130>
 802aaf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802aafc:	e795      	b.n	802aa2a <atanf+0x1e>
 802aafe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802ab02:	ee30 7a67 	vsub.f32	s14, s0, s15
 802ab06:	ee30 0a27 	vadd.f32	s0, s0, s15
 802ab0a:	2301      	movs	r3, #1
 802ab0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ab10:	e7be      	b.n	802aa90 <atanf+0x84>
 802ab12:	4b25      	ldr	r3, [pc, #148]	@ (802aba8 <atanf+0x19c>)
 802ab14:	429c      	cmp	r4, r3
 802ab16:	d80b      	bhi.n	802ab30 <atanf+0x124>
 802ab18:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802ab1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802ab20:	eea0 7a27 	vfma.f32	s14, s0, s15
 802ab24:	2302      	movs	r3, #2
 802ab26:	ee70 6a67 	vsub.f32	s13, s0, s15
 802ab2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802ab2e:	e7af      	b.n	802aa90 <atanf+0x84>
 802ab30:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802ab34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ab38:	2303      	movs	r3, #3
 802ab3a:	e7a9      	b.n	802aa90 <atanf+0x84>
 802ab3c:	4a1b      	ldr	r2, [pc, #108]	@ (802abac <atanf+0x1a0>)
 802ab3e:	491c      	ldr	r1, [pc, #112]	@ (802abb0 <atanf+0x1a4>)
 802ab40:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802ab44:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802ab48:	edd3 6a00 	vldr	s13, [r3]
 802ab4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 802ab50:	2d00      	cmp	r5, #0
 802ab52:	ee37 7a67 	vsub.f32	s14, s14, s15
 802ab56:	edd2 7a00 	vldr	s15, [r2]
 802ab5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ab5e:	bfb8      	it	lt
 802ab60:	eef1 7a67 	vneglt.f32	s15, s15
 802ab64:	e761      	b.n	802aa2a <atanf+0x1e>
 802ab66:	bf00      	nop
 802ab68:	bfc90fdb 	.word	0xbfc90fdb
 802ab6c:	3fc90fdb 	.word	0x3fc90fdb
 802ab70:	3edfffff 	.word	0x3edfffff
 802ab74:	7149f2ca 	.word	0x7149f2ca
 802ab78:	3f97ffff 	.word	0x3f97ffff
 802ab7c:	3c8569d7 	.word	0x3c8569d7
 802ab80:	3d4bda59 	.word	0x3d4bda59
 802ab84:	bd6ef16b 	.word	0xbd6ef16b
 802ab88:	3d886b35 	.word	0x3d886b35
 802ab8c:	3dba2e6e 	.word	0x3dba2e6e
 802ab90:	3e124925 	.word	0x3e124925
 802ab94:	3eaaaaab 	.word	0x3eaaaaab
 802ab98:	bd15a221 	.word	0xbd15a221
 802ab9c:	bd9d8795 	.word	0xbd9d8795
 802aba0:	bde38e38 	.word	0xbde38e38
 802aba4:	be4ccccd 	.word	0xbe4ccccd
 802aba8:	401bffff 	.word	0x401bffff
 802abac:	08030d98 	.word	0x08030d98
 802abb0:	08030d88 	.word	0x08030d88

0802abb4 <fabsf>:
 802abb4:	ee10 3a10 	vmov	r3, s0
 802abb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802abbc:	ee00 3a10 	vmov	s0, r3
 802abc0:	4770      	bx	lr

0802abc2 <abort>:
 802abc2:	b508      	push	{r3, lr}
 802abc4:	2006      	movs	r0, #6
 802abc6:	f000 fb01 	bl	802b1cc <raise>
 802abca:	2001      	movs	r0, #1
 802abcc:	f7d6 fc2a 	bl	8001424 <_exit>

0802abd0 <__assert_func>:
 802abd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802abd2:	4614      	mov	r4, r2
 802abd4:	461a      	mov	r2, r3
 802abd6:	4b09      	ldr	r3, [pc, #36]	@ (802abfc <__assert_func+0x2c>)
 802abd8:	681b      	ldr	r3, [r3, #0]
 802abda:	4605      	mov	r5, r0
 802abdc:	68d8      	ldr	r0, [r3, #12]
 802abde:	b954      	cbnz	r4, 802abf6 <__assert_func+0x26>
 802abe0:	4b07      	ldr	r3, [pc, #28]	@ (802ac00 <__assert_func+0x30>)
 802abe2:	461c      	mov	r4, r3
 802abe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802abe8:	9100      	str	r1, [sp, #0]
 802abea:	462b      	mov	r3, r5
 802abec:	4905      	ldr	r1, [pc, #20]	@ (802ac04 <__assert_func+0x34>)
 802abee:	f000 f983 	bl	802aef8 <fiprintf>
 802abf2:	f7ff ffe6 	bl	802abc2 <abort>
 802abf6:	4b04      	ldr	r3, [pc, #16]	@ (802ac08 <__assert_func+0x38>)
 802abf8:	e7f4      	b.n	802abe4 <__assert_func+0x14>
 802abfa:	bf00      	nop
 802abfc:	240000bc 	.word	0x240000bc
 802ac00:	08030de3 	.word	0x08030de3
 802ac04:	08030db5 	.word	0x08030db5
 802ac08:	08030da8 	.word	0x08030da8

0802ac0c <atexit>:
 802ac0c:	2300      	movs	r3, #0
 802ac0e:	4601      	mov	r1, r0
 802ac10:	461a      	mov	r2, r3
 802ac12:	4618      	mov	r0, r3
 802ac14:	f000 bb88 	b.w	802b328 <__register_exitproc>

0802ac18 <malloc>:
 802ac18:	4b02      	ldr	r3, [pc, #8]	@ (802ac24 <malloc+0xc>)
 802ac1a:	4601      	mov	r1, r0
 802ac1c:	6818      	ldr	r0, [r3, #0]
 802ac1e:	f000 b82d 	b.w	802ac7c <_malloc_r>
 802ac22:	bf00      	nop
 802ac24:	240000bc 	.word	0x240000bc

0802ac28 <free>:
 802ac28:	4b02      	ldr	r3, [pc, #8]	@ (802ac34 <free+0xc>)
 802ac2a:	4601      	mov	r1, r0
 802ac2c:	6818      	ldr	r0, [r3, #0]
 802ac2e:	f000 bbd7 	b.w	802b3e0 <_free_r>
 802ac32:	bf00      	nop
 802ac34:	240000bc 	.word	0x240000bc

0802ac38 <sbrk_aligned>:
 802ac38:	b570      	push	{r4, r5, r6, lr}
 802ac3a:	4e0f      	ldr	r6, [pc, #60]	@ (802ac78 <sbrk_aligned+0x40>)
 802ac3c:	460c      	mov	r4, r1
 802ac3e:	6831      	ldr	r1, [r6, #0]
 802ac40:	4605      	mov	r5, r0
 802ac42:	b911      	cbnz	r1, 802ac4a <sbrk_aligned+0x12>
 802ac44:	f000 fb12 	bl	802b26c <_sbrk_r>
 802ac48:	6030      	str	r0, [r6, #0]
 802ac4a:	4621      	mov	r1, r4
 802ac4c:	4628      	mov	r0, r5
 802ac4e:	f000 fb0d 	bl	802b26c <_sbrk_r>
 802ac52:	1c43      	adds	r3, r0, #1
 802ac54:	d103      	bne.n	802ac5e <sbrk_aligned+0x26>
 802ac56:	f04f 34ff 	mov.w	r4, #4294967295
 802ac5a:	4620      	mov	r0, r4
 802ac5c:	bd70      	pop	{r4, r5, r6, pc}
 802ac5e:	1cc4      	adds	r4, r0, #3
 802ac60:	f024 0403 	bic.w	r4, r4, #3
 802ac64:	42a0      	cmp	r0, r4
 802ac66:	d0f8      	beq.n	802ac5a <sbrk_aligned+0x22>
 802ac68:	1a21      	subs	r1, r4, r0
 802ac6a:	4628      	mov	r0, r5
 802ac6c:	f000 fafe 	bl	802b26c <_sbrk_r>
 802ac70:	3001      	adds	r0, #1
 802ac72:	d1f2      	bne.n	802ac5a <sbrk_aligned+0x22>
 802ac74:	e7ef      	b.n	802ac56 <sbrk_aligned+0x1e>
 802ac76:	bf00      	nop
 802ac78:	24016810 	.word	0x24016810

0802ac7c <_malloc_r>:
 802ac7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac80:	1ccd      	adds	r5, r1, #3
 802ac82:	f025 0503 	bic.w	r5, r5, #3
 802ac86:	3508      	adds	r5, #8
 802ac88:	2d0c      	cmp	r5, #12
 802ac8a:	bf38      	it	cc
 802ac8c:	250c      	movcc	r5, #12
 802ac8e:	2d00      	cmp	r5, #0
 802ac90:	4606      	mov	r6, r0
 802ac92:	db01      	blt.n	802ac98 <_malloc_r+0x1c>
 802ac94:	42a9      	cmp	r1, r5
 802ac96:	d904      	bls.n	802aca2 <_malloc_r+0x26>
 802ac98:	230c      	movs	r3, #12
 802ac9a:	6033      	str	r3, [r6, #0]
 802ac9c:	2000      	movs	r0, #0
 802ac9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802ad78 <_malloc_r+0xfc>
 802aca6:	f000 f869 	bl	802ad7c <__malloc_lock>
 802acaa:	f8d8 3000 	ldr.w	r3, [r8]
 802acae:	461c      	mov	r4, r3
 802acb0:	bb44      	cbnz	r4, 802ad04 <_malloc_r+0x88>
 802acb2:	4629      	mov	r1, r5
 802acb4:	4630      	mov	r0, r6
 802acb6:	f7ff ffbf 	bl	802ac38 <sbrk_aligned>
 802acba:	1c43      	adds	r3, r0, #1
 802acbc:	4604      	mov	r4, r0
 802acbe:	d158      	bne.n	802ad72 <_malloc_r+0xf6>
 802acc0:	f8d8 4000 	ldr.w	r4, [r8]
 802acc4:	4627      	mov	r7, r4
 802acc6:	2f00      	cmp	r7, #0
 802acc8:	d143      	bne.n	802ad52 <_malloc_r+0xd6>
 802acca:	2c00      	cmp	r4, #0
 802accc:	d04b      	beq.n	802ad66 <_malloc_r+0xea>
 802acce:	6823      	ldr	r3, [r4, #0]
 802acd0:	4639      	mov	r1, r7
 802acd2:	4630      	mov	r0, r6
 802acd4:	eb04 0903 	add.w	r9, r4, r3
 802acd8:	f000 fac8 	bl	802b26c <_sbrk_r>
 802acdc:	4581      	cmp	r9, r0
 802acde:	d142      	bne.n	802ad66 <_malloc_r+0xea>
 802ace0:	6821      	ldr	r1, [r4, #0]
 802ace2:	1a6d      	subs	r5, r5, r1
 802ace4:	4629      	mov	r1, r5
 802ace6:	4630      	mov	r0, r6
 802ace8:	f7ff ffa6 	bl	802ac38 <sbrk_aligned>
 802acec:	3001      	adds	r0, #1
 802acee:	d03a      	beq.n	802ad66 <_malloc_r+0xea>
 802acf0:	6823      	ldr	r3, [r4, #0]
 802acf2:	442b      	add	r3, r5
 802acf4:	6023      	str	r3, [r4, #0]
 802acf6:	f8d8 3000 	ldr.w	r3, [r8]
 802acfa:	685a      	ldr	r2, [r3, #4]
 802acfc:	bb62      	cbnz	r2, 802ad58 <_malloc_r+0xdc>
 802acfe:	f8c8 7000 	str.w	r7, [r8]
 802ad02:	e00f      	b.n	802ad24 <_malloc_r+0xa8>
 802ad04:	6822      	ldr	r2, [r4, #0]
 802ad06:	1b52      	subs	r2, r2, r5
 802ad08:	d420      	bmi.n	802ad4c <_malloc_r+0xd0>
 802ad0a:	2a0b      	cmp	r2, #11
 802ad0c:	d917      	bls.n	802ad3e <_malloc_r+0xc2>
 802ad0e:	1961      	adds	r1, r4, r5
 802ad10:	42a3      	cmp	r3, r4
 802ad12:	6025      	str	r5, [r4, #0]
 802ad14:	bf18      	it	ne
 802ad16:	6059      	strne	r1, [r3, #4]
 802ad18:	6863      	ldr	r3, [r4, #4]
 802ad1a:	bf08      	it	eq
 802ad1c:	f8c8 1000 	streq.w	r1, [r8]
 802ad20:	5162      	str	r2, [r4, r5]
 802ad22:	604b      	str	r3, [r1, #4]
 802ad24:	4630      	mov	r0, r6
 802ad26:	f000 f82f 	bl	802ad88 <__malloc_unlock>
 802ad2a:	f104 000b 	add.w	r0, r4, #11
 802ad2e:	1d23      	adds	r3, r4, #4
 802ad30:	f020 0007 	bic.w	r0, r0, #7
 802ad34:	1ac2      	subs	r2, r0, r3
 802ad36:	bf1c      	itt	ne
 802ad38:	1a1b      	subne	r3, r3, r0
 802ad3a:	50a3      	strne	r3, [r4, r2]
 802ad3c:	e7af      	b.n	802ac9e <_malloc_r+0x22>
 802ad3e:	6862      	ldr	r2, [r4, #4]
 802ad40:	42a3      	cmp	r3, r4
 802ad42:	bf0c      	ite	eq
 802ad44:	f8c8 2000 	streq.w	r2, [r8]
 802ad48:	605a      	strne	r2, [r3, #4]
 802ad4a:	e7eb      	b.n	802ad24 <_malloc_r+0xa8>
 802ad4c:	4623      	mov	r3, r4
 802ad4e:	6864      	ldr	r4, [r4, #4]
 802ad50:	e7ae      	b.n	802acb0 <_malloc_r+0x34>
 802ad52:	463c      	mov	r4, r7
 802ad54:	687f      	ldr	r7, [r7, #4]
 802ad56:	e7b6      	b.n	802acc6 <_malloc_r+0x4a>
 802ad58:	461a      	mov	r2, r3
 802ad5a:	685b      	ldr	r3, [r3, #4]
 802ad5c:	42a3      	cmp	r3, r4
 802ad5e:	d1fb      	bne.n	802ad58 <_malloc_r+0xdc>
 802ad60:	2300      	movs	r3, #0
 802ad62:	6053      	str	r3, [r2, #4]
 802ad64:	e7de      	b.n	802ad24 <_malloc_r+0xa8>
 802ad66:	230c      	movs	r3, #12
 802ad68:	6033      	str	r3, [r6, #0]
 802ad6a:	4630      	mov	r0, r6
 802ad6c:	f000 f80c 	bl	802ad88 <__malloc_unlock>
 802ad70:	e794      	b.n	802ac9c <_malloc_r+0x20>
 802ad72:	6005      	str	r5, [r0, #0]
 802ad74:	e7d6      	b.n	802ad24 <_malloc_r+0xa8>
 802ad76:	bf00      	nop
 802ad78:	24016814 	.word	0x24016814

0802ad7c <__malloc_lock>:
 802ad7c:	4801      	ldr	r0, [pc, #4]	@ (802ad84 <__malloc_lock+0x8>)
 802ad7e:	f000 bac2 	b.w	802b306 <__retarget_lock_acquire_recursive>
 802ad82:	bf00      	nop
 802ad84:	24016958 	.word	0x24016958

0802ad88 <__malloc_unlock>:
 802ad88:	4801      	ldr	r0, [pc, #4]	@ (802ad90 <__malloc_unlock+0x8>)
 802ad8a:	f000 babd 	b.w	802b308 <__retarget_lock_release_recursive>
 802ad8e:	bf00      	nop
 802ad90:	24016958 	.word	0x24016958

0802ad94 <__cxa_atexit>:
 802ad94:	b510      	push	{r4, lr}
 802ad96:	4604      	mov	r4, r0
 802ad98:	4804      	ldr	r0, [pc, #16]	@ (802adac <__cxa_atexit+0x18>)
 802ad9a:	4613      	mov	r3, r2
 802ad9c:	b120      	cbz	r0, 802ada8 <__cxa_atexit+0x14>
 802ad9e:	460a      	mov	r2, r1
 802ada0:	2002      	movs	r0, #2
 802ada2:	4621      	mov	r1, r4
 802ada4:	f000 fac0 	bl	802b328 <__register_exitproc>
 802ada8:	bd10      	pop	{r4, pc}
 802adaa:	bf00      	nop
 802adac:	0802b329 	.word	0x0802b329

0802adb0 <std>:
 802adb0:	2300      	movs	r3, #0
 802adb2:	b510      	push	{r4, lr}
 802adb4:	4604      	mov	r4, r0
 802adb6:	e9c0 3300 	strd	r3, r3, [r0]
 802adba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802adbe:	6083      	str	r3, [r0, #8]
 802adc0:	8181      	strh	r1, [r0, #12]
 802adc2:	6643      	str	r3, [r0, #100]	@ 0x64
 802adc4:	81c2      	strh	r2, [r0, #14]
 802adc6:	6183      	str	r3, [r0, #24]
 802adc8:	4619      	mov	r1, r3
 802adca:	2208      	movs	r2, #8
 802adcc:	305c      	adds	r0, #92	@ 0x5c
 802adce:	f000 f9bb 	bl	802b148 <memset>
 802add2:	4b0d      	ldr	r3, [pc, #52]	@ (802ae08 <std+0x58>)
 802add4:	6263      	str	r3, [r4, #36]	@ 0x24
 802add6:	4b0d      	ldr	r3, [pc, #52]	@ (802ae0c <std+0x5c>)
 802add8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802adda:	4b0d      	ldr	r3, [pc, #52]	@ (802ae10 <std+0x60>)
 802addc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802adde:	4b0d      	ldr	r3, [pc, #52]	@ (802ae14 <std+0x64>)
 802ade0:	6323      	str	r3, [r4, #48]	@ 0x30
 802ade2:	4b0d      	ldr	r3, [pc, #52]	@ (802ae18 <std+0x68>)
 802ade4:	6224      	str	r4, [r4, #32]
 802ade6:	429c      	cmp	r4, r3
 802ade8:	d006      	beq.n	802adf8 <std+0x48>
 802adea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802adee:	4294      	cmp	r4, r2
 802adf0:	d002      	beq.n	802adf8 <std+0x48>
 802adf2:	33d0      	adds	r3, #208	@ 0xd0
 802adf4:	429c      	cmp	r4, r3
 802adf6:	d105      	bne.n	802ae04 <std+0x54>
 802adf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802adfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae00:	f000 ba80 	b.w	802b304 <__retarget_lock_init_recursive>
 802ae04:	bd10      	pop	{r4, pc}
 802ae06:	bf00      	nop
 802ae08:	0802af99 	.word	0x0802af99
 802ae0c:	0802afbb 	.word	0x0802afbb
 802ae10:	0802aff3 	.word	0x0802aff3
 802ae14:	0802b017 	.word	0x0802b017
 802ae18:	24016818 	.word	0x24016818

0802ae1c <stdio_exit_handler>:
 802ae1c:	4a02      	ldr	r2, [pc, #8]	@ (802ae28 <stdio_exit_handler+0xc>)
 802ae1e:	4903      	ldr	r1, [pc, #12]	@ (802ae2c <stdio_exit_handler+0x10>)
 802ae20:	4803      	ldr	r0, [pc, #12]	@ (802ae30 <stdio_exit_handler+0x14>)
 802ae22:	f000 b87b 	b.w	802af1c <_fwalk_sglue>
 802ae26:	bf00      	nop
 802ae28:	240000b0 	.word	0x240000b0
 802ae2c:	0802bdcd 	.word	0x0802bdcd
 802ae30:	240000c0 	.word	0x240000c0

0802ae34 <cleanup_stdio>:
 802ae34:	6841      	ldr	r1, [r0, #4]
 802ae36:	4b0c      	ldr	r3, [pc, #48]	@ (802ae68 <cleanup_stdio+0x34>)
 802ae38:	4299      	cmp	r1, r3
 802ae3a:	b510      	push	{r4, lr}
 802ae3c:	4604      	mov	r4, r0
 802ae3e:	d001      	beq.n	802ae44 <cleanup_stdio+0x10>
 802ae40:	f000 ffc4 	bl	802bdcc <_fflush_r>
 802ae44:	68a1      	ldr	r1, [r4, #8]
 802ae46:	4b09      	ldr	r3, [pc, #36]	@ (802ae6c <cleanup_stdio+0x38>)
 802ae48:	4299      	cmp	r1, r3
 802ae4a:	d002      	beq.n	802ae52 <cleanup_stdio+0x1e>
 802ae4c:	4620      	mov	r0, r4
 802ae4e:	f000 ffbd 	bl	802bdcc <_fflush_r>
 802ae52:	68e1      	ldr	r1, [r4, #12]
 802ae54:	4b06      	ldr	r3, [pc, #24]	@ (802ae70 <cleanup_stdio+0x3c>)
 802ae56:	4299      	cmp	r1, r3
 802ae58:	d004      	beq.n	802ae64 <cleanup_stdio+0x30>
 802ae5a:	4620      	mov	r0, r4
 802ae5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae60:	f000 bfb4 	b.w	802bdcc <_fflush_r>
 802ae64:	bd10      	pop	{r4, pc}
 802ae66:	bf00      	nop
 802ae68:	24016818 	.word	0x24016818
 802ae6c:	24016880 	.word	0x24016880
 802ae70:	240168e8 	.word	0x240168e8

0802ae74 <global_stdio_init.part.0>:
 802ae74:	b510      	push	{r4, lr}
 802ae76:	4b0b      	ldr	r3, [pc, #44]	@ (802aea4 <global_stdio_init.part.0+0x30>)
 802ae78:	4c0b      	ldr	r4, [pc, #44]	@ (802aea8 <global_stdio_init.part.0+0x34>)
 802ae7a:	4a0c      	ldr	r2, [pc, #48]	@ (802aeac <global_stdio_init.part.0+0x38>)
 802ae7c:	601a      	str	r2, [r3, #0]
 802ae7e:	4620      	mov	r0, r4
 802ae80:	2200      	movs	r2, #0
 802ae82:	2104      	movs	r1, #4
 802ae84:	f7ff ff94 	bl	802adb0 <std>
 802ae88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802ae8c:	2201      	movs	r2, #1
 802ae8e:	2109      	movs	r1, #9
 802ae90:	f7ff ff8e 	bl	802adb0 <std>
 802ae94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802ae98:	2202      	movs	r2, #2
 802ae9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae9e:	2112      	movs	r1, #18
 802aea0:	f7ff bf86 	b.w	802adb0 <std>
 802aea4:	24016950 	.word	0x24016950
 802aea8:	24016818 	.word	0x24016818
 802aeac:	0802ae1d 	.word	0x0802ae1d

0802aeb0 <__sfp_lock_acquire>:
 802aeb0:	4801      	ldr	r0, [pc, #4]	@ (802aeb8 <__sfp_lock_acquire+0x8>)
 802aeb2:	f000 ba28 	b.w	802b306 <__retarget_lock_acquire_recursive>
 802aeb6:	bf00      	nop
 802aeb8:	2401695a 	.word	0x2401695a

0802aebc <__sfp_lock_release>:
 802aebc:	4801      	ldr	r0, [pc, #4]	@ (802aec4 <__sfp_lock_release+0x8>)
 802aebe:	f000 ba23 	b.w	802b308 <__retarget_lock_release_recursive>
 802aec2:	bf00      	nop
 802aec4:	2401695a 	.word	0x2401695a

0802aec8 <__sinit>:
 802aec8:	b510      	push	{r4, lr}
 802aeca:	4604      	mov	r4, r0
 802aecc:	f7ff fff0 	bl	802aeb0 <__sfp_lock_acquire>
 802aed0:	6a23      	ldr	r3, [r4, #32]
 802aed2:	b11b      	cbz	r3, 802aedc <__sinit+0x14>
 802aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802aed8:	f7ff bff0 	b.w	802aebc <__sfp_lock_release>
 802aedc:	4b04      	ldr	r3, [pc, #16]	@ (802aef0 <__sinit+0x28>)
 802aede:	6223      	str	r3, [r4, #32]
 802aee0:	4b04      	ldr	r3, [pc, #16]	@ (802aef4 <__sinit+0x2c>)
 802aee2:	681b      	ldr	r3, [r3, #0]
 802aee4:	2b00      	cmp	r3, #0
 802aee6:	d1f5      	bne.n	802aed4 <__sinit+0xc>
 802aee8:	f7ff ffc4 	bl	802ae74 <global_stdio_init.part.0>
 802aeec:	e7f2      	b.n	802aed4 <__sinit+0xc>
 802aeee:	bf00      	nop
 802aef0:	0802ae35 	.word	0x0802ae35
 802aef4:	24016950 	.word	0x24016950

0802aef8 <fiprintf>:
 802aef8:	b40e      	push	{r1, r2, r3}
 802aefa:	b503      	push	{r0, r1, lr}
 802aefc:	4601      	mov	r1, r0
 802aefe:	ab03      	add	r3, sp, #12
 802af00:	4805      	ldr	r0, [pc, #20]	@ (802af18 <fiprintf+0x20>)
 802af02:	f853 2b04 	ldr.w	r2, [r3], #4
 802af06:	6800      	ldr	r0, [r0, #0]
 802af08:	9301      	str	r3, [sp, #4]
 802af0a:	f000 fc35 	bl	802b778 <_vfiprintf_r>
 802af0e:	b002      	add	sp, #8
 802af10:	f85d eb04 	ldr.w	lr, [sp], #4
 802af14:	b003      	add	sp, #12
 802af16:	4770      	bx	lr
 802af18:	240000bc 	.word	0x240000bc

0802af1c <_fwalk_sglue>:
 802af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802af20:	4607      	mov	r7, r0
 802af22:	4688      	mov	r8, r1
 802af24:	4614      	mov	r4, r2
 802af26:	2600      	movs	r6, #0
 802af28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802af2c:	f1b9 0901 	subs.w	r9, r9, #1
 802af30:	d505      	bpl.n	802af3e <_fwalk_sglue+0x22>
 802af32:	6824      	ldr	r4, [r4, #0]
 802af34:	2c00      	cmp	r4, #0
 802af36:	d1f7      	bne.n	802af28 <_fwalk_sglue+0xc>
 802af38:	4630      	mov	r0, r6
 802af3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802af3e:	89ab      	ldrh	r3, [r5, #12]
 802af40:	2b01      	cmp	r3, #1
 802af42:	d907      	bls.n	802af54 <_fwalk_sglue+0x38>
 802af44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802af48:	3301      	adds	r3, #1
 802af4a:	d003      	beq.n	802af54 <_fwalk_sglue+0x38>
 802af4c:	4629      	mov	r1, r5
 802af4e:	4638      	mov	r0, r7
 802af50:	47c0      	blx	r8
 802af52:	4306      	orrs	r6, r0
 802af54:	3568      	adds	r5, #104	@ 0x68
 802af56:	e7e9      	b.n	802af2c <_fwalk_sglue+0x10>

0802af58 <siprintf>:
 802af58:	b40e      	push	{r1, r2, r3}
 802af5a:	b500      	push	{lr}
 802af5c:	b09c      	sub	sp, #112	@ 0x70
 802af5e:	ab1d      	add	r3, sp, #116	@ 0x74
 802af60:	9002      	str	r0, [sp, #8]
 802af62:	9006      	str	r0, [sp, #24]
 802af64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802af68:	4809      	ldr	r0, [pc, #36]	@ (802af90 <siprintf+0x38>)
 802af6a:	9107      	str	r1, [sp, #28]
 802af6c:	9104      	str	r1, [sp, #16]
 802af6e:	4909      	ldr	r1, [pc, #36]	@ (802af94 <siprintf+0x3c>)
 802af70:	f853 2b04 	ldr.w	r2, [r3], #4
 802af74:	9105      	str	r1, [sp, #20]
 802af76:	6800      	ldr	r0, [r0, #0]
 802af78:	9301      	str	r3, [sp, #4]
 802af7a:	a902      	add	r1, sp, #8
 802af7c:	f000 fad6 	bl	802b52c <_svfiprintf_r>
 802af80:	9b02      	ldr	r3, [sp, #8]
 802af82:	2200      	movs	r2, #0
 802af84:	701a      	strb	r2, [r3, #0]
 802af86:	b01c      	add	sp, #112	@ 0x70
 802af88:	f85d eb04 	ldr.w	lr, [sp], #4
 802af8c:	b003      	add	sp, #12
 802af8e:	4770      	bx	lr
 802af90:	240000bc 	.word	0x240000bc
 802af94:	ffff0208 	.word	0xffff0208

0802af98 <__sread>:
 802af98:	b510      	push	{r4, lr}
 802af9a:	460c      	mov	r4, r1
 802af9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802afa0:	f000 f93e 	bl	802b220 <_read_r>
 802afa4:	2800      	cmp	r0, #0
 802afa6:	bfab      	itete	ge
 802afa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802afaa:	89a3      	ldrhlt	r3, [r4, #12]
 802afac:	181b      	addge	r3, r3, r0
 802afae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802afb2:	bfac      	ite	ge
 802afb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 802afb6:	81a3      	strhlt	r3, [r4, #12]
 802afb8:	bd10      	pop	{r4, pc}

0802afba <__swrite>:
 802afba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802afbe:	461f      	mov	r7, r3
 802afc0:	898b      	ldrh	r3, [r1, #12]
 802afc2:	05db      	lsls	r3, r3, #23
 802afc4:	4605      	mov	r5, r0
 802afc6:	460c      	mov	r4, r1
 802afc8:	4616      	mov	r6, r2
 802afca:	d505      	bpl.n	802afd8 <__swrite+0x1e>
 802afcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802afd0:	2302      	movs	r3, #2
 802afd2:	2200      	movs	r2, #0
 802afd4:	f000 f912 	bl	802b1fc <_lseek_r>
 802afd8:	89a3      	ldrh	r3, [r4, #12]
 802afda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802afde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802afe2:	81a3      	strh	r3, [r4, #12]
 802afe4:	4632      	mov	r2, r6
 802afe6:	463b      	mov	r3, r7
 802afe8:	4628      	mov	r0, r5
 802afea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802afee:	f000 b94d 	b.w	802b28c <_write_r>

0802aff2 <__sseek>:
 802aff2:	b510      	push	{r4, lr}
 802aff4:	460c      	mov	r4, r1
 802aff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802affa:	f000 f8ff 	bl	802b1fc <_lseek_r>
 802affe:	1c43      	adds	r3, r0, #1
 802b000:	89a3      	ldrh	r3, [r4, #12]
 802b002:	bf15      	itete	ne
 802b004:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b006:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b00a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b00e:	81a3      	strheq	r3, [r4, #12]
 802b010:	bf18      	it	ne
 802b012:	81a3      	strhne	r3, [r4, #12]
 802b014:	bd10      	pop	{r4, pc}

0802b016 <__sclose>:
 802b016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b01a:	f000 b8df 	b.w	802b1dc <_close_r>

0802b01e <__swbuf_r>:
 802b01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b020:	460e      	mov	r6, r1
 802b022:	4614      	mov	r4, r2
 802b024:	4605      	mov	r5, r0
 802b026:	b118      	cbz	r0, 802b030 <__swbuf_r+0x12>
 802b028:	6a03      	ldr	r3, [r0, #32]
 802b02a:	b90b      	cbnz	r3, 802b030 <__swbuf_r+0x12>
 802b02c:	f7ff ff4c 	bl	802aec8 <__sinit>
 802b030:	69a3      	ldr	r3, [r4, #24]
 802b032:	60a3      	str	r3, [r4, #8]
 802b034:	89a3      	ldrh	r3, [r4, #12]
 802b036:	071a      	lsls	r2, r3, #28
 802b038:	d501      	bpl.n	802b03e <__swbuf_r+0x20>
 802b03a:	6923      	ldr	r3, [r4, #16]
 802b03c:	b943      	cbnz	r3, 802b050 <__swbuf_r+0x32>
 802b03e:	4621      	mov	r1, r4
 802b040:	4628      	mov	r0, r5
 802b042:	f000 f82b 	bl	802b09c <__swsetup_r>
 802b046:	b118      	cbz	r0, 802b050 <__swbuf_r+0x32>
 802b048:	f04f 37ff 	mov.w	r7, #4294967295
 802b04c:	4638      	mov	r0, r7
 802b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b050:	6823      	ldr	r3, [r4, #0]
 802b052:	6922      	ldr	r2, [r4, #16]
 802b054:	1a98      	subs	r0, r3, r2
 802b056:	6963      	ldr	r3, [r4, #20]
 802b058:	b2f6      	uxtb	r6, r6
 802b05a:	4283      	cmp	r3, r0
 802b05c:	4637      	mov	r7, r6
 802b05e:	dc05      	bgt.n	802b06c <__swbuf_r+0x4e>
 802b060:	4621      	mov	r1, r4
 802b062:	4628      	mov	r0, r5
 802b064:	f000 feb2 	bl	802bdcc <_fflush_r>
 802b068:	2800      	cmp	r0, #0
 802b06a:	d1ed      	bne.n	802b048 <__swbuf_r+0x2a>
 802b06c:	68a3      	ldr	r3, [r4, #8]
 802b06e:	3b01      	subs	r3, #1
 802b070:	60a3      	str	r3, [r4, #8]
 802b072:	6823      	ldr	r3, [r4, #0]
 802b074:	1c5a      	adds	r2, r3, #1
 802b076:	6022      	str	r2, [r4, #0]
 802b078:	701e      	strb	r6, [r3, #0]
 802b07a:	6962      	ldr	r2, [r4, #20]
 802b07c:	1c43      	adds	r3, r0, #1
 802b07e:	429a      	cmp	r2, r3
 802b080:	d004      	beq.n	802b08c <__swbuf_r+0x6e>
 802b082:	89a3      	ldrh	r3, [r4, #12]
 802b084:	07db      	lsls	r3, r3, #31
 802b086:	d5e1      	bpl.n	802b04c <__swbuf_r+0x2e>
 802b088:	2e0a      	cmp	r6, #10
 802b08a:	d1df      	bne.n	802b04c <__swbuf_r+0x2e>
 802b08c:	4621      	mov	r1, r4
 802b08e:	4628      	mov	r0, r5
 802b090:	f000 fe9c 	bl	802bdcc <_fflush_r>
 802b094:	2800      	cmp	r0, #0
 802b096:	d0d9      	beq.n	802b04c <__swbuf_r+0x2e>
 802b098:	e7d6      	b.n	802b048 <__swbuf_r+0x2a>
	...

0802b09c <__swsetup_r>:
 802b09c:	b538      	push	{r3, r4, r5, lr}
 802b09e:	4b29      	ldr	r3, [pc, #164]	@ (802b144 <__swsetup_r+0xa8>)
 802b0a0:	4605      	mov	r5, r0
 802b0a2:	6818      	ldr	r0, [r3, #0]
 802b0a4:	460c      	mov	r4, r1
 802b0a6:	b118      	cbz	r0, 802b0b0 <__swsetup_r+0x14>
 802b0a8:	6a03      	ldr	r3, [r0, #32]
 802b0aa:	b90b      	cbnz	r3, 802b0b0 <__swsetup_r+0x14>
 802b0ac:	f7ff ff0c 	bl	802aec8 <__sinit>
 802b0b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0b4:	0719      	lsls	r1, r3, #28
 802b0b6:	d422      	bmi.n	802b0fe <__swsetup_r+0x62>
 802b0b8:	06da      	lsls	r2, r3, #27
 802b0ba:	d407      	bmi.n	802b0cc <__swsetup_r+0x30>
 802b0bc:	2209      	movs	r2, #9
 802b0be:	602a      	str	r2, [r5, #0]
 802b0c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b0c4:	81a3      	strh	r3, [r4, #12]
 802b0c6:	f04f 30ff 	mov.w	r0, #4294967295
 802b0ca:	e033      	b.n	802b134 <__swsetup_r+0x98>
 802b0cc:	0758      	lsls	r0, r3, #29
 802b0ce:	d512      	bpl.n	802b0f6 <__swsetup_r+0x5a>
 802b0d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b0d2:	b141      	cbz	r1, 802b0e6 <__swsetup_r+0x4a>
 802b0d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b0d8:	4299      	cmp	r1, r3
 802b0da:	d002      	beq.n	802b0e2 <__swsetup_r+0x46>
 802b0dc:	4628      	mov	r0, r5
 802b0de:	f000 f97f 	bl	802b3e0 <_free_r>
 802b0e2:	2300      	movs	r3, #0
 802b0e4:	6363      	str	r3, [r4, #52]	@ 0x34
 802b0e6:	89a3      	ldrh	r3, [r4, #12]
 802b0e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b0ec:	81a3      	strh	r3, [r4, #12]
 802b0ee:	2300      	movs	r3, #0
 802b0f0:	6063      	str	r3, [r4, #4]
 802b0f2:	6923      	ldr	r3, [r4, #16]
 802b0f4:	6023      	str	r3, [r4, #0]
 802b0f6:	89a3      	ldrh	r3, [r4, #12]
 802b0f8:	f043 0308 	orr.w	r3, r3, #8
 802b0fc:	81a3      	strh	r3, [r4, #12]
 802b0fe:	6923      	ldr	r3, [r4, #16]
 802b100:	b94b      	cbnz	r3, 802b116 <__swsetup_r+0x7a>
 802b102:	89a3      	ldrh	r3, [r4, #12]
 802b104:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b10c:	d003      	beq.n	802b116 <__swsetup_r+0x7a>
 802b10e:	4621      	mov	r1, r4
 802b110:	4628      	mov	r0, r5
 802b112:	f000 fea9 	bl	802be68 <__smakebuf_r>
 802b116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b11a:	f013 0201 	ands.w	r2, r3, #1
 802b11e:	d00a      	beq.n	802b136 <__swsetup_r+0x9a>
 802b120:	2200      	movs	r2, #0
 802b122:	60a2      	str	r2, [r4, #8]
 802b124:	6962      	ldr	r2, [r4, #20]
 802b126:	4252      	negs	r2, r2
 802b128:	61a2      	str	r2, [r4, #24]
 802b12a:	6922      	ldr	r2, [r4, #16]
 802b12c:	b942      	cbnz	r2, 802b140 <__swsetup_r+0xa4>
 802b12e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b132:	d1c5      	bne.n	802b0c0 <__swsetup_r+0x24>
 802b134:	bd38      	pop	{r3, r4, r5, pc}
 802b136:	0799      	lsls	r1, r3, #30
 802b138:	bf58      	it	pl
 802b13a:	6962      	ldrpl	r2, [r4, #20]
 802b13c:	60a2      	str	r2, [r4, #8]
 802b13e:	e7f4      	b.n	802b12a <__swsetup_r+0x8e>
 802b140:	2000      	movs	r0, #0
 802b142:	e7f7      	b.n	802b134 <__swsetup_r+0x98>
 802b144:	240000bc 	.word	0x240000bc

0802b148 <memset>:
 802b148:	4402      	add	r2, r0
 802b14a:	4603      	mov	r3, r0
 802b14c:	4293      	cmp	r3, r2
 802b14e:	d100      	bne.n	802b152 <memset+0xa>
 802b150:	4770      	bx	lr
 802b152:	f803 1b01 	strb.w	r1, [r3], #1
 802b156:	e7f9      	b.n	802b14c <memset+0x4>

0802b158 <strncmp>:
 802b158:	b510      	push	{r4, lr}
 802b15a:	b16a      	cbz	r2, 802b178 <strncmp+0x20>
 802b15c:	3901      	subs	r1, #1
 802b15e:	1884      	adds	r4, r0, r2
 802b160:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b164:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802b168:	429a      	cmp	r2, r3
 802b16a:	d103      	bne.n	802b174 <strncmp+0x1c>
 802b16c:	42a0      	cmp	r0, r4
 802b16e:	d001      	beq.n	802b174 <strncmp+0x1c>
 802b170:	2a00      	cmp	r2, #0
 802b172:	d1f5      	bne.n	802b160 <strncmp+0x8>
 802b174:	1ad0      	subs	r0, r2, r3
 802b176:	bd10      	pop	{r4, pc}
 802b178:	4610      	mov	r0, r2
 802b17a:	e7fc      	b.n	802b176 <strncmp+0x1e>

0802b17c <_raise_r>:
 802b17c:	291f      	cmp	r1, #31
 802b17e:	b538      	push	{r3, r4, r5, lr}
 802b180:	4605      	mov	r5, r0
 802b182:	460c      	mov	r4, r1
 802b184:	d904      	bls.n	802b190 <_raise_r+0x14>
 802b186:	2316      	movs	r3, #22
 802b188:	6003      	str	r3, [r0, #0]
 802b18a:	f04f 30ff 	mov.w	r0, #4294967295
 802b18e:	bd38      	pop	{r3, r4, r5, pc}
 802b190:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b192:	b112      	cbz	r2, 802b19a <_raise_r+0x1e>
 802b194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b198:	b94b      	cbnz	r3, 802b1ae <_raise_r+0x32>
 802b19a:	4628      	mov	r0, r5
 802b19c:	f000 f864 	bl	802b268 <_getpid_r>
 802b1a0:	4622      	mov	r2, r4
 802b1a2:	4601      	mov	r1, r0
 802b1a4:	4628      	mov	r0, r5
 802b1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b1aa:	f000 b84b 	b.w	802b244 <_kill_r>
 802b1ae:	2b01      	cmp	r3, #1
 802b1b0:	d00a      	beq.n	802b1c8 <_raise_r+0x4c>
 802b1b2:	1c59      	adds	r1, r3, #1
 802b1b4:	d103      	bne.n	802b1be <_raise_r+0x42>
 802b1b6:	2316      	movs	r3, #22
 802b1b8:	6003      	str	r3, [r0, #0]
 802b1ba:	2001      	movs	r0, #1
 802b1bc:	e7e7      	b.n	802b18e <_raise_r+0x12>
 802b1be:	2100      	movs	r1, #0
 802b1c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b1c4:	4620      	mov	r0, r4
 802b1c6:	4798      	blx	r3
 802b1c8:	2000      	movs	r0, #0
 802b1ca:	e7e0      	b.n	802b18e <_raise_r+0x12>

0802b1cc <raise>:
 802b1cc:	4b02      	ldr	r3, [pc, #8]	@ (802b1d8 <raise+0xc>)
 802b1ce:	4601      	mov	r1, r0
 802b1d0:	6818      	ldr	r0, [r3, #0]
 802b1d2:	f7ff bfd3 	b.w	802b17c <_raise_r>
 802b1d6:	bf00      	nop
 802b1d8:	240000bc 	.word	0x240000bc

0802b1dc <_close_r>:
 802b1dc:	b538      	push	{r3, r4, r5, lr}
 802b1de:	4d06      	ldr	r5, [pc, #24]	@ (802b1f8 <_close_r+0x1c>)
 802b1e0:	2300      	movs	r3, #0
 802b1e2:	4604      	mov	r4, r0
 802b1e4:	4608      	mov	r0, r1
 802b1e6:	602b      	str	r3, [r5, #0]
 802b1e8:	f7d6 f93e 	bl	8001468 <_close>
 802b1ec:	1c43      	adds	r3, r0, #1
 802b1ee:	d102      	bne.n	802b1f6 <_close_r+0x1a>
 802b1f0:	682b      	ldr	r3, [r5, #0]
 802b1f2:	b103      	cbz	r3, 802b1f6 <_close_r+0x1a>
 802b1f4:	6023      	str	r3, [r4, #0]
 802b1f6:	bd38      	pop	{r3, r4, r5, pc}
 802b1f8:	24016954 	.word	0x24016954

0802b1fc <_lseek_r>:
 802b1fc:	b538      	push	{r3, r4, r5, lr}
 802b1fe:	4d07      	ldr	r5, [pc, #28]	@ (802b21c <_lseek_r+0x20>)
 802b200:	4604      	mov	r4, r0
 802b202:	4608      	mov	r0, r1
 802b204:	4611      	mov	r1, r2
 802b206:	2200      	movs	r2, #0
 802b208:	602a      	str	r2, [r5, #0]
 802b20a:	461a      	mov	r2, r3
 802b20c:	f7d6 f936 	bl	800147c <_lseek>
 802b210:	1c43      	adds	r3, r0, #1
 802b212:	d102      	bne.n	802b21a <_lseek_r+0x1e>
 802b214:	682b      	ldr	r3, [r5, #0]
 802b216:	b103      	cbz	r3, 802b21a <_lseek_r+0x1e>
 802b218:	6023      	str	r3, [r4, #0]
 802b21a:	bd38      	pop	{r3, r4, r5, pc}
 802b21c:	24016954 	.word	0x24016954

0802b220 <_read_r>:
 802b220:	b538      	push	{r3, r4, r5, lr}
 802b222:	4d07      	ldr	r5, [pc, #28]	@ (802b240 <_read_r+0x20>)
 802b224:	4604      	mov	r4, r0
 802b226:	4608      	mov	r0, r1
 802b228:	4611      	mov	r1, r2
 802b22a:	2200      	movs	r2, #0
 802b22c:	602a      	str	r2, [r5, #0]
 802b22e:	461a      	mov	r2, r3
 802b230:	f7d6 f8fe 	bl	8001430 <_read>
 802b234:	1c43      	adds	r3, r0, #1
 802b236:	d102      	bne.n	802b23e <_read_r+0x1e>
 802b238:	682b      	ldr	r3, [r5, #0]
 802b23a:	b103      	cbz	r3, 802b23e <_read_r+0x1e>
 802b23c:	6023      	str	r3, [r4, #0]
 802b23e:	bd38      	pop	{r3, r4, r5, pc}
 802b240:	24016954 	.word	0x24016954

0802b244 <_kill_r>:
 802b244:	b538      	push	{r3, r4, r5, lr}
 802b246:	4d07      	ldr	r5, [pc, #28]	@ (802b264 <_kill_r+0x20>)
 802b248:	2300      	movs	r3, #0
 802b24a:	4604      	mov	r4, r0
 802b24c:	4608      	mov	r0, r1
 802b24e:	4611      	mov	r1, r2
 802b250:	602b      	str	r3, [r5, #0]
 802b252:	f7d6 f8df 	bl	8001414 <_kill>
 802b256:	1c43      	adds	r3, r0, #1
 802b258:	d102      	bne.n	802b260 <_kill_r+0x1c>
 802b25a:	682b      	ldr	r3, [r5, #0]
 802b25c:	b103      	cbz	r3, 802b260 <_kill_r+0x1c>
 802b25e:	6023      	str	r3, [r4, #0]
 802b260:	bd38      	pop	{r3, r4, r5, pc}
 802b262:	bf00      	nop
 802b264:	24016954 	.word	0x24016954

0802b268 <_getpid_r>:
 802b268:	f7d6 b8d2 	b.w	8001410 <_getpid>

0802b26c <_sbrk_r>:
 802b26c:	b538      	push	{r3, r4, r5, lr}
 802b26e:	4d06      	ldr	r5, [pc, #24]	@ (802b288 <_sbrk_r+0x1c>)
 802b270:	2300      	movs	r3, #0
 802b272:	4604      	mov	r4, r0
 802b274:	4608      	mov	r0, r1
 802b276:	602b      	str	r3, [r5, #0]
 802b278:	f7d6 f902 	bl	8001480 <_sbrk>
 802b27c:	1c43      	adds	r3, r0, #1
 802b27e:	d102      	bne.n	802b286 <_sbrk_r+0x1a>
 802b280:	682b      	ldr	r3, [r5, #0]
 802b282:	b103      	cbz	r3, 802b286 <_sbrk_r+0x1a>
 802b284:	6023      	str	r3, [r4, #0]
 802b286:	bd38      	pop	{r3, r4, r5, pc}
 802b288:	24016954 	.word	0x24016954

0802b28c <_write_r>:
 802b28c:	b538      	push	{r3, r4, r5, lr}
 802b28e:	4d07      	ldr	r5, [pc, #28]	@ (802b2ac <_write_r+0x20>)
 802b290:	4604      	mov	r4, r0
 802b292:	4608      	mov	r0, r1
 802b294:	4611      	mov	r1, r2
 802b296:	2200      	movs	r2, #0
 802b298:	602a      	str	r2, [r5, #0]
 802b29a:	461a      	mov	r2, r3
 802b29c:	f7d6 f8d6 	bl	800144c <_write>
 802b2a0:	1c43      	adds	r3, r0, #1
 802b2a2:	d102      	bne.n	802b2aa <_write_r+0x1e>
 802b2a4:	682b      	ldr	r3, [r5, #0]
 802b2a6:	b103      	cbz	r3, 802b2aa <_write_r+0x1e>
 802b2a8:	6023      	str	r3, [r4, #0]
 802b2aa:	bd38      	pop	{r3, r4, r5, pc}
 802b2ac:	24016954 	.word	0x24016954

0802b2b0 <__errno>:
 802b2b0:	4b01      	ldr	r3, [pc, #4]	@ (802b2b8 <__errno+0x8>)
 802b2b2:	6818      	ldr	r0, [r3, #0]
 802b2b4:	4770      	bx	lr
 802b2b6:	bf00      	nop
 802b2b8:	240000bc 	.word	0x240000bc

0802b2bc <__libc_init_array>:
 802b2bc:	b570      	push	{r4, r5, r6, lr}
 802b2be:	4d0d      	ldr	r5, [pc, #52]	@ (802b2f4 <__libc_init_array+0x38>)
 802b2c0:	4c0d      	ldr	r4, [pc, #52]	@ (802b2f8 <__libc_init_array+0x3c>)
 802b2c2:	1b64      	subs	r4, r4, r5
 802b2c4:	10a4      	asrs	r4, r4, #2
 802b2c6:	2600      	movs	r6, #0
 802b2c8:	42a6      	cmp	r6, r4
 802b2ca:	d109      	bne.n	802b2e0 <__libc_init_array+0x24>
 802b2cc:	4d0b      	ldr	r5, [pc, #44]	@ (802b2fc <__libc_init_array+0x40>)
 802b2ce:	4c0c      	ldr	r4, [pc, #48]	@ (802b300 <__libc_init_array+0x44>)
 802b2d0:	f000 fe78 	bl	802bfc4 <_init>
 802b2d4:	1b64      	subs	r4, r4, r5
 802b2d6:	10a4      	asrs	r4, r4, #2
 802b2d8:	2600      	movs	r6, #0
 802b2da:	42a6      	cmp	r6, r4
 802b2dc:	d105      	bne.n	802b2ea <__libc_init_array+0x2e>
 802b2de:	bd70      	pop	{r4, r5, r6, pc}
 802b2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 802b2e4:	4798      	blx	r3
 802b2e6:	3601      	adds	r6, #1
 802b2e8:	e7ee      	b.n	802b2c8 <__libc_init_array+0xc>
 802b2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 802b2ee:	4798      	blx	r3
 802b2f0:	3601      	adds	r6, #1
 802b2f2:	e7f2      	b.n	802b2da <__libc_init_array+0x1e>
 802b2f4:	08030ff4 	.word	0x08030ff4
 802b2f8:	08030ff4 	.word	0x08030ff4
 802b2fc:	08030ff4 	.word	0x08030ff4
 802b300:	0803100c 	.word	0x0803100c

0802b304 <__retarget_lock_init_recursive>:
 802b304:	4770      	bx	lr

0802b306 <__retarget_lock_acquire_recursive>:
 802b306:	4770      	bx	lr

0802b308 <__retarget_lock_release_recursive>:
 802b308:	4770      	bx	lr

0802b30a <memcpy>:
 802b30a:	440a      	add	r2, r1
 802b30c:	4291      	cmp	r1, r2
 802b30e:	f100 33ff 	add.w	r3, r0, #4294967295
 802b312:	d100      	bne.n	802b316 <memcpy+0xc>
 802b314:	4770      	bx	lr
 802b316:	b510      	push	{r4, lr}
 802b318:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b31c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b320:	4291      	cmp	r1, r2
 802b322:	d1f9      	bne.n	802b318 <memcpy+0xe>
 802b324:	bd10      	pop	{r4, pc}
	...

0802b328 <__register_exitproc>:
 802b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b32c:	4d27      	ldr	r5, [pc, #156]	@ (802b3cc <__register_exitproc+0xa4>)
 802b32e:	4607      	mov	r7, r0
 802b330:	6828      	ldr	r0, [r5, #0]
 802b332:	4691      	mov	r9, r2
 802b334:	460e      	mov	r6, r1
 802b336:	4698      	mov	r8, r3
 802b338:	f7ff ffe5 	bl	802b306 <__retarget_lock_acquire_recursive>
 802b33c:	4a24      	ldr	r2, [pc, #144]	@ (802b3d0 <__register_exitproc+0xa8>)
 802b33e:	6814      	ldr	r4, [r2, #0]
 802b340:	b93c      	cbnz	r4, 802b352 <__register_exitproc+0x2a>
 802b342:	4b24      	ldr	r3, [pc, #144]	@ (802b3d4 <__register_exitproc+0xac>)
 802b344:	6013      	str	r3, [r2, #0]
 802b346:	4a24      	ldr	r2, [pc, #144]	@ (802b3d8 <__register_exitproc+0xb0>)
 802b348:	b112      	cbz	r2, 802b350 <__register_exitproc+0x28>
 802b34a:	6812      	ldr	r2, [r2, #0]
 802b34c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b350:	4c20      	ldr	r4, [pc, #128]	@ (802b3d4 <__register_exitproc+0xac>)
 802b352:	6863      	ldr	r3, [r4, #4]
 802b354:	2b1f      	cmp	r3, #31
 802b356:	dd06      	ble.n	802b366 <__register_exitproc+0x3e>
 802b358:	6828      	ldr	r0, [r5, #0]
 802b35a:	f7ff ffd5 	bl	802b308 <__retarget_lock_release_recursive>
 802b35e:	f04f 30ff 	mov.w	r0, #4294967295
 802b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b366:	b32f      	cbz	r7, 802b3b4 <__register_exitproc+0x8c>
 802b368:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b36c:	b968      	cbnz	r0, 802b38a <__register_exitproc+0x62>
 802b36e:	4b1b      	ldr	r3, [pc, #108]	@ (802b3dc <__register_exitproc+0xb4>)
 802b370:	2b00      	cmp	r3, #0
 802b372:	d0f1      	beq.n	802b358 <__register_exitproc+0x30>
 802b374:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b378:	f7ff fc4e 	bl	802ac18 <malloc>
 802b37c:	2800      	cmp	r0, #0
 802b37e:	d0eb      	beq.n	802b358 <__register_exitproc+0x30>
 802b380:	2300      	movs	r3, #0
 802b382:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b386:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b38a:	6863      	ldr	r3, [r4, #4]
 802b38c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b390:	2201      	movs	r2, #1
 802b392:	409a      	lsls	r2, r3
 802b394:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b398:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b39c:	4313      	orrs	r3, r2
 802b39e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b3a2:	2f02      	cmp	r7, #2
 802b3a4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b3a8:	bf02      	ittt	eq
 802b3aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b3ae:	4313      	orreq	r3, r2
 802b3b0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b3b4:	6863      	ldr	r3, [r4, #4]
 802b3b6:	6828      	ldr	r0, [r5, #0]
 802b3b8:	1c5a      	adds	r2, r3, #1
 802b3ba:	3302      	adds	r3, #2
 802b3bc:	6062      	str	r2, [r4, #4]
 802b3be:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b3c2:	f7ff ffa1 	bl	802b308 <__retarget_lock_release_recursive>
 802b3c6:	2000      	movs	r0, #0
 802b3c8:	e7cb      	b.n	802b362 <__register_exitproc+0x3a>
 802b3ca:	bf00      	nop
 802b3cc:	2400010c 	.word	0x2400010c
 802b3d0:	240169e8 	.word	0x240169e8
 802b3d4:	2401695c 	.word	0x2401695c
 802b3d8:	08030de4 	.word	0x08030de4
 802b3dc:	0802ac19 	.word	0x0802ac19

0802b3e0 <_free_r>:
 802b3e0:	b538      	push	{r3, r4, r5, lr}
 802b3e2:	4605      	mov	r5, r0
 802b3e4:	2900      	cmp	r1, #0
 802b3e6:	d041      	beq.n	802b46c <_free_r+0x8c>
 802b3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b3ec:	1f0c      	subs	r4, r1, #4
 802b3ee:	2b00      	cmp	r3, #0
 802b3f0:	bfb8      	it	lt
 802b3f2:	18e4      	addlt	r4, r4, r3
 802b3f4:	f7ff fcc2 	bl	802ad7c <__malloc_lock>
 802b3f8:	4a1d      	ldr	r2, [pc, #116]	@ (802b470 <_free_r+0x90>)
 802b3fa:	6813      	ldr	r3, [r2, #0]
 802b3fc:	b933      	cbnz	r3, 802b40c <_free_r+0x2c>
 802b3fe:	6063      	str	r3, [r4, #4]
 802b400:	6014      	str	r4, [r2, #0]
 802b402:	4628      	mov	r0, r5
 802b404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b408:	f7ff bcbe 	b.w	802ad88 <__malloc_unlock>
 802b40c:	42a3      	cmp	r3, r4
 802b40e:	d908      	bls.n	802b422 <_free_r+0x42>
 802b410:	6820      	ldr	r0, [r4, #0]
 802b412:	1821      	adds	r1, r4, r0
 802b414:	428b      	cmp	r3, r1
 802b416:	bf01      	itttt	eq
 802b418:	6819      	ldreq	r1, [r3, #0]
 802b41a:	685b      	ldreq	r3, [r3, #4]
 802b41c:	1809      	addeq	r1, r1, r0
 802b41e:	6021      	streq	r1, [r4, #0]
 802b420:	e7ed      	b.n	802b3fe <_free_r+0x1e>
 802b422:	461a      	mov	r2, r3
 802b424:	685b      	ldr	r3, [r3, #4]
 802b426:	b10b      	cbz	r3, 802b42c <_free_r+0x4c>
 802b428:	42a3      	cmp	r3, r4
 802b42a:	d9fa      	bls.n	802b422 <_free_r+0x42>
 802b42c:	6811      	ldr	r1, [r2, #0]
 802b42e:	1850      	adds	r0, r2, r1
 802b430:	42a0      	cmp	r0, r4
 802b432:	d10b      	bne.n	802b44c <_free_r+0x6c>
 802b434:	6820      	ldr	r0, [r4, #0]
 802b436:	4401      	add	r1, r0
 802b438:	1850      	adds	r0, r2, r1
 802b43a:	4283      	cmp	r3, r0
 802b43c:	6011      	str	r1, [r2, #0]
 802b43e:	d1e0      	bne.n	802b402 <_free_r+0x22>
 802b440:	6818      	ldr	r0, [r3, #0]
 802b442:	685b      	ldr	r3, [r3, #4]
 802b444:	6053      	str	r3, [r2, #4]
 802b446:	4408      	add	r0, r1
 802b448:	6010      	str	r0, [r2, #0]
 802b44a:	e7da      	b.n	802b402 <_free_r+0x22>
 802b44c:	d902      	bls.n	802b454 <_free_r+0x74>
 802b44e:	230c      	movs	r3, #12
 802b450:	602b      	str	r3, [r5, #0]
 802b452:	e7d6      	b.n	802b402 <_free_r+0x22>
 802b454:	6820      	ldr	r0, [r4, #0]
 802b456:	1821      	adds	r1, r4, r0
 802b458:	428b      	cmp	r3, r1
 802b45a:	bf04      	itt	eq
 802b45c:	6819      	ldreq	r1, [r3, #0]
 802b45e:	685b      	ldreq	r3, [r3, #4]
 802b460:	6063      	str	r3, [r4, #4]
 802b462:	bf04      	itt	eq
 802b464:	1809      	addeq	r1, r1, r0
 802b466:	6021      	streq	r1, [r4, #0]
 802b468:	6054      	str	r4, [r2, #4]
 802b46a:	e7ca      	b.n	802b402 <_free_r+0x22>
 802b46c:	bd38      	pop	{r3, r4, r5, pc}
 802b46e:	bf00      	nop
 802b470:	24016814 	.word	0x24016814

0802b474 <__ssputs_r>:
 802b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b478:	688e      	ldr	r6, [r1, #8]
 802b47a:	461f      	mov	r7, r3
 802b47c:	42be      	cmp	r6, r7
 802b47e:	680b      	ldr	r3, [r1, #0]
 802b480:	4682      	mov	sl, r0
 802b482:	460c      	mov	r4, r1
 802b484:	4690      	mov	r8, r2
 802b486:	d82d      	bhi.n	802b4e4 <__ssputs_r+0x70>
 802b488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b48c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802b490:	d026      	beq.n	802b4e0 <__ssputs_r+0x6c>
 802b492:	6965      	ldr	r5, [r4, #20]
 802b494:	6909      	ldr	r1, [r1, #16]
 802b496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b49a:	eba3 0901 	sub.w	r9, r3, r1
 802b49e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b4a2:	1c7b      	adds	r3, r7, #1
 802b4a4:	444b      	add	r3, r9
 802b4a6:	106d      	asrs	r5, r5, #1
 802b4a8:	429d      	cmp	r5, r3
 802b4aa:	bf38      	it	cc
 802b4ac:	461d      	movcc	r5, r3
 802b4ae:	0553      	lsls	r3, r2, #21
 802b4b0:	d527      	bpl.n	802b502 <__ssputs_r+0x8e>
 802b4b2:	4629      	mov	r1, r5
 802b4b4:	f7ff fbe2 	bl	802ac7c <_malloc_r>
 802b4b8:	4606      	mov	r6, r0
 802b4ba:	b360      	cbz	r0, 802b516 <__ssputs_r+0xa2>
 802b4bc:	6921      	ldr	r1, [r4, #16]
 802b4be:	464a      	mov	r2, r9
 802b4c0:	f7ff ff23 	bl	802b30a <memcpy>
 802b4c4:	89a3      	ldrh	r3, [r4, #12]
 802b4c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802b4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b4ce:	81a3      	strh	r3, [r4, #12]
 802b4d0:	6126      	str	r6, [r4, #16]
 802b4d2:	6165      	str	r5, [r4, #20]
 802b4d4:	444e      	add	r6, r9
 802b4d6:	eba5 0509 	sub.w	r5, r5, r9
 802b4da:	6026      	str	r6, [r4, #0]
 802b4dc:	60a5      	str	r5, [r4, #8]
 802b4de:	463e      	mov	r6, r7
 802b4e0:	42be      	cmp	r6, r7
 802b4e2:	d900      	bls.n	802b4e6 <__ssputs_r+0x72>
 802b4e4:	463e      	mov	r6, r7
 802b4e6:	6820      	ldr	r0, [r4, #0]
 802b4e8:	4632      	mov	r2, r6
 802b4ea:	4641      	mov	r1, r8
 802b4ec:	f000 fcf8 	bl	802bee0 <memmove>
 802b4f0:	68a3      	ldr	r3, [r4, #8]
 802b4f2:	1b9b      	subs	r3, r3, r6
 802b4f4:	60a3      	str	r3, [r4, #8]
 802b4f6:	6823      	ldr	r3, [r4, #0]
 802b4f8:	4433      	add	r3, r6
 802b4fa:	6023      	str	r3, [r4, #0]
 802b4fc:	2000      	movs	r0, #0
 802b4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b502:	462a      	mov	r2, r5
 802b504:	f000 fd28 	bl	802bf58 <_realloc_r>
 802b508:	4606      	mov	r6, r0
 802b50a:	2800      	cmp	r0, #0
 802b50c:	d1e0      	bne.n	802b4d0 <__ssputs_r+0x5c>
 802b50e:	6921      	ldr	r1, [r4, #16]
 802b510:	4650      	mov	r0, sl
 802b512:	f7ff ff65 	bl	802b3e0 <_free_r>
 802b516:	230c      	movs	r3, #12
 802b518:	f8ca 3000 	str.w	r3, [sl]
 802b51c:	89a3      	ldrh	r3, [r4, #12]
 802b51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b522:	81a3      	strh	r3, [r4, #12]
 802b524:	f04f 30ff 	mov.w	r0, #4294967295
 802b528:	e7e9      	b.n	802b4fe <__ssputs_r+0x8a>
	...

0802b52c <_svfiprintf_r>:
 802b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b530:	4698      	mov	r8, r3
 802b532:	898b      	ldrh	r3, [r1, #12]
 802b534:	061b      	lsls	r3, r3, #24
 802b536:	b09d      	sub	sp, #116	@ 0x74
 802b538:	4607      	mov	r7, r0
 802b53a:	460d      	mov	r5, r1
 802b53c:	4614      	mov	r4, r2
 802b53e:	d510      	bpl.n	802b562 <_svfiprintf_r+0x36>
 802b540:	690b      	ldr	r3, [r1, #16]
 802b542:	b973      	cbnz	r3, 802b562 <_svfiprintf_r+0x36>
 802b544:	2140      	movs	r1, #64	@ 0x40
 802b546:	f7ff fb99 	bl	802ac7c <_malloc_r>
 802b54a:	6028      	str	r0, [r5, #0]
 802b54c:	6128      	str	r0, [r5, #16]
 802b54e:	b930      	cbnz	r0, 802b55e <_svfiprintf_r+0x32>
 802b550:	230c      	movs	r3, #12
 802b552:	603b      	str	r3, [r7, #0]
 802b554:	f04f 30ff 	mov.w	r0, #4294967295
 802b558:	b01d      	add	sp, #116	@ 0x74
 802b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b55e:	2340      	movs	r3, #64	@ 0x40
 802b560:	616b      	str	r3, [r5, #20]
 802b562:	2300      	movs	r3, #0
 802b564:	9309      	str	r3, [sp, #36]	@ 0x24
 802b566:	2320      	movs	r3, #32
 802b568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b56c:	f8cd 800c 	str.w	r8, [sp, #12]
 802b570:	2330      	movs	r3, #48	@ 0x30
 802b572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802b710 <_svfiprintf_r+0x1e4>
 802b576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b57a:	f04f 0901 	mov.w	r9, #1
 802b57e:	4623      	mov	r3, r4
 802b580:	469a      	mov	sl, r3
 802b582:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b586:	b10a      	cbz	r2, 802b58c <_svfiprintf_r+0x60>
 802b588:	2a25      	cmp	r2, #37	@ 0x25
 802b58a:	d1f9      	bne.n	802b580 <_svfiprintf_r+0x54>
 802b58c:	ebba 0b04 	subs.w	fp, sl, r4
 802b590:	d00b      	beq.n	802b5aa <_svfiprintf_r+0x7e>
 802b592:	465b      	mov	r3, fp
 802b594:	4622      	mov	r2, r4
 802b596:	4629      	mov	r1, r5
 802b598:	4638      	mov	r0, r7
 802b59a:	f7ff ff6b 	bl	802b474 <__ssputs_r>
 802b59e:	3001      	adds	r0, #1
 802b5a0:	f000 80a7 	beq.w	802b6f2 <_svfiprintf_r+0x1c6>
 802b5a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b5a6:	445a      	add	r2, fp
 802b5a8:	9209      	str	r2, [sp, #36]	@ 0x24
 802b5aa:	f89a 3000 	ldrb.w	r3, [sl]
 802b5ae:	2b00      	cmp	r3, #0
 802b5b0:	f000 809f 	beq.w	802b6f2 <_svfiprintf_r+0x1c6>
 802b5b4:	2300      	movs	r3, #0
 802b5b6:	f04f 32ff 	mov.w	r2, #4294967295
 802b5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b5be:	f10a 0a01 	add.w	sl, sl, #1
 802b5c2:	9304      	str	r3, [sp, #16]
 802b5c4:	9307      	str	r3, [sp, #28]
 802b5c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b5ca:	931a      	str	r3, [sp, #104]	@ 0x68
 802b5cc:	4654      	mov	r4, sl
 802b5ce:	2205      	movs	r2, #5
 802b5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b5d4:	484e      	ldr	r0, [pc, #312]	@ (802b710 <_svfiprintf_r+0x1e4>)
 802b5d6:	f7d4 fe9b 	bl	8000310 <memchr>
 802b5da:	9a04      	ldr	r2, [sp, #16]
 802b5dc:	b9d8      	cbnz	r0, 802b616 <_svfiprintf_r+0xea>
 802b5de:	06d0      	lsls	r0, r2, #27
 802b5e0:	bf44      	itt	mi
 802b5e2:	2320      	movmi	r3, #32
 802b5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b5e8:	0711      	lsls	r1, r2, #28
 802b5ea:	bf44      	itt	mi
 802b5ec:	232b      	movmi	r3, #43	@ 0x2b
 802b5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b5f2:	f89a 3000 	ldrb.w	r3, [sl]
 802b5f6:	2b2a      	cmp	r3, #42	@ 0x2a
 802b5f8:	d015      	beq.n	802b626 <_svfiprintf_r+0xfa>
 802b5fa:	9a07      	ldr	r2, [sp, #28]
 802b5fc:	4654      	mov	r4, sl
 802b5fe:	2000      	movs	r0, #0
 802b600:	f04f 0c0a 	mov.w	ip, #10
 802b604:	4621      	mov	r1, r4
 802b606:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b60a:	3b30      	subs	r3, #48	@ 0x30
 802b60c:	2b09      	cmp	r3, #9
 802b60e:	d94b      	bls.n	802b6a8 <_svfiprintf_r+0x17c>
 802b610:	b1b0      	cbz	r0, 802b640 <_svfiprintf_r+0x114>
 802b612:	9207      	str	r2, [sp, #28]
 802b614:	e014      	b.n	802b640 <_svfiprintf_r+0x114>
 802b616:	eba0 0308 	sub.w	r3, r0, r8
 802b61a:	fa09 f303 	lsl.w	r3, r9, r3
 802b61e:	4313      	orrs	r3, r2
 802b620:	9304      	str	r3, [sp, #16]
 802b622:	46a2      	mov	sl, r4
 802b624:	e7d2      	b.n	802b5cc <_svfiprintf_r+0xa0>
 802b626:	9b03      	ldr	r3, [sp, #12]
 802b628:	1d19      	adds	r1, r3, #4
 802b62a:	681b      	ldr	r3, [r3, #0]
 802b62c:	9103      	str	r1, [sp, #12]
 802b62e:	2b00      	cmp	r3, #0
 802b630:	bfbb      	ittet	lt
 802b632:	425b      	neglt	r3, r3
 802b634:	f042 0202 	orrlt.w	r2, r2, #2
 802b638:	9307      	strge	r3, [sp, #28]
 802b63a:	9307      	strlt	r3, [sp, #28]
 802b63c:	bfb8      	it	lt
 802b63e:	9204      	strlt	r2, [sp, #16]
 802b640:	7823      	ldrb	r3, [r4, #0]
 802b642:	2b2e      	cmp	r3, #46	@ 0x2e
 802b644:	d10a      	bne.n	802b65c <_svfiprintf_r+0x130>
 802b646:	7863      	ldrb	r3, [r4, #1]
 802b648:	2b2a      	cmp	r3, #42	@ 0x2a
 802b64a:	d132      	bne.n	802b6b2 <_svfiprintf_r+0x186>
 802b64c:	9b03      	ldr	r3, [sp, #12]
 802b64e:	1d1a      	adds	r2, r3, #4
 802b650:	681b      	ldr	r3, [r3, #0]
 802b652:	9203      	str	r2, [sp, #12]
 802b654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b658:	3402      	adds	r4, #2
 802b65a:	9305      	str	r3, [sp, #20]
 802b65c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802b720 <_svfiprintf_r+0x1f4>
 802b660:	7821      	ldrb	r1, [r4, #0]
 802b662:	2203      	movs	r2, #3
 802b664:	4650      	mov	r0, sl
 802b666:	f7d4 fe53 	bl	8000310 <memchr>
 802b66a:	b138      	cbz	r0, 802b67c <_svfiprintf_r+0x150>
 802b66c:	9b04      	ldr	r3, [sp, #16]
 802b66e:	eba0 000a 	sub.w	r0, r0, sl
 802b672:	2240      	movs	r2, #64	@ 0x40
 802b674:	4082      	lsls	r2, r0
 802b676:	4313      	orrs	r3, r2
 802b678:	3401      	adds	r4, #1
 802b67a:	9304      	str	r3, [sp, #16]
 802b67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b680:	4824      	ldr	r0, [pc, #144]	@ (802b714 <_svfiprintf_r+0x1e8>)
 802b682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b686:	2206      	movs	r2, #6
 802b688:	f7d4 fe42 	bl	8000310 <memchr>
 802b68c:	2800      	cmp	r0, #0
 802b68e:	d036      	beq.n	802b6fe <_svfiprintf_r+0x1d2>
 802b690:	4b21      	ldr	r3, [pc, #132]	@ (802b718 <_svfiprintf_r+0x1ec>)
 802b692:	bb1b      	cbnz	r3, 802b6dc <_svfiprintf_r+0x1b0>
 802b694:	9b03      	ldr	r3, [sp, #12]
 802b696:	3307      	adds	r3, #7
 802b698:	f023 0307 	bic.w	r3, r3, #7
 802b69c:	3308      	adds	r3, #8
 802b69e:	9303      	str	r3, [sp, #12]
 802b6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b6a2:	4433      	add	r3, r6
 802b6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 802b6a6:	e76a      	b.n	802b57e <_svfiprintf_r+0x52>
 802b6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 802b6ac:	460c      	mov	r4, r1
 802b6ae:	2001      	movs	r0, #1
 802b6b0:	e7a8      	b.n	802b604 <_svfiprintf_r+0xd8>
 802b6b2:	2300      	movs	r3, #0
 802b6b4:	3401      	adds	r4, #1
 802b6b6:	9305      	str	r3, [sp, #20]
 802b6b8:	4619      	mov	r1, r3
 802b6ba:	f04f 0c0a 	mov.w	ip, #10
 802b6be:	4620      	mov	r0, r4
 802b6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b6c4:	3a30      	subs	r2, #48	@ 0x30
 802b6c6:	2a09      	cmp	r2, #9
 802b6c8:	d903      	bls.n	802b6d2 <_svfiprintf_r+0x1a6>
 802b6ca:	2b00      	cmp	r3, #0
 802b6cc:	d0c6      	beq.n	802b65c <_svfiprintf_r+0x130>
 802b6ce:	9105      	str	r1, [sp, #20]
 802b6d0:	e7c4      	b.n	802b65c <_svfiprintf_r+0x130>
 802b6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 802b6d6:	4604      	mov	r4, r0
 802b6d8:	2301      	movs	r3, #1
 802b6da:	e7f0      	b.n	802b6be <_svfiprintf_r+0x192>
 802b6dc:	ab03      	add	r3, sp, #12
 802b6de:	9300      	str	r3, [sp, #0]
 802b6e0:	462a      	mov	r2, r5
 802b6e2:	4b0e      	ldr	r3, [pc, #56]	@ (802b71c <_svfiprintf_r+0x1f0>)
 802b6e4:	a904      	add	r1, sp, #16
 802b6e6:	4638      	mov	r0, r7
 802b6e8:	f3af 8000 	nop.w
 802b6ec:	1c42      	adds	r2, r0, #1
 802b6ee:	4606      	mov	r6, r0
 802b6f0:	d1d6      	bne.n	802b6a0 <_svfiprintf_r+0x174>
 802b6f2:	89ab      	ldrh	r3, [r5, #12]
 802b6f4:	065b      	lsls	r3, r3, #25
 802b6f6:	f53f af2d 	bmi.w	802b554 <_svfiprintf_r+0x28>
 802b6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b6fc:	e72c      	b.n	802b558 <_svfiprintf_r+0x2c>
 802b6fe:	ab03      	add	r3, sp, #12
 802b700:	9300      	str	r3, [sp, #0]
 802b702:	462a      	mov	r2, r5
 802b704:	4b05      	ldr	r3, [pc, #20]	@ (802b71c <_svfiprintf_r+0x1f0>)
 802b706:	a904      	add	r1, sp, #16
 802b708:	4638      	mov	r0, r7
 802b70a:	f000 f9bb 	bl	802ba84 <_printf_i>
 802b70e:	e7ed      	b.n	802b6ec <_svfiprintf_r+0x1c0>
 802b710:	08030de8 	.word	0x08030de8
 802b714:	08030df2 	.word	0x08030df2
 802b718:	00000000 	.word	0x00000000
 802b71c:	0802b475 	.word	0x0802b475
 802b720:	08030dee 	.word	0x08030dee

0802b724 <__sfputc_r>:
 802b724:	6893      	ldr	r3, [r2, #8]
 802b726:	3b01      	subs	r3, #1
 802b728:	2b00      	cmp	r3, #0
 802b72a:	b410      	push	{r4}
 802b72c:	6093      	str	r3, [r2, #8]
 802b72e:	da08      	bge.n	802b742 <__sfputc_r+0x1e>
 802b730:	6994      	ldr	r4, [r2, #24]
 802b732:	42a3      	cmp	r3, r4
 802b734:	db01      	blt.n	802b73a <__sfputc_r+0x16>
 802b736:	290a      	cmp	r1, #10
 802b738:	d103      	bne.n	802b742 <__sfputc_r+0x1e>
 802b73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b73e:	f7ff bc6e 	b.w	802b01e <__swbuf_r>
 802b742:	6813      	ldr	r3, [r2, #0]
 802b744:	1c58      	adds	r0, r3, #1
 802b746:	6010      	str	r0, [r2, #0]
 802b748:	7019      	strb	r1, [r3, #0]
 802b74a:	4608      	mov	r0, r1
 802b74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b750:	4770      	bx	lr

0802b752 <__sfputs_r>:
 802b752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b754:	4606      	mov	r6, r0
 802b756:	460f      	mov	r7, r1
 802b758:	4614      	mov	r4, r2
 802b75a:	18d5      	adds	r5, r2, r3
 802b75c:	42ac      	cmp	r4, r5
 802b75e:	d101      	bne.n	802b764 <__sfputs_r+0x12>
 802b760:	2000      	movs	r0, #0
 802b762:	e007      	b.n	802b774 <__sfputs_r+0x22>
 802b764:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b768:	463a      	mov	r2, r7
 802b76a:	4630      	mov	r0, r6
 802b76c:	f7ff ffda 	bl	802b724 <__sfputc_r>
 802b770:	1c43      	adds	r3, r0, #1
 802b772:	d1f3      	bne.n	802b75c <__sfputs_r+0xa>
 802b774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b778 <_vfiprintf_r>:
 802b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b77c:	460d      	mov	r5, r1
 802b77e:	b09d      	sub	sp, #116	@ 0x74
 802b780:	4614      	mov	r4, r2
 802b782:	4698      	mov	r8, r3
 802b784:	4606      	mov	r6, r0
 802b786:	b118      	cbz	r0, 802b790 <_vfiprintf_r+0x18>
 802b788:	6a03      	ldr	r3, [r0, #32]
 802b78a:	b90b      	cbnz	r3, 802b790 <_vfiprintf_r+0x18>
 802b78c:	f7ff fb9c 	bl	802aec8 <__sinit>
 802b790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b792:	07d9      	lsls	r1, r3, #31
 802b794:	d405      	bmi.n	802b7a2 <_vfiprintf_r+0x2a>
 802b796:	89ab      	ldrh	r3, [r5, #12]
 802b798:	059a      	lsls	r2, r3, #22
 802b79a:	d402      	bmi.n	802b7a2 <_vfiprintf_r+0x2a>
 802b79c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b79e:	f7ff fdb2 	bl	802b306 <__retarget_lock_acquire_recursive>
 802b7a2:	89ab      	ldrh	r3, [r5, #12]
 802b7a4:	071b      	lsls	r3, r3, #28
 802b7a6:	d501      	bpl.n	802b7ac <_vfiprintf_r+0x34>
 802b7a8:	692b      	ldr	r3, [r5, #16]
 802b7aa:	b99b      	cbnz	r3, 802b7d4 <_vfiprintf_r+0x5c>
 802b7ac:	4629      	mov	r1, r5
 802b7ae:	4630      	mov	r0, r6
 802b7b0:	f7ff fc74 	bl	802b09c <__swsetup_r>
 802b7b4:	b170      	cbz	r0, 802b7d4 <_vfiprintf_r+0x5c>
 802b7b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b7b8:	07dc      	lsls	r4, r3, #31
 802b7ba:	d504      	bpl.n	802b7c6 <_vfiprintf_r+0x4e>
 802b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 802b7c0:	b01d      	add	sp, #116	@ 0x74
 802b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7c6:	89ab      	ldrh	r3, [r5, #12]
 802b7c8:	0598      	lsls	r0, r3, #22
 802b7ca:	d4f7      	bmi.n	802b7bc <_vfiprintf_r+0x44>
 802b7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b7ce:	f7ff fd9b 	bl	802b308 <__retarget_lock_release_recursive>
 802b7d2:	e7f3      	b.n	802b7bc <_vfiprintf_r+0x44>
 802b7d4:	2300      	movs	r3, #0
 802b7d6:	9309      	str	r3, [sp, #36]	@ 0x24
 802b7d8:	2320      	movs	r3, #32
 802b7da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b7de:	f8cd 800c 	str.w	r8, [sp, #12]
 802b7e2:	2330      	movs	r3, #48	@ 0x30
 802b7e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802b994 <_vfiprintf_r+0x21c>
 802b7e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b7ec:	f04f 0901 	mov.w	r9, #1
 802b7f0:	4623      	mov	r3, r4
 802b7f2:	469a      	mov	sl, r3
 802b7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b7f8:	b10a      	cbz	r2, 802b7fe <_vfiprintf_r+0x86>
 802b7fa:	2a25      	cmp	r2, #37	@ 0x25
 802b7fc:	d1f9      	bne.n	802b7f2 <_vfiprintf_r+0x7a>
 802b7fe:	ebba 0b04 	subs.w	fp, sl, r4
 802b802:	d00b      	beq.n	802b81c <_vfiprintf_r+0xa4>
 802b804:	465b      	mov	r3, fp
 802b806:	4622      	mov	r2, r4
 802b808:	4629      	mov	r1, r5
 802b80a:	4630      	mov	r0, r6
 802b80c:	f7ff ffa1 	bl	802b752 <__sfputs_r>
 802b810:	3001      	adds	r0, #1
 802b812:	f000 80a7 	beq.w	802b964 <_vfiprintf_r+0x1ec>
 802b816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b818:	445a      	add	r2, fp
 802b81a:	9209      	str	r2, [sp, #36]	@ 0x24
 802b81c:	f89a 3000 	ldrb.w	r3, [sl]
 802b820:	2b00      	cmp	r3, #0
 802b822:	f000 809f 	beq.w	802b964 <_vfiprintf_r+0x1ec>
 802b826:	2300      	movs	r3, #0
 802b828:	f04f 32ff 	mov.w	r2, #4294967295
 802b82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b830:	f10a 0a01 	add.w	sl, sl, #1
 802b834:	9304      	str	r3, [sp, #16]
 802b836:	9307      	str	r3, [sp, #28]
 802b838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b83c:	931a      	str	r3, [sp, #104]	@ 0x68
 802b83e:	4654      	mov	r4, sl
 802b840:	2205      	movs	r2, #5
 802b842:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b846:	4853      	ldr	r0, [pc, #332]	@ (802b994 <_vfiprintf_r+0x21c>)
 802b848:	f7d4 fd62 	bl	8000310 <memchr>
 802b84c:	9a04      	ldr	r2, [sp, #16]
 802b84e:	b9d8      	cbnz	r0, 802b888 <_vfiprintf_r+0x110>
 802b850:	06d1      	lsls	r1, r2, #27
 802b852:	bf44      	itt	mi
 802b854:	2320      	movmi	r3, #32
 802b856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b85a:	0713      	lsls	r3, r2, #28
 802b85c:	bf44      	itt	mi
 802b85e:	232b      	movmi	r3, #43	@ 0x2b
 802b860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b864:	f89a 3000 	ldrb.w	r3, [sl]
 802b868:	2b2a      	cmp	r3, #42	@ 0x2a
 802b86a:	d015      	beq.n	802b898 <_vfiprintf_r+0x120>
 802b86c:	9a07      	ldr	r2, [sp, #28]
 802b86e:	4654      	mov	r4, sl
 802b870:	2000      	movs	r0, #0
 802b872:	f04f 0c0a 	mov.w	ip, #10
 802b876:	4621      	mov	r1, r4
 802b878:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b87c:	3b30      	subs	r3, #48	@ 0x30
 802b87e:	2b09      	cmp	r3, #9
 802b880:	d94b      	bls.n	802b91a <_vfiprintf_r+0x1a2>
 802b882:	b1b0      	cbz	r0, 802b8b2 <_vfiprintf_r+0x13a>
 802b884:	9207      	str	r2, [sp, #28]
 802b886:	e014      	b.n	802b8b2 <_vfiprintf_r+0x13a>
 802b888:	eba0 0308 	sub.w	r3, r0, r8
 802b88c:	fa09 f303 	lsl.w	r3, r9, r3
 802b890:	4313      	orrs	r3, r2
 802b892:	9304      	str	r3, [sp, #16]
 802b894:	46a2      	mov	sl, r4
 802b896:	e7d2      	b.n	802b83e <_vfiprintf_r+0xc6>
 802b898:	9b03      	ldr	r3, [sp, #12]
 802b89a:	1d19      	adds	r1, r3, #4
 802b89c:	681b      	ldr	r3, [r3, #0]
 802b89e:	9103      	str	r1, [sp, #12]
 802b8a0:	2b00      	cmp	r3, #0
 802b8a2:	bfbb      	ittet	lt
 802b8a4:	425b      	neglt	r3, r3
 802b8a6:	f042 0202 	orrlt.w	r2, r2, #2
 802b8aa:	9307      	strge	r3, [sp, #28]
 802b8ac:	9307      	strlt	r3, [sp, #28]
 802b8ae:	bfb8      	it	lt
 802b8b0:	9204      	strlt	r2, [sp, #16]
 802b8b2:	7823      	ldrb	r3, [r4, #0]
 802b8b4:	2b2e      	cmp	r3, #46	@ 0x2e
 802b8b6:	d10a      	bne.n	802b8ce <_vfiprintf_r+0x156>
 802b8b8:	7863      	ldrb	r3, [r4, #1]
 802b8ba:	2b2a      	cmp	r3, #42	@ 0x2a
 802b8bc:	d132      	bne.n	802b924 <_vfiprintf_r+0x1ac>
 802b8be:	9b03      	ldr	r3, [sp, #12]
 802b8c0:	1d1a      	adds	r2, r3, #4
 802b8c2:	681b      	ldr	r3, [r3, #0]
 802b8c4:	9203      	str	r2, [sp, #12]
 802b8c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b8ca:	3402      	adds	r4, #2
 802b8cc:	9305      	str	r3, [sp, #20]
 802b8ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b9a4 <_vfiprintf_r+0x22c>
 802b8d2:	7821      	ldrb	r1, [r4, #0]
 802b8d4:	2203      	movs	r2, #3
 802b8d6:	4650      	mov	r0, sl
 802b8d8:	f7d4 fd1a 	bl	8000310 <memchr>
 802b8dc:	b138      	cbz	r0, 802b8ee <_vfiprintf_r+0x176>
 802b8de:	9b04      	ldr	r3, [sp, #16]
 802b8e0:	eba0 000a 	sub.w	r0, r0, sl
 802b8e4:	2240      	movs	r2, #64	@ 0x40
 802b8e6:	4082      	lsls	r2, r0
 802b8e8:	4313      	orrs	r3, r2
 802b8ea:	3401      	adds	r4, #1
 802b8ec:	9304      	str	r3, [sp, #16]
 802b8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b8f2:	4829      	ldr	r0, [pc, #164]	@ (802b998 <_vfiprintf_r+0x220>)
 802b8f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b8f8:	2206      	movs	r2, #6
 802b8fa:	f7d4 fd09 	bl	8000310 <memchr>
 802b8fe:	2800      	cmp	r0, #0
 802b900:	d03f      	beq.n	802b982 <_vfiprintf_r+0x20a>
 802b902:	4b26      	ldr	r3, [pc, #152]	@ (802b99c <_vfiprintf_r+0x224>)
 802b904:	bb1b      	cbnz	r3, 802b94e <_vfiprintf_r+0x1d6>
 802b906:	9b03      	ldr	r3, [sp, #12]
 802b908:	3307      	adds	r3, #7
 802b90a:	f023 0307 	bic.w	r3, r3, #7
 802b90e:	3308      	adds	r3, #8
 802b910:	9303      	str	r3, [sp, #12]
 802b912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b914:	443b      	add	r3, r7
 802b916:	9309      	str	r3, [sp, #36]	@ 0x24
 802b918:	e76a      	b.n	802b7f0 <_vfiprintf_r+0x78>
 802b91a:	fb0c 3202 	mla	r2, ip, r2, r3
 802b91e:	460c      	mov	r4, r1
 802b920:	2001      	movs	r0, #1
 802b922:	e7a8      	b.n	802b876 <_vfiprintf_r+0xfe>
 802b924:	2300      	movs	r3, #0
 802b926:	3401      	adds	r4, #1
 802b928:	9305      	str	r3, [sp, #20]
 802b92a:	4619      	mov	r1, r3
 802b92c:	f04f 0c0a 	mov.w	ip, #10
 802b930:	4620      	mov	r0, r4
 802b932:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b936:	3a30      	subs	r2, #48	@ 0x30
 802b938:	2a09      	cmp	r2, #9
 802b93a:	d903      	bls.n	802b944 <_vfiprintf_r+0x1cc>
 802b93c:	2b00      	cmp	r3, #0
 802b93e:	d0c6      	beq.n	802b8ce <_vfiprintf_r+0x156>
 802b940:	9105      	str	r1, [sp, #20]
 802b942:	e7c4      	b.n	802b8ce <_vfiprintf_r+0x156>
 802b944:	fb0c 2101 	mla	r1, ip, r1, r2
 802b948:	4604      	mov	r4, r0
 802b94a:	2301      	movs	r3, #1
 802b94c:	e7f0      	b.n	802b930 <_vfiprintf_r+0x1b8>
 802b94e:	ab03      	add	r3, sp, #12
 802b950:	9300      	str	r3, [sp, #0]
 802b952:	462a      	mov	r2, r5
 802b954:	4b12      	ldr	r3, [pc, #72]	@ (802b9a0 <_vfiprintf_r+0x228>)
 802b956:	a904      	add	r1, sp, #16
 802b958:	4630      	mov	r0, r6
 802b95a:	f3af 8000 	nop.w
 802b95e:	4607      	mov	r7, r0
 802b960:	1c78      	adds	r0, r7, #1
 802b962:	d1d6      	bne.n	802b912 <_vfiprintf_r+0x19a>
 802b964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b966:	07d9      	lsls	r1, r3, #31
 802b968:	d405      	bmi.n	802b976 <_vfiprintf_r+0x1fe>
 802b96a:	89ab      	ldrh	r3, [r5, #12]
 802b96c:	059a      	lsls	r2, r3, #22
 802b96e:	d402      	bmi.n	802b976 <_vfiprintf_r+0x1fe>
 802b970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b972:	f7ff fcc9 	bl	802b308 <__retarget_lock_release_recursive>
 802b976:	89ab      	ldrh	r3, [r5, #12]
 802b978:	065b      	lsls	r3, r3, #25
 802b97a:	f53f af1f 	bmi.w	802b7bc <_vfiprintf_r+0x44>
 802b97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b980:	e71e      	b.n	802b7c0 <_vfiprintf_r+0x48>
 802b982:	ab03      	add	r3, sp, #12
 802b984:	9300      	str	r3, [sp, #0]
 802b986:	462a      	mov	r2, r5
 802b988:	4b05      	ldr	r3, [pc, #20]	@ (802b9a0 <_vfiprintf_r+0x228>)
 802b98a:	a904      	add	r1, sp, #16
 802b98c:	4630      	mov	r0, r6
 802b98e:	f000 f879 	bl	802ba84 <_printf_i>
 802b992:	e7e4      	b.n	802b95e <_vfiprintf_r+0x1e6>
 802b994:	08030de8 	.word	0x08030de8
 802b998:	08030df2 	.word	0x08030df2
 802b99c:	00000000 	.word	0x00000000
 802b9a0:	0802b753 	.word	0x0802b753
 802b9a4:	08030dee 	.word	0x08030dee

0802b9a8 <_printf_common>:
 802b9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b9ac:	4616      	mov	r6, r2
 802b9ae:	4698      	mov	r8, r3
 802b9b0:	688a      	ldr	r2, [r1, #8]
 802b9b2:	690b      	ldr	r3, [r1, #16]
 802b9b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802b9b8:	4293      	cmp	r3, r2
 802b9ba:	bfb8      	it	lt
 802b9bc:	4613      	movlt	r3, r2
 802b9be:	6033      	str	r3, [r6, #0]
 802b9c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802b9c4:	4607      	mov	r7, r0
 802b9c6:	460c      	mov	r4, r1
 802b9c8:	b10a      	cbz	r2, 802b9ce <_printf_common+0x26>
 802b9ca:	3301      	adds	r3, #1
 802b9cc:	6033      	str	r3, [r6, #0]
 802b9ce:	6823      	ldr	r3, [r4, #0]
 802b9d0:	0699      	lsls	r1, r3, #26
 802b9d2:	bf42      	ittt	mi
 802b9d4:	6833      	ldrmi	r3, [r6, #0]
 802b9d6:	3302      	addmi	r3, #2
 802b9d8:	6033      	strmi	r3, [r6, #0]
 802b9da:	6825      	ldr	r5, [r4, #0]
 802b9dc:	f015 0506 	ands.w	r5, r5, #6
 802b9e0:	d106      	bne.n	802b9f0 <_printf_common+0x48>
 802b9e2:	f104 0a19 	add.w	sl, r4, #25
 802b9e6:	68e3      	ldr	r3, [r4, #12]
 802b9e8:	6832      	ldr	r2, [r6, #0]
 802b9ea:	1a9b      	subs	r3, r3, r2
 802b9ec:	42ab      	cmp	r3, r5
 802b9ee:	dc26      	bgt.n	802ba3e <_printf_common+0x96>
 802b9f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802b9f4:	6822      	ldr	r2, [r4, #0]
 802b9f6:	3b00      	subs	r3, #0
 802b9f8:	bf18      	it	ne
 802b9fa:	2301      	movne	r3, #1
 802b9fc:	0692      	lsls	r2, r2, #26
 802b9fe:	d42b      	bmi.n	802ba58 <_printf_common+0xb0>
 802ba00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802ba04:	4641      	mov	r1, r8
 802ba06:	4638      	mov	r0, r7
 802ba08:	47c8      	blx	r9
 802ba0a:	3001      	adds	r0, #1
 802ba0c:	d01e      	beq.n	802ba4c <_printf_common+0xa4>
 802ba0e:	6823      	ldr	r3, [r4, #0]
 802ba10:	6922      	ldr	r2, [r4, #16]
 802ba12:	f003 0306 	and.w	r3, r3, #6
 802ba16:	2b04      	cmp	r3, #4
 802ba18:	bf02      	ittt	eq
 802ba1a:	68e5      	ldreq	r5, [r4, #12]
 802ba1c:	6833      	ldreq	r3, [r6, #0]
 802ba1e:	1aed      	subeq	r5, r5, r3
 802ba20:	68a3      	ldr	r3, [r4, #8]
 802ba22:	bf0c      	ite	eq
 802ba24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ba28:	2500      	movne	r5, #0
 802ba2a:	4293      	cmp	r3, r2
 802ba2c:	bfc4      	itt	gt
 802ba2e:	1a9b      	subgt	r3, r3, r2
 802ba30:	18ed      	addgt	r5, r5, r3
 802ba32:	2600      	movs	r6, #0
 802ba34:	341a      	adds	r4, #26
 802ba36:	42b5      	cmp	r5, r6
 802ba38:	d11a      	bne.n	802ba70 <_printf_common+0xc8>
 802ba3a:	2000      	movs	r0, #0
 802ba3c:	e008      	b.n	802ba50 <_printf_common+0xa8>
 802ba3e:	2301      	movs	r3, #1
 802ba40:	4652      	mov	r2, sl
 802ba42:	4641      	mov	r1, r8
 802ba44:	4638      	mov	r0, r7
 802ba46:	47c8      	blx	r9
 802ba48:	3001      	adds	r0, #1
 802ba4a:	d103      	bne.n	802ba54 <_printf_common+0xac>
 802ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 802ba50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ba54:	3501      	adds	r5, #1
 802ba56:	e7c6      	b.n	802b9e6 <_printf_common+0x3e>
 802ba58:	18e1      	adds	r1, r4, r3
 802ba5a:	1c5a      	adds	r2, r3, #1
 802ba5c:	2030      	movs	r0, #48	@ 0x30
 802ba5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802ba62:	4422      	add	r2, r4
 802ba64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802ba68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802ba6c:	3302      	adds	r3, #2
 802ba6e:	e7c7      	b.n	802ba00 <_printf_common+0x58>
 802ba70:	2301      	movs	r3, #1
 802ba72:	4622      	mov	r2, r4
 802ba74:	4641      	mov	r1, r8
 802ba76:	4638      	mov	r0, r7
 802ba78:	47c8      	blx	r9
 802ba7a:	3001      	adds	r0, #1
 802ba7c:	d0e6      	beq.n	802ba4c <_printf_common+0xa4>
 802ba7e:	3601      	adds	r6, #1
 802ba80:	e7d9      	b.n	802ba36 <_printf_common+0x8e>
	...

0802ba84 <_printf_i>:
 802ba84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ba88:	7e0f      	ldrb	r7, [r1, #24]
 802ba8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802ba8c:	2f78      	cmp	r7, #120	@ 0x78
 802ba8e:	4691      	mov	r9, r2
 802ba90:	4680      	mov	r8, r0
 802ba92:	460c      	mov	r4, r1
 802ba94:	469a      	mov	sl, r3
 802ba96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802ba9a:	d807      	bhi.n	802baac <_printf_i+0x28>
 802ba9c:	2f62      	cmp	r7, #98	@ 0x62
 802ba9e:	d80a      	bhi.n	802bab6 <_printf_i+0x32>
 802baa0:	2f00      	cmp	r7, #0
 802baa2:	f000 80d2 	beq.w	802bc4a <_printf_i+0x1c6>
 802baa6:	2f58      	cmp	r7, #88	@ 0x58
 802baa8:	f000 80b9 	beq.w	802bc1e <_printf_i+0x19a>
 802baac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802bab4:	e03a      	b.n	802bb2c <_printf_i+0xa8>
 802bab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802baba:	2b15      	cmp	r3, #21
 802babc:	d8f6      	bhi.n	802baac <_printf_i+0x28>
 802babe:	a101      	add	r1, pc, #4	@ (adr r1, 802bac4 <_printf_i+0x40>)
 802bac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802bac4:	0802bb1d 	.word	0x0802bb1d
 802bac8:	0802bb31 	.word	0x0802bb31
 802bacc:	0802baad 	.word	0x0802baad
 802bad0:	0802baad 	.word	0x0802baad
 802bad4:	0802baad 	.word	0x0802baad
 802bad8:	0802baad 	.word	0x0802baad
 802badc:	0802bb31 	.word	0x0802bb31
 802bae0:	0802baad 	.word	0x0802baad
 802bae4:	0802baad 	.word	0x0802baad
 802bae8:	0802baad 	.word	0x0802baad
 802baec:	0802baad 	.word	0x0802baad
 802baf0:	0802bc31 	.word	0x0802bc31
 802baf4:	0802bb5b 	.word	0x0802bb5b
 802baf8:	0802bbeb 	.word	0x0802bbeb
 802bafc:	0802baad 	.word	0x0802baad
 802bb00:	0802baad 	.word	0x0802baad
 802bb04:	0802bc53 	.word	0x0802bc53
 802bb08:	0802baad 	.word	0x0802baad
 802bb0c:	0802bb5b 	.word	0x0802bb5b
 802bb10:	0802baad 	.word	0x0802baad
 802bb14:	0802baad 	.word	0x0802baad
 802bb18:	0802bbf3 	.word	0x0802bbf3
 802bb1c:	6833      	ldr	r3, [r6, #0]
 802bb1e:	1d1a      	adds	r2, r3, #4
 802bb20:	681b      	ldr	r3, [r3, #0]
 802bb22:	6032      	str	r2, [r6, #0]
 802bb24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bb28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802bb2c:	2301      	movs	r3, #1
 802bb2e:	e09d      	b.n	802bc6c <_printf_i+0x1e8>
 802bb30:	6833      	ldr	r3, [r6, #0]
 802bb32:	6820      	ldr	r0, [r4, #0]
 802bb34:	1d19      	adds	r1, r3, #4
 802bb36:	6031      	str	r1, [r6, #0]
 802bb38:	0606      	lsls	r6, r0, #24
 802bb3a:	d501      	bpl.n	802bb40 <_printf_i+0xbc>
 802bb3c:	681d      	ldr	r5, [r3, #0]
 802bb3e:	e003      	b.n	802bb48 <_printf_i+0xc4>
 802bb40:	0645      	lsls	r5, r0, #25
 802bb42:	d5fb      	bpl.n	802bb3c <_printf_i+0xb8>
 802bb44:	f9b3 5000 	ldrsh.w	r5, [r3]
 802bb48:	2d00      	cmp	r5, #0
 802bb4a:	da03      	bge.n	802bb54 <_printf_i+0xd0>
 802bb4c:	232d      	movs	r3, #45	@ 0x2d
 802bb4e:	426d      	negs	r5, r5
 802bb50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bb54:	4859      	ldr	r0, [pc, #356]	@ (802bcbc <_printf_i+0x238>)
 802bb56:	230a      	movs	r3, #10
 802bb58:	e011      	b.n	802bb7e <_printf_i+0xfa>
 802bb5a:	6821      	ldr	r1, [r4, #0]
 802bb5c:	6833      	ldr	r3, [r6, #0]
 802bb5e:	0608      	lsls	r0, r1, #24
 802bb60:	f853 5b04 	ldr.w	r5, [r3], #4
 802bb64:	d402      	bmi.n	802bb6c <_printf_i+0xe8>
 802bb66:	0649      	lsls	r1, r1, #25
 802bb68:	bf48      	it	mi
 802bb6a:	b2ad      	uxthmi	r5, r5
 802bb6c:	2f6f      	cmp	r7, #111	@ 0x6f
 802bb6e:	4853      	ldr	r0, [pc, #332]	@ (802bcbc <_printf_i+0x238>)
 802bb70:	6033      	str	r3, [r6, #0]
 802bb72:	bf14      	ite	ne
 802bb74:	230a      	movne	r3, #10
 802bb76:	2308      	moveq	r3, #8
 802bb78:	2100      	movs	r1, #0
 802bb7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802bb7e:	6866      	ldr	r6, [r4, #4]
 802bb80:	60a6      	str	r6, [r4, #8]
 802bb82:	2e00      	cmp	r6, #0
 802bb84:	bfa2      	ittt	ge
 802bb86:	6821      	ldrge	r1, [r4, #0]
 802bb88:	f021 0104 	bicge.w	r1, r1, #4
 802bb8c:	6021      	strge	r1, [r4, #0]
 802bb8e:	b90d      	cbnz	r5, 802bb94 <_printf_i+0x110>
 802bb90:	2e00      	cmp	r6, #0
 802bb92:	d04b      	beq.n	802bc2c <_printf_i+0x1a8>
 802bb94:	4616      	mov	r6, r2
 802bb96:	fbb5 f1f3 	udiv	r1, r5, r3
 802bb9a:	fb03 5711 	mls	r7, r3, r1, r5
 802bb9e:	5dc7      	ldrb	r7, [r0, r7]
 802bba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802bba4:	462f      	mov	r7, r5
 802bba6:	42bb      	cmp	r3, r7
 802bba8:	460d      	mov	r5, r1
 802bbaa:	d9f4      	bls.n	802bb96 <_printf_i+0x112>
 802bbac:	2b08      	cmp	r3, #8
 802bbae:	d10b      	bne.n	802bbc8 <_printf_i+0x144>
 802bbb0:	6823      	ldr	r3, [r4, #0]
 802bbb2:	07df      	lsls	r7, r3, #31
 802bbb4:	d508      	bpl.n	802bbc8 <_printf_i+0x144>
 802bbb6:	6923      	ldr	r3, [r4, #16]
 802bbb8:	6861      	ldr	r1, [r4, #4]
 802bbba:	4299      	cmp	r1, r3
 802bbbc:	bfde      	ittt	le
 802bbbe:	2330      	movle	r3, #48	@ 0x30
 802bbc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 802bbc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 802bbc8:	1b92      	subs	r2, r2, r6
 802bbca:	6122      	str	r2, [r4, #16]
 802bbcc:	f8cd a000 	str.w	sl, [sp]
 802bbd0:	464b      	mov	r3, r9
 802bbd2:	aa03      	add	r2, sp, #12
 802bbd4:	4621      	mov	r1, r4
 802bbd6:	4640      	mov	r0, r8
 802bbd8:	f7ff fee6 	bl	802b9a8 <_printf_common>
 802bbdc:	3001      	adds	r0, #1
 802bbde:	d14a      	bne.n	802bc76 <_printf_i+0x1f2>
 802bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 802bbe4:	b004      	add	sp, #16
 802bbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bbea:	6823      	ldr	r3, [r4, #0]
 802bbec:	f043 0320 	orr.w	r3, r3, #32
 802bbf0:	6023      	str	r3, [r4, #0]
 802bbf2:	4833      	ldr	r0, [pc, #204]	@ (802bcc0 <_printf_i+0x23c>)
 802bbf4:	2778      	movs	r7, #120	@ 0x78
 802bbf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802bbfa:	6823      	ldr	r3, [r4, #0]
 802bbfc:	6831      	ldr	r1, [r6, #0]
 802bbfe:	061f      	lsls	r7, r3, #24
 802bc00:	f851 5b04 	ldr.w	r5, [r1], #4
 802bc04:	d402      	bmi.n	802bc0c <_printf_i+0x188>
 802bc06:	065f      	lsls	r7, r3, #25
 802bc08:	bf48      	it	mi
 802bc0a:	b2ad      	uxthmi	r5, r5
 802bc0c:	6031      	str	r1, [r6, #0]
 802bc0e:	07d9      	lsls	r1, r3, #31
 802bc10:	bf44      	itt	mi
 802bc12:	f043 0320 	orrmi.w	r3, r3, #32
 802bc16:	6023      	strmi	r3, [r4, #0]
 802bc18:	b11d      	cbz	r5, 802bc22 <_printf_i+0x19e>
 802bc1a:	2310      	movs	r3, #16
 802bc1c:	e7ac      	b.n	802bb78 <_printf_i+0xf4>
 802bc1e:	4827      	ldr	r0, [pc, #156]	@ (802bcbc <_printf_i+0x238>)
 802bc20:	e7e9      	b.n	802bbf6 <_printf_i+0x172>
 802bc22:	6823      	ldr	r3, [r4, #0]
 802bc24:	f023 0320 	bic.w	r3, r3, #32
 802bc28:	6023      	str	r3, [r4, #0]
 802bc2a:	e7f6      	b.n	802bc1a <_printf_i+0x196>
 802bc2c:	4616      	mov	r6, r2
 802bc2e:	e7bd      	b.n	802bbac <_printf_i+0x128>
 802bc30:	6833      	ldr	r3, [r6, #0]
 802bc32:	6825      	ldr	r5, [r4, #0]
 802bc34:	6961      	ldr	r1, [r4, #20]
 802bc36:	1d18      	adds	r0, r3, #4
 802bc38:	6030      	str	r0, [r6, #0]
 802bc3a:	062e      	lsls	r6, r5, #24
 802bc3c:	681b      	ldr	r3, [r3, #0]
 802bc3e:	d501      	bpl.n	802bc44 <_printf_i+0x1c0>
 802bc40:	6019      	str	r1, [r3, #0]
 802bc42:	e002      	b.n	802bc4a <_printf_i+0x1c6>
 802bc44:	0668      	lsls	r0, r5, #25
 802bc46:	d5fb      	bpl.n	802bc40 <_printf_i+0x1bc>
 802bc48:	8019      	strh	r1, [r3, #0]
 802bc4a:	2300      	movs	r3, #0
 802bc4c:	6123      	str	r3, [r4, #16]
 802bc4e:	4616      	mov	r6, r2
 802bc50:	e7bc      	b.n	802bbcc <_printf_i+0x148>
 802bc52:	6833      	ldr	r3, [r6, #0]
 802bc54:	1d1a      	adds	r2, r3, #4
 802bc56:	6032      	str	r2, [r6, #0]
 802bc58:	681e      	ldr	r6, [r3, #0]
 802bc5a:	6862      	ldr	r2, [r4, #4]
 802bc5c:	2100      	movs	r1, #0
 802bc5e:	4630      	mov	r0, r6
 802bc60:	f7d4 fb56 	bl	8000310 <memchr>
 802bc64:	b108      	cbz	r0, 802bc6a <_printf_i+0x1e6>
 802bc66:	1b80      	subs	r0, r0, r6
 802bc68:	6060      	str	r0, [r4, #4]
 802bc6a:	6863      	ldr	r3, [r4, #4]
 802bc6c:	6123      	str	r3, [r4, #16]
 802bc6e:	2300      	movs	r3, #0
 802bc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bc74:	e7aa      	b.n	802bbcc <_printf_i+0x148>
 802bc76:	6923      	ldr	r3, [r4, #16]
 802bc78:	4632      	mov	r2, r6
 802bc7a:	4649      	mov	r1, r9
 802bc7c:	4640      	mov	r0, r8
 802bc7e:	47d0      	blx	sl
 802bc80:	3001      	adds	r0, #1
 802bc82:	d0ad      	beq.n	802bbe0 <_printf_i+0x15c>
 802bc84:	6823      	ldr	r3, [r4, #0]
 802bc86:	079b      	lsls	r3, r3, #30
 802bc88:	d413      	bmi.n	802bcb2 <_printf_i+0x22e>
 802bc8a:	68e0      	ldr	r0, [r4, #12]
 802bc8c:	9b03      	ldr	r3, [sp, #12]
 802bc8e:	4298      	cmp	r0, r3
 802bc90:	bfb8      	it	lt
 802bc92:	4618      	movlt	r0, r3
 802bc94:	e7a6      	b.n	802bbe4 <_printf_i+0x160>
 802bc96:	2301      	movs	r3, #1
 802bc98:	4632      	mov	r2, r6
 802bc9a:	4649      	mov	r1, r9
 802bc9c:	4640      	mov	r0, r8
 802bc9e:	47d0      	blx	sl
 802bca0:	3001      	adds	r0, #1
 802bca2:	d09d      	beq.n	802bbe0 <_printf_i+0x15c>
 802bca4:	3501      	adds	r5, #1
 802bca6:	68e3      	ldr	r3, [r4, #12]
 802bca8:	9903      	ldr	r1, [sp, #12]
 802bcaa:	1a5b      	subs	r3, r3, r1
 802bcac:	42ab      	cmp	r3, r5
 802bcae:	dcf2      	bgt.n	802bc96 <_printf_i+0x212>
 802bcb0:	e7eb      	b.n	802bc8a <_printf_i+0x206>
 802bcb2:	2500      	movs	r5, #0
 802bcb4:	f104 0619 	add.w	r6, r4, #25
 802bcb8:	e7f5      	b.n	802bca6 <_printf_i+0x222>
 802bcba:	bf00      	nop
 802bcbc:	08030df9 	.word	0x08030df9
 802bcc0:	08030e0a 	.word	0x08030e0a

0802bcc4 <__sflush_r>:
 802bcc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802bcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bccc:	0716      	lsls	r6, r2, #28
 802bcce:	4605      	mov	r5, r0
 802bcd0:	460c      	mov	r4, r1
 802bcd2:	d454      	bmi.n	802bd7e <__sflush_r+0xba>
 802bcd4:	684b      	ldr	r3, [r1, #4]
 802bcd6:	2b00      	cmp	r3, #0
 802bcd8:	dc02      	bgt.n	802bce0 <__sflush_r+0x1c>
 802bcda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802bcdc:	2b00      	cmp	r3, #0
 802bcde:	dd48      	ble.n	802bd72 <__sflush_r+0xae>
 802bce0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802bce2:	2e00      	cmp	r6, #0
 802bce4:	d045      	beq.n	802bd72 <__sflush_r+0xae>
 802bce6:	2300      	movs	r3, #0
 802bce8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802bcec:	682f      	ldr	r7, [r5, #0]
 802bcee:	6a21      	ldr	r1, [r4, #32]
 802bcf0:	602b      	str	r3, [r5, #0]
 802bcf2:	d030      	beq.n	802bd56 <__sflush_r+0x92>
 802bcf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802bcf6:	89a3      	ldrh	r3, [r4, #12]
 802bcf8:	0759      	lsls	r1, r3, #29
 802bcfa:	d505      	bpl.n	802bd08 <__sflush_r+0x44>
 802bcfc:	6863      	ldr	r3, [r4, #4]
 802bcfe:	1ad2      	subs	r2, r2, r3
 802bd00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802bd02:	b10b      	cbz	r3, 802bd08 <__sflush_r+0x44>
 802bd04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802bd06:	1ad2      	subs	r2, r2, r3
 802bd08:	2300      	movs	r3, #0
 802bd0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802bd0c:	6a21      	ldr	r1, [r4, #32]
 802bd0e:	4628      	mov	r0, r5
 802bd10:	47b0      	blx	r6
 802bd12:	1c43      	adds	r3, r0, #1
 802bd14:	89a3      	ldrh	r3, [r4, #12]
 802bd16:	d106      	bne.n	802bd26 <__sflush_r+0x62>
 802bd18:	6829      	ldr	r1, [r5, #0]
 802bd1a:	291d      	cmp	r1, #29
 802bd1c:	d82b      	bhi.n	802bd76 <__sflush_r+0xb2>
 802bd1e:	4a2a      	ldr	r2, [pc, #168]	@ (802bdc8 <__sflush_r+0x104>)
 802bd20:	410a      	asrs	r2, r1
 802bd22:	07d6      	lsls	r6, r2, #31
 802bd24:	d427      	bmi.n	802bd76 <__sflush_r+0xb2>
 802bd26:	2200      	movs	r2, #0
 802bd28:	6062      	str	r2, [r4, #4]
 802bd2a:	04d9      	lsls	r1, r3, #19
 802bd2c:	6922      	ldr	r2, [r4, #16]
 802bd2e:	6022      	str	r2, [r4, #0]
 802bd30:	d504      	bpl.n	802bd3c <__sflush_r+0x78>
 802bd32:	1c42      	adds	r2, r0, #1
 802bd34:	d101      	bne.n	802bd3a <__sflush_r+0x76>
 802bd36:	682b      	ldr	r3, [r5, #0]
 802bd38:	b903      	cbnz	r3, 802bd3c <__sflush_r+0x78>
 802bd3a:	6560      	str	r0, [r4, #84]	@ 0x54
 802bd3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bd3e:	602f      	str	r7, [r5, #0]
 802bd40:	b1b9      	cbz	r1, 802bd72 <__sflush_r+0xae>
 802bd42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bd46:	4299      	cmp	r1, r3
 802bd48:	d002      	beq.n	802bd50 <__sflush_r+0x8c>
 802bd4a:	4628      	mov	r0, r5
 802bd4c:	f7ff fb48 	bl	802b3e0 <_free_r>
 802bd50:	2300      	movs	r3, #0
 802bd52:	6363      	str	r3, [r4, #52]	@ 0x34
 802bd54:	e00d      	b.n	802bd72 <__sflush_r+0xae>
 802bd56:	2301      	movs	r3, #1
 802bd58:	4628      	mov	r0, r5
 802bd5a:	47b0      	blx	r6
 802bd5c:	4602      	mov	r2, r0
 802bd5e:	1c50      	adds	r0, r2, #1
 802bd60:	d1c9      	bne.n	802bcf6 <__sflush_r+0x32>
 802bd62:	682b      	ldr	r3, [r5, #0]
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	d0c6      	beq.n	802bcf6 <__sflush_r+0x32>
 802bd68:	2b1d      	cmp	r3, #29
 802bd6a:	d001      	beq.n	802bd70 <__sflush_r+0xac>
 802bd6c:	2b16      	cmp	r3, #22
 802bd6e:	d11e      	bne.n	802bdae <__sflush_r+0xea>
 802bd70:	602f      	str	r7, [r5, #0]
 802bd72:	2000      	movs	r0, #0
 802bd74:	e022      	b.n	802bdbc <__sflush_r+0xf8>
 802bd76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bd7a:	b21b      	sxth	r3, r3
 802bd7c:	e01b      	b.n	802bdb6 <__sflush_r+0xf2>
 802bd7e:	690f      	ldr	r7, [r1, #16]
 802bd80:	2f00      	cmp	r7, #0
 802bd82:	d0f6      	beq.n	802bd72 <__sflush_r+0xae>
 802bd84:	0793      	lsls	r3, r2, #30
 802bd86:	680e      	ldr	r6, [r1, #0]
 802bd88:	bf08      	it	eq
 802bd8a:	694b      	ldreq	r3, [r1, #20]
 802bd8c:	600f      	str	r7, [r1, #0]
 802bd8e:	bf18      	it	ne
 802bd90:	2300      	movne	r3, #0
 802bd92:	eba6 0807 	sub.w	r8, r6, r7
 802bd96:	608b      	str	r3, [r1, #8]
 802bd98:	f1b8 0f00 	cmp.w	r8, #0
 802bd9c:	dde9      	ble.n	802bd72 <__sflush_r+0xae>
 802bd9e:	6a21      	ldr	r1, [r4, #32]
 802bda0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802bda2:	4643      	mov	r3, r8
 802bda4:	463a      	mov	r2, r7
 802bda6:	4628      	mov	r0, r5
 802bda8:	47b0      	blx	r6
 802bdaa:	2800      	cmp	r0, #0
 802bdac:	dc08      	bgt.n	802bdc0 <__sflush_r+0xfc>
 802bdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bdb6:	81a3      	strh	r3, [r4, #12]
 802bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 802bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bdc0:	4407      	add	r7, r0
 802bdc2:	eba8 0800 	sub.w	r8, r8, r0
 802bdc6:	e7e7      	b.n	802bd98 <__sflush_r+0xd4>
 802bdc8:	dfbffffe 	.word	0xdfbffffe

0802bdcc <_fflush_r>:
 802bdcc:	b538      	push	{r3, r4, r5, lr}
 802bdce:	690b      	ldr	r3, [r1, #16]
 802bdd0:	4605      	mov	r5, r0
 802bdd2:	460c      	mov	r4, r1
 802bdd4:	b913      	cbnz	r3, 802bddc <_fflush_r+0x10>
 802bdd6:	2500      	movs	r5, #0
 802bdd8:	4628      	mov	r0, r5
 802bdda:	bd38      	pop	{r3, r4, r5, pc}
 802bddc:	b118      	cbz	r0, 802bde6 <_fflush_r+0x1a>
 802bdde:	6a03      	ldr	r3, [r0, #32]
 802bde0:	b90b      	cbnz	r3, 802bde6 <_fflush_r+0x1a>
 802bde2:	f7ff f871 	bl	802aec8 <__sinit>
 802bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdea:	2b00      	cmp	r3, #0
 802bdec:	d0f3      	beq.n	802bdd6 <_fflush_r+0xa>
 802bdee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802bdf0:	07d0      	lsls	r0, r2, #31
 802bdf2:	d404      	bmi.n	802bdfe <_fflush_r+0x32>
 802bdf4:	0599      	lsls	r1, r3, #22
 802bdf6:	d402      	bmi.n	802bdfe <_fflush_r+0x32>
 802bdf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bdfa:	f7ff fa84 	bl	802b306 <__retarget_lock_acquire_recursive>
 802bdfe:	4628      	mov	r0, r5
 802be00:	4621      	mov	r1, r4
 802be02:	f7ff ff5f 	bl	802bcc4 <__sflush_r>
 802be06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802be08:	07da      	lsls	r2, r3, #31
 802be0a:	4605      	mov	r5, r0
 802be0c:	d4e4      	bmi.n	802bdd8 <_fflush_r+0xc>
 802be0e:	89a3      	ldrh	r3, [r4, #12]
 802be10:	059b      	lsls	r3, r3, #22
 802be12:	d4e1      	bmi.n	802bdd8 <_fflush_r+0xc>
 802be14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802be16:	f7ff fa77 	bl	802b308 <__retarget_lock_release_recursive>
 802be1a:	e7dd      	b.n	802bdd8 <_fflush_r+0xc>

0802be1c <__swhatbuf_r>:
 802be1c:	b570      	push	{r4, r5, r6, lr}
 802be1e:	460c      	mov	r4, r1
 802be20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be24:	2900      	cmp	r1, #0
 802be26:	b096      	sub	sp, #88	@ 0x58
 802be28:	4615      	mov	r5, r2
 802be2a:	461e      	mov	r6, r3
 802be2c:	da0d      	bge.n	802be4a <__swhatbuf_r+0x2e>
 802be2e:	89a3      	ldrh	r3, [r4, #12]
 802be30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802be34:	f04f 0100 	mov.w	r1, #0
 802be38:	bf14      	ite	ne
 802be3a:	2340      	movne	r3, #64	@ 0x40
 802be3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802be40:	2000      	movs	r0, #0
 802be42:	6031      	str	r1, [r6, #0]
 802be44:	602b      	str	r3, [r5, #0]
 802be46:	b016      	add	sp, #88	@ 0x58
 802be48:	bd70      	pop	{r4, r5, r6, pc}
 802be4a:	466a      	mov	r2, sp
 802be4c:	f000 f862 	bl	802bf14 <_fstat_r>
 802be50:	2800      	cmp	r0, #0
 802be52:	dbec      	blt.n	802be2e <__swhatbuf_r+0x12>
 802be54:	9901      	ldr	r1, [sp, #4]
 802be56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802be5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802be5e:	4259      	negs	r1, r3
 802be60:	4159      	adcs	r1, r3
 802be62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802be66:	e7eb      	b.n	802be40 <__swhatbuf_r+0x24>

0802be68 <__smakebuf_r>:
 802be68:	898b      	ldrh	r3, [r1, #12]
 802be6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802be6c:	079d      	lsls	r5, r3, #30
 802be6e:	4606      	mov	r6, r0
 802be70:	460c      	mov	r4, r1
 802be72:	d507      	bpl.n	802be84 <__smakebuf_r+0x1c>
 802be74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802be78:	6023      	str	r3, [r4, #0]
 802be7a:	6123      	str	r3, [r4, #16]
 802be7c:	2301      	movs	r3, #1
 802be7e:	6163      	str	r3, [r4, #20]
 802be80:	b003      	add	sp, #12
 802be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802be84:	ab01      	add	r3, sp, #4
 802be86:	466a      	mov	r2, sp
 802be88:	f7ff ffc8 	bl	802be1c <__swhatbuf_r>
 802be8c:	9f00      	ldr	r7, [sp, #0]
 802be8e:	4605      	mov	r5, r0
 802be90:	4639      	mov	r1, r7
 802be92:	4630      	mov	r0, r6
 802be94:	f7fe fef2 	bl	802ac7c <_malloc_r>
 802be98:	b948      	cbnz	r0, 802beae <__smakebuf_r+0x46>
 802be9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be9e:	059a      	lsls	r2, r3, #22
 802bea0:	d4ee      	bmi.n	802be80 <__smakebuf_r+0x18>
 802bea2:	f023 0303 	bic.w	r3, r3, #3
 802bea6:	f043 0302 	orr.w	r3, r3, #2
 802beaa:	81a3      	strh	r3, [r4, #12]
 802beac:	e7e2      	b.n	802be74 <__smakebuf_r+0xc>
 802beae:	89a3      	ldrh	r3, [r4, #12]
 802beb0:	6020      	str	r0, [r4, #0]
 802beb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802beb6:	81a3      	strh	r3, [r4, #12]
 802beb8:	9b01      	ldr	r3, [sp, #4]
 802beba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802bebe:	b15b      	cbz	r3, 802bed8 <__smakebuf_r+0x70>
 802bec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bec4:	4630      	mov	r0, r6
 802bec6:	f000 f837 	bl	802bf38 <_isatty_r>
 802beca:	b128      	cbz	r0, 802bed8 <__smakebuf_r+0x70>
 802becc:	89a3      	ldrh	r3, [r4, #12]
 802bece:	f023 0303 	bic.w	r3, r3, #3
 802bed2:	f043 0301 	orr.w	r3, r3, #1
 802bed6:	81a3      	strh	r3, [r4, #12]
 802bed8:	89a3      	ldrh	r3, [r4, #12]
 802beda:	431d      	orrs	r5, r3
 802bedc:	81a5      	strh	r5, [r4, #12]
 802bede:	e7cf      	b.n	802be80 <__smakebuf_r+0x18>

0802bee0 <memmove>:
 802bee0:	4288      	cmp	r0, r1
 802bee2:	b510      	push	{r4, lr}
 802bee4:	eb01 0402 	add.w	r4, r1, r2
 802bee8:	d902      	bls.n	802bef0 <memmove+0x10>
 802beea:	4284      	cmp	r4, r0
 802beec:	4623      	mov	r3, r4
 802beee:	d807      	bhi.n	802bf00 <memmove+0x20>
 802bef0:	1e43      	subs	r3, r0, #1
 802bef2:	42a1      	cmp	r1, r4
 802bef4:	d008      	beq.n	802bf08 <memmove+0x28>
 802bef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802befa:	f803 2f01 	strb.w	r2, [r3, #1]!
 802befe:	e7f8      	b.n	802bef2 <memmove+0x12>
 802bf00:	4402      	add	r2, r0
 802bf02:	4601      	mov	r1, r0
 802bf04:	428a      	cmp	r2, r1
 802bf06:	d100      	bne.n	802bf0a <memmove+0x2a>
 802bf08:	bd10      	pop	{r4, pc}
 802bf0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802bf0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802bf12:	e7f7      	b.n	802bf04 <memmove+0x24>

0802bf14 <_fstat_r>:
 802bf14:	b538      	push	{r3, r4, r5, lr}
 802bf16:	4d07      	ldr	r5, [pc, #28]	@ (802bf34 <_fstat_r+0x20>)
 802bf18:	2300      	movs	r3, #0
 802bf1a:	4604      	mov	r4, r0
 802bf1c:	4608      	mov	r0, r1
 802bf1e:	4611      	mov	r1, r2
 802bf20:	602b      	str	r3, [r5, #0]
 802bf22:	f7d5 faa4 	bl	800146e <_fstat>
 802bf26:	1c43      	adds	r3, r0, #1
 802bf28:	d102      	bne.n	802bf30 <_fstat_r+0x1c>
 802bf2a:	682b      	ldr	r3, [r5, #0]
 802bf2c:	b103      	cbz	r3, 802bf30 <_fstat_r+0x1c>
 802bf2e:	6023      	str	r3, [r4, #0]
 802bf30:	bd38      	pop	{r3, r4, r5, pc}
 802bf32:	bf00      	nop
 802bf34:	24016954 	.word	0x24016954

0802bf38 <_isatty_r>:
 802bf38:	b538      	push	{r3, r4, r5, lr}
 802bf3a:	4d06      	ldr	r5, [pc, #24]	@ (802bf54 <_isatty_r+0x1c>)
 802bf3c:	2300      	movs	r3, #0
 802bf3e:	4604      	mov	r4, r0
 802bf40:	4608      	mov	r0, r1
 802bf42:	602b      	str	r3, [r5, #0]
 802bf44:	f7d5 fa98 	bl	8001478 <_isatty>
 802bf48:	1c43      	adds	r3, r0, #1
 802bf4a:	d102      	bne.n	802bf52 <_isatty_r+0x1a>
 802bf4c:	682b      	ldr	r3, [r5, #0]
 802bf4e:	b103      	cbz	r3, 802bf52 <_isatty_r+0x1a>
 802bf50:	6023      	str	r3, [r4, #0]
 802bf52:	bd38      	pop	{r3, r4, r5, pc}
 802bf54:	24016954 	.word	0x24016954

0802bf58 <_realloc_r>:
 802bf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bf5c:	4680      	mov	r8, r0
 802bf5e:	4615      	mov	r5, r2
 802bf60:	460c      	mov	r4, r1
 802bf62:	b921      	cbnz	r1, 802bf6e <_realloc_r+0x16>
 802bf64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bf68:	4611      	mov	r1, r2
 802bf6a:	f7fe be87 	b.w	802ac7c <_malloc_r>
 802bf6e:	b92a      	cbnz	r2, 802bf7c <_realloc_r+0x24>
 802bf70:	f7ff fa36 	bl	802b3e0 <_free_r>
 802bf74:	2400      	movs	r4, #0
 802bf76:	4620      	mov	r0, r4
 802bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bf7c:	f000 f81a 	bl	802bfb4 <_malloc_usable_size_r>
 802bf80:	4285      	cmp	r5, r0
 802bf82:	4606      	mov	r6, r0
 802bf84:	d802      	bhi.n	802bf8c <_realloc_r+0x34>
 802bf86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802bf8a:	d8f4      	bhi.n	802bf76 <_realloc_r+0x1e>
 802bf8c:	4629      	mov	r1, r5
 802bf8e:	4640      	mov	r0, r8
 802bf90:	f7fe fe74 	bl	802ac7c <_malloc_r>
 802bf94:	4607      	mov	r7, r0
 802bf96:	2800      	cmp	r0, #0
 802bf98:	d0ec      	beq.n	802bf74 <_realloc_r+0x1c>
 802bf9a:	42b5      	cmp	r5, r6
 802bf9c:	462a      	mov	r2, r5
 802bf9e:	4621      	mov	r1, r4
 802bfa0:	bf28      	it	cs
 802bfa2:	4632      	movcs	r2, r6
 802bfa4:	f7ff f9b1 	bl	802b30a <memcpy>
 802bfa8:	4621      	mov	r1, r4
 802bfaa:	4640      	mov	r0, r8
 802bfac:	f7ff fa18 	bl	802b3e0 <_free_r>
 802bfb0:	463c      	mov	r4, r7
 802bfb2:	e7e0      	b.n	802bf76 <_realloc_r+0x1e>

0802bfb4 <_malloc_usable_size_r>:
 802bfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bfb8:	1f18      	subs	r0, r3, #4
 802bfba:	2b00      	cmp	r3, #0
 802bfbc:	bfbc      	itt	lt
 802bfbe:	580b      	ldrlt	r3, [r1, r0]
 802bfc0:	18c0      	addlt	r0, r0, r3
 802bfc2:	4770      	bx	lr

0802bfc4 <_init>:
 802bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bfc6:	bf00      	nop
 802bfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bfca:	bc08      	pop	{r3}
 802bfcc:	469e      	mov	lr, r3
 802bfce:	4770      	bx	lr

0802bfd0 <_fini>:
 802bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bfd2:	bf00      	nop
 802bfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bfd6:	bc08      	pop	{r3}
 802bfd8:	469e      	mov	lr, r3
 802bfda:	4770      	bx	lr
