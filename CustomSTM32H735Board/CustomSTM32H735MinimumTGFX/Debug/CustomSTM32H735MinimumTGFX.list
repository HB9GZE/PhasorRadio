
CustomSTM32H735MinimumTGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cf24  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b44  0801d1f4  0801d1f4  0001e1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0801ed38  0801ed38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0801eee0  0801eee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 0000179b  0801eef8  0801eef8  0001fef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  08020694  08020694  00021694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  080206a4  080206a4  000216a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  080206ac  080206ac  000216ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  080206c0  080206c0  000216c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000000dc  24000000  080206c8  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 0005fa00  240000dc  080207a4  000220dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  2405fae0  080801a4  00081ae0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  2405fbe0  080802a4  00081be0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00006a88  2405fce0  080803a4  00081ce0  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  24066768  080803a4  00082768  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  00081ce0  2**0
                  CONTENTS, READONLY
 17 .debug_info   0005125b  00000000  00000000  00081d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000cf75  00000000  00000000  000d2f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003038  00000000  00000000  000dfee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000238a  00000000  00000000  000e2f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003e908  00000000  00000000  000e52a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00039b9f  00000000  00000000  00123baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0016cb85  00000000  00000000  0015d749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  002ca2ce  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d1a0  00000000  00000000  002ca390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000079  00000000  00000000  002d7530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2405fce0 	.word	0x2405fce0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d1dc 	.word	0x0801d1dc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2405fce4 	.word	0x2405fce4
 800030c:	0801d1dc 	.word	0x0801d1dc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
	...

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003c4:	f000 fa0e 	bl	80007e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c8:	f000 fe9e 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003cc:	f000 f830 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d0:	f000 f95e 	bl	8000690 <MX_GPIO_Init>
  MX_LTDC_Init();
 80003d4:	f000 f8da 	bl	800058c <MX_LTDC_Init>
  MX_DMA2D_Init();
 80003d8:	f000 f8ba 	bl	8000550 <MX_DMA2D_Init>
  MX_CRC_Init();
 80003dc:	f000 f896 	bl	800050c <MX_CRC_Init>
  MX_LIBJPEG_Init();
 80003e0:	f004 fbc4 	bl	8004b6c <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80003e4:	f007 ffe7 	bl	80083b6 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80003e8:	f007 ffde 	bl	80083a8 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003ec:	f004 fc0a 	bl	8004c04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003f0:	4a09      	ldr	r2, [pc, #36]	@ (8000418 <main+0x58>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4809      	ldr	r0, [pc, #36]	@ (800041c <main+0x5c>)
 80003f6:	f004 fc4f 	bl	8004c98 <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a08      	ldr	r2, [pc, #32]	@ (8000420 <main+0x60>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000400:	4a08      	ldr	r2, [pc, #32]	@ (8000424 <main+0x64>)
 8000402:	2100      	movs	r1, #0
 8000404:	4808      	ldr	r0, [pc, #32]	@ (8000428 <main+0x68>)
 8000406:	f004 fc47 	bl	8004c98 <osThreadNew>
 800040a:	4603      	mov	r3, r0
 800040c:	4a07      	ldr	r2, [pc, #28]	@ (800042c <main+0x6c>)
 800040e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000410:	f004 fc1c 	bl	8004c4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <main+0x54>
 8000418:	0801dc68 	.word	0x0801dc68
 800041c:	080007d5 	.word	0x080007d5
 8000420:	2405fe30 	.word	0x2405fe30
 8000424:	0801dc8c 	.word	0x0801dc8c
 8000428:	080083c7 	.word	0x080083c7
 800042c:	2405fe34 	.word	0x2405fe34

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b09c      	sub	sp, #112	@ 0x70
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800043a:	224c      	movs	r2, #76	@ 0x4c
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f01c f8f2 	bl	801c628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2220      	movs	r2, #32
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f01c f8ec 	bl	801c628 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000450:	2004      	movs	r0, #4
 8000452:	f001 fdb3 	bl	8001fbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	4b2b      	ldr	r3, [pc, #172]	@ (8000508 <SystemClock_Config+0xd8>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a2a      	ldr	r2, [pc, #168]	@ (8000508 <SystemClock_Config+0xd8>)
 8000460:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b28      	ldr	r3, [pc, #160]	@ (8000508 <SystemClock_Config+0xd8>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000472:	bf00      	nop
 8000474:	4b24      	ldr	r3, [pc, #144]	@ (8000508 <SystemClock_Config+0xd8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800047c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000480:	d1f8      	bne.n	8000474 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000482:	2301      	movs	r3, #1
 8000484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800048a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000490:	2302      	movs	r3, #2
 8000492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000494:	2302      	movs	r3, #2
 8000496:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000498:	232c      	movs	r3, #44	@ 0x2c
 800049a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800049c:	2301      	movs	r3, #1
 800049e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004a8:	230c      	movs	r3, #12
 80004aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 fdd9 	bl	8002070 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004c4:	f000 f9cc 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	233f      	movs	r3, #63	@ 0x3f
 80004ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2303      	movs	r3, #3
 80004ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004d4:	2308      	movs	r3, #8
 80004d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004d8:	2340      	movs	r3, #64	@ 0x40
 80004da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004dc:	2340      	movs	r3, #64	@ 0x40
 80004de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004e6:	2340      	movs	r3, #64	@ 0x40
 80004e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2103      	movs	r1, #3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 f998 	bl	8002824 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xce>
  {
    Error_Handler();
 80004fa:	f000 f9b1 	bl	8000860 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3770      	adds	r7, #112	@ 0x70
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800

0800050c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <MX_CRC_Init+0x40>)
 8000514:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000518:	2200      	movs	r2, #0
 800051a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <MX_CRC_Init+0x3c>)
 800051e:	2200      	movs	r2, #0
 8000520:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <MX_CRC_Init+0x3c>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000530:	2201      	movs	r2, #1
 8000532:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000536:	f000 ff9b 	bl	8001470 <HAL_CRC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000540:	f000 f98e 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2405fcfc 	.word	0x2405fcfc
 800054c:	58024c00 	.word	0x58024c00

08000550 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000554:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <MX_DMA2D_Init+0x34>)
 8000556:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <MX_DMA2D_Init+0x38>)
 8000558:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <MX_DMA2D_Init+0x34>)
 800055c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000560:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <MX_DMA2D_Init+0x34>)
 8000564:	2202      	movs	r2, #2
 8000566:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_DMA2D_Init+0x34>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_DMA2D_Init+0x34>)
 8000570:	f001 f870 	bl	8001654 <HAL_DMA2D_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800057a:	f000 f971 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2405fd20 	.word	0x2405fd20
 8000588:	52001000 	.word	0x52001000

0800058c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	@ 0x38
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2234      	movs	r2, #52	@ 0x34
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f01c f845 	bl	801c628 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800059e:	4b3a      	ldr	r3, [pc, #232]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005a0:	4a3a      	ldr	r2, [pc, #232]	@ (800068c <MX_LTDC_Init+0x100>)
 80005a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80005a4:	4b38      	ldr	r3, [pc, #224]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80005aa:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80005b6:	4b34      	ldr	r3, [pc, #208]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80005bc:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005be:	2228      	movs	r2, #40	@ 0x28
 80005c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80005c2:	4b31      	ldr	r3, [pc, #196]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005c4:	2209      	movs	r2, #9
 80005c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005ca:	2235      	movs	r2, #53	@ 0x35
 80005cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80005ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005d0:	220b      	movs	r2, #11
 80005d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005d6:	f240 2215 	movw	r2, #533	@ 0x215
 80005da:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005de:	f240 121b 	movw	r2, #283	@ 0x11b
 80005e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80005e4:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005e6:	f240 2235 	movw	r2, #565	@ 0x235
 80005ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80005ec:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005ee:	f240 121d 	movw	r2, #285	@ 0x11d
 80005f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <MX_LTDC_Init+0xfc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000604:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <MX_LTDC_Init+0xfc>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800060c:	481e      	ldr	r0, [pc, #120]	@ (8000688 <MX_LTDC_Init+0xfc>)
 800060e:	f001 fa2d 	bl	8001a6c <HAL_LTDC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000618:	f000 f922 	bl	8000860 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000620:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000624:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800062a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800062e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000634:	23ff      	movs	r3, #255	@ 0xff
 8000636:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800063c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000640:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000642:	2305      	movs	r3, #5
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x0;
 8000646:	2300      	movs	r3, #0
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 800064a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000650:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000654:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_LTDC_Init+0xfc>)
 8000670:	f001 facc 	bl	8001c0c <HAL_LTDC_ConfigLayer>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800067a:	f000 f8f1 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3738      	adds	r7, #56	@ 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2405fd88 	.word	0x2405fd88
 800068c:	50001000 	.word	0x50001000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b08b      	sub	sp, #44	@ 0x2c
 8000694:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000696:	4b4e      	ldr	r3, [pc, #312]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a4c      	ldr	r2, [pc, #304]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b4a      	ldr	r3, [pc, #296]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b4:	4b46      	ldr	r3, [pc, #280]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a45      	ldr	r2, [pc, #276]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b42      	ldr	r3, [pc, #264]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b3f      	ldr	r3, [pc, #252]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a3d      	ldr	r2, [pc, #244]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b3b      	ldr	r3, [pc, #236]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a36      	ldr	r2, [pc, #216]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b30      	ldr	r3, [pc, #192]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	4a2e      	ldr	r2, [pc, #184]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071e:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <MX_GPIO_Init+0x140>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_GPIO_Init+0x140>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_GPIO_Init+0x140>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	372c      	adds	r7, #44	@ 0x2c
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	58024400 	.word	0x58024400

080007d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f004 faed 	bl	8004dbc <osDelay>
 80007e2:	e7fb      	b.n	80007dc <StartDefaultTask+0x8>

080007e4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007f6:	f000 fdc3 	bl	8001380 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007fe:	2300      	movs	r3, #0
 8000800:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000806:	231f      	movs	r3, #31
 8000808:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800080a:	2387      	movs	r3, #135	@ 0x87
 800080c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800080e:	2300      	movs	r3, #0
 8000810:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000812:	2300      	movs	r3, #0
 8000814:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000816:	2301      	movs	r3, #1
 8000818:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800081a:	2301      	movs	r3, #1
 800081c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000826:	463b      	mov	r3, r7
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fde1 	bl	80013f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800082e:	2004      	movs	r0, #4
 8000830:	f000 fdbe 	bl	80013b0 <HAL_MPU_Enable>

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 fc97 	bl	8001180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40001000 	.word	0x40001000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_MspInit+0x38>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000878:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_MspInit+0x38>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x38>)
 8000884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	210f      	movs	r1, #15
 8000894:	f06f 0001 	mvn.w	r0, #1
 8000898:	f000 fd4a 	bl	8001330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58024400 	.word	0x58024400

080008a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <HAL_CRC_MspInit+0x3c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10e      	bne.n	80008d8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_CRC_MspInit+0x40>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c0:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <HAL_CRC_MspInit+0x40>)
 80008c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <HAL_CRC_MspInit+0x40>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	58024c00 	.word	0x58024c00
 80008e8:	58024400 	.word	0x58024400

080008ec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <HAL_DMA2D_MspInit+0x3c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10e      	bne.n	800091c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_DMA2D_MspInit+0x40>)
 8000900:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000904:	4a09      	ldr	r2, [pc, #36]	@ (800092c <HAL_DMA2D_MspInit+0x40>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <HAL_DMA2D_MspInit+0x40>)
 8000910:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	52001000 	.word	0x52001000
 800092c:	58024400 	.word	0x58024400

08000930 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0c0      	sub	sp, #256	@ 0x100
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094c:	22b8      	movs	r2, #184	@ 0xb8
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f01b fe69 	bl	801c628 <memset>
  if(hltdc->Instance==LTDC)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4ad9      	ldr	r2, [pc, #868]	@ (8000cc0 <HAL_LTDC_MspInit+0x390>)
 800095c:	4293      	cmp	r3, r2
 800095e:	f040 81d1 	bne.w	8000d04 <HAL_LTDC_MspInit+0x3d4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000962:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800096e:	2319      	movs	r3, #25
 8000970:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000972:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000976:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000980:	231e      	movs	r3, #30
 8000982:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000984:	2300      	movs	r3, #0
 8000986:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800098c:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000992:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fafc 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 80009a2:	f7ff ff5d 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80009a6:	4bc7      	ldr	r3, [pc, #796]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80009ac:	4ac5      	ldr	r2, [pc, #788]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80009b6:	4bc3      	ldr	r3, [pc, #780]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c4:	4bbf      	ldr	r3, [pc, #764]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4abe      	ldr	r2, [pc, #760]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4bbb      	ldr	r3, [pc, #748]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e2:	4bb8      	ldr	r3, [pc, #736]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4ab6      	ldr	r2, [pc, #728]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4bb4      	ldr	r3, [pc, #720]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0320 	and.w	r3, r3, #32
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4bb0      	ldr	r3, [pc, #704]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4aaf      	ldr	r2, [pc, #700]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4bac      	ldr	r3, [pc, #688]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	623b      	str	r3, [r7, #32]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4ba9      	ldr	r3, [pc, #676]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4aa7      	ldr	r2, [pc, #668]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4ba5      	ldr	r3, [pc, #660]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4ba1      	ldr	r3, [pc, #644]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4aa0      	ldr	r2, [pc, #640]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a5a:	4b9a      	ldr	r3, [pc, #616]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a98      	ldr	r2, [pc, #608]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b96      	ldr	r3, [pc, #600]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a78:	4b92      	ldr	r3, [pc, #584]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	4a91      	ldr	r2, [pc, #580]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a88:	4b8e      	ldr	r3, [pc, #568]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	4b8b      	ldr	r3, [pc, #556]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a89      	ldr	r2, [pc, #548]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b87      	ldr	r3, [pc, #540]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab4:	4b83      	ldr	r3, [pc, #524]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a82      	ldr	r2, [pc, #520]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8000cc4 <HAL_LTDC_MspInit+0x394>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    PA11     ------> LTDC_R4
    PA15(JTDI)     ------> LTDC_B6
    PD2     ------> LTDC_B7
    PG13     ------> LTDC_R0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000ad2:	f645 0370 	movw	r3, #22640	@ 0x5870
 8000ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aec:	230e      	movs	r3, #14
 8000aee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000af6:	4619      	mov	r1, r3
 8000af8:	4873      	ldr	r0, [pc, #460]	@ (8000cc8 <HAL_LTDC_MspInit+0x398>)
 8000afa:	f000 fe0f 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b18:	230e      	movs	r3, #14
 8000b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b22:	4619      	mov	r1, r3
 8000b24:	4869      	ldr	r0, [pc, #420]	@ (8000ccc <HAL_LTDC_MspInit+0x39c>)
 8000b26:	f000 fdf9 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8000b42:	230b      	movs	r3, #11
 8000b44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4860      	ldr	r0, [pc, #384]	@ (8000cd0 <HAL_LTDC_MspInit+0x3a0>)
 8000b50:	f000 fde4 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
 8000b54:	f240 2352 	movw	r3, #594	@ 0x252
 8000b58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b6e:	230e      	movs	r3, #14
 8000b70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4855      	ldr	r0, [pc, #340]	@ (8000cd0 <HAL_LTDC_MspInit+0x3a0>)
 8000b7c:	f000 fdce 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 8000b80:	f648 638e 	movw	r3, #36494	@ 0x8e8e
 8000b84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	484b      	ldr	r0, [pc, #300]	@ (8000cd4 <HAL_LTDC_MspInit+0x3a4>)
 8000ba8:	f000 fdb8 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bac:	2303      	movs	r3, #3
 8000bae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bc4:	2309      	movs	r3, #9
 8000bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4841      	ldr	r0, [pc, #260]	@ (8000cd8 <HAL_LTDC_MspInit+0x3a8>)
 8000bd2:	f000 fda3 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf0:	230e      	movs	r3, #14
 8000bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4836      	ldr	r0, [pc, #216]	@ (8000cd8 <HAL_LTDC_MspInit+0x3a8>)
 8000bfe:	f000 fd8d 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c22:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c26:	4619      	mov	r1, r3
 8000c28:	482c      	ldr	r0, [pc, #176]	@ (8000cdc <HAL_LTDC_MspInit+0x3ac>)
 8000c2a:	f000 fd77 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c46:	230e      	movs	r3, #14
 8000c48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c4c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c50:	4619      	mov	r1, r3
 8000c52:	4823      	ldr	r0, [pc, #140]	@ (8000ce0 <HAL_LTDC_MspInit+0x3b0>)
 8000c54:	f000 fd62 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000c72:	230d      	movs	r3, #13
 8000c74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4815      	ldr	r0, [pc, #84]	@ (8000cd4 <HAL_LTDC_MspInit+0x3a4>)
 8000c80:	f000 fd4c 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c84:	2304      	movs	r3, #4
 8000c86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <HAL_LTDC_MspInit+0x3b4>)
 8000caa:	f000 fd37 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e013      	b.n	8000ce8 <HAL_LTDC_MspInit+0x3b8>
 8000cc0:	50001000 	.word	0x50001000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58021000 	.word	0x58021000
 8000ccc:	58021400 	.word	0x58021400
 8000cd0:	58020800 	.word	0x58020800
 8000cd4:	58020000 	.word	0x58020000
 8000cd8:	58020400 	.word	0x58020400
 8000cdc:	58022400 	.word	0x58022400
 8000ce0:	58022800 	.word	0x58022800
 8000ce4:	58020c00 	.word	0x58020c00
 8000ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cf2:	230e      	movs	r3, #14
 8000cf4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <HAL_LTDC_MspInit+0x3e0>)
 8000d00:	f000 fd0c 	bl	800171c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000d04:	bf00      	nop
 8000d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	58021800 	.word	0x58021800

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	@ 0x40
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d827      	bhi.n	8000d72 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	2036      	movs	r0, #54	@ 0x36
 8000d28:	f000 fb02 	bl	8001330 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d2c:	2036      	movs	r0, #54	@ 0x36
 8000d2e:	f000 fb19 	bl	8001364 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d32:	4a29      	ldr	r2, [pc, #164]	@ (8000dd8 <HAL_InitTick+0xc4>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d38:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <HAL_InitTick+0xc8>)
 8000d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d3e:	4a27      	ldr	r2, [pc, #156]	@ (8000ddc <HAL_InitTick+0xc8>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <HAL_InitTick+0xc8>)
 8000d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d56:	f107 0210 	add.w	r2, r7, #16
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 f8d5 	bl	8002f10 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d106      	bne.n	8000d7e <HAL_InitTick+0x6a>
 8000d70:	e001      	b.n	8000d76 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e02b      	b.n	8000dce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d76:	f002 f8b5 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8000d7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d7c:	e004      	b.n	8000d88 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d7e:	f002 f8b1 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8000d82:	4603      	mov	r3, r0
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d8a:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <HAL_InitTick+0xcc>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	0c9b      	lsrs	r3, r3, #18
 8000d92:	3b01      	subs	r3, #1
 8000d94:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000d98:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <HAL_InitTick+0xd4>)
 8000d9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000d9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000da2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da4:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000db6:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000db8:	f003 fbf0 	bl	800459c <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d104      	bne.n	8000dcc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dc2:	4808      	ldr	r0, [pc, #32]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000dc4:	f003 fc4c 	bl	8004660 <HAL_TIM_Base_Start_IT>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	e000      	b.n	8000dce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3740      	adds	r7, #64	@ 0x40
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2400000c 	.word	0x2400000c
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	2405fe38 	.word	0x2405fe38
 8000de8:	40001000 	.word	0x40001000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <NMI_Handler+0x4>

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <MemManage_Handler+0x4>

08000e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <TIM6_DAC_IRQHandler+0x10>)
 8000e2a:	f003 fc9f 	bl	800476c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2405fe38 	.word	0x2405fe38

08000e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_kill>:

int _kill(int pid, int sig)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e52:	f01b fce1 	bl	801c818 <__errno>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2216      	movs	r2, #22
 8000e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_exit>:

void _exit (int status)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ffe7 	bl	8000e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <_exit+0x12>

08000e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e00a      	b.n	8000ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e90:	f3af 8000 	nop.w
 8000e94:	4601      	mov	r1, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbf0      	blt.n	8000e90 <_read+0x12>
  }

  return len;
 8000eae:	687b      	ldr	r3, [r7, #4]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e009      	b.n	8000ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	60ba      	str	r2, [r7, #8]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf1      	blt.n	8000eca <_write+0x12>
  }
  return len;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_close>:

int _close(int file)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_isatty>:

int _isatty(int file)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f01b fc46 	bl	801c818 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24070000 	.word	0x24070000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	2405fe84 	.word	0x2405fe84
 8000fc0:	24066768 	.word	0x24066768

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b32      	ldr	r3, [pc, #200]	@ (8001094 <SystemInit+0xd0>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a31      	ldr	r2, [pc, #196]	@ (8001094 <SystemInit+0xd0>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <SystemInit+0xd4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d807      	bhi.n	8000ff4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <SystemInit+0xd4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 030f 	bic.w	r3, r3, #15
 8000fec:	4a2a      	ldr	r2, [pc, #168]	@ (8001098 <SystemInit+0xd4>)
 8000fee:	f043 0307 	orr.w	r3, r3, #7
 8000ff2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ff4:	4b29      	ldr	r3, [pc, #164]	@ (800109c <SystemInit+0xd8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	@ (800109c <SystemInit+0xd8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <SystemInit+0xd8>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001006:	4b25      	ldr	r3, [pc, #148]	@ (800109c <SystemInit+0xd8>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4924      	ldr	r1, [pc, #144]	@ (800109c <SystemInit+0xd8>)
 800100c:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <SystemInit+0xdc>)
 800100e:	4013      	ands	r3, r2
 8001010:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <SystemInit+0xd4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <SystemInit+0xd4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 030f 	bic.w	r3, r3, #15
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <SystemInit+0xd4>)
 8001028:	f043 0307 	orr.w	r3, r3, #7
 800102c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <SystemInit+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <SystemInit+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800103a:	4b18      	ldr	r3, [pc, #96]	@ (800109c <SystemInit+0xd8>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001040:	4b16      	ldr	r3, [pc, #88]	@ (800109c <SystemInit+0xd8>)
 8001042:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <SystemInit+0xe0>)
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <SystemInit+0xd8>)
 8001048:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <SystemInit+0xe4>)
 800104a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <SystemInit+0xd8>)
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <SystemInit+0xe8>)
 8001050:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <SystemInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <SystemInit+0xd8>)
 800105a:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <SystemInit+0xe8>)
 800105c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <SystemInit+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001064:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <SystemInit+0xd8>)
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <SystemInit+0xe8>)
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <SystemInit+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <SystemInit+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <SystemInit+0xd8>)
 8001076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800107a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <SystemInit+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <SystemInit+0xec>)
 8001084:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001088:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	52002000 	.word	0x52002000
 800109c:	58024400 	.word	0x58024400
 80010a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010a4:	02020200 	.word	0x02020200
 80010a8:	01ff0000 	.word	0x01ff0000
 80010ac:	01010280 	.word	0x01010280
 80010b0:	52004000 	.word	0x52004000

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f7ff ff84 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f01b fb9f 	bl	801c824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff f96b 	bl	80003c0 <main>
  bx  lr
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	24070000 	.word	0x24070000
  ldr r0, =_sdata
 80010f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010f4:	240000dc 	.word	0x240000dc
  ldr r2, =_sidata
 80010f8:	080206c8 	.word	0x080206c8
  ldr r2, =_sbss
 80010fc:	2405fce0 	.word	0x2405fce0
  ldr r4, =_ebss
 8001100:	24066768 	.word	0x24066768

08001104 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC3_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110e:	2003      	movs	r0, #3
 8001110:	f000 f903 	bl	800131a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001114:	f001 fd3c 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8001118:	4602      	mov	r2, r0
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_Init+0x68>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	4913      	ldr	r1, [pc, #76]	@ (8001174 <HAL_Init+0x6c>)
 8001126:	5ccb      	ldrb	r3, [r1, r3]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_Init+0x68>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_Init+0x6c>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <HAL_Init+0x70>)
 800114a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_Init+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	200f      	movs	r0, #15
 8001154:	f7ff fdde 	bl	8000d14 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e002      	b.n	8001168 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001162:	f7ff fb83 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400
 8001174:	0801dcb0 	.word	0x0801dcb0
 8001178:	24000008 	.word	0x24000008
 800117c:	24000004 	.word	0x24000004

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	24000010 	.word	0x24000010
 80011a4:	2405fe88 	.word	0x2405fe88

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2405fe88 	.word	0x2405fe88

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	@ (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	@ (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	@ 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff4c 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133e:	f7ff ff63 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001342:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	6978      	ldr	r0, [r7, #20]
 800134a:	f7ff ffb3 	bl	80012b4 <NVIC_EncodePriority>
 800134e:	4602      	mov	r2, r0
 8001350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff82 	bl	8001260 <__NVIC_SetPriority>
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff56 	bl	8001224 <__NVIC_EnableIRQ>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001384:	f3bf 8f5f 	dmb	sy
}
 8001388:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800138a:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <HAL_MPU_Disable+0x28>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138e:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <HAL_MPU_Disable+0x28>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001394:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_MPU_Disable+0x2c>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	e000ed90 	.word	0xe000ed90

080013b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_MPU_Enable+0x38>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_MPU_Enable+0x3c>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <HAL_MPU_Enable+0x3c>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013cc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013ce:	f3bf 8f4f 	dsb	sy
}
 80013d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d4:	f3bf 8f6f 	isb	sy
}
 80013d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed90 	.word	0xe000ed90
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	785a      	ldrb	r2, [r3, #1]
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 80013fe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001400:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800140c:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7b1b      	ldrb	r3, [r3, #12]
 8001418:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7adb      	ldrb	r3, [r3, #11]
 800141e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001420:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7b5b      	ldrb	r3, [r3, #13]
 800142e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001430:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7b9b      	ldrb	r3, [r3, #14]
 8001436:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001438:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7bdb      	ldrb	r3, [r3, #15]
 800143e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a5b      	ldrb	r3, [r3, #9]
 8001446:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001450:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800145a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800145c:	6113      	str	r3, [r2, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed90 	.word	0xe000ed90

08001470 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e054      	b.n	800152c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7f5b      	ldrb	r3, [r3, #29]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fa08 	bl	80008a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <HAL_CRC_Init+0xc4>)
 80014ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0218 	bic.w	r2, r2, #24
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	e00c      	b.n	80014da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	461a      	mov	r2, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f834 	bl	8001538 <HAL_CRCEx_Polynomial_Set>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e028      	b.n	800152c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	e004      	b.n	80014f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6912      	ldr	r2, [r2, #16]
 80014f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699a      	ldr	r2, [r3, #24]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	04c11db7 	.word	0x04c11db7

08001538 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001548:	231f      	movs	r3, #31
 800154a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	e063      	b.n	8001624 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800155c:	bf00      	nop
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	613a      	str	r2, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <HAL_CRCEx_Polynomial_Set+0x44>
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b18      	cmp	r3, #24
 8001580:	d846      	bhi.n	8001610 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001617 	.word	0x08001617
 800158c:	08001611 	.word	0x08001611
 8001590:	08001611 	.word	0x08001611
 8001594:	08001611 	.word	0x08001611
 8001598:	08001611 	.word	0x08001611
 800159c:	08001611 	.word	0x08001611
 80015a0:	08001611 	.word	0x08001611
 80015a4:	08001611 	.word	0x08001611
 80015a8:	08001605 	.word	0x08001605
 80015ac:	08001611 	.word	0x08001611
 80015b0:	08001611 	.word	0x08001611
 80015b4:	08001611 	.word	0x08001611
 80015b8:	08001611 	.word	0x08001611
 80015bc:	08001611 	.word	0x08001611
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001611 	.word	0x08001611
 80015c8:	080015f9 	.word	0x080015f9
 80015cc:	08001611 	.word	0x08001611
 80015d0:	08001611 	.word	0x08001611
 80015d4:	08001611 	.word	0x08001611
 80015d8:	08001611 	.word	0x08001611
 80015dc:	08001611 	.word	0x08001611
 80015e0:	08001611 	.word	0x08001611
 80015e4:	08001611 	.word	0x08001611
 80015e8:	080015ed 	.word	0x080015ed
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d913      	bls.n	800161a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80015f6:	e010      	b.n	800161a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b07      	cmp	r3, #7
 80015fc:	d90f      	bls.n	800161e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001602:	e00c      	b.n	800161e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d90b      	bls.n	8001622 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800160e:	e008      	b.n	8001622 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
        break;
 8001614:	e006      	b.n	8001624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001616:	bf00      	nop
 8001618:	e004      	b.n	8001624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800161a:	bf00      	nop
 800161c:	e002      	b.n	8001624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800161e:	bf00      	nop
 8001620:	e000      	b.n	8001624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001622:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 0118 	bic.w	r1, r3, #24
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001646:	7dfb      	ldrb	r3, [r7, #23]
}
 8001648:	4618      	mov	r0, r3
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e04f      	b.n	8001706 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff f936 	bl	80008ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_DMA2D_Init+0xbc>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6851      	ldr	r1, [r2, #4]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	69d2      	ldr	r2, [r2, #28]
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_DMA2D_Init+0xc0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6891      	ldr	r1, [r2, #8]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6992      	ldr	r2, [r2, #24]
 80016b6:	4311      	orrs	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <HAL_DMA2D_Init+0xc4>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68d1      	ldr	r1, [r2, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	430b      	orrs	r3, r1
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016dc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	051a      	lsls	r2, r3, #20
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	fff8ffbf 	.word	0xfff8ffbf
 8001714:	fffffef8 	.word	0xfffffef8
 8001718:	ffff0000 	.word	0xffff0000

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800172a:	4b86      	ldr	r3, [pc, #536]	@ (8001944 <HAL_GPIO_Init+0x228>)
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800172e:	e18c      	b.n	8001a4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 817e 	beq.w	8001a44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x44>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80d8 	beq.w	8001a44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <HAL_GPIO_Init+0x22c>)
 8001896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800189a:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <HAL_GPIO_Init+0x22c>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018a4:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <HAL_GPIO_Init+0x22c>)
 80018a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b2:	4a26      	ldr	r2, [pc, #152]	@ (800194c <HAL_GPIO_Init+0x230>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001950 <HAL_GPIO_Init+0x234>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d04a      	beq.n	8001974 <HAL_GPIO_Init+0x258>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <HAL_GPIO_Init+0x238>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_GPIO_Init+0x222>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <HAL_GPIO_Init+0x23c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x21e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	@ (800195c <HAL_GPIO_Init+0x240>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x21a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_GPIO_Init+0x244>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x216>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <HAL_GPIO_Init+0x248>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x212>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a17      	ldr	r2, [pc, #92]	@ (8001968 <HAL_GPIO_Init+0x24c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <HAL_GPIO_Init+0x250>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x20a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a15      	ldr	r2, [pc, #84]	@ (8001970 <HAL_GPIO_Init+0x254>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x206>
 800191e:	2309      	movs	r3, #9
 8001920:	e029      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 8001922:	230a      	movs	r3, #10
 8001924:	e027      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 8001926:	2307      	movs	r3, #7
 8001928:	e025      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 800192a:	2306      	movs	r3, #6
 800192c:	e023      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 800192e:	2305      	movs	r3, #5
 8001930:	e021      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 8001932:	2304      	movs	r3, #4
 8001934:	e01f      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 8001936:	2303      	movs	r3, #3
 8001938:	e01d      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 800193a:	2302      	movs	r3, #2
 800193c:	e01b      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 800193e:	2301      	movs	r3, #1
 8001940:	e019      	b.n	8001976 <HAL_GPIO_Init+0x25a>
 8001942:	bf00      	nop
 8001944:	58000080 	.word	0x58000080
 8001948:	58024400 	.word	0x58024400
 800194c:	58000400 	.word	0x58000400
 8001950:	58020000 	.word	0x58020000
 8001954:	58020400 	.word	0x58020400
 8001958:	58020800 	.word	0x58020800
 800195c:	58020c00 	.word	0x58020c00
 8001960:	58021000 	.word	0x58021000
 8001964:	58021400 	.word	0x58021400
 8001968:	58021800 	.word	0x58021800
 800196c:	58021c00 	.word	0x58021c00
 8001970:	58022400 	.word	0x58022400
 8001974:	2300      	movs	r3, #0
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001986:	4938      	ldr	r1, [pc, #224]	@ (8001a68 <HAL_GPIO_Init+0x34c>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f ae6b 	bne.w	8001730 <HAL_GPIO_Init+0x14>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3724      	adds	r7, #36	@ 0x24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	58000400 	.word	0x58000400

08001a6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0bf      	b.n	8001bfe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe ff4c 	bl	8000930 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001aae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6999      	ldr	r1, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001ac4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <HAL_LTDC_Init+0x19c>)
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6899      	ldr	r1, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68d9      	ldr	r1, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c08 <HAL_LTDC_Init+0x19c>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6919      	ldr	r1, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b33      	ldr	r3, [pc, #204]	@ (8001c08 <HAL_LTDC_Init+0x19c>)
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6959      	ldr	r1, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <HAL_LTDC_Init+0x19c>)
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6959      	ldr	r1, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0206 	orr.w	r2, r2, #6
 8001bda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	f000f800 	.word	0xf000f800

08001c0c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_LTDC_ConfigLayer+0x1a>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e02c      	b.n	8001c80 <HAL_LTDC_ConfigLayer+0x74>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2134      	movs	r1, #52	@ 0x34
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f811 	bl	8001c88 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdb0      	pop	{r4, r5, r7, pc}

08001c88 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	4413      	add	r3, r2
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	01db      	lsls	r3, r3, #7
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3384      	adds	r3, #132	@ 0x84
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	01d2      	lsls	r2, r2, #7
 8001cc4:	440a      	add	r2, r1
 8001cc6:	3284      	adds	r2, #132	@ 0x84
 8001cc8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001ccc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001cde:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001ce0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	01db      	lsls	r3, r3, #7
 8001cec:	440b      	add	r3, r1
 8001cee:	3384      	adds	r3, #132	@ 0x84
 8001cf0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001cf6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d06:	4413      	add	r3, r2
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	01db      	lsls	r3, r3, #7
 8001d16:	4413      	add	r3, r2
 8001d18:	3384      	adds	r3, #132	@ 0x84
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4611      	mov	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	01d2      	lsls	r2, r2, #7
 8001d26:	440a      	add	r2, r1
 8001d28:	3284      	adds	r2, #132	@ 0x84
 8001d2a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001d2e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d3e:	4413      	add	r3, r2
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	01db      	lsls	r3, r3, #7
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3384      	adds	r3, #132	@ 0x84
 8001d50:	4619      	mov	r1, r3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	01db      	lsls	r3, r3, #7
 8001d62:	4413      	add	r3, r2
 8001d64:	3384      	adds	r3, #132	@ 0x84
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	01d2      	lsls	r2, r2, #7
 8001d72:	440a      	add	r2, r1
 8001d74:	3284      	adds	r2, #132	@ 0x84
 8001d76:	f023 0307 	bic.w	r3, r3, #7
 8001d7a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	01db      	lsls	r3, r3, #7
 8001d86:	4413      	add	r3, r2
 8001d88:	3384      	adds	r3, #132	@ 0x84
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	01db      	lsls	r3, r3, #7
 8001db8:	4413      	add	r3, r2
 8001dba:	3384      	adds	r3, #132	@ 0x84
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	4413      	add	r3, r2
 8001dca:	3384      	adds	r3, #132	@ 0x84
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2300      	movs	r3, #0
 8001dd0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dd8:	461a      	mov	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	440b      	add	r3, r1
 8001dee:	3384      	adds	r3, #132	@ 0x84
 8001df0:	4619      	mov	r1, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	4413      	add	r3, r2
 8001e04:	3384      	adds	r3, #132	@ 0x84
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	01d2      	lsls	r2, r2, #7
 8001e12:	440a      	add	r2, r1
 8001e14:	3284      	adds	r2, #132	@ 0x84
 8001e16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	01db      	lsls	r3, r3, #7
 8001e26:	4413      	add	r3, r2
 8001e28:	3384      	adds	r3, #132	@ 0x84
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3384      	adds	r3, #132	@ 0x84
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4619      	mov	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3384      	adds	r3, #132	@ 0x84
 8001e50:	4619      	mov	r1, r3
 8001e52:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <LTDC_SetConfig+0x32c>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	6809      	ldr	r1, [r1, #0]
 8001e64:	4608      	mov	r0, r1
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	01c9      	lsls	r1, r1, #7
 8001e6a:	4401      	add	r1, r0
 8001e6c:	3184      	adds	r1, #132	@ 0x84
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	01db      	lsls	r3, r3, #7
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3384      	adds	r3, #132	@ 0x84
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	01db      	lsls	r3, r3, #7
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3384      	adds	r3, #132	@ 0x84
 8001e90:	461a      	mov	r2, r3
 8001e92:	2300      	movs	r3, #0
 8001e94:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	01db      	lsls	r3, r3, #7
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3384      	adds	r3, #132	@ 0x84
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	e01b      	b.n	8001ef2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e014      	b.n	8001ef2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d00b      	beq.n	8001ee8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d007      	beq.n	8001ee8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d003      	beq.n	8001ee8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d102      	bne.n	8001eee <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	e001      	b.n	8001ef2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	4413      	add	r3, r2
 8001efe:	3384      	adds	r3, #132	@ 0x84
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4611      	mov	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	01d2      	lsls	r2, r2, #7
 8001f0c:	440a      	add	r2, r1
 8001f0e:	3284      	adds	r2, #132	@ 0x84
 8001f10:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8001f14:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	69f9      	ldr	r1, [r7, #28]
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	6809      	ldr	r1, [r1, #0]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	01c9      	lsls	r1, r1, #7
 8001f3e:	4401      	add	r1, r0
 8001f40:	3184      	adds	r1, #132	@ 0x84
 8001f42:	4313      	orrs	r3, r2
 8001f44:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	4413      	add	r3, r2
 8001f52:	3384      	adds	r3, #132	@ 0x84
 8001f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	440b      	add	r3, r1
 8001f62:	3384      	adds	r3, #132	@ 0x84
 8001f64:	4619      	mov	r1, r3
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <LTDC_SetConfig+0x330>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	4413      	add	r3, r2
 8001f78:	3384      	adds	r3, #132	@ 0x84
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	01db      	lsls	r3, r3, #7
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3384      	adds	r3, #132	@ 0x84
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4611      	mov	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	01d2      	lsls	r2, r2, #7
 8001f9c:	440a      	add	r2, r1
 8001f9e:	3284      	adds	r2, #132	@ 0x84
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	fffff8f8 	.word	0xfffff8f8
 8001fb8:	fffff800 	.word	0xfffff800

08001fbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_PWREx_ConfigSupply+0xb0>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d00a      	beq.n	8001fe6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_PWREx_ConfigSupply+0xb0>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e03f      	b.n	8002062 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e03d      	b.n	8002062 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <HAL_PWREx_ConfigSupply+0xb0>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001fee:	491f      	ldr	r1, [pc, #124]	@ (800206c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ff6:	f7ff f8d7 	bl	80011a8 <HAL_GetTick>
 8001ffa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ffc:	e009      	b.n	8002012 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ffe:	f7ff f8d3 	bl	80011a8 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800200c:	d901      	bls.n	8002012 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e027      	b.n	8002062 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <HAL_PWREx_ConfigSupply+0xb0>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800201a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800201e:	d1ee      	bne.n	8001ffe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b1e      	cmp	r3, #30
 8002024:	d008      	beq.n	8002038 <HAL_PWREx_ConfigSupply+0x7c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b2e      	cmp	r3, #46	@ 0x2e
 800202a:	d005      	beq.n	8002038 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b1d      	cmp	r3, #29
 8002030:	d002      	beq.n	8002038 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b2d      	cmp	r3, #45	@ 0x2d
 8002036:	d113      	bne.n	8002060 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002038:	f7ff f8b6 	bl	80011a8 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002040:	f7ff f8b2 	bl	80011a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800204e:	d901      	bls.n	8002054 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e006      	b.n	8002062 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_PWREx_ConfigSupply+0xb0>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0311 	and.w	r3, r3, #17
 800205c:	2b11      	cmp	r3, #17
 800205e:	d1ef      	bne.n	8002040 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	58024800 	.word	0x58024800

08002070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e3c8      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002090:	4b88      	ldr	r3, [pc, #544]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800209a:	4b86      	ldr	r3, [pc, #536]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d007      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46>
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	2b18      	cmp	r3, #24
 80020aa:	d110      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b7f      	ldr	r3, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_RCC_OscConfig+0x12c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d168      	bne.n	800219c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e3a2      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76>
 80020d8:	4b76      	ldr	r3, [pc, #472]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a75      	ldr	r2, [pc, #468]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b71      	ldr	r3, [pc, #452]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a70      	ldr	r2, [pc, #448]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6e      	ldr	r3, [pc, #440]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6d      	ldr	r2, [pc, #436]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xbc>
 8002112:	4b68      	ldr	r3, [pc, #416]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a67      	ldr	r2, [pc, #412]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b65      	ldr	r3, [pc, #404]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a64      	ldr	r2, [pc, #400]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 800212c:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a60      	ldr	r2, [pc, #384]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b5e      	ldr	r3, [pc, #376]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5d      	ldr	r2, [pc, #372]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f82c 	bl	80011a8 <HAL_GetTick>
 8002150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f828 	bl	80011a8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	@ 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e356      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002166:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe4>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f818 	bl	80011a8 <HAL_GetTick>
 8002178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff f814 	bl	80011a8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	@ 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e342      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800218e:	4b49      	ldr	r3, [pc, #292]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x10c>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 808c 	beq.w	80022c4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4b41      	ldr	r3, [pc, #260]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021b6:	4b3f      	ldr	r3, [pc, #252]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_RCC_OscConfig+0x162>
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b18      	cmp	r3, #24
 80021c6:	d137      	bne.n	8002238 <HAL_RCC_OscConfig+0x1c8>
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d132      	bne.n	8002238 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x17a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e314      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021ea:	4b32      	ldr	r3, [pc, #200]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0219 	bic.w	r2, r3, #25
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	492f      	ldr	r1, [pc, #188]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ffd4 	bl	80011a8 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7fe ffd0 	bl	80011a8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e2fe      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002216:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	4920      	ldr	r1, [pc, #128]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002236:	e045      	b.n	80022c4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d026      	beq.n	800228e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002240:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 0219 	bic.w	r2, r3, #25
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4919      	ldr	r1, [pc, #100]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe ffa9 	bl	80011a8 <HAL_GetTick>
 8002256:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe ffa5 	bl	80011a8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e2d3      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	490b      	ldr	r1, [pc, #44]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e01a      	b.n	80022c4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe ff85 	bl	80011a8 <HAL_GetTick>
 800229e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe ff81 	bl	80011a8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d903      	bls.n	80022b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2af      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
 80022b4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022b8:	4b96      	ldr	r3, [pc, #600]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d06a      	beq.n	80023a6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d0:	4b90      	ldr	r3, [pc, #576]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022da:	4b8e      	ldr	r3, [pc, #568]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d007      	beq.n	80022f6 <HAL_RCC_OscConfig+0x286>
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b18      	cmp	r3, #24
 80022ea:	d11b      	bne.n	8002324 <HAL_RCC_OscConfig+0x2b4>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022f6:	4b87      	ldr	r3, [pc, #540]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x29e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b80      	cmp	r3, #128	@ 0x80
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e282      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800230e:	4b81      	ldr	r3, [pc, #516]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	061b      	lsls	r3, r3, #24
 800231c:	497d      	ldr	r1, [pc, #500]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002322:	e040      	b.n	80023a6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800232c:	4b79      	ldr	r3, [pc, #484]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a78      	ldr	r2, [pc, #480]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe ff36 	bl	80011a8 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002340:	f7fe ff32 	bl	80011a8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e260      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	061b      	lsls	r3, r3, #24
 800236c:	4969      	ldr	r1, [pc, #420]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]
 8002372:	e018      	b.n	80023a6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002374:	4b67      	ldr	r3, [pc, #412]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a66      	ldr	r2, [pc, #408]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800237a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe ff12 	bl	80011a8 <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002388:	f7fe ff0e 	bl	80011a8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e23c      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800239a:	4b5e      	ldr	r3, [pc, #376]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d036      	beq.n	8002420 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b56      	ldr	r3, [pc, #344]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80023bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023be:	4a55      	ldr	r2, [pc, #340]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7fe feef 	bl	80011a8 <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ce:	f7fe feeb 	bl	80011a8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e219      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x35e>
 80023ec:	e018      	b.n	8002420 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b49      	ldr	r3, [pc, #292]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f2:	4a48      	ldr	r2, [pc, #288]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe fed5 	bl	80011a8 <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002402:	f7fe fed1 	bl	80011a8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1ff      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002414:	4b3f      	ldr	r3, [pc, #252]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d036      	beq.n	800249a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d019      	beq.n	8002468 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002434:	4b37      	ldr	r3, [pc, #220]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a36      	ldr	r2, [pc, #216]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800243a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800243e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002440:	f7fe feb2 	bl	80011a8 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002448:	f7fe feae 	bl	80011a8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1dc      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800245a:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x3d8>
 8002466:	e018      	b.n	800249a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002468:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a29      	ldr	r2, [pc, #164]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800246e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002472:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002474:	f7fe fe98 	bl	80011a8 <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247c:	f7fe fe94 	bl	80011a8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1c2      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800248e:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8086 	beq.w	80025b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HAL_RCC_OscConfig+0x4a8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_RCC_OscConfig+0x4a8>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b4:	f7fe fe78 	bl	80011a8 <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7fe fe74 	bl	80011a8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1a2      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_RCC_OscConfig+0x4a8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x480>
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ee:	e032      	b.n	8002556 <HAL_RCC_OscConfig+0x4e6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_RCC_OscConfig+0x4ac>
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	@ 0x70
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	4a02      	ldr	r2, [pc, #8]	@ (8002514 <HAL_RCC_OscConfig+0x4a4>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002510:	e021      	b.n	8002556 <HAL_RCC_OscConfig+0x4e6>
 8002512:	bf00      	nop
 8002514:	58024400 	.word	0x58024400
 8002518:	58024800 	.word	0x58024800
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x4ce>
 8002524:	4b83      	ldr	r3, [pc, #524]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002528:	4a82      	ldr	r2, [pc, #520]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002530:	4b80      	ldr	r3, [pc, #512]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	4a7f      	ldr	r2, [pc, #508]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	@ 0x70
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x4e6>
 800253e:	4b7d      	ldr	r3, [pc, #500]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002542:	4a7c      	ldr	r2, [pc, #496]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	@ 0x70
 800254a:	4b7a      	ldr	r3, [pc, #488]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a79      	ldr	r2, [pc, #484]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe fe23 	bl	80011a8 <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fe1f 	bl	80011a8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e14b      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257c:	4b6d      	ldr	r3, [pc, #436]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x4f6>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fe0d 	bl	80011a8 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fe09 	bl	80011a8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e135      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025a8:	4b62      	ldr	r3, [pc, #392]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 812a 	beq.w	8002812 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025be:	4b5d      	ldr	r3, [pc, #372]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c6:	2b18      	cmp	r3, #24
 80025c8:	f000 80ba 	beq.w	8002740 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 8095 	bne.w	8002700 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b57      	ldr	r3, [pc, #348]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a56      	ldr	r2, [pc, #344]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80025dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fde1 	bl	80011a8 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fddd 	bl	80011a8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e10b      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800260a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260c:	4b4a      	ldr	r3, [pc, #296]	@ (8002738 <HAL_RCC_OscConfig+0x6c8>)
 800260e:	4013      	ands	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	430a      	orrs	r2, r1
 800261c:	4945      	ldr	r1, [pc, #276]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	628b      	str	r3, [r1, #40]	@ 0x28
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	3b01      	subs	r3, #1
 8002628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002630:	3b01      	subs	r3, #1
 8002632:	025b      	lsls	r3, r3, #9
 8002634:	b29b      	uxth	r3, r3
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263c:	3b01      	subs	r3, #1
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	3b01      	subs	r3, #1
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002652:	4938      	ldr	r1, [pc, #224]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	4a35      	ldr	r2, [pc, #212]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002664:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002668:	4b34      	ldr	r3, [pc, #208]	@ (800273c <HAL_RCC_OscConfig+0x6cc>)
 800266a:	4013      	ands	r3, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002670:	00d2      	lsls	r2, r2, #3
 8002672:	4930      	ldr	r1, [pc, #192]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002678:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f023 020c 	bic.w	r2, r3, #12
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	492b      	ldr	r1, [pc, #172]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800268a:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	f023 0202 	bic.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4927      	ldr	r1, [pc, #156]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	4a24      	ldr	r2, [pc, #144]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a8:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	4a21      	ldr	r2, [pc, #132]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a18      	ldr	r2, [pc, #96]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fd66 	bl	80011a8 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fd62 	bl	80011a8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e090      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x670>
 80026fe:	e088      	b.n	8002812 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fd4c 	bl	80011a8 <HAL_GetTick>
 8002710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fd48 	bl	80011a8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e076      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002726:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_RCC_OscConfig+0x6c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x6a4>
 8002732:	e06e      	b.n	8002812 <HAL_RCC_OscConfig+0x7a2>
 8002734:	58024400 	.word	0x58024400
 8002738:	fffffc0c 	.word	0xfffffc0c
 800273c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002746:	4b35      	ldr	r3, [pc, #212]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	2b01      	cmp	r3, #1
 8002752:	d031      	beq.n	80027b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d12a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d122      	bne.n	80027b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d11a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0a5b      	lsrs	r3, r3, #9
 8002786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d111      	bne.n	80027b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e02b      	b.n	8002814 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027bc:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 80027be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d01f      	beq.n	8002812 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	4a11      	ldr	r2, [pc, #68]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027de:	f7fe fce3 	bl	80011a8 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80027e4:	bf00      	nop
 80027e6:	f7fe fcdf 	bl	80011a8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d0f9      	beq.n	80027e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 80027f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_RCC_OscConfig+0x7b0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027fe:	00d2      	lsls	r2, r2, #3
 8002800:	4906      	ldr	r1, [pc, #24]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 8002802:	4313      	orrs	r3, r2
 8002804:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	4a04      	ldr	r2, [pc, #16]	@ (800281c <HAL_RCC_OscConfig+0x7ac>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3730      	adds	r7, #48	@ 0x30
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	58024400 	.word	0x58024400
 8002820:	ffff0007 	.word	0xffff0007

08002824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e19c      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b8a      	ldr	r3, [pc, #552]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d910      	bls.n	8002868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b87      	ldr	r3, [pc, #540]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 020f 	bic.w	r2, r3, #15
 800284e:	4985      	ldr	r1, [pc, #532]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b83      	ldr	r3, [pc, #524]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e184      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	4b7b      	ldr	r3, [pc, #492]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002880:	429a      	cmp	r2, r3
 8002882:	d908      	bls.n	8002896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002884:	4b78      	ldr	r3, [pc, #480]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	4975      	ldr	r1, [pc, #468]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002892:	4313      	orrs	r3, r2
 8002894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d010      	beq.n	80028c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	4b70      	ldr	r3, [pc, #448]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	496a      	ldr	r1, [pc, #424]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028dc:	429a      	cmp	r2, r3
 80028de:	d908      	bls.n	80028f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028e0:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	495e      	ldr	r1, [pc, #376]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800290a:	429a      	cmp	r2, r3
 800290c:	d908      	bls.n	8002920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800290e:	4b56      	ldr	r3, [pc, #344]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4953      	ldr	r1, [pc, #332]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 800291c:	4313      	orrs	r3, r2
 800291e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	4b4d      	ldr	r3, [pc, #308]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	429a      	cmp	r2, r3
 800293a:	d908      	bls.n	800294e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f023 020f 	bic.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4947      	ldr	r1, [pc, #284]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 800294a:	4313      	orrs	r3, r2
 800294c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d055      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800295a:	4b43      	ldr	r3, [pc, #268]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4940      	ldr	r1, [pc, #256]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002968:	4313      	orrs	r3, r2
 800296a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d107      	bne.n	8002984 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002974:	4b3c      	ldr	r3, [pc, #240]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d121      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0f6      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d107      	bne.n	800299c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d115      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0ea      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a4:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0de      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d6      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f023 0207 	bic.w	r2, r3, #7
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4925      	ldr	r1, [pc, #148]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d6:	f7fe fbe7 	bl	80011a8 <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029de:	f7fe fbe3 	bl	80011a8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0be      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d1eb      	bne.n	80029de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d208      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f023 020f 	bic.w	r2, r3, #15
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d214      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b08      	ldr	r3, [pc, #32]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 020f 	bic.w	r2, r3, #15
 8002a4a:	4906      	ldr	r1, [pc, #24]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <HAL_RCC_ClockConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e086      	b.n	8002b72 <HAL_RCC_ClockConfig+0x34e>
 8002a64:	52002000 	.word	0x52002000
 8002a68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d010      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d208      	bcs.n	8002a9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a88:	4b3c      	ldr	r3, [pc, #240]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4939      	ldr	r1, [pc, #228]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	4b34      	ldr	r3, [pc, #208]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d208      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ab6:	4b31      	ldr	r3, [pc, #196]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	492e      	ldr	r1, [pc, #184]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	4b28      	ldr	r3, [pc, #160]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d208      	bcs.n	8002af6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4922      	ldr	r1, [pc, #136]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d010      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d208      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b12:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4917      	ldr	r1, [pc, #92]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b24:	f000 f834 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	4912      	ldr	r1, [pc, #72]	@ (8002b80 <HAL_RCC_ClockConfig+0x35c>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_RCC_ClockConfig+0x358>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_RCC_ClockConfig+0x35c>)
 8002b4c:	5cd3      	ldrb	r3, [r2, r3]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x360>)
 8002b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <HAL_RCC_ClockConfig+0x364>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_RCC_ClockConfig+0x368>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f8d4 	bl	8000d14 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	0801dcb0 	.word	0x0801dcb0
 8002b84:	24000008 	.word	0x24000008
 8002b88:	24000004 	.word	0x24000004
 8002b8c:	2400000c 	.word	0x2400000c

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	@ 0x24
 8002b94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b96:	4bb3      	ldr	r3, [pc, #716]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b9e:	2b18      	cmp	r3, #24
 8002ba0:	f200 8155 	bhi.w	8002e4e <HAL_RCC_GetSysClockFreq+0x2be>
 8002ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002c11 	.word	0x08002c11
 8002bb0:	08002e4f 	.word	0x08002e4f
 8002bb4:	08002e4f 	.word	0x08002e4f
 8002bb8:	08002e4f 	.word	0x08002e4f
 8002bbc:	08002e4f 	.word	0x08002e4f
 8002bc0:	08002e4f 	.word	0x08002e4f
 8002bc4:	08002e4f 	.word	0x08002e4f
 8002bc8:	08002e4f 	.word	0x08002e4f
 8002bcc:	08002c37 	.word	0x08002c37
 8002bd0:	08002e4f 	.word	0x08002e4f
 8002bd4:	08002e4f 	.word	0x08002e4f
 8002bd8:	08002e4f 	.word	0x08002e4f
 8002bdc:	08002e4f 	.word	0x08002e4f
 8002be0:	08002e4f 	.word	0x08002e4f
 8002be4:	08002e4f 	.word	0x08002e4f
 8002be8:	08002e4f 	.word	0x08002e4f
 8002bec:	08002c3d 	.word	0x08002c3d
 8002bf0:	08002e4f 	.word	0x08002e4f
 8002bf4:	08002e4f 	.word	0x08002e4f
 8002bf8:	08002e4f 	.word	0x08002e4f
 8002bfc:	08002e4f 	.word	0x08002e4f
 8002c00:	08002e4f 	.word	0x08002e4f
 8002c04:	08002e4f 	.word	0x08002e4f
 8002c08:	08002e4f 	.word	0x08002e4f
 8002c0c:	08002c43 	.word	0x08002c43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c10:	4b94      	ldr	r3, [pc, #592]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c1c:	4b91      	ldr	r3, [pc, #580]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	4a90      	ldr	r2, [pc, #576]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c2e:	e111      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c30:	4b8d      	ldr	r3, [pc, #564]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c32:	61bb      	str	r3, [r7, #24]
      break;
 8002c34:	e10e      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c36:	4b8d      	ldr	r3, [pc, #564]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c38:	61bb      	str	r3, [r7, #24]
      break;
 8002c3a:	e10b      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c3e:	61bb      	str	r3, [r7, #24]
      break;
 8002c40:	e108      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c42:	4b88      	ldr	r3, [pc, #544]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c4c:	4b85      	ldr	r3, [pc, #532]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c58:	4b82      	ldr	r3, [pc, #520]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c62:	4b80      	ldr	r3, [pc, #512]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80e1 	beq.w	8002e48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	f000 8083 	beq.w	8002d94 <HAL_RCC_GetSysClockFreq+0x204>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	f200 80a1 	bhi.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x114>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d056      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ca2:	e099      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02d      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	4a6b      	ldr	r2, [pc, #428]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cda:	4b62      	ldr	r3, [pc, #392]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d0a:	e087      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002e78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1e:	4b51      	ldr	r3, [pc, #324]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d4e:	e065      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d62:	4b40      	ldr	r3, [pc, #256]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d92:	e043      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002e80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dd6:	e021      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dea:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dfe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	0a5b      	lsrs	r3, r3, #9
 8002e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e26:	3301      	adds	r3, #1
 8002e28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e40:	ee17 3a90 	vmov	r3, s15
 8002e44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e46:	e005      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e50:	61bb      	str	r3, [r7, #24]
      break;
 8002e52:	bf00      	nop
  }

  return sysclockfreq;
 8002e54:	69bb      	ldr	r3, [r7, #24]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	@ 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	58024400 	.word	0x58024400
 8002e68:	03d09000 	.word	0x03d09000
 8002e6c:	003d0900 	.word	0x003d0900
 8002e70:	017d7840 	.word	0x017d7840
 8002e74:	46000000 	.word	0x46000000
 8002e78:	4c742400 	.word	0x4c742400
 8002e7c:	4a742400 	.word	0x4a742400
 8002e80:	4bbebc20 	.word	0x4bbebc20

08002e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e8a:	f7ff fe81 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490f      	ldr	r1, [pc, #60]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	4a09      	ldr	r2, [pc, #36]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x58>)
 8002ec0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ec2:	4a07      	ldr	r2, [pc, #28]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x58>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	58024400 	.word	0x58024400
 8002ed8:	0801dcb0 	.word	0x0801dcb0
 8002edc:	24000008 	.word	0x24000008
 8002ee0:	24000004 	.word	0x24000004

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ee8:	f7ff ffcc 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4904      	ldr	r1, [pc, #16]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	0801dcb0 	.word	0x0801dcb0

08002f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	223f      	movs	r2, #63	@ 0x3f
 8002f1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f20:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0207 	and.w	r2, r3, #7
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002f2c:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002f38:	4b14      	ldr	r3, [pc, #80]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002f50:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002f68:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <HAL_RCC_GetClockConfig+0x7c>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_GetClockConfig+0x80>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	52002000 	.word	0x52002000

08002f94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b0c6      	sub	sp, #280	@ 0x118
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002fb8:	2500      	movs	r5, #0
 8002fba:	ea54 0305 	orrs.w	r3, r4, r5
 8002fbe:	d049      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fca:	d02f      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fd0:	d828      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd6:	d01a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fdc:	d822      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fe6:	d007      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fe8:	e01c      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fea:	4bab      	ldr	r3, [pc, #684]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	4aaa      	ldr	r2, [pc, #680]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ff6:	e01a      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f967 	bl	80042d4 <RCCEx_PLL2_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800300c:	e00f      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800300e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003012:	3328      	adds	r3, #40	@ 0x28
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f001 fa0e 	bl	8004438 <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003036:	4b98      	ldr	r3, [pc, #608]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800303e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003044:	4a94      	ldr	r2, [pc, #592]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003046:	430b      	orrs	r3, r1
 8003048:	6513      	str	r3, [r2, #80]	@ 0x50
 800304a:	e003      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003060:	f04f 0900 	mov.w	r9, #0
 8003064:	ea58 0309 	orrs.w	r3, r8, r9
 8003068:	d047      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	2b04      	cmp	r3, #4
 8003072:	d82a      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003074:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	08003091 	.word	0x08003091
 8003080:	0800309f 	.word	0x0800309f
 8003084:	080030b5 	.word	0x080030b5
 8003088:	080030d3 	.word	0x080030d3
 800308c:	080030d3 	.word	0x080030d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003090:	4b81      	ldr	r3, [pc, #516]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	4a80      	ldr	r2, [pc, #512]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800309a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800309c:	e01a      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a2:	3308      	adds	r3, #8
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 f914 	bl	80042d4 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b2:	e00f      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b8:	3328      	adds	r3, #40	@ 0x28
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f9bb 	bl	8004438 <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030c8:	e004      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030dc:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e0:	f023 0107 	bic.w	r1, r3, #7
 80030e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80030f0:	e003      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003106:	f04f 0b00 	mov.w	fp, #0
 800310a:	ea5a 030b 	orrs.w	r3, sl, fp
 800310e:	d05b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003118:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800311c:	d03b      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800311e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003122:	d834      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003128:	d037      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800312a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800312e:	d82e      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003130:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003134:	d033      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003136:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800313a:	d828      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800313c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003140:	d01a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003146:	d822      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800314c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003150:	d007      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003152:	e01c      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003154:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	4a4f      	ldr	r2, [pc, #316]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800315a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800315e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003160:	e01e      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003166:	3308      	adds	r3, #8
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f001 f8b2 	bl	80042d4 <RCCEx_PLL2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003176:	e013      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800317c:	3328      	adds	r3, #40	@ 0x28
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f001 f959 	bl	8004438 <RCCEx_PLL3_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800318c:	e008      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003194:	e004      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800319e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80031b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031b8:	4a37      	ldr	r2, [pc, #220]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031be:	e003      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80031d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80031e2:	460b      	mov	r3, r1
 80031e4:	4313      	orrs	r3, r2
 80031e6:	d05d      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80031e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80031f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031f4:	d03b      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80031f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031fa:	d834      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003200:	d037      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003202:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003206:	d82e      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003208:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800320c:	d033      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800320e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003212:	d828      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003218:	d01a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800321a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800321e:	d822      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003228:	d007      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800322a:	e01c      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003238:	e01e      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800323a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323e:	3308      	adds	r3, #8
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f001 f846 	bl	80042d4 <RCCEx_PLL2_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800324e:	e013      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003254:	3328      	adds	r3, #40	@ 0x28
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f8ed 	bl	8004438 <RCCEx_PLL3_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003264:	e008      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800326c:	e004      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800326e:	bf00      	nop
 8003270:	e002      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003272:	bf00      	nop
 8003274:	e000      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800328c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003290:	4a01      	ldr	r2, [pc, #4]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003292:	430b      	orrs	r3, r1
 8003294:	6593      	str	r3, [r2, #88]	@ 0x58
 8003296:	e005      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80032b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80032ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d03a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80032c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	2b30      	cmp	r3, #48	@ 0x30
 80032cc:	d01f      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80032ce:	2b30      	cmp	r3, #48	@ 0x30
 80032d0:	d819      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d815      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d019      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d111      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e2:	4baa      	ldr	r3, [pc, #680]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	4aa9      	ldr	r2, [pc, #676]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032ee:	e011      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f4:	3308      	adds	r3, #8
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 ffeb 	bl	80042d4 <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003304:	e006      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800331c:	4b9b      	ldr	r3, [pc, #620]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003320:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	4a98      	ldr	r2, [pc, #608]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800332c:	430b      	orrs	r3, r1
 800332e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003330:	e003      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003336:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800333a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003350:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d051      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800335a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003364:	d035      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800336a:	d82e      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800336c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003370:	d031      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003372:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003376:	d828      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337c:	d01a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003382:	d822      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338c:	d007      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800338e:	e01c      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003390:	4b7e      	ldr	r3, [pc, #504]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	4a7d      	ldr	r2, [pc, #500]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800339a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800339c:	e01c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a2:	3308      	adds	r3, #8
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ff94 	bl	80042d4 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033b2:	e011      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b8:	3328      	adds	r3, #40	@ 0x28
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 f83b 	bl	8004438 <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033e0:	4b6a      	ldr	r3, [pc, #424]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ee:	4a67      	ldr	r2, [pc, #412]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800340a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003414:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d053      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800341e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003428:	d033      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800342a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800342e:	d82c      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003430:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003434:	d02f      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003436:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800343a:	d826      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800343c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003440:	d02b      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003442:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003446:	d820      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800344c:	d012      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800344e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003452:	d81a      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d022      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d115      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800345e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003462:	3308      	adds	r3, #8
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ff34 	bl	80042d4 <RCCEx_PLL2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003472:	e015      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003478:	3328      	adds	r3, #40	@ 0x28
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 ffdb 	bl	8004438 <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003488:	e00a      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003490:	e006      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003492:	bf00      	nop
 8003494:	e004      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800349e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034a8:	4b38      	ldr	r3, [pc, #224]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80034b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	4a35      	ldr	r2, [pc, #212]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80034bc:	e003      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80034d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034e0:	460b      	mov	r3, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d058      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034f2:	d033      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80034f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034f8:	d82c      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fe:	d02f      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003504:	d826      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800350a:	d02b      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800350c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003510:	d820      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003516:	d012      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800351c:	d81a      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d022      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003526:	d115      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352c:	3308      	adds	r3, #8
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fecf 	bl	80042d4 <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800353c:	e015      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800353e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003542:	3328      	adds	r3, #40	@ 0x28
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f000 ff76 	bl	8004438 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003552:	e00a      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800355a:	e006      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800355c:	bf00      	nop
 800355e:	e004      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003560:	bf00      	nop
 8003562:	e002      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003564:	bf00      	nop
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10e      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800357a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003582:	4a02      	ldr	r2, [pc, #8]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003584:	430b      	orrs	r3, r1
 8003586:	6593      	str	r3, [r2, #88]	@ 0x58
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800358a:	bf00      	nop
 800358c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80035a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4313      	orrs	r3, r2
 80035b6:	d037      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c2:	d00e      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c8:	d816      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035d2:	d111      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d4:	4bc4      	ldr	r3, [pc, #784]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	4ac3      	ldr	r2, [pc, #780]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035e0:	e00f      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e6:	3308      	adds	r3, #8
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fe72 	bl	80042d4 <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035f6:	e004      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800360a:	4bb7      	ldr	r3, [pc, #732]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003618:	4ab3      	ldr	r2, [pc, #716]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800361a:	430b      	orrs	r3, r1
 800361c:	6513      	str	r3, [r2, #80]	@ 0x50
 800361e:	e003      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800363e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003642:	460b      	mov	r3, r1
 8003644:	4313      	orrs	r3, r2
 8003646:	d039      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364e:	2b03      	cmp	r3, #3
 8003650:	d81c      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003652:	a201      	add	r2, pc, #4	@ (adr r2, 8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003695 	.word	0x08003695
 800365c:	08003669 	.word	0x08003669
 8003660:	08003677 	.word	0x08003677
 8003664:	08003695 	.word	0x08003695
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b9f      	ldr	r3, [pc, #636]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	4a9e      	ldr	r2, [pc, #632]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003674:	e00f      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367a:	3308      	adds	r3, #8
 800367c:	2102      	movs	r1, #2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fe28 	bl	80042d4 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800368a:	e004      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800369e:	4b92      	ldr	r3, [pc, #584]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a2:	f023 0103 	bic.w	r1, r3, #3
 80036a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ac:	4a8e      	ldr	r2, [pc, #568]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ae:	430b      	orrs	r3, r1
 80036b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036b2:	e003      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80036c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036cc:	2300      	movs	r3, #0
 80036ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4313      	orrs	r3, r2
 80036da:	f000 8099 	beq.w	8003810 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036de:	4b83      	ldr	r3, [pc, #524]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a82      	ldr	r2, [pc, #520]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ea:	f7fd fd5d 	bl	80011a8 <HAL_GetTick>
 80036ee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f2:	e00b      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f4:	f7fd fd58 	bl	80011a8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	@ 0x64
 8003702:	d903      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800370a:	e005      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370c:	4b77      	ldr	r3, [pc, #476]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ed      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800371c:	2b00      	cmp	r3, #0
 800371e:	d173      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003720:	4b71      	ldr	r3, [pc, #452]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003722:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800372c:	4053      	eors	r3, r2
 800372e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003736:	4b6c      	ldr	r3, [pc, #432]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003742:	4b69      	ldr	r3, [pc, #420]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	4a68      	ldr	r2, [pc, #416]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374e:	4b66      	ldr	r3, [pc, #408]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003752:	4a65      	ldr	r2, [pc, #404]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003758:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800375a:	4a63      	ldr	r2, [pc, #396]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800375c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003760:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800376a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800376e:	d118      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fd1a 	bl	80011a8 <HAL_GetTick>
 8003774:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003778:	e00d      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fd fd15 	bl	80011a8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	f241 3388 	movw	r3, #5000	@ 0x1388
 800378a:	429a      	cmp	r2, r3
 800378c:	d903      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003794:	e005      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003796:	4b54      	ldr	r3, [pc, #336]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0eb      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80037a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d129      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ba:	d10e      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037bc:	4b4a      	ldr	r3, [pc, #296]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80037c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037cc:	091a      	lsrs	r2, r3, #4
 80037ce:	4b48      	ldr	r3, [pc, #288]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	4a45      	ldr	r2, [pc, #276]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6113      	str	r3, [r2, #16]
 80037d8:	e005      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037da:	4b43      	ldr	r3, [pc, #268]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	4a42      	ldr	r2, [pc, #264]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037e4:	6113      	str	r3, [r2, #16]
 80037e6:	4b40      	ldr	r3, [pc, #256]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80037ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	4a3c      	ldr	r2, [pc, #240]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fc:	e008      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800380c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f002 0301 	and.w	r3, r2, #1
 800381c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003826:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	f000 808f 	beq.w	8003950 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003838:	2b28      	cmp	r3, #40	@ 0x28
 800383a:	d871      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800383c:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003929 	.word	0x08003929
 8003848:	08003921 	.word	0x08003921
 800384c:	08003921 	.word	0x08003921
 8003850:	08003921 	.word	0x08003921
 8003854:	08003921 	.word	0x08003921
 8003858:	08003921 	.word	0x08003921
 800385c:	08003921 	.word	0x08003921
 8003860:	08003921 	.word	0x08003921
 8003864:	080038f5 	.word	0x080038f5
 8003868:	08003921 	.word	0x08003921
 800386c:	08003921 	.word	0x08003921
 8003870:	08003921 	.word	0x08003921
 8003874:	08003921 	.word	0x08003921
 8003878:	08003921 	.word	0x08003921
 800387c:	08003921 	.word	0x08003921
 8003880:	08003921 	.word	0x08003921
 8003884:	0800390b 	.word	0x0800390b
 8003888:	08003921 	.word	0x08003921
 800388c:	08003921 	.word	0x08003921
 8003890:	08003921 	.word	0x08003921
 8003894:	08003921 	.word	0x08003921
 8003898:	08003921 	.word	0x08003921
 800389c:	08003921 	.word	0x08003921
 80038a0:	08003921 	.word	0x08003921
 80038a4:	08003929 	.word	0x08003929
 80038a8:	08003921 	.word	0x08003921
 80038ac:	08003921 	.word	0x08003921
 80038b0:	08003921 	.word	0x08003921
 80038b4:	08003921 	.word	0x08003921
 80038b8:	08003921 	.word	0x08003921
 80038bc:	08003921 	.word	0x08003921
 80038c0:	08003921 	.word	0x08003921
 80038c4:	08003929 	.word	0x08003929
 80038c8:	08003921 	.word	0x08003921
 80038cc:	08003921 	.word	0x08003921
 80038d0:	08003921 	.word	0x08003921
 80038d4:	08003921 	.word	0x08003921
 80038d8:	08003921 	.word	0x08003921
 80038dc:	08003921 	.word	0x08003921
 80038e0:	08003921 	.word	0x08003921
 80038e4:	08003929 	.word	0x08003929
 80038e8:	58024400 	.word	0x58024400
 80038ec:	58024800 	.word	0x58024800
 80038f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f8:	3308      	adds	r3, #8
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fce9 	bl	80042d4 <RCCEx_PLL2_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003908:	e00f      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390e:	3328      	adds	r3, #40	@ 0x28
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fd90 	bl	8004438 <RCCEx_PLL3_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003932:	4bbf      	ldr	r3, [pc, #764]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800393a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003940:	4abb      	ldr	r2, [pc, #748]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6553      	str	r3, [r2, #84]	@ 0x54
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800394c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 0302 	and.w	r3, r2, #2
 800395c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003966:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d041      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	2b05      	cmp	r3, #5
 8003978:	d824      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800397a:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039cd 	.word	0x080039cd
 8003984:	08003999 	.word	0x08003999
 8003988:	080039af 	.word	0x080039af
 800398c:	080039cd 	.word	0x080039cd
 8003990:	080039cd 	.word	0x080039cd
 8003994:	080039cd 	.word	0x080039cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399c:	3308      	adds	r3, #8
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fc97 	bl	80042d4 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039ac:	e00f      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b2:	3328      	adds	r3, #40	@ 0x28
 80039b4:	2101      	movs	r1, #1
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fd3e 	bl	8004438 <RCCEx_PLL3_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80039cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039d6:	4b96      	ldr	r3, [pc, #600]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	f023 0107 	bic.w	r1, r3, #7
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e4:	4a92      	ldr	r2, [pc, #584]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f002 0304 	and.w	r3, r2, #4
 8003a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d044      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d825      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003a20:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a75 	.word	0x08003a75
 8003a2c:	08003a41 	.word	0x08003a41
 8003a30:	08003a57 	.word	0x08003a57
 8003a34:	08003a75 	.word	0x08003a75
 8003a38:	08003a75 	.word	0x08003a75
 8003a3c:	08003a75 	.word	0x08003a75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a44:	3308      	adds	r3, #8
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fc43 	bl	80042d4 <RCCEx_PLL2_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5a:	3328      	adds	r3, #40	@ 0x28
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fcea 	bl	8004438 <RCCEx_PLL3_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	f023 0107 	bic.w	r1, r3, #7
 8003a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	4a68      	ldr	r2, [pc, #416]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f002 0320 	and.w	r3, r2, #32
 8003aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ab4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	d055      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aca:	d033      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad0:	d82c      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d02f      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d826      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ae2:	d02b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ae4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ae8:	d820      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aee:	d012      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af4:	d81a      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d022      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003afe:	d115      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b04:	3308      	adds	r3, #8
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fbe3 	bl	80042d4 <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b14:	e015      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1a:	3328      	adds	r3, #40	@ 0x28
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc8a 	bl	8004438 <RCCEx_PLL3_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b32:	e006      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b34:	bf00      	nop
 8003b36:	e004      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b38:	bf00      	nop
 8003b3a:	e002      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4a:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b5a:	4a35      	ldr	r2, [pc, #212]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b60:	e003      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b80:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b84:	460b      	mov	r3, r1
 8003b86:	4313      	orrs	r3, r2
 8003b88:	d058      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b96:	d033      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003b98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b9c:	d82c      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba2:	d02f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d826      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003baa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bae:	d02b      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bb4:	d820      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bba:	d012      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc0:	d81a      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d022      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d115      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fb7d 	bl	80042d4 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003be0:	e015      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fc24 	bl	8004438 <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bfe:	e006      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c00:	bf00      	nop
 8003c02:	e004      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c04:	bf00      	nop
 8003c06:	e002      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c26:	4a02      	ldr	r2, [pc, #8]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d055      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c64:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c68:	d033      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003c6a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c6e:	d82c      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c74:	d02f      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7a:	d826      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c7c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c80:	d02b      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c82:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c86:	d820      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8c:	d012      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c92:	d81a      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d022      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9c:	d115      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fb14 	bl	80042d4 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cb2:	e015      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb8:	3328      	adds	r3, #40	@ 0x28
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fbbb 	bl	8004438 <RCCEx_PLL3_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cd0:	e006      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ce8:	4ba0      	ldr	r3, [pc, #640]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cf8:	4a9c      	ldr	r2, [pc, #624]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f002 0308 	and.w	r3, r2, #8
 8003d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d01e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	3328      	adds	r3, #40	@ 0x28
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fb7a 	bl	8004438 <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003d50:	4b86      	ldr	r3, [pc, #536]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d60:	4a82      	ldr	r2, [pc, #520]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f002 0310 	and.w	r3, r2, #16
 8003d72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d01e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d92:	d10c      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	3328      	adds	r3, #40	@ 0x28
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fb4b 	bl	8004438 <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dae:	4b6f      	ldr	r3, [pc, #444]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dd6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	d03e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dec:	d022      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003df2:	d81b      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003dfe:	e015      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e04:	3308      	adds	r3, #8
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fa63 	bl	80042d4 <RCCEx_PLL2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e14:	e00f      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1a:	3328      	adds	r3, #40	@ 0x28
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb0a 	bl	8004438 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e4e:	4a47      	ldr	r2, [pc, #284]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d03b      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e86:	d01f      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e8c:	d818      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e92:	d003      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003e94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e98:	d007      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003e9a:	e011      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9c:	4b33      	ldr	r3, [pc, #204]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	4a32      	ldr	r2, [pc, #200]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	3328      	adds	r3, #40	@ 0x28
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fac0 	bl	8004438 <RCCEx_PLL3_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ebe:	e004      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ec6:	e000      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed2:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee2:	4a22      	ldr	r2, [pc, #136]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003efe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f00:	2300      	movs	r3, #0
 8003f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	d034      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1c:	d007      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003f1e:	e011      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00e      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f32:	3308      	adds	r3, #8
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f9cc 	bl	80042d4 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	4a02      	ldr	r2, [pc, #8]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f86:	2300      	movs	r3, #0
 8003f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d00c      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f98:	3328      	adds	r3, #40	@ 0x28
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fa4b 	bl	8004438 <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003fba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd4:	d018      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fda:	d811      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe0:	d014      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe6:	d80b      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d011      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff0:	d106      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff2:	4bb7      	ldr	r3, [pc, #732]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4ab6      	ldr	r2, [pc, #728]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ffe:	e008      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004006:	e004      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004008:	bf00      	nop
 800400a:	e002      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800401a:	4bad      	ldr	r3, [pc, #692]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	4aa9      	ldr	r2, [pc, #676]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800402a:	430b      	orrs	r3, r1
 800402c:	6553      	str	r3, [r2, #84]	@ 0x54
 800402e:	e003      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004044:	653b      	str	r3, [r7, #80]	@ 0x50
 8004046:	2300      	movs	r3, #0
 8004048:	657b      	str	r3, [r7, #84]	@ 0x54
 800404a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004054:	4b9e      	ldr	r3, [pc, #632]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	4a9b      	ldr	r2, [pc, #620]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004076:	2300      	movs	r3, #0
 8004078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800407a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800407e:	460b      	mov	r3, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004084:	4b92      	ldr	r3, [pc, #584]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004092:	4a8f      	ldr	r2, [pc, #572]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004094:	430b      	orrs	r3, r1
 8004096:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80040a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a6:	2300      	movs	r3, #0
 80040a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80040ae:	460b      	mov	r3, r1
 80040b0:	4313      	orrs	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040b4:	4b86      	ldr	r3, [pc, #536]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4a85      	ldr	r2, [pc, #532]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040be:	6113      	str	r3, [r2, #16]
 80040c0:	4b83      	ldr	r3, [pc, #524]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c2:	6919      	ldr	r1, [r3, #16]
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040cc:	4a80      	ldr	r2, [pc, #512]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040e0:	2300      	movs	r3, #0
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80040e8:	460b      	mov	r3, r1
 80040ea:	4313      	orrs	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040ee:	4b78      	ldr	r3, [pc, #480]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	4a74      	ldr	r2, [pc, #464]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800410e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004110:	2300      	movs	r3, #0
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
 8004114:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800411e:	4b6c      	ldr	r3, [pc, #432]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004122:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	4a68      	ldr	r2, [pc, #416]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004130:	430b      	orrs	r3, r1
 8004132:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	2100      	movs	r1, #0
 800413e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004146:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d011      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004154:	3308      	adds	r3, #8
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f8bb 	bl	80042d4 <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	2100      	movs	r1, #0
 800417e:	6239      	str	r1, [r7, #32]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
 8004186:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d011      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004194:	3308      	adds	r3, #8
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f89b 	bl	80042d4 <RCCEx_PLL2_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	2100      	movs	r1, #0
 80041be:	61b9      	str	r1, [r7, #24]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041ca:	460b      	mov	r3, r1
 80041cc:	4313      	orrs	r3, r2
 80041ce:	d011      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d4:	3308      	adds	r3, #8
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f87b 	bl	80042d4 <RCCEx_PLL2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	2100      	movs	r1, #0
 80041fe:	6139      	str	r1, [r7, #16]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800420a:	460b      	mov	r3, r1
 800420c:	4313      	orrs	r3, r2
 800420e:	d011      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004214:	3328      	adds	r3, #40	@ 0x28
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f90d 	bl	8004438 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	2100      	movs	r1, #0
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d011      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004254:	3328      	adds	r3, #40	@ 0x28
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f8ed 	bl	8004438 <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	2100      	movs	r1, #0
 800427e:	6039      	str	r1, [r7, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	e9d7 1200 	ldrd	r1, r2, [r7]
 800428a:	460b      	mov	r3, r1
 800428c:	4313      	orrs	r3, r2
 800428e:	d011      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004294:	3328      	adds	r3, #40	@ 0x28
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f8cd 	bl	8004438 <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80042b4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400

080042d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042e2:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d101      	bne.n	80042f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e099      	b.n	8004426 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fc ff53 	bl	80011a8 <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004304:	e008      	b.n	8004318 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004306:	f7fc ff4f 	bl	80011a8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e086      	b.n	8004426 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004318:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004324:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	493f      	ldr	r1, [pc, #252]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	628b      	str	r3, [r1, #40]	@ 0x28
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	3b01      	subs	r3, #1
 800433e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	3b01      	subs	r3, #1
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	b29b      	uxth	r3, r3
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	3b01      	subs	r3, #1
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004368:	4931      	ldr	r1, [pc, #196]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800436e:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	492d      	ldr	r1, [pc, #180]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004380:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	f023 0220 	bic.w	r2, r3, #32
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	4928      	ldr	r1, [pc, #160]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004392:	4b27      	ldr	r3, [pc, #156]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	4a26      	ldr	r2, [pc, #152]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 8004398:	f023 0310 	bic.w	r3, r3, #16
 800439c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <RCCEx_PLL2_Config+0x160>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	69d2      	ldr	r2, [r2, #28]
 80043aa:	00d2      	lsls	r2, r2, #3
 80043ac:	4920      	ldr	r1, [pc, #128]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	f043 0310 	orr.w	r3, r3, #16
 80043bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043d0:	e00f      	b.n	80043f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	4a14      	ldr	r2, [pc, #80]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043e4:	e005      	b.n	80043f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fc fed3 	bl	80011a8 <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004404:	e008      	b.n	8004418 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004406:	f7fc fecf 	bl	80011a8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <RCCEx_PLL2_Config+0x15c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
 8004434:	ffff0007 	.word	0xffff0007

08004438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004446:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b03      	cmp	r3, #3
 8004450:	d101      	bne.n	8004456 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e099      	b.n	800458a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004456:	4b4f      	ldr	r3, [pc, #316]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a4e      	ldr	r2, [pc, #312]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004462:	f7fc fea1 	bl	80011a8 <HAL_GetTick>
 8004466:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004468:	e008      	b.n	800447c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800446a:	f7fc fe9d 	bl	80011a8 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e086      	b.n	800458a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800447c:	4b45      	ldr	r3, [pc, #276]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004488:	4b42      	ldr	r3, [pc, #264]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	051b      	lsls	r3, r3, #20
 8004496:	493f      	ldr	r1, [pc, #252]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	628b      	str	r3, [r1, #40]	@ 0x28
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044cc:	4931      	ldr	r1, [pc, #196]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044d2:	4b30      	ldr	r3, [pc, #192]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	492d      	ldr	r1, [pc, #180]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4928      	ldr	r1, [pc, #160]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044f6:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	4a26      	ldr	r2, [pc, #152]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <RCCEx_PLL3_Config+0x160>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	69d2      	ldr	r2, [r2, #28]
 800450e:	00d2      	lsls	r2, r2, #3
 8004510:	4920      	ldr	r1, [pc, #128]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004516:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004528:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	4a19      	ldr	r2, [pc, #100]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800452e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004534:	e00f      	b.n	8004556 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800453c:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004542:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004546:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004548:	e005      	b.n	8004556 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004550:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004556:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a0e      	ldr	r2, [pc, #56]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004562:	f7fc fe21 	bl	80011a8 <HAL_GetTick>
 8004566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004568:	e008      	b.n	800457c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800456a:	f7fc fe1d 	bl	80011a8 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e006      	b.n	800458a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <RCCEx_PLL3_Config+0x15c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	ffff0007 	.word	0xffff0007

0800459c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e049      	b.n	8004642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f841 	bl	800464a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f000 f9f6 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e05e      	b.n	8004736 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2b      	ldr	r2, [pc, #172]	@ (8004744 <HAL_TIM_Base_Start_IT+0xe4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d02c      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a2:	d027      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a27      	ldr	r2, [pc, #156]	@ (8004748 <HAL_TIM_Base_Start_IT+0xe8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d022      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a26      	ldr	r2, [pc, #152]	@ (800474c <HAL_TIM_Base_Start_IT+0xec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d01d      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a24      	ldr	r2, [pc, #144]	@ (8004750 <HAL_TIM_Base_Start_IT+0xf0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d018      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a23      	ldr	r2, [pc, #140]	@ (8004754 <HAL_TIM_Base_Start_IT+0xf4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d013      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a21      	ldr	r2, [pc, #132]	@ (8004758 <HAL_TIM_Base_Start_IT+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a20      	ldr	r2, [pc, #128]	@ (800475c <HAL_TIM_Base_Start_IT+0xfc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004760 <HAL_TIM_Base_Start_IT+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x94>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <HAL_TIM_Base_Start_IT+0x104>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d115      	bne.n	8004720 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_TIM_Base_Start_IT+0x108>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d015      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0xd2>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470c:	d011      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e008      	b.n	8004732 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e000      	b.n	8004734 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40010400 	.word	0x40010400
 8004758:	40001800 	.word	0x40001800
 800475c:	40014000 	.word	0x40014000
 8004760:	4000e000 	.word	0x4000e000
 8004764:	4000e400 	.word	0x4000e400
 8004768:	00010007 	.word	0x00010007

0800476c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0202 	mvn.w	r2, #2
 80047a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8e9 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8db 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f8ec 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0204 	mvn.w	r2, #4
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8c3 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f8b5 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8c6 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0208 	mvn.w	r2, #8
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2204      	movs	r2, #4
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f89d 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f88f 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8a0 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0210 	mvn.w	r2, #16
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2208      	movs	r2, #8
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f877 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f869 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f87a 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0201 	mvn.w	r2, #1
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fb ffb2 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f91f 	bl	8004b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00c      	beq.n	800492a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f917 	bl	8004b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f834 	bl	80049b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00c      	beq.n	8004972 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f06f 0220 	mvn.w	r2, #32
 800496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f8df 	bl	8004b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a4a      	ldr	r2, [pc, #296]	@ (8004b08 <TIM_Base_SetConfig+0x13c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ea:	d00f      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a47      	ldr	r2, [pc, #284]	@ (8004b0c <TIM_Base_SetConfig+0x140>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a46      	ldr	r2, [pc, #280]	@ (8004b10 <TIM_Base_SetConfig+0x144>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a45      	ldr	r2, [pc, #276]	@ (8004b14 <TIM_Base_SetConfig+0x148>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a44      	ldr	r2, [pc, #272]	@ (8004b18 <TIM_Base_SetConfig+0x14c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a39      	ldr	r2, [pc, #228]	@ (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d027      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d023      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a36      	ldr	r2, [pc, #216]	@ (8004b0c <TIM_Base_SetConfig+0x140>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01f      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a35      	ldr	r2, [pc, #212]	@ (8004b10 <TIM_Base_SetConfig+0x144>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01b      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a34      	ldr	r2, [pc, #208]	@ (8004b14 <TIM_Base_SetConfig+0x148>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d017      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a33      	ldr	r2, [pc, #204]	@ (8004b18 <TIM_Base_SetConfig+0x14c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a32      	ldr	r2, [pc, #200]	@ (8004b1c <TIM_Base_SetConfig+0x150>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a31      	ldr	r2, [pc, #196]	@ (8004b20 <TIM_Base_SetConfig+0x154>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a30      	ldr	r2, [pc, #192]	@ (8004b24 <TIM_Base_SetConfig+0x158>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2f      	ldr	r2, [pc, #188]	@ (8004b28 <TIM_Base_SetConfig+0x15c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2e      	ldr	r2, [pc, #184]	@ (8004b2c <TIM_Base_SetConfig+0x160>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d108      	bne.n	8004a88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x108>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a18      	ldr	r2, [pc, #96]	@ (8004b18 <TIM_Base_SetConfig+0x14c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x108>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a17      	ldr	r2, [pc, #92]	@ (8004b1c <TIM_Base_SetConfig+0x150>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x108>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	@ (8004b20 <TIM_Base_SetConfig+0x154>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x108>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <TIM_Base_SetConfig+0x158>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]
  }
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40014400 	.word	0x40014400
 8004b24:	40014800 	.word	0x40014800
 8004b28:	4000e000 	.word	0x4000e000
 8004b2c:	4000e400 	.word	0x4000e400

08004b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <__NVIC_SetPriority>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	db0a      	blt.n	8004ba6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	490c      	ldr	r1, [pc, #48]	@ (8004bc8 <__NVIC_SetPriority+0x4c>)
 8004b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9a:	0112      	lsls	r2, r2, #4
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ba4:	e00a      	b.n	8004bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4908      	ldr	r1, [pc, #32]	@ (8004bcc <__NVIC_SetPriority+0x50>)
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	0112      	lsls	r2, r2, #4
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	440b      	add	r3, r1
 8004bba:	761a      	strb	r2, [r3, #24]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000e100 	.word	0xe000e100
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <SysTick_Handler+0x1c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bd8:	f002 fa6a 	bl	80070b0 <xTaskGetSchedulerState>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d001      	beq.n	8004be6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004be2:	f003 f961 	bl	8007ea8 <xPortSysTickHandler>
  }
}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	e000e010 	.word	0xe000e010

08004bf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f06f 0004 	mvn.w	r0, #4
 8004bfa:	f7ff ffbf 	bl	8004b7c <__NVIC_SetPriority>
#endif
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0a:	f3ef 8305 	mrs	r3, IPSR
 8004c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c16:	f06f 0305 	mvn.w	r3, #5
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	e00c      	b.n	8004c38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <osKernelInitialize+0x44>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c26:	4b08      	ldr	r3, [pc, #32]	@ (8004c48 <osKernelInitialize+0x44>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	e002      	b.n	8004c38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c38:	687b      	ldr	r3, [r7, #4]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	2405fe8c 	.word	0x2405fe8c

08004c4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c52:	f3ef 8305 	mrs	r3, IPSR
 8004c56:	603b      	str	r3, [r7, #0]
  return(result);
 8004c58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c5e:	f06f 0305 	mvn.w	r3, #5
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	e010      	b.n	8004c88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c66:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <osKernelStart+0x48>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d109      	bne.n	8004c82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c6e:	f7ff ffbf 	bl	8004bf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c72:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <osKernelStart+0x48>)
 8004c74:	2202      	movs	r2, #2
 8004c76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c78:	f001 fdb4 	bl	80067e4 <vTaskStartScheduler>
      stat = osOK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	e002      	b.n	8004c88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c88:	687b      	ldr	r3, [r7, #4]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	2405fe8c 	.word	0x2405fe8c

08004c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	@ 0x38
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca8:	f3ef 8305 	mrs	r3, IPSR
 8004cac:	617b      	str	r3, [r7, #20]
  return(result);
 8004cae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d17e      	bne.n	8004db2 <osThreadNew+0x11a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d07b      	beq.n	8004db2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cbe:	2318      	movs	r3, #24
 8004cc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d045      	beq.n	8004d5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <osThreadNew+0x48>
        name = attr->name;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <osThreadNew+0x6e>
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b38      	cmp	r3, #56	@ 0x38
 8004cf8:	d805      	bhi.n	8004d06 <osThreadNew+0x6e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <osThreadNew+0x72>
        return (NULL);
 8004d06:	2300      	movs	r3, #0
 8004d08:	e054      	b.n	8004db4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <osThreadNew+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2ba7      	cmp	r3, #167	@ 0xa7
 8004d28:	d90a      	bls.n	8004d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <osThreadNew+0xa8>
        mem = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e010      	b.n	8004d62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <osThreadNew+0xca>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d108      	bne.n	8004d62 <osThreadNew+0xca>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <osThreadNew+0xca>
          mem = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e001      	b.n	8004d62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d70:	9202      	str	r2, [sp, #8]
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6a3a      	ldr	r2, [r7, #32]
 8004d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f001 fb3c 	bl	80063fc <xTaskCreateStatic>
 8004d84:	4603      	mov	r3, r0
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	e013      	b.n	8004db2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d110      	bne.n	8004db2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f001 fb8a 	bl	80064bc <xTaskCreate>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d001      	beq.n	8004db2 <osThreadNew+0x11a>
            hTask = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004db2:	693b      	ldr	r3, [r7, #16]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3728      	adds	r7, #40	@ 0x28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc4:	f3ef 8305 	mrs	r3, IPSR
 8004dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <osDelay+0x1c>
    stat = osErrorISR;
 8004dd0:	f06f 0305 	mvn.w	r3, #5
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e007      	b.n	8004de8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 fcc8 	bl	8006778 <vTaskDelay>
    }
  }

  return (stat);
 8004de8:	68fb      	ldr	r3, [r7, #12]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b08a      	sub	sp, #40	@ 0x28
 8004df6:	af02      	add	r7, sp, #8
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e02:	f3ef 8305 	mrs	r3, IPSR
 8004e06:	613b      	str	r3, [r7, #16]
  return(result);
 8004e08:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d175      	bne.n	8004efa <osSemaphoreNew+0x108>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d072      	beq.n	8004efa <osSemaphoreNew+0x108>
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d86e      	bhi.n	8004efa <osSemaphoreNew+0x108>
    mem = -1;
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d006      	beq.n	8004e3e <osSemaphoreNew+0x4c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b4f      	cmp	r3, #79	@ 0x4f
 8004e36:	d902      	bls.n	8004e3e <osSemaphoreNew+0x4c>
        mem = 1;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e00c      	b.n	8004e58 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <osSemaphoreNew+0x66>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <osSemaphoreNew+0x66>
          mem = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e001      	b.n	8004e58 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d04c      	beq.n	8004efa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d128      	bne.n	8004eb8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10a      	bne.n	8004e82 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2203      	movs	r2, #3
 8004e72:	9200      	str	r2, [sp, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2100      	movs	r1, #0
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f000 fafd 	bl	8005478 <xQueueGenericCreateStatic>
 8004e7e:	61f8      	str	r0, [r7, #28]
 8004e80:	e005      	b.n	8004e8e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004e82:	2203      	movs	r2, #3
 8004e84:	2100      	movs	r1, #0
 8004e86:	2001      	movs	r0, #1
 8004e88:	f000 fb73 	bl	8005572 <xQueueGenericCreate>
 8004e8c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d022      	beq.n	8004eda <osSemaphoreNew+0xe8>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01f      	beq.n	8004eda <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	69f8      	ldr	r0, [r7, #28]
 8004ea2:	f000 fc33 	bl	800570c <xQueueGenericSend>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d016      	beq.n	8004eda <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004eac:	69f8      	ldr	r0, [r7, #28]
 8004eae:	f001 f8d1 	bl	8006054 <vQueueDelete>
            hSemaphore = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e010      	b.n	8004eda <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d108      	bne.n	8004ed0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fbb1 	bl	800562e <xQueueCreateCountingSemaphoreStatic>
 8004ecc:	61f8      	str	r0, [r7, #28]
 8004ece:	e004      	b.n	8004eda <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fbe4 	bl	80056a0 <xQueueCreateCountingSemaphore>
 8004ed8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <osSemaphoreNew+0xfc>
          name = attr->name;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e001      	b.n	8004ef2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ef2:	6979      	ldr	r1, [r7, #20]
 8004ef4:	69f8      	ldr	r0, [r7, #28]
 8004ef6:	f001 f9f9 	bl	80062ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004efa:	69fb      	ldr	r3, [r7, #28]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004f1c:	f06f 0303 	mvn.w	r3, #3
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e039      	b.n	8004f98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f24:	f3ef 8305 	mrs	r3, IPSR
 8004f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d022      	beq.n	8004f76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004f36:	f06f 0303 	mvn.w	r3, #3
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e02c      	b.n	8004f98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004f42:	f107 0308 	add.w	r3, r7, #8
 8004f46:	461a      	mov	r2, r3
 8004f48:	2100      	movs	r1, #0
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f001 f800 	bl	8005f50 <xQueueReceiveFromISR>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004f56:	f06f 0302 	mvn.w	r3, #2
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e01c      	b.n	8004f98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d019      	beq.n	8004f98 <osSemaphoreAcquire+0x94>
 8004f64:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa4 <osSemaphoreAcquire+0xa0>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	e010      	b.n	8004f98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f000 fed9 	bl	8005d30 <xQueueSemaphoreTake>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d009      	beq.n	8004f98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004f8a:	f06f 0301 	mvn.w	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e002      	b.n	8004f98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004f92:	f06f 0302 	mvn.w	r3, #2
 8004f96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f98:	697b      	ldr	r3, [r7, #20]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004fbe:	f06f 0303 	mvn.w	r3, #3
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e02c      	b.n	8005020 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc6:	f3ef 8305 	mrs	r3, IPSR
 8004fca:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01a      	beq.n	8005008 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6938      	ldr	r0, [r7, #16]
 8004fde:	f000 fd35 	bl	8005a4c <xQueueGiveFromISR>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d003      	beq.n	8004ff0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004fe8:	f06f 0302 	mvn.w	r3, #2
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e017      	b.n	8005020 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d014      	beq.n	8005020 <osSemaphoreRelease+0x78>
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <osSemaphoreRelease+0x84>)
 8004ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	e00b      	b.n	8005020 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005008:	2300      	movs	r3, #0
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f000 fb7c 	bl	800570c <xQueueGenericSend>
 8005014:	4603      	mov	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d002      	beq.n	8005020 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800501a:	f06f 0302 	mvn.w	r3, #2
 800501e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005020:	697b      	ldr	r3, [r7, #20]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	@ 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005040:	f3ef 8305 	mrs	r3, IPSR
 8005044:	613b      	str	r3, [r7, #16]
  return(result);
 8005046:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005048:	2b00      	cmp	r3, #0
 800504a:	d15f      	bne.n	800510c <osMessageQueueNew+0xdc>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d05c      	beq.n	800510c <osMessageQueueNew+0xdc>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d059      	beq.n	800510c <osMessageQueueNew+0xdc>
    mem = -1;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d029      	beq.n	80050b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d012      	beq.n	8005092 <osMessageQueueNew+0x62>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b4f      	cmp	r3, #79	@ 0x4f
 8005072:	d90e      	bls.n	8005092 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <osMessageQueueNew+0x62>
        mem = 1;
 800508c:	2301      	movs	r3, #1
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e014      	b.n	80050bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <osMessageQueueNew+0x8c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d108      	bne.n	80050bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <osMessageQueueNew+0x8c>
          mem = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e001      	b.n	80050bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d10b      	bne.n	80050da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2100      	movs	r1, #0
 80050cc:	9100      	str	r1, [sp, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f9d1 	bl	8005478 <xQueueGenericCreateStatic>
 80050d6:	61f8      	str	r0, [r7, #28]
 80050d8:	e008      	b.n	80050ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80050e0:	2200      	movs	r2, #0
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fa44 	bl	8005572 <xQueueGenericCreate>
 80050ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <osMessageQueueNew+0xd0>
        name = attr->name;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e001      	b.n	8005104 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	69f8      	ldr	r0, [r7, #28]
 8005108:	f001 f8f0 	bl	80062ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800510c:	69fb      	ldr	r3, [r7, #28]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	617b      	str	r3, [r7, #20]
  return(result);
 8005134:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005136:	2b00      	cmp	r3, #0
 8005138:	d028      	beq.n	800518c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <osMessageQueueGet+0x34>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <osMessageQueueGet+0x34>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800514c:	f06f 0303 	mvn.w	r3, #3
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e037      	b.n	80051c4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	461a      	mov	r2, r3
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	69b8      	ldr	r0, [r7, #24]
 8005162:	f000 fef5 	bl	8005f50 <xQueueReceiveFromISR>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d003      	beq.n	8005174 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800516c:	f06f 0302 	mvn.w	r3, #2
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e027      	b.n	80051c4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d024      	beq.n	80051c4 <osMessageQueueGet+0xac>
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <osMessageQueueGet+0xb8>)
 800517c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	e01b      	b.n	80051c4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <osMessageQueueGet+0x80>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005198:	f06f 0303 	mvn.w	r3, #3
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e011      	b.n	80051c4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	69b8      	ldr	r0, [r7, #24]
 80051a6:	f000 fce1 	bl	8005b6c <xQueueReceive>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d009      	beq.n	80051c4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80051b6:	f06f 0301 	mvn.w	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	e002      	b.n	80051c4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80051be:	f06f 0302 	mvn.w	r3, #2
 80051c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051c4:	69fb      	ldr	r3, [r7, #28]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a07      	ldr	r2, [pc, #28]	@ (8005200 <vApplicationGetIdleTaskMemory+0x2c>)
 80051e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4a06      	ldr	r2, [pc, #24]	@ (8005204 <vApplicationGetIdleTaskMemory+0x30>)
 80051ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2280      	movs	r2, #128	@ 0x80
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	2405fe90 	.word	0x2405fe90
 8005204:	2405ff38 	.word	0x2405ff38

08005208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a07      	ldr	r2, [pc, #28]	@ (8005234 <vApplicationGetTimerTaskMemory+0x2c>)
 8005218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a06      	ldr	r2, [pc, #24]	@ (8005238 <vApplicationGetTimerTaskMemory+0x30>)
 800521e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	24060138 	.word	0x24060138
 8005238:	240601e0 	.word	0x240601e0

0800523c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f103 0208 	add.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f04f 32ff 	mov.w	r2, #4294967295
 8005254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f103 0208 	add.w	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f103 0208 	add.w	r2, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d103      	bne.n	80052fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e00c      	b.n	8005318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3308      	adds	r3, #8
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e002      	b.n	800530c <vListInsert+0x2e>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	d2f6      	bcs.n	8005306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6892      	ldr	r2, [r2, #8]
 8005366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6852      	ldr	r2, [r2, #4]
 8005370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d103      	bne.n	8005384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1e5a      	subs	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053d0:	f002 fcda 	bl	8007d88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005400:	3b01      	subs	r3, #1
 8005402:	68f9      	ldr	r1, [r7, #12]
 8005404:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	441a      	add	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	22ff      	movs	r2, #255	@ 0xff
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	22ff      	movs	r2, #255	@ 0xff
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d114      	bne.n	8005450 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01a      	beq.n	8005464 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3310      	adds	r3, #16
 8005432:	4618      	mov	r0, r3
 8005434:	f001 fc74 	bl	8006d20 <xTaskRemoveFromEventList>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d012      	beq.n	8005464 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <xQueueGenericReset+0xd0>)
 8005440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	e009      	b.n	8005464 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3310      	adds	r3, #16
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fef1 	bl	800523c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3324      	adds	r3, #36	@ 0x24
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff feec 	bl	800523c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005464:	f002 fcc2 	bl	8007dec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005468:	2301      	movs	r3, #1
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	@ 0x38
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10b      	bne.n	80054a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <xQueueGenericCreateStatic+0x56>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <xQueueGenericCreateStatic+0x5a>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericCreateStatic+0x5c>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <xQueueGenericCreateStatic+0x84>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <xQueueGenericCreateStatic+0x88>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <xQueueGenericCreateStatic+0x8a>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61fb      	str	r3, [r7, #28]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800551e:	2350      	movs	r3, #80	@ 0x50
 8005520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b50      	cmp	r3, #80	@ 0x50
 8005526:	d00b      	beq.n	8005540 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61bb      	str	r3, [r7, #24]
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005540:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005554:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f840 	bl	80055e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800556a:	4618      	mov	r0, r3
 800556c:	3730      	adds	r7, #48	@ 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005572:	b580      	push	{r7, lr}
 8005574:	b08a      	sub	sp, #40	@ 0x28
 8005576:	af02      	add	r7, sp, #8
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	613b      	str	r3, [r7, #16]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3350      	adds	r3, #80	@ 0x50
 80055ac:	4618      	mov	r0, r3
 80055ae:	f002 fd0d 	bl	8007fcc <pvPortMalloc>
 80055b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	3350      	adds	r3, #80	@ 0x50
 80055c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055cc:	79fa      	ldrb	r2, [r7, #7]
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f805 	bl	80055e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055de:	69bb      	ldr	r3, [r7, #24]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e002      	b.n	800560a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005616:	2101      	movs	r1, #1
 8005618:	69b8      	ldr	r0, [r7, #24]
 800561a:	f7ff fec3 	bl	80053a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800562e:	b580      	push	{r7, lr}
 8005630:	b08a      	sub	sp, #40	@ 0x28
 8005632:	af02      	add	r7, sp, #8
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	61bb      	str	r3, [r7, #24]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	429a      	cmp	r2, r3
 800565e:	d90b      	bls.n	8005678 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	617b      	str	r3, [r7, #20]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005678:	2302      	movs	r3, #2
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	2100      	movs	r1, #0
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff fef8 	bl	8005478 <xQueueGenericCreateStatic>
 8005688:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005696:	69fb      	ldr	r3, [r7, #28]
	}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d90b      	bls.n	80056e8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056e8:	2202      	movs	r2, #2
 80056ea:	2100      	movs	r1, #0
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff40 	bl	8005572 <xQueueGenericCreate>
 80056f2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005700:	697b      	ldr	r3, [r7, #20]
	}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08e      	sub	sp, #56	@ 0x38
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSend+0x34>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <xQueueGenericSend+0x42>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <xQueueGenericSend+0x46>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueGenericSend+0x48>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xQueueGenericSend+0x64>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d103      	bne.n	800577e <xQueueGenericSend+0x72>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <xQueueGenericSend+0x76>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <xQueueGenericSend+0x78>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <xQueueGenericSend+0x94>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057a0:	f001 fc86 	bl	80070b0 <xTaskGetSchedulerState>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <xQueueGenericSend+0xa4>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xQueueGenericSend+0xa8>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xQueueGenericSend+0xaa>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057d2:	f002 fad9 	bl	8007d88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <xQueueGenericSend+0xdc>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d129      	bne.n	800583c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ee:	f000 fc6d 	bl	80060cc <prvCopyDataToQueue>
 80057f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d010      	beq.n	800581e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	3324      	adds	r3, #36	@ 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fa8d 	bl	8006d20 <xTaskRemoveFromEventList>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d013      	beq.n	8005834 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800580c:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <xQueueGenericSend+0x200>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	e00a      	b.n	8005834 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005824:	4b39      	ldr	r3, [pc, #228]	@ (800590c <xQueueGenericSend+0x200>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005834:	f002 fada 	bl	8007dec <vPortExitCritical>
				return pdPASS;
 8005838:	2301      	movs	r3, #1
 800583a:	e063      	b.n	8005904 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005842:	f002 fad3 	bl	8007dec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005846:	2300      	movs	r3, #0
 8005848:	e05c      	b.n	8005904 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800584a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005850:	f107 0314 	add.w	r3, r7, #20
 8005854:	4618      	mov	r0, r3
 8005856:	f001 fac7 	bl	8006de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800585a:	2301      	movs	r3, #1
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800585e:	f002 fac5 	bl	8007dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005862:	f001 f82f 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005866:	f002 fa8f 	bl	8007d88 <vPortEnterCritical>
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005870:	b25b      	sxtb	r3, r3
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d103      	bne.n	8005880 <xQueueGenericSend+0x174>
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005886:	b25b      	sxtb	r3, r3
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d103      	bne.n	8005896 <xQueueGenericSend+0x18a>
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005896:	f002 faa9 	bl	8007dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800589a:	1d3a      	adds	r2, r7, #4
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	4611      	mov	r1, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fab6 	bl	8006e14 <xTaskCheckForTimeOut>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d124      	bne.n	80058f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058b0:	f000 fd04 	bl	80062bc <prvIsQueueFull>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d018      	beq.n	80058ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	3310      	adds	r3, #16
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4611      	mov	r1, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 f9da 	bl	8006c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ca:	f000 fc8f 	bl	80061ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058ce:	f001 f807 	bl	80068e0 <xTaskResumeAll>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f47f af7c 	bne.w	80057d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058da:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <xQueueGenericSend+0x200>)
 80058dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	e772      	b.n	80057d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ee:	f000 fc7d 	bl	80061ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058f2:	f000 fff5 	bl	80068e0 <xTaskResumeAll>
 80058f6:	e76c      	b.n	80057d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058fa:	f000 fc77 	bl	80061ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058fe:	f000 ffef 	bl	80068e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005902:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005904:	4618      	mov	r0, r3
 8005906:	3738      	adds	r7, #56	@ 0x38
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b090      	sub	sp, #64	@ 0x40
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <xQueueGenericSendFromISR+0x3e>
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <xQueueGenericSendFromISR+0x42>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSendFromISR+0x44>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <xQueueGenericSendFromISR+0x6e>
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <xQueueGenericSendFromISR+0x72>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSendFromISR+0x74>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	623b      	str	r3, [r7, #32]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059a0:	f002 fad2 	bl	8007f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059a4:	f3ef 8211 	mrs	r2, BASEPRI
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	61fa      	str	r2, [r7, #28]
 80059ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <xQueueGenericSendFromISR+0xc2>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d12f      	bne.n	8005a32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059e8:	f000 fb70 	bl	80060cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d112      	bne.n	8005a1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	3324      	adds	r3, #36	@ 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 f98c 	bl	8006d20 <xTaskRemoveFromEventList>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00e      	beq.n	8005a2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e007      	b.n	8005a2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a20:	3301      	adds	r3, #1
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	b25a      	sxtb	r2, r3
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005a30:	e001      	b.n	8005a36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3740      	adds	r7, #64	@ 0x40
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08e      	sub	sp, #56	@ 0x38
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	623b      	str	r3, [r7, #32]
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	61fb      	str	r3, [r7, #28]
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	e7fd      	b.n	8005a94 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <xQueueGiveFromISR+0x5c>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <xQueueGiveFromISR+0x60>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <xQueueGiveFromISR+0x62>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	61bb      	str	r3, [r7, #24]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aca:	f002 fa3d 	bl	8007f48 <vPortValidateInterruptPriority>
	__asm volatile
 8005ace:	f3ef 8211 	mrs	r2, BASEPRI
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	617a      	str	r2, [r7, #20]
 8005ae4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ae6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d22b      	bcs.n	8005b52 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d112      	bne.n	8005b3c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d016      	beq.n	8005b4c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	3324      	adds	r3, #36	@ 0x24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f8fc 	bl	8006d20 <xTaskRemoveFromEventList>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00e      	beq.n	8005b4c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e007      	b.n	8005b4c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b40:	3301      	adds	r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	b25a      	sxtb	r2, r3
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b50:	e001      	b.n	8005b56 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f383 8811 	msr	BASEPRI, r3
}
 8005b60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3738      	adds	r7, #56	@ 0x38
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	@ 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10b      	bne.n	8005b9e <xQueueReceive+0x32>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	623b      	str	r3, [r7, #32]
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	e7fd      	b.n	8005b9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <xQueueReceive+0x40>
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <xQueueReceive+0x44>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <xQueueReceive+0x46>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10b      	bne.n	8005bce <xQueueReceive+0x62>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	61fb      	str	r3, [r7, #28]
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	e7fd      	b.n	8005bca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bce:	f001 fa6f 	bl	80070b0 <xTaskGetSchedulerState>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <xQueueReceive+0x72>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <xQueueReceive+0x76>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <xQueueReceive+0x78>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <xQueueReceive+0x94>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	61bb      	str	r3, [r7, #24]
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c00:	f002 f8c2 	bl	8007d88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01f      	beq.n	8005c50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c14:	f000 fac4 	bl	80061a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	1e5a      	subs	r2, r3, #1
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00f      	beq.n	8005c48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f877 	bl	8006d20 <xTaskRemoveFromEventList>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c38:	4b3c      	ldr	r3, [pc, #240]	@ (8005d2c <xQueueReceive+0x1c0>)
 8005c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c48:	f002 f8d0 	bl	8007dec <vPortExitCritical>
				return pdPASS;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e069      	b.n	8005d24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c56:	f002 f8c9 	bl	8007dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e062      	b.n	8005d24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c64:	f107 0310 	add.w	r3, r7, #16
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 f8bd 	bl	8006de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c72:	f002 f8bb 	bl	8007dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c76:	f000 fe25 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c7a:	f002 f885 	bl	8007d88 <vPortEnterCritical>
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c84:	b25b      	sxtb	r3, r3
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d103      	bne.n	8005c94 <xQueueReceive+0x128>
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c9a:	b25b      	sxtb	r3, r3
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d103      	bne.n	8005caa <xQueueReceive+0x13e>
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005caa:	f002 f89f 	bl	8007dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cae:	1d3a      	adds	r2, r7, #4
 8005cb0:	f107 0310 	add.w	r3, r7, #16
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f8ac 	bl	8006e14 <xTaskCheckForTimeOut>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d123      	bne.n	8005d0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc4:	f000 fae4 	bl	8006290 <prvIsQueueEmpty>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d017      	beq.n	8005cfe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	3324      	adds	r3, #36	@ 0x24
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 ffd0 	bl	8006c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cde:	f000 fa85 	bl	80061ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ce2:	f000 fdfd 	bl	80068e0 <xTaskResumeAll>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d189      	bne.n	8005c00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005cec:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <xQueueReceive+0x1c0>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	e780      	b.n	8005c00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d00:	f000 fa74 	bl	80061ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d04:	f000 fdec 	bl	80068e0 <xTaskResumeAll>
 8005d08:	e77a      	b.n	8005c00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d0c:	f000 fa6e 	bl	80061ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d10:	f000 fde6 	bl	80068e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d16:	f000 fabb 	bl	8006290 <prvIsQueueEmpty>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f43f af6f 	beq.w	8005c00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3730      	adds	r7, #48	@ 0x30
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08e      	sub	sp, #56	@ 0x38
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	623b      	str	r3, [r7, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	61fb      	str	r3, [r7, #28]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d84:	f001 f994 	bl	80070b0 <xTaskGetSchedulerState>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <xQueueSemaphoreTake+0x64>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <xQueueSemaphoreTake+0x68>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <xQueueSemaphoreTake+0x6a>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	61bb      	str	r3, [r7, #24]
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	e7fd      	b.n	8005db2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005db6:	f001 ffe7 	bl	8007d88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d024      	beq.n	8005e10 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	1e5a      	subs	r2, r3, #1
 8005dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dcc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005dd6:	f001 fae5 	bl	80073a4 <pvTaskIncrementMutexHeldCount>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	3310      	adds	r3, #16
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 ff97 	bl	8006d20 <xTaskRemoveFromEventList>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005df8:	4b54      	ldr	r3, [pc, #336]	@ (8005f4c <xQueueSemaphoreTake+0x21c>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e08:	f001 fff0 	bl	8007dec <vPortExitCritical>
				return pdPASS;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e098      	b.n	8005f42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d112      	bne.n	8005e3c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	617b      	str	r3, [r7, #20]
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	e7fd      	b.n	8005e30 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e34:	f001 ffda 	bl	8007dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e082      	b.n	8005f42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e42:	f107 030c 	add.w	r3, r7, #12
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 ffce 	bl	8006de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e50:	f001 ffcc 	bl	8007dec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e54:	f000 fd36 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e58:	f001 ff96 	bl	8007d88 <vPortEnterCritical>
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d103      	bne.n	8005e72 <xQueueSemaphoreTake+0x142>
 8005e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d103      	bne.n	8005e88 <xQueueSemaphoreTake+0x158>
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e88:	f001 ffb0 	bl	8007dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e8c:	463a      	mov	r2, r7
 8005e8e:	f107 030c 	add.w	r3, r7, #12
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 ffbd 	bl	8006e14 <xTaskCheckForTimeOut>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d132      	bne.n	8005f06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ea2:	f000 f9f5 	bl	8006290 <prvIsQueueEmpty>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d026      	beq.n	8005efa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005eb4:	f001 ff68 	bl	8007d88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f915 	bl	80070ec <xTaskPriorityInherit>
 8005ec2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005ec4:	f001 ff92 	bl	8007dec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	3324      	adds	r3, #36	@ 0x24
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fed3 	bl	8006c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ed6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ed8:	f000 f988 	bl	80061ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005edc:	f000 fd00 	bl	80068e0 <xTaskResumeAll>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f47f af67 	bne.w	8005db6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005ee8:	4b18      	ldr	r3, [pc, #96]	@ (8005f4c <xQueueSemaphoreTake+0x21c>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	e75d      	b.n	8005db6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005efa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005efc:	f000 f976 	bl	80061ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f00:	f000 fcee 	bl	80068e0 <xTaskResumeAll>
 8005f04:	e757      	b.n	8005db6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f08:	f000 f970 	bl	80061ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f0c:	f000 fce8 	bl	80068e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f12:	f000 f9bd 	bl	8006290 <prvIsQueueEmpty>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f43f af4c 	beq.w	8005db6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00d      	beq.n	8005f40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005f24:	f001 ff30 	bl	8007d88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f2a:	f000 f8b7 	bl	800609c <prvGetDisinheritPriorityAfterTimeout>
 8005f2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f9b0 	bl	800729c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f3c:	f001 ff56 	bl	8007dec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3738      	adds	r7, #56	@ 0x38
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	@ 0x38
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	623b      	str	r3, [r7, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <xQueueReceiveFromISR+0x3c>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <xQueueReceiveFromISR+0x40>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <xQueueReceiveFromISR+0x42>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	61fb      	str	r3, [r7, #28]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fae:	f001 ffcb 	bl	8007f48 <vPortValidateInterruptPriority>
	__asm volatile
 8005fb2:	f3ef 8211 	mrs	r2, BASEPRI
 8005fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	61ba      	str	r2, [r7, #24]
 8005fc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02f      	beq.n	800603a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fe8:	f000 f8da 	bl	80061a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d112      	bne.n	8006024 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	3310      	adds	r3, #16
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fe88 	bl	8006d20 <xTaskRemoveFromEventList>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e007      	b.n	8006034 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006028:	3301      	adds	r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	b25a      	sxtb	r2, r3
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
 8006038:	e001      	b.n	800603e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f383 8811 	msr	BASEPRI, r3
}
 8006048:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800604a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800604c:	4618      	mov	r0, r3
 800604e:	3738      	adds	r7, #56	@ 0x38
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <vQueueDelete+0x2a>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60bb      	str	r3, [r7, #8]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f95e 	bl	8006340 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f002 f86a 	bl	8008168 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d006      	beq.n	80060ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e001      	b.n	80060be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80060be:	68fb      	ldr	r3, [r7, #12]
	}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d14d      	bne.n	800618e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f860 	bl	80071bc <xTaskPriorityDisinherit>
 80060fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
 8006104:	e043      	b.n	800618e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d119      	bne.n	8006140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6858      	ldr	r0, [r3, #4]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006114:	461a      	mov	r2, r3
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	f016 fbab 	bl	801c872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	d32b      	bcc.n	800618e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	e026      	b.n	800618e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68d8      	ldr	r0, [r3, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006148:	461a      	mov	r2, r3
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	f016 fb91 	bl	801c872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	425b      	negs	r3, r3
 800615a:	441a      	add	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d207      	bcs.n	800617c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	425b      	negs	r3, r3
 8006176:	441a      	add	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d105      	bne.n	800618e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	3b01      	subs	r3, #1
 800618c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006196:	697b      	ldr	r3, [r7, #20]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d303      	bcc.n	80061d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68d9      	ldr	r1, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	461a      	mov	r2, r3
 80061de:	6838      	ldr	r0, [r7, #0]
 80061e0:	f016 fb47 	bl	801c872 <memcpy>
	}
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061f4:	f001 fdc8 	bl	8007d88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006200:	e011      	b.n	8006226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d012      	beq.n	8006230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3324      	adds	r3, #36	@ 0x24
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fd86 	bl	8006d20 <xTaskRemoveFromEventList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800621a:	f000 fe5f 	bl	8006edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	3b01      	subs	r3, #1
 8006222:	b2db      	uxtb	r3, r3
 8006224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dce9      	bgt.n	8006202 <prvUnlockQueue+0x16>
 800622e:	e000      	b.n	8006232 <prvUnlockQueue+0x46>
					break;
 8006230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	22ff      	movs	r2, #255	@ 0xff
 8006236:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800623a:	f001 fdd7 	bl	8007dec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800623e:	f001 fda3 	bl	8007d88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800624a:	e011      	b.n	8006270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3310      	adds	r3, #16
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fd61 	bl	8006d20 <xTaskRemoveFromEventList>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006264:	f000 fe3a 	bl	8006edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	3b01      	subs	r3, #1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dce9      	bgt.n	800624c <prvUnlockQueue+0x60>
 8006278:	e000      	b.n	800627c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800627a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	22ff      	movs	r2, #255	@ 0xff
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006284:	f001 fdb2 	bl	8007dec <vPortExitCritical>
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006298:	f001 fd76 	bl	8007d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e001      	b.n	80062ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062ae:	f001 fd9d 	bl	8007dec <vPortExitCritical>

	return xReturn;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062c4:	f001 fd60 	bl	8007d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d102      	bne.n	80062da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e001      	b.n	80062de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062de:	f001 fd85 	bl	8007dec <vPortExitCritical>

	return xReturn;
 80062e2:	68fb      	ldr	r3, [r7, #12]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e014      	b.n	8006326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062fc:	4a0f      	ldr	r2, [pc, #60]	@ (800633c <vQueueAddToRegistry+0x50>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006308:	490c      	ldr	r1, [pc, #48]	@ (800633c <vQueueAddToRegistry+0x50>)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006312:	4a0a      	ldr	r2, [pc, #40]	@ (800633c <vQueueAddToRegistry+0x50>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800631e:	e006      	b.n	800632e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b07      	cmp	r3, #7
 800632a:	d9e7      	bls.n	80062fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	240605e0 	.word	0x240605e0

08006340 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e016      	b.n	800637c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800634e:	4a10      	ldr	r2, [pc, #64]	@ (8006390 <vQueueUnregisterQueue+0x50>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	429a      	cmp	r2, r3
 800635c:	d10b      	bne.n	8006376 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800635e:	4a0c      	ldr	r2, [pc, #48]	@ (8006390 <vQueueUnregisterQueue+0x50>)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2100      	movs	r1, #0
 8006364:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006368:	4a09      	ldr	r2, [pc, #36]	@ (8006390 <vQueueUnregisterQueue+0x50>)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]
				break;
 8006374:	e006      	b.n	8006384 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b07      	cmp	r3, #7
 8006380:	d9e5      	bls.n	800634e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	240605e0 	.word	0x240605e0

08006394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063a4:	f001 fcf0 	bl	8007d88 <vPortEnterCritical>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <vQueueWaitForMessageRestricted+0x2a>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <vQueueWaitForMessageRestricted+0x40>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063d4:	f001 fd0a 	bl	8007dec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3324      	adds	r3, #36	@ 0x24
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fc6d 	bl	8006cc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f7ff fefc 	bl	80061ec <prvUnlockQueue>
	}
 80063f4:	bf00      	nop
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08e      	sub	sp, #56	@ 0x38
 8006400:	af04      	add	r7, sp, #16
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800640a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <xTaskCreateStatic+0x4a>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	61fb      	str	r3, [r7, #28]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006446:	23a8      	movs	r3, #168	@ 0xa8
 8006448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2ba8      	cmp	r3, #168	@ 0xa8
 800644e:	d00b      	beq.n	8006468 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	61bb      	str	r3, [r7, #24]
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	e7fd      	b.n	8006464 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006468:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01e      	beq.n	80064ae <xTaskCreateStatic+0xb2>
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01b      	beq.n	80064ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	2202      	movs	r2, #2
 8006484:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006488:	2300      	movs	r3, #0
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	9302      	str	r3, [sp, #8]
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f851 	bl	8006548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064a8:	f000 f8f6 	bl	8006698 <prvAddNewTaskToReadyList>
 80064ac:	e001      	b.n	80064b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064b2:	697b      	ldr	r3, [r7, #20]
	}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	@ 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	@ 0x30
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 fd7b 	bl	8007fcc <pvPortMalloc>
 80064d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064de:	20a8      	movs	r0, #168	@ 0xa8
 80064e0:	f001 fd74 	bl	8007fcc <pvPortMalloc>
 80064e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80064f2:	e005      	b.n	8006500 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064f4:	6978      	ldr	r0, [r7, #20]
 80064f6:	f001 fe37 	bl	8008168 <vPortFree>
 80064fa:	e001      	b.n	8006500 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d017      	beq.n	8006536 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	2300      	movs	r3, #0
 8006512:	9303      	str	r3, [sp, #12]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	9302      	str	r3, [sp, #8]
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f80f 	bl	8006548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652a:	69f8      	ldr	r0, [r7, #28]
 800652c:	f000 f8b4 	bl	8006698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006530:	2301      	movs	r3, #1
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e002      	b.n	800653c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800653c:	69bb      	ldr	r3, [r7, #24]
	}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	461a      	mov	r2, r3
 8006560:	21a5      	movs	r1, #165	@ 0xa5
 8006562:	f016 f861 	bl	801c628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006570:	440b      	add	r3, r1
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	617b      	str	r3, [r7, #20]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01f      	beq.n	80065e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	e012      	b.n	80065d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	7819      	ldrb	r1, [r3, #0]
 80065b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	3334      	adds	r3, #52	@ 0x34
 80065be:	460a      	mov	r2, r1
 80065c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d006      	beq.n	80065dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	3301      	adds	r3, #1
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d9e9      	bls.n	80065ae <prvInitialiseNewTask+0x66>
 80065da:	e000      	b.n	80065de <prvInitialiseNewTask+0x96>
			{
				break;
 80065dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065e6:	e003      	b.n	80065f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	2b37      	cmp	r3, #55	@ 0x37
 80065f4:	d901      	bls.n	80065fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065f6:	2337      	movs	r3, #55	@ 0x37
 80065f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006604:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fe33 	bl	800527c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	3318      	adds	r3, #24
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fe2e 	bl	800527c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006624:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006634:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	2200      	movs	r2, #0
 800663a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	2200      	movs	r2, #0
 8006642:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	3354      	adds	r3, #84	@ 0x54
 800664a:	224c      	movs	r2, #76	@ 0x4c
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f015 ffea 	bl	801c628 <memset>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	4a0d      	ldr	r2, [pc, #52]	@ (800668c <prvInitialiseNewTask+0x144>)
 8006658:	659a      	str	r2, [r3, #88]	@ 0x58
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	4a0c      	ldr	r2, [pc, #48]	@ (8006690 <prvInitialiseNewTask+0x148>)
 800665e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	4a0c      	ldr	r2, [pc, #48]	@ (8006694 <prvInitialiseNewTask+0x14c>)
 8006664:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f001 fa5c 	bl	8007b28 <pxPortInitialiseStack>
 8006670:	4602      	mov	r2, r0
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006682:	bf00      	nop
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	2406648c 	.word	0x2406648c
 8006690:	240664f4 	.word	0x240664f4
 8006694:	2406655c 	.word	0x2406655c

08006698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066a0:	f001 fb72 	bl	8007d88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066a4:	4b2d      	ldr	r3, [pc, #180]	@ (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a2c      	ldr	r2, [pc, #176]	@ (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066bc:	4b27      	ldr	r3, [pc, #156]	@ (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d110      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066c4:	f000 fc30 	bl	8006f28 <prvInitialiseTaskLists>
 80066c8:	e00d      	b.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066ca:	4b26      	ldr	r3, [pc, #152]	@ (8006764 <prvAddNewTaskToReadyList+0xcc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066d2:	4b23      	ldr	r3, [pc, #140]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d802      	bhi.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066e6:	4b20      	ldr	r3, [pc, #128]	@ (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fc:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <prvAddNewTaskToReadyList+0xd4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <prvAddNewTaskToReadyList+0x74>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a18      	ldr	r2, [pc, #96]	@ (800676c <prvAddNewTaskToReadyList+0xd4>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <prvAddNewTaskToReadyList+0xd8>)
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fdb7 	bl	8005296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006728:	f001 fb60 	bl	8007dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800672c:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <prvAddNewTaskToReadyList+0xcc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00e      	beq.n	8006752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006734:	4b0a      	ldr	r3, [pc, #40]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	429a      	cmp	r2, r3
 8006740:	d207      	bcs.n	8006752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006742:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <prvAddNewTaskToReadyList+0xdc>)
 8006744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	24060af4 	.word	0x24060af4
 8006760:	24060620 	.word	0x24060620
 8006764:	24060b00 	.word	0x24060b00
 8006768:	24060b10 	.word	0x24060b10
 800676c:	24060afc 	.word	0x24060afc
 8006770:	24060624 	.word	0x24060624
 8006774:	e000ed04 	.word	0xe000ed04

08006778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800678a:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <vTaskDelay+0x64>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <vTaskDelay+0x32>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60bb      	str	r3, [r7, #8]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067aa:	f000 f88b 	bl	80068c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067ae:	2100      	movs	r1, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fe0b 	bl	80073cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067b6:	f000 f893 	bl	80068e0 <xTaskResumeAll>
 80067ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80067c2:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <vTaskDelay+0x68>)
 80067c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	24060b1c 	.word	0x24060b1c
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	@ 0x28
 80067e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067f2:	463a      	mov	r2, r7
 80067f4:	1d39      	adds	r1, r7, #4
 80067f6:	f107 0308 	add.w	r3, r7, #8
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fcea 	bl	80051d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	9202      	str	r2, [sp, #8]
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	2300      	movs	r3, #0
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	2300      	movs	r3, #0
 8006810:	460a      	mov	r2, r1
 8006812:	4924      	ldr	r1, [pc, #144]	@ (80068a4 <vTaskStartScheduler+0xc0>)
 8006814:	4824      	ldr	r0, [pc, #144]	@ (80068a8 <vTaskStartScheduler+0xc4>)
 8006816:	f7ff fdf1 	bl	80063fc <xTaskCreateStatic>
 800681a:	4603      	mov	r3, r0
 800681c:	4a23      	ldr	r2, [pc, #140]	@ (80068ac <vTaskStartScheduler+0xc8>)
 800681e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006820:	4b22      	ldr	r3, [pc, #136]	@ (80068ac <vTaskStartScheduler+0xc8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006828:	2301      	movs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e001      	b.n	8006832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d102      	bne.n	800683e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006838:	f000 fe1c 	bl	8007474 <xTimerCreateTimerTask>
 800683c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d11b      	bne.n	800687c <vTaskStartScheduler+0x98>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613b      	str	r3, [r7, #16]
}
 8006856:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006858:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <vTaskStartScheduler+0xcc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3354      	adds	r3, #84	@ 0x54
 800685e:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <vTaskStartScheduler+0xd0>)
 8006860:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006862:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <vTaskStartScheduler+0xd4>)
 8006864:	f04f 32ff 	mov.w	r2, #4294967295
 8006868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800686a:	4b14      	ldr	r3, [pc, #80]	@ (80068bc <vTaskStartScheduler+0xd8>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006870:	4b13      	ldr	r3, [pc, #76]	@ (80068c0 <vTaskStartScheduler+0xdc>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006876:	f001 f9e3 	bl	8007c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800687a:	e00f      	b.n	800689c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d10b      	bne.n	800689c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	60fb      	str	r3, [r7, #12]
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	e7fd      	b.n	8006898 <vTaskStartScheduler+0xb4>
}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	0801d210 	.word	0x0801d210
 80068a8:	08006ef5 	.word	0x08006ef5
 80068ac:	24060b18 	.word	0x24060b18
 80068b0:	24060620 	.word	0x24060620
 80068b4:	24000088 	.word	0x24000088
 80068b8:	24060b14 	.word	0x24060b14
 80068bc:	24060b00 	.word	0x24060b00
 80068c0:	24060af8 	.word	0x24060af8

080068c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068c8:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <vTaskSuspendAll+0x18>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a03      	ldr	r2, [pc, #12]	@ (80068dc <vTaskSuspendAll+0x18>)
 80068d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	24060b1c 	.word	0x24060b1c

080068e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068ee:	4b42      	ldr	r3, [pc, #264]	@ (80069f8 <xTaskResumeAll+0x118>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <xTaskResumeAll+0x2e>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	603b      	str	r3, [r7, #0]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800690e:	f001 fa3b 	bl	8007d88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006912:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <xTaskResumeAll+0x118>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	4a37      	ldr	r2, [pc, #220]	@ (80069f8 <xTaskResumeAll+0x118>)
 800691a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800691c:	4b36      	ldr	r3, [pc, #216]	@ (80069f8 <xTaskResumeAll+0x118>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d162      	bne.n	80069ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006924:	4b35      	ldr	r3, [pc, #212]	@ (80069fc <xTaskResumeAll+0x11c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05e      	beq.n	80069ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800692c:	e02f      	b.n	800698e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692e:	4b34      	ldr	r3, [pc, #208]	@ (8006a00 <xTaskResumeAll+0x120>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3318      	adds	r3, #24
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fd08 	bl	8005350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fd03 	bl	8005350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694e:	4b2d      	ldr	r3, [pc, #180]	@ (8006a04 <xTaskResumeAll+0x124>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d903      	bls.n	800695e <xTaskResumeAll+0x7e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	4a2a      	ldr	r2, [pc, #168]	@ (8006a04 <xTaskResumeAll+0x124>)
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4a27      	ldr	r2, [pc, #156]	@ (8006a08 <xTaskResumeAll+0x128>)
 800696c:	441a      	add	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fe fc8e 	bl	8005296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <xTaskResumeAll+0x12c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006988:	4b21      	ldr	r3, [pc, #132]	@ (8006a10 <xTaskResumeAll+0x130>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800698e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a00 <xTaskResumeAll+0x120>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1cb      	bne.n	800692e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800699c:	f000 fb68 	bl	8007070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a14 <xTaskResumeAll+0x134>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d010      	beq.n	80069ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069ac:	f000 f846 	bl	8006a3c <xTaskIncrementTick>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80069b6:	4b16      	ldr	r3, [pc, #88]	@ (8006a10 <xTaskResumeAll+0x130>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3b01      	subs	r3, #1
 80069c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f1      	bne.n	80069ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80069c8:	4b12      	ldr	r3, [pc, #72]	@ (8006a14 <xTaskResumeAll+0x134>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069ce:	4b10      	ldr	r3, [pc, #64]	@ (8006a10 <xTaskResumeAll+0x130>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069da:	4b0f      	ldr	r3, [pc, #60]	@ (8006a18 <xTaskResumeAll+0x138>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ea:	f001 f9ff 	bl	8007dec <vPortExitCritical>

	return xAlreadyYielded;
 80069ee:	68bb      	ldr	r3, [r7, #8]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	24060b1c 	.word	0x24060b1c
 80069fc:	24060af4 	.word	0x24060af4
 8006a00:	24060ab4 	.word	0x24060ab4
 8006a04:	24060afc 	.word	0x24060afc
 8006a08:	24060624 	.word	0x24060624
 8006a0c:	24060620 	.word	0x24060620
 8006a10:	24060b08 	.word	0x24060b08
 8006a14:	24060b04 	.word	0x24060b04
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a22:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <xTaskGetTickCount+0x1c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a28:	687b      	ldr	r3, [r7, #4]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	24060af8 	.word	0x24060af8

08006a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a46:	4b4f      	ldr	r3, [pc, #316]	@ (8006b84 <xTaskIncrementTick+0x148>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 8090 	bne.w	8006b70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a50:	4b4d      	ldr	r3, [pc, #308]	@ (8006b88 <xTaskIncrementTick+0x14c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a58:	4a4b      	ldr	r2, [pc, #300]	@ (8006b88 <xTaskIncrementTick+0x14c>)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d121      	bne.n	8006aa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a64:	4b49      	ldr	r3, [pc, #292]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	603b      	str	r3, [r7, #0]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <xTaskIncrementTick+0x46>
 8006a86:	4b41      	ldr	r3, [pc, #260]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	4b40      	ldr	r3, [pc, #256]	@ (8006b90 <xTaskIncrementTick+0x154>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a3e      	ldr	r2, [pc, #248]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	4a3e      	ldr	r2, [pc, #248]	@ (8006b90 <xTaskIncrementTick+0x154>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b94 <xTaskIncrementTick+0x158>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8006b94 <xTaskIncrementTick+0x158>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	f000 fae4 	bl	8007070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8006b98 <xTaskIncrementTick+0x15c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d349      	bcc.n	8006b46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab2:	4b36      	ldr	r3, [pc, #216]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abc:	4b36      	ldr	r3, [pc, #216]	@ (8006b98 <xTaskIncrementTick+0x15c>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	601a      	str	r2, [r3, #0]
					break;
 8006ac4:	e03f      	b.n	8006b46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac6:	4b31      	ldr	r3, [pc, #196]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d203      	bcs.n	8006ae6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ade:	4a2e      	ldr	r2, [pc, #184]	@ (8006b98 <xTaskIncrementTick+0x15c>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ae4:	e02f      	b.n	8006b46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fc30 	bl	8005350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3318      	adds	r3, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe fc27 	bl	8005350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b06:	4b25      	ldr	r3, [pc, #148]	@ (8006b9c <xTaskIncrementTick+0x160>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d903      	bls.n	8006b16 <xTaskIncrementTick+0xda>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	4a22      	ldr	r2, [pc, #136]	@ (8006b9c <xTaskIncrementTick+0x160>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba0 <xTaskIncrementTick+0x164>)
 8006b24:	441a      	add	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fe fbb2 	bl	8005296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b36:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba4 <xTaskIncrementTick+0x168>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d3b8      	bcc.n	8006ab2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b44:	e7b5      	b.n	8006ab2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b46:	4b17      	ldr	r3, [pc, #92]	@ (8006ba4 <xTaskIncrementTick+0x168>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4c:	4914      	ldr	r1, [pc, #80]	@ (8006ba0 <xTaskIncrementTick+0x164>)
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d901      	bls.n	8006b62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b62:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <xTaskIncrementTick+0x16c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e004      	b.n	8006b7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b70:	4b0e      	ldr	r3, [pc, #56]	@ (8006bac <xTaskIncrementTick+0x170>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a0d      	ldr	r2, [pc, #52]	@ (8006bac <xTaskIncrementTick+0x170>)
 8006b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b7a:	697b      	ldr	r3, [r7, #20]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	24060b1c 	.word	0x24060b1c
 8006b88:	24060af8 	.word	0x24060af8
 8006b8c:	24060aac 	.word	0x24060aac
 8006b90:	24060ab0 	.word	0x24060ab0
 8006b94:	24060b0c 	.word	0x24060b0c
 8006b98:	24060b14 	.word	0x24060b14
 8006b9c:	24060afc 	.word	0x24060afc
 8006ba0:	24060624 	.word	0x24060624
 8006ba4:	24060620 	.word	0x24060620
 8006ba8:	24060b08 	.word	0x24060b08
 8006bac:	24060b04 	.word	0x24060b04

08006bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c64 <vTaskSwitchContext+0xb4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <vTaskSwitchContext+0xb8>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bc4:	e047      	b.n	8006c56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006bc6:	4b28      	ldr	r3, [pc, #160]	@ (8006c68 <vTaskSwitchContext+0xb8>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bcc:	4b27      	ldr	r3, [pc, #156]	@ (8006c6c <vTaskSwitchContext+0xbc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e011      	b.n	8006bf8 <vTaskSwitchContext+0x48>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <vTaskSwitchContext+0x42>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	607b      	str	r3, [r7, #4]
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	e7fd      	b.n	8006bee <vTaskSwitchContext+0x3e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	491d      	ldr	r1, [pc, #116]	@ (8006c70 <vTaskSwitchContext+0xc0>)
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0e3      	beq.n	8006bd4 <vTaskSwitchContext+0x24>
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a16      	ldr	r2, [pc, #88]	@ (8006c70 <vTaskSwitchContext+0xc0>)
 8006c18:	4413      	add	r3, r2
 8006c1a:	60bb      	str	r3, [r7, #8]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d104      	bne.n	8006c3c <vTaskSwitchContext+0x8c>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4a0c      	ldr	r2, [pc, #48]	@ (8006c74 <vTaskSwitchContext+0xc4>)
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4a09      	ldr	r2, [pc, #36]	@ (8006c6c <vTaskSwitchContext+0xbc>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c4c:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <vTaskSwitchContext+0xc4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3354      	adds	r3, #84	@ 0x54
 8006c52:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <vTaskSwitchContext+0xc8>)
 8006c54:	6013      	str	r3, [r2, #0]
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	24060b1c 	.word	0x24060b1c
 8006c68:	24060b08 	.word	0x24060b08
 8006c6c:	24060afc 	.word	0x24060afc
 8006c70:	24060624 	.word	0x24060624
 8006c74:	24060620 	.word	0x24060620
 8006c78:	24000088 	.word	0x24000088

08006c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60fb      	str	r3, [r7, #12]
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca4:	4b07      	ldr	r3, [pc, #28]	@ (8006cc4 <vTaskPlaceOnEventList+0x48>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3318      	adds	r3, #24
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fe fb16 	bl	80052de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6838      	ldr	r0, [r7, #0]
 8006cb6:	f000 fb89 	bl	80073cc <prvAddCurrentTaskToDelayedList>
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	24060620 	.word	0x24060620

08006cc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10b      	bne.n	8006cf2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	617b      	str	r3, [r7, #20]
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	e7fd      	b.n	8006cee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <vTaskPlaceOnEventListRestricted+0x54>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3318      	adds	r3, #24
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7fe facb 	bl	8005296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f000 fb5c 	bl	80073cc <prvAddCurrentTaskToDelayedList>
	}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	24060620 	.word	0x24060620

08006d20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3318      	adds	r3, #24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fafc 	bl	8005350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d58:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd0 <xTaskRemoveFromEventList+0xb0>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11d      	bne.n	8006d9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe faf3 	bl	8005350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	4b19      	ldr	r3, [pc, #100]	@ (8006dd4 <xTaskRemoveFromEventList+0xb4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d903      	bls.n	8006d7e <xTaskRemoveFromEventList+0x5e>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	4a16      	ldr	r2, [pc, #88]	@ (8006dd4 <xTaskRemoveFromEventList+0xb4>)
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4a13      	ldr	r2, [pc, #76]	@ (8006dd8 <xTaskRemoveFromEventList+0xb8>)
 8006d8c:	441a      	add	r2, r3
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f7fe fa7e 	bl	8005296 <vListInsertEnd>
 8006d9a:	e005      	b.n	8006da8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3318      	adds	r3, #24
 8006da0:	4619      	mov	r1, r3
 8006da2:	480e      	ldr	r0, [pc, #56]	@ (8006ddc <xTaskRemoveFromEventList+0xbc>)
 8006da4:	f7fe fa77 	bl	8005296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	4b0c      	ldr	r3, [pc, #48]	@ (8006de0 <xTaskRemoveFromEventList+0xc0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d905      	bls.n	8006dc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dba:	4b0a      	ldr	r3, [pc, #40]	@ (8006de4 <xTaskRemoveFromEventList+0xc4>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e001      	b.n	8006dc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	24060b1c 	.word	0x24060b1c
 8006dd4:	24060afc 	.word	0x24060afc
 8006dd8:	24060624 	.word	0x24060624
 8006ddc:	24060ab4 	.word	0x24060ab4
 8006de0:	24060620 	.word	0x24060620
 8006de4:	24060b08 	.word	0x24060b08

08006de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006df0:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <vTaskInternalSetTimeOutState+0x24>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <vTaskInternalSetTimeOutState+0x28>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	605a      	str	r2, [r3, #4]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	24060b0c 	.word	0x24060b0c
 8006e10:	24060af8 	.word	0x24060af8

08006e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	613b      	str	r3, [r7, #16]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10b      	bne.n	8006e5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	60fb      	str	r3, [r7, #12]
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	e7fd      	b.n	8006e56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e5a:	f000 ff95 	bl	8007d88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <xTaskCheckForTimeOut+0xc0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d102      	bne.n	8006e7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e023      	b.n	8006ec6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <xTaskCheckForTimeOut+0xc4>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d007      	beq.n	8006e9a <xTaskCheckForTimeOut+0x86>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e015      	b.n	8006ec6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d20b      	bcs.n	8006ebc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff ff99 	bl	8006de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e004      	b.n	8006ec6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ec6:	f000 ff91 	bl	8007dec <vPortExitCritical>

	return xReturn;
 8006eca:	69fb      	ldr	r3, [r7, #28]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	24060af8 	.word	0x24060af8
 8006ed8:	24060b0c 	.word	0x24060b0c

08006edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ee0:	4b03      	ldr	r3, [pc, #12]	@ (8006ef0 <vTaskMissedYield+0x14>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	24060b08 	.word	0x24060b08

08006ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006efc:	f000 f854 	bl	8006fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <prvIdleTask+0x2c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d907      	bls.n	8006f18 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006f08:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <prvIdleTask+0x30>)
 8006f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006f18:	f7f9 fa4a 	bl	80003b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006f1c:	e7ee      	b.n	8006efc <prvIdleTask+0x8>
 8006f1e:	bf00      	nop
 8006f20:	24060624 	.word	0x24060624
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e00c      	b.n	8006f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4a12      	ldr	r2, [pc, #72]	@ (8006f88 <prvInitialiseTaskLists+0x60>)
 8006f40:	4413      	add	r3, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe f97a 	bl	800523c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b37      	cmp	r3, #55	@ 0x37
 8006f52:	d9ef      	bls.n	8006f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f54:	480d      	ldr	r0, [pc, #52]	@ (8006f8c <prvInitialiseTaskLists+0x64>)
 8006f56:	f7fe f971 	bl	800523c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f5a:	480d      	ldr	r0, [pc, #52]	@ (8006f90 <prvInitialiseTaskLists+0x68>)
 8006f5c:	f7fe f96e 	bl	800523c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f60:	480c      	ldr	r0, [pc, #48]	@ (8006f94 <prvInitialiseTaskLists+0x6c>)
 8006f62:	f7fe f96b 	bl	800523c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f66:	480c      	ldr	r0, [pc, #48]	@ (8006f98 <prvInitialiseTaskLists+0x70>)
 8006f68:	f7fe f968 	bl	800523c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f6c:	480b      	ldr	r0, [pc, #44]	@ (8006f9c <prvInitialiseTaskLists+0x74>)
 8006f6e:	f7fe f965 	bl	800523c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f72:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <prvInitialiseTaskLists+0x78>)
 8006f74:	4a05      	ldr	r2, [pc, #20]	@ (8006f8c <prvInitialiseTaskLists+0x64>)
 8006f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <prvInitialiseTaskLists+0x7c>)
 8006f7a:	4a05      	ldr	r2, [pc, #20]	@ (8006f90 <prvInitialiseTaskLists+0x68>)
 8006f7c:	601a      	str	r2, [r3, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	24060624 	.word	0x24060624
 8006f8c:	24060a84 	.word	0x24060a84
 8006f90:	24060a98 	.word	0x24060a98
 8006f94:	24060ab4 	.word	0x24060ab4
 8006f98:	24060ac8 	.word	0x24060ac8
 8006f9c:	24060ae0 	.word	0x24060ae0
 8006fa0:	24060aac 	.word	0x24060aac
 8006fa4:	24060ab0 	.word	0x24060ab0

08006fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fae:	e019      	b.n	8006fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fb0:	f000 feea 	bl	8007d88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb4:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x50>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe f9c5 	bl	8005350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <prvCheckTasksWaitingTermination+0x54>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8006ffc <prvCheckTasksWaitingTermination+0x54>)
 8006fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <prvCheckTasksWaitingTermination+0x58>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8007000 <prvCheckTasksWaitingTermination+0x58>)
 8006fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fda:	f000 ff07 	bl	8007dec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f810 	bl	8007004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <prvCheckTasksWaitingTermination+0x58>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e1      	bne.n	8006fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	24060ac8 	.word	0x24060ac8
 8006ffc:	24060af4 	.word	0x24060af4
 8007000:	24060adc 	.word	0x24060adc

08007004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3354      	adds	r3, #84	@ 0x54
 8007010:	4618      	mov	r0, r3
 8007012:	f015 fb51 	bl	801c6b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800701c:	2b00      	cmp	r3, #0
 800701e:	d108      	bne.n	8007032 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	4618      	mov	r0, r3
 8007026:	f001 f89f 	bl	8008168 <vPortFree>
				vPortFree( pxTCB );
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 f89c 	bl	8008168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007030:	e019      	b.n	8007066 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007038:	2b01      	cmp	r3, #1
 800703a:	d103      	bne.n	8007044 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f893 	bl	8008168 <vPortFree>
	}
 8007042:	e010      	b.n	8007066 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800704a:	2b02      	cmp	r3, #2
 800704c:	d00b      	beq.n	8007066 <prvDeleteTCB+0x62>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60fb      	str	r3, [r7, #12]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <prvDeleteTCB+0x5e>
	}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007076:	4b0c      	ldr	r3, [pc, #48]	@ (80070a8 <prvResetNextTaskUnblockTime+0x38>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007080:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <prvResetNextTaskUnblockTime+0x3c>)
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007088:	e008      	b.n	800709c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708a:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <prvResetNextTaskUnblockTime+0x38>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4a04      	ldr	r2, [pc, #16]	@ (80070ac <prvResetNextTaskUnblockTime+0x3c>)
 800709a:	6013      	str	r3, [r2, #0]
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	24060aac 	.word	0x24060aac
 80070ac:	24060b14 	.word	0x24060b14

080070b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070b6:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <xTaskGetSchedulerState+0x34>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070be:	2301      	movs	r3, #1
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	e008      	b.n	80070d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c4:	4b08      	ldr	r3, [pc, #32]	@ (80070e8 <xTaskGetSchedulerState+0x38>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070cc:	2302      	movs	r3, #2
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	e001      	b.n	80070d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070d2:	2300      	movs	r3, #0
 80070d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070d6:	687b      	ldr	r3, [r7, #4]
	}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	24060b00 	.word	0x24060b00
 80070e8:	24060b1c 	.word	0x24060b1c

080070ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d051      	beq.n	80071a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007106:	4b2a      	ldr	r3, [pc, #168]	@ (80071b0 <xTaskPriorityInherit+0xc4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	429a      	cmp	r2, r3
 800710e:	d241      	bcs.n	8007194 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	db06      	blt.n	8007126 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007118:	4b25      	ldr	r3, [pc, #148]	@ (80071b0 <xTaskPriorityInherit+0xc4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4a1f      	ldr	r2, [pc, #124]	@ (80071b4 <xTaskPriorityInherit+0xc8>)
 8007138:	4413      	add	r3, r2
 800713a:	4299      	cmp	r1, r3
 800713c:	d122      	bne.n	8007184 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3304      	adds	r3, #4
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe f904 	bl	8005350 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007148:	4b19      	ldr	r3, [pc, #100]	@ (80071b0 <xTaskPriorityInherit+0xc4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007156:	4b18      	ldr	r3, [pc, #96]	@ (80071b8 <xTaskPriorityInherit+0xcc>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d903      	bls.n	8007166 <xTaskPriorityInherit+0x7a>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007162:	4a15      	ldr	r2, [pc, #84]	@ (80071b8 <xTaskPriorityInherit+0xcc>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a10      	ldr	r2, [pc, #64]	@ (80071b4 <xTaskPriorityInherit+0xc8>)
 8007174:	441a      	add	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	3304      	adds	r3, #4
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7fe f88a 	bl	8005296 <vListInsertEnd>
 8007182:	e004      	b.n	800718e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007184:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <xTaskPriorityInherit+0xc4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800718e:	2301      	movs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e008      	b.n	80071a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007198:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <xTaskPriorityInherit+0xc4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	429a      	cmp	r2, r3
 80071a0:	d201      	bcs.n	80071a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071a2:	2301      	movs	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071a6:	68fb      	ldr	r3, [r7, #12]
	}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	24060620 	.word	0x24060620
 80071b4:	24060624 	.word	0x24060624
 80071b8:	24060afc 	.word	0x24060afc

080071bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d058      	beq.n	8007284 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007290 <xTaskPriorityDisinherit+0xd4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d00b      	beq.n	80071f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60fb      	str	r3, [r7, #12]
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60bb      	str	r3, [r7, #8]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007218:	1e5a      	subs	r2, r3, #1
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007226:	429a      	cmp	r2, r3
 8007228:	d02c      	beq.n	8007284 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722e:	2b00      	cmp	r3, #0
 8007230:	d128      	bne.n	8007284 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe f88a 	bl	8005350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007248:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007254:	4b0f      	ldr	r3, [pc, #60]	@ (8007294 <xTaskPriorityDisinherit+0xd8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d903      	bls.n	8007264 <xTaskPriorityDisinherit+0xa8>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	4a0c      	ldr	r2, [pc, #48]	@ (8007294 <xTaskPriorityDisinherit+0xd8>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4a09      	ldr	r2, [pc, #36]	@ (8007298 <xTaskPriorityDisinherit+0xdc>)
 8007272:	441a      	add	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7fe f80b 	bl	8005296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007280:	2301      	movs	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007284:	697b      	ldr	r3, [r7, #20]
	}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	24060620 	.word	0x24060620
 8007294:	24060afc 	.word	0x24060afc
 8007298:	24060624 	.word	0x24060624

0800729c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d06c      	beq.n	800738e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	60fb      	str	r3, [r7, #12]
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d902      	bls.n	80072e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	e002      	b.n	80072ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d04c      	beq.n	800738e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d147      	bne.n	800738e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072fe:	4b26      	ldr	r3, [pc, #152]	@ (8007398 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	429a      	cmp	r2, r3
 8007306:	d10b      	bne.n	8007320 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60bb      	str	r3, [r7, #8]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	db04      	blt.n	800733e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	6959      	ldr	r1, [r3, #20]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4a13      	ldr	r2, [pc, #76]	@ (800739c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800734e:	4413      	add	r3, r2
 8007350:	4299      	cmp	r1, r3
 8007352:	d11c      	bne.n	800738e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	3304      	adds	r3, #4
 8007358:	4618      	mov	r0, r3
 800735a:	f7fd fff9 	bl	8005350 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007362:	4b0f      	ldr	r3, [pc, #60]	@ (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d903      	bls.n	8007372 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	4a0c      	ldr	r2, [pc, #48]	@ (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4a07      	ldr	r2, [pc, #28]	@ (800739c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007380:	441a      	add	r2, r3
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f7fd ff84 	bl	8005296 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800738e:	bf00      	nop
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	24060620 	.word	0x24060620
 800739c:	24060624 	.word	0x24060624
 80073a0:	24060afc 	.word	0x24060afc

080073a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073a8:	4b07      	ldr	r3, [pc, #28]	@ (80073c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073b0:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073b6:	3201      	adds	r2, #1
 80073b8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80073ba:	4b03      	ldr	r3, [pc, #12]	@ (80073c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80073bc:	681b      	ldr	r3, [r3, #0]
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	24060620 	.word	0x24060620

080073cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073d6:	4b21      	ldr	r3, [pc, #132]	@ (800745c <prvAddCurrentTaskToDelayedList+0x90>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073dc:	4b20      	ldr	r3, [pc, #128]	@ (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fd ffb4 	bl	8005350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d10a      	bne.n	8007406 <prvAddCurrentTaskToDelayedList+0x3a>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4819      	ldr	r0, [pc, #100]	@ (8007464 <prvAddCurrentTaskToDelayedList+0x98>)
 8007400:	f7fd ff49 	bl	8005296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007404:	e026      	b.n	8007454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800740e:	4b14      	ldr	r3, [pc, #80]	@ (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	429a      	cmp	r2, r3
 800741c:	d209      	bcs.n	8007432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741e:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b0f      	ldr	r3, [pc, #60]	@ (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fd ff57 	bl	80052de <vListInsert>
}
 8007430:	e010      	b.n	8007454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007432:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b0a      	ldr	r3, [pc, #40]	@ (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fd ff4d 	bl	80052de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007444:	4b0a      	ldr	r3, [pc, #40]	@ (8007470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	d202      	bcs.n	8007454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800744e:	4a08      	ldr	r2, [pc, #32]	@ (8007470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6013      	str	r3, [r2, #0]
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	24060af8 	.word	0x24060af8
 8007460:	24060620 	.word	0x24060620
 8007464:	24060ae0 	.word	0x24060ae0
 8007468:	24060ab0 	.word	0x24060ab0
 800746c:	24060aac 	.word	0x24060aac
 8007470:	24060b14 	.word	0x24060b14

08007474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	@ 0x28
 8007478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800747e:	f000 fb13 	bl	8007aa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007482:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <xTimerCreateTimerTask+0x84>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d021      	beq.n	80074ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007492:	1d3a      	adds	r2, r7, #4
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	f107 030c 	add.w	r3, r7, #12
 800749c:	4618      	mov	r0, r3
 800749e:	f7fd feb3 	bl	8005208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	9202      	str	r2, [sp, #8]
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	2302      	movs	r3, #2
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	460a      	mov	r2, r1
 80074b4:	4911      	ldr	r1, [pc, #68]	@ (80074fc <xTimerCreateTimerTask+0x88>)
 80074b6:	4812      	ldr	r0, [pc, #72]	@ (8007500 <xTimerCreateTimerTask+0x8c>)
 80074b8:	f7fe ffa0 	bl	80063fc <xTaskCreateStatic>
 80074bc:	4603      	mov	r3, r0
 80074be:	4a11      	ldr	r2, [pc, #68]	@ (8007504 <xTimerCreateTimerTask+0x90>)
 80074c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074c2:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <xTimerCreateTimerTask+0x90>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10b      	bne.n	80074ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	613b      	str	r3, [r7, #16]
}
 80074e6:	bf00      	nop
 80074e8:	bf00      	nop
 80074ea:	e7fd      	b.n	80074e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074ec:	697b      	ldr	r3, [r7, #20]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	24060b50 	.word	0x24060b50
 80074fc:	0801d218 	.word	0x0801d218
 8007500:	08007641 	.word	0x08007641
 8007504:	24060b54 	.word	0x24060b54

08007508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	@ 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007516:	2300      	movs	r3, #0
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <xTimerGenericCommand+0x30>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	623b      	str	r3, [r7, #32]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007538:	4b19      	ldr	r3, [pc, #100]	@ (80075a0 <xTimerGenericCommand+0x98>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02a      	beq.n	8007596 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b05      	cmp	r3, #5
 8007550:	dc18      	bgt.n	8007584 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007552:	f7ff fdad 	bl	80070b0 <xTaskGetSchedulerState>
 8007556:	4603      	mov	r3, r0
 8007558:	2b02      	cmp	r3, #2
 800755a:	d109      	bne.n	8007570 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800755c:	4b10      	ldr	r3, [pc, #64]	@ (80075a0 <xTimerGenericCommand+0x98>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	f107 0110 	add.w	r1, r7, #16
 8007564:	2300      	movs	r3, #0
 8007566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007568:	f7fe f8d0 	bl	800570c <xQueueGenericSend>
 800756c:	6278      	str	r0, [r7, #36]	@ 0x24
 800756e:	e012      	b.n	8007596 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <xTimerGenericCommand+0x98>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f107 0110 	add.w	r1, r7, #16
 8007578:	2300      	movs	r3, #0
 800757a:	2200      	movs	r2, #0
 800757c:	f7fe f8c6 	bl	800570c <xQueueGenericSend>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
 8007582:	e008      	b.n	8007596 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <xTimerGenericCommand+0x98>)
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	f107 0110 	add.w	r1, r7, #16
 800758c:	2300      	movs	r3, #0
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	f7fe f9be 	bl	8005910 <xQueueGenericSendFromISR>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	@ 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	24060b50 	.word	0x24060b50

080075a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ae:	4b23      	ldr	r3, [pc, #140]	@ (800763c <prvProcessExpiredTimer+0x98>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fd fec7 	bl	8005350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d023      	beq.n	8007618 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	18d1      	adds	r1, r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	6978      	ldr	r0, [r7, #20]
 80075de:	f000 f8d5 	bl	800778c <prvInsertTimerInActiveList>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d020      	beq.n	800762a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075e8:	2300      	movs	r3, #0
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	2100      	movs	r1, #0
 80075f2:	6978      	ldr	r0, [r7, #20]
 80075f4:	f7ff ff88 	bl	8007508 <xTimerGenericCommand>
 80075f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d114      	bne.n	800762a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	60fb      	str	r3, [r7, #12]
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	4798      	blx	r3
}
 8007632:	bf00      	nop
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	24060b48 	.word	0x24060b48

08007640 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f859 	bl	8007704 <prvGetNextExpireTime>
 8007652:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4619      	mov	r1, r3
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f805 	bl	8007668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800765e:	f000 f8d7 	bl	8007810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007662:	bf00      	nop
 8007664:	e7f0      	b.n	8007648 <prvTimerTask+0x8>
	...

08007668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007672:	f7ff f927 	bl	80068c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f866 	bl	800774c <prvSampleTimeNow>
 8007680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d130      	bne.n	80076ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <prvProcessTimerOrBlockTask+0x3c>
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	429a      	cmp	r2, r3
 8007694:	d806      	bhi.n	80076a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007696:	f7ff f923 	bl	80068e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff ff81 	bl	80075a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076a2:	e024      	b.n	80076ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076aa:	4b13      	ldr	r3, [pc, #76]	@ (80076f8 <prvProcessTimerOrBlockTask+0x90>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <prvProcessTimerOrBlockTask+0x50>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <prvProcessTimerOrBlockTask+0x52>
 80076b8:	2300      	movs	r3, #0
 80076ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076bc:	4b0f      	ldr	r3, [pc, #60]	@ (80076fc <prvProcessTimerOrBlockTask+0x94>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f7fe fe63 	bl	8006394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076ce:	f7ff f907 	bl	80068e0 <xTaskResumeAll>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076d8:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <prvProcessTimerOrBlockTask+0x98>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
}
 80076e8:	e001      	b.n	80076ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ea:	f7ff f8f9 	bl	80068e0 <xTaskResumeAll>
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	24060b4c 	.word	0x24060b4c
 80076fc:	24060b50 	.word	0x24060b50
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800770c:	4b0e      	ldr	r3, [pc, #56]	@ (8007748 <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <prvGetNextExpireTime+0x16>
 8007716:	2201      	movs	r2, #1
 8007718:	e000      	b.n	800771c <prvGetNextExpireTime+0x18>
 800771a:	2200      	movs	r2, #0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007728:	4b07      	ldr	r3, [pc, #28]	@ (8007748 <prvGetNextExpireTime+0x44>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e001      	b.n	8007738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007738:	68fb      	ldr	r3, [r7, #12]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	24060b48 	.word	0x24060b48

0800774c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007754:	f7ff f962 	bl	8006a1c <xTaskGetTickCount>
 8007758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800775a:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <prvSampleTimeNow+0x3c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	429a      	cmp	r2, r3
 8007762:	d205      	bcs.n	8007770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007764:	f000 f93a 	bl	80079dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e002      	b.n	8007776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007776:	4a04      	ldr	r2, [pc, #16]	@ (8007788 <prvSampleTimeNow+0x3c>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800777c:	68fb      	ldr	r3, [r7, #12]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	24060b58 	.word	0x24060b58

0800778c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d812      	bhi.n	80077d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d302      	bcc.n	80077c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e01b      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077c6:	4b10      	ldr	r3, [pc, #64]	@ (8007808 <prvInsertTimerInActiveList+0x7c>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fd fd84 	bl	80052de <vListInsert>
 80077d6:	e012      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d206      	bcs.n	80077ee <prvInsertTimerInActiveList+0x62>
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e007      	b.n	80077fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b07      	ldr	r3, [pc, #28]	@ (800780c <prvInsertTimerInActiveList+0x80>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fd fd70 	bl	80052de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077fe:	697b      	ldr	r3, [r7, #20]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	24060b4c 	.word	0x24060b4c
 800780c:	24060b48 	.word	0x24060b48

08007810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	@ 0x38
 8007814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007816:	e0ce      	b.n	80079b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da19      	bge.n	8007852 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800781e:	1d3b      	adds	r3, r7, #4
 8007820:	3304      	adds	r3, #4
 8007822:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10b      	bne.n	8007842 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	61fb      	str	r3, [r7, #28]
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	e7fd      	b.n	800783e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007848:	6850      	ldr	r0, [r2, #4]
 800784a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784c:	6892      	ldr	r2, [r2, #8]
 800784e:	4611      	mov	r1, r2
 8007850:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f2c0 80ae 	blt.w	80079b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fd fd70 	bl	8005350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007870:	463b      	mov	r3, r7
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff ff6a 	bl	800774c <prvSampleTimeNow>
 8007878:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b09      	cmp	r3, #9
 800787e:	f200 8097 	bhi.w	80079b0 <prvProcessReceivedCommands+0x1a0>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <prvProcessReceivedCommands+0x78>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b1 	.word	0x080078b1
 8007894:	08007927 	.word	0x08007927
 8007898:	0800793b 	.word	0x0800793b
 800789c:	08007987 	.word	0x08007987
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078b1 	.word	0x080078b1
 80078a8:	08007927 	.word	0x08007927
 80078ac:	0800793b 	.word	0x0800793b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	18d1      	adds	r1, r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d0:	f7ff ff5c 	bl	800778c <prvInsertTimerInActiveList>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d06c      	beq.n	80079b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d061      	beq.n	80079b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	441a      	add	r2, r3
 80078f8:	2300      	movs	r3, #0
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007902:	f7ff fe01 	bl	8007508 <xTimerGenericCommand>
 8007906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d152      	bne.n	80079b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	61bb      	str	r3, [r7, #24]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	b2da      	uxtb	r2, r3
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007938:	e03d      	b.n	80079b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	b2da      	uxtb	r2, r3
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	617b      	str	r3, [r7, #20]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	18d1      	adds	r1, r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800797e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007980:	f7ff ff04 	bl	800778c <prvInsertTimerInActiveList>
					break;
 8007984:	e017      	b.n	80079b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007996:	f000 fbe7 	bl	8008168 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800799a:	e00c      	b.n	80079b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079ae:	e002      	b.n	80079b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80079b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079b6:	4b08      	ldr	r3, [pc, #32]	@ (80079d8 <prvProcessReceivedCommands+0x1c8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	1d39      	adds	r1, r7, #4
 80079bc:	2200      	movs	r2, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe f8d4 	bl	8005b6c <xQueueReceive>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f47f af26 	bne.w	8007818 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	3730      	adds	r7, #48	@ 0x30
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	24060b50 	.word	0x24060b50

080079dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079e2:	e049      	b.n	8007a78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e4:	4b2e      	ldr	r3, [pc, #184]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ee:	4b2c      	ldr	r3, [pc, #176]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd fca7 	bl	8005350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d02f      	beq.n	8007a78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d90e      	bls.n	8007a48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a36:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fd fc4c 	bl	80052de <vListInsert>
 8007a46:	e017      	b.n	8007a78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	2100      	movs	r1, #0
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff fd58 	bl	8007508 <xTimerGenericCommand>
 8007a58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	603b      	str	r3, [r7, #0]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a78:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1b0      	bne.n	80079e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a82:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <prvSwitchTimerLists+0xc8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a04      	ldr	r2, [pc, #16]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a90:	4a04      	ldr	r2, [pc, #16]	@ (8007aa4 <prvSwitchTimerLists+0xc8>)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6013      	str	r3, [r2, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	24060b48 	.word	0x24060b48
 8007aa4:	24060b4c 	.word	0x24060b4c

08007aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aae:	f000 f96b 	bl	8007d88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ab2:	4b15      	ldr	r3, [pc, #84]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d120      	bne.n	8007afc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aba:	4814      	ldr	r0, [pc, #80]	@ (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007abc:	f7fd fbbe 	bl	800523c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ac0:	4813      	ldr	r0, [pc, #76]	@ (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007ac2:	f7fd fbbb 	bl	800523c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ac6:	4b13      	ldr	r3, [pc, #76]	@ (8007b14 <prvCheckForValidListAndQueue+0x6c>)
 8007ac8:	4a10      	ldr	r2, [pc, #64]	@ (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007acc:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <prvCheckForValidListAndQueue+0x70>)
 8007ace:	4a10      	ldr	r2, [pc, #64]	@ (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4b11      	ldr	r3, [pc, #68]	@ (8007b1c <prvCheckForValidListAndQueue+0x74>)
 8007ad8:	4a11      	ldr	r2, [pc, #68]	@ (8007b20 <prvCheckForValidListAndQueue+0x78>)
 8007ada:	2110      	movs	r1, #16
 8007adc:	200a      	movs	r0, #10
 8007ade:	f7fd fccb 	bl	8005478 <xQueueGenericCreateStatic>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4a08      	ldr	r2, [pc, #32]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ae8:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007af0:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	490b      	ldr	r1, [pc, #44]	@ (8007b24 <prvCheckForValidListAndQueue+0x7c>)
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fbf8 	bl	80062ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007afc:	f000 f976 	bl	8007dec <vPortExitCritical>
}
 8007b00:	bf00      	nop
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	24060b50 	.word	0x24060b50
 8007b0c:	24060b20 	.word	0x24060b20
 8007b10:	24060b34 	.word	0x24060b34
 8007b14:	24060b48 	.word	0x24060b48
 8007b18:	24060b4c 	.word	0x24060b4c
 8007b1c:	24060bfc 	.word	0x24060bfc
 8007b20:	24060b5c 	.word	0x24060b5c
 8007b24:	0801d220 	.word	0x0801d220

08007b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b04      	subs	r3, #4
 8007b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b58:	4a0c      	ldr	r2, [pc, #48]	@ (8007b8c <pxPortInitialiseStack+0x64>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b14      	subs	r3, #20
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f06f 0202 	mvn.w	r2, #2
 8007b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3b20      	subs	r3, #32
 8007b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	08007b91 	.word	0x08007b91

08007b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b9a:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <prvTaskExitError+0x58>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d00b      	beq.n	8007bbc <prvTaskExitError+0x2c>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <prvTaskExitError+0x28>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60bb      	str	r3, [r7, #8]
}
 8007bce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bd0:	bf00      	nop
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0fc      	beq.n	8007bd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	24000014 	.word	0x24000014
 8007bec:	00000000 	.word	0x00000000

08007bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bf0:	4b07      	ldr	r3, [pc, #28]	@ (8007c10 <pxCurrentTCBConst2>)
 8007bf2:	6819      	ldr	r1, [r3, #0]
 8007bf4:	6808      	ldr	r0, [r1, #0]
 8007bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	f380 8809 	msr	PSP, r0
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8811 	msr	BASEPRI, r0
 8007c0a:	4770      	bx	lr
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst2>:
 8007c10:	24060620 	.word	0x24060620
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c18:	4808      	ldr	r0, [pc, #32]	@ (8007c3c <prvPortStartFirstTask+0x24>)
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	6800      	ldr	r0, [r0, #0]
 8007c1e:	f380 8808 	msr	MSP, r0
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8814 	msr	CONTROL, r0
 8007c2a:	b662      	cpsie	i
 8007c2c:	b661      	cpsie	f
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	df00      	svc	0
 8007c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c3a:	bf00      	nop
 8007c3c:	e000ed08 	.word	0xe000ed08

08007c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c46:	4b47      	ldr	r3, [pc, #284]	@ (8007d64 <xPortStartScheduler+0x124>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a47      	ldr	r2, [pc, #284]	@ (8007d68 <xPortStartScheduler+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10b      	bne.n	8007c68 <xPortStartScheduler+0x28>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c68:	4b3e      	ldr	r3, [pc, #248]	@ (8007d64 <xPortStartScheduler+0x124>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d6c <xPortStartScheduler+0x12c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d10b      	bne.n	8007c8a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60fb      	str	r3, [r7, #12]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c8a:	4b39      	ldr	r3, [pc, #228]	@ (8007d70 <xPortStartScheduler+0x130>)
 8007c8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	22ff      	movs	r2, #255	@ 0xff
 8007c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	4b31      	ldr	r3, [pc, #196]	@ (8007d74 <xPortStartScheduler+0x134>)
 8007cb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cb2:	4b31      	ldr	r3, [pc, #196]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cb8:	e009      	b.n	8007cce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007cba:	4b2f      	ldr	r3, [pc, #188]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd6:	2b80      	cmp	r3, #128	@ 0x80
 8007cd8:	d0ef      	beq.n	8007cba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cda:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1c3 0307 	rsb	r3, r3, #7
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d00b      	beq.n	8007cfe <xPortStartScheduler+0xbe>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60bb      	str	r3, [r7, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d08:	4b1b      	ldr	r3, [pc, #108]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d10:	4a19      	ldr	r2, [pc, #100]	@ (8007d78 <xPortStartScheduler+0x138>)
 8007d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d1c:	4b17      	ldr	r3, [pc, #92]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d28:	4b14      	ldr	r3, [pc, #80]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <xPortStartScheduler+0x13c>)
 8007d2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d34:	f000 f8da 	bl	8007eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d38:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <xPortStartScheduler+0x140>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d3e:	f000 f8f9 	bl	8007f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d42:	4b10      	ldr	r3, [pc, #64]	@ (8007d84 <xPortStartScheduler+0x144>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a0f      	ldr	r2, [pc, #60]	@ (8007d84 <xPortStartScheduler+0x144>)
 8007d48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d4e:	f7ff ff63 	bl	8007c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d52:	f7fe ff2d 	bl	8006bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007d56:	f7ff ff1b 	bl	8007b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	e000ed00 	.word	0xe000ed00
 8007d68:	410fc271 	.word	0x410fc271
 8007d6c:	410fc270 	.word	0x410fc270
 8007d70:	e000e400 	.word	0xe000e400
 8007d74:	24060c4c 	.word	0x24060c4c
 8007d78:	24060c50 	.word	0x24060c50
 8007d7c:	e000ed20 	.word	0xe000ed20
 8007d80:	24000014 	.word	0x24000014
 8007d84:	e000ef34 	.word	0xe000ef34

08007d88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007da2:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <vPortEnterCritical+0x5c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	4a0e      	ldr	r2, [pc, #56]	@ (8007de4 <vPortEnterCritical+0x5c>)
 8007daa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dac:	4b0d      	ldr	r3, [pc, #52]	@ (8007de4 <vPortEnterCritical+0x5c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d110      	bne.n	8007dd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007db4:	4b0c      	ldr	r3, [pc, #48]	@ (8007de8 <vPortEnterCritical+0x60>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	603b      	str	r3, [r7, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	e7fd      	b.n	8007dd2 <vPortEnterCritical+0x4a>
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	24000014 	.word	0x24000014
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007df2:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <vPortExitCritical+0x26>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	607b      	str	r3, [r7, #4]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e12:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <vPortExitCritical+0x50>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	4a08      	ldr	r2, [pc, #32]	@ (8007e3c <vPortExitCritical+0x50>)
 8007e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e1c:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <vPortExitCritical+0x50>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <vPortExitCritical+0x44>
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
}
 8007e2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	24000014 	.word	0x24000014

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	@ (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7fe fe9e 	bl	8006bb0 <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	24060620 	.word	0x24060620
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
}
 8007ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec2:	f7fe fdbb 	bl	8006a3c <xTaskIncrementTick>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <xPortSysTickHandler+0x40>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <vPortSetupTimerInterrupt+0x38>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <vPortSetupTimerInterrupt+0x3c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	@ (8007f2c <vPortSetupTimerInterrupt+0x40>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	4a09      	ldr	r2, [pc, #36]	@ (8007f30 <vPortSetupTimerInterrupt+0x44>)
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0e:	4b04      	ldr	r3, [pc, #16]	@ (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010
 8007f24:	e000e018 	.word	0xe000e018
 8007f28:	24000004 	.word	0x24000004
 8007f2c:	10624dd3 	.word	0x10624dd3
 8007f30:	e000e014 	.word	0xe000e014

08007f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f44 <vPortEnableVFP+0x10>
 8007f38:	6801      	ldr	r1, [r0, #0]
 8007f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f3e:	6001      	str	r1, [r0, #0]
 8007f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f42:	bf00      	nop
 8007f44:	e000ed88 	.word	0xe000ed88

08007f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f4e:	f3ef 8305 	mrs	r3, IPSR
 8007f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b0f      	cmp	r3, #15
 8007f58:	d915      	bls.n	8007f86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f5a:	4a18      	ldr	r2, [pc, #96]	@ (8007fbc <vPortValidateInterruptPriority+0x74>)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f64:	4b16      	ldr	r3, [pc, #88]	@ (8007fc0 <vPortValidateInterruptPriority+0x78>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	7afa      	ldrb	r2, [r7, #11]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d20b      	bcs.n	8007f86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	607b      	str	r3, [r7, #4]
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f86:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc4 <vPortValidateInterruptPriority+0x7c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc8 <vPortValidateInterruptPriority+0x80>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d90b      	bls.n	8007fae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	603b      	str	r3, [r7, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	e7fd      	b.n	8007faa <vPortValidateInterruptPriority+0x62>
	}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	e000e3f0 	.word	0xe000e3f0
 8007fc0:	24060c4c 	.word	0x24060c4c
 8007fc4:	e000ed0c 	.word	0xe000ed0c
 8007fc8:	24060c50 	.word	0x24060c50

08007fcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	@ 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fd8:	f7fe fc74 	bl	80068c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8008150 <pvPortMalloc+0x184>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fe4:	f000 f924 	bl	8008230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8008154 <pvPortMalloc+0x188>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 8095 	bne.w	8008120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01e      	beq.n	800803a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d015      	beq.n	800803a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f023 0307 	bic.w	r3, r3, #7
 8008014:	3308      	adds	r3, #8
 8008016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <pvPortMalloc+0x6e>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	617b      	str	r3, [r7, #20]
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d06f      	beq.n	8008120 <pvPortMalloc+0x154>
 8008040:	4b45      	ldr	r3, [pc, #276]	@ (8008158 <pvPortMalloc+0x18c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d86a      	bhi.n	8008120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800804a:	4b44      	ldr	r3, [pc, #272]	@ (800815c <pvPortMalloc+0x190>)
 800804c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800804e:	4b43      	ldr	r3, [pc, #268]	@ (800815c <pvPortMalloc+0x190>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008054:	e004      	b.n	8008060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	429a      	cmp	r2, r3
 8008068:	d903      	bls.n	8008072 <pvPortMalloc+0xa6>
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f1      	bne.n	8008056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008072:	4b37      	ldr	r3, [pc, #220]	@ (8008150 <pvPortMalloc+0x184>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008078:	429a      	cmp	r2, r3
 800807a:	d051      	beq.n	8008120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2208      	movs	r2, #8
 8008082:	4413      	add	r3, r2
 8008084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	1ad2      	subs	r2, r2, r3
 8008096:	2308      	movs	r3, #8
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	429a      	cmp	r2, r3
 800809c:	d920      	bls.n	80080e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800809e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <pvPortMalloc+0xfc>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	e7fd      	b.n	80080c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080da:	69b8      	ldr	r0, [r7, #24]
 80080dc:	f000 f90a 	bl	80082f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008158 <pvPortMalloc+0x18c>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <pvPortMalloc+0x18c>)
 80080ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008158 <pvPortMalloc+0x18c>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008160 <pvPortMalloc+0x194>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d203      	bcs.n	8008102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080fa:	4b17      	ldr	r3, [pc, #92]	@ (8008158 <pvPortMalloc+0x18c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a18      	ldr	r2, [pc, #96]	@ (8008160 <pvPortMalloc+0x194>)
 8008100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b13      	ldr	r3, [pc, #76]	@ (8008154 <pvPortMalloc+0x188>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	431a      	orrs	r2, r3
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008116:	4b13      	ldr	r3, [pc, #76]	@ (8008164 <pvPortMalloc+0x198>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3301      	adds	r3, #1
 800811c:	4a11      	ldr	r2, [pc, #68]	@ (8008164 <pvPortMalloc+0x198>)
 800811e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008120:	f7fe fbde 	bl	80068e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <pvPortMalloc+0x17a>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60fb      	str	r3, [r7, #12]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <pvPortMalloc+0x176>
	return pvReturn;
 8008146:	69fb      	ldr	r3, [r7, #28]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3728      	adds	r7, #40	@ 0x28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	2406485c 	.word	0x2406485c
 8008154:	24064870 	.word	0x24064870
 8008158:	24064860 	.word	0x24064860
 800815c:	24064854 	.word	0x24064854
 8008160:	24064864 	.word	0x24064864
 8008164:	24064868 	.word	0x24064868

08008168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d04f      	beq.n	800821a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800817a:	2308      	movs	r3, #8
 800817c:	425b      	negs	r3, r3
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4413      	add	r3, r2
 8008182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b25      	ldr	r3, [pc, #148]	@ (8008224 <vPortFree+0xbc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <vPortFree+0x46>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <vPortFree+0x66>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	60bb      	str	r3, [r7, #8]
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	e7fd      	b.n	80081ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4b14      	ldr	r3, [pc, #80]	@ (8008224 <vPortFree+0xbc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01e      	beq.n	800821a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d11a      	bne.n	800821a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <vPortFree+0xbc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	43db      	mvns	r3, r3
 80081ee:	401a      	ands	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081f4:	f7fe fb66 	bl	80068c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <vPortFree+0xc0>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4413      	add	r3, r2
 8008202:	4a09      	ldr	r2, [pc, #36]	@ (8008228 <vPortFree+0xc0>)
 8008204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008206:	6938      	ldr	r0, [r7, #16]
 8008208:	f000 f874 	bl	80082f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <vPortFree+0xc4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3301      	adds	r3, #1
 8008212:	4a06      	ldr	r2, [pc, #24]	@ (800822c <vPortFree+0xc4>)
 8008214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008216:	f7fe fb63 	bl	80068e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800821a:	bf00      	nop
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	24064870 	.word	0x24064870
 8008228:	24064860 	.word	0x24064860
 800822c:	2406486c 	.word	0x2406486c

08008230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008236:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800823a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800823c:	4b27      	ldr	r3, [pc, #156]	@ (80082dc <prvHeapInit+0xac>)
 800823e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3307      	adds	r3, #7
 800824e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0307 	bic.w	r3, r3, #7
 8008256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	4a1f      	ldr	r2, [pc, #124]	@ (80082dc <prvHeapInit+0xac>)
 8008260:	4413      	add	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008268:	4a1d      	ldr	r2, [pc, #116]	@ (80082e0 <prvHeapInit+0xb0>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800826e:	4b1c      	ldr	r3, [pc, #112]	@ (80082e0 <prvHeapInit+0xb0>)
 8008270:	2200      	movs	r2, #0
 8008272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4413      	add	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800827c:	2208      	movs	r2, #8
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <prvHeapInit+0xb4>)
 8008290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008292:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <prvHeapInit+0xb4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2200      	movs	r2, #0
 8008298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800829a:	4b12      	ldr	r3, [pc, #72]	@ (80082e4 <prvHeapInit+0xb4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082b0:	4b0c      	ldr	r3, [pc, #48]	@ (80082e4 <prvHeapInit+0xb4>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4a0a      	ldr	r2, [pc, #40]	@ (80082e8 <prvHeapInit+0xb8>)
 80082be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	4a09      	ldr	r2, [pc, #36]	@ (80082ec <prvHeapInit+0xbc>)
 80082c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082c8:	4b09      	ldr	r3, [pc, #36]	@ (80082f0 <prvHeapInit+0xc0>)
 80082ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082ce:	601a      	str	r2, [r3, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	24060c54 	.word	0x24060c54
 80082e0:	24064854 	.word	0x24064854
 80082e4:	2406485c 	.word	0x2406485c
 80082e8:	24064864 	.word	0x24064864
 80082ec:	24064860 	.word	0x24064860
 80082f0:	24064870 	.word	0x24064870

080082f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082fc:	4b28      	ldr	r3, [pc, #160]	@ (80083a0 <prvInsertBlockIntoFreeList+0xac>)
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e002      	b.n	8008308 <prvInsertBlockIntoFreeList+0x14>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	429a      	cmp	r2, r3
 8008310:	d8f7      	bhi.n	8008302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d108      	bne.n	8008336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	441a      	add	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	441a      	add	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d118      	bne.n	800837c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b15      	ldr	r3, [pc, #84]	@ (80083a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d00d      	beq.n	8008372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	441a      	add	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e008      	b.n	8008384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008372:	4b0c      	ldr	r3, [pc, #48]	@ (80083a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	e003      	b.n	8008384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d002      	beq.n	8008392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	24064854 	.word	0x24064854
 80083a4:	2406485c 	.word	0x2406485c

080083a8 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 80083ba:	f004 f97f 	bl	800c6bc <touchgfx_components_init>
    touchgfx_init();
 80083be:	f004 f953 	bl	800c668 <touchgfx_init>
}
 80083c2:	bf00      	nop
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80083ce:	f004 f97d 	bl	800c6cc <touchgfx_taskEntry>
}
 80083d2:	bf00      	nop
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
    {
 80083e4:	4a04      	ldr	r2, [pc, #16]	@ (80083f8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	601a      	str	r2, [r3, #0]
    }
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	0801dcdc 	.word	0x0801dcdc

080083fc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
    }
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff ffe9 	bl	80083dc <_ZN8touchgfx12FontProviderD1Ev>
 800840a:	2104      	movs	r1, #4
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f013 fe40 	bl	801c092 <_ZdlPvj>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8008428:	887b      	ldrh	r3, [r7, #2]
 800842a:	2b02      	cmp	r3, #2
 800842c:	d010      	beq.n	8008450 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800842e:	2b02      	cmp	r3, #2
 8008430:	dc13      	bgt.n	800845a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8008436:	2b01      	cmp	r3, #1
 8008438:	d005      	beq.n	8008446 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800843a:	e00e      	b.n	800845a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800843c:	f002 fb1e 	bl	800aa7c <_ZN17TypedTextDatabase8getFontsEv>
 8008440:	4603      	mov	r3, r0
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	e00a      	b.n	800845c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8008446:	f002 fb19 	bl	800aa7c <_ZN17TypedTextDatabase8getFontsEv>
 800844a:	4603      	mov	r3, r0
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	e005      	b.n	800845c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8008450:	f002 fb14 	bl	800aa7c <_ZN17TypedTextDatabase8getFontsEv>
 8008454:	4603      	mov	r3, r0
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	e000      	b.n	800845c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800845a:	2300      	movs	r3, #0
    }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	4a05      	ldr	r2, [pc, #20]	@ (8008484 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff ffb1 	bl	80083dc <_ZN8touchgfx12FontProviderD1Ev>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	0801dcc8 	.word	0x0801dcc8

08008488 <_ZN23ApplicationFontProviderD0Ev>:
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ffe7 	bl	8008464 <_ZN23ApplicationFontProviderD1Ev>
 8008496:	2104      	movs	r1, #4
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f013 fdfa 	bl	801c092 <_ZdlPvj>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
    {
 80084b0:	4a04      	ldr	r2, [pc, #16]	@ (80084c4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
    }
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	0801e070 	.word	0x0801e070

080084c8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
    }
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ffe9 	bl	80084a8 <_ZN8touchgfx4FontD1Ev>
 80084d6:	2114      	movs	r1, #20
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f013 fdda 	bl	801c092 <_ZdlPvj>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4618      	mov	r0, r3
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80084e8:	b590      	push	{r4, r7, lr}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80084f4:	887b      	ldrh	r3, [r7, #2]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e010      	b.n	8008520 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	681c      	ldr	r4, [r3, #0]
 800850e:	f107 030f 	add.w	r3, r7, #15
 8008512:	f107 0210 	add.w	r2, r7, #16
 8008516:	8879      	ldrh	r1, [r7, #2]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	47a0      	blx	r4
 800851c:	6178      	str	r0, [r7, #20]
        return glyph;
 800851e:	697b      	ldr	r3, [r7, #20]
    }
 8008520:	4618      	mov	r0, r3
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	bd90      	pop	{r4, r7, pc}

08008528 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	89db      	ldrh	r3, [r3, #14]
    }
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	88db      	ldrh	r3, [r3, #6]
    }
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	889b      	ldrh	r3, [r3, #4]
    }
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7a9b      	ldrb	r3, [r3, #10]
 8008594:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008598:	b2db      	uxtb	r3, r3
    }
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7a9b      	ldrb	r3, [r3, #10]
 80085b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80085b6:	b2db      	uxtb	r3, r3
    }
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
    {
        return false;
 80085cc:	2300      	movs	r3, #0
    }
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	ee07 3a90 	vmov	s15, r3
    }
 80085ea:	eeb0 0a67 	vmov.f32	s0, s15
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	4a05      	ldr	r2, [pc, #20]	@ (8008618 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff ff4d 	bl	80084a8 <_ZN8touchgfx4FontD1Ev>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0801e9ac 	.word	0x0801e9ac

0800861c <_ZN8touchgfx9ConstFontD0Ev>:
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff ffe7 	bl	80085f8 <_ZN8touchgfx9ConstFontD1Ev>
 800862a:	211c      	movs	r1, #28
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f013 fd30 	bl	801c092 <_ZdlPvj>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	4a05      	ldr	r2, [pc, #20]	@ (800865c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff ffd3 	bl	80085f8 <_ZN8touchgfx9ConstFontD1Ev>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	0801dcf0 	.word	0x0801dcf0

08008660 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff ffe7 	bl	800863c <_ZN8touchgfx13GeneratedFontD1Ev>
 800866e:	212c      	movs	r1, #44	@ 0x2c
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f013 fd0e 	bl	801c092 <_ZdlPvj>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08e      	sub	sp, #56	@ 0x38
 80086b4:	af0a      	add	r7, sp, #40	@ 0x28
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4611      	mov	r1, r2
 80086bc:	461a      	mov	r2, r3
 80086be:	460b      	mov	r3, r1
 80086c0:	80fb      	strh	r3, [r7, #6]
 80086c2:	4613      	mov	r3, r2
 80086c4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	88b9      	ldrh	r1, [r7, #4]
 80086ca:	88fa      	ldrh	r2, [r7, #6]
 80086cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80086d0:	9308      	str	r3, [sp, #32]
 80086d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80086d4:	9307      	str	r3, [sp, #28]
 80086d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80086da:	9306      	str	r3, [sp, #24]
 80086dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086e0:	9305      	str	r3, [sp, #20]
 80086e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086f2:	9302      	str	r3, [sp, #8]
 80086f4:	7f3b      	ldrb	r3, [r7, #28]
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	8b3b      	ldrh	r3, [r7, #24]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	460b      	mov	r3, r1
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	f008 f848 	bl	8010794 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008704:	4a09      	ldr	r2, [pc, #36]	@ (800872c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800870e:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008714:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800871a:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008720:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	0801dcf0 	.word	0x0801dcf0

08008730 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	889b      	ldrh	r3, [r3, #4]
 8008744:	0adb      	lsrs	r3, r3, #11
 8008746:	b29b      	uxth	r3, r3
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4413      	add	r3, r2
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008762:	b480      	push	{r7}
 8008764:	b089      	sub	sp, #36	@ 0x24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	460b      	mov	r3, r1
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7b1b      	ldrb	r3, [r3, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800877e:	2300      	movs	r3, #0
 8008780:	e031      	b.n	80087e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a1a      	ldr	r2, [r3, #32]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	7b5b      	ldrb	r3, [r3, #13]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	b21b      	sxth	r3, r3
 8008792:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008796:	b219      	sxth	r1, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	7adb      	ldrb	r3, [r3, #11]
 800879c:	b21b      	sxth	r3, r3
 800879e:	430b      	orrs	r3, r1
 80087a0:	b21b      	sxth	r3, r3
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7b1b      	ldrb	r3, [r3, #12]
 80087ae:	837b      	strh	r3, [r7, #26]
 80087b0:	e013      	b.n	80087da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	897a      	ldrh	r2, [r7, #10]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d103      	bne.n	80087c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80087c2:	e010      	b.n	80087e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	897a      	ldrh	r2, [r7, #10]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d309      	bcc.n	80087e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80087ce:	8b7b      	ldrh	r3, [r7, #26]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	837b      	strh	r3, [r7, #26]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	3304      	adds	r3, #4
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	8b7b      	ldrh	r3, [r7, #26]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e8      	bne.n	80087b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80087e0:	e000      	b.n	80087e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80087e2:	bf00      	nop
        }
    }
    return 0;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3724      	adds	r7, #36	@ 0x24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	4801      	ldr	r0, [pc, #4]	@ (8008800 <__tcf_0+0xc>)
 80087fa:	f7ff ff1f 	bl	800863c <_ZN8touchgfx13GeneratedFontD1Ev>
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	24064874 	.word	0x24064874

08008804 <_Z23getFont_verdana_10_4bppv>:
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08e      	sub	sp, #56	@ 0x38
 8008808:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800880a:	4b21      	ldr	r3, [pc, #132]	@ (8008890 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f3bf 8f5b 	dmb	ish
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d030      	beq.n	8008886 <_Z23getFont_verdana_10_4bppv+0x82>
 8008824:	481a      	ldr	r0, [pc, #104]	@ (8008890 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008826:	f013 fc36 	bl	801c096 <__cxa_guard_acquire>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d025      	beq.n	8008886 <_Z23getFont_verdana_10_4bppv+0x82>
 800883a:	2300      	movs	r3, #0
 800883c:	930c      	str	r3, [sp, #48]	@ 0x30
 800883e:	2300      	movs	r3, #0
 8008840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008842:	2300      	movs	r3, #0
 8008844:	930a      	str	r3, [sp, #40]	@ 0x28
 8008846:	233f      	movs	r3, #63	@ 0x3f
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	4b12      	ldr	r3, [pc, #72]	@ (8008894 <_Z23getFont_verdana_10_4bppv+0x90>)
 800884c:	9308      	str	r3, [sp, #32]
 800884e:	4b12      	ldr	r3, [pc, #72]	@ (8008898 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008850:	9307      	str	r3, [sp, #28]
 8008852:	2300      	movs	r3, #0
 8008854:	9306      	str	r3, [sp, #24]
 8008856:	2300      	movs	r3, #0
 8008858:	9305      	str	r3, [sp, #20]
 800885a:	2301      	movs	r3, #1
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	2304      	movs	r3, #4
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	2300      	movs	r3, #0
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	2300      	movs	r3, #0
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	230a      	movs	r3, #10
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	230a      	movs	r3, #10
 8008870:	2201      	movs	r2, #1
 8008872:	490a      	ldr	r1, [pc, #40]	@ (800889c <_Z23getFont_verdana_10_4bppv+0x98>)
 8008874:	480a      	ldr	r0, [pc, #40]	@ (80088a0 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8008876:	f7ff ff1b 	bl	80086b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800887a:	480a      	ldr	r0, [pc, #40]	@ (80088a4 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800887c:	f013 fc56 	bl	801c12c <atexit>
 8008880:	4803      	ldr	r0, [pc, #12]	@ (8008890 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008882:	f013 fc14 	bl	801c0ae <__cxa_guard_release>
    return verdana_10_4bpp;
 8008886:	4b06      	ldr	r3, [pc, #24]	@ (80088a0 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8008888:	4618      	mov	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	240648a0 	.word	0x240648a0
 8008894:	0801eee0 	.word	0x0801eee0
 8008898:	0801eeec 	.word	0x0801eeec
 800889c:	0801eeb0 	.word	0x0801eeb0
 80088a0:	24064874 	.word	0x24064874
 80088a4:	080087f5 	.word	0x080087f5

080088a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	4801      	ldr	r0, [pc, #4]	@ (80088b4 <__tcf_0+0xc>)
 80088ae:	f7ff fec5 	bl	800863c <_ZN8touchgfx13GeneratedFontD1Ev>
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	240648a4 	.word	0x240648a4

080088b8 <_Z23getFont_verdana_20_4bppv>:
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08e      	sub	sp, #56	@ 0x38
 80088bc:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80088be:	4b21      	ldr	r3, [pc, #132]	@ (8008944 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f3bf 8f5b 	dmb	ish
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d030      	beq.n	800893a <_Z23getFont_verdana_20_4bppv+0x82>
 80088d8:	481a      	ldr	r0, [pc, #104]	@ (8008944 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80088da:	f013 fbdc 	bl	801c096 <__cxa_guard_acquire>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bf14      	ite	ne
 80088e4:	2301      	movne	r3, #1
 80088e6:	2300      	moveq	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d025      	beq.n	800893a <_Z23getFont_verdana_20_4bppv+0x82>
 80088ee:	2300      	movs	r3, #0
 80088f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80088f2:	2300      	movs	r3, #0
 80088f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f6:	2300      	movs	r3, #0
 80088f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088fa:	233f      	movs	r3, #63	@ 0x3f
 80088fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fe:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <_Z23getFont_verdana_20_4bppv+0x90>)
 8008900:	9308      	str	r3, [sp, #32]
 8008902:	4b12      	ldr	r3, [pc, #72]	@ (800894c <_Z23getFont_verdana_20_4bppv+0x94>)
 8008904:	9307      	str	r3, [sp, #28]
 8008906:	2300      	movs	r3, #0
 8008908:	9306      	str	r3, [sp, #24]
 800890a:	2300      	movs	r3, #0
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	2301      	movs	r3, #1
 8008910:	9304      	str	r3, [sp, #16]
 8008912:	2304      	movs	r3, #4
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	2300      	movs	r3, #0
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	2300      	movs	r3, #0
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	2314      	movs	r3, #20
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	2314      	movs	r3, #20
 8008924:	2201      	movs	r2, #1
 8008926:	490a      	ldr	r1, [pc, #40]	@ (8008950 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008928:	480a      	ldr	r0, [pc, #40]	@ (8008954 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800892a:	f7ff fec1 	bl	80086b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800892e:	480a      	ldr	r0, [pc, #40]	@ (8008958 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8008930:	f013 fbfc 	bl	801c12c <atexit>
 8008934:	4803      	ldr	r0, [pc, #12]	@ (8008944 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008936:	f013 fbba 	bl	801c0ae <__cxa_guard_release>
    return verdana_20_4bpp;
 800893a:	4b06      	ldr	r3, [pc, #24]	@ (8008954 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800893c:	4618      	mov	r0, r3
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	240648d0 	.word	0x240648d0
 8008948:	0801eee4 	.word	0x0801eee4
 800894c:	0801eef0 	.word	0x0801eef0
 8008950:	0801eec0 	.word	0x0801eec0
 8008954:	240648a4 	.word	0x240648a4
 8008958:	080088a9 	.word	0x080088a9

0800895c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
 8008960:	4801      	ldr	r0, [pc, #4]	@ (8008968 <__tcf_0+0xc>)
 8008962:	f7ff fe6b 	bl	800863c <_ZN8touchgfx13GeneratedFontD1Ev>
 8008966:	bd80      	pop	{r7, pc}
 8008968:	240648d4 	.word	0x240648d4

0800896c <_Z23getFont_verdana_40_4bppv>:
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08e      	sub	sp, #56	@ 0x38
 8008970:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008972:	4b21      	ldr	r3, [pc, #132]	@ (80089f8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f3bf 8f5b 	dmb	ish
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf0c      	ite	eq
 8008982:	2301      	moveq	r3, #1
 8008984:	2300      	movne	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d030      	beq.n	80089ee <_Z23getFont_verdana_40_4bppv+0x82>
 800898c:	481a      	ldr	r0, [pc, #104]	@ (80089f8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800898e:	f013 fb82 	bl	801c096 <__cxa_guard_acquire>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	bf14      	ite	ne
 8008998:	2301      	movne	r3, #1
 800899a:	2300      	moveq	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d025      	beq.n	80089ee <_Z23getFont_verdana_40_4bppv+0x82>
 80089a2:	2300      	movs	r3, #0
 80089a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80089a6:	2300      	movs	r3, #0
 80089a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089aa:	2300      	movs	r3, #0
 80089ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ae:	233f      	movs	r3, #63	@ 0x3f
 80089b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b2:	4b12      	ldr	r3, [pc, #72]	@ (80089fc <_Z23getFont_verdana_40_4bppv+0x90>)
 80089b4:	9308      	str	r3, [sp, #32]
 80089b6:	4b12      	ldr	r3, [pc, #72]	@ (8008a00 <_Z23getFont_verdana_40_4bppv+0x94>)
 80089b8:	9307      	str	r3, [sp, #28]
 80089ba:	2300      	movs	r3, #0
 80089bc:	9306      	str	r3, [sp, #24]
 80089be:	2300      	movs	r3, #0
 80089c0:	9305      	str	r3, [sp, #20]
 80089c2:	2301      	movs	r3, #1
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	2304      	movs	r3, #4
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	2328      	movs	r3, #40	@ 0x28
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	2328      	movs	r3, #40	@ 0x28
 80089d8:	2201      	movs	r2, #1
 80089da:	490a      	ldr	r1, [pc, #40]	@ (8008a04 <_Z23getFont_verdana_40_4bppv+0x98>)
 80089dc:	480a      	ldr	r0, [pc, #40]	@ (8008a08 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80089de:	f7ff fe67 	bl	80086b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80089e2:	480a      	ldr	r0, [pc, #40]	@ (8008a0c <_Z23getFont_verdana_40_4bppv+0xa0>)
 80089e4:	f013 fba2 	bl	801c12c <atexit>
 80089e8:	4803      	ldr	r0, [pc, #12]	@ (80089f8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80089ea:	f013 fb60 	bl	801c0ae <__cxa_guard_release>
    return verdana_40_4bpp;
 80089ee:	4b06      	ldr	r3, [pc, #24]	@ (8008a08 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	24064900 	.word	0x24064900
 80089fc:	0801eee8 	.word	0x0801eee8
 8008a00:	0801eef4 	.word	0x0801eef4
 8008a04:	0801eed0 	.word	0x0801eed0
 8008a08:	240648d4 	.word	0x240648d4
 8008a0c:	0800895d 	.word	0x0800895d

08008a10 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
    {
    }
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
    {
    }
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
    {
 8008ab4:	4a04      	ldr	r2, [pc, #16]	@ (8008ac8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	601a      	str	r2, [r3, #0]
    }
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	0801de78 	.word	0x0801de78

08008acc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
    }
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ffe9 	bl	8008aac <_ZN8touchgfx15UIEventListenerD1Ev>
 8008ada:	2104      	movs	r1, #4
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f013 fad8 	bl	801c092 <_ZdlPvj>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
    {
    }
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8008b2a:	6810      	ldr	r0, [r2, #0]
 8008b2c:	6851      	ldr	r1, [r2, #4]
 8008b2e:	c303      	stmia	r3!, {r0, r1}
    }
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f006 fd22 	bl	800f592 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    {
 8008b60:	4a04      	ldr	r2, [pc, #16]	@ (8008b74 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	601a      	str	r2, [r3, #0]
    }
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	0801de60 	.word	0x0801de60

08008b78 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
    }
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff ffe9 	bl	8008b58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8008b86:	2104      	movs	r1, #4
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f013 fa82 	bl	801c092 <_ZdlPvj>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
    {
        return instance;
 8008b9c:	4b03      	ldr	r3, [pc, #12]	@ (8008bac <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
    }
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	24065a50 	.word	0x24065a50

08008bb0 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d008      	beq.n	8008bd2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8008bc0:	4b08      	ldr	r3, [pc, #32]	@ (8008be4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8008bca:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bd0:	e002      	b.n	8008bd8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8008bd2:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
    }
 8008bd8:	4618      	mov	r0, r3
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	24065a50 	.word	0x24065a50

08008be8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8008bf0:	4a07      	ldr	r2, [pc, #28]	@ (8008c10 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	605a      	str	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	721a      	strb	r2, [r3, #8]
    {
    }
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	0801de3c 	.word	0x0801de3c

08008c14 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
    {
 8008c1c:	4a04      	ldr	r2, [pc, #16]	@ (8008c30 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
    }
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	0801de3c 	.word	0x0801de3c

08008c34 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
    }
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff ffe9 	bl	8008c14 <_ZN8touchgfx10TransitionD1Ev>
 8008c42:	210c      	movs	r1, #12
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f013 fa24 	bl	801c092 <_ZdlPvj>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
    {
    }
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
    {
    }
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
    {
    }
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8008c98:	f006 fc56 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	323c      	adds	r2, #60	@ 0x3c
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	4790      	blx	r2
    }
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
    }
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	4a05      	ldr	r2, [pc, #20]	@ (8008cec <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff fee5 	bl	8008aac <_ZN8touchgfx15UIEventListenerD1Ev>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	0801e8f0 	.word	0x0801e8f0

08008cf0 <_ZN8touchgfx11ApplicationD0Ev>:
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff ffe7 	bl	8008ccc <_ZN8touchgfx11ApplicationD1Ev>
 8008cfe:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f013 f9c5 	bl	801c092 <_ZdlPvj>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f006 fcd8 	bl	800f6d4 <_ZN8touchgfx11ApplicationC1Ev>
 8008d24:	4a09      	ldr	r2, [pc, #36]	@ (8008d4c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	@ (8008d50 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8008d3e:	6013      	str	r3, [r2, #0]
    }
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	0801dde8 	.word	0x0801dde8
 8008d50:	24065a9c 	.word	0x24065a9c

08008d54 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f804 	bl	8008d6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00f      	beq.n	8008d9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	330c      	adds	r3, #12
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3308      	adds	r3, #8
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	601a      	str	r2, [r3, #0]
    }
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	4a05      	ldr	r2, [pc, #20]	@ (8008e04 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff ff69 	bl	8008ccc <_ZN8touchgfx11ApplicationD1Ev>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	0801dde8 	.word	0x0801dde8

08008e08 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff ffe7 	bl	8008de4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008e16:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f013 f939 	bl	801c092 <_ZdlPvj>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	4a08      	ldr	r2, [pc, #32]	@ (8008e58 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fc61 	bl	8009708 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ffcb 	bl	8008de4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0801dd7c 	.word	0x0801dd7c

08008e5c <_ZN23FrontendApplicationBaseD0Ev>:
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ffe1 	bl	8008e2c <_ZN23FrontendApplicationBaseD1Ev>
 8008e6a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f013 f90f 	bl	801c092 <_ZdlPvj>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f886 	bl	8008f98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	721a      	strb	r2, [r3, #8]
    }
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	605a      	str	r2, [r3, #4]
    }
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff ff1a 	bl	8008d14 <_ZN8touchgfx14MVPApplicationC1Ev>
 8008ee0:	4a18      	ldr	r2, [pc, #96]	@ (8008f44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f8ef 	bl	80090d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008f02:	f7ff fe49 	bl	8008b98 <_ZN8touchgfx3HAL11getInstanceEv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	3208      	adds	r2, #8
 8008f0c:	6812      	ldr	r2, [r2, #0]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8008f14:	f7ff fe4c 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f00d ff95 	bl	8016e4a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8008f20:	f7ff fe46 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 8008f24:	4603      	mov	r3, r0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f00e f806 	bl	8016f38 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8008f2c:	f7ff fe40 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 8008f30:	4603      	mov	r3, r0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f00e f80c 	bl	8016f50 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	0801dd7c 	.word	0x0801dd7c

08008f48 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff ffe9 	bl	8008f48 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	3208      	adds	r2, #8
 8008f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8008f98:	b590      	push	{r4, r7, lr}
 8008f9a:	b089      	sub	sp, #36	@ 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 8008fa6:	4b10      	ldr	r3, [pc, #64]	@ (8008fe8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	2300      	movs	r3, #0
 8008fac:	61fb      	str	r3, [r7, #28]
 8008fae:	f107 0008 	add.w	r0, r7, #8
 8008fb2:	f107 0318 	add.w	r3, r7, #24
 8008fb6:	cb0c      	ldmia	r3, {r2, r3}
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	f000 f8a5 	bl	8009108 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7ff ffcb 	bl	8008f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8008fca:	f107 0308 	add.w	r3, r7, #8
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fb9a 	bl	8009708 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8008fe0:	bf00      	nop
 8008fe2:	3724      	adds	r7, #36	@ 0x24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd90      	pop	{r4, r7, pc}
 8008fe8:	08008fed 	.word	0x08008fed

08008fec <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	4b04      	ldr	r3, [pc, #16]	@ (800901c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800900c:	4804      	ldr	r0, [pc, #16]	@ (8009020 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800900e:	f000 f8ad 	bl	800916c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	24065a90 	.word	0x24065a90
 8009020:	24065a8c 	.word	0x24065a8c

08009024 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b089      	sub	sp, #36	@ 0x24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 8009032:	4b10      	ldr	r3, [pc, #64]	@ (8009074 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	f107 0008 	add.w	r0, r7, #8
 800903e:	f107 0318 	add.w	r3, r7, #24
 8009042:	cb0c      	ldmia	r3, {r2, r3}
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	f000 f85f 	bl	8009108 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800904a:	f107 0308 	add.w	r3, r7, #8
 800904e:	4619      	mov	r1, r3
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff ff85 	bl	8008f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fb54 	bl	8009708 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800906c:	bf00      	nop
 800906e:	3724      	adds	r7, #36	@ 0x24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}
 8009074:	08009079 	.word	0x08009079

08009078 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af02      	add	r7, sp, #8
 800907e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800908c:	461a      	mov	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	4b04      	ldr	r3, [pc, #16]	@ (80090a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8009098:	4804      	ldr	r0, [pc, #16]	@ (80090ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800909a:	f000 f97f 	bl	800939c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	24065a90 	.word	0x24065a90
 80090ac:	24065a8c 	.word	0x24065a8c

080090b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	4a04      	ldr	r2, [pc, #16]	@ (80090cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	0801de60 	.word	0x0801de60

080090d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff ffe8 	bl	80090b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80090e0:	4a08      	ldr	r2, [pc, #32]	@ (8009104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	605a      	str	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	609a      	str	r2, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	60da      	str	r2, [r3, #12]
    {
    }
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	0801ddd0 	.word	0x0801ddd0

08009108 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4639      	mov	r1, r7
 8009114:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff ffc8 	bl	80090b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8009120:	4a08      	ldr	r2, [pc, #32]	@ (8009144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	605a      	str	r2, [r3, #4]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3308      	adds	r3, #8
 8009130:	463a      	mov	r2, r7
 8009132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009136:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	0801ddd0 	.word	0x0801ddd0

08009148 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fd48 	bl	8008be8 <_ZN8touchgfx10TransitionC1Ev>
 8009158:	4a03      	ldr	r2, [pc, #12]	@ (8009168 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	0801dd58 	.word	0x0801dd58

0800916c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800916c:	b590      	push	{r4, r7, lr}
 800916e:	b08f      	sub	sp, #60	@ 0x3c
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3320      	adds	r3, #32
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	4603      	mov	r3, r0
 800918e:	2bdb      	cmp	r3, #219	@ 0xdb
 8009190:	d805      	bhi.n	800919e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8009192:	4b7d      	ldr	r3, [pc, #500]	@ (8009388 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8009194:	4a7d      	ldr	r2, [pc, #500]	@ (800938c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8009196:	21a3      	movs	r1, #163	@ 0xa3
 8009198:	487d      	ldr	r0, [pc, #500]	@ (8009390 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800919a:	f012 ffa9 	bl	801c0f0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3320      	adds	r3, #32
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b0f      	cmp	r3, #15
 80091b4:	d805      	bhi.n	80091c2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 80091b6:	4b77      	ldr	r3, [pc, #476]	@ (8009394 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80091b8:	4a74      	ldr	r2, [pc, #464]	@ (800938c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80091ba:	21a4      	movs	r1, #164	@ 0xa4
 80091bc:	4874      	ldr	r0, [pc, #464]	@ (8009390 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80091be:	f012 ff97 	bl	801c0f0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3320      	adds	r3, #32
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b0b      	cmp	r3, #11
 80091d8:	d805      	bhi.n	80091e6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 80091da:	4b6f      	ldr	r3, [pc, #444]	@ (8009398 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80091dc:	4a6b      	ldr	r2, [pc, #428]	@ (800938c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80091de:	21a5      	movs	r1, #165	@ 0xa5
 80091e0:	486b      	ldr	r0, [pc, #428]	@ (8009390 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80091e2:	f012 ff85 	bl	801c0f0 <__assert_func>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80091f2:	f006 f9a9 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 80091f6:	4603      	mov	r3, r0
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fc9f 	bl	8008b3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d008      	beq.n	8009218 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	330c      	adds	r3, #12
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
    if (*currentTrans)
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
    if (*currentScreen)
 8009230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d008      	beq.n	800924a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4610      	mov	r0, r2
 8009248:	4798      	blx	r3
    if (*currentPresenter)
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d008      	beq.n	8009264 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3304      	adds	r3, #4
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
    if (*currentScreen)
 8009264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d007      	beq.n	800927c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
    if (*currentPresenter)
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4610      	mov	r0, r2
 8009294:	4798      	blx	r3
}
 8009296:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 f994 	bl	80095cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80092a4:	4603      	mov	r3, r0
 80092a6:	4619      	mov	r1, r3
 80092a8:	200c      	movs	r0, #12
 80092aa:	f7ff fbb1 	bl	8008a10 <_ZnwjPv>
 80092ae:	4604      	mov	r4, r0
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff ff49 	bl	8009148 <_ZN8touchgfx12NoTransitionC1Ev>
 80092b6:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f997 	bl	80095f2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 80092c4:	4603      	mov	r3, r0
 80092c6:	4619      	mov	r1, r3
 80092c8:	20dc      	movs	r0, #220	@ 0xdc
 80092ca:	f7ff fba1 	bl	8008a10 <_ZnwjPv>
 80092ce:	4604      	mov	r4, r0
 80092d0:	4620      	mov	r0, r4
 80092d2:	f001 fe21 	bl	800af18 <_ZN10screenViewC1Ev>
 80092d6:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f99a 	bl	8009618 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 80092e4:	4603      	mov	r3, r0
 80092e6:	4619      	mov	r1, r3
 80092e8:	2010      	movs	r0, #16
 80092ea:	f7ff fb91 	bl	8008a10 <_ZnwjPv>
 80092ee:	4604      	mov	r4, r0
 80092f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092f2:	4620      	mov	r0, r4
 80092f4:	f001 fdba 	bl	800ae6c <_ZN15screenPresenterC1ER10screenView>
 80092f8:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092fe:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009304:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800930a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	3304      	adds	r3, #4
 8009316:	e000      	b.n	800931a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8009318:	2300      	movs	r3, #0
 800931a:	4619      	mov	r1, r3
 800931c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800931e:	f7ff fd53 	bl	8008dc8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8009322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009324:	3304      	adds	r3, #4
 8009326:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fdc0 	bl	8008eae <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f983 	bl	800963e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	61fb      	str	r3, [r7, #28]
 800933c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009342:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	330c      	adds	r3, #12
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	69f8      	ldr	r0, [r7, #28]
 800934e:	4798      	blx	r3
    newPresenter->activate();
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69b8      	ldr	r0, [r7, #24]
 8009358:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800935a:	6979      	ldr	r1, [r7, #20]
 800935c:	69f8      	ldr	r0, [r7, #28]
 800935e:	f007 fdb7 	bl	8010ed0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3310      	adds	r3, #16
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6978      	ldr	r0, [r7, #20]
 800936c:	4798      	blx	r3
    newTransition->invalidate();
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	4798      	blx	r3
}
 800937a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800937c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800937e:	4618      	mov	r0, r3
 8009380:	373c      	adds	r7, #60	@ 0x3c
 8009382:	46bd      	mov	sp, r7
 8009384:	bd90      	pop	{r4, r7, pc}
 8009386:	bf00      	nop
 8009388:	0801d228 	.word	0x0801d228
 800938c:	0801d2b8 	.word	0x0801d2b8
 8009390:	0801d388 	.word	0x0801d388
 8009394:	0801d3cc 	.word	0x0801d3cc
 8009398:	0801d470 	.word	0x0801d470

0800939c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b08f      	sub	sp, #60	@ 0x3c
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3320      	adds	r3, #32
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	4603      	mov	r3, r0
 80093be:	2bdb      	cmp	r3, #219	@ 0xdb
 80093c0:	d805      	bhi.n	80093ce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80093c2:	4b7d      	ldr	r3, [pc, #500]	@ (80095b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 80093c4:	4a7d      	ldr	r2, [pc, #500]	@ (80095bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80093c6:	21a3      	movs	r1, #163	@ 0xa3
 80093c8:	487d      	ldr	r0, [pc, #500]	@ (80095c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80093ca:	f012 fe91 	bl	801c0f0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3320      	adds	r3, #32
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b0f      	cmp	r3, #15
 80093e4:	d805      	bhi.n	80093f2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 80093e6:	4b77      	ldr	r3, [pc, #476]	@ (80095c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80093e8:	4a74      	ldr	r2, [pc, #464]	@ (80095bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80093ea:	21a4      	movs	r1, #164	@ 0xa4
 80093ec:	4874      	ldr	r0, [pc, #464]	@ (80095c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80093ee:	f012 fe7f 	bl	801c0f0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3320      	adds	r3, #32
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	4603      	mov	r3, r0
 8009406:	2b0b      	cmp	r3, #11
 8009408:	d805      	bhi.n	8009416 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 800940a:	4b6f      	ldr	r3, [pc, #444]	@ (80095c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800940c:	4a6b      	ldr	r2, [pc, #428]	@ (80095bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800940e:	21a5      	movs	r1, #165	@ 0xa5
 8009410:	486b      	ldr	r0, [pc, #428]	@ (80095c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8009412:	f012 fe6d 	bl	801c0f0 <__assert_func>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	627b      	str	r3, [r7, #36]	@ 0x24
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8009422:	f006 f891 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 8009426:	4603      	mov	r3, r0
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fb87 	bl	8008b3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d008      	beq.n	8009448 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
    if (*currentTrans)
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d007      	beq.n	8009460 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4610      	mov	r0, r2
 800945e:	4798      	blx	r3
    if (*currentScreen)
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d008      	beq.n	800947a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4610      	mov	r0, r2
 8009478:	4798      	blx	r3
    if (*currentPresenter)
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d008      	beq.n	8009494 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3304      	adds	r3, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
    if (*currentScreen)
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d007      	beq.n	80094ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
    if (*currentPresenter)
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d008      	beq.n	80094c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4610      	mov	r0, r2
 80094c4:	4798      	blx	r3
}
 80094c6:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	2100      	movs	r1, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f87c 	bl	80095cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4619      	mov	r1, r3
 80094d8:	200c      	movs	r0, #12
 80094da:	f7ff fa99 	bl	8008a10 <_ZnwjPv>
 80094de:	4604      	mov	r4, r0
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7ff fe31 	bl	8009148 <_ZN8touchgfx12NoTransitionC1Ev>
 80094e6:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f8b3 	bl	800965a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80094f4:	4603      	mov	r3, r0
 80094f6:	4619      	mov	r1, r3
 80094f8:	20dc      	movs	r0, #220	@ 0xdc
 80094fa:	f7ff fa89 	bl	8008a10 <_ZnwjPv>
 80094fe:	4604      	mov	r4, r0
 8009500:	4620      	mov	r0, r4
 8009502:	f001 fc55 	bl	800adb0 <_ZN11Screen1ViewC1Ev>
 8009506:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f8b6 	bl	8009680 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8009514:	4603      	mov	r3, r0
 8009516:	4619      	mov	r1, r3
 8009518:	2010      	movs	r0, #16
 800951a:	f7ff fa79 	bl	8008a10 <_ZnwjPv>
 800951e:	4604      	mov	r4, r0
 8009520:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009522:	4620      	mov	r0, r4
 8009524:	f001 fbee 	bl	800ad04 <_ZN16Screen1PresenterC1ER11Screen1View>
 8009528:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800952e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009534:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800953a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800953c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8009542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009544:	3304      	adds	r3, #4
 8009546:	e000      	b.n	800954a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8009548:	2300      	movs	r3, #0
 800954a:	4619      	mov	r1, r3
 800954c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800954e:	f7ff fc3b 	bl	8008dc8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8009552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009554:	3304      	adds	r3, #4
 8009556:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff fca8 	bl	8008eae <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009562:	4618      	mov	r0, r3
 8009564:	f000 f89f 	bl	80096a6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	61bb      	str	r3, [r7, #24]
 8009570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009572:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	330c      	adds	r3, #12
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69f8      	ldr	r0, [r7, #28]
 800957e:	4798      	blx	r3
    newPresenter->activate();
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69b8      	ldr	r0, [r7, #24]
 8009588:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800958a:	6979      	ldr	r1, [r7, #20]
 800958c:	69f8      	ldr	r0, [r7, #28]
 800958e:	f007 fc9f 	bl	8010ed0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3310      	adds	r3, #16
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6978      	ldr	r0, [r7, #20]
 800959c:	4798      	blx	r3
    newTransition->invalidate();
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3314      	adds	r3, #20
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	4798      	blx	r3
}
 80095aa:	bf00      	nop
    return newPresenter;
 80095ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	373c      	adds	r7, #60	@ 0x3c
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd90      	pop	{r4, r7, pc}
 80095b6:	bf00      	nop
 80095b8:	0801d228 	.word	0x0801d228
 80095bc:	0801d514 	.word	0x0801d514
 80095c0:	0801d388 	.word	0x0801d388
 80095c4:	0801d3cc 	.word	0x0801d3cc
 80095c8:	0801d470 	.word	0x0801d470

080095cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3324      	adds	r3, #36	@ 0x24
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	887a      	ldrh	r2, [r7, #2]
 80095e2:	4611      	mov	r1, r2
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	4798      	blx	r3
 80095e8:	4603      	mov	r3, r0
    }
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3324      	adds	r3, #36	@ 0x24
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	887a      	ldrh	r2, [r7, #2]
 8009608:	4611      	mov	r1, r2
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
 800960e:	4603      	mov	r3, r0
    }
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3324      	adds	r3, #36	@ 0x24
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	887a      	ldrh	r2, [r7, #2]
 800962e:	4611      	mov	r1, r2
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
 8009634:	4603      	mov	r3, r0
    }
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3324      	adds	r3, #36	@ 0x24
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	887a      	ldrh	r2, [r7, #2]
 8009670:	4611      	mov	r1, r2
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
    }
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3324      	adds	r3, #36	@ 0x24
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	887a      	ldrh	r2, [r7, #2]
 8009696:	4611      	mov	r1, r2
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	4798      	blx	r3
 800969c:	4603      	mov	r3, r0
    }
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
	...

080096c4 <_ZN8touchgfx12NoTransitionD1Ev>:
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	4a05      	ldr	r2, [pc, #20]	@ (80096e4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff fa9d 	bl	8008c14 <_ZN8touchgfx10TransitionD1Ev>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	0801dd58 	.word	0x0801dd58

080096e8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff ffe7 	bl	80096c4 <_ZN8touchgfx12NoTransitionD1Ev>
 80096f6:	210c      	movs	r1, #12
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f012 fcca 	bl	801c092 <_ZdlPvj>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	4a05      	ldr	r2, [pc, #20]	@ (8009728 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff fa1d 	bl	8008b58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	0801ddd0 	.word	0x0801ddd0

0800972c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ffe7 	bl	8009708 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800973a:	2110      	movs	r1, #16
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f012 fca8 	bl	801c092 <_ZdlPvj>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	68d2      	ldr	r2, [r2, #12]
 800975c:	1052      	asrs	r2, r2, #1
 800975e:	1899      	adds	r1, r3, r2
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	e00a      	b.n	8009788 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	68d2      	ldr	r2, [r2, #12]
 800977a:	1052      	asrs	r2, r2, #1
 800977c:	4413      	add	r3, r2
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6892      	ldr	r2, [r2, #8]
 8009784:	4413      	add	r3, r2
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4608      	mov	r0, r1
 800978a:	4798      	blx	r3
    }
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d010      	beq.n	80097c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d107      	bne.n	80097bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80097bc:	2300      	movs	r3, #0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d001      	beq.n	80097c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80097c6:	2300      	movs	r3, #0
    }
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
        : color(col)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	601a      	str	r2, [r3, #0]
    {
    }
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	805a      	strh	r2, [r3, #2]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	809a      	strh	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	80da      	strh	r2, [r3, #6]
    {
    }
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	887a      	ldrh	r2, [r7, #2]
 8009830:	801a      	strh	r2, [r3, #0]
    {
    }
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8009848:	4a14      	ldr	r2, [pc, #80]	@ (800989c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
        : rect(),
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	3304      	adds	r3, #4
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff ffcd 	bl	80097f2 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	330c      	adds	r3, #12
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff ffc8 	bl	80097f2 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	0801e944 	.word	0x0801e944

080098a0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
    {
 80098a8:	4a04      	ldr	r2, [pc, #16]	@ (80098bc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
    }
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	0801e944 	.word	0x0801e944

080098c0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    }
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ffe9 	bl	80098a0 <_ZN8touchgfx8DrawableD1Ev>
 80098ce:	2128      	movs	r1, #40	@ 0x28
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f012 fbde 	bl	801c092 <_ZdlPvj>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3314      	adds	r3, #20
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
        }
    }
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800990e:	2300      	movs	r3, #0
    }
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	4608      	mov	r0, r1
 8009926:	4611      	mov	r1, r2
 8009928:	461a      	mov	r2, r3
 800992a:	4603      	mov	r3, r0
 800992c:	817b      	strh	r3, [r7, #10]
 800992e:	460b      	mov	r3, r1
 8009930:	813b      	strh	r3, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8009936:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800993a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800993e:	4619      	mov	r1, r3
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f82a 	bl	800999a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8009946:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800994a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800994e:	4619      	mov	r1, r3
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 f87e 	bl	8009a52 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	887a      	ldrh	r2, [r7, #2]
 800996e:	809a      	strh	r2, [r3, #4]
    }
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	887a      	ldrh	r2, [r7, #2]
 800998c:	80da      	strh	r2, [r3, #6]
    }
 800998e:	bf00      	nop
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	807b      	strh	r3, [r7, #2]
 80099a6:	4613      	mov	r3, r2
 80099a8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3330      	adds	r3, #48	@ 0x30
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80099b6:	4611      	mov	r1, r2
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
        setY(y);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3334      	adds	r3, #52	@ 0x34
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80099c8:	4611      	mov	r1, r2
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
    }
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	460b      	mov	r3, r1
 80099e0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	887a      	ldrh	r2, [r7, #2]
 80099e6:	811a      	strh	r2, [r3, #8]
    }
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	887a      	ldrh	r2, [r7, #2]
 8009a04:	815a      	strh	r2, [r3, #10]
    }
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
    {
    }
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009a26:	b480      	push	{r7}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	807b      	strh	r3, [r7, #2]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3338      	adds	r3, #56	@ 0x38
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	4798      	blx	r3
        setHeight(height);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	333c      	adds	r3, #60	@ 0x3c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009a80:	4611      	mov	r1, r2
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	4798      	blx	r3
    }
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    {
    }
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	807b      	strh	r3, [r7, #2]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3354      	adds	r3, #84	@ 0x54
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	8879      	ldrh	r1, [r7, #2]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	1a8a      	subs	r2, r1, r2
 8009b30:	b292      	uxth	r2, r2
 8009b32:	b210      	sxth	r0, r2
 8009b34:	8839      	ldrh	r1, [r7, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8009b3c:	b292      	uxth	r2, r2
 8009b3e:	1a8a      	subs	r2, r1, r2
 8009b40:	b292      	uxth	r2, r2
 8009b42:	b212      	sxth	r2, r2
 8009b44:	4601      	mov	r1, r0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
    }
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b60:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b68:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b70:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7ff ffe1 	bl	8009b52 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	601a      	str	r2, [r3, #0]
    }
 8009b9e:	bf00      	nop
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	607b      	str	r3, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	817b      	strh	r3, [r7, #10]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff ff8c 	bl	8009ad8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff ff92 	bl	8009af2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e000      	b.n	8009bda <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	601a      	str	r2, [r3, #0]
        }
    }
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
    {
 8009bf4:	4a06      	ldr	r2, [pc, #24]	@ (8009c10 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
    }
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fb12 	bl	800a228 <_ZN8touchgfx9ContainerD1Ev>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	0801ea50 	.word	0x0801ea50

08009c14 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
    }
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ffe5 	bl	8009bec <_ZN8touchgfx6ScreenD1Ev>
 8009c22:	213c      	movs	r1, #60	@ 0x3c
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f012 fa34 	bl	801c092 <_ZdlPvj>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
    {
    }
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    {
    }
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
    {
    }
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    {
    }
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f003 f981 	bl	800cfb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fdba 	bl	8009840 <_ZN8touchgfx8DrawableC1Ev>
 8009ccc:	4a03      	ldr	r2, [pc, #12]	@ (8009cdc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	0801df38 	.word	0x0801df38

08009ce0 <_ZN8touchgfx6WidgetD1Ev>:
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	4a05      	ldr	r2, [pc, #20]	@ (8009d00 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fdd5 	bl	80098a0 <_ZN8touchgfx8DrawableD1Ev>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	0801df38 	.word	0x0801df38

08009d04 <_ZN8touchgfx6WidgetD0Ev>:
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ffe7 	bl	8009ce0 <_ZN8touchgfx6WidgetD1Ev>
 8009d12:	2128      	movs	r1, #40	@ 0x28
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f012 f9bc 	bl	801c092 <_ZdlPvj>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	2326      	movs	r3, #38	@ 0x26
 8009d32:	461a      	mov	r2, r3
 8009d34:	2100      	movs	r1, #0
 8009d36:	f012 fc77 	bl	801c628 <memset>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff ffbd 	bl	8009cbc <_ZN8touchgfx6WidgetC1Ev>
 8009d42:	4a09      	ldr	r2, [pc, #36]	@ (8009d68 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	22ff      	movs	r2, #255	@ 0xff
 8009d4c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3328      	adds	r3, #40	@ 0x28
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7ff fd3c 	bl	80097d4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	0801e7bc 	.word	0x0801e7bc

08009d6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	2326      	movs	r3, #38	@ 0x26
 8009d96:	461a      	mov	r2, r3
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f012 fc45 	bl	801c628 <memset>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff ff8b 	bl	8009cbc <_ZN8touchgfx6WidgetC1Ev>
 8009da6:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd0 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	629a      	str	r2, [r3, #40]	@ 0x28
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fe7a 	bl	8009ab8 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	0801e74c 	.word	0x0801e74c

08009dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	4a05      	ldr	r2, [pc, #20]	@ (8009e10 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff ff6d 	bl	8009ce0 <_ZN8touchgfx6WidgetD1Ev>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	0801e74c 	.word	0x0801e74c

08009e14 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff ffe7 	bl	8009df0 <_ZN8touchgfx14AbstractButtonD1Ev>
 8009e22:	2130      	movs	r1, #48	@ 0x30
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f012 f934 	bl	801c092 <_ZdlPvj>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff ffa2 	bl	8009d88 <_ZN8touchgfx14AbstractButtonC1Ev>
 8009e44:	4a0c      	ldr	r2, [pc, #48]	@ (8009e78 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	332e      	adds	r3, #46	@ 0x2e
 8009e4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff fce4 	bl	8009820 <_ZN8touchgfx6BitmapC1Et>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3330      	adds	r3, #48	@ 0x30
 8009e5c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff fcdd 	bl	8009820 <_ZN8touchgfx6BitmapC1Et>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	22ff      	movs	r2, #255	@ 0xff
 8009e6a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	0801e824 	.word	0x0801e824

08009e7c <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8009e84:	f005 fb60 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 8009e88:	4603      	mov	r3, r0
    }
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	4a05      	ldr	r2, [pc, #20]	@ (8009eb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff fea1 	bl	8009bec <_ZN8touchgfx6ScreenD1Ev>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	0801deec 	.word	0x0801deec

08009eb8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff ffe7 	bl	8009e94 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8009ec6:	2140      	movs	r1, #64	@ 0x40
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f012 f8e2 	bl	801c092 <_ZdlPvj>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b08d      	sub	sp, #52	@ 0x34
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 f918 	bl	800a118 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8009ee8:	4a5e      	ldr	r2, [pc, #376]	@ (800a064 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3340      	adds	r3, #64	@ 0x40
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff ff16 	bl	8009d24 <_ZN8touchgfx3BoxC1Ev>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	336c      	adds	r3, #108	@ 0x6c
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff ff11 	bl	8009d24 <_ZN8touchgfx3BoxC1Ev>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3398      	adds	r3, #152	@ 0x98
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff ff94 	bl	8009e34 <_ZN8touchgfx6ButtonC1Ev>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8009f12:	4b55      	ldr	r3, [pc, #340]	@ (800a068 <_ZN15Screen1ViewBaseC1Ev+0x190>)
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	cb0c      	ldmia	r3, {r2, r3}
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	f000 f91f 	bl	800a164 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009f2c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8009f36:	2200      	movs	r2, #0
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f7ff fcef 	bl	800991c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8009f44:	2300      	movs	r3, #0
 8009f46:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f50:	2300      	movs	r3, #0
 8009f52:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009f56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f5a:	041a      	lsls	r2, r3, #16
 8009f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f60:	021b      	lsls	r3, r3, #8
 8009f62:	431a      	orrs	r2, r3
 8009f64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009f6e:	f107 031c 	add.w	r3, r7, #28
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff fc2d 	bl	80097d4 <_ZN8touchgfx9colortypeC1Em>
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff fef4 	bl	8009d6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3340      	adds	r3, #64	@ 0x40
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7ff fe85 	bl	8009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8009f98:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	f7ff fcb9 	bl	800991c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(169, 57, 189));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8009fb0:	23a9      	movs	r3, #169	@ 0xa9
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009fb6:	2339      	movs	r3, #57	@ 0x39
 8009fb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009fbc:	23bd      	movs	r3, #189	@ 0xbd
 8009fbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fc6:	041a      	lsls	r2, r3, #16
 8009fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009fda:	f107 0318 	add.w	r3, r7, #24
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fbf7 	bl	80097d4 <_ZN8touchgfx9colortypeC1Em>
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7ff febe 	bl	8009d6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	336c      	adds	r3, #108	@ 0x6c
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f7ff fe4f 	bl	8009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(153, 111);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3398      	adds	r3, #152	@ 0x98
 800a002:	226f      	movs	r2, #111	@ 0x6f
 800a004:	2199      	movs	r1, #153	@ 0x99
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fcc7 	bl	800999a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_ACTIVE_ID));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800a012:	f107 0310 	add.w	r3, r7, #16
 800a016:	2102      	movs	r1, #2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff fc01 	bl	8009820 <_ZN8touchgfx6BitmapC1Et>
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	2103      	movs	r1, #3
 800a024:	4618      	mov	r0, r3
 800a026:	f7ff fbfb 	bl	8009820 <_ZN8touchgfx6BitmapC1Et>
 800a02a:	f107 0214 	add.w	r2, r7, #20
 800a02e:	f107 0310 	add.w	r3, r7, #16
 800a032:	4619      	mov	r1, r3
 800a034:	4620      	mov	r0, r4
 800a036:	f004 f9a3 	bl	800e380 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	33cc      	adds	r3, #204	@ 0xcc
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f7ff fec4 	bl	8009dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3398      	adds	r3, #152	@ 0x98
 800a052:	4619      	mov	r1, r3
 800a054:	4610      	mov	r0, r2
 800a056:	f7ff fe21 	bl	8009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4618      	mov	r0, r3
 800a05e:	372c      	adds	r7, #44	@ 0x2c
 800a060:	46bd      	mov	sp, r7
 800a062:	bd90      	pop	{r4, r7, pc}
 800a064:	0801dea0 	.word	0x0801dea0
 800a068:	0800a0ed 	.word	0x0800a0ed

0800a06c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	4a0f      	ldr	r2, [pc, #60]	@ (800a0b4 <_ZN15Screen1ViewBaseD1Ev+0x48>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	601a      	str	r2, [r3, #0]
{

}
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	33cc      	adds	r3, #204	@ 0xcc
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f8b0 	bl	800a1e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3398      	adds	r3, #152	@ 0x98
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 f911 	bl	800a2b0 <_ZN8touchgfx6ButtonD1Ev>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	336c      	adds	r3, #108	@ 0x6c
 800a092:	4618      	mov	r0, r3
 800a094:	f000 f8ea 	bl	800a26c <_ZN8touchgfx3BoxD1Ev>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3340      	adds	r3, #64	@ 0x40
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 f8e5 	bl	800a26c <_ZN8touchgfx3BoxD1Ev>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fef5 	bl	8009e94 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	0801dea0 	.word	0x0801dea0

0800a0b8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
}
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7ff ffd3 	bl	800a06c <_ZN15Screen1ViewBaseD1Ev>
 800a0c6:	21dc      	movs	r1, #220	@ 0xdc
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f011 ffe2 	bl	801c092 <_ZdlPvj>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]

}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3398      	adds	r3, #152	@ 0x98
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d106      	bne.n	800a10e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff febb 	bl	8009e7c <_ZN15Screen1ViewBase11applicationEv>
 800a106:	4603      	mov	r3, r0
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe ff45 	bl	8008f98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4618      	mov	r0, r3
 800a124:	f006 fd28 	bl	8010b78 <_ZN8touchgfx6ScreenC1Ev>
 800a128:	4a05      	ldr	r2, [pc, #20]	@ (800a140 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0801deec 	.word	0x0801deec

0800a144 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	4a04      	ldr	r2, [pc, #16]	@ (800a160 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	0801df20 	.word	0x0801df20

0800a164 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	4639      	mov	r1, r7
 800a170:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff ffe4 	bl	800a144 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800a17c:	4a08      	ldr	r2, [pc, #32]	@ (800a1a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	605a      	str	r2, [r3, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3308      	adds	r3, #8
 800a18c:	463a      	mov	r2, r7
 800a18e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a192:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	0801ded4 	.word	0x0801ded4

0800a1a4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
    }
 800a1ac:	4a04      	ldr	r2, [pc, #16]	@ (800a1c0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	0801df20 	.word	0x0801df20

0800a1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
    }
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff ffe9 	bl	800a1a4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800a1d2:	2104      	movs	r1, #4
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f011 ff5c 	bl	801c092 <_ZdlPvj>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	4a05      	ldr	r2, [pc, #20]	@ (800a204 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff ffd5 	bl	800a1a4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	0801ded4 	.word	0x0801ded4

0800a208 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff ffe7 	bl	800a1e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a216:	2110      	movs	r1, #16
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f011 ff3a 	bl	801c092 <_ZdlPvj>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	4a05      	ldr	r2, [pc, #20]	@ (800a248 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff fb31 	bl	80098a0 <_ZN8touchgfx8DrawableD1Ev>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	0801e564 	.word	0x0801e564

0800a24c <_ZN8touchgfx9ContainerD0Ev>:
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff ffe7 	bl	800a228 <_ZN8touchgfx9ContainerD1Ev>
 800a25a:	212c      	movs	r1, #44	@ 0x2c
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f011 ff18 	bl	801c092 <_ZdlPvj>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	4a05      	ldr	r2, [pc, #20]	@ (800a28c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fd2f 	bl	8009ce0 <_ZN8touchgfx6WidgetD1Ev>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	0801e7bc 	.word	0x0801e7bc

0800a290 <_ZN8touchgfx3BoxD0Ev>:
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff ffe7 	bl	800a26c <_ZN8touchgfx3BoxD1Ev>
 800a29e:	212c      	movs	r1, #44	@ 0x2c
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f011 fef6 	bl	801c092 <_ZdlPvj>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	4a05      	ldr	r2, [pc, #20]	@ (800a2d0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fd95 	bl	8009df0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	0801e824 	.word	0x0801e824

0800a2d4 <_ZN8touchgfx6ButtonD0Ev>:
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff ffe7 	bl	800a2b0 <_ZN8touchgfx6ButtonD1Ev>
 800a2e2:	2134      	movs	r1, #52	@ 0x34
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f011 fed4 	bl	801c092 <_ZdlPvj>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	68d2      	ldr	r2, [r2, #12]
 800a306:	1052      	asrs	r2, r2, #1
 800a308:	1898      	adds	r0, r3, r2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	e00a      	b.n	800a332 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	68d2      	ldr	r2, [r2, #12]
 800a324:	1052      	asrs	r2, r2, #1
 800a326:	4413      	add	r3, r2
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6892      	ldr	r2, [r2, #8]
 800a32e:	4413      	add	r3, r2
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	4798      	blx	r3
    }
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d107      	bne.n	800a366 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800a366:	2300      	movs	r3, #0
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d001      	beq.n	800a370 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800a370:	2300      	movs	r3, #0
    }
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <_ZN14screenViewBase11applicationEv>:
    screenViewBase();
    virtual ~screenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800a386:	f005 f8df 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 800a38a:	4603      	mov	r3, r0
    }
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	4a05      	ldr	r2, [pc, #20]	@ (800a3b4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fc21 	bl	8009bec <_ZN8touchgfx6ScreenD1Ev>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	0801dfec 	.word	0x0801dfec

0800a3b8 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff ffe7 	bl	800a394 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800a3c6:	2140      	movs	r1, #64	@ 0x40
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f011 fe62 	bl	801c092 <_ZdlPvj>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase() :
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b08d      	sub	sp, #52	@ 0x34
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f918 	bl	800a618 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800a3e8:	4a5e      	ldr	r2, [pc, #376]	@ (800a564 <_ZN14screenViewBaseC1Ev+0x18c>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3340      	adds	r3, #64	@ 0x40
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fc96 	bl	8009d24 <_ZN8touchgfx3BoxC1Ev>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	336c      	adds	r3, #108	@ 0x6c
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fc91 	bl	8009d24 <_ZN8touchgfx3BoxC1Ev>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3398      	adds	r3, #152	@ 0x98
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff fd14 	bl	8009e34 <_ZN8touchgfx6ButtonC1Ev>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800a412:	4b55      	ldr	r3, [pc, #340]	@ (800a568 <_ZN14screenViewBaseC1Ev+0x190>)
 800a414:	60bb      	str	r3, [r7, #8]
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	f107 0308 	add.w	r3, r7, #8
 800a41e:	cb0c      	ldmia	r3, {r2, r3}
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	f000 f90f 	bl	800a644 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800a42c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800a436:	2200      	movs	r2, #0
 800a438:	2100      	movs	r1, #0
 800a43a:	f7ff fa6f 	bl	800991c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800a444:	2300      	movs	r3, #0
 800a446:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800a44a:	2300      	movs	r3, #0
 800a44c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a450:	2300      	movs	r3, #0
 800a452:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a45a:	041a      	lsls	r2, r3, #16
 800a45c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	431a      	orrs	r2, r3
 800a464:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a468:	4313      	orrs	r3, r2
 800a46a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a46e:	f107 031c 	add.w	r3, r7, #28
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff f9ad 	bl	80097d4 <_ZN8touchgfx9colortypeC1Em>
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	4619      	mov	r1, r3
 800a47e:	4620      	mov	r0, r4
 800a480:	f7ff fc74 	bl	8009d6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3340      	adds	r3, #64	@ 0x40
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f7ff fc05 	bl	8009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800a498:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	f7ff fa39 	bl	800991c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(24, 240, 207));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800a4b0:	2318      	movs	r3, #24
 800a4b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a4b6:	23f0      	movs	r3, #240	@ 0xf0
 800a4b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a4bc:	23cf      	movs	r3, #207	@ 0xcf
 800a4be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4c6:	041a      	lsls	r2, r3, #16
 800a4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a4da:	f107 0318 	add.w	r3, r7, #24
 800a4de:	4611      	mov	r1, r2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff f977 	bl	80097d4 <_ZN8touchgfx9colortypeC1Em>
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f7ff fc3e 	bl	8009d6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	336c      	adds	r3, #108	@ 0x6c
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7ff fbcf 	bl	8009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 111);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3398      	adds	r3, #152	@ 0x98
 800a502:	226f      	movs	r2, #111	@ 0x6f
 800a504:	2178      	movs	r1, #120	@ 0x78
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff fa47 	bl	800999a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTIVE_ID));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800a512:	f107 0310 	add.w	r3, r7, #16
 800a516:	2100      	movs	r1, #0
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff f981 	bl	8009820 <_ZN8touchgfx6BitmapC1Et>
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	2101      	movs	r1, #1
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff f97b 	bl	8009820 <_ZN8touchgfx6BitmapC1Et>
 800a52a:	f107 0214 	add.w	r2, r7, #20
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4619      	mov	r1, r3
 800a534:	4620      	mov	r0, r4
 800a536:	f003 ff23 	bl	800e380 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	33cc      	adds	r3, #204	@ 0xcc
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7ff fc44 	bl	8009dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3398      	adds	r3, #152	@ 0x98
 800a552:	4619      	mov	r1, r3
 800a554:	4610      	mov	r0, r2
 800a556:	f7ff fba1 	bl	8009c9c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4618      	mov	r0, r3
 800a55e:	372c      	adds	r7, #44	@ 0x2c
 800a560:	46bd      	mov	sp, r7
 800a562:	bd90      	pop	{r4, r7, pc}
 800a564:	0801dfa0 	.word	0x0801dfa0
 800a568:	0800a5ed 	.word	0x0800a5ed

0800a56c <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	4a0f      	ldr	r2, [pc, #60]	@ (800a5b4 <_ZN14screenViewBaseD1Ev+0x48>)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
{

}
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	33cc      	adds	r3, #204	@ 0xcc
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f880 	bl	800a684 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3398      	adds	r3, #152	@ 0x98
 800a588:	4618      	mov	r0, r3
 800a58a:	f7ff fe91 	bl	800a2b0 <_ZN8touchgfx6ButtonD1Ev>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	336c      	adds	r3, #108	@ 0x6c
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fe6a 	bl	800a26c <_ZN8touchgfx3BoxD1Ev>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3340      	adds	r3, #64	@ 0x40
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fe65 	bl	800a26c <_ZN8touchgfx3BoxD1Ev>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7ff fef5 	bl	800a394 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	0801dfa0 	.word	0x0801dfa0

0800a5b8 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
}
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff ffd3 	bl	800a56c <_ZN14screenViewBaseD1Ev>
 800a5c6:	21dc      	movs	r1, #220	@ 0xdc
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f011 fd62 	bl	801c092 <_ZdlPvj>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3398      	adds	r3, #152	@ 0x98
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d106      	bne.n	800a60e <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff febc 	bl	800a37e <_ZN14screenViewBase11applicationEv>
 800a606:	4603      	mov	r3, r0
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe fd0b 	bl	8009024 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4618      	mov	r0, r3
 800a624:	f006 faa8 	bl	8010b78 <_ZN8touchgfx6ScreenC1Ev>
 800a628:	4a05      	ldr	r2, [pc, #20]	@ (800a640 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	0801dfec 	.word	0x0801dfec

0800a644 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4639      	mov	r1, r7
 800a650:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fd74 	bl	800a144 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800a65c:	4a08      	ldr	r2, [pc, #32]	@ (800a680 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	605a      	str	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3308      	adds	r3, #8
 800a66c:	463a      	mov	r2, r7
 800a66e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a672:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	0801dfd4 	.word	0x0801dfd4

0800a684 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	4a05      	ldr	r2, [pc, #20]	@ (800a6a4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fd85 	bl	800a1a4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	0801dfd4 	.word	0x0801dfd4

0800a6a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ffe7 	bl	800a684 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a6b6:	2110      	movs	r1, #16
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f011 fcea 	bl	801c092 <_ZdlPvj>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68d2      	ldr	r2, [r2, #12]
 800a6da:	1052      	asrs	r2, r2, #1
 800a6dc:	1898      	adds	r0, r3, r2
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d102      	bne.n	800a6f0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	e00a      	b.n	800a706 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	68d2      	ldr	r2, [r2, #12]
 800a6f8:	1052      	asrs	r2, r2, #1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	6892      	ldr	r2, [r2, #8]
 800a702:	4413      	add	r3, r2
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	4798      	blx	r3
    }
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d010      	beq.n	800a744 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d107      	bne.n	800a73a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d001      	beq.n	800a744 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a740:	2301      	movs	r3, #1
 800a742:	e000      	b.n	800a746 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800a744:	2300      	movs	r3, #0
    }
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
	...

0800a754 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
    return bitmap_database;
 800a758:	4b02      	ldr	r3, [pc, #8]	@ (800a764 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	0801e018 	.word	0x0801e018

0800a768 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800a76c:	2304      	movs	r3, #4
}
 800a76e:	4618      	mov	r0, r3
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	460b      	mov	r3, r1
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	817b      	strh	r3, [r7, #10]
        return 0;
 800a786:	2300      	movs	r3, #0
    }
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
        return 0;
 800a79c:	2300      	movs	r3, #0
    }
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
        return 0;
 800a7b2:	2300      	movs	r3, #0
    }
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800a7ce:	4a07      	ldr	r2, [pc, #28]	@ (800a7ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6013      	str	r3, [r2, #0]
        fonts = f;
 800a7d4:	4a06      	ldr	r2, [pc, #24]	@ (800a7f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800a7da:	4a06      	ldr	r2, [pc, #24]	@ (800a7f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	8013      	strh	r3, [r2, #0]
    }
 800a7e0:	bf00      	nop
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	24065aa0 	.word	0x24065aa0
 800a7f0:	24065aa8 	.word	0x24065aa8
 800a7f4:	24065aa4 	.word	0x24065aa4

0800a7f8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800a7f8:	b40e      	push	{r1, r2, r3}
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800a802:	f107 0320 	add.w	r3, r7, #32
 800a806:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	69fa      	ldr	r2, [r7, #28]
 800a80c:	2100      	movs	r1, #0
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f005 fde8 	bl	80103e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a814:	4603      	mov	r3, r0
 800a816:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800a818:	89fb      	ldrh	r3, [r7, #14]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a824:	b003      	add	sp, #12
 800a826:	4770      	bx	lr

0800a828 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800a828:	b40c      	push	{r2, r3}
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800a836:	f107 031c 	add.w	r3, r7, #28
 800a83a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800a83c:	78f9      	ldrb	r1, [r7, #3]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	69ba      	ldr	r2, [r7, #24]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f005 fdce 	bl	80103e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a848:	4603      	mov	r3, r0
 800a84a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800a84c:	89fb      	ldrh	r3, [r7, #14]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a858:	b002      	add	sp, #8
 800a85a:	4770      	bx	lr

0800a85c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	@ 0x28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d016      	beq.n	800a89e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3322      	adds	r3, #34	@ 0x22
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	8adb      	ldrh	r3, [r3, #22]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d105      	bne.n	800a88a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800a87e:	4b43      	ldr	r3, [pc, #268]	@ (800a98c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800a880:	4a43      	ldr	r2, [pc, #268]	@ (800a990 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800a882:	21c5      	movs	r1, #197	@ 0xc5
 800a884:	4843      	ldr	r0, [pc, #268]	@ (800a994 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a886:	f011 fc33 	bl	801c0f0 <__assert_func>
            return buffer[pos];
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	8a9b      	ldrh	r3, [r3, #20]
 800a88e:	461a      	mov	r2, r3
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d06a      	beq.n	800a97a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f006 ffdf 	bl	8011868 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3322      	adds	r3, #34	@ 0x22
 800a8ae:	623b      	str	r3, [r7, #32]
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	8adb      	ldrh	r3, [r3, #22]
 800a8b8:	8bfa      	ldrh	r2, [r7, #30]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d305      	bcc.n	800a8ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800a8be:	4b36      	ldr	r3, [pc, #216]	@ (800a998 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800a8c0:	4a36      	ldr	r2, [pc, #216]	@ (800a99c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800a8c2:	21cb      	movs	r1, #203	@ 0xcb
 800a8c4:	4833      	ldr	r0, [pc, #204]	@ (800a994 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a8c6:	f011 fc13 	bl	801c0f0 <__assert_func>
            const uint16_t index = pos + offset;
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	8a9a      	ldrh	r2, [r3, #20]
 800a8ce:	8bfb      	ldrh	r3, [r7, #30]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800a8d4:	8bbb      	ldrh	r3, [r7, #28]
 800a8d6:	2b09      	cmp	r3, #9
 800a8d8:	d801      	bhi.n	800a8de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800a8da:	8bbb      	ldrh	r3, [r7, #28]
 800a8dc:	e001      	b.n	800a8e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800a8de:	8bbb      	ldrh	r3, [r7, #28]
 800a8e0:	3b0a      	subs	r3, #10
 800a8e2:	6a3a      	ldr	r2, [r7, #32]
 800a8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8e8:	f640 123f 	movw	r2, #2367	@ 0x93f
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	bf0c      	ite	eq
 800a8f0:	2301      	moveq	r3, #1
 800a8f2:	2300      	movne	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d03f      	beq.n	800a97a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	3322      	adds	r3, #34	@ 0x22
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	3222      	adds	r2, #34	@ 0x22
 800a902:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	8ad2      	ldrh	r2, [r2, #22]
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d105      	bne.n	800a918 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800a90c:	4b1f      	ldr	r3, [pc, #124]	@ (800a98c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800a90e:	4a20      	ldr	r2, [pc, #128]	@ (800a990 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800a910:	21c5      	movs	r1, #197	@ 0xc5
 800a912:	4820      	ldr	r0, [pc, #128]	@ (800a994 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a914:	f011 fbec 	bl	801c0f0 <__assert_func>
            return buffer[pos];
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	8a92      	ldrh	r2, [r2, #20]
 800a91c:	4611      	mov	r1, r2
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	4613      	mov	r3, r2
 800a928:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	8adb      	ldrh	r3, [r3, #22]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d806      	bhi.n	800a940 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800a932:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800a934:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800a936:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800a93a:	4816      	ldr	r0, [pc, #88]	@ (800a994 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a93c:	f011 fbd8 	bl	801c0f0 <__assert_func>
            const uint16_t index = pos + 1;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	8a9b      	ldrh	r3, [r3, #20]
 800a944:	3301      	adds	r3, #1
 800a946:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800a948:	89bb      	ldrh	r3, [r7, #12]
 800a94a:	2b09      	cmp	r3, #9
 800a94c:	d801      	bhi.n	800a952 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800a94e:	89bb      	ldrh	r3, [r7, #12]
 800a950:	e000      	b.n	800a954 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800a952:	2300      	movs	r3, #0
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	89f9      	ldrh	r1, [r7, #14]
 800a958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800a95c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3322      	adds	r3, #34	@ 0x22
 800a962:	61bb      	str	r3, [r7, #24]
 800a964:	f640 133f 	movw	r3, #2367	@ 0x93f
 800a968:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	8a9b      	ldrh	r3, [r3, #20]
 800a96e:	4619      	mov	r1, r3
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	8afa      	ldrh	r2, [r7, #22]
 800a974:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800a978:	bf00      	nop
        }
    }
    return getNextChar();
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f006 fe76 	bl	801166c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800a980:	4603      	mov	r3, r0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3728      	adds	r7, #40	@ 0x28
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	0801d5e8 	.word	0x0801d5e8
 800a990:	0801d5f4 	.word	0x0801d5f4
 800a994:	0801d6a0 	.word	0x0801d6a0
 800a998:	0801d6e8 	.word	0x0801d6e8
 800a99c:	0801d6f8 	.word	0x0801d6f8
 800a9a0:	0801d7cc 	.word	0x0801d7cc
 800a9a4:	0801d7d8 	.word	0x0801d7d8

0800a9a8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f006 fe24 	bl	80115fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a9c0:	b590      	push	{r4, r7, lr}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a9ce:	88fb      	ldrh	r3, [r7, #6]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d127      	bne.n	800aa24 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	@ (800aa50 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d016      	beq.n	800aa0e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a9e0:	88fb      	ldrh	r3, [r7, #6]
 800a9e2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa50 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a9f4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	4a16      	ldr	r2, [pc, #88]	@ (800aa58 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800aa00:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	4413      	add	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	e00a      	b.n	800aa24 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800aa0e:	4b11      	ldr	r3, [pc, #68]	@ (800aa54 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800aa10:	4a12      	ldr	r2, [pc, #72]	@ (800aa5c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800aa12:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800aa14:	4a12      	ldr	r2, [pc, #72]	@ (800aa60 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800aa16:	4b10      	ldr	r3, [pc, #64]	@ (800aa58 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800aa18:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	4a11      	ldr	r2, [pc, #68]	@ (800aa64 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800aa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa22:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00d      	beq.n	800aa46 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800aa2a:	4a0f      	ldr	r2, [pc, #60]	@ (800aa68 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800aa2c:	88fb      	ldrh	r3, [r7, #6]
 800aa2e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800aa30:	f000 f824 	bl	800aa7c <_ZN17TypedTextDatabase8getFontsEv>
 800aa34:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800aa36:	f000 f819 	bl	800aa6c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4621      	mov	r1, r4
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff febd 	bl	800a7c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd90      	pop	{r4, r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	24064904 	.word	0x24064904
 800aa54:	2406490c 	.word	0x2406490c
 800aa58:	24064910 	.word	0x24064910
 800aa5c:	08020698 	.word	0x08020698
 800aa60:	08020694 	.word	0x08020694
 800aa64:	080206a0 	.word	0x080206a0
 800aa68:	24064908 	.word	0x24064908

0800aa6c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
    return 0;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800aa80:	4b02      	ldr	r3, [pc, #8]	@ (800aa8c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	24064914 	.word	0x24064914

0800aa90 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d113      	bne.n	800aac8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d10e      	bne.n	800aac8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800aaaa:	f7fd ff05 	bl	80088b8 <_Z23getFont_verdana_20_4bppv>
 800aaae:	4603      	mov	r3, r0
};
 800aab0:	4a07      	ldr	r2, [pc, #28]	@ (800aad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800aab2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800aab4:	f7fd ff5a 	bl	800896c <_Z23getFont_verdana_40_4bppv>
 800aab8:	4603      	mov	r3, r0
};
 800aaba:	4a05      	ldr	r2, [pc, #20]	@ (800aad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800aabc:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800aabe:	f7fd fea1 	bl	8008804 <_Z23getFont_verdana_10_4bppv>
 800aac2:	4603      	mov	r3, r0
};
 800aac4:	4a02      	ldr	r2, [pc, #8]	@ (800aad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800aac6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	24064914 	.word	0x24064914

0800aad4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800aadc:	2001      	movs	r0, #1
 800aade:	f7ff ffd7 	bl	800aa90 <_Z41__static_initialization_and_destruction_0ii>
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	4a05      	ldr	r2, [pc, #20]	@ (800ab04 <_ZN19FrontendApplicationD1Ev+0x20>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe f999 	bl	8008e2c <_ZN23FrontendApplicationBaseD1Ev>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	0801e0d4 	.word	0x0801e0d4

0800ab08 <_ZN19FrontendApplicationD0Ev>:
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff ffe7 	bl	800aae4 <_ZN19FrontendApplicationD1Ev>
 800ab16:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f011 fab9 	bl	801c092 <_ZdlPvj>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f82d 	bl	800ab98 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f004 fd83 	bl	800f64c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe f9b2 	bl	8008ecc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800ab68:	4a03      	ldr	r2, [pc, #12]	@ (800ab78 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	601a      	str	r2, [r3, #0]
{

}
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	0801e0d4 	.word	0x0801e0d4

0800ab7c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
{

}
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <_ZN5Model4tickEv>:

void Model::tick()
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]

}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
    {
    }
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
    {
    }
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
    {
 800abdc:	4a04      	ldr	r2, [pc, #16]	@ (800abf0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	601a      	str	r2, [r3, #0]
    }
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	0801e160 	.word	0x0801e160

0800abf4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
    }
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff ffe9 	bl	800abd4 <_ZN8touchgfx9PresenterD1Ev>
 800ac02:	2104      	movs	r1, #4
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f011 fa44 	bl	801c092 <_ZdlPvj>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
    {
 800ac1c:	4a04      	ldr	r2, [pc, #16]	@ (800ac30 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	601a      	str	r2, [r3, #0]
    }
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4618      	mov	r0, r3
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	0801e160 	.word	0x0801e160

0800ac34 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	4a06      	ldr	r2, [pc, #24]	@ (800ac58 <_ZN13ModelListenerC1Ev+0x24>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	605a      	str	r2, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	0801e150 	.word	0x0801e150

0800ac5c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	4a04      	ldr	r2, [pc, #16]	@ (800ac78 <_ZN13ModelListenerD1Ev+0x1c>)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	0801e150 	.word	0x0801e150

0800ac7c <_ZN13ModelListenerD0Ev>:
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ffe9 	bl	800ac5c <_ZN13ModelListenerD1Ev>
 800ac8a:	2108      	movs	r1, #8
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f011 fa00 	bl	801c092 <_ZdlPvj>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	4a09      	ldr	r2, [pc, #36]	@ (800accc <_ZN16Screen1PresenterD1Ev+0x30>)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	4a09      	ldr	r2, [pc, #36]	@ (800acd0 <_ZN16Screen1PresenterD1Ev+0x34>)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	605a      	str	r2, [r3, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff ffd1 	bl	800ac5c <_ZN13ModelListenerD1Ev>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff ff89 	bl	800abd4 <_ZN8touchgfx9PresenterD1Ev>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	0801e128 	.word	0x0801e128
 800acd0:	0801e140 	.word	0x0801e140

0800acd4 <_ZThn4_N16Screen1PresenterD1Ev>:
 800acd4:	f1a0 0004 	sub.w	r0, r0, #4
 800acd8:	e7e0      	b.n	800ac9c <_ZN16Screen1PresenterD1Ev>
 800acda:	bf00      	nop

0800acdc <_ZN16Screen1PresenterD0Ev>:
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff ffd9 	bl	800ac9c <_ZN16Screen1PresenterD1Ev>
 800acea:	2110      	movs	r1, #16
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f011 f9d0 	bl	801c092 <_ZdlPvj>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <_ZThn4_N16Screen1PresenterD0Ev>:
 800acfc:	f1a0 0004 	sub.w	r0, r0, #4
 800ad00:	e7ec      	b.n	800acdc <_ZN16Screen1PresenterD0Ev>
	...

0800ad04 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
    : view(v)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff ff7f 	bl	800ac14 <_ZN8touchgfx9PresenterC1Ev>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff ff8a 	bl	800ac34 <_ZN13ModelListenerC1Ev>
 800ad20:	4a06      	ldr	r2, [pc, #24]	@ (800ad3c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	4a06      	ldr	r2, [pc, #24]	@ (800ad40 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	605a      	str	r2, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	60da      	str	r2, [r3, #12]
{

}
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	0801e128 	.word	0x0801e128
 800ad40:	0801e140 	.word	0x0801e140

0800ad44 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]

}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	4a05      	ldr	r2, [pc, #20]	@ (800ad8c <_ZN11Screen1ViewD1Ev+0x20>)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff f975 	bl	800a06c <_ZN15Screen1ViewBaseD1Ev>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	0801e178 	.word	0x0801e178

0800ad90 <_ZN11Screen1ViewD0Ev>:
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff ffe7 	bl	800ad6c <_ZN11Screen1ViewD1Ev>
 800ad9e:	21dc      	movs	r1, #220	@ 0xdc
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f011 f976 	bl	801c092 <_ZdlPvj>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff f88c 	bl	8009ed8 <_ZN15Screen1ViewBaseC1Ev>
 800adc0:	4a03      	ldr	r2, [pc, #12]	@ (800add0 <_ZN11Screen1ViewC1Ev+0x20>)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
{

}
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	0801e178 	.word	0x0801e178

0800add4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff f97a 	bl	800a0d8 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe ff30 	bl	8009c5c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	4a09      	ldr	r2, [pc, #36]	@ (800ae34 <_ZN15screenPresenterD1Ev+0x30>)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	4a09      	ldr	r2, [pc, #36]	@ (800ae38 <_ZN15screenPresenterD1Ev+0x34>)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	605a      	str	r2, [r3, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff ff1d 	bl	800ac5c <_ZN13ModelListenerD1Ev>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff fed5 	bl	800abd4 <_ZN8touchgfx9PresenterD1Ev>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	0801e1ac 	.word	0x0801e1ac
 800ae38:	0801e1c4 	.word	0x0801e1c4

0800ae3c <_ZThn4_N15screenPresenterD1Ev>:
 800ae3c:	f1a0 0004 	sub.w	r0, r0, #4
 800ae40:	e7e0      	b.n	800ae04 <_ZN15screenPresenterD1Ev>
 800ae42:	bf00      	nop

0800ae44 <_ZN15screenPresenterD0Ev>:
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ffd9 	bl	800ae04 <_ZN15screenPresenterD1Ev>
 800ae52:	2110      	movs	r1, #16
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f011 f91c 	bl	801c092 <_ZdlPvj>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_ZThn4_N15screenPresenterD0Ev>:
 800ae64:	f1a0 0004 	sub.w	r0, r0, #4
 800ae68:	e7ec      	b.n	800ae44 <_ZN15screenPresenterD0Ev>
	...

0800ae6c <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
    : view(v)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fecb 	bl	800ac14 <_ZN8touchgfx9PresenterC1Ev>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3304      	adds	r3, #4
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff fed6 	bl	800ac34 <_ZN13ModelListenerC1Ev>
 800ae88:	4a06      	ldr	r2, [pc, #24]	@ (800aea4 <_ZN15screenPresenterC1ER10screenView+0x38>)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	4a06      	ldr	r2, [pc, #24]	@ (800aea8 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	605a      	str	r2, [r3, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	60da      	str	r2, [r3, #12]
{

}
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	0801e1ac 	.word	0x0801e1ac
 800aea8:	0801e1c4 	.word	0x0801e1c4

0800aeac <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]

}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	4a05      	ldr	r2, [pc, #20]	@ (800aef4 <_ZN10screenViewD1Ev+0x20>)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff fb41 	bl	800a56c <_ZN14screenViewBaseD1Ev>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	0801e1d4 	.word	0x0801e1d4

0800aef8 <_ZN10screenViewD0Ev>:
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ffe7 	bl	800aed4 <_ZN10screenViewD1Ev>
 800af06:	21dc      	movs	r1, #220	@ 0xdc
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f011 f8c2 	bl	801c092 <_ZdlPvj>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff fa58 	bl	800a3d8 <_ZN14screenViewBaseC1Ev>
 800af28:	4a03      	ldr	r2, [pc, #12]	@ (800af38 <_ZN10screenViewC1Ev+0x20>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
{

}
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	0801e1d4 	.word	0x0801e1d4

0800af3c <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff fb46 	bl	800a5d8 <_ZN14screenViewBase11setupScreenEv>
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fe7c 	bl	8009c5c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    {
 800af74:	4a04      	ldr	r2, [pc, #16]	@ (800af88 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	601a      	str	r2, [r3, #0]
    }
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	0801e220 	.word	0x0801e220

0800af8c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
    }
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff ffe9 	bl	800af6c <_ZN8touchgfx15TouchControllerD1Ev>
 800af9a:	2104      	movs	r1, #4
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f011 f878 	bl	801c092 <_ZdlPvj>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4618      	mov	r0, r3
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	4a05      	ldr	r2, [pc, #20]	@ (800affc <_ZN20STM32TouchControllerD1Ev+0x20>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff ffbd 	bl	800af6c <_ZN8touchgfx15TouchControllerD1Ev>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4618      	mov	r0, r3
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	0801e208 	.word	0x0801e208

0800b000 <_ZN20STM32TouchControllerD0Ev>:
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff ffe7 	bl	800afdc <_ZN20STM32TouchControllerD1Ev>
 800b00e:	2104      	movs	r1, #4
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f011 f83e 	bl	801c092 <_ZdlPvj>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0

}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
	...

0800b030 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	4603      	mov	r3, r0
 800b038:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d80c      	bhi.n	800b05a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800b040:	a201      	add	r2, pc, #4	@ (adr r2, 800b048 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800b042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b046:	bf00      	nop
 800b048:	0800b059 	.word	0x0800b059
 800b04c:	0800b059 	.word	0x0800b059
 800b050:	0800b059 	.word	0x0800b059
 800b054:	0800b059 	.word	0x0800b059
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800b058:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800b05a:	bf00      	nop
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop

0800b068 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	2b03      	cmp	r3, #3
 800b076:	d80c      	bhi.n	800b092 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800b078:	a201      	add	r2, pc, #4	@ (adr r2, 800b080 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800b07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07e:	bf00      	nop
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b091 	.word	0x0800b091
 800b088:	0800b091 	.word	0x0800b091
 800b08c:	0800b091 	.word	0x0800b091
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800b090:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800b092:	bf00      	nop
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop

0800b0a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b0aa:	79fb      	ldrb	r3, [r7, #7]
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d80c      	bhi.n	800b0ca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800b0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b0c9 	.word	0x0800b0c9
 800b0bc:	0800b0c9 	.word	0x0800b0c9
 800b0c0:	0800b0c9 	.word	0x0800b0c9
 800b0c4:	0800b0c9 	.word	0x0800b0c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800b0c8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800b0ca:	bf00      	nop
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop

0800b0d8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
    {
 800b0e0:	4a04      	ldr	r2, [pc, #16]	@ (800b0f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	601a      	str	r2, [r3, #0]
    }
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	0801e600 	.word	0x0801e600

0800b0f8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
    }
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ffe9 	bl	800b0d8 <_ZN8touchgfx3HALD1Ev>
 800b106:	217c      	movs	r1, #124	@ 0x7c
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f010 ffc2 	bl	801c092 <_ZdlPvj>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	78fa      	ldrb	r2, [r7, #3]
 800b128:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	807b      	strh	r3, [r7, #2]
 800b14c:	4613      	mov	r3, r2
 800b14e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800b150:	4b0c      	ldr	r3, [pc, #48]	@ (800b184 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	887a      	ldrh	r2, [r7, #2]
 800b156:	429a      	cmp	r2, r3
 800b158:	d304      	bcc.n	800b164 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800b15a:	4b0b      	ldr	r3, [pc, #44]	@ (800b188 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	883a      	ldrh	r2, [r7, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d205      	bcs.n	800b170 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800b164:	4b09      	ldr	r3, [pc, #36]	@ (800b18c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800b166:	4a0a      	ldr	r2, [pc, #40]	@ (800b190 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800b168:	219e      	movs	r1, #158	@ 0x9e
 800b16a:	480a      	ldr	r0, [pc, #40]	@ (800b194 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800b16c:	f010 ffc0 	bl	801c0f0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800b170:	4a09      	ldr	r2, [pc, #36]	@ (800b198 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800b172:	887b      	ldrh	r3, [r7, #2]
 800b174:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800b176:	4a09      	ldr	r2, [pc, #36]	@ (800b19c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800b178:	883b      	ldrh	r3, [r7, #0]
 800b17a:	8013      	strh	r3, [r2, #0]
    }
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	24065a44 	.word	0x24065a44
 800b188:	24065a46 	.word	0x24065a46
 800b18c:	0801d88c 	.word	0x0801d88c
 800b190:	0801d8f0 	.word	0x0801d8f0
 800b194:	0801d934 	.word	0x0801d934
 800b198:	24065a4a 	.word	0x24065a4a
 800b19c:	24065a4c 	.word	0x24065a4c

0800b1a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d009      	beq.n	800b1c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4610      	mov	r0, r2
 800b1c0:	4798      	blx	r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	e000      	b.n	800b1c8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800b1c6:	2300      	movs	r3, #0
    }
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f002 ff1f 	bl	800e01c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	33ac      	adds	r3, #172	@ 0xac
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
    }
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800b1fc:	2300      	movs	r3, #0
    }
 800b1fe:	4618      	mov	r0, r3
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
	...

0800b20c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800b220:	4b0f      	ldr	r3, [pc, #60]	@ (800b260 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800b222:	4a10      	ldr	r2, [pc, #64]	@ (800b264 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800b224:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800b228:	480f      	ldr	r0, [pc, #60]	@ (800b268 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800b22a:	f010 ff61 	bl	801c0f0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bf14      	ite	ne
 800b240:	2301      	movne	r3, #1
 800b242:	2300      	moveq	r3, #0
 800b244:	b2da      	uxtb	r2, r3
 800b246:	4b09      	ldr	r3, [pc, #36]	@ (800b26c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800b248:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	338c      	adds	r3, #140	@ 0x8c
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	4798      	blx	r3
    }
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	0801d978 	.word	0x0801d978
 800b264:	0801d9b0 	.word	0x0801d9b0
 800b268:	0801d934 	.word	0x0801d934
 800b26c:	24065a4e 	.word	0x24065a4e

0800b270 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	bf14      	ite	ne
 800b286:	2301      	movne	r3, #1
 800b288:	2300      	moveq	r3, #0
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	4b03      	ldr	r3, [pc, #12]	@ (800b29c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800b28e:	701a      	strb	r2, [r3, #0]
    }
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	24065a4f 	.word	0x24065a4f

0800b2a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b2a8:	2300      	movs	r3, #0
    }
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	460b      	mov	r3, r1
 800b2c0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ce:	887a      	ldrh	r2, [r7, #2]
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
        }
    }
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3318      	adds	r3, #24
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4798      	blx	r3
 800b2f6:	4603      	mov	r3, r0
    }
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b314:	429a      	cmp	r2, r3
 800b316:	d011      	beq.n	800b33c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800b318:	4b14      	ldr	r3, [pc, #80]	@ (800b36c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d11e      	bne.n	800b35e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800b320:	4b13      	ldr	r3, [pc, #76]	@ (800b370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800b326:	4b13      	ldr	r3, [pc, #76]	@ (800b374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b328:	881a      	ldrh	r2, [r3, #0]
 800b32a:	4b11      	ldr	r3, [pc, #68]	@ (800b370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b32c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800b32e:	4a11      	ldr	r2, [pc, #68]	@ (800b374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b330:	89bb      	ldrh	r3, [r7, #12]
 800b332:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800b334:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b336:	2201      	movs	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800b33a:	e010      	b.n	800b35e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800b33c:	4b0b      	ldr	r3, [pc, #44]	@ (800b36c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00c      	beq.n	800b35e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800b344:	4b0a      	ldr	r3, [pc, #40]	@ (800b370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800b34a:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b34c:	881a      	ldrh	r2, [r3, #0]
 800b34e:	4b08      	ldr	r3, [pc, #32]	@ (800b370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b350:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800b352:	4a08      	ldr	r2, [pc, #32]	@ (800b374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b354:	89fb      	ldrh	r3, [r7, #14]
 800b356:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800b358:	4b04      	ldr	r3, [pc, #16]	@ (800b36c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	701a      	strb	r2, [r3, #0]
    }
 800b35e:	bf00      	nop
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	24065a48 	.word	0x24065a48
 800b370:	24065a46 	.word	0x24065a46
 800b374:	24065a44 	.word	0x24065a44

0800b378 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	f002 f8a7 	bl	800d4d6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	4a05      	ldr	r2, [pc, #20]	@ (800b3b0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fe99 	bl	800b0d8 <_ZN8touchgfx3HALD1Ev>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	0801e458 	.word	0x0801e458

0800b3b4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff ffe7 	bl	800b390 <_ZN20TouchGFXGeneratedHALD1Ev>
 800b3c2:	217c      	movs	r1, #124	@ 0x7c
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f010 fe64 	bl	801c092 <_ZdlPvj>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff ffca 	bl	800b378 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f001 fbf8 	bl	800cbec <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 fc8e 	bl	800cd30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800b414:	4603      	mov	r3, r0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f001 fc8d 	bl	800cd4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b082      	sub	sp, #8
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	4618      	mov	r0, r3
 800b44a:	f001 fc95 	bl	800cd78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	607a      	str	r2, [r7, #4]
 800b462:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	f001 fc92 	bl	800cd94 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800b470:	4603      	mov	r3, r0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4618      	mov	r0, r3
 800b486:	f001 fbdf 	bl	800cc48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800b48a:	bf00      	nop
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b082      	sub	sp, #8
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 fbe3 	bl	800cc68 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800b4a2:	bf00      	nop
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f001 fbe5 	bl	800cc84 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f001 fbe7 	bl	800cca0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fc09 	bl	800ccfc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800b4ea:	4603      	mov	r3, r0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 fc09 	bl	800cd16 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	4a05      	ldr	r2, [pc, #20]	@ (800b52c <_ZN11TouchGFXHALD1Ev+0x20>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	601a      	str	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff ff37 	bl	800b390 <_ZN20TouchGFXGeneratedHALD1Ev>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	0801e238 	.word	0x0801e238

0800b530 <_ZN11TouchGFXHALD0Ev>:
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff ffe7 	bl	800b50c <_ZN11TouchGFXHALD1Ev>
 800b53e:	217c      	movs	r1, #124	@ 0x7c
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f010 fda6 	bl	801c092 <_ZdlPvj>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800b554:	2200      	movs	r2, #0
 800b556:	2101      	movs	r1, #1
 800b558:	2001      	movs	r0, #1
 800b55a:	f7f9 fc4a 	bl	8004df2 <osSemaphoreNew>
 800b55e:	4603      	mov	r3, r0
 800b560:	4a0f      	ldr	r2, [pc, #60]	@ (800b5a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800b562:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800b564:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d105      	bne.n	800b578 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800b56c:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800b56e:	4a0e      	ldr	r2, [pc, #56]	@ (800b5a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800b570:	2128      	movs	r1, #40	@ 0x28
 800b572:	480e      	ldr	r0, [pc, #56]	@ (800b5ac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800b574:	f010 fdbc 	bl	801c0f0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800b578:	2200      	movs	r2, #0
 800b57a:	2104      	movs	r1, #4
 800b57c:	2001      	movs	r0, #1
 800b57e:	f7f9 fd57 	bl	8005030 <osMessageQueueNew>
 800b582:	4603      	mov	r3, r0
 800b584:	4a0a      	ldr	r2, [pc, #40]	@ (800b5b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800b586:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800b588:	4b09      	ldr	r3, [pc, #36]	@ (800b5b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d105      	bne.n	800b59c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800b590:	4b08      	ldr	r3, [pc, #32]	@ (800b5b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800b592:	4a05      	ldr	r2, [pc, #20]	@ (800b5a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800b594:	212c      	movs	r1, #44	@ 0x2c
 800b596:	4805      	ldr	r0, [pc, #20]	@ (800b5ac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800b598:	f010 fdaa 	bl	801c0f0 <__assert_func>
}
 800b59c:	bf00      	nop
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	24064920 	.word	0x24064920
 800b5a4:	0801da00 	.word	0x0801da00
 800b5a8:	0801da4c 	.word	0x0801da4c
 800b5ac:	0801da7c 	.word	0x0801da7c
 800b5b0:	24064924 	.word	0x24064924
 800b5b4:	0801daa8 	.word	0x0801daa8

0800b5b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800b5bc:	4b04      	ldr	r3, [pc, #16]	@ (800b5d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f04f 31ff 	mov.w	r1, #4294967295
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7f9 fc9d 	bl	8004f04 <osSemaphoreAcquire>
}
 800b5ca:	bf00      	nop
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	24064920 	.word	0x24064920

0800b5d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800b5d8:	4b03      	ldr	r3, [pc, #12]	@ (800b5e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7f9 fce3 	bl	8004fa8 <osSemaphoreRelease>
}
 800b5e2:	bf00      	nop
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	24064920 	.word	0x24064920

0800b5ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800b5f0:	4b03      	ldr	r3, [pc, #12]	@ (800b600 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f9 fc84 	bl	8004f04 <osSemaphoreAcquire>
}
 800b5fc:	bf00      	nop
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	24064920 	.word	0x24064920

0800b604 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800b604:	b580      	push	{r7, lr}
 800b606:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800b608:	4b03      	ldr	r3, [pc, #12]	@ (800b618 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f9 fccb 	bl	8004fa8 <osSemaphoreRelease>
}
 800b612:	bf00      	nop
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	24064920 	.word	0x24064920

0800b61c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800b622:	4b09      	ldr	r3, [pc, #36]	@ (800b648 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	1d39      	adds	r1, r7, #4
 800b628:	2300      	movs	r3, #0
 800b62a:	2200      	movs	r2, #0
 800b62c:	f7f9 fd74 	bl	8005118 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800b630:	4b05      	ldr	r3, [pc, #20]	@ (800b648 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	1d39      	adds	r1, r7, #4
 800b636:	f04f 33ff 	mov.w	r3, #4294967295
 800b63a:	2200      	movs	r2, #0
 800b63c:	f7f9 fd6c 	bl	8005118 <osMessageQueueGet>
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	24064924 	.word	0x24064924

0800b64c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800b656:	88fb      	ldrh	r3, [r7, #6]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7f9 fbaf 	bl	8004dbc <osDelay>
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <__NVIC_DisableIRQ>:
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b676:	2b00      	cmp	r3, #0
 800b678:	db12      	blt.n	800b6a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b67a:	88fb      	ldrh	r3, [r7, #6]
 800b67c:	f003 021f 	and.w	r2, r3, #31
 800b680:	490a      	ldr	r1, [pc, #40]	@ (800b6ac <__NVIC_DisableIRQ+0x44>)
 800b682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b686:	095b      	lsrs	r3, r3, #5
 800b688:	2001      	movs	r0, #1
 800b68a:	fa00 f202 	lsl.w	r2, r0, r2
 800b68e:	3320      	adds	r3, #32
 800b690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b694:	f3bf 8f4f 	dsb	sy
}
 800b698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b69a:	f3bf 8f6f 	isb	sy
}
 800b69e:	bf00      	nop
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	e000e100 	.word	0xe000e100

0800b6b0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
        : color(0)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
    }
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
        return color;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
    }
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
    {
 800b6ec:	4a04      	ldr	r2, [pc, #16]	@ (800b700 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
    }
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	0801e360 	.word	0x0801e360

0800b704 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
    }
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff ffe9 	bl	800b6e4 <_ZN8touchgfx9DMA_QueueD1Ev>
 800b712:	2104      	movs	r1, #4
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f010 fcbc 	bl	801c092 <_ZdlPvj>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3344      	adds	r3, #68	@ 0x44
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	4798      	blx	r3
    }
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
    {
 800b748:	4a04      	ldr	r2, [pc, #16]	@ (800b75c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]
    }
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	0801e6d8 	.word	0x0801e6d8

0800b760 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
    }
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff ffe9 	bl	800b740 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800b76e:	210c      	movs	r1, #12
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f010 fc8e 	bl	801c092 <_ZdlPvj>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4618      	mov	r0, r3
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800b78a:	4a09      	ldr	r2, [pc, #36]	@ (800b7b0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	605a      	str	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	721a      	strb	r2, [r3, #8]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	725a      	strb	r2, [r3, #9]
    {
    }
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	0801e6d8 	.word	0x0801e6d8

0800b7b4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800b7bc:	2301      	movs	r3, #1
    }
 800b7be:	4618      	mov	r0, r3
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3328      	adds	r3, #40	@ 0x28
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
    }
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3314      	adds	r3, #20
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4610      	mov	r0, r2
 800b800:	4798      	blx	r3
    }
 800b802:	bf00      	nop
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 800b810:	4b13      	ldr	r3, [pc, #76]	@ (800b860 <DMA2D_IRQHandler+0x54>)
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f003 0302 	and.w	r3, r3, #2
 800b818:	2b00      	cmp	r3, #0
 800b81a:	bf14      	ite	ne
 800b81c:	2301      	movne	r3, #1
 800b81e:	2300      	moveq	r3, #0
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d019      	beq.n	800b85a <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 800b826:	4b0e      	ldr	r3, [pc, #56]	@ (800b860 <DMA2D_IRQHandler+0x54>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bf14      	ite	ne
 800b832:	2301      	movne	r3, #1
 800b834:	2300      	moveq	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00e      	beq.n	800b85a <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 800b83c:	4b08      	ldr	r3, [pc, #32]	@ (800b860 <DMA2D_IRQHandler+0x54>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a07      	ldr	r2, [pc, #28]	@ (800b860 <DMA2D_IRQHandler+0x54>)
 800b842:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b846:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 800b848:	4b05      	ldr	r3, [pc, #20]	@ (800b860 <DMA2D_IRQHandler+0x54>)
 800b84a:	2202      	movs	r2, #2
 800b84c:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800b84e:	f7fd f9a3 	bl	8008b98 <_ZN8touchgfx3HAL11getInstanceEv>
 800b852:	4603      	mov	r3, r0
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff ffc7 	bl	800b7e8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 800b85a:	bf00      	nop
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	52001000 	.word	0x52001000

0800b864 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	330c      	adds	r3, #12
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff ff1d 	bl	800b6b0 <_ZN8touchgfx9colortypeC1Ev>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 800b880:	b5b0      	push	{r4, r5, r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	330c      	adds	r3, #12
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7ff ff75 	bl	800b780 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800b896:	4a0e      	ldr	r2, [pc, #56]	@ (800b8d0 <_ZN8STM32DMAC1Ev+0x50>)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f103 000c 	add.w	r0, r3, #12
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	3320      	adds	r3, #32
 800b8a6:	2260      	movs	r2, #96	@ 0x60
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f002 fcf1 	bl	800e290 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3320      	adds	r3, #32
 800b8b2:	245f      	movs	r4, #95	@ 0x5f
 800b8b4:	461d      	mov	r5, r3
 800b8b6:	e004      	b.n	800b8c2 <_ZN8STM32DMAC1Ev+0x42>
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f7ff ffd3 	bl	800b864 <_ZN8touchgfx6BlitOpC1Ev>
 800b8be:	3c01      	subs	r4, #1
 800b8c0:	3524      	adds	r5, #36	@ 0x24
 800b8c2:	2c00      	cmp	r4, #0
 800b8c4:	daf8      	bge.n	800b8b8 <_ZN8STM32DMAC1Ev+0x38>
{
}
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b8d0:	0801e310 	.word	0x0801e310

0800b8d4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	4a09      	ldr	r2, [pc, #36]	@ (800b904 <_ZN8STM32DMAD1Ev+0x30>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800b8e2:	205a      	movs	r0, #90	@ 0x5a
 800b8e4:	f7ff fec0 	bl	800b668 <__NVIC_DisableIRQ>
}
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	330c      	adds	r3, #12
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fbdd 	bl	800c0ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff ff23 	bl	800b740 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	0801e310 	.word	0x0801e310

0800b908 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
}
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff ffdf 	bl	800b8d4 <_ZN8STM32DMAD1Ev>
 800b916:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f010 fbb9 	bl	801c092 <_ZdlPvj>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b934:	4b13      	ldr	r3, [pc, #76]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b936:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b93a:	4a12      	ldr	r2, [pc, #72]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b93c:	f043 0310 	orr.w	r3, r3, #16
 800b940:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800b944:	4b0f      	ldr	r3, [pc, #60]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b946:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b94a:	f003 0310 	and.w	r3, r3, #16
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800b952:	4b0c      	ldr	r3, [pc, #48]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b956:	4a0b      	ldr	r2, [pc, #44]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b958:	f043 0310 	orr.w	r3, r3, #16
 800b95c:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800b95e:	4b09      	ldr	r3, [pc, #36]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b962:	4a08      	ldr	r2, [pc, #32]	@ (800b984 <_ZN8STM32DMA10initializeEv+0x58>)
 800b964:	f023 0310 	bic.w	r3, r3, #16
 800b968:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800b96a:	2200      	movs	r2, #0
 800b96c:	2105      	movs	r1, #5
 800b96e:	205a      	movs	r0, #90	@ 0x5a
 800b970:	f7f5 fcde 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800b974:	205a      	movs	r0, #90	@ 0x5a
 800b976:	f7f5 fcf5 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 800b97a:	bf00      	nop
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	58024400 	.word	0x58024400

0800b988 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]

    switch (format)
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	2b0b      	cmp	r3, #11
 800b99c:	d826      	bhi.n	800b9ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800b99e:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800b9e1 	.word	0x0800b9e1
 800b9a8:	0800b9db 	.word	0x0800b9db
 800b9ac:	0800b9d5 	.word	0x0800b9d5
 800b9b0:	0800b9ed 	.word	0x0800b9ed
 800b9b4:	0800b9ed 	.word	0x0800b9ed
 800b9b8:	0800b9ed 	.word	0x0800b9ed
 800b9bc:	0800b9ed 	.word	0x0800b9ed
 800b9c0:	0800b9e7 	.word	0x0800b9e7
 800b9c4:	0800b9e7 	.word	0x0800b9e7
 800b9c8:	0800b9e7 	.word	0x0800b9e7
 800b9cc:	0800b9e7 	.word	0x0800b9e7
 800b9d0:	0800b9e7 	.word	0x0800b9e7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]
        break;
 800b9d8:	e00e      	b.n	800b9f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
        break;
 800b9de:	e00b      	b.n	800b9f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	60fb      	str	r3, [r7, #12]
        break;
 800b9e4:	e008      	b.n	800b9f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800b9e6:	2305      	movs	r3, #5
 800b9e8:	60fb      	str	r3, [r7, #12]
        break;
 800b9ea:	e005      	b.n	800b9f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800b9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ba04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800b9ee:	4a06      	ldr	r2, [pc, #24]	@ (800ba08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800b9f0:	216b      	movs	r1, #107	@ 0x6b
 800b9f2:	4806      	ldr	r0, [pc, #24]	@ (800ba0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800b9f4:	f010 fb7c 	bl	801c0f0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	0801daec 	.word	0x0801daec
 800ba08:	0801db08 	.word	0x0801db08
 800ba0c:	0801db54 	.word	0x0801db54

0800ba10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60fb      	str	r3, [r7, #12]

    switch (format)
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	2b0a      	cmp	r3, #10
 800ba24:	d821      	bhi.n	800ba6a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800ba26:	a201      	add	r2, pc, #4	@ (adr r2, 800ba2c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2c:	0800ba65 	.word	0x0800ba65
 800ba30:	0800ba5f 	.word	0x0800ba5f
 800ba34:	0800ba59 	.word	0x0800ba59
 800ba38:	0800ba6b 	.word	0x0800ba6b
 800ba3c:	0800ba6b 	.word	0x0800ba6b
 800ba40:	0800ba6b 	.word	0x0800ba6b
 800ba44:	0800ba6b 	.word	0x0800ba6b
 800ba48:	0800ba5f 	.word	0x0800ba5f
 800ba4c:	0800ba5f 	.word	0x0800ba5f
 800ba50:	0800ba5f 	.word	0x0800ba5f
 800ba54:	0800ba5f 	.word	0x0800ba5f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60fb      	str	r3, [r7, #12]
        break;
 800ba5c:	e00b      	b.n	800ba76 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	60fb      	str	r3, [r7, #12]
        break;
 800ba62:	e008      	b.n	800ba76 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800ba64:	2302      	movs	r3, #2
 800ba66:	60fb      	str	r3, [r7, #12]
        break;
 800ba68:	e005      	b.n	800ba76 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800ba6a:	4b05      	ldr	r3, [pc, #20]	@ (800ba80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800ba6c:	4a05      	ldr	r2, [pc, #20]	@ (800ba84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800ba6e:	218c      	movs	r1, #140	@ 0x8c
 800ba70:	4805      	ldr	r0, [pc, #20]	@ (800ba88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800ba72:	f010 fb3d 	bl	801c0f0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800ba76:	68fb      	ldr	r3, [r7, #12]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	0801daec 	.word	0x0801daec
 800ba84:	0801db80 	.word	0x0801db80
 800ba88:	0801db54 	.word	0x0801db54

0800ba8c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800ba94:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800baa4:	b590      	push	{r4, r7, lr}
 800baa6:	b089      	sub	sp, #36	@ 0x24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	7f5b      	ldrb	r3, [r3, #29]
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ff67 	bl	800b988 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800baba:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	7f9b      	ldrb	r3, [r3, #30]
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff ff60 	bl	800b988 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bac8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	7f9b      	ldrb	r3, [r3, #30]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7ff ff9d 	bl	800ba10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bad6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	8b5b      	ldrh	r3, [r3, #26]
 800badc:	461a      	mov	r2, r3
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	8a9b      	ldrh	r3, [r3, #20]
 800bae2:	1ad2      	subs	r2, r2, r3
 800bae4:	4b94      	ldr	r3, [pc, #592]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bae6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	8b5b      	ldrh	r3, [r3, #26]
 800baec:	461a      	mov	r2, r3
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	8a9b      	ldrh	r3, [r3, #20]
 800baf2:	1ad2      	subs	r2, r2, r3
 800baf4:	4b90      	ldr	r3, [pc, #576]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800baf6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	8b1b      	ldrh	r3, [r3, #24]
 800bafc:	461a      	mov	r2, r3
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	8a9b      	ldrh	r3, [r3, #20]
 800bb02:	1ad2      	subs	r2, r2, r3
 800bb04:	4b8c      	ldr	r3, [pc, #560]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb06:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800bb08:	4a8b      	ldr	r2, [pc, #556]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	8adb      	ldrh	r3, [r3, #22]
 800bb12:	461a      	mov	r2, r3
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	8a9b      	ldrh	r3, [r3, #20]
 800bb18:	041b      	lsls	r3, r3, #16
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	4b86      	ldr	r3, [pc, #536]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	4b84      	ldr	r3, [pc, #528]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	4b82      	ldr	r3, [pc, #520]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb2e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb38:	d036      	beq.n	800bba8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800bb3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb3e:	f200 80de 	bhi.w	800bcfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 800bb42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb46:	d015      	beq.n	800bb74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800bb48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb4c:	f200 80d7 	bhi.w	800bcfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 800bb50:	2b80      	cmp	r3, #128	@ 0x80
 800bb52:	d043      	beq.n	800bbdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 800bb54:	2b80      	cmp	r3, #128	@ 0x80
 800bb56:	f200 80d2 	bhi.w	800bcfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 800bb5a:	2b40      	cmp	r3, #64	@ 0x40
 800bb5c:	f000 80bb 	beq.w	800bcd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 800bb60:	2b40      	cmp	r3, #64	@ 0x40
 800bb62:	f200 80cc 	bhi.w	800bcfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 800bb66:	2b04      	cmp	r3, #4
 800bb68:	f000 80a1 	beq.w	800bcae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 800bb6c:	2b20      	cmp	r3, #32
 800bb6e:	f000 80b2 	beq.w	800bcd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 800bb72:	e0c4      	b.n	800bcfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	7f1b      	ldrb	r3, [r3, #28]
 800bb78:	061a      	lsls	r2, r3, #24
 800bb7a:	496f      	ldr	r1, [pc, #444]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb7c:	4b6f      	ldr	r3, [pc, #444]	@ (800bd3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	330c      	adds	r3, #12
 800bb86:	4c6c      	ldr	r4, [pc, #432]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff fd9f 	bl	800b6cc <_ZNK8touchgfx9colortypecvmEv>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bb92:	4a69      	ldr	r2, [pc, #420]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	4b66      	ldr	r3, [pc, #408]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bb9e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bba0:	4b65      	ldr	r3, [pc, #404]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bba2:	4a67      	ldr	r2, [pc, #412]	@ (800bd40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800bba4:	601a      	str	r2, [r3, #0]
        break;
 800bba6:	e0c2      	b.n	800bd2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	7f1b      	ldrb	r3, [r3, #28]
 800bbac:	061a      	lsls	r2, r3, #24
 800bbae:	4962      	ldr	r1, [pc, #392]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbb0:	4b64      	ldr	r3, [pc, #400]	@ (800bd44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	4c5f      	ldr	r4, [pc, #380]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff fd85 	bl	800b6cc <_ZNK8touchgfx9colortypecvmEv>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bbc6:	4a5c      	ldr	r2, [pc, #368]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	4b59      	ldr	r3, [pc, #356]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbd2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bbd4:	4b58      	ldr	r3, [pc, #352]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbd6:	4a5a      	ldr	r2, [pc, #360]	@ (800bd40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800bbd8:	601a      	str	r2, [r3, #0]
        break;
 800bbda:	e0a8      	b.n	800bd2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	7f1b      	ldrb	r3, [r3, #28]
 800bbea:	061a      	lsls	r2, r3, #24
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	4a51      	ldr	r2, [pc, #324]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbf6:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bbf8:	4a4f      	ldr	r2, [pc, #316]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	691a      	ldr	r2, [r3, #16]
 800bc02:	4b4d      	ldr	r3, [pc, #308]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc04:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	1d1a      	adds	r2, r3, #4
 800bc0a:	4b4b      	ldr	r3, [pc, #300]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc0c:	62da      	str	r2, [r3, #44]	@ 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d00d      	beq.n	800bc38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
 800bc1c:	e020      	b.n	800bc60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800bc1e:	4b46      	ldr	r3, [pc, #280]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc20:	69da      	ldr	r2, [r3, #28]
 800bc22:	4b49      	ldr	r3, [pc, #292]	@ (800bd48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800bc24:	4013      	ands	r3, r2
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	8852      	ldrh	r2, [r2, #2]
 800bc2a:	3a01      	subs	r2, #1
 800bc2c:	0212      	lsls	r2, r2, #8
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4a41      	ldr	r2, [pc, #260]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc32:	430b      	orrs	r3, r1
 800bc34:	61d3      	str	r3, [r2, #28]
                break;
 800bc36:	e01a      	b.n	800bc6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	7f1b      	ldrb	r3, [r3, #28]
 800bc3c:	2bff      	cmp	r3, #255	@ 0xff
 800bc3e:	d101      	bne.n	800bc44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
                {
                    blend = false;
 800bc40:	2300      	movs	r3, #0
 800bc42:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800bc44:	4b3c      	ldr	r3, [pc, #240]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc46:	69da      	ldr	r2, [r3, #28]
 800bc48:	4b3f      	ldr	r3, [pc, #252]	@ (800bd48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	8852      	ldrh	r2, [r2, #2]
 800bc50:	3a01      	subs	r2, #1
 800bc52:	0212      	lsls	r2, r2, #8
 800bc54:	4313      	orrs	r3, r2
 800bc56:	4a38      	ldr	r2, [pc, #224]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc58:	f043 0310 	orr.w	r3, r3, #16
 800bc5c:	61d3      	str	r3, [r2, #28]
                break;
 800bc5e:	e006      	b.n	800bc6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800bc60:	4b3a      	ldr	r3, [pc, #232]	@ (800bd4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800bc62:	4a3b      	ldr	r2, [pc, #236]	@ (800bd50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800bc64:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800bc68:	483a      	ldr	r0, [pc, #232]	@ (800bd54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800bc6a:	f010 fa41 	bl	801c0f0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800bc6e:	4b32      	ldr	r3, [pc, #200]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	4a31      	ldr	r2, [pc, #196]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc74:	f043 0320 	orr.w	r3, r3, #32
 800bc78:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800bc7a:	bf00      	nop
 800bc7c:	4b2e      	ldr	r3, [pc, #184]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	f003 0320 	and.w	r3, r3, #32
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bf14      	ite	ne
 800bc88:	2301      	movne	r3, #1
 800bc8a:	2300      	moveq	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1f4      	bne.n	800bc7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800bc92:	4b29      	ldr	r3, [pc, #164]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bc94:	2210      	movs	r2, #16
 800bc96:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800bc98:	7ffb      	ldrb	r3, [r7, #31]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bc9e:	4b26      	ldr	r3, [pc, #152]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bca0:	4a27      	ldr	r2, [pc, #156]	@ (800bd40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800bca2:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 800bca4:	e043      	b.n	800bd2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bca6:	4b24      	ldr	r3, [pc, #144]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bca8:	4a2b      	ldr	r2, [pc, #172]	@ (800bd58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800bcaa:	601a      	str	r2, [r3, #0]
        break;
 800bcac:	e03f      	b.n	800bd2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	7f1b      	ldrb	r3, [r3, #28]
 800bcb2:	061a      	lsls	r2, r3, #24
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	4a1f      	ldr	r2, [pc, #124]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bcba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcbe:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bcc0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	691a      	ldr	r2, [r3, #16]
 800bcca:	4b1b      	ldr	r3, [pc, #108]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bccc:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bcce:	4b1a      	ldr	r3, [pc, #104]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bcd0:	4a1b      	ldr	r2, [pc, #108]	@ (800bd40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800bcd2:	601a      	str	r2, [r3, #0]
        break;
 800bcd4:	e02b      	b.n	800bd2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	7f1b      	ldrb	r3, [r3, #28]
 800bcda:	061a      	lsls	r2, r3, #24
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	4a15      	ldr	r2, [pc, #84]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bce6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bce8:	4a13      	ldr	r2, [pc, #76]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	691a      	ldr	r2, [r3, #16]
 800bcf2:	4b11      	ldr	r3, [pc, #68]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bcf4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bcf6:	4b10      	ldr	r3, [pc, #64]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bcf8:	4a11      	ldr	r2, [pc, #68]	@ (800bd40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800bcfa:	601a      	str	r2, [r3, #0]
        break;
 800bcfc:	e017      	b.n	800bd2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	7f1b      	ldrb	r3, [r3, #28]
 800bd02:	061a      	lsls	r2, r3, #24
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	4a0b      	ldr	r2, [pc, #44]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bd0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd0e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	7f5a      	ldrb	r2, [r3, #29]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	7f9b      	ldrb	r3, [r3, #30]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d003      	beq.n	800bd24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bd1c:	4b06      	ldr	r3, [pc, #24]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bd1e:	4a0e      	ldr	r2, [pc, #56]	@ (800bd58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800bd20:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }

        break;
 800bd22:	e003      	b.n	800bd2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800bd24:	4b04      	ldr	r3, [pc, #16]	@ (800bd38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800bd26:	f242 3201 	movw	r2, #8961	@ 0x2301
 800bd2a:	601a      	str	r2, [r3, #0]
        break;
 800bd2c:	bf00      	nop
    }
}
 800bd2e:	bf00      	nop
 800bd30:	3724      	adds	r7, #36	@ 0x24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd90      	pop	{r4, r7, pc}
 800bd36:	bf00      	nop
 800bd38:	52001000 	.word	0x52001000
 800bd3c:	0002000a 	.word	0x0002000a
 800bd40:	00022301 	.word	0x00022301
 800bd44:	00020009 	.word	0x00020009
 800bd48:	ffff00ef 	.word	0xffff00ef
 800bd4c:	0801dbcc 	.word	0x0801dbcc
 800bd50:	0801dbe8 	.word	0x0801dbe8
 800bd54:	0801db54 	.word	0x0801db54
 800bd58:	00012301 	.word	0x00012301

0800bd5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	7f9b      	ldrb	r3, [r3, #30]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fe4f 	bl	800ba10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bd72:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800bd74:	4a2f      	ldr	r2, [pc, #188]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	8adb      	ldrh	r3, [r3, #22]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	8a9b      	ldrh	r3, [r3, #20]
 800bd84:	041b      	lsls	r3, r3, #16
 800bd86:	431a      	orrs	r2, r3
 800bd88:	4b2a      	ldr	r3, [pc, #168]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bd8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	691a      	ldr	r2, [r3, #16]
 800bd90:	4b28      	ldr	r3, [pc, #160]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bd92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	8b5b      	ldrh	r3, [r3, #26]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	8a9b      	ldrh	r3, [r3, #20]
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	4b24      	ldr	r3, [pc, #144]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bda2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b08      	cmp	r3, #8
 800bdaa:	d12d      	bne.n	800be08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	8b5b      	ldrh	r3, [r3, #26]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	8a9b      	ldrh	r3, [r3, #20]
 800bdb6:	1ad2      	subs	r2, r2, r3
 800bdb8:	4b1e      	ldr	r3, [pc, #120]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bdba:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	8b5b      	ldrh	r3, [r3, #26]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	8a9b      	ldrh	r3, [r3, #20]
 800bdc6:	1ad2      	subs	r2, r2, r3
 800bdc8:	4b1a      	ldr	r3, [pc, #104]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bdca:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bdcc:	4a19      	ldr	r2, [pc, #100]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	7f1b      	ldrb	r3, [r3, #28]
 800bdd6:	061a      	lsls	r2, r3, #24
 800bdd8:	4916      	ldr	r1, [pc, #88]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bdda:	4b17      	ldr	r3, [pc, #92]	@ (800be38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800bddc:	4313      	orrs	r3, r2
 800bdde:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	330c      	adds	r3, #12
 800bde4:	4c13      	ldr	r4, [pc, #76]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff fc70 	bl	800b6cc <_ZNK8touchgfx9colortypecvmEv>
 800bdec:	4603      	mov	r3, r0
 800bdee:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	691a      	ldr	r2, [r3, #16]
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bdf6:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	691a      	ldr	r2, [r3, #16]
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800bdfe:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 800be00:	4b0c      	ldr	r3, [pc, #48]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800be02:	4a0e      	ldr	r2, [pc, #56]	@ (800be3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800be04:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 800be06:	e010      	b.n	800be2a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800be08:	4a0a      	ldr	r2, [pc, #40]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800be0e:	4b09      	ldr	r3, [pc, #36]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800be10:	2200      	movs	r2, #0
 800be12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	4c06      	ldr	r4, [pc, #24]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fc56 	bl	800b6cc <_ZNK8touchgfx9colortypecvmEv>
 800be20:	4603      	mov	r3, r0
 800be22:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 800be24:	4b03      	ldr	r3, [pc, #12]	@ (800be34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800be26:	4a06      	ldr	r2, [pc, #24]	@ (800be40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800be28:	601a      	str	r2, [r3, #0]
}
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd90      	pop	{r4, r7, pc}
 800be32:	bf00      	nop
 800be34:	52001000 	.word	0x52001000
 800be38:	00010009 	.word	0x00010009
 800be3c:	00022301 	.word	0x00022301
 800be40:	00032301 	.word	0x00032301

0800be44 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800be48:	bf00      	nop
 800be4a:	4b09      	ldr	r3, [pc, #36]	@ (800be70 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	bf14      	ite	ne
 800be56:	2301      	movne	r3, #1
 800be58:	2300      	moveq	r3, #0
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1f4      	bne.n	800be4a <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800be60:	4b03      	ldr	r3, [pc, #12]	@ (800be70 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 800be62:	2223      	movs	r2, #35	@ 0x23
 800be64:	609a      	str	r2, [r3, #8]
}
 800be66:	bf00      	nop
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	52001000 	.word	0x52001000

0800be74 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800be7e:	4b1b      	ldr	r3, [pc, #108]	@ (800beec <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be86:	2b00      	cmp	r3, #0
 800be88:	bf14      	ite	ne
 800be8a:	2301      	movne	r3, #1
 800be8c:	2300      	moveq	r3, #0
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d025      	beq.n	800bee0 <_ZN8touchgfx5paint9flushLineEPmi+0x6c>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	617b      	str	r3, [r7, #20]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	dd1d      	ble.n	800bede <_ZN8touchgfx5paint9flushLineEPmi+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f003 021f 	and.w	r2, r3, #31
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	4413      	add	r3, r2
 800beac:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800beb2:	f3bf 8f4f 	dsb	sy
}
 800beb6:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800beb8:	4a0c      	ldr	r2, [pc, #48]	@ (800beec <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	3320      	adds	r3, #32
 800bec4:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3b20      	subs	r3, #32
 800beca:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dcf2      	bgt.n	800beb8 <_ZN8touchgfx5paint9flushLineEPmi+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 800bed2:	f3bf 8f4f 	dsb	sy
}
 800bed6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bed8:	f3bf 8f6f 	isb	sy
}
 800bedc:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800bede:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 800bee0:	bf00      	nop
 800bee2:	371c      	adds	r7, #28
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	e000ed00 	.word	0xe000ed00

0800bef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800befe:	bf00      	nop
 800bf00:	4b21      	ldr	r3, [pc, #132]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bf14      	ite	ne
 800bf0c:	2301      	movne	r3, #1
 800bf0e:	2300      	moveq	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1f4      	bne.n	800bf00 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bf16:	4b1c      	ldr	r3, [pc, #112]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf18:	2223      	movs	r2, #35	@ 0x23
 800bf1a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	041b      	lsls	r3, r3, #16
 800bf26:	4a18      	ldr	r2, [pc, #96]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf28:	f043 0301 	orr.w	r3, r3, #1
 800bf2c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800bf2e:	4a16      	ldr	r2, [pc, #88]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	2bff      	cmp	r3, #255	@ 0xff
 800bf38:	d017      	beq.n	800bf6a <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bf3a:	4b13      	ldr	r3, [pc, #76]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	061a      	lsls	r2, r3, #24
 800bf44:	4910      	ldr	r1, [pc, #64]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf46:	4b11      	ldr	r3, [pc, #68]	@ (800bf8c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800bf4c:	4a0e      	ldr	r2, [pc, #56]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf54:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800bf56:	4a0c      	ldr	r2, [pc, #48]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800bf5c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800bf62:	4b09      	ldr	r3, [pc, #36]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf64:	4a0a      	ldr	r2, [pc, #40]	@ (800bf90 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa0>)
 800bf66:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 800bf68:	e008      	b.n	800bf7c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800bf6a:	4b07      	ldr	r3, [pc, #28]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color);
 800bf70:	4a05      	ldr	r2, [pc, #20]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800bf76:	4b04      	ldr	r3, [pc, #16]	@ (800bf88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 800bf78:	4a06      	ldr	r2, [pc, #24]	@ (800bf94 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa4>)
 800bf7a:	601a      	str	r2, [r3, #0]
}
 800bf7c:	bf00      	nop
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	52001000 	.word	0x52001000
 800bf8c:	00010009 	.word	0x00010009
 800bf90:	00020001 	.word	0x00020001
 800bf94:	00030001 	.word	0x00030001

0800bf98 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800bfa6:	bf00      	nop
 800bfa8:	4b1f      	ldr	r3, [pc, #124]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	bf14      	ite	ne
 800bfb4:	2301      	movne	r3, #1
 800bfb6:	2300      	moveq	r3, #0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1f4      	bne.n	800bfa8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bfbe:	4b1a      	ldr	r3, [pc, #104]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfc0:	2223      	movs	r2, #35	@ 0x23
 800bfc2:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800bfc4:	4b18      	ldr	r3, [pc, #96]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	041b      	lsls	r3, r3, #16
 800bfce:	4a16      	ldr	r2, [pc, #88]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfd0:	f043 0301 	orr.w	r3, r3, #1
 800bfd4:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800bfd6:	4a14      	ldr	r2, [pc, #80]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800bfdc:	4a12      	ldr	r2, [pc, #72]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	2bff      	cmp	r3, #255	@ 0xff
 800bfe6:	d00f      	beq.n	800c008 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	061a      	lsls	r2, r3, #24
 800bfec:	490e      	ldr	r1, [pc, #56]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bfee:	4b0f      	ldr	r3, [pc, #60]	@ (800c02c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	61cb      	str	r3, [r1, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bff4:	4b0c      	ldr	r3, [pc, #48]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800bffa:	4a0b      	ldr	r2, [pc, #44]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800c000:	4b09      	ldr	r3, [pc, #36]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800c002:	4a0a      	ldr	r2, [pc, #40]	@ (800c02c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 800c004:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800c006:	e008      	b.n	800c01a <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800c008:	78fb      	ldrb	r3, [r7, #3]
 800c00a:	061a      	lsls	r2, r3, #24
 800c00c:	4906      	ldr	r1, [pc, #24]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800c00e:	4b07      	ldr	r3, [pc, #28]	@ (800c02c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 800c010:	4313      	orrs	r3, r2
 800c012:	61cb      	str	r3, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800c014:	4b04      	ldr	r3, [pc, #16]	@ (800c028 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
}
 800c01a:	bf00      	nop
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	52001000 	.word	0x52001000
 800c02c:	00020001 	.word	0x00020001

0800c030 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800c03e:	bf00      	nop
 800c040:	4b18      	ldr	r3, [pc, #96]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	2b00      	cmp	r3, #0
 800c04a:	bf14      	ite	ne
 800c04c:	2301      	movne	r3, #1
 800c04e:	2300      	moveq	r3, #0
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1f4      	bne.n	800c040 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x10>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c056:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c058:	2223      	movs	r2, #35	@ 0x23
 800c05a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800c05c:	4b11      	ldr	r3, [pc, #68]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c05e:	2201      	movs	r2, #1
 800c060:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	041b      	lsls	r3, r3, #16
 800c066:	4a0f      	ldr	r2, [pc, #60]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c068:	f043 0301 	orr.w	r3, r3, #1
 800c06c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800c06e:	4a0d      	ldr	r2, [pc, #52]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800c074:	4a0b      	ldr	r2, [pc, #44]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	061b      	lsls	r3, r3, #24
 800c07e:	4a09      	ldr	r2, [pc, #36]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c084:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c086:	4b07      	ldr	r3, [pc, #28]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c088:	2201      	movs	r2, #1
 800c08a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800c08c:	4a05      	ldr	r2, [pc, #20]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800c092:	4b04      	ldr	r3, [pc, #16]	@ (800c0a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 800c094:	4a04      	ldr	r2, [pc, #16]	@ (800c0a8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x78>)
 800c096:	601a      	str	r2, [r3, #0]
}
 800c098:	bf00      	nop
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	52001000 	.word	0x52001000
 800c0a8:	00020001 	.word	0x00020001

0800c0ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	4a05      	ldr	r2, [pc, #20]	@ (800c0cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fb11 	bl	800b6e4 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	0801e728 	.word	0x0801e728

0800c0d0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff ffe7 	bl	800c0ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c0de:	2114      	movs	r1, #20
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f00f ffd6 	bl	801c092 <_ZdlPvj>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800c0f8:	4a04      	ldr	r2, [pc, #16]	@ (800c10c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6013      	str	r3, [r2, #0]
    }
 800c0fe:	bf00      	nop
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	24065aac 	.word	0x24065aac

0800c110 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800c11e:	4a0b      	ldr	r2, [pc, #44]	@ (800c14c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	611a      	str	r2, [r3, #16]
    {
    }
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4618      	mov	r0, r3
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	0801e448 	.word	0x0801e448

0800c150 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
    {
 800c158:	4a04      	ldr	r2, [pc, #16]	@ (800c16c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
    }
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	0801e448 	.word	0x0801e448

0800c170 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
    }
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff ffe9 	bl	800c150 <_ZN8touchgfx7MVPHeapD1Ev>
 800c17e:	2114      	movs	r1, #20
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f00f ff86 	bl	801c092 <_ZdlPvj>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
    {
 800c198:	4a04      	ldr	r2, [pc, #16]	@ (800c1ac <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	601a      	str	r2, [r3, #0]
    }
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	0801e898 	.word	0x0801e898

0800c1b0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    }
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff ffe9 	bl	800c190 <_ZN8touchgfx3LCDD1Ev>
 800c1be:	210c      	movs	r1, #12
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f00f ff66 	bl	801c092 <_ZdlPvj>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
            : startX(0),
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	801a      	strh	r2, [r3, #0]
              startY(0),
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	805a      	strh	r2, [r3, #2]
              downX(0),
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	809a      	strh	r2, [r3, #4]
              downY(0),
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	739a      	strb	r2, [r3, #14]
        {
        }
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff ffd5 	bl	800c1d0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	611a      	str	r2, [r3, #16]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	829a      	strh	r2, [r3, #20]
    {
    }
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
 800c248:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800c24a:	4a55      	ldr	r2, [pc, #340]	@ (800c3a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	619a      	str	r2, [r3, #24]
          gestures(),
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	331c      	adds	r3, #28
 800c278:	4618      	mov	r0, r3
 800c27a:	f7ff ffcc 	bl	800c216 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3350      	adds	r3, #80	@ 0x50
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fd fa92 	bl	80097f2 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 800c356:	4a13      	ldr	r2, [pc, #76]	@ (800c3a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800c35c:	4a12      	ldr	r2, [pc, #72]	@ (800c3a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800c35e:	8b3b      	ldrh	r3, [r7, #24]
 800c360:	8013      	strh	r3, [r2, #0]
 800c362:	4b11      	ldr	r3, [pc, #68]	@ (800c3a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800c364:	881a      	ldrh	r2, [r3, #0]
 800c366:	4b11      	ldr	r3, [pc, #68]	@ (800c3ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800c368:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800c36a:	4a11      	ldr	r2, [pc, #68]	@ (800c3b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800c36c:	8bbb      	ldrh	r3, [r7, #28]
 800c36e:	8013      	strh	r3, [r2, #0]
 800c370:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800c372:	881a      	ldrh	r2, [r3, #0]
 800c374:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800c376:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800c378:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800c37e:	8b3a      	ldrh	r2, [r7, #24]
 800c380:	8bbb      	ldrh	r3, [r7, #28]
 800c382:	429a      	cmp	r2, r3
 800c384:	bf34      	ite	cc
 800c386:	2301      	movcc	r3, #1
 800c388:	2300      	movcs	r3, #0
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	461a      	mov	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	0801e600 	.word	0x0801e600
 800c3a4:	24065a50 	.word	0x24065a50
 800c3a8:	24065a44 	.word	0x24065a44
 800c3ac:	24065a4a 	.word	0x24065a4a
 800c3b0:	24065a46 	.word	0x24065a46
 800c3b4:	24065a4c 	.word	0x24065a4c
 800c3b8:	24065a48 	.word	0x24065a48

0800c3bc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fc fde5 	bl	8008f98 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800c3ce:	bf00      	nop
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af02      	add	r7, sp, #8
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	68b9      	ldr	r1, [r7, #8]
 800c3f2:	f7ff fe8d 	bl	800c110 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800c3f6:	4a04      	ldr	r2, [pc, #16]	@ (800c408 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	601a      	str	r2, [r3, #0]
    {

    }
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0801e434 	.word	0x0801e434

0800c40c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
 800c410:	4801      	ldr	r0, [pc, #4]	@ (800c418 <__tcf_0+0xc>)
 800c412:	f000 f965 	bl	800c6e0 <_ZN12FrontendHeapD1Ev>
 800c416:	bd80      	pop	{r7, pc}
 800c418:	24064928 	.word	0x24064928

0800c41c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800c420:	4b11      	ldr	r3, [pc, #68]	@ (800c468 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f3bf 8f5b 	dmb	ish
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bf0c      	ite	eq
 800c430:	2301      	moveq	r3, #1
 800c432:	2300      	movne	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d013      	beq.n	800c462 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800c43a:	480b      	ldr	r0, [pc, #44]	@ (800c468 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800c43c:	f00f fe2b 	bl	801c096 <__cxa_guard_acquire>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	bf14      	ite	ne
 800c446:	2301      	movne	r3, #1
 800c448:	2300      	moveq	r3, #0
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d008      	beq.n	800c462 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800c450:	4806      	ldr	r0, [pc, #24]	@ (800c46c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800c452:	f000 f867 	bl	800c524 <_ZN12FrontendHeapC1Ev>
 800c456:	4806      	ldr	r0, [pc, #24]	@ (800c470 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800c458:	f00f fe68 	bl	801c12c <atexit>
 800c45c:	4802      	ldr	r0, [pc, #8]	@ (800c468 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800c45e:	f00f fe26 	bl	801c0ae <__cxa_guard_release>
        return instance;
 800c462:	4b02      	ldr	r3, [pc, #8]	@ (800c46c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800c464:	4618      	mov	r0, r3
 800c466:	bd80      	pop	{r7, pc}
 800c468:	24064bac 	.word	0x24064bac
 800c46c:	24064928 	.word	0x24064928
 800c470:	0800c40d 	.word	0x0800c40d

0800c474 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	4a05      	ldr	r2, [pc, #20]	@ (800c494 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff fe63 	bl	800c150 <_ZN8touchgfx7MVPHeapD1Ev>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	0801e434 	.word	0x0801e434

0800c498 <_ZN16FrontendHeapBaseD0Ev>:
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff ffe7 	bl	800c474 <_ZN16FrontendHeapBaseD1Ev>
 800c4a6:	2114      	movs	r1, #20
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f00f fdf2 	bl	801c092 <_ZdlPvj>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fd62 	bl	800cf8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c4c8:	4a03      	ldr	r2, [pc, #12]	@ (800c4d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	0801e400 	.word	0x0801e400

0800c4dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fd50 	bl	800cf8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c4ec:	4a03      	ldr	r2, [pc, #12]	@ (800c4fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	0801e3cc 	.word	0x0801e3cc

0800c500 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 fd3e 	bl	800cf8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c510:	4a03      	ldr	r2, [pc, #12]	@ (800c520 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	0801e398 	.word	0x0801e398

0800c524 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800c524:	b590      	push	{r4, r7, lr}
 800c526:	b085      	sub	sp, #20
 800c528:	af02      	add	r7, sp, #8
 800c52a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f103 0114 	add.w	r1, r3, #20
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f503 7488 	add.w	r4, r3, #272	@ 0x110
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f503 7394 	add.w	r3, r3, #296	@ 0x128
                     app(model, *this)
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	4623      	mov	r3, r4
 800c54a:	f7ff ff45 	bl	800c3d8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800c54e:	4a18      	ldr	r2, [pc, #96]	@ (800c5b0 <_ZN12FrontendHeapC1Ev+0x8c>)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3314      	adds	r3, #20
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff ffad 	bl	800c4b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	332c      	adds	r3, #44	@ 0x2c
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff ffba 	bl	800c4dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff ffc6 	bl	800c500 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe fafe 	bl	800ab7c <_ZN5ModelC1Ev>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	4619      	mov	r1, r3
 800c590:	f7fe fade 	bl	800ab50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800c59c:	4619      	mov	r1, r3
 800c59e:	4610      	mov	r0, r2
 800c5a0:	f7ff ff0c 	bl	800c3bc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd90      	pop	{r4, r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	0801e384 	.word	0x0801e384

0800c5b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	8bbb      	ldrh	r3, [r7, #28]
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	8b3b      	ldrh	r3, [r7, #24]
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	f7ff fe33 	bl	800c23c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800c5d6:	4a04      	ldr	r2, [pc, #16]	@ (800c5e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	601a      	str	r2, [r3, #0]
    }
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	0801e458 	.word	0x0801e458

0800c5ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af02      	add	r7, sp, #8
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
 800c5f8:	603b      	str	r3, [r7, #0]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	8bbb      	ldrh	r3, [r7, #28]
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	8b3b      	ldrh	r3, [r7, #24]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	68b9      	ldr	r1, [r7, #8]
 800c60a:	f7ff ffd3 	bl	800c5b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c60e:	4a04      	ldr	r2, [pc, #16]	@ (800c620 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	601a      	str	r2, [r3, #0]
    }
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	0801e238 	.word	0x0801e238

0800c624 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	4a04      	ldr	r2, [pc, #16]	@ (800c640 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	0801e220 	.word	0x0801e220

0800c644 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff ffe8 	bl	800c624 <_ZN8touchgfx15TouchControllerC1Ev>
 800c654:	4a03      	ldr	r2, [pc, #12]	@ (800c664 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	0801e208 	.word	0x0801e208

0800c668 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800c66e:	f7fe f871 	bl	800a754 <_ZN14BitmapDatabase11getInstanceEv>
 800c672:	4604      	mov	r4, r0
 800c674:	f7fe f878 	bl	800a768 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800c678:	4603      	mov	r3, r0
 800c67a:	4619      	mov	r1, r3
 800c67c:	2300      	movs	r3, #0
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	2300      	movs	r3, #0
 800c682:	2200      	movs	r2, #0
 800c684:	4620      	mov	r0, r4
 800c686:	f005 fc7f 	bl	8011f88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800c68a:	4809      	ldr	r0, [pc, #36]	@ (800c6b0 <touchgfx_init+0x48>)
 800c68c:	f7ff fd30 	bl	800c0f0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800c690:	2000      	movs	r0, #0
 800c692:	f7fe f995 	bl	800a9c0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800c696:	4807      	ldr	r0, [pc, #28]	@ (800c6b4 <touchgfx_init+0x4c>)
 800c698:	f005 fb22 	bl	8011ce0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800c69c:	f7ff febe 	bl	800c41c <_ZN12FrontendHeap11getInstanceEv>
 800c6a0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800c6a2:	4805      	ldr	r0, [pc, #20]	@ (800c6b8 <touchgfx_init+0x50>)
 800c6a4:	f7fe fea2 	bl	800b3ec <_ZN11TouchGFXHAL10initializeEv>
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd90      	pop	{r4, r7, pc}
 800c6b0:	240659c0 	.word	0x240659c0
 800c6b4:	24000018 	.word	0x24000018
 800c6b8:	240659c4 	.word	0x240659c4

0800c6bc <touchgfx_components_init>:

void touchgfx_components_init()
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
}
 800c6c0:	bf00      	nop
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
	...

0800c6cc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800c6d0:	4802      	ldr	r0, [pc, #8]	@ (800c6dc <touchgfx_taskEntry+0x10>)
 800c6d2:	f000 ff6a 	bl	800d5aa <_ZN8touchgfx3HAL9taskEntryEv>
}
 800c6d6:	bf00      	nop
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	240659c4 	.word	0x240659c4

0800c6e0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	4a10      	ldr	r2, [pc, #64]	@ (800c72c <_ZN12FrontendHeapD1Ev+0x4c>)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe f9f5 	bl	800aae4 <_ZN19FrontendApplicationD1Ev>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c700:	4618      	mov	r0, r3
 800c702:	f000 f827 	bl	800c754 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	332c      	adds	r3, #44	@ 0x2c
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 f844 	bl	800c798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3314      	adds	r3, #20
 800c714:	4618      	mov	r0, r3
 800c716:	f000 f861 	bl	800c7dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff fea9 	bl	800c474 <_ZN16FrontendHeapBaseD1Ev>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	0801e384 	.word	0x0801e384

0800c730 <_ZN12FrontendHeapD0Ev>:
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7ff ffd1 	bl	800c6e0 <_ZN12FrontendHeapD1Ev>
 800c73e:	f44f 7121 	mov.w	r1, #644	@ 0x284
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f00f fca5 	bl	801c092 <_ZdlPvj>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	4a05      	ldr	r2, [pc, #20]	@ (800c774 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4618      	mov	r0, r3
 800c766:	f000 fc10 	bl	800cf8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4618      	mov	r0, r3
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	0801e398 	.word	0x0801e398

0800c778 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff ffe7 	bl	800c754 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c786:	2114      	movs	r1, #20
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f00f fc82 	bl	801c092 <_ZdlPvj>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	4a05      	ldr	r2, [pc, #20]	@ (800c7b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	601a      	str	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fbee 	bl	800cf8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	0801e3cc 	.word	0x0801e3cc

0800c7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff ffe7 	bl	800c798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c7ca:	21e4      	movs	r1, #228	@ 0xe4
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f00f fc60 	bl	801c092 <_ZdlPvj>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	4a05      	ldr	r2, [pc, #20]	@ (800c7fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	601a      	str	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 fbcc 	bl	800cf8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	0801e400 	.word	0x0801e400

0800c800 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff ffe7 	bl	800c7dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c80e:	2118      	movs	r1, #24
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f00f fc3e 	bl	801c092 <_ZdlPvj>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	4a05      	ldr	r2, [pc, #20]	@ (800c840 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff fcad 	bl	800c190 <_ZN8touchgfx3LCDD1Ev>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	0801ec74 	.word	0x0801ec74

0800c844 <_ZN8touchgfx8LCD24bppD0Ev>:
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff ffe7 	bl	800c820 <_ZN8touchgfx8LCD24bppD1Ev>
 800c852:	216c      	movs	r1, #108	@ 0x6c
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f00f fc1c 	bl	801c092 <_ZdlPvj>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <_Z41__static_initialization_and_destruction_0ii>:
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af02      	add	r7, sp, #8
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d119      	bne.n	800c8a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d114      	bne.n	800c8a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800c87e:	4818      	ldr	r0, [pc, #96]	@ (800c8e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c880:	f7ff fee0 	bl	800c644 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800c884:	4817      	ldr	r0, [pc, #92]	@ (800c8e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c886:	f7fe fffb 	bl	800b880 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800c88a:	4817      	ldr	r0, [pc, #92]	@ (800c8e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c88c:	f009 f9dc 	bl	8015c48 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800c890:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	4b10      	ldr	r3, [pc, #64]	@ (800c8e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c89e:	4a12      	ldr	r2, [pc, #72]	@ (800c8e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c8a0:	4910      	ldr	r1, [pc, #64]	@ (800c8e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c8a2:	4812      	ldr	r0, [pc, #72]	@ (800c8ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c8a4:	f7ff fea2 	bl	800c5ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d113      	bne.n	800c8d6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d10e      	bne.n	800c8d6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800c8b8:	480c      	ldr	r0, [pc, #48]	@ (800c8ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c8ba:	f7fe fe27 	bl	800b50c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800c8be:	480c      	ldr	r0, [pc, #48]	@ (800c8f0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800c8c0:	f7fb fdd0 	bl	8008464 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800c8c4:	4808      	ldr	r0, [pc, #32]	@ (800c8e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c8c6:	f7ff ffab 	bl	800c820 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800c8ca:	4806      	ldr	r0, [pc, #24]	@ (800c8e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c8cc:	f7ff f802 	bl	800b8d4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800c8d0:	4803      	ldr	r0, [pc, #12]	@ (800c8e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c8d2:	f7fe fb83 	bl	800afdc <_ZN20STM32TouchControllerD1Ev>
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	24064bb0 	.word	0x24064bb0
 800c8e4:	24064bb4 	.word	0x24064bb4
 800c8e8:	24065954 	.word	0x24065954
 800c8ec:	240659c4 	.word	0x240659c4
 800c8f0:	24000018 	.word	0x24000018

0800c8f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800c8fc:	2301      	movs	r3, #1
    }
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800c90a:	b480      	push	{r7}
 800c90c:	b083      	sub	sp, #12
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800c912:	230c      	movs	r3, #12
    }
 800c914:	4618      	mov	r0, r3
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800c92c:	887a      	ldrh	r2, [r7, #2]
 800c92e:	4613      	mov	r3, r2
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	3308      	adds	r3, #8
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	4413      	add	r3, r2
    }
 800c93c:	4618      	mov	r0, r3
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800c954:	887a      	ldrh	r2, [r7, #2]
 800c956:	4613      	mov	r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	3308      	adds	r3, #8
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	4413      	add	r3, r2
    }
 800c964:	4618      	mov	r0, r3
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800c978:	2301      	movs	r3, #1
    }
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800c98e:	23dc      	movs	r3, #220	@ 0xdc
    }
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c9a8:	887b      	ldrh	r3, [r7, #2]
 800c9aa:	22dc      	movs	r2, #220	@ 0xdc
 800c9ac:	fb02 f303 	mul.w	r3, r2, r3
 800c9b0:	3308      	adds	r3, #8
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	4413      	add	r3, r2
    }
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c9ce:	887b      	ldrh	r3, [r7, #2]
 800c9d0:	22dc      	movs	r2, #220	@ 0xdc
 800c9d2:	fb02 f303 	mul.w	r3, r2, r3
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
    }
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800c9f0:	2301      	movs	r3, #1
    }
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800c9fe:	b480      	push	{r7}
 800ca00:	b083      	sub	sp, #12
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800ca06:	2310      	movs	r3, #16
    }
 800ca08:	4618      	mov	r0, r3
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800ca20:	887b      	ldrh	r3, [r7, #2]
 800ca22:	011b      	lsls	r3, r3, #4
 800ca24:	3308      	adds	r3, #8
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4413      	add	r3, r2
    }
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	460b      	mov	r3, r1
 800ca40:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800ca42:	887b      	ldrh	r3, [r7, #2]
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	3308      	adds	r3, #8
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	4413      	add	r3, r2
    }
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <_GLOBAL__sub_I_touchgfx_init>:
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ca60:	2001      	movs	r0, #1
 800ca62:	f7ff feff 	bl	800c864 <_Z41__static_initialization_and_destruction_0ii>
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <_GLOBAL__sub_D_touchgfx_init>:
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ca70:	2000      	movs	r0, #0
 800ca72:	f7ff fef7 	bl	800c864 <_Z41__static_initialization_and_destruction_0ii>
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800ca8a:	78fb      	ldrb	r3, [r7, #3]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d105      	bne.n	800ca9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e027      	b.n	800caec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800ca9c:	78fb      	ldrb	r3, [r7, #3]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d123      	bne.n	800caea <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d014      	beq.n	800cad4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	339c      	adds	r3, #156	@ 0x9c
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	4798      	blx	r3
 800cab6:	4603      	mov	r3, r0
 800cab8:	461a      	mov	r2, r3
 800caba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d008      	beq.n	800cad4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800cac2:	4b0c      	ldr	r3, [pc, #48]	@ (800caf4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	f083 0301 	eor.w	r3, r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800cad0:	2301      	movs	r3, #1
 800cad2:	e000      	b.n	800cad6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800cad4:	2300      	movs	r3, #0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d005      	beq.n	800cae6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	78fa      	ldrb	r2, [r7, #3]
 800cade:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e002      	b.n	800caec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e000      	b.n	800caec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800caea:	2300      	movs	r3, #0
    }
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	24065a4e 	.word	0x24065a4e

0800caf8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <__NVIC_EnableIRQ>:
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	db0b      	blt.n	800cb3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	f003 021f 	and.w	r2, r3, #31
 800cb2c:	4907      	ldr	r1, [pc, #28]	@ (800cb4c <__NVIC_EnableIRQ+0x38>)
 800cb2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb32:	095b      	lsrs	r3, r3, #5
 800cb34:	2001      	movs	r0, #1
 800cb36:	fa00 f202 	lsl.w	r2, r0, r2
 800cb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cb3e:	bf00      	nop
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	e000e100 	.word	0xe000e100

0800cb50 <__NVIC_DisableIRQ>:
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	db12      	blt.n	800cb88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb62:	88fb      	ldrh	r3, [r7, #6]
 800cb64:	f003 021f 	and.w	r2, r3, #31
 800cb68:	490a      	ldr	r1, [pc, #40]	@ (800cb94 <__NVIC_DisableIRQ+0x44>)
 800cb6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb6e:	095b      	lsrs	r3, r3, #5
 800cb70:	2001      	movs	r0, #1
 800cb72:	fa00 f202 	lsl.w	r2, r0, r2
 800cb76:	3320      	adds	r3, #32
 800cb78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb7c:	f3bf 8f4f 	dsb	sy
}
 800cb80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cb82:	f3bf 8f6f 	isb	sy
}
 800cb86:	bf00      	nop
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	e000e100 	.word	0xe000e100

0800cb98 <__NVIC_SetPriority>:
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	4603      	mov	r3, r0
 800cba0:	6039      	str	r1, [r7, #0]
 800cba2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	db0a      	blt.n	800cbc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	490c      	ldr	r1, [pc, #48]	@ (800cbe4 <__NVIC_SetPriority+0x4c>)
 800cbb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbb6:	0112      	lsls	r2, r2, #4
 800cbb8:	b2d2      	uxtb	r2, r2
 800cbba:	440b      	add	r3, r1
 800cbbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cbc0:	e00a      	b.n	800cbd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	4908      	ldr	r1, [pc, #32]	@ (800cbe8 <__NVIC_SetPriority+0x50>)
 800cbc8:	88fb      	ldrh	r3, [r7, #6]
 800cbca:	f003 030f 	and.w	r3, r3, #15
 800cbce:	3b04      	subs	r3, #4
 800cbd0:	0112      	lsls	r2, r2, #4
 800cbd2:	b2d2      	uxtb	r2, r2
 800cbd4:	440b      	add	r3, r1
 800cbd6:	761a      	strb	r2, [r3, #24]
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	e000e100 	.word	0xe000e100
 800cbe8:	e000ed00 	.word	0xe000ed00

0800cbec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800cbec:	b5b0      	push	{r4, r5, r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fcc3 	bl	800d582 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800cbfc:	687d      	ldr	r5, [r7, #4]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3364      	adds	r3, #100	@ 0x64
 800cc04:	681c      	ldr	r4, [r3, #0]
 800cc06:	f002 fc9f 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	490a      	ldr	r1, [pc, #40]	@ (800cc40 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x54>)
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff ff6e 	bl	800caf8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2101      	movs	r1, #1
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff ff29 	bl	800ca78 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3388      	adds	r3, #136	@ 0x88
 800cc2e:	681c      	ldr	r4, [r3, #0]
 800cc30:	2300      	movs	r3, #0
 800cc32:	2200      	movs	r2, #0
 800cc34:	4903      	ldr	r1, [pc, #12]	@ (800cc44 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 800cc36:	47a0      	blx	r4
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc40:	0800b64d 	.word	0x0800b64d
 800cc44:	240000dc 	.word	0x240000dc

0800cc48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800cc50:	2109      	movs	r1, #9
 800cc52:	205a      	movs	r0, #90	@ 0x5a
 800cc54:	f7ff ffa0 	bl	800cb98 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800cc58:	2109      	movs	r1, #9
 800cc5a:	2058      	movs	r0, #88	@ 0x58
 800cc5c:	f7ff ff9c 	bl	800cb98 <__NVIC_SetPriority>
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800cc70:	205a      	movs	r0, #90	@ 0x5a
 800cc72:	f7ff ff4f 	bl	800cb14 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800cc76:	2058      	movs	r0, #88	@ 0x58
 800cc78:	f7ff ff4c 	bl	800cb14 <__NVIC_EnableIRQ>
}
 800cc7c:	bf00      	nop
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800cc8c:	205a      	movs	r0, #90	@ 0x5a
 800cc8e:	f7ff ff5f 	bl	800cb50 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800cc92:	2058      	movs	r0, #88	@ 0x58
 800cc94:	f7ff ff5c 	bl	800cb50 <__NVIC_DisableIRQ>
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800cca8:	4b11      	ldr	r3, [pc, #68]	@ (800ccf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800ccba:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	4b0a      	ldr	r3, [pc, #40]	@ (800ccf8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800ccce:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800ccd0:	4b08      	ldr	r3, [pc, #32]	@ (800ccf4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800ccd2:	881a      	ldrh	r2, [r3, #0]
 800ccd4:	4b06      	ldr	r3, [pc, #24]	@ (800ccf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800ccd6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800ccd8:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800ccda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccdc:	4a04      	ldr	r2, [pc, #16]	@ (800ccf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800ccde:	f043 0301 	orr.w	r3, r3, #1
 800cce2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800cce4:	bf00      	nop
 800cce6:	370c      	adds	r7, #12
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	50001000 	.word	0x50001000
 800ccf4:	24065a40 	.word	0x24065a40
 800ccf8:	24065a42 	.word	0x24065a42

0800ccfc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f000 fc22 	bl	800d550 <_ZN8touchgfx3HAL10beginFrameEv>
 800cd0c:	4603      	mov	r3, r0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b082      	sub	sp, #8
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 fc21 	bl	800d568 <_ZN8touchgfx3HAL8endFrameEv>
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800cd38:	4b03      	ldr	r3, [pc, #12]	@ (800cd48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	50001084 	.word	0x50001084

0800cd4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800cd56:	4a06      	ldr	r2, [pc, #24]	@ (800cd70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800cd5c:	4b05      	ldr	r3, [pc, #20]	@ (800cd74 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800cd5e:	2201      	movs	r2, #1
 800cd60:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800cd62:	bf00      	nop
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	50001084 	.word	0x50001084
 800cd74:	50001000 	.word	0x50001000

0800cd78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 fbab 	bl	800d4e2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
 800cda0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	68b9      	ldr	r1, [r7, #8]
 800cdaa:	f000 fd0c 	bl	800d7c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800cdae:	4603      	mov	r3, r0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800cdc0:	4b0d      	ldr	r3, [pc, #52]	@ (800cdf8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800cdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdc4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800cdc6:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 800cdd6:	89fa      	ldrh	r2, [r7, #14]
 800cdd8:	89bb      	ldrh	r3, [r7, #12]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d304      	bcc.n	800cde8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 800cdde:	89fa      	ldrh	r2, [r7, #14]
 800cde0:	89bb      	ldrh	r3, [r7, #12]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	e000      	b.n	800cdea <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	50001000 	.word	0x50001000

0800cdfc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b087      	sub	sp, #28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800ce04:	4b25      	ldr	r3, [pc, #148]	@ (800ce9c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	bf14      	ite	ne
 800ce10:	2301      	movne	r3, #1
 800ce12:	2300      	moveq	r3, #0
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d03a      	beq.n	800ce90 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800ce1a:	4b20      	ldr	r3, [pc, #128]	@ (800ce9c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ce22:	f3bf 8f4f 	dsb	sy
}
 800ce26:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800ce28:	4b1c      	ldr	r3, [pc, #112]	@ (800ce9c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800ce2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce2e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	0b5b      	lsrs	r3, r3, #13
 800ce34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ce38:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	08db      	lsrs	r3, r3, #3
 800ce3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce42:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	015a      	lsls	r2, r3, #5
 800ce48:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800ce4c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800ce52:	4912      	ldr	r1, [pc, #72]	@ (800ce9c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	1e5a      	subs	r2, r3, #1
 800ce5e:	60fa      	str	r2, [r7, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bf14      	ite	ne
 800ce64:	2301      	movne	r3, #1
 800ce66:	2300      	moveq	r3, #0
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1ea      	bne.n	800ce44 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	1e5a      	subs	r2, r3, #1
 800ce72:	613a      	str	r2, [r7, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	bf14      	ite	ne
 800ce78:	2301      	movne	r3, #1
 800ce7a:	2300      	moveq	r3, #0
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1db      	bne.n	800ce3a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800ce82:	f3bf 8f4f 	dsb	sy
}
 800ce86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce88:	f3bf 8f6f 	isb	sy
}
 800ce8c:	bf00      	nop
}
 800ce8e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800ce90:	bf00      	nop
 800ce92:	371c      	adds	r7, #28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	e000ed00 	.word	0xe000ed00

0800cea0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800cea8:	4b25      	ldr	r3, [pc, #148]	@ (800cf40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	bf14      	ite	ne
 800ceb4:	2301      	movne	r3, #1
 800ceb6:	2300      	moveq	r3, #0
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d03a      	beq.n	800cf34 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800cebe:	4b20      	ldr	r3, [pc, #128]	@ (800cf40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cec6:	f3bf 8f4f 	dsb	sy
}
 800ceca:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800cecc:	4b1c      	ldr	r3, [pc, #112]	@ (800cf40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800cece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	0b5b      	lsrs	r3, r3, #13
 800ced8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cedc:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	08db      	lsrs	r3, r3, #3
 800cee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cee6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	015a      	lsls	r2, r3, #5
 800ceec:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800cef0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800cef6:	4912      	ldr	r1, [pc, #72]	@ (800cf40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	1e5a      	subs	r2, r3, #1
 800cf02:	60fa      	str	r2, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bf14      	ite	ne
 800cf08:	2301      	movne	r3, #1
 800cf0a:	2300      	moveq	r3, #0
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1ea      	bne.n	800cee8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	1e5a      	subs	r2, r3, #1
 800cf16:	613a      	str	r2, [r7, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	bf14      	ite	ne
 800cf1c:	2301      	movne	r3, #1
 800cf1e:	2300      	moveq	r3, #0
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1db      	bne.n	800cede <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800cf26:	f3bf 8f4f 	dsb	sy
}
 800cf2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf2c:	f3bf 8f6f 	isb	sy
}
 800cf30:	bf00      	nop
}
 800cf32:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800cf34:	bf00      	nop
 800cf36:	371c      	adds	r7, #28
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	e000ed00 	.word	0xe000ed00

0800cf44 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800cf44:	8880      	ldrh	r0, [r0, #4]
 800cf46:	4770      	bx	lr

0800cf48 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	6803      	ldr	r3, [r0, #0]
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	2100      	movs	r1, #0
 800cf50:	4605      	mov	r5, r0
 800cf52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf54:	4798      	blx	r3
 800cf56:	4606      	mov	r6, r0
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	1ba4      	subs	r4, r4, r6
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	b2a4      	uxth	r4, r4
 800cf62:	4798      	blx	r3
 800cf64:	fbb4 f0f0 	udiv	r0, r4, r0
 800cf68:	bd70      	pop	{r4, r5, r6, pc}

0800cf6a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	8083      	strh	r3, [r0, #4]
 800cf6e:	4770      	bx	lr

0800cf70 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800cf70:	b510      	push	{r4, lr}
 800cf72:	6803      	ldr	r3, [r0, #0]
 800cf74:	4604      	mov	r4, r0
 800cf76:	8881      	ldrh	r1, [r0, #4]
 800cf78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7a:	4798      	blx	r3
 800cf7c:	88a3      	ldrh	r3, [r4, #4]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	80a3      	strh	r3, [r4, #4]
 800cf82:	bd10      	pop	{r4, pc}

0800cf84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800cf84:	6803      	ldr	r3, [r0, #0]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf88:	4718      	bx	r3

0800cf8a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800cf8a:	4770      	bx	lr

0800cf8c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800cf8c:	4a02      	ldr	r2, [pc, #8]	@ (800cf98 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800cf8e:	6002      	str	r2, [r0, #0]
 800cf90:	2200      	movs	r2, #0
 800cf92:	8082      	strh	r2, [r0, #4]
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	0801e530 	.word	0x0801e530

0800cf9c <_ZN8touchgfx9Container13getFirstChildEv>:
 800cf9c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800cf9e:	4770      	bx	lr

0800cfa0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800cfa0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	b12b      	cbz	r3, 800cfb2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800cfa6:	b920      	cbnz	r0, 800cfb2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800cfa8:	1a5a      	subs	r2, r3, r1
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	4250      	negs	r0, r2
 800cfae:	4150      	adcs	r0, r2
 800cfb0:	e7f8      	b.n	800cfa4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800cfb2:	4770      	bx	lr

0800cfb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	6148      	str	r0, [r1, #20]
 800cfb8:	618b      	str	r3, [r1, #24]
 800cfba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cfbc:	b913      	cbnz	r3, 800cfc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800cfbe:	6281      	str	r1, [r0, #40]	@ 0x28
 800cfc0:	4770      	bx	lr
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	699a      	ldr	r2, [r3, #24]
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	d1fb      	bne.n	800cfc2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800cfca:	6199      	str	r1, [r3, #24]
 800cfcc:	4770      	bx	lr

0800cfce <_ZN8touchgfx9Container9removeAllEv>:
 800cfce:	2200      	movs	r2, #0
 800cfd0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cfd2:	b123      	cbz	r3, 800cfde <_ZN8touchgfx9Container9removeAllEv+0x10>
 800cfd4:	6999      	ldr	r1, [r3, #24]
 800cfd6:	6281      	str	r1, [r0, #40]	@ 0x28
 800cfd8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800cfdc:	e7f8      	b.n	800cfd0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800cfde:	4770      	bx	lr

0800cfe0 <_ZN8touchgfx9Container6unlinkEv>:
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	6283      	str	r3, [r0, #40]	@ 0x28
 800cfe4:	4770      	bx	lr

0800cfe6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	8002      	strh	r2, [r0, #0]
 800cfea:	8042      	strh	r2, [r0, #2]
 800cfec:	8082      	strh	r2, [r0, #4]
 800cfee:	80c2      	strh	r2, [r0, #6]
 800cff0:	4770      	bx	lr

0800cff2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800cff2:	b570      	push	{r4, r5, r6, lr}
 800cff4:	460d      	mov	r5, r1
 800cff6:	4616      	mov	r6, r2
 800cff8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800cffa:	b13c      	cbz	r4, 800d00c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800cffc:	6823      	ldr	r3, [r4, #0]
 800cffe:	4620      	mov	r0, r4
 800d000:	4632      	mov	r2, r6
 800d002:	4629      	mov	r1, r5
 800d004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d006:	4798      	blx	r3
 800d008:	69a4      	ldr	r4, [r4, #24]
 800d00a:	e7f6      	b.n	800cffa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d00c:	bd70      	pop	{r4, r5, r6, pc}

0800d00e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d00e:	b538      	push	{r3, r4, r5, lr}
 800d010:	460d      	mov	r5, r1
 800d012:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d014:	b134      	cbz	r4, 800d024 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d016:	682b      	ldr	r3, [r5, #0]
 800d018:	4621      	mov	r1, r4
 800d01a:	4628      	mov	r0, r5
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	4798      	blx	r3
 800d020:	69a4      	ldr	r4, [r4, #24]
 800d022:	e7f7      	b.n	800d014 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d024:	bd38      	pop	{r3, r4, r5, pc}

0800d026 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d026:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d028:	b19b      	cbz	r3, 800d052 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d02a:	428b      	cmp	r3, r1
 800d02c:	d109      	bne.n	800d042 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d02e:	699a      	ldr	r2, [r3, #24]
 800d030:	2100      	movs	r1, #0
 800d032:	6159      	str	r1, [r3, #20]
 800d034:	6282      	str	r2, [r0, #40]	@ 0x28
 800d036:	b902      	cbnz	r2, 800d03a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d038:	4770      	bx	lr
 800d03a:	6199      	str	r1, [r3, #24]
 800d03c:	4770      	bx	lr
 800d03e:	4613      	mov	r3, r2
 800d040:	b13a      	cbz	r2, 800d052 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d042:	699a      	ldr	r2, [r3, #24]
 800d044:	428a      	cmp	r2, r1
 800d046:	d1fa      	bne.n	800d03e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d048:	698a      	ldr	r2, [r1, #24]
 800d04a:	619a      	str	r2, [r3, #24]
 800d04c:	2300      	movs	r3, #0
 800d04e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d052:	4770      	bx	lr

0800d054 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d054:	b410      	push	{r4}
 800d056:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d058:	4604      	mov	r4, r0
 800d05a:	b92b      	cbnz	r3, 800d068 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d05c:	6803      	ldr	r3, [r0, #0]
 800d05e:	4611      	mov	r1, r2
 800d060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d066:	4718      	bx	r3
 800d068:	b941      	cbnz	r1, 800d07c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d06a:	6193      	str	r3, [r2, #24]
 800d06c:	6282      	str	r2, [r0, #40]	@ 0x28
 800d06e:	6154      	str	r4, [r2, #20]
 800d070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d074:	4770      	bx	lr
 800d076:	4603      	mov	r3, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	d0f9      	beq.n	800d070 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d07c:	4299      	cmp	r1, r3
 800d07e:	6998      	ldr	r0, [r3, #24]
 800d080:	d1f9      	bne.n	800d076 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d082:	6190      	str	r0, [r2, #24]
 800d084:	618a      	str	r2, [r1, #24]
 800d086:	e7f2      	b.n	800d06e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08c:	461f      	mov	r7, r3
 800d08e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d092:	460d      	mov	r5, r1
 800d094:	4616      	mov	r6, r2
 800d096:	b103      	cbz	r3, 800d09a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d098:	6038      	str	r0, [r7, #0]
 800d09a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d09c:	b314      	cbz	r4, 800d0e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d09e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d0a2:	b1eb      	cbz	r3, 800d0e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d0a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d0a8:	428d      	cmp	r5, r1
 800d0aa:	db19      	blt.n	800d0e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d0ac:	b289      	uxth	r1, r1
 800d0ae:	8923      	ldrh	r3, [r4, #8]
 800d0b0:	440b      	add	r3, r1
 800d0b2:	b21b      	sxth	r3, r3
 800d0b4:	429d      	cmp	r5, r3
 800d0b6:	da13      	bge.n	800d0e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d0b8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d0bc:	4296      	cmp	r6, r2
 800d0be:	db0f      	blt.n	800d0e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d0c0:	b292      	uxth	r2, r2
 800d0c2:	8963      	ldrh	r3, [r4, #10]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b21b      	sxth	r3, r3
 800d0c8:	429e      	cmp	r6, r3
 800d0ca:	da09      	bge.n	800d0e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d0cc:	6823      	ldr	r3, [r4, #0]
 800d0ce:	1ab2      	subs	r2, r6, r2
 800d0d0:	1a69      	subs	r1, r5, r1
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800d0d8:	b212      	sxth	r2, r2
 800d0da:	463b      	mov	r3, r7
 800d0dc:	b209      	sxth	r1, r1
 800d0de:	47c0      	blx	r8
 800d0e0:	69a4      	ldr	r4, [r4, #24]
 800d0e2:	e7db      	b.n	800d09c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ec:	4c6d      	ldr	r4, [pc, #436]	@ (800d2a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d0ee:	b0a1      	sub	sp, #132	@ 0x84
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	6824      	ldr	r4, [r4, #0]
 800d0f4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800d0f6:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800d0fa:	2400      	movs	r4, #0
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	802c      	strh	r4, [r5, #0]
 800d100:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800d102:	802c      	strh	r4, [r5, #0]
 800d104:	601c      	str	r4, [r3, #0]
 800d106:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d10a:	f7ff ffbd 	bl	800d088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d10e:	f1b9 0f03 	cmp.w	r9, #3
 800d112:	f340 80c1 	ble.w	800d298 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d116:	4631      	mov	r1, r6
 800d118:	a80c      	add	r0, sp, #48	@ 0x30
 800d11a:	f003 fb29 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d11e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d122:	9306      	str	r3, [sp, #24]
 800d124:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800d128:	9307      	str	r3, [sp, #28]
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	f8d3 a000 	ldr.w	sl, [r3]
 800d130:	f1ba 0f00 	cmp.w	sl, #0
 800d134:	f000 80b3 	beq.w	800d29e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d138:	4651      	mov	r1, sl
 800d13a:	a810      	add	r0, sp, #64	@ 0x40
 800d13c:	f003 fb18 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d140:	2002      	movs	r0, #2
 800d142:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	9a06      	ldr	r2, [sp, #24]
 800d14a:	fb91 f1f0 	sdiv	r1, r1, r0
 800d14e:	189d      	adds	r5, r3, r2
 800d150:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800d154:	9a07      	ldr	r2, [sp, #28]
 800d156:	4419      	add	r1, r3
 800d158:	9b02      	ldr	r3, [sp, #8]
 800d15a:	4413      	add	r3, r2
 800d15c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800d160:	1a6d      	subs	r5, r5, r1
 800d162:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800d166:	fb92 f2f0 	sdiv	r2, r2, r0
 800d16a:	440a      	add	r2, r1
 800d16c:	1a9b      	subs	r3, r3, r2
 800d16e:	435b      	muls	r3, r3
 800d170:	fb05 3505 	mla	r5, r5, r5, r3
 800d174:	4f4c      	ldr	r7, [pc, #304]	@ (800d2a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d176:	ac10      	add	r4, sp, #64	@ 0x40
 800d178:	f1b9 0f0c 	cmp.w	r9, #12
 800d17c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d17e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d180:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d184:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d188:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d18c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d190:	f04f 0303 	mov.w	r3, #3
 800d194:	bfd8      	it	le
 800d196:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d19a:	f04f 0400 	mov.w	r4, #0
 800d19e:	f8cd 9000 	str.w	r9, [sp]
 800d1a2:	bfcc      	ite	gt
 800d1a4:	4698      	movgt	r8, r3
 800d1a6:	fb92 f8f3 	sdivle	r8, r2, r3
 800d1aa:	1c63      	adds	r3, r4, #1
 800d1ac:	aa10      	add	r2, sp, #64	@ 0x40
 800d1ae:	f004 0401 	and.w	r4, r4, #1
 800d1b2:	f04f 0b00 	mov.w	fp, #0
 800d1b6:	9308      	str	r3, [sp, #32]
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d1be:	fb93 f3f8 	sdiv	r3, r3, r8
 800d1c2:	3404      	adds	r4, #4
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	9a04      	ldr	r2, [sp, #16]
 800d1ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d1ce:	fb13 f302 	smulbb	r3, r3, r2
 800d1d2:	9a01      	ldr	r2, [sp, #4]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	1899      	adds	r1, r3, r2
 800d1d8:	9305      	str	r3, [sp, #20]
 800d1da:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d1de:	b209      	sxth	r1, r1
 800d1e0:	4299      	cmp	r1, r3
 800d1e2:	db4d      	blt.n	800d280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d1e4:	8932      	ldrh	r2, [r6, #8]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	b21b      	sxth	r3, r3
 800d1ea:	4299      	cmp	r1, r3
 800d1ec:	da48      	bge.n	800d280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d1ee:	9b04      	ldr	r3, [sp, #16]
 800d1f0:	6827      	ldr	r7, [r4, #0]
 800d1f2:	fb17 f703 	smulbb	r7, r7, r3
 800d1f6:	9b02      	ldr	r3, [sp, #8]
 800d1f8:	b2bf      	uxth	r7, r7
 800d1fa:	18fa      	adds	r2, r7, r3
 800d1fc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d200:	b212      	sxth	r2, r2
 800d202:	429a      	cmp	r2, r3
 800d204:	db3c      	blt.n	800d280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d206:	8970      	ldrh	r0, [r6, #10]
 800d208:	4403      	add	r3, r0
 800d20a:	b21b      	sxth	r3, r3
 800d20c:	429a      	cmp	r2, r3
 800d20e:	da37      	bge.n	800d280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d210:	2300      	movs	r3, #0
 800d212:	4630      	mov	r0, r6
 800d214:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d216:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d218:	f7ff ff36 	bl	800d088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d21c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d21e:	b37a      	cbz	r2, 800d280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d220:	4552      	cmp	r2, sl
 800d222:	d02d      	beq.n	800d280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d224:	4611      	mov	r1, r2
 800d226:	a80e      	add	r0, sp, #56	@ 0x38
 800d228:	9209      	str	r2, [sp, #36]	@ 0x24
 800d22a:	f003 faa1 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d22e:	f04f 0e02 	mov.w	lr, #2
 800d232:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800d236:	9a06      	ldr	r2, [sp, #24]
 800d238:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800d23c:	9b01      	ldr	r3, [sp, #4]
 800d23e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800d242:	4413      	add	r3, r2
 800d244:	9a07      	ldr	r2, [sp, #28]
 800d246:	fb91 f1fe 	sdiv	r1, r1, lr
 800d24a:	fb9c fcfe 	sdiv	ip, ip, lr
 800d24e:	4401      	add	r1, r0
 800d250:	1a58      	subs	r0, r3, r1
 800d252:	9b02      	ldr	r3, [sp, #8]
 800d254:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800d258:	4413      	add	r3, r2
 800d25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d25c:	448c      	add	ip, r1
 800d25e:	eba3 030c 	sub.w	r3, r3, ip
 800d262:	435b      	muls	r3, r3
 800d264:	fb00 3300 	mla	r3, r0, r0, r3
 800d268:	42ab      	cmp	r3, r5
 800d26a:	d208      	bcs.n	800d27e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d26c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d26e:	461d      	mov	r5, r3
 800d270:	9803      	ldr	r0, [sp, #12]
 800d272:	6001      	str	r1, [r0, #0]
 800d274:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800d276:	9805      	ldr	r0, [sp, #20]
 800d278:	8008      	strh	r0, [r1, #0]
 800d27a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800d27c:	800f      	strh	r7, [r1, #0]
 800d27e:	4692      	mov	sl, r2
 800d280:	f10b 0b01 	add.w	fp, fp, #1
 800d284:	3408      	adds	r4, #8
 800d286:	f1bb 0f04 	cmp.w	fp, #4
 800d28a:	d19d      	bne.n	800d1c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d28c:	9b00      	ldr	r3, [sp, #0]
 800d28e:	9c08      	ldr	r4, [sp, #32]
 800d290:	444b      	add	r3, r9
 800d292:	4544      	cmp	r4, r8
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	d188      	bne.n	800d1aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d298:	b021      	add	sp, #132	@ 0x84
 800d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29e:	f04f 35ff 	mov.w	r5, #4294967295
 800d2a2:	e767      	b.n	800d174 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d2a4:	24065a50 	.word	0x24065a50
 800d2a8:	0801dc28 	.word	0x0801dc28

0800d2ac <_ZN8touchgfx4RectaNERKS0_>:
 800d2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d2b4:	888c      	ldrh	r4, [r1, #4]
 800d2b6:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d2ba:	443c      	add	r4, r7
 800d2bc:	b2a4      	uxth	r4, r4
 800d2be:	fa0f f884 	sxth.w	r8, r4
 800d2c2:	45c1      	cmp	r9, r8
 800d2c4:	da2f      	bge.n	800d326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d2c6:	8882      	ldrh	r2, [r0, #4]
 800d2c8:	444a      	add	r2, r9
 800d2ca:	b292      	uxth	r2, r2
 800d2cc:	fa0f fe82 	sxth.w	lr, r2
 800d2d0:	4577      	cmp	r7, lr
 800d2d2:	da28      	bge.n	800d326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d2d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d2d8:	88cb      	ldrh	r3, [r1, #6]
 800d2da:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d2de:	442b      	add	r3, r5
 800d2e0:	b21b      	sxth	r3, r3
 800d2e2:	429e      	cmp	r6, r3
 800d2e4:	da1f      	bge.n	800d326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d2e6:	88c3      	ldrh	r3, [r0, #6]
 800d2e8:	4433      	add	r3, r6
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	fa0f fc83 	sxth.w	ip, r3
 800d2f0:	4565      	cmp	r5, ip
 800d2f2:	da18      	bge.n	800d326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d2f4:	454f      	cmp	r7, r9
 800d2f6:	bfb8      	it	lt
 800d2f8:	464f      	movlt	r7, r9
 800d2fa:	42b5      	cmp	r5, r6
 800d2fc:	bfb8      	it	lt
 800d2fe:	4635      	movlt	r5, r6
 800d300:	45f0      	cmp	r8, lr
 800d302:	bfd8      	it	le
 800d304:	4622      	movle	r2, r4
 800d306:	1bd2      	subs	r2, r2, r7
 800d308:	8082      	strh	r2, [r0, #4]
 800d30a:	884a      	ldrh	r2, [r1, #2]
 800d30c:	88c9      	ldrh	r1, [r1, #6]
 800d30e:	8007      	strh	r7, [r0, #0]
 800d310:	440a      	add	r2, r1
 800d312:	8045      	strh	r5, [r0, #2]
 800d314:	b292      	uxth	r2, r2
 800d316:	b211      	sxth	r1, r2
 800d318:	458c      	cmp	ip, r1
 800d31a:	bfa8      	it	ge
 800d31c:	4613      	movge	r3, r2
 800d31e:	1b5b      	subs	r3, r3, r5
 800d320:	80c3      	strh	r3, [r0, #6]
 800d322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d326:	2300      	movs	r3, #0
 800d328:	8003      	strh	r3, [r0, #0]
 800d32a:	8043      	strh	r3, [r0, #2]
 800d32c:	8083      	strh	r3, [r0, #4]
 800d32e:	80c3      	strh	r3, [r0, #6]
 800d330:	e7f7      	b.n	800d322 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d332 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d332:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	dd06      	ble.n	800d348 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d33a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d33e:	2800      	cmp	r0, #0
 800d340:	bfcc      	ite	gt
 800d342:	2000      	movgt	r0, #0
 800d344:	2001      	movle	r0, #1
 800d346:	4770      	bx	lr
 800d348:	2001      	movs	r0, #1
 800d34a:	4770      	bx	lr

0800d34c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d350:	2300      	movs	r3, #0
 800d352:	4604      	mov	r4, r0
 800d354:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800d356:	8003      	strh	r3, [r0, #0]
 800d358:	8043      	strh	r3, [r0, #2]
 800d35a:	8083      	strh	r3, [r0, #4]
 800d35c:	80c3      	strh	r3, [r0, #6]
 800d35e:	2d00      	cmp	r5, #0
 800d360:	d040      	beq.n	800d3e4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d362:	1d28      	adds	r0, r5, #4
 800d364:	f7ff ffe5 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d368:	b988      	cbnz	r0, 800d38e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff ffe1 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d370:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d374:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d378:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d37c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d380:	b138      	cbz	r0, 800d392 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d382:	8022      	strh	r2, [r4, #0]
 800d384:	8063      	strh	r3, [r4, #2]
 800d386:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d38a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d38e:	69ad      	ldr	r5, [r5, #24]
 800d390:	e7e5      	b.n	800d35e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d392:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d396:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d39a:	4290      	cmp	r0, r2
 800d39c:	4607      	mov	r7, r0
 800d39e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d3a2:	460e      	mov	r6, r1
 800d3a4:	bfa8      	it	ge
 800d3a6:	4617      	movge	r7, r2
 800d3a8:	4299      	cmp	r1, r3
 800d3aa:	4472      	add	r2, lr
 800d3ac:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d3b0:	bfa8      	it	ge
 800d3b2:	461e      	movge	r6, r3
 800d3b4:	4440      	add	r0, r8
 800d3b6:	4471      	add	r1, lr
 800d3b8:	4463      	add	r3, ip
 800d3ba:	b200      	sxth	r0, r0
 800d3bc:	8027      	strh	r7, [r4, #0]
 800d3be:	b212      	sxth	r2, r2
 800d3c0:	8066      	strh	r6, [r4, #2]
 800d3c2:	b209      	sxth	r1, r1
 800d3c4:	b21b      	sxth	r3, r3
 800d3c6:	4290      	cmp	r0, r2
 800d3c8:	bfac      	ite	ge
 800d3ca:	ebc7 0200 	rsbge	r2, r7, r0
 800d3ce:	ebc7 0202 	rsblt	r2, r7, r2
 800d3d2:	4299      	cmp	r1, r3
 800d3d4:	bfac      	ite	ge
 800d3d6:	ebc6 0301 	rsbge	r3, r6, r1
 800d3da:	ebc6 0303 	rsblt	r3, r6, r3
 800d3de:	80a2      	strh	r2, [r4, #4]
 800d3e0:	80e3      	strh	r3, [r4, #6]
 800d3e2:	e7d4      	b.n	800d38e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d3ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d3ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d3ee:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d3f2:	b383      	cbz	r3, 800d456 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d3f4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d3f6:	b374      	cbz	r4, 800d456 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d3f8:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d3fc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d400:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d404:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d408:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d40c:	b303      	cbz	r3, 800d450 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d40e:	4668      	mov	r0, sp
 800d410:	1d21      	adds	r1, r4, #4
 800d412:	f8ad 5000 	strh.w	r5, [sp]
 800d416:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d41a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d41e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d422:	f7ff ff43 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 800d426:	4668      	mov	r0, sp
 800d428:	f7ff ff83 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d42c:	b980      	cbnz	r0, 800d450 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d42e:	f8bd 3000 	ldrh.w	r3, [sp]
 800d432:	4669      	mov	r1, sp
 800d434:	88a2      	ldrh	r2, [r4, #4]
 800d436:	4620      	mov	r0, r4
 800d438:	1a9b      	subs	r3, r3, r2
 800d43a:	88e2      	ldrh	r2, [r4, #6]
 800d43c:	f8ad 3000 	strh.w	r3, [sp]
 800d440:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d444:	1a9b      	subs	r3, r3, r2
 800d446:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	4798      	blx	r3
 800d450:	69a4      	ldr	r4, [r4, #24]
 800d452:	2c00      	cmp	r4, #0
 800d454:	d1d8      	bne.n	800d408 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d456:	b002      	add	sp, #8
 800d458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d45c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d45c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d45e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d462:	460d      	mov	r5, r1
 800d464:	4616      	mov	r6, r2
 800d466:	b323      	cbz	r3, 800d4b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d468:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d46a:	b314      	cbz	r4, 800d4b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d46c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d470:	b1eb      	cbz	r3, 800d4ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d472:	6828      	ldr	r0, [r5, #0]
 800d474:	466b      	mov	r3, sp
 800d476:	6869      	ldr	r1, [r5, #4]
 800d478:	c303      	stmia	r3!, {r0, r1}
 800d47a:	4668      	mov	r0, sp
 800d47c:	1d21      	adds	r1, r4, #4
 800d47e:	f7ff ff15 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 800d482:	4668      	mov	r0, sp
 800d484:	f7ff ff55 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d488:	b988      	cbnz	r0, 800d4ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d48a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d48e:	4669      	mov	r1, sp
 800d490:	88a2      	ldrh	r2, [r4, #4]
 800d492:	4620      	mov	r0, r4
 800d494:	1a9b      	subs	r3, r3, r2
 800d496:	88e2      	ldrh	r2, [r4, #6]
 800d498:	f8ad 3000 	strh.w	r3, [sp]
 800d49c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d4a0:	1a9b      	subs	r3, r3, r2
 800d4a2:	4632      	mov	r2, r6
 800d4a4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4ac:	4798      	blx	r3
 800d4ae:	69a4      	ldr	r4, [r4, #24]
 800d4b0:	e7db      	b.n	800d46a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d4b2:	b002      	add	sp, #8
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}

0800d4b6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800d4b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800d4ba:	4770      	bx	lr

0800d4bc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800d4bc:	4770      	bx	lr

0800d4be <_ZN8touchgfx3HAL10FlushCacheEv>:
 800d4be:	4770      	bx	lr

0800d4c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d4c0:	6803      	ldr	r3, [r0, #0]
 800d4c2:	b513      	push	{r0, r1, r4, lr}
 800d4c4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	e9cd 3300 	strd	r3, r3, [sp]
 800d4ce:	466b      	mov	r3, sp
 800d4d0:	47a0      	blx	r4
 800d4d2:	b002      	add	sp, #8
 800d4d4:	bd10      	pop	{r4, pc}

0800d4d6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d4dc:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d4e0:	4770      	bx	lr

0800d4e2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d4e8:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d4ec:	4770      	bx	lr

0800d4ee <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d4ee:	6843      	ldr	r3, [r0, #4]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	725a      	strb	r2, [r3, #9]
 800d4f4:	6840      	ldr	r0, [r0, #4]
 800d4f6:	6803      	ldr	r3, [r0, #0]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	4718      	bx	r3

0800d4fc <_ZN8touchgfx3HAL8flushDMAEv>:
 800d4fc:	6840      	ldr	r0, [r0, #4]
 800d4fe:	6803      	ldr	r3, [r0, #0]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	4718      	bx	r3

0800d504 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d504:	b530      	push	{r4, r5, lr}
 800d506:	b08b      	sub	sp, #44	@ 0x2c
 800d508:	6804      	ldr	r4, [r0, #0]
 800d50a:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800d50e:	9509      	str	r5, [sp, #36]	@ 0x24
 800d510:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800d514:	9508      	str	r5, [sp, #32]
 800d516:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800d51a:	9507      	str	r5, [sp, #28]
 800d51c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800d520:	9506      	str	r5, [sp, #24]
 800d522:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800d526:	9505      	str	r5, [sp, #20]
 800d528:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800d52c:	9504      	str	r5, [sp, #16]
 800d52e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800d532:	9503      	str	r5, [sp, #12]
 800d534:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800d538:	9502      	str	r5, [sp, #8]
 800d53a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800d53e:	e9cd 3500 	strd	r3, r5, [sp]
 800d542:	4613      	mov	r3, r2
 800d544:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800d546:	2200      	movs	r2, #0
 800d548:	47a0      	blx	r4
 800d54a:	b00b      	add	sp, #44	@ 0x2c
 800d54c:	bd30      	pop	{r4, r5, pc}
	...

0800d550 <_ZN8touchgfx3HAL10beginFrameEv>:
 800d550:	4b04      	ldr	r3, [pc, #16]	@ (800d564 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	b123      	cbz	r3, 800d560 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d556:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800d55a:	f080 0001 	eor.w	r0, r0, #1
 800d55e:	4770      	bx	lr
 800d560:	2001      	movs	r0, #1
 800d562:	4770      	bx	lr
 800d564:	24065a4e 	.word	0x24065a4e

0800d568 <_ZN8touchgfx3HAL8endFrameEv>:
 800d568:	b510      	push	{r4, lr}
 800d56a:	4604      	mov	r4, r0
 800d56c:	6840      	ldr	r0, [r0, #4]
 800d56e:	6803      	ldr	r3, [r0, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	4798      	blx	r3
 800d574:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800d578:	b113      	cbz	r3, 800d580 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d57a:	2301      	movs	r3, #1
 800d57c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800d580:	bd10      	pop	{r4, pc}

0800d582 <_ZN8touchgfx3HAL10initializeEv>:
 800d582:	b510      	push	{r4, lr}
 800d584:	4604      	mov	r4, r0
 800d586:	f7fd ffe3 	bl	800b550 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d58a:	f7fd fd49 	bl	800b020 <_ZN8touchgfx4GPIO4initEv>
 800d58e:	6860      	ldr	r0, [r4, #4]
 800d590:	6803      	ldr	r3, [r0, #0]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	4798      	blx	r3
 800d596:	68e0      	ldr	r0, [r4, #12]
 800d598:	6803      	ldr	r3, [r0, #0]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	4798      	blx	r3
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a8:	4718      	bx	r3

0800d5aa <_ZN8touchgfx3HAL9taskEntryEv>:
 800d5aa:	b508      	push	{r3, lr}
 800d5ac:	6803      	ldr	r3, [r0, #0]
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b4:	4798      	blx	r3
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	4798      	blx	r3
 800d5be:	f7fe f82d 	bl	800b61c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5c6:	e7f8      	b.n	800d5ba <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800d5c8 <_ZN8touchgfx3HAL4tickEv>:
 800d5c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d5ca:	6803      	ldr	r3, [r0, #0]
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	4d5b      	ldr	r5, [pc, #364]	@ (800d73c <_ZN8touchgfx3HAL4tickEv+0x174>)
 800d5d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d5d4:	4798      	blx	r3
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	f000 8095 	beq.w	800d706 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800d5dc:	2001      	movs	r0, #1
 800d5de:	2600      	movs	r6, #0
 800d5e0:	f7fd fd26 	bl	800b030 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d5e4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800d5e8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800d5ec:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800d5f0:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800d5f4:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800d5f8:	b133      	cbz	r3, 800d608 <_ZN8touchgfx3HAL4tickEv+0x40>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d602:	4798      	blx	r3
 800d604:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800d608:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800d60c:	2601      	movs	r6, #1
 800d60e:	6862      	ldr	r2, [r4, #4]
 800d610:	f083 0301 	eor.w	r3, r3, #1
 800d614:	702e      	strb	r6, [r5, #0]
 800d616:	7253      	strb	r3, [r2, #9]
 800d618:	f001 ff96 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 800d61c:	6803      	ldr	r3, [r0, #0]
 800d61e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d620:	4798      	blx	r3
 800d622:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800d626:	b90b      	cbnz	r3, 800d62c <_ZN8touchgfx3HAL4tickEv+0x64>
 800d628:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800d62c:	f001 ff8c 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 800d630:	6803      	ldr	r3, [r0, #0]
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	4798      	blx	r3
 800d636:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800d638:	6803      	ldr	r3, [r0, #0]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	4798      	blx	r3
 800d63e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800d642:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800d646:	3b01      	subs	r3, #1
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800d64e:	b10a      	cbz	r2, 800d654 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1eb      	bne.n	800d62c <_ZN8touchgfx3HAL4tickEv+0x64>
 800d654:	4a3a      	ldr	r2, [pc, #232]	@ (800d740 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800d656:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800d65a:	7813      	ldrb	r3, [r2, #0]
 800d65c:	3301      	adds	r3, #1
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	4299      	cmp	r1, r3
 800d662:	7013      	strb	r3, [r2, #0]
 800d664:	dc10      	bgt.n	800d688 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d666:	2300      	movs	r3, #0
 800d668:	68e0      	ldr	r0, [r4, #12]
 800d66a:	a902      	add	r1, sp, #8
 800d66c:	7013      	strb	r3, [r2, #0]
 800d66e:	aa03      	add	r2, sp, #12
 800d670:	6803      	ldr	r3, [r0, #0]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	4798      	blx	r3
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	2800      	cmp	r0, #0
 800d67a:	d050      	beq.n	800d71e <_ZN8touchgfx3HAL4tickEv+0x156>
 800d67c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d680:	4620      	mov	r0, r4
 800d682:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d686:	4798      	blx	r3
 800d688:	2300      	movs	r3, #0
 800d68a:	6960      	ldr	r0, [r4, #20]
 800d68c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d690:	b158      	cbz	r0, 800d6aa <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d692:	6803      	ldr	r3, [r0, #0]
 800d694:	f10d 0107 	add.w	r1, sp, #7
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	4798      	blx	r3
 800d69c:	b128      	cbz	r0, 800d6aa <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d69e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800d6a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d6a4:	6803      	ldr	r3, [r0, #0]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	4798      	blx	r3
 800d6aa:	f104 001c 	add.w	r0, r4, #28
 800d6ae:	f00e fc3b 	bl	801bf28 <_ZN8touchgfx8Gestures4tickEv>
 800d6b2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800d6b6:	b30b      	cbz	r3, 800d6fc <_ZN8touchgfx3HAL4tickEv+0x134>
 800d6b8:	6920      	ldr	r0, [r4, #16]
 800d6ba:	6803      	ldr	r3, [r0, #0]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	4798      	blx	r3
 800d6c0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	b903      	cbnz	r3, 800d6c8 <_ZN8touchgfx3HAL4tickEv+0x100>
 800d6c6:	6760      	str	r0, [r4, #116]	@ 0x74
 800d6c8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d6ca:	4a1e      	ldr	r2, [pc, #120]	@ (800d744 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800d6cc:	1af3      	subs	r3, r6, r3
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d914      	bls.n	800d6fc <_ZN8touchgfx3HAL4tickEv+0x134>
 800d6d2:	6920      	ldr	r0, [r4, #16]
 800d6d4:	6803      	ldr	r3, [r0, #0]
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	4798      	blx	r3
 800d6da:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d6dc:	2264      	movs	r2, #100	@ 0x64
 800d6de:	1af3      	subs	r3, r6, r3
 800d6e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6e4:	fbb0 f0f3 	udiv	r0, r0, r3
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	dc1d      	bgt.n	800d728 <_ZN8touchgfx3HAL4tickEv+0x160>
 800d6ec:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800d6f0:	6920      	ldr	r0, [r4, #16]
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	6803      	ldr	r3, [r0, #0]
 800d6f6:	69db      	ldr	r3, [r3, #28]
 800d6f8:	4798      	blx	r3
 800d6fa:	6766      	str	r6, [r4, #116]	@ 0x74
 800d6fc:	f001 ff24 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 800d700:	6803      	ldr	r3, [r0, #0]
 800d702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d704:	4798      	blx	r3
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	4620      	mov	r0, r4
 800d70a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d70e:	4798      	blx	r3
 800d710:	2001      	movs	r0, #1
 800d712:	f7fd fca9 	bl	800b068 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d716:	2300      	movs	r3, #0
 800d718:	702b      	strb	r3, [r5, #0]
 800d71a:	b004      	add	sp, #16
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
 800d71e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d722:	4620      	mov	r0, r4
 800d724:	4798      	blx	r3
 800d726:	e7af      	b.n	800d688 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d728:	2863      	cmp	r0, #99	@ 0x63
 800d72a:	bfcb      	itete	gt
 800d72c:	2300      	movgt	r3, #0
 800d72e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800d732:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800d736:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800d73a:	e7d9      	b.n	800d6f0 <_ZN8touchgfx3HAL4tickEv+0x128>
 800d73c:	24065a54 	.word	0x24065a54
 800d740:	24065a55 	.word	0x24065a55
 800d744:	05f5e100 	.word	0x05f5e100

0800d748 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d748:	b510      	push	{r4, lr}
 800d74a:	4604      	mov	r4, r0
 800d74c:	f7fd ff42 	bl	800b5d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800d750:	2200      	movs	r2, #0
 800d752:	6863      	ldr	r3, [r4, #4]
 800d754:	729a      	strb	r2, [r3, #10]
 800d756:	bd10      	pop	{r4, pc}

0800d758 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d758:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800d75a:	301c      	adds	r0, #28
 800d75c:	f00e bbe2 	b.w	801bf24 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d760 <_ZN8touchgfx3HAL5touchEll>:
 800d760:	b530      	push	{r4, r5, lr}
 800d762:	b087      	sub	sp, #28
 800d764:	4604      	mov	r4, r0
 800d766:	a804      	add	r0, sp, #16
 800d768:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d76c:	f001 fcde 	bl	800f12c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d770:	9b04      	ldr	r3, [sp, #16]
 800d772:	a906      	add	r1, sp, #24
 800d774:	a803      	add	r0, sp, #12
 800d776:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d77a:	9b05      	ldr	r3, [sp, #20]
 800d77c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d780:	f001 fd26 	bl	800f1d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d784:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800d788:	f104 001c 	add.w	r0, r4, #28
 800d78c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d790:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d794:	b189      	cbz	r1, 800d7ba <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d796:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	4613      	mov	r3, r2
 800d79e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	f00e fbce 	bl	801bf44 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d7a8:	b128      	cbz	r0, 800d7b6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800d7aa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d7ae:	6623      	str	r3, [r4, #96]	@ 0x60
 800d7b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d7b4:	6663      	str	r3, [r4, #100]	@ 0x64
 800d7b6:	b007      	add	sp, #28
 800d7b8:	bd30      	pop	{r4, r5, pc}
 800d7ba:	f00e fc03 	bl	801bfc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800d7c4:	e7f1      	b.n	800d7aa <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d7c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d7c6:	b510      	push	{r4, lr}
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d046      	beq.n	800d85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d7cc:	ea81 0002 	eor.w	r0, r1, r2
 800d7d0:	07c4      	lsls	r4, r0, #31
 800d7d2:	d508      	bpl.n	800d7e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d7d4:	440b      	add	r3, r1
 800d7d6:	3a01      	subs	r2, #1
 800d7d8:	428b      	cmp	r3, r1
 800d7da:	d93e      	bls.n	800d85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d7dc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d7e0:	f801 0b01 	strb.w	r0, [r1], #1
 800d7e4:	e7f8      	b.n	800d7d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d7e6:	07d0      	lsls	r0, r2, #31
 800d7e8:	bf42      	ittt	mi
 800d7ea:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d7ee:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d7f2:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d911      	bls.n	800d81e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d7fa:	ea81 0402 	eor.w	r4, r1, r2
 800d7fe:	4610      	mov	r0, r2
 800d800:	07a4      	lsls	r4, r4, #30
 800d802:	d022      	beq.n	800d84a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d804:	f023 0401 	bic.w	r4, r3, #1
 800d808:	440c      	add	r4, r1
 800d80a:	428c      	cmp	r4, r1
 800d80c:	4602      	mov	r2, r0
 800d80e:	d904      	bls.n	800d81a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d810:	8812      	ldrh	r2, [r2, #0]
 800d812:	3002      	adds	r0, #2
 800d814:	f821 2b02 	strh.w	r2, [r1], #2
 800d818:	e7f7      	b.n	800d80a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	f023 0003 	bic.w	r0, r3, #3
 800d822:	4408      	add	r0, r1
 800d824:	4288      	cmp	r0, r1
 800d826:	4614      	mov	r4, r2
 800d828:	d904      	bls.n	800d834 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d82a:	6824      	ldr	r4, [r4, #0]
 800d82c:	3204      	adds	r2, #4
 800d82e:	f841 4b04 	str.w	r4, [r1], #4
 800d832:	e7f7      	b.n	800d824 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d834:	f003 0303 	and.w	r3, r3, #3
 800d838:	3a01      	subs	r2, #1
 800d83a:	440b      	add	r3, r1
 800d83c:	428b      	cmp	r3, r1
 800d83e:	d90c      	bls.n	800d85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d840:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d844:	f801 0b01 	strb.w	r0, [r1], #1
 800d848:	e7f8      	b.n	800d83c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d84a:	0790      	lsls	r0, r2, #30
 800d84c:	d0e7      	beq.n	800d81e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d84e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d852:	3b02      	subs	r3, #2
 800d854:	f821 0b02 	strh.w	r0, [r1], #2
 800d858:	e7e1      	b.n	800d81e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d85a:	2001      	movs	r0, #1
 800d85c:	bd10      	pop	{r4, pc}

0800d85e <_ZN8touchgfx3HAL7noTouchEv>:
 800d85e:	b510      	push	{r4, lr}
 800d860:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800d864:	4604      	mov	r4, r0
 800d866:	b153      	cbz	r3, 800d87e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d868:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800d86c:	2101      	movs	r1, #1
 800d86e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800d872:	301c      	adds	r0, #28
 800d874:	f00e fba6 	bl	801bfc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d878:	2300      	movs	r3, #0
 800d87a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800d87e:	bd10      	pop	{r4, pc}

0800d880 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d884:	b085      	sub	sp, #20
 800d886:	4604      	mov	r4, r0
 800d888:	2000      	movs	r0, #0
 800d88a:	4699      	mov	r9, r3
 800d88c:	ad04      	add	r5, sp, #16
 800d88e:	460f      	mov	r7, r1
 800d890:	4690      	mov	r8, r2
 800d892:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d896:	69a0      	ldr	r0, [r4, #24]
 800d898:	6806      	ldr	r6, [r0, #0]
 800d89a:	9501      	str	r5, [sp, #4]
 800d89c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800d8a0:	9500      	str	r5, [sp, #0]
 800d8a2:	6835      	ldr	r5, [r6, #0]
 800d8a4:	47a8      	blx	r5
 800d8a6:	4d10      	ldr	r5, [pc, #64]	@ (800d8e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800d8a8:	4606      	mov	r6, r0
 800d8aa:	f8a5 9000 	strh.w	r9, [r5]
 800d8ae:	f7fb f97f 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800d8b2:	6803      	ldr	r3, [r0, #0]
 800d8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b6:	4798      	blx	r3
 800d8b8:	b128      	cbz	r0, 800d8c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800d8ba:	2801      	cmp	r0, #1
 800d8bc:	d00b      	beq.n	800d8d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800d8be:	4630      	mov	r0, r6
 800d8c0:	b005      	add	sp, #20
 800d8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	882b      	ldrh	r3, [r5, #0]
 800d8c8:	fb08 7203 	mla	r2, r8, r3, r7
 800d8cc:	9b03      	ldr	r3, [sp, #12]
 800d8ce:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d8d2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d8d4:	e7f3      	b.n	800d8be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d8d6:	882a      	ldrh	r2, [r5, #0]
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	fb08 7202 	mla	r2, r8, r2, r7
 800d8de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d8e2:	1a9a      	subs	r2, r3, r2
 800d8e4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800d8e6:	e7ea      	b.n	800d8be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d8e8:	24065a4a 	.word	0x24065a4a

0800d8ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ee:	b08b      	sub	sp, #44	@ 0x2c
 800d8f0:	4617      	mov	r7, r2
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	460e      	mov	r6, r1
 800d8f6:	461d      	mov	r5, r3
 800d8f8:	f7fb f95a 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800d8fc:	6803      	ldr	r3, [r0, #0]
 800d8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d900:	4798      	blx	r3
 800d902:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800d906:	9007      	str	r0, [sp, #28]
 800d908:	4631      	mov	r1, r6
 800d90a:	6822      	ldr	r2, [r4, #0]
 800d90c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d910:	4b0c      	ldr	r3, [pc, #48]	@ (800d944 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d912:	4620      	mov	r0, r4
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	9306      	str	r3, [sp, #24]
 800d918:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800d91c:	9305      	str	r3, [sp, #20]
 800d91e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800d922:	9304      	str	r3, [sp, #16]
 800d924:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800d928:	9303      	str	r3, [sp, #12]
 800d92a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800d92e:	9302      	str	r3, [sp, #8]
 800d930:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800d934:	e9cd 5300 	strd	r5, r3, [sp]
 800d938:	463b      	mov	r3, r7
 800d93a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800d93c:	2200      	movs	r2, #0
 800d93e:	47a8      	blx	r5
 800d940:	b00b      	add	sp, #44	@ 0x2c
 800d942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d944:	24065a4a 	.word	0x24065a4a

0800d948 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d94c:	4698      	mov	r8, r3
 800d94e:	6803      	ldr	r3, [r0, #0]
 800d950:	b08b      	sub	sp, #44	@ 0x2c
 800d952:	4617      	mov	r7, r2
 800d954:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800d956:	460e      	mov	r6, r1
 800d958:	4b13      	ldr	r3, [pc, #76]	@ (800d9a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800d95a:	4604      	mov	r4, r0
 800d95c:	f8b3 9000 	ldrh.w	r9, [r3]
 800d960:	f7fb f926 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800d964:	6803      	ldr	r3, [r0, #0]
 800d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d968:	4798      	blx	r3
 800d96a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800d96e:	2200      	movs	r2, #0
 800d970:	4631      	mov	r1, r6
 800d972:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d976:	2302      	movs	r3, #2
 800d978:	4620      	mov	r0, r4
 800d97a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d97e:	2301      	movs	r3, #1
 800d980:	9305      	str	r3, [sp, #20]
 800d982:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800d986:	9304      	str	r3, [sp, #16]
 800d988:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800d98c:	9303      	str	r3, [sp, #12]
 800d98e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800d992:	9302      	str	r3, [sp, #8]
 800d994:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800d998:	e9cd 8300 	strd	r8, r3, [sp]
 800d99c:	463b      	mov	r3, r7
 800d99e:	47a8      	blx	r5
 800d9a0:	b00b      	add	sp, #44	@ 0x2c
 800d9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9a6:	bf00      	nop
 800d9a8:	24065a4a 	.word	0x24065a4a

0800d9ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9b0:	4698      	mov	r8, r3
 800d9b2:	6803      	ldr	r3, [r0, #0]
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	460e      	mov	r6, r1
 800d9b8:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800d9ba:	4617      	mov	r7, r2
 800d9bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d9fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d9be:	4604      	mov	r4, r0
 800d9c0:	f8b3 9000 	ldrh.w	r9, [r3]
 800d9c4:	f7fb f8f4 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800d9c8:	6803      	ldr	r3, [r0, #0]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9cc:	4798      	blx	r3
 800d9ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800d9d2:	463a      	mov	r2, r7
 800d9d4:	4631      	mov	r1, r6
 800d9d6:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9da:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d9de:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	9302      	str	r3, [sp, #8]
 800d9e6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	4643      	mov	r3, r8
 800d9f4:	47a8      	blx	r5
 800d9f6:	b007      	add	sp, #28
 800d9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9fc:	24065a4a 	.word	0x24065a4a

0800da00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da04:	4604      	mov	r4, r0
 800da06:	b08f      	sub	sp, #60	@ 0x3c
 800da08:	4610      	mov	r0, r2
 800da0a:	460d      	mov	r5, r1
 800da0c:	4691      	mov	r9, r2
 800da0e:	461e      	mov	r6, r3
 800da10:	f004 f97e 	bl	8011d10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800da14:	2800      	cmp	r0, #0
 800da16:	f000 809d 	beq.w	800db54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	4620      	mov	r0, r4
 800da1e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800dbb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800da22:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800da26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da28:	4798      	blx	r3
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	4620      	mov	r0, r4
 800da2e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800dbbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800da32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da34:	4798      	blx	r3
 800da36:	f8bb 3000 	ldrh.w	r3, [fp]
 800da3a:	4f5c      	ldr	r7, [pc, #368]	@ (800dbac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800da3c:	9301      	str	r3, [sp, #4]
 800da3e:	f8ba 3000 	ldrh.w	r3, [sl]
 800da42:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800da46:	4640      	mov	r0, r8
 800da48:	9302      	str	r3, [sp, #8]
 800da4a:	883b      	ldrh	r3, [r7, #0]
 800da4c:	9303      	str	r3, [sp, #12]
 800da4e:	4b58      	ldr	r3, [pc, #352]	@ (800dbb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800da50:	881a      	ldrh	r2, [r3, #0]
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	9204      	str	r2, [sp, #16]
 800da56:	f004 faab 	bl	8011fb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800da5a:	8038      	strh	r0, [r7, #0]
 800da5c:	4640      	mov	r0, r8
 800da5e:	f004 fadb 	bl	8012018 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800da62:	9b05      	ldr	r3, [sp, #20]
 800da64:	b280      	uxth	r0, r0
 800da66:	8018      	strh	r0, [r3, #0]
 800da68:	4b52      	ldr	r3, [pc, #328]	@ (800dbb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d174      	bne.n	800db5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800da70:	883b      	ldrh	r3, [r7, #0]
 800da72:	f8aa 0000 	strh.w	r0, [sl]
 800da76:	f8ab 3000 	strh.w	r3, [fp]
 800da7a:	4648      	mov	r0, r9
 800da7c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800da80:	f004 f946 	bl	8011d10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800da84:	2200      	movs	r2, #0
 800da86:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800da8a:	4611      	mov	r1, r2
 800da8c:	4628      	mov	r0, r5
 800da8e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800da92:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800da96:	f7fb ff80 	bl	800999a <_ZN8touchgfx8Drawable5setXYEss>
 800da9a:	2301      	movs	r3, #1
 800da9c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800daa0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800daa4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dd5c      	ble.n	800db66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800daac:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	dd58      	ble.n	800db66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800dab4:	462a      	mov	r2, r5
 800dab6:	ab0a      	add	r3, sp, #40	@ 0x28
 800dab8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800dabc:	6851      	ldr	r1, [r2, #4]
 800dabe:	c303      	stmia	r3!, {r0, r1}
 800dac0:	4631      	mov	r1, r6
 800dac2:	a80a      	add	r0, sp, #40	@ 0x28
 800dac4:	f7ff fbf2 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 800dac8:	4b38      	ldr	r3, [pc, #224]	@ (800dbac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800daca:	2100      	movs	r1, #0
 800dacc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dad0:	4b37      	ldr	r3, [pc, #220]	@ (800dbb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800dad2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800dad6:	aa0a      	add	r2, sp, #40	@ 0x28
 800dad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dadc:	910c      	str	r1, [sp, #48]	@ 0x30
 800dade:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800dae2:	ab08      	add	r3, sp, #32
 800dae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dae8:	e883 0003 	stmia.w	r3, {r0, r1}
 800daec:	4618      	mov	r0, r3
 800daee:	a90c      	add	r1, sp, #48	@ 0x30
 800daf0:	f7ff fbdc 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 800daf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d13c      	bne.n	800db74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800dafa:	2000      	movs	r0, #0
 800dafc:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800db00:	2600      	movs	r6, #0
 800db02:	696b      	ldr	r3, [r5, #20]
 800db04:	a908      	add	r1, sp, #32
 800db06:	682a      	ldr	r2, [r5, #0]
 800db08:	4628      	mov	r0, r5
 800db0a:	9305      	str	r3, [sp, #20]
 800db0c:	616e      	str	r6, [r5, #20]
 800db0e:	6892      	ldr	r2, [r2, #8]
 800db10:	4790      	blx	r2
 800db12:	9b05      	ldr	r3, [sp, #20]
 800db14:	4652      	mov	r2, sl
 800db16:	4649      	mov	r1, r9
 800db18:	616b      	str	r3, [r5, #20]
 800db1a:	4628      	mov	r0, r5
 800db1c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800db20:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800db24:	f7fb ff39 	bl	800999a <_ZN8touchgfx8Drawable5setXYEss>
 800db28:	9a01      	ldr	r2, [sp, #4]
 800db2a:	4b23      	ldr	r3, [pc, #140]	@ (800dbb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800db2c:	4620      	mov	r0, r4
 800db2e:	801a      	strh	r2, [r3, #0]
 800db30:	9a02      	ldr	r2, [sp, #8]
 800db32:	4b22      	ldr	r3, [pc, #136]	@ (800dbbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800db34:	801a      	strh	r2, [r3, #0]
 800db36:	9a03      	ldr	r2, [sp, #12]
 800db38:	4b1c      	ldr	r3, [pc, #112]	@ (800dbac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800db3a:	801a      	strh	r2, [r3, #0]
 800db3c:	4b1c      	ldr	r3, [pc, #112]	@ (800dbb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800db3e:	9a04      	ldr	r2, [sp, #16]
 800db40:	801a      	strh	r2, [r3, #0]
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800db48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db4a:	4798      	blx	r3
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	4620      	mov	r0, r4
 800db50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db52:	4798      	blx	r3
 800db54:	b00f      	add	sp, #60	@ 0x3c
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	883b      	ldrh	r3, [r7, #0]
 800db5c:	f8ab 0000 	strh.w	r0, [fp]
 800db60:	f8aa 3000 	strh.w	r3, [sl]
 800db64:	e789      	b.n	800da7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800db66:	462a      	mov	r2, r5
 800db68:	ab0a      	add	r3, sp, #40	@ 0x28
 800db6a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800db6e:	6851      	ldr	r1, [r2, #4]
 800db70:	c303      	stmia	r3!, {r0, r1}
 800db72:	e7a9      	b.n	800dac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800db74:	a807      	add	r0, sp, #28
 800db76:	f004 fb59 	bl	801222c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800db7a:	4606      	mov	r6, r0
 800db7c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800db7e:	6803      	ldr	r3, [r0, #0]
 800db80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db82:	4798      	blx	r3
 800db84:	4286      	cmp	r6, r0
 800db86:	d1b8      	bne.n	800dafa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800db88:	f7fb f812 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800db8c:	6803      	ldr	r3, [r0, #0]
 800db8e:	4606      	mov	r6, r0
 800db90:	a807      	add	r0, sp, #28
 800db92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db94:	9305      	str	r3, [sp, #20]
 800db96:	f004 fb49 	bl	801222c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800db9a:	9b05      	ldr	r3, [sp, #20]
 800db9c:	4601      	mov	r1, r0
 800db9e:	4630      	mov	r0, r6
 800dba0:	4798      	blx	r3
 800dba2:	f080 0001 	eor.w	r0, r0, #1
 800dba6:	b2c0      	uxtb	r0, r0
 800dba8:	e7a8      	b.n	800dafc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800dbaa:	bf00      	nop
 800dbac:	24065a44 	.word	0x24065a44
 800dbb0:	24065a46 	.word	0x24065a46
 800dbb4:	24065a48 	.word	0x24065a48
 800dbb8:	24065a4a 	.word	0x24065a4a
 800dbbc:	24065a4c 	.word	0x24065a4c

0800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800dbc0:	4b07      	ldr	r3, [pc, #28]	@ (800dbe0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800dbc2:	b510      	push	{r4, lr}
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	b13b      	cbz	r3, 800dbda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbce:	4798      	blx	r3
 800dbd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dbd2:	4283      	cmp	r3, r0
 800dbd4:	d101      	bne.n	800dbda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dbd6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800dbd8:	bd10      	pop	{r4, pc}
 800dbda:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800dbdc:	e7fc      	b.n	800dbd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800dbde:	bf00      	nop
 800dbe0:	24065a4e 	.word	0x24065a4e

0800dbe4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe8:	461d      	mov	r5, r3
 800dbea:	b08a      	sub	sp, #40	@ 0x28
 800dbec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbf0:	4690      	mov	r8, r2
 800dbf2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800dbf6:	2400      	movs	r4, #0
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	fb06 8505 	mla	r5, r6, r5, r8
 800dbfe:	9404      	str	r4, [sp, #16]
 800dc00:	f88d 4020 	strb.w	r4, [sp, #32]
 800dc04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dc08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800dc0c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dc10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dc14:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dc18:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dc1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dc20:	f7ff ffce 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dc24:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dc2e:	a901      	add	r1, sp, #4
 800dc30:	9505      	str	r5, [sp, #20]
 800dc32:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800dc36:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800dc3a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800dc3e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800dc42:	6803      	ldr	r3, [r0, #0]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	4798      	blx	r3
 800dc48:	b00a      	add	sp, #40	@ 0x28
 800dc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc4e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800dc4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc52:	b08b      	sub	sp, #44	@ 0x2c
 800dc54:	2400      	movs	r4, #0
 800dc56:	4691      	mov	r9, r2
 800dc58:	461d      	mov	r5, r3
 800dc5a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800dc5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc62:	4688      	mov	r8, r1
 800dc64:	4607      	mov	r7, r0
 800dc66:	9404      	str	r4, [sp, #16]
 800dc68:	fb06 9505 	mla	r5, r6, r5, r9
 800dc6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc70:	f7ff ffa6 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dc74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dc78:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dc82:	a901      	add	r1, sp, #4
 800dc84:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800dc88:	9505      	str	r5, [sp, #20]
 800dc8a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dc8e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800dc92:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dc96:	f8cd 8010 	str.w	r8, [sp, #16]
 800dc9a:	f8ad 4020 	strh.w	r4, [sp, #32]
 800dc9e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800dca2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800dca6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800dcaa:	6803      	ldr	r3, [r0, #0]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	4798      	blx	r3
 800dcb0:	b00b      	add	sp, #44	@ 0x2c
 800dcb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800dcb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800dcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbc:	b08a      	sub	sp, #40	@ 0x28
 800dcbe:	4698      	mov	r8, r3
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800dcc8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800dccc:	2d0b      	cmp	r5, #11
 800dcce:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800dcd2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800dcd6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	d137      	bne.n	800dd4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800dcde:	2380      	movs	r3, #128	@ 0x80
 800dce0:	f88d 0020 	strb.w	r0, [sp, #32]
 800dce4:	4630      	mov	r0, r6
 800dce6:	9203      	str	r2, [sp, #12]
 800dce8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dcec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dcf0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dcf4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dcf8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dcfc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800dd00:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dd04:	f7ff ff5c 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dd08:	2c0b      	cmp	r4, #11
 800dd0a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800dd0e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800dd12:	bf94      	ite	ls
 800dd14:	4b19      	ldrls	r3, [pc, #100]	@ (800dd7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800dd16:	2100      	movhi	r1, #0
 800dd18:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800dd1c:	bf98      	it	ls
 800dd1e:	5d19      	ldrbls	r1, [r3, r4]
 800dd20:	fb02 8307 	mla	r3, r2, r7, r8
 800dd24:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800dd28:	10c9      	asrs	r1, r1, #3
 800dd2a:	fb01 0003 	mla	r0, r1, r3, r0
 800dd2e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800dd32:	a901      	add	r1, sp, #4
 800dd34:	9005      	str	r0, [sp, #20]
 800dd36:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6870      	ldr	r0, [r6, #4]
 800dd3e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800dd42:	6803      	ldr	r3, [r0, #0]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	4798      	blx	r3
 800dd48:	b00a      	add	sp, #40	@ 0x28
 800dd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd4e:	2d02      	cmp	r5, #2
 800dd50:	d109      	bne.n	800dd66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800dd52:	28ff      	cmp	r0, #255	@ 0xff
 800dd54:	d105      	bne.n	800dd62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800dd56:	f1bc 0f00 	cmp.w	ip, #0
 800dd5a:	bf14      	ite	ne
 800dd5c:	2340      	movne	r3, #64	@ 0x40
 800dd5e:	2320      	moveq	r3, #32
 800dd60:	e7be      	b.n	800dce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dd62:	2340      	movs	r3, #64	@ 0x40
 800dd64:	e7bc      	b.n	800dce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dd66:	28ff      	cmp	r0, #255	@ 0xff
 800dd68:	d105      	bne.n	800dd76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800dd6a:	f1bc 0f00 	cmp.w	ip, #0
 800dd6e:	bf14      	ite	ne
 800dd70:	2304      	movne	r3, #4
 800dd72:	2301      	moveq	r3, #1
 800dd74:	e7b4      	b.n	800dce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dd76:	2304      	movs	r3, #4
 800dd78:	e7b2      	b.n	800dce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dd7a:	bf00      	nop
 800dd7c:	0801e5ec 	.word	0x0801e5ec

0800dd80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd84:	b08b      	sub	sp, #44	@ 0x2c
 800dd86:	461d      	mov	r5, r3
 800dd88:	2400      	movs	r4, #0
 800dd8a:	4688      	mov	r8, r1
 800dd8c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800dd90:	4693      	mov	fp, r2
 800dd92:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800dd96:	4607      	mov	r7, r0
 800dd98:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800dd9c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800dda0:	9404      	str	r4, [sp, #16]
 800dda2:	bf14      	ite	ne
 800dda4:	2308      	movne	r3, #8
 800dda6:	2302      	moveq	r3, #2
 800dda8:	fb05 b50a 	mla	r5, r5, sl, fp
 800ddac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddb0:	f7ff ff06 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ddb4:	2e0b      	cmp	r6, #11
 800ddb6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800ddba:	a901      	add	r1, sp, #4
 800ddbc:	bf98      	it	ls
 800ddbe:	4b13      	ldrls	r3, [pc, #76]	@ (800de0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800ddc0:	f8ad a01e 	strh.w	sl, [sp, #30]
 800ddc4:	bf98      	it	ls
 800ddc6:	5d9c      	ldrbls	r4, [r3, r6]
 800ddc8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800ddcc:	10e4      	asrs	r4, r4, #3
 800ddce:	f8cd 8010 	str.w	r8, [sp, #16]
 800ddd2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ddd6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800ddda:	fb04 0405 	mla	r4, r4, r5, r0
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dde4:	2300      	movs	r3, #0
 800dde6:	9405      	str	r4, [sp, #20]
 800dde8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ddec:	f88d 9020 	strb.w	r9, [sp, #32]
 800ddf0:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800ddf4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ddf8:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800ddfc:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800de00:	6803      	ldr	r3, [r0, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	4798      	blx	r3
 800de06:	b00b      	add	sp, #44	@ 0x2c
 800de08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0c:	0801e5ec 	.word	0x0801e5ec

0800de10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800de10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de14:	461e      	mov	r6, r3
 800de16:	4b0a      	ldr	r3, [pc, #40]	@ (800de40 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800de18:	460f      	mov	r7, r1
 800de1a:	4690      	mov	r8, r2
 800de1c:	881d      	ldrh	r5, [r3, #0]
 800de1e:	f7fa fec7 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800de22:	6803      	ldr	r3, [r0, #0]
 800de24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de26:	4798      	blx	r3
 800de28:	280b      	cmp	r0, #11
 800de2a:	bf96      	itet	ls
 800de2c:	4b05      	ldrls	r3, [pc, #20]	@ (800de44 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800de2e:	2400      	movhi	r4, #0
 800de30:	5c1c      	ldrbls	r4, [r3, r0]
 800de32:	fb08 7005 	mla	r0, r8, r5, r7
 800de36:	10e4      	asrs	r4, r4, #3
 800de38:	fb04 6000 	mla	r0, r4, r0, r6
 800de3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de40:	24065a4a 	.word	0x24065a4a
 800de44:	0801e5ec 	.word	0x0801e5ec

0800de48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800de48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4a:	b08b      	sub	sp, #44	@ 0x2c
 800de4c:	461f      	mov	r7, r3
 800de4e:	4604      	mov	r4, r0
 800de50:	4616      	mov	r6, r2
 800de52:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800de56:	2500      	movs	r5, #0
 800de58:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800de5c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800de60:	9504      	str	r5, [sp, #16]
 800de62:	f8ad 3018 	strh.w	r3, [sp, #24]
 800de66:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800de6a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800de6e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800de72:	f8ad 301c 	strh.w	r3, [sp, #28]
 800de76:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800de7a:	f88d 3020 	strb.w	r3, [sp, #32]
 800de7e:	f7ff fe9f 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800de82:	463a      	mov	r2, r7
 800de84:	4631      	mov	r1, r6
 800de86:	4603      	mov	r3, r0
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff ffc1 	bl	800de10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800de8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dec8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800de90:	9005      	str	r0, [sp, #20]
 800de92:	881b      	ldrh	r3, [r3, #0]
 800de94:	f8ad 301e 	strh.w	r3, [sp, #30]
 800de98:	f7fa fe8a 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800de9c:	6803      	ldr	r3, [r0, #0]
 800de9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea0:	4798      	blx	r3
 800dea2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dea4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800dea8:	a901      	add	r1, sp, #4
 800deaa:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800deae:	9304      	str	r3, [sp, #16]
 800deb0:	6860      	ldr	r0, [r4, #4]
 800deb2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800deb6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800deba:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	4798      	blx	r3
 800dec4:	b00b      	add	sp, #44	@ 0x2c
 800dec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dec8:	24065a4a 	.word	0x24065a4a

0800decc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800decc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dece:	b08d      	sub	sp, #52	@ 0x34
 800ded0:	2501      	movs	r5, #1
 800ded2:	4604      	mov	r4, r0
 800ded4:	466b      	mov	r3, sp
 800ded6:	9503      	str	r5, [sp, #12]
 800ded8:	e883 0006 	stmia.w	r3, {r1, r2}
 800dedc:	2300      	movs	r3, #0
 800dede:	f8bd 6000 	ldrh.w	r6, [sp]
 800dee2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800dee6:	9306      	str	r3, [sp, #24]
 800dee8:	6803      	ldr	r3, [r0, #0]
 800deea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deec:	4798      	blx	r3
 800deee:	463a      	mov	r2, r7
 800def0:	4631      	mov	r1, r6
 800def2:	4603      	mov	r3, r0
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff ff8b 	bl	800de10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800defa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800defc:	9004      	str	r0, [sp, #16]
 800defe:	9307      	str	r3, [sp, #28]
 800df00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800df04:	f8ad 3020 	strh.w	r3, [sp, #32]
 800df08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800df0c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800df10:	4b0e      	ldr	r3, [pc, #56]	@ (800df4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800df18:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800df1c:	f7fa fe48 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800df20:	6803      	ldr	r3, [r0, #0]
 800df22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df24:	4798      	blx	r3
 800df26:	23ff      	movs	r3, #255	@ 0xff
 800df28:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800df2c:	a903      	add	r1, sp, #12
 800df2e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800df32:	6860      	ldr	r0, [r4, #4]
 800df34:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800df38:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800df3c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800df40:	6803      	ldr	r3, [r0, #0]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	4798      	blx	r3
 800df46:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800df48:	b00d      	add	sp, #52	@ 0x34
 800df4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df4c:	24065a4a 	.word	0x24065a4a

0800df50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800df50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df54:	b08c      	sub	sp, #48	@ 0x30
 800df56:	461e      	mov	r6, r3
 800df58:	2300      	movs	r3, #0
 800df5a:	4604      	mov	r4, r0
 800df5c:	466d      	mov	r5, sp
 800df5e:	9306      	str	r3, [sp, #24]
 800df60:	6803      	ldr	r3, [r0, #0]
 800df62:	e885 0006 	stmia.w	r5, {r1, r2}
 800df66:	2501      	movs	r5, #1
 800df68:	f8bd 7000 	ldrh.w	r7, [sp]
 800df6c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800df70:	9503      	str	r5, [sp, #12]
 800df72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df74:	4798      	blx	r3
 800df76:	4642      	mov	r2, r8
 800df78:	4639      	mov	r1, r7
 800df7a:	4603      	mov	r3, r0
 800df7c:	4620      	mov	r0, r4
 800df7e:	f7ff ff47 	bl	800de10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800df82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800df86:	9004      	str	r0, [sp, #16]
 800df88:	f8ad 3020 	strh.w	r3, [sp, #32]
 800df8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800df90:	9607      	str	r6, [sp, #28]
 800df92:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800df96:	4b10      	ldr	r3, [pc, #64]	@ (800dfd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800df98:	881b      	ldrh	r3, [r3, #0]
 800df9a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800df9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfa0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800dfa4:	f7fa fe04 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 800dfa8:	6803      	ldr	r3, [r0, #0]
 800dfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfac:	4798      	blx	r3
 800dfae:	23ff      	movs	r3, #255	@ 0xff
 800dfb0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800dfb4:	a903      	add	r1, sp, #12
 800dfb6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800dfba:	6860      	ldr	r0, [r4, #4]
 800dfbc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800dfc0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800dfc4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800dfc8:	6803      	ldr	r3, [r0, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	4798      	blx	r3
 800dfce:	4630      	mov	r0, r6
 800dfd0:	b00c      	add	sp, #48	@ 0x30
 800dfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd6:	bf00      	nop
 800dfd8:	24065a4a 	.word	0x24065a4a

0800dfdc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800dfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	ac02      	add	r4, sp, #8
 800dfe4:	e884 0006 	stmia.w	r4, {r1, r2}
 800dfe8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800dfec:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800dff0:	f7ff fde6 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dff4:	4631      	mov	r1, r6
 800dff6:	4603      	mov	r3, r0
 800dff8:	463a      	mov	r2, r7
 800dffa:	4628      	mov	r0, r5
 800dffc:	f7ff ff08 	bl	800de10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e000:	4a05      	ldr	r2, [pc, #20]	@ (800e018 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e002:	682b      	ldr	r3, [r5, #0]
 800e004:	8812      	ldrh	r2, [r2, #0]
 800e006:	9200      	str	r2, [sp, #0]
 800e008:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800e00a:	4603      	mov	r3, r0
 800e00c:	4628      	mov	r0, r5
 800e00e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e012:	47b0      	blx	r6
 800e014:	b005      	add	sp, #20
 800e016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e018:	24065a4a 	.word	0x24065a4a

0800e01c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e022:	4604      	mov	r4, r0
 800e024:	b19b      	cbz	r3, 800e04e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e026:	2002      	movs	r0, #2
 800e028:	f7fd f83a 	bl	800b0a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e02c:	2300      	movs	r3, #0
 800e02e:	4620      	mov	r0, r4
 800e030:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e034:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800e03e:	f7ff fdbf 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e042:	4601      	mov	r1, r0
 800e044:	4620      	mov	r0, r4
 800e046:	462b      	mov	r3, r5
 800e048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e04c:	4718      	bx	r3
 800e04e:	bd70      	pop	{r4, r5, r6, pc}

0800e050 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
 800e05a:	428b      	cmp	r3, r1
 800e05c:	d006      	beq.n	800e06c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e05e:	6803      	ldr	r3, [r0, #0]
 800e060:	b929      	cbnz	r1, 800e06e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e062:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e066:	4798      	blx	r3
 800e068:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e06c:	bd38      	pop	{r3, r4, r5, pc}
 800e06e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e072:	e7f8      	b.n	800e066 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e074 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e074:	4b0d      	ldr	r3, [pc, #52]	@ (800e0ac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e076:	b510      	push	{r4, lr}
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	4604      	mov	r4, r0
 800e07c:	b95b      	cbnz	r3, 800e096 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e07e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800e082:	2b02      	cmp	r3, #2
 800e084:	d007      	beq.n	800e096 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e086:	6840      	ldr	r0, [r0, #4]
 800e088:	f000 f90e 	bl	800e2a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e08c:	b118      	cbz	r0, 800e096 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e08e:	6862      	ldr	r2, [r4, #4]
 800e090:	7a53      	ldrb	r3, [r2, #9]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d0fc      	beq.n	800e090 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e096:	f7fd fa8f 	bl	800b5b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e09a:	4620      	mov	r0, r4
 800e09c:	2100      	movs	r1, #0
 800e09e:	f7ff ffd7 	bl	800e050 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff fd8c 	bl	800dbc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e0a8:	bd10      	pop	{r4, pc}
 800e0aa:	bf00      	nop
 800e0ac:	24065a4e 	.word	0x24065a4e

0800e0b0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800e0b0:	4770      	bx	lr

0800e0b2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	4770      	bx	lr

0800e0b6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e0b6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e0ba:	1a13      	subs	r3, r2, r0
 800e0bc:	4258      	negs	r0, r3
 800e0be:	4158      	adcs	r0, r3
 800e0c0:	4770      	bx	lr

0800e0c2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e0c2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e0c6:	1a9b      	subs	r3, r3, r2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bfdc      	itt	le
 800e0cc:	6882      	ldrle	r2, [r0, #8]
 800e0ce:	189b      	addle	r3, r3, r2
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	bfcc      	ite	gt
 800e0d4:	2000      	movgt	r0, #0
 800e0d6:	2001      	movle	r0, #1
 800e0d8:	4770      	bx	lr

0800e0da <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e0da:	6902      	ldr	r2, [r0, #16]
 800e0dc:	6843      	ldr	r3, [r0, #4]
 800e0de:	2024      	movs	r0, #36	@ 0x24
 800e0e0:	fb00 3002 	mla	r0, r0, r2, r3
 800e0e4:	4770      	bx	lr

0800e0e6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e0e6:	6803      	ldr	r3, [r0, #0]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	4718      	bx	r3

0800e0ec <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	b570      	push	{r4, r5, r6, lr}
 800e0f0:	7203      	strb	r3, [r0, #8]
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	6840      	ldr	r0, [r0, #4]
 800e0f6:	6803      	ldr	r3, [r0, #0]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	4798      	blx	r3
 800e0fc:	6803      	ldr	r3, [r0, #0]
 800e0fe:	4605      	mov	r5, r0
 800e100:	2b40      	cmp	r3, #64	@ 0x40
 800e102:	d00c      	beq.n	800e11e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e104:	d810      	bhi.n	800e128 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e106:	2b04      	cmp	r3, #4
 800e108:	d01d      	beq.n	800e146 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e10a:	d804      	bhi.n	800e116 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d006      	beq.n	800e11e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e110:	2b02      	cmp	r3, #2
 800e112:	d02c      	beq.n	800e16e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e114:	bd70      	pop	{r4, r5, r6, pc}
 800e116:	2b08      	cmp	r3, #8
 800e118:	d01d      	beq.n	800e156 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e11a:	2b20      	cmp	r3, #32
 800e11c:	d1fa      	bne.n	800e114 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e11e:	6823      	ldr	r3, [r4, #0]
 800e120:	4620      	mov	r0, r4
 800e122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e124:	4798      	blx	r3
 800e126:	e013      	b.n	800e150 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e12c:	d0f7      	beq.n	800e11e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e12e:	d804      	bhi.n	800e13a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e130:	2b80      	cmp	r3, #128	@ 0x80
 800e132:	d0f4      	beq.n	800e11e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e138:	e7f0      	b.n	800e11c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e13a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e13e:	d0ee      	beq.n	800e11e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e144:	e7e5      	b.n	800e112 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	7f01      	ldrb	r1, [r0, #28]
 800e14a:	4620      	mov	r0, r4
 800e14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e14e:	4798      	blx	r3
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e154:	e006      	b.n	800e164 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	7f01      	ldrb	r1, [r0, #28]
 800e15a:	4620      	mov	r0, r4
 800e15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e15e:	4798      	blx	r3
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e164:	4629      	mov	r1, r5
 800e166:	4620      	mov	r0, r4
 800e168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e16c:	4718      	bx	r3
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	4620      	mov	r0, r4
 800e172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e174:	4798      	blx	r3
 800e176:	e7f3      	b.n	800e160 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e178 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e178:	4770      	bx	lr

0800e17a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e17a:	4770      	bx	lr

0800e17c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e17c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e180:	b510      	push	{r4, lr}
 800e182:	1ad2      	subs	r2, r2, r3
 800e184:	2a00      	cmp	r2, #0
 800e186:	bfdc      	itt	le
 800e188:	6884      	ldrle	r4, [r0, #8]
 800e18a:	1912      	addle	r2, r2, r4
 800e18c:	2a01      	cmp	r2, #1
 800e18e:	dd16      	ble.n	800e1be <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e190:	6842      	ldr	r2, [r0, #4]
 800e192:	2424      	movs	r4, #36	@ 0x24
 800e194:	fb04 2303 	mla	r3, r4, r3, r2
 800e198:	f101 0220 	add.w	r2, r1, #32
 800e19c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e1a0:	4291      	cmp	r1, r2
 800e1a2:	f843 4b04 	str.w	r4, [r3], #4
 800e1a6:	d1f9      	bne.n	800e19c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e1a8:	780a      	ldrb	r2, [r1, #0]
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	68c3      	ldr	r3, [r0, #12]
 800e1ae:	6882      	ldr	r2, [r0, #8]
 800e1b0:	f3bf 8f5b 	dmb	ish
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	bfd8      	it	le
 800e1ba:	1a9b      	suble	r3, r3, r2
 800e1bc:	60c3      	str	r3, [r0, #12]
 800e1be:	bd10      	pop	{r4, pc}

0800e1c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e1c0:	6903      	ldr	r3, [r0, #16]
 800e1c2:	6882      	ldr	r2, [r0, #8]
 800e1c4:	f3bf 8f5b 	dmb	ish
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	bfd8      	it	le
 800e1ce:	1a9b      	suble	r3, r3, r2
 800e1d0:	6103      	str	r3, [r0, #16]
 800e1d2:	4770      	bx	lr

0800e1d4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	460e      	mov	r6, r1
 800e1da:	6860      	ldr	r0, [r4, #4]
 800e1dc:	6803      	ldr	r3, [r0, #0]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	4798      	blx	r3
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d1f9      	bne.n	800e1da <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e1e6:	4d0d      	ldr	r5, [pc, #52]	@ (800e21c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e1e8:	6828      	ldr	r0, [r5, #0]
 800e1ea:	6803      	ldr	r3, [r0, #0]
 800e1ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1ee:	4798      	blx	r3
 800e1f0:	f7fd f9fc 	bl	800b5ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e1f4:	6828      	ldr	r0, [r5, #0]
 800e1f6:	2101      	movs	r1, #1
 800e1f8:	f7ff ff2a 	bl	800e050 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e1fc:	6860      	ldr	r0, [r4, #4]
 800e1fe:	4631      	mov	r1, r6
 800e200:	6803      	ldr	r3, [r0, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	4798      	blx	r3
 800e206:	6823      	ldr	r3, [r4, #0]
 800e208:	4620      	mov	r0, r4
 800e20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e20c:	4798      	blx	r3
 800e20e:	6828      	ldr	r0, [r5, #0]
 800e210:	6803      	ldr	r3, [r0, #0]
 800e212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e218:	4718      	bx	r3
 800e21a:	bf00      	nop
 800e21c:	24065a50 	.word	0x24065a50

0800e220 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e220:	b508      	push	{r3, lr}
 800e222:	f7fd f9c9 	bl	800b5b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e22a:	f7fd b9d3 	b.w	800b5d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e22e <_ZN8touchgfx13DMA_Interface5startEv>:
 800e22e:	b510      	push	{r4, lr}
 800e230:	4604      	mov	r4, r0
 800e232:	6840      	ldr	r0, [r0, #4]
 800e234:	6803      	ldr	r3, [r0, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4798      	blx	r3
 800e23a:	b948      	cbnz	r0, 800e250 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e23c:	7a63      	ldrb	r3, [r4, #9]
 800e23e:	b13b      	cbz	r3, 800e250 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e240:	7a23      	ldrb	r3, [r4, #8]
 800e242:	b92b      	cbnz	r3, 800e250 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	4620      	mov	r0, r4
 800e248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e24e:	4718      	bx	r3
 800e250:	bd10      	pop	{r4, pc}

0800e252 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e252:	b570      	push	{r4, r5, r6, lr}
 800e254:	4604      	mov	r4, r0
 800e256:	6840      	ldr	r0, [r0, #4]
 800e258:	6803      	ldr	r3, [r0, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4798      	blx	r3
 800e25e:	4605      	mov	r5, r0
 800e260:	b930      	cbnz	r0, 800e270 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e262:	7a23      	ldrb	r3, [r4, #8]
 800e264:	b123      	cbz	r3, 800e270 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e266:	6860      	ldr	r0, [r4, #4]
 800e268:	6803      	ldr	r3, [r0, #0]
 800e26a:	695b      	ldr	r3, [r3, #20]
 800e26c:	4798      	blx	r3
 800e26e:	7225      	strb	r5, [r4, #8]
 800e270:	6860      	ldr	r0, [r4, #4]
 800e272:	6803      	ldr	r3, [r0, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4798      	blx	r3
 800e278:	b928      	cbnz	r0, 800e286 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	4620      	mov	r0, r4
 800e27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e284:	4718      	bx	r3
 800e286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e28a:	f7fd b9bb 	b.w	800b604 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0800e290 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e290:	b510      	push	{r4, lr}
 800e292:	6082      	str	r2, [r0, #8]
 800e294:	2200      	movs	r2, #0
 800e296:	4c03      	ldr	r4, [pc, #12]	@ (800e2a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e298:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e29c:	e9c0 4100 	strd	r4, r1, [r0]
 800e2a0:	bd10      	pop	{r4, pc}
 800e2a2:	bf00      	nop
 800e2a4:	0801e728 	.word	0x0801e728

0800e2a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e2a8:	6840      	ldr	r0, [r0, #4]
 800e2aa:	6803      	ldr	r3, [r0, #0]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4718      	bx	r3

0800e2b0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800e2b0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800e2b4:	4770      	bx	lr

0800e2b6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800e2b6:	b510      	push	{r4, lr}
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e2bc:	b150      	cbz	r0, 800e2d4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800e2be:	6803      	ldr	r3, [r0, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	4798      	blx	r3
 800e2c4:	b130      	cbz	r0, 800e2d4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800e2c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	6803      	ldr	r3, [r0, #0]
 800e2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	4718      	bx	r3
 800e2d4:	bd10      	pop	{r4, pc}

0800e2d6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800e2d6:	790b      	ldrb	r3, [r1, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	bf0c      	ite	eq
 800e2dc:	2301      	moveq	r3, #1
 800e2de:	2300      	movne	r3, #0
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e2e8:	460e      	mov	r6, r1
 800e2ea:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 800e2ee:	d109      	bne.n	800e304 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800e2f0:	b14d      	cbz	r5, 800e306 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800e2f2:	7933      	ldrb	r3, [r6, #4]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d10c      	bne.n	800e312 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e302:	4718      	bx	r3
 800e304:	b12d      	cbz	r5, 800e312 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	4620      	mov	r0, r4
 800e30a:	695b      	ldr	r3, [r3, #20]
 800e30c:	4798      	blx	r3
 800e30e:	2d00      	cmp	r5, #0
 800e310:	d1ef      	bne.n	800e2f2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800e312:	bd70      	pop	{r4, r5, r6, pc}

0800e314 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800e314:	2300      	movs	r3, #0
 800e316:	8083      	strh	r3, [r0, #4]
 800e318:	80c3      	strh	r3, [r0, #6]
 800e31a:	8003      	strh	r3, [r0, #0]
 800e31c:	8043      	strh	r3, [r0, #2]
 800e31e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800e322:	2bff      	cmp	r3, #255	@ 0xff
 800e324:	bf01      	itttt	eq
 800e326:	890b      	ldrheq	r3, [r1, #8]
 800e328:	8083      	strheq	r3, [r0, #4]
 800e32a:	894b      	ldrheq	r3, [r1, #10]
 800e32c:	80c3      	strheq	r3, [r0, #6]
 800e32e:	4770      	bx	lr

0800e330 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800e330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	466b      	mov	r3, sp
 800e336:	6808      	ldr	r0, [r1, #0]
 800e338:	6849      	ldr	r1, [r1, #4]
 800e33a:	c303      	stmia	r3!, {r0, r1}
 800e33c:	6823      	ldr	r3, [r4, #0]
 800e33e:	4669      	mov	r1, sp
 800e340:	4620      	mov	r0, r4
 800e342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e344:	4798      	blx	r3
 800e346:	4b08      	ldr	r3, [pc, #32]	@ (800e368 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800e34e:	b10a      	cbz	r2, 800e354 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800e350:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800e352:	b900      	cbnz	r0, 800e356 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800e354:	6898      	ldr	r0, [r3, #8]
 800e356:	6803      	ldr	r3, [r0, #0]
 800e358:	4669      	mov	r1, sp
 800e35a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e35c:	6a1d      	ldr	r5, [r3, #32]
 800e35e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800e362:	47a8      	blx	r5
 800e364:	b003      	add	sp, #12
 800e366:	bd30      	pop	{r4, r5, pc}
 800e368:	24065a50 	.word	0x24065a50

0800e36c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800e36c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800e370:	b12a      	cbz	r2, 800e37e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800e372:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800e376:	b112      	cbz	r2, 800e37e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800e378:	6803      	ldr	r3, [r0, #0]
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	4718      	bx	r3
 800e37e:	4770      	bx	lr

0800e380 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800e380:	b570      	push	{r4, r5, r6, lr}
 800e382:	880b      	ldrh	r3, [r1, #0]
 800e384:	4605      	mov	r5, r0
 800e386:	4604      	mov	r4, r0
 800e388:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800e38a:	8813      	ldrh	r3, [r2, #0]
 800e38c:	f825 3f30 	strh.w	r3, [r5, #48]!
 800e390:	4628      	mov	r0, r5
 800e392:	f003 fe0d 	bl	8011fb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e396:	4606      	mov	r6, r0
 800e398:	4628      	mov	r0, r5
 800e39a:	f003 fe3d 	bl	8012018 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3a8:	4798      	blx	r3
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3b6:	4718      	bx	r3

0800e3b8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800e3be:	4604      	mov	r4, r0
 800e3c0:	2bff      	cmp	r3, #255	@ 0xff
 800e3c2:	d006      	beq.n	800e3d2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	8003      	strh	r3, [r0, #0]
 800e3c8:	8043      	strh	r3, [r0, #2]
 800e3ca:	8083      	strh	r3, [r0, #4]
 800e3cc:	80c3      	strh	r3, [r0, #6]
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800e3d6:	b11b      	cbz	r3, 800e3e0 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800e3d8:	3130      	adds	r1, #48	@ 0x30
 800e3da:	f003 fe51 	bl	8012080 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e3de:	e7f6      	b.n	800e3ce <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800e3e0:	312e      	adds	r1, #46	@ 0x2e
 800e3e2:	e7fa      	b.n	800e3da <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800e3e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800e3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800e3ec:	b08a      	sub	sp, #40	@ 0x28
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	4688      	mov	r8, r1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d066      	beq.n	800e4c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800e3f6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800e3f8:	a805      	add	r0, sp, #20
 800e3fa:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3fe:	f003 fdd7 	bl	8011fb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e402:	4607      	mov	r7, r0
 800e404:	a805      	add	r0, sp, #20
 800e406:	f003 fe07 	bl	8012018 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e40a:	f9b8 6000 	ldrsh.w	r6, [r8]
 800e40e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800e412:	2300      	movs	r3, #0
 800e414:	4432      	add	r2, r6
 800e416:	9306      	str	r3, [sp, #24]
 800e418:	b292      	uxth	r2, r2
 800e41a:	fa0f fc82 	sxth.w	ip, r2
 800e41e:	459c      	cmp	ip, r3
 800e420:	dd52      	ble.n	800e4c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e422:	42b7      	cmp	r7, r6
 800e424:	dd50      	ble.n	800e4c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e426:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800e42a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800e42e:	442b      	add	r3, r5
 800e430:	b29b      	uxth	r3, r3
 800e432:	b219      	sxth	r1, r3
 800e434:	2900      	cmp	r1, #0
 800e436:	dd47      	ble.n	800e4c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e438:	42a8      	cmp	r0, r5
 800e43a:	dd45      	ble.n	800e4c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e43c:	4567      	cmp	r7, ip
 800e43e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800e442:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800e446:	bfb8      	it	lt
 800e448:	b2ba      	uxthlt	r2, r7
 800e44a:	4288      	cmp	r0, r1
 800e44c:	f8ad 6018 	strh.w	r6, [sp, #24]
 800e450:	bfb8      	it	lt
 800e452:	b283      	uxthlt	r3, r0
 800e454:	1b92      	subs	r2, r2, r6
 800e456:	f8ad 501a 	strh.w	r5, [sp, #26]
 800e45a:	1b5b      	subs	r3, r3, r5
 800e45c:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e460:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e464:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d026      	beq.n	800e4be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800e470:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e474:	2b00      	cmp	r3, #0
 800e476:	dd22      	ble.n	800e4be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800e478:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dd1e      	ble.n	800e4be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800e480:	2300      	movs	r3, #0
 800e482:	a908      	add	r1, sp, #32
 800e484:	4620      	mov	r0, r4
 800e486:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48e:	4798      	blx	r3
 800e490:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800e498:	b10a      	cbz	r2, 800e49e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800e49a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800e49c:	b900      	cbnz	r0, 800e4a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800e49e:	6898      	ldr	r0, [r3, #8]
 800e4a0:	2501      	movs	r5, #1
 800e4a2:	6801      	ldr	r1, [r0, #0]
 800e4a4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800e4a8:	9502      	str	r5, [sp, #8]
 800e4aa:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800e4ae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e4b2:	9401      	str	r4, [sp, #4]
 800e4b4:	ac06      	add	r4, sp, #24
 800e4b6:	9400      	str	r4, [sp, #0]
 800e4b8:	688c      	ldr	r4, [r1, #8]
 800e4ba:	a905      	add	r1, sp, #20
 800e4bc:	47a0      	blx	r4
 800e4be:	b00a      	add	sp, #40	@ 0x28
 800e4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800e4c6:	e797      	b.n	800e3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	9307      	str	r3, [sp, #28]
 800e4cc:	e7ca      	b.n	800e464 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800e4ce:	bf00      	nop
 800e4d0:	24065a50 	.word	0x24065a50

0800e4d4 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800e4d4:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800e4d8:	b12a      	cbz	r2, 800e4e6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800e4da:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800e4de:	b112      	cbz	r2, 800e4e6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800e4e0:	6803      	ldr	r3, [r0, #0]
 800e4e2:	695b      	ldr	r3, [r3, #20]
 800e4e4:	4718      	bx	r3
 800e4e6:	4770      	bx	lr

0800e4e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800e4e8:	b510      	push	{r4, lr}
 800e4ea:	6803      	ldr	r3, [r0, #0]
 800e4ec:	460c      	mov	r4, r1
 800e4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f0:	4798      	blx	r3
 800e4f2:	1b03      	subs	r3, r0, r4
 800e4f4:	4258      	negs	r0, r3
 800e4f6:	4158      	adcs	r0, r3
 800e4f8:	bd10      	pop	{r4, pc}
	...

0800e4fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800e4fc:	4b01      	ldr	r3, [pc, #4]	@ (800e504 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800e4fe:	6019      	str	r1, [r3, #0]
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	24065a58 	.word	0x24065a58

0800e508 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4696      	mov	lr, r2
 800e50e:	b097      	sub	sp, #92	@ 0x5c
 800e510:	4605      	mov	r5, r0
 800e512:	4614      	mov	r4, r2
 800e514:	460e      	mov	r6, r1
 800e516:	461f      	mov	r7, r3
 800e518:	f10d 0c1c 	add.w	ip, sp, #28
 800e51c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800e520:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800e524:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800e528:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e52c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e530:	f8de 3000 	ldr.w	r3, [lr]
 800e534:	f104 0e14 	add.w	lr, r4, #20
 800e538:	f8cc 3000 	str.w	r3, [ip]
 800e53c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e540:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e544:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e548:	f8de 3000 	ldr.w	r3, [lr]
 800e54c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800e550:	f8cc 3000 	str.w	r3, [ip]
 800e554:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e55c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e560:	f8de 3000 	ldr.w	r3, [lr]
 800e564:	4631      	mov	r1, r6
 800e566:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e568:	4628      	mov	r0, r5
 800e56a:	f8cc 3000 	str.w	r3, [ip]
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	9201      	str	r2, [sp, #4]
 800e572:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e574:	f8cd 8008 	str.w	r8, [sp, #8]
 800e578:	9200      	str	r2, [sp, #0]
 800e57a:	aa07      	add	r2, sp, #28
 800e57c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800e580:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800e584:	463b      	mov	r3, r7
 800e586:	47d8      	blx	fp
 800e588:	46a6      	mov	lr, r4
 800e58a:	f10d 0c1c 	add.w	ip, sp, #28
 800e58e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e596:	f8de 3000 	ldr.w	r3, [lr]
 800e59a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800e59e:	343c      	adds	r4, #60	@ 0x3c
 800e5a0:	f8cc 3000 	str.w	r3, [ip]
 800e5a4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e5a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5b0:	f8de 3000 	ldr.w	r3, [lr]
 800e5b4:	f8cc 3000 	str.w	r3, [ip]
 800e5b8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e5bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f8cc 3000 	str.w	r3, [ip]
 800e5cc:	682b      	ldr	r3, [r5, #0]
 800e5ce:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800e5d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e5d4:	f8cd 8008 	str.w	r8, [sp, #8]
 800e5d8:	9201      	str	r2, [sp, #4]
 800e5da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e5dc:	9200      	str	r2, [sp, #0]
 800e5de:	aa07      	add	r2, sp, #28
 800e5e0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800e5e2:	463b      	mov	r3, r7
 800e5e4:	47a0      	blx	r4
 800e5e6:	b017      	add	sp, #92	@ 0x5c
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5ec <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	4770      	bx	lr

0800e5f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	b08d      	sub	sp, #52	@ 0x34
 800e5f6:	4688      	mov	r8, r1
 800e5f8:	f8d3 c000 	ldr.w	ip, [r3]
 800e5fc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800e5fe:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800e602:	680f      	ldr	r7, [r1, #0]
 800e604:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800e608:	eba7 070c 	sub.w	r7, r7, ip
 800e60c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800e610:	edd3 6a07 	vldr	s13, [r3, #28]
 800e614:	42bc      	cmp	r4, r7
 800e616:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800e618:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800e61c:	bfa8      	it	ge
 800e61e:	463c      	movge	r4, r7
 800e620:	f9b1 9000 	ldrsh.w	r9, [r1]
 800e624:	f9ba 1000 	ldrsh.w	r1, [sl]
 800e628:	ee07 4a90 	vmov	s15, r4
 800e62c:	eb09 0e0c 	add.w	lr, r9, ip
 800e630:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800e634:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800e638:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800e63c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800e640:	4571      	cmp	r1, lr
 800e642:	ee25 4a04 	vmul.f32	s8, s10, s8
 800e646:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e64a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800e64e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e652:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800e656:	ee32 1a05 	vadd.f32	s2, s4, s10
 800e65a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e65e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800e662:	ee61 1a87 	vmul.f32	s3, s3, s14
 800e666:	ee22 2a07 	vmul.f32	s4, s4, s14
 800e66a:	f340 808c 	ble.w	800e786 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800e66e:	eba1 060e 	sub.w	r6, r1, lr
 800e672:	fb96 f5f4 	sdiv	r5, r6, r4
 800e676:	ee07 5a10 	vmov	s14, r5
 800e67a:	2d00      	cmp	r5, #0
 800e67c:	fb04 6615 	mls	r6, r4, r5, r6
 800e680:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e684:	eea7 0a04 	vfma.f32	s0, s14, s8
 800e688:	eee7 0a24 	vfma.f32	s1, s14, s9
 800e68c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800e690:	dd12      	ble.n	800e6b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800e692:	ee70 6a44 	vsub.f32	s13, s0, s8
 800e696:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800e69a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800e69e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a6:	bf14      	ite	ne
 800e6a8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800e6ac:	eeb0 7a67 	vmoveq.f32	s14, s15
 800e6b0:	ee61 1a87 	vmul.f32	s3, s3, s14
 800e6b4:	ee22 2a07 	vmul.f32	s4, s4, s14
 800e6b8:	fb05 f204 	mul.w	r2, r5, r4
 800e6bc:	1abf      	subs	r7, r7, r2
 800e6be:	4494      	add	ip, r2
 800e6c0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800e6c4:	4411      	add	r1, r2
 800e6c6:	eb09 020c 	add.w	r2, r9, ip
 800e6ca:	b209      	sxth	r1, r1
 800e6cc:	443a      	add	r2, r7
 800e6ce:	428a      	cmp	r2, r1
 800e6d0:	bfc4      	itt	gt
 800e6d2:	eba1 0209 	subgt.w	r2, r1, r9
 800e6d6:	eba2 070c 	subgt.w	r7, r2, ip
 800e6da:	2f00      	cmp	r7, #0
 800e6dc:	dd50      	ble.n	800e780 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800e6de:	fb97 f1f4 	sdiv	r1, r7, r4
 800e6e2:	fb04 7211 	mls	r2, r4, r1, r7
 800e6e6:	b90a      	cbnz	r2, 800e6ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800e6e8:	3901      	subs	r1, #1
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800e6f0:	6840      	ldr	r0, [r0, #4]
 800e6f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800e6f6:	44b6      	add	lr, r6
 800e6f8:	f8d0 a000 	ldr.w	sl, [r0]
 800e6fc:	2900      	cmp	r1, #0
 800e6fe:	bfcc      	ite	gt
 800e700:	46a1      	movgt	r9, r4
 800e702:	4691      	movle	r9, r2
 800e704:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e706:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800e708:	fb04 e505 	mla	r5, r4, r5, lr
 800e70c:	eef0 6a42 	vmov.f32	s13, s4
 800e710:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800e714:	9008      	str	r0, [sp, #32]
 800e716:	eeb0 7a61 	vmov.f32	s14, s3
 800e71a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800e71c:	695b      	ldr	r3, [r3, #20]
 800e71e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800e722:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800e726:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800e72a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e72c:	445b      	add	r3, fp
 800e72e:	9307      	str	r3, [sp, #28]
 800e730:	ee16 3a90 	vmov	r3, s13
 800e734:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800e738:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800e73c:	ee21 3a23 	vmul.f32	s6, s2, s7
 800e740:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800e744:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800e748:	ee17 7a90 	vmov	r7, s15
 800e74c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800e750:	fb97 f7f4 	sdiv	r7, r7, r4
 800e754:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800e758:	ee17 ca90 	vmov	ip, s15
 800e75c:	fb9c fcf4 	sdiv	ip, ip, r4
 800e760:	fb0c 3306 	mla	r3, ip, r6, r3
 800e764:	9302      	str	r3, [sp, #8]
 800e766:	ee17 3a10 	vmov	r3, s14
 800e76a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800e76e:	fb07 3706 	mla	r7, r7, r6, r3
 800e772:	eba9 0306 	sub.w	r3, r9, r6
 800e776:	e9cd 4700 	strd	r4, r7, [sp]
 800e77a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800e77e:	47a0      	blx	r4
 800e780:	b00d      	add	sp, #52	@ 0x34
 800e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e786:	2500      	movs	r5, #0
 800e788:	462e      	mov	r6, r5
 800e78a:	e799      	b.n	800e6c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800e78c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e790:	b0db      	sub	sp, #364	@ 0x16c
 800e792:	461d      	mov	r5, r3
 800e794:	4614      	mov	r4, r2
 800e796:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800e79a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e79c:	4629      	mov	r1, r5
 800e79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800e7a4:	9009      	str	r0, [sp, #36]	@ 0x24
 800e7a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7a8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800e7ac:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800e7b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7b2:	6803      	ldr	r3, [r0, #0]
 800e7b4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800e7b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800e7ba:	47b8      	blx	r7
 800e7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7be:	6058      	str	r0, [r3, #4]
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	f000 83a1 	beq.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e7c6:	682b      	ldr	r3, [r5, #0]
 800e7c8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800e7cc:	ed94 7a02 	vldr	s14, [r4, #8]
 800e7d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800e7d2:	686b      	ldr	r3, [r5, #4]
 800e7d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7d8:	9315      	str	r3, [sp, #84]	@ 0x54
 800e7da:	4bc1      	ldr	r3, [pc, #772]	@ (800eae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800e7dc:	7819      	ldrb	r1, [r3, #0]
 800e7de:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800e7e2:	2900      	cmp	r1, #0
 800e7e4:	bf16      	itet	ne
 800e7e6:	4619      	movne	r1, r3
 800e7e8:	4611      	moveq	r1, r2
 800e7ea:	4613      	movne	r3, r2
 800e7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f0:	9116      	str	r1, [sp, #88]	@ 0x58
 800e7f2:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800e7f6:	f240 8387 	bls.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e7fa:	ed94 7a07 	vldr	s14, [r4, #28]
 800e7fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e806:	f240 837f 	bls.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e80a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800e80e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e816:	f240 8377 	bls.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e81a:	6822      	ldr	r2, [r4, #0]
 800e81c:	4bb1      	ldr	r3, [pc, #708]	@ (800eae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800e81e:	429a      	cmp	r2, r3
 800e820:	f2c0 8372 	blt.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e824:	49b0      	ldr	r1, [pc, #704]	@ (800eae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800e826:	6963      	ldr	r3, [r4, #20]
 800e828:	428a      	cmp	r2, r1
 800e82a:	f300 836d 	bgt.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e82e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800e832:	48ae      	ldr	r0, [pc, #696]	@ (800eaec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800e834:	33ff      	adds	r3, #255	@ 0xff
 800e836:	4283      	cmp	r3, r0
 800e838:	f200 8366 	bhi.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e83c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e83e:	4dac      	ldr	r5, [pc, #688]	@ (800eaf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800e840:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800e844:	33ff      	adds	r3, #255	@ 0xff
 800e846:	42ab      	cmp	r3, r5
 800e848:	f200 835e 	bhi.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e84c:	6862      	ldr	r2, [r4, #4]
 800e84e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800e852:	33ff      	adds	r3, #255	@ 0xff
 800e854:	4283      	cmp	r3, r0
 800e856:	f200 8357 	bhi.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e85a:	69a1      	ldr	r1, [r4, #24]
 800e85c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800e860:	33ff      	adds	r3, #255	@ 0xff
 800e862:	4283      	cmp	r3, r0
 800e864:	f200 8350 	bhi.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e868:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e86a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800e86e:	30ff      	adds	r0, #255	@ 0xff
 800e870:	42a8      	cmp	r0, r5
 800e872:	f200 8349 	bhi.w	800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e876:	428a      	cmp	r2, r1
 800e878:	f280 8110 	bge.w	800ea9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800e87c:	429a      	cmp	r2, r3
 800e87e:	f300 8119 	bgt.w	800eab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800e882:	4299      	cmp	r1, r3
 800e884:	f280 811d 	bge.w	800eac2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800e888:	2502      	movs	r5, #2
 800e88a:	2701      	movs	r7, #1
 800e88c:	46a9      	mov	r9, r5
 800e88e:	46b8      	mov	r8, r7
 800e890:	f04f 0a00 	mov.w	sl, #0
 800e894:	4621      	mov	r1, r4
 800e896:	a849      	add	r0, sp, #292	@ 0x124
 800e898:	f003 f806 	bl	80118a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800e89c:	4622      	mov	r2, r4
 800e89e:	4653      	mov	r3, sl
 800e8a0:	a949      	add	r1, sp, #292	@ 0x124
 800e8a2:	f8cd 9000 	str.w	r9, [sp]
 800e8a6:	a819      	add	r0, sp, #100	@ 0x64
 800e8a8:	f003 f92e 	bl	8011b08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e8ac:	4622      	mov	r2, r4
 800e8ae:	4653      	mov	r3, sl
 800e8b0:	a949      	add	r1, sp, #292	@ 0x124
 800e8b2:	f8cd 8000 	str.w	r8, [sp]
 800e8b6:	a829      	add	r0, sp, #164	@ 0xa4
 800e8b8:	f003 f926 	bl	8011b08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e8bc:	4643      	mov	r3, r8
 800e8be:	4622      	mov	r2, r4
 800e8c0:	a949      	add	r1, sp, #292	@ 0x124
 800e8c2:	f8cd 9000 	str.w	r9, [sp]
 800e8c6:	a839      	add	r0, sp, #228	@ 0xe4
 800e8c8:	f003 f91e 	bl	8011b08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e8cc:	42af      	cmp	r7, r5
 800e8ce:	af12      	add	r7, sp, #72	@ 0x48
 800e8d0:	bfb7      	itett	lt
 800e8d2:	2300      	movlt	r3, #0
 800e8d4:	2301      	movge	r3, #1
 800e8d6:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800e8d8:	ac19      	addlt	r4, sp, #100	@ 0x64
 800e8da:	bfb1      	iteee	lt
 800e8dc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800e8de:	ad19      	addge	r5, sp, #100	@ 0x64
 800e8e0:	930e      	strge	r3, [sp, #56]	@ 0x38
 800e8e2:	ac29      	addge	r4, sp, #164	@ 0xa4
 800e8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8ea:	e887 0003 	stmia.w	r7, {r0, r1}
 800e8ee:	b928      	cbnz	r0, 800e8fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800e8f0:	4b80      	ldr	r3, [pc, #512]	@ (800eaf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800e8f2:	6818      	ldr	r0, [r3, #0]
 800e8f4:	6803      	ldr	r3, [r0, #0]
 800e8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8f8:	4798      	blx	r3
 800e8fa:	6038      	str	r0, [r7, #0]
 800e8fc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e8fe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800e902:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e906:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800e908:	930c      	str	r3, [sp, #48]	@ 0x30
 800e90a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e90c:	6963      	ldr	r3, [r4, #20]
 800e90e:	440b      	add	r3, r1
 800e910:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800e914:	4408      	add	r0, r1
 800e916:	b200      	sxth	r0, r0
 800e918:	4283      	cmp	r3, r0
 800e91a:	900d      	str	r0, [sp, #52]	@ 0x34
 800e91c:	f280 80dd 	bge.w	800eada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800e920:	428b      	cmp	r3, r1
 800e922:	da08      	bge.n	800e936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e924:	2a00      	cmp	r2, #0
 800e926:	dd06      	ble.n	800e936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e928:	1acb      	subs	r3, r1, r3
 800e92a:	429a      	cmp	r2, r3
 800e92c:	f2c0 80e4 	blt.w	800eaf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800e930:	2b00      	cmp	r3, #0
 800e932:	f300 80e2 	bgt.w	800eafa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800e936:	6967      	ldr	r7, [r4, #20]
 800e938:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800e93c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e93e:	443b      	add	r3, r7
 800e940:	461f      	mov	r7, r3
 800e942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e944:	1bdf      	subs	r7, r3, r7
 800e946:	4297      	cmp	r7, r2
 800e948:	bfa8      	it	ge
 800e94a:	4617      	movge	r7, r2
 800e94c:	2f00      	cmp	r7, #0
 800e94e:	f340 8166 	ble.w	800ec1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800e952:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e954:	6829      	ldr	r1, [r5, #0]
 800e956:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e95a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800e95e:	4411      	add	r1, r2
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	4299      	cmp	r1, r3
 800e964:	dd1a      	ble.n	800e99c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800e966:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800e96a:	4402      	add	r2, r0
 800e96c:	440b      	add	r3, r1
 800e96e:	b21b      	sxth	r3, r3
 800e970:	429a      	cmp	r2, r3
 800e972:	dc13      	bgt.n	800e99c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800e974:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e976:	a912      	add	r1, sp, #72	@ 0x48
 800e978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	9206      	str	r2, [sp, #24]
 800e980:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e982:	9500      	str	r5, [sp, #0]
 800e984:	9205      	str	r2, [sp, #20]
 800e986:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e988:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e98c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800e98e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e992:	aa49      	add	r2, sp, #292	@ 0x124
 800e994:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800e998:	4623      	mov	r3, r4
 800e99a:	47c8      	blx	r9
 800e99c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800e9a0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800e9a4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800e9a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9ac:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800e9b0:	68a1      	ldr	r1, [r4, #8]
 800e9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9b6:	ed94 6a08 	vldr	s12, [r4, #32]
 800e9ba:	edd4 6a07 	vldr	s13, [r4, #28]
 800e9be:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800e9c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e9c6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800e9ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e9ce:	edc4 6a07 	vstr	s13, [r4, #28]
 800e9d2:	441a      	add	r2, r3
 800e9d4:	6963      	ldr	r3, [r4, #20]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	6022      	str	r2, [r4, #0]
 800e9da:	6163      	str	r3, [r4, #20]
 800e9dc:	69a3      	ldr	r3, [r4, #24]
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	61a3      	str	r3, [r4, #24]
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	440b      	add	r3, r1
 800e9e6:	68e1      	ldr	r1, [r4, #12]
 800e9e8:	428b      	cmp	r3, r1
 800e9ea:	6123      	str	r3, [r4, #16]
 800e9ec:	db15      	blt.n	800ea1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800e9ee:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800e9f2:	3201      	adds	r2, #1
 800e9f4:	1a5b      	subs	r3, r3, r1
 800e9f6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e9fa:	6022      	str	r2, [r4, #0]
 800e9fc:	6123      	str	r3, [r4, #16]
 800e9fe:	edc4 6a07 	vstr	s13, [r4, #28]
 800ea02:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800ea06:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ea0a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ea0e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800ea12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea16:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ea1a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800ea1e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800ea22:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800ea26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea2a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800ea2e:	68a9      	ldr	r1, [r5, #8]
 800ea30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea34:	ed95 6a08 	vldr	s12, [r5, #32]
 800ea38:	edd5 6a07 	vldr	s13, [r5, #28]
 800ea3c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ea40:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ea44:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ea48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea4c:	edc5 6a07 	vstr	s13, [r5, #28]
 800ea50:	441a      	add	r2, r3
 800ea52:	696b      	ldr	r3, [r5, #20]
 800ea54:	3301      	adds	r3, #1
 800ea56:	602a      	str	r2, [r5, #0]
 800ea58:	616b      	str	r3, [r5, #20]
 800ea5a:	69ab      	ldr	r3, [r5, #24]
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	61ab      	str	r3, [r5, #24]
 800ea60:	692b      	ldr	r3, [r5, #16]
 800ea62:	440b      	add	r3, r1
 800ea64:	68e9      	ldr	r1, [r5, #12]
 800ea66:	428b      	cmp	r3, r1
 800ea68:	612b      	str	r3, [r5, #16]
 800ea6a:	db15      	blt.n	800ea98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800ea6c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800ea70:	3201      	adds	r2, #1
 800ea72:	1a5b      	subs	r3, r3, r1
 800ea74:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ea78:	602a      	str	r2, [r5, #0]
 800ea7a:	612b      	str	r3, [r5, #16]
 800ea7c:	edc5 6a07 	vstr	s13, [r5, #28]
 800ea80:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800ea84:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ea88:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ea8c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800ea90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea94:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ea98:	3f01      	subs	r7, #1
 800ea9a:	e757      	b.n	800e94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800ea9c:	4299      	cmp	r1, r3
 800ea9e:	dc13      	bgt.n	800eac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	da14      	bge.n	800eace <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800eaa4:	2502      	movs	r5, #2
 800eaa6:	2703      	movs	r7, #3
 800eaa8:	f04f 0800 	mov.w	r8, #0
 800eaac:	46a9      	mov	r9, r5
 800eaae:	f04f 0a01 	mov.w	sl, #1
 800eab2:	e6ef      	b.n	800e894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800eab4:	2501      	movs	r5, #1
 800eab6:	2700      	movs	r7, #0
 800eab8:	46a9      	mov	r9, r5
 800eaba:	46b8      	mov	r8, r7
 800eabc:	f04f 0a02 	mov.w	sl, #2
 800eac0:	e6e8      	b.n	800e894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800eac2:	2501      	movs	r5, #1
 800eac4:	2702      	movs	r7, #2
 800eac6:	e6e1      	b.n	800e88c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800eac8:	2500      	movs	r5, #0
 800eaca:	2701      	movs	r7, #1
 800eacc:	e7f4      	b.n	800eab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800eace:	2702      	movs	r7, #2
 800ead0:	2503      	movs	r5, #3
 800ead2:	f04f 0900 	mov.w	r9, #0
 800ead6:	46b8      	mov	r8, r7
 800ead8:	e7e9      	b.n	800eaae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800eada:	4613      	mov	r3, r2
 800eadc:	e728      	b.n	800e930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800eade:	bf00      	nop
 800eae0:	24065a48 	.word	0x24065a48
 800eae4:	fffd8f01 	.word	0xfffd8f01
 800eae8:	00027100 	.word	0x00027100
 800eaec:	0004e1ff 	.word	0x0004e1ff
 800eaf0:	0004e1fe 	.word	0x0004e1fe
 800eaf4:	24065a50 	.word	0x24065a50
 800eaf8:	4613      	mov	r3, r2
 800eafa:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800eafc:	469e      	mov	lr, r3
 800eafe:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800eb00:	469c      	mov	ip, r3
 800eb02:	9111      	str	r1, [sp, #68]	@ 0x44
 800eb04:	f04f 0900 	mov.w	r9, #0
 800eb08:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800eb0c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800eb10:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800eb14:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800eb18:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800eb1c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800eb20:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800eb24:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800eb28:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800eb2c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800eb30:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800eb34:	f1bc 0f00 	cmp.w	ip, #0
 800eb38:	d147      	bne.n	800ebca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800eb3a:	eb03 0c07 	add.w	ip, r3, r7
 800eb3e:	1ad7      	subs	r7, r2, r3
 800eb40:	f1b9 0f00 	cmp.w	r9, #0
 800eb44:	d009      	beq.n	800eb5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800eb46:	9029      	str	r0, [sp, #164]	@ 0xa4
 800eb48:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800eb4c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800eb50:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800eb54:	912d      	str	r1, [sp, #180]	@ 0xb4
 800eb56:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800eb5a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800eb5c:	f04f 0800 	mov.w	r8, #0
 800eb60:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800eb64:	9111      	str	r1, [sp, #68]	@ 0x44
 800eb66:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800eb6a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800eb6e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800eb72:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800eb76:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800eb7a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800eb7e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800eb82:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800eb86:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800eb8a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800eb8e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800eb92:	f1be 0f00 	cmp.w	lr, #0
 800eb96:	d031      	beq.n	800ebfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800eb98:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800eb9a:	4450      	add	r0, sl
 800eb9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800eba0:	4431      	add	r1, r6
 800eba2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800eba6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ebaa:	4549      	cmp	r1, r9
 800ebac:	db08      	blt.n	800ebc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800ebae:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ebb2:	3001      	adds	r0, #1
 800ebb4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ebb8:	eba1 0109 	sub.w	r1, r1, r9
 800ebbc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ebc0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ebc4:	f04f 0801 	mov.w	r8, #1
 800ebc8:	e7e3      	b.n	800eb92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800ebca:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ebcc:	4450      	add	r0, sl
 800ebce:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ebd2:	4431      	add	r1, r6
 800ebd4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ebd8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800ebdc:	4541      	cmp	r1, r8
 800ebde:	db08      	blt.n	800ebf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800ebe0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ebea:	eba1 0108 	sub.w	r1, r1, r8
 800ebee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ebf2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebf6:	f04f 0901 	mov.w	r9, #1
 800ebfa:	e79b      	b.n	800eb34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800ebfc:	449c      	add	ip, r3
 800ebfe:	1aff      	subs	r7, r7, r3
 800ec00:	f1b8 0f00 	cmp.w	r8, #0
 800ec04:	d009      	beq.n	800ec1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800ec06:	9019      	str	r0, [sp, #100]	@ 0x64
 800ec08:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800ec0c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800ec10:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800ec14:	911d      	str	r1, [sp, #116]	@ 0x74
 800ec16:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800ec1a:	1ad2      	subs	r2, r2, r3
 800ec1c:	e68b      	b.n	800e936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ec1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec20:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f000 80d1 	beq.w	800edca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800ec28:	ad19      	add	r5, sp, #100	@ 0x64
 800ec2a:	ac39      	add	r4, sp, #228	@ 0xe4
 800ec2c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ec2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ec32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec36:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ec3a:	6963      	ldr	r3, [r4, #20]
 800ec3c:	440b      	add	r3, r1
 800ec3e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ec42:	4408      	add	r0, r1
 800ec44:	b200      	sxth	r0, r0
 800ec46:	4283      	cmp	r3, r0
 800ec48:	900d      	str	r0, [sp, #52]	@ 0x34
 800ec4a:	f280 80c1 	bge.w	800edd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800ec4e:	428b      	cmp	r3, r1
 800ec50:	da08      	bge.n	800ec64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ec52:	2a00      	cmp	r2, #0
 800ec54:	dd06      	ble.n	800ec64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ec56:	1acb      	subs	r3, r1, r3
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	f2c0 80bb 	blt.w	800edd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f300 80b9 	bgt.w	800edd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800ec64:	6967      	ldr	r7, [r4, #20]
 800ec66:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800ec6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec6c:	443b      	add	r3, r7
 800ec6e:	461f      	mov	r7, r3
 800ec70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec72:	1bdf      	subs	r7, r3, r7
 800ec74:	4297      	cmp	r7, r2
 800ec76:	bfa8      	it	ge
 800ec78:	4617      	movge	r7, r2
 800ec7a:	2f00      	cmp	r7, #0
 800ec7c:	f340 813c 	ble.w	800eef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800ec80:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ec82:	6829      	ldr	r1, [r5, #0]
 800ec84:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ec88:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ec8c:	4411      	add	r1, r2
 800ec8e:	6820      	ldr	r0, [r4, #0]
 800ec90:	4299      	cmp	r1, r3
 800ec92:	dd1a      	ble.n	800ecca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ec94:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ec98:	4402      	add	r2, r0
 800ec9a:	440b      	add	r3, r1
 800ec9c:	b21b      	sxth	r3, r3
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	dc13      	bgt.n	800ecca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800eca2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800eca4:	a912      	add	r1, sp, #72	@ 0x48
 800eca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	9206      	str	r2, [sp, #24]
 800ecae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecb0:	9500      	str	r5, [sp, #0]
 800ecb2:	9205      	str	r2, [sp, #20]
 800ecb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecb6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ecba:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800ecbc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ecc0:	aa49      	add	r2, sp, #292	@ 0x124
 800ecc2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800ecc6:	4623      	mov	r3, r4
 800ecc8:	47c8      	blx	r9
 800ecca:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800ecce:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800ecd2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800ecd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecda:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800ecde:	68a1      	ldr	r1, [r4, #8]
 800ece0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ece4:	ed94 6a08 	vldr	s12, [r4, #32]
 800ece8:	edd4 6a07 	vldr	s13, [r4, #28]
 800ecec:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ecf0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ecf4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ecf8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ecfc:	edc4 6a07 	vstr	s13, [r4, #28]
 800ed00:	441a      	add	r2, r3
 800ed02:	6963      	ldr	r3, [r4, #20]
 800ed04:	3301      	adds	r3, #1
 800ed06:	6022      	str	r2, [r4, #0]
 800ed08:	6163      	str	r3, [r4, #20]
 800ed0a:	69a3      	ldr	r3, [r4, #24]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	61a3      	str	r3, [r4, #24]
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	440b      	add	r3, r1
 800ed14:	68e1      	ldr	r1, [r4, #12]
 800ed16:	428b      	cmp	r3, r1
 800ed18:	6123      	str	r3, [r4, #16]
 800ed1a:	db15      	blt.n	800ed48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800ed1c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800ed20:	3201      	adds	r2, #1
 800ed22:	1a5b      	subs	r3, r3, r1
 800ed24:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ed28:	6022      	str	r2, [r4, #0]
 800ed2a:	6123      	str	r3, [r4, #16]
 800ed2c:	edc4 6a07 	vstr	s13, [r4, #28]
 800ed30:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800ed34:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ed38:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ed3c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800ed40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed44:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ed48:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800ed4c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800ed50:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800ed54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed58:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800ed5c:	68a9      	ldr	r1, [r5, #8]
 800ed5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed62:	ed95 6a08 	vldr	s12, [r5, #32]
 800ed66:	edd5 6a07 	vldr	s13, [r5, #28]
 800ed6a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ed6e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ed72:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ed76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed7a:	edc5 6a07 	vstr	s13, [r5, #28]
 800ed7e:	441a      	add	r2, r3
 800ed80:	696b      	ldr	r3, [r5, #20]
 800ed82:	3301      	adds	r3, #1
 800ed84:	602a      	str	r2, [r5, #0]
 800ed86:	616b      	str	r3, [r5, #20]
 800ed88:	69ab      	ldr	r3, [r5, #24]
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	61ab      	str	r3, [r5, #24]
 800ed8e:	692b      	ldr	r3, [r5, #16]
 800ed90:	440b      	add	r3, r1
 800ed92:	68e9      	ldr	r1, [r5, #12]
 800ed94:	428b      	cmp	r3, r1
 800ed96:	612b      	str	r3, [r5, #16]
 800ed98:	db15      	blt.n	800edc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800ed9a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800ed9e:	3201      	adds	r2, #1
 800eda0:	1a5b      	subs	r3, r3, r1
 800eda2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800eda6:	602a      	str	r2, [r5, #0]
 800eda8:	612b      	str	r3, [r5, #16]
 800edaa:	edc5 6a07 	vstr	s13, [r5, #28]
 800edae:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800edb2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800edb6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800edba:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800edbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edc2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800edc6:	3f01      	subs	r7, #1
 800edc8:	e757      	b.n	800ec7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800edca:	ad39      	add	r5, sp, #228	@ 0xe4
 800edcc:	ac19      	add	r4, sp, #100	@ 0x64
 800edce:	e72d      	b.n	800ec2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800edd0:	4613      	mov	r3, r2
 800edd2:	e744      	b.n	800ec5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800edd4:	4613      	mov	r3, r2
 800edd6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800edd8:	469e      	mov	lr, r3
 800edda:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800edde:	461f      	mov	r7, r3
 800ede0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800ede4:	f04f 0900 	mov.w	r9, #0
 800ede8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800edec:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800edf0:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800edf4:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800edf8:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800edfc:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800edfe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800ee02:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800ee06:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800ee0a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800ee0e:	960e      	str	r6, [sp, #56]	@ 0x38
 800ee10:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800ee14:	2f00      	cmp	r7, #0
 800ee16:	d146      	bne.n	800eea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800ee18:	449c      	add	ip, r3
 800ee1a:	1ad7      	subs	r7, r2, r3
 800ee1c:	f1b9 0f00 	cmp.w	r9, #0
 800ee20:	d009      	beq.n	800ee36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800ee22:	9039      	str	r0, [sp, #228]	@ 0xe4
 800ee24:	913d      	str	r1, [sp, #244]	@ 0xf4
 800ee26:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800ee2a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800ee2e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800ee32:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800ee36:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800ee38:	f04f 0800 	mov.w	r8, #0
 800ee3c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800ee40:	910e      	str	r1, [sp, #56]	@ 0x38
 800ee42:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800ee46:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800ee4a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800ee4e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800ee52:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800ee56:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800ee5a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800ee5e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800ee62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800ee66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800ee6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800ee6e:	f1be 0f00 	cmp.w	lr, #0
 800ee72:	d030      	beq.n	800eed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800ee74:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ee76:	4450      	add	r0, sl
 800ee78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ee7c:	4431      	add	r1, r6
 800ee7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ee82:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ee86:	4549      	cmp	r1, r9
 800ee88:	db08      	blt.n	800ee9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800ee8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ee8e:	3001      	adds	r0, #1
 800ee90:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ee94:	eba1 0109 	sub.w	r1, r1, r9
 800ee98:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ee9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800eea0:	f04f 0801 	mov.w	r8, #1
 800eea4:	e7e3      	b.n	800ee6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800eea6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800eea8:	4450      	add	r0, sl
 800eeaa:	ee37 7a24 	vadd.f32	s14, s14, s9
 800eeae:	4431      	add	r1, r6
 800eeb0:	ee77 7a84 	vadd.f32	s15, s15, s8
 800eeb4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800eeb8:	4541      	cmp	r1, r8
 800eeba:	db08      	blt.n	800eece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800eebc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800eec0:	3001      	adds	r0, #1
 800eec2:	ee37 7a25 	vadd.f32	s14, s14, s11
 800eec6:	eba1 0108 	sub.w	r1, r1, r8
 800eeca:	ee77 7a86 	vadd.f32	s15, s15, s12
 800eece:	3f01      	subs	r7, #1
 800eed0:	f04f 0901 	mov.w	r9, #1
 800eed4:	e79e      	b.n	800ee14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800eed6:	449c      	add	ip, r3
 800eed8:	1aff      	subs	r7, r7, r3
 800eeda:	f1b8 0f00 	cmp.w	r8, #0
 800eede:	d009      	beq.n	800eef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800eee0:	9019      	str	r0, [sp, #100]	@ 0x64
 800eee2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800eee6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800eeea:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800eeee:	911d      	str	r1, [sp, #116]	@ 0x74
 800eef0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800eef4:	1ad2      	subs	r2, r2, r3
 800eef6:	e6b5      	b.n	800ec64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800eef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	b923      	cbnz	r3, 800ef08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800eefe:	4b04      	ldr	r3, [pc, #16]	@ (800ef10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ef00:	6818      	ldr	r0, [r3, #0]
 800ef02:	6803      	ldr	r3, [r0, #0]
 800ef04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef06:	4798      	blx	r3
 800ef08:	b05b      	add	sp, #364	@ 0x16c
 800ef0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0e:	bf00      	nop
 800ef10:	24065a50 	.word	0x24065a50

0800ef14 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d818      	bhi.n	800ef4a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800ef18:	e8df f003 	tbb	[pc, r3]
 800ef1c:	130d0602 	.word	0x130d0602
 800ef20:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ef24:	1850      	adds	r0, r2, r1
 800ef26:	4770      	bx	lr
 800ef28:	8803      	ldrh	r3, [r0, #0]
 800ef2a:	8880      	ldrh	r0, [r0, #4]
 800ef2c:	4418      	add	r0, r3
 800ef2e:	b200      	sxth	r0, r0
 800ef30:	1a80      	subs	r0, r0, r2
 800ef32:	3801      	subs	r0, #1
 800ef34:	4770      	bx	lr
 800ef36:	8803      	ldrh	r3, [r0, #0]
 800ef38:	8880      	ldrh	r0, [r0, #4]
 800ef3a:	4418      	add	r0, r3
 800ef3c:	b200      	sxth	r0, r0
 800ef3e:	1a40      	subs	r0, r0, r1
 800ef40:	e7f7      	b.n	800ef32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ef42:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ef46:	4410      	add	r0, r2
 800ef48:	4770      	bx	lr
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	4770      	bx	lr

0800ef4e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ef4e:	2b03      	cmp	r3, #3
 800ef50:	d817      	bhi.n	800ef82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800ef52:	e8df f003 	tbb	[pc, r3]
 800ef56:	0602      	.short	0x0602
 800ef58:	1009      	.short	0x1009
 800ef5a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ef5e:	1850      	adds	r0, r2, r1
 800ef60:	4770      	bx	lr
 800ef62:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ef66:	e7fa      	b.n	800ef5e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800ef68:	8843      	ldrh	r3, [r0, #2]
 800ef6a:	88c0      	ldrh	r0, [r0, #6]
 800ef6c:	4418      	add	r0, r3
 800ef6e:	b200      	sxth	r0, r0
 800ef70:	1a80      	subs	r0, r0, r2
 800ef72:	3801      	subs	r0, #1
 800ef74:	4770      	bx	lr
 800ef76:	8843      	ldrh	r3, [r0, #2]
 800ef78:	88c0      	ldrh	r0, [r0, #6]
 800ef7a:	4418      	add	r0, r3
 800ef7c:	b200      	sxth	r0, r0
 800ef7e:	1a40      	subs	r0, r0, r1
 800ef80:	e7f7      	b.n	800ef72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800ef82:	2000      	movs	r0, #0
 800ef84:	4770      	bx	lr
	...

0800ef88 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800ef88:	4b01      	ldr	r3, [pc, #4]	@ (800ef90 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	4770      	bx	lr
 800ef90:	24065a58 	.word	0x24065a58

0800ef94 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800ef94:	4603      	mov	r3, r0
 800ef96:	b1c8      	cbz	r0, 800efcc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800ef98:	0c02      	lsrs	r2, r0, #16
 800ef9a:	0412      	lsls	r2, r2, #16
 800ef9c:	b9a2      	cbnz	r2, 800efc8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800ef9e:	0403      	lsls	r3, r0, #16
 800efa0:	2010      	movs	r0, #16
 800efa2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800efa6:	bf04      	itt	eq
 800efa8:	021b      	lsleq	r3, r3, #8
 800efaa:	3008      	addeq	r0, #8
 800efac:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800efb0:	bf04      	itt	eq
 800efb2:	011b      	lsleq	r3, r3, #4
 800efb4:	3004      	addeq	r0, #4
 800efb6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800efba:	bf04      	itt	eq
 800efbc:	009b      	lsleq	r3, r3, #2
 800efbe:	3002      	addeq	r0, #2
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	db04      	blt.n	800efce <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800efc4:	3001      	adds	r0, #1
 800efc6:	4770      	bx	lr
 800efc8:	2000      	movs	r0, #0
 800efca:	e7ea      	b.n	800efa2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800efcc:	2020      	movs	r0, #32
 800efce:	4770      	bx	lr

0800efd0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	b087      	sub	sp, #28
 800efd6:	460d      	mov	r5, r1
 800efd8:	4616      	mov	r6, r2
 800efda:	4698      	mov	r8, r3
 800efdc:	4601      	mov	r1, r0
 800efde:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800efe2:	b120      	cbz	r0, 800efee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800efe4:	b11a      	cbz	r2, 800efee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800efe6:	2d1f      	cmp	r5, #31
 800efe8:	d801      	bhi.n	800efee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800efea:	2b1f      	cmp	r3, #31
 800efec:	d904      	bls.n	800eff8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800efee:	2000      	movs	r0, #0
 800eff0:	6038      	str	r0, [r7, #0]
 800eff2:	b007      	add	sp, #28
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff8:	b97d      	cbnz	r5, 800f01a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800effa:	b143      	cbz	r3, 800f00e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800effc:	4602      	mov	r2, r0
 800effe:	462b      	mov	r3, r5
 800f000:	4641      	mov	r1, r8
 800f002:	4630      	mov	r0, r6
 800f004:	e9cd 4700 	strd	r4, r7, [sp]
 800f008:	f7ff ffe2 	bl	800efd0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f00c:	e7f1      	b.n	800eff2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f00e:	f04f 33ff 	mov.w	r3, #4294967295
 800f012:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800f016:	603b      	str	r3, [r7, #0]
 800f018:	e7eb      	b.n	800eff2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f01a:	fa32 fa05 	lsrs.w	sl, r2, r5
 800f01e:	d106      	bne.n	800f02e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800f020:	4346      	muls	r6, r0
 800f022:	fbb6 f0f4 	udiv	r0, r6, r4
 800f026:	fb04 6610 	mls	r6, r4, r0, r6
 800f02a:	603e      	str	r6, [r7, #0]
 800f02c:	e7e1      	b.n	800eff2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f02e:	2201      	movs	r2, #1
 800f030:	fa00 fb05 	lsl.w	fp, r0, r5
 800f034:	40aa      	lsls	r2, r5
 800f036:	fbbb f9f4 	udiv	r9, fp, r4
 800f03a:	3a01      	subs	r2, #1
 800f03c:	fb0a f309 	mul.w	r3, sl, r9
 800f040:	fb04 b919 	mls	r9, r4, r9, fp
 800f044:	4016      	ands	r6, r2
 800f046:	9303      	str	r3, [sp, #12]
 800f048:	4630      	mov	r0, r6
 800f04a:	f7ff ffa3 	bl	800ef94 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f04e:	462b      	mov	r3, r5
 800f050:	460a      	mov	r2, r1
 800f052:	4601      	mov	r1, r0
 800f054:	4630      	mov	r0, r6
 800f056:	e9cd 4700 	strd	r4, r7, [sp]
 800f05a:	f7ff ffb9 	bl	800efd0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f05e:	4606      	mov	r6, r0
 800f060:	4648      	mov	r0, r9
 800f062:	eb05 0108 	add.w	r1, r5, r8
 800f066:	f7ff ff95 	bl	800ef94 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f06a:	ab05      	add	r3, sp, #20
 800f06c:	464a      	mov	r2, r9
 800f06e:	e9cd 4300 	strd	r4, r3, [sp]
 800f072:	4603      	mov	r3, r0
 800f074:	4650      	mov	r0, sl
 800f076:	f7ff ffab 	bl	800efd0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f07a:	6839      	ldr	r1, [r7, #0]
 800f07c:	9a05      	ldr	r2, [sp, #20]
 800f07e:	9b03      	ldr	r3, [sp, #12]
 800f080:	4411      	add	r1, r2
 800f082:	fbb1 f2f4 	udiv	r2, r1, r4
 800f086:	18d3      	adds	r3, r2, r3
 800f088:	fb04 1412 	mls	r4, r4, r2, r1
 800f08c:	441e      	add	r6, r3
 800f08e:	603c      	str	r4, [r7, #0]
 800f090:	4430      	add	r0, r6
 800f092:	e7ae      	b.n	800eff2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800f094 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800f094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f098:	b085      	sub	sp, #20
 800f09a:	f1b0 0900 	subs.w	r9, r0, #0
 800f09e:	461d      	mov	r5, r3
 800f0a0:	4617      	mov	r7, r2
 800f0a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f0a4:	bfbb      	ittet	lt
 800f0a6:	f1c9 0900 	rsblt	r9, r9, #0
 800f0aa:	f04f 36ff 	movlt.w	r6, #4294967295
 800f0ae:	2601      	movge	r6, #1
 800f0b0:	6823      	ldrlt	r3, [r4, #0]
 800f0b2:	bfbc      	itt	lt
 800f0b4:	425b      	neglt	r3, r3
 800f0b6:	6023      	strlt	r3, [r4, #0]
 800f0b8:	2a00      	cmp	r2, #0
 800f0ba:	da04      	bge.n	800f0c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	4257      	negs	r7, r2
 800f0c0:	4276      	negs	r6, r6
 800f0c2:	425b      	negs	r3, r3
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	2d00      	cmp	r5, #0
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	bfba      	itte	lt
 800f0cc:	426d      	neglt	r5, r5
 800f0ce:	f04f 38ff 	movlt.w	r8, #4294967295
 800f0d2:	f04f 0801 	movge.w	r8, #1
 800f0d6:	f7ff ff5d 	bl	800ef94 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f0da:	ab03      	add	r3, sp, #12
 800f0dc:	463a      	mov	r2, r7
 800f0de:	e9cd 5300 	strd	r5, r3, [sp]
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	4648      	mov	r0, r9
 800f0e6:	f7ff ff73 	bl	800efd0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	9a03      	ldr	r2, [sp, #12]
 800f0ee:	4546      	cmp	r6, r8
 800f0f0:	441a      	add	r2, r3
 800f0f2:	fb92 f3f5 	sdiv	r3, r2, r5
 800f0f6:	4418      	add	r0, r3
 800f0f8:	fb05 2313 	mls	r3, r5, r3, r2
 800f0fc:	bf18      	it	ne
 800f0fe:	4240      	negne	r0, r0
 800f100:	1c72      	adds	r2, r6, #1
 800f102:	6023      	str	r3, [r4, #0]
 800f104:	d105      	bne.n	800f112 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800f106:	2b00      	cmp	r3, #0
 800f108:	f1c3 0200 	rsb	r2, r3, #0
 800f10c:	db0b      	blt.n	800f126 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800f10e:	6022      	str	r2, [r4, #0]
 800f110:	e006      	b.n	800f120 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f112:	2e01      	cmp	r6, #1
 800f114:	d104      	bne.n	800f120 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f116:	2b00      	cmp	r3, #0
 800f118:	da02      	bge.n	800f120 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f11a:	442b      	add	r3, r5
 800f11c:	3801      	subs	r0, #1
 800f11e:	6023      	str	r3, [r4, #0]
 800f120:	b005      	add	sp, #20
 800f122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f126:	3801      	subs	r0, #1
 800f128:	1b52      	subs	r2, r2, r5
 800f12a:	e7f0      	b.n	800f10e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800f12c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800f12c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f130:	4c1c      	ldr	r4, [pc, #112]	@ (800f1a4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800f132:	4605      	mov	r5, r0
 800f134:	6807      	ldr	r7, [r0, #0]
 800f136:	69a3      	ldr	r3, [r4, #24]
 800f138:	b92b      	cbnz	r3, 800f146 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800f13a:	6840      	ldr	r0, [r0, #4]
 800f13c:	e9c5 7000 	strd	r7, r0, [r5]
 800f140:	b004      	add	sp, #16
 800f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f146:	f04f 0802 	mov.w	r8, #2
 800f14a:	68a2      	ldr	r2, [r4, #8]
 800f14c:	ae04      	add	r6, sp, #16
 800f14e:	6820      	ldr	r0, [r4, #0]
 800f150:	fb93 f1f8 	sdiv	r1, r3, r8
 800f154:	440a      	add	r2, r1
 800f156:	69e1      	ldr	r1, [r4, #28]
 800f158:	f846 2d04 	str.w	r2, [r6, #-4]!
 800f15c:	463a      	mov	r2, r7
 800f15e:	9600      	str	r6, [sp, #0]
 800f160:	f7ff ff98 	bl	800f094 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f164:	69a3      	ldr	r3, [r4, #24]
 800f166:	4607      	mov	r7, r0
 800f168:	686a      	ldr	r2, [r5, #4]
 800f16a:	6a21      	ldr	r1, [r4, #32]
 800f16c:	9600      	str	r6, [sp, #0]
 800f16e:	6860      	ldr	r0, [r4, #4]
 800f170:	f7ff ff90 	bl	800f094 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f174:	69a3      	ldr	r3, [r4, #24]
 800f176:	6962      	ldr	r2, [r4, #20]
 800f178:	4407      	add	r7, r0
 800f17a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f17c:	9600      	str	r6, [sp, #0]
 800f17e:	68e0      	ldr	r0, [r4, #12]
 800f180:	fb93 f8f8 	sdiv	r8, r3, r8
 800f184:	4442      	add	r2, r8
 800f186:	9203      	str	r2, [sp, #12]
 800f188:	682a      	ldr	r2, [r5, #0]
 800f18a:	f7ff ff83 	bl	800f094 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f18e:	4680      	mov	r8, r0
 800f190:	9600      	str	r6, [sp, #0]
 800f192:	69a3      	ldr	r3, [r4, #24]
 800f194:	686a      	ldr	r2, [r5, #4]
 800f196:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f198:	6920      	ldr	r0, [r4, #16]
 800f19a:	f7ff ff7b 	bl	800f094 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f19e:	4440      	add	r0, r8
 800f1a0:	e7cc      	b.n	800f13c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800f1a2:	bf00      	nop
 800f1a4:	24065a5c 	.word	0x24065a5c

0800f1a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800f1a8:	4b07      	ldr	r3, [pc, #28]	@ (800f1c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d109      	bne.n	800f1c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800f1b0:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f1b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f1b8:	8003      	strh	r3, [r0, #0]
 800f1ba:	4b04      	ldr	r3, [pc, #16]	@ (800f1cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	1a9b      	subs	r3, r3, r2
 800f1c2:	800b      	strh	r3, [r1, #0]
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	24065a48 	.word	0x24065a48
 800f1cc:	24065a44 	.word	0x24065a44

0800f1d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800f1d0:	4b07      	ldr	r3, [pc, #28]	@ (800f1f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800f1d2:	b510      	push	{r4, lr}
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d108      	bne.n	800f1ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800f1da:	4b06      	ldr	r3, [pc, #24]	@ (800f1f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800f1dc:	880c      	ldrh	r4, [r1, #0]
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	1b1b      	subs	r3, r3, r4
 800f1e8:	8003      	strh	r3, [r0, #0]
 800f1ea:	800a      	strh	r2, [r1, #0]
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	bf00      	nop
 800f1f0:	24065a48 	.word	0x24065a48
 800f1f4:	24065a44 	.word	0x24065a44

0800f1f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f224 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800f1fa:	b510      	push	{r4, lr}
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d10e      	bne.n	800f220 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800f202:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f206:	8843      	ldrh	r3, [r0, #2]
 800f208:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f20c:	18ca      	adds	r2, r1, r3
 800f20e:	4b06      	ldr	r3, [pc, #24]	@ (800f228 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800f210:	8044      	strh	r4, [r0, #2]
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	8003      	strh	r3, [r0, #0]
 800f218:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f21c:	8081      	strh	r1, [r0, #4]
 800f21e:	80c3      	strh	r3, [r0, #6]
 800f220:	bd10      	pop	{r4, pc}
 800f222:	bf00      	nop
 800f224:	24065a48 	.word	0x24065a48
 800f228:	24065a44 	.word	0x24065a44

0800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800f22c:	4b08      	ldr	r3, [pc, #32]	@ (800f250 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d10c      	bne.n	800f24e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800f234:	8803      	ldrh	r3, [r0, #0]
 800f236:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800f23a:	8842      	ldrh	r2, [r0, #2]
 800f23c:	8002      	strh	r2, [r0, #0]
 800f23e:	185a      	adds	r2, r3, r1
 800f240:	4b04      	ldr	r3, [pc, #16]	@ (800f254 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	1a9b      	subs	r3, r3, r2
 800f246:	8043      	strh	r3, [r0, #2]
 800f248:	88c3      	ldrh	r3, [r0, #6]
 800f24a:	80c1      	strh	r1, [r0, #6]
 800f24c:	8083      	strh	r3, [r0, #4]
 800f24e:	4770      	bx	lr
 800f250:	24065a48 	.word	0x24065a48
 800f254:	24065a44 	.word	0x24065a44

0800f258 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800f258:	4b07      	ldr	r3, [pc, #28]	@ (800f278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800f25a:	b510      	push	{r4, lr}
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d108      	bne.n	800f274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800f262:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f266:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f26a:	8003      	strh	r3, [r0, #0]
 800f26c:	8893      	ldrh	r3, [r2, #4]
 800f26e:	3b01      	subs	r3, #1
 800f270:	1b1b      	subs	r3, r3, r4
 800f272:	800b      	strh	r3, [r1, #0]
 800f274:	bd10      	pop	{r4, pc}
 800f276:	bf00      	nop
 800f278:	24065a48 	.word	0x24065a48

0800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800f27c:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800f27e:	460a      	mov	r2, r1
 800f280:	b510      	push	{r4, lr}
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d10d      	bne.n	800f2a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800f288:	8881      	ldrh	r1, [r0, #4]
 800f28a:	8803      	ldrh	r3, [r0, #0]
 800f28c:	440b      	add	r3, r1
 800f28e:	4601      	mov	r1, r0
 800f290:	3b01      	subs	r3, #1
 800f292:	f821 3b02 	strh.w	r3, [r1], #2
 800f296:	f7ff ffdf 	bl	800f258 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800f29a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f29e:	88c2      	ldrh	r2, [r0, #6]
 800f2a0:	80c3      	strh	r3, [r0, #6]
 800f2a2:	8082      	strh	r2, [r0, #4]
 800f2a4:	bd10      	pop	{r4, pc}
 800f2a6:	bf00      	nop
 800f2a8:	24065a48 	.word	0x24065a48

0800f2ac <_ZN8touchgfx11Application13requestRedrawEv>:
 800f2ac:	4b06      	ldr	r3, [pc, #24]	@ (800f2c8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f2b4:	4b05      	ldr	r3, [pc, #20]	@ (800f2cc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800f2b6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800f2ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2be:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800f2c2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800f2c6:	4770      	bx	lr
 800f2c8:	24065a44 	.word	0x24065a44
 800f2cc:	24065a46 	.word	0x24065a46

0800f2d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800f2d0:	4b03      	ldr	r3, [pc, #12]	@ (800f2e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800f2d2:	6818      	ldr	r0, [r3, #0]
 800f2d4:	b110      	cbz	r0, 800f2dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800f2d6:	6803      	ldr	r3, [r0, #0]
 800f2d8:	699b      	ldr	r3, [r3, #24]
 800f2da:	4718      	bx	r3
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	24065a8c 	.word	0x24065a8c

0800f2e4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800f2e4:	4770      	bx	lr
	...

0800f2e8 <_ZN8touchgfx11Application4drawEv>:
 800f2e8:	4b09      	ldr	r3, [pc, #36]	@ (800f310 <_ZN8touchgfx11Application4drawEv+0x28>)
 800f2ea:	b507      	push	{r0, r1, r2, lr}
 800f2ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	4b08      	ldr	r3, [pc, #32]	@ (800f314 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800f2f4:	9100      	str	r1, [sp, #0]
 800f2f6:	4669      	mov	r1, sp
 800f2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f300:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f304:	6803      	ldr	r3, [r0, #0]
 800f306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f308:	4798      	blx	r3
 800f30a:	b003      	add	sp, #12
 800f30c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f310:	24065a44 	.word	0x24065a44
 800f314:	24065a46 	.word	0x24065a46

0800f318 <_ZN8touchgfx11Application10invalidateEv>:
 800f318:	4b09      	ldr	r3, [pc, #36]	@ (800f340 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800f31a:	b082      	sub	sp, #8
 800f31c:	2100      	movs	r1, #0
 800f31e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f322:	4b08      	ldr	r3, [pc, #32]	@ (800f344 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800f324:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f328:	aa02      	add	r2, sp, #8
 800f32a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f32e:	9100      	str	r1, [sp, #0]
 800f330:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f334:	6803      	ldr	r3, [r0, #0]
 800f336:	e912 0006 	ldmdb	r2, {r1, r2}
 800f33a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f33c:	b002      	add	sp, #8
 800f33e:	4718      	bx	r3
 800f340:	24065a44 	.word	0x24065a44
 800f344:	24065a46 	.word	0x24065a46

0800f348 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800f348:	4b03      	ldr	r3, [pc, #12]	@ (800f358 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	b110      	cbz	r0, 800f354 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800f34e:	6803      	ldr	r3, [r0, #0]
 800f350:	69db      	ldr	r3, [r3, #28]
 800f352:	4718      	bx	r3
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	24065a8c 	.word	0x24065a8c

0800f35c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800f35c:	4b03      	ldr	r3, [pc, #12]	@ (800f36c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800f35e:	6818      	ldr	r0, [r3, #0]
 800f360:	b110      	cbz	r0, 800f368 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800f362:	6803      	ldr	r3, [r0, #0]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	4718      	bx	r3
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	24065a8c 	.word	0x24065a8c

0800f370 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800f370:	2300      	movs	r3, #0
 800f372:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800f376:	4770      	bx	lr

0800f378 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800f378:	4b03      	ldr	r3, [pc, #12]	@ (800f388 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	b110      	cbz	r0, 800f384 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800f37e:	6803      	ldr	r3, [r0, #0]
 800f380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f382:	4718      	bx	r3
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	24065a8c 	.word	0x24065a8c

0800f38c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800f38c:	b510      	push	{r4, lr}
 800f38e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f392:	888a      	ldrh	r2, [r1, #4]
 800f394:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f398:	4422      	add	r2, r4
 800f39a:	b212      	sxth	r2, r2
 800f39c:	4293      	cmp	r3, r2
 800f39e:	da15      	bge.n	800f3cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f3a0:	8882      	ldrh	r2, [r0, #4]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	b21b      	sxth	r3, r3
 800f3a6:	429c      	cmp	r4, r3
 800f3a8:	da10      	bge.n	800f3cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f3aa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f3ae:	88c9      	ldrh	r1, [r1, #6]
 800f3b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f3b4:	4419      	add	r1, r3
 800f3b6:	b209      	sxth	r1, r1
 800f3b8:	428a      	cmp	r2, r1
 800f3ba:	da07      	bge.n	800f3cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f3bc:	88c0      	ldrh	r0, [r0, #6]
 800f3be:	4410      	add	r0, r2
 800f3c0:	b200      	sxth	r0, r0
 800f3c2:	4283      	cmp	r3, r0
 800f3c4:	bfac      	ite	ge
 800f3c6:	2000      	movge	r0, #0
 800f3c8:	2001      	movlt	r0, #1
 800f3ca:	bd10      	pop	{r4, pc}
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	e7fc      	b.n	800f3ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800f3d0 <_ZN8touchgfx4Rect10restrictToEss>:
 800f3d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	b510      	push	{r4, lr}
 800f3d8:	da04      	bge.n	800f3e4 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800f3da:	8884      	ldrh	r4, [r0, #4]
 800f3dc:	4423      	add	r3, r4
 800f3de:	8083      	strh	r3, [r0, #4]
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	8003      	strh	r3, [r0, #0]
 800f3e4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f3e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f3ec:	1b09      	subs	r1, r1, r4
 800f3ee:	428b      	cmp	r3, r1
 800f3f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f3f4:	bfc8      	it	gt
 800f3f6:	8081      	strhgt	r1, [r0, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da04      	bge.n	800f406 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800f3fc:	88c1      	ldrh	r1, [r0, #6]
 800f3fe:	440b      	add	r3, r1
 800f400:	80c3      	strh	r3, [r0, #6]
 800f402:	2300      	movs	r3, #0
 800f404:	8043      	strh	r3, [r0, #2]
 800f406:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800f40a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f40e:	1a52      	subs	r2, r2, r1
 800f410:	4293      	cmp	r3, r2
 800f412:	bfc8      	it	gt
 800f414:	80c2      	strhgt	r2, [r0, #6]
 800f416:	bd10      	pop	{r4, pc}

0800f418 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800f418:	4b10      	ldr	r3, [pc, #64]	@ (800f45c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800f41a:	b510      	push	{r4, lr}
 800f41c:	460c      	mov	r4, r1
 800f41e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f422:	4b0f      	ldr	r3, [pc, #60]	@ (800f460 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800f424:	4620      	mov	r0, r4
 800f426:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f42a:	f7ff ffd1 	bl	800f3d0 <_ZN8touchgfx4Rect10restrictToEss>
 800f42e:	4b0d      	ldr	r3, [pc, #52]	@ (800f464 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800f430:	6818      	ldr	r0, [r3, #0]
 800f432:	b190      	cbz	r0, 800f45a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800f434:	6803      	ldr	r3, [r0, #0]
 800f436:	4621      	mov	r1, r4
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	4798      	blx	r3
 800f43c:	4b0a      	ldr	r3, [pc, #40]	@ (800f468 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800f43e:	6818      	ldr	r0, [r3, #0]
 800f440:	b118      	cbz	r0, 800f44a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800f442:	6803      	ldr	r3, [r0, #0]
 800f444:	4621      	mov	r1, r4
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	4798      	blx	r3
 800f44a:	4b08      	ldr	r3, [pc, #32]	@ (800f46c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800f44c:	4621      	mov	r1, r4
 800f44e:	6818      	ldr	r0, [r3, #0]
 800f450:	6803      	ldr	r3, [r0, #0]
 800f452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f456:	69db      	ldr	r3, [r3, #28]
 800f458:	4718      	bx	r3
 800f45a:	bd10      	pop	{r4, pc}
 800f45c:	24065a46 	.word	0x24065a46
 800f460:	24065a44 	.word	0x24065a44
 800f464:	24065a8c 	.word	0x24065a8c
 800f468:	24065a88 	.word	0x24065a88
 800f46c:	24065a50 	.word	0x24065a50

0800f470 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	4606      	mov	r6, r0
 800f474:	4608      	mov	r0, r1
 800f476:	460f      	mov	r7, r1
 800f478:	f7fd ff5b 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f47c:	b9e8      	cbnz	r0, 800f4ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f47e:	f9b7 5000 	ldrsh.w	r5, [r7]
 800f482:	f9b6 4000 	ldrsh.w	r4, [r6]
 800f486:	42a5      	cmp	r5, r4
 800f488:	db17      	blt.n	800f4ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f48a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f48e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800f492:	429a      	cmp	r2, r3
 800f494:	db11      	blt.n	800f4ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f496:	88b9      	ldrh	r1, [r7, #4]
 800f498:	440d      	add	r5, r1
 800f49a:	88b1      	ldrh	r1, [r6, #4]
 800f49c:	440c      	add	r4, r1
 800f49e:	b22d      	sxth	r5, r5
 800f4a0:	b224      	sxth	r4, r4
 800f4a2:	42a5      	cmp	r5, r4
 800f4a4:	dc09      	bgt.n	800f4ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f4a6:	88f8      	ldrh	r0, [r7, #6]
 800f4a8:	4410      	add	r0, r2
 800f4aa:	88f2      	ldrh	r2, [r6, #6]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	b200      	sxth	r0, r0
 800f4b0:	b21b      	sxth	r3, r3
 800f4b2:	4298      	cmp	r0, r3
 800f4b4:	bfcc      	ite	gt
 800f4b6:	2000      	movgt	r0, #0
 800f4b8:	2001      	movle	r0, #1
 800f4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4be:	4604      	mov	r4, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	460d      	mov	r5, r1
 800f4c4:	f7fd ff35 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f4c8:	b978      	cbnz	r0, 800f4ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f7fd ff31 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f4d0:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f4d4:	b150      	cbz	r0, 800f4ec <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f4d6:	8026      	strh	r6, [r4, #0]
 800f4d8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f4dc:	8063      	strh	r3, [r4, #2]
 800f4de:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f4e2:	80a3      	strh	r3, [r4, #4]
 800f4e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f4e8:	80e3      	strh	r3, [r4, #6]
 800f4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ec:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f4f0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f4f4:	42b1      	cmp	r1, r6
 800f4f6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f4fa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f4fe:	460f      	mov	r7, r1
 800f500:	88ed      	ldrh	r5, [r5, #6]
 800f502:	bfa8      	it	ge
 800f504:	4637      	movge	r7, r6
 800f506:	4293      	cmp	r3, r2
 800f508:	4618      	mov	r0, r3
 800f50a:	4466      	add	r6, ip
 800f50c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f510:	bfa8      	it	ge
 800f512:	4610      	movge	r0, r2
 800f514:	442a      	add	r2, r5
 800f516:	88e5      	ldrh	r5, [r4, #6]
 800f518:	4461      	add	r1, ip
 800f51a:	b236      	sxth	r6, r6
 800f51c:	8027      	strh	r7, [r4, #0]
 800f51e:	442b      	add	r3, r5
 800f520:	b209      	sxth	r1, r1
 800f522:	b212      	sxth	r2, r2
 800f524:	8060      	strh	r0, [r4, #2]
 800f526:	b21b      	sxth	r3, r3
 800f528:	428e      	cmp	r6, r1
 800f52a:	bfac      	ite	ge
 800f52c:	ebc7 0106 	rsbge	r1, r7, r6
 800f530:	ebc7 0101 	rsblt	r1, r7, r1
 800f534:	429a      	cmp	r2, r3
 800f536:	bfac      	ite	ge
 800f538:	ebc0 0202 	rsbge	r2, r0, r2
 800f53c:	ebc0 0203 	rsblt	r2, r0, r3
 800f540:	80a1      	strh	r1, [r4, #4]
 800f542:	80e2      	strh	r2, [r4, #6]
 800f544:	e7d1      	b.n	800f4ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800f548 <_ZN8touchgfx11Application11getInstanceEv>:
 800f548:	4b01      	ldr	r3, [pc, #4]	@ (800f550 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800f54a:	6818      	ldr	r0, [r3, #0]
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	24065a9c 	.word	0x24065a9c

0800f554 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800f554:	2300      	movs	r3, #0
 800f556:	b510      	push	{r4, lr}
 800f558:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800f55c:	4604      	mov	r4, r0
 800f55e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800f562:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800f566:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f56a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800f56e:	429a      	cmp	r2, r3
 800f570:	d90e      	bls.n	800f590 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800f572:	18e2      	adds	r2, r4, r3
 800f574:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800f578:	b122      	cbz	r2, 800f584 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800f57a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f57e:	6803      	ldr	r3, [r0, #0]
 800f580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f582:	4798      	blx	r3
 800f584:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f588:	3301      	adds	r3, #1
 800f58a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800f58e:	e7ea      	b.n	800f566 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800f590:	bd10      	pop	{r4, pc}

0800f592 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800f592:	2300      	movs	r3, #0
 800f594:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800f598:	30a4      	adds	r0, #164	@ 0xa4
 800f59a:	f820 3c24 	strh.w	r3, [r0, #-36]
 800f59e:	f802 3b01 	strb.w	r3, [r2], #1
 800f5a2:	4282      	cmp	r2, r0
 800f5a4:	d1fb      	bne.n	800f59e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800f5a6:	4770      	bx	lr

0800f5a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	4c0b      	ldr	r4, [pc, #44]	@ (800f5d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	460e      	mov	r6, r1
 800f5b0:	6820      	ldr	r0, [r4, #0]
 800f5b2:	b110      	cbz	r0, 800f5ba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800f5b4:	6803      	ldr	r3, [r0, #0]
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	4798      	blx	r3
 800f5ba:	1d28      	adds	r0, r5, #4
 800f5bc:	f7ff ffe9 	bl	800f592 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800f5c0:	6026      	str	r6, [r4, #0]
 800f5c2:	6833      	ldr	r3, [r6, #0]
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	4798      	blx	r3
 800f5ca:	682b      	ldr	r3, [r5, #0]
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5d4:	4718      	bx	r3
 800f5d6:	bf00      	nop
 800f5d8:	24065a8c 	.word	0x24065a8c

0800f5dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800f5e2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5ea:	461c      	mov	r4, r3
 800f5ec:	461d      	mov	r5, r3
 800f5ee:	459c      	cmp	ip, r3
 800f5f0:	dd1a      	ble.n	800f628 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800f5f2:	18c6      	adds	r6, r0, r3
 800f5f4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800f5f8:	b16e      	cbz	r6, 800f616 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d008      	beq.n	800f610 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800f5fe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800f602:	fa1f fe82 	uxth.w	lr, r2
 800f606:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800f60a:	1887      	adds	r7, r0, r2
 800f60c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800f610:	3201      	adds	r2, #1
 800f612:	3301      	adds	r3, #1
 800f614:	e7eb      	b.n	800f5ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800f616:	4299      	cmp	r1, r3
 800f618:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800f61c:	bfa8      	it	ge
 800f61e:	3501      	addge	r5, #1
 800f620:	429e      	cmp	r6, r3
 800f622:	bfc8      	it	gt
 800f624:	3401      	addgt	r4, #1
 800f626:	e7f4      	b.n	800f612 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800f628:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800f62c:	1b49      	subs	r1, r1, r5
 800f62e:	1b1b      	subs	r3, r3, r4
 800f630:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800f634:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800f638:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800f63c:	4293      	cmp	r3, r2
 800f63e:	dd03      	ble.n	800f648 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800f640:	3b01      	subs	r3, #1
 800f642:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800f646:	e7f7      	b.n	800f638 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800f648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f64c <_ZN8touchgfx11Application15handleTickEventEv>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	4d16      	ldr	r5, [pc, #88]	@ (800f6a8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800f650:	4604      	mov	r4, r0
 800f652:	6828      	ldr	r0, [r5, #0]
 800f654:	b140      	cbz	r0, 800f668 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f656:	7a03      	ldrb	r3, [r0, #8]
 800f658:	b933      	cbnz	r3, 800f668 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f65a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800f65e:	6803      	ldr	r3, [r0, #0]
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f666:	4718      	bx	r3
 800f668:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800f66c:	4e0f      	ldr	r6, [pc, #60]	@ (800f6ac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800f66e:	b973      	cbnz	r3, 800f68e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f670:	b168      	cbz	r0, 800f68e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f672:	7a03      	ldrb	r3, [r0, #8]
 800f674:	b15b      	cbz	r3, 800f68e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f676:	6830      	ldr	r0, [r6, #0]
 800f678:	b110      	cbz	r0, 800f680 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800f67a:	6803      	ldr	r3, [r0, #0]
 800f67c:	691b      	ldr	r3, [r3, #16]
 800f67e:	4798      	blx	r3
 800f680:	6828      	ldr	r0, [r5, #0]
 800f682:	6803      	ldr	r3, [r0, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	4798      	blx	r3
 800f688:	2301      	movs	r3, #1
 800f68a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800f68e:	3404      	adds	r4, #4
 800f690:	4620      	mov	r0, r4
 800f692:	f7ff ff5f 	bl	800f554 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800f696:	4620      	mov	r0, r4
 800f698:	f7ff ffa0 	bl	800f5dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800f69c:	6830      	ldr	r0, [r6, #0]
 800f69e:	b110      	cbz	r0, 800f6a6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800f6a0:	6803      	ldr	r3, [r0, #0]
 800f6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6a4:	e7dd      	b.n	800f662 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}
 800f6a8:	24065a90 	.word	0x24065a90
 800f6ac:	24065a8c 	.word	0x24065a8c

0800f6b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	801a      	strh	r2, [r3, #0]
 800f6ba:	3308      	adds	r3, #8
 800f6bc:	f823 2c06 	strh.w	r2, [r3, #-6]
 800f6c0:	f823 2c04 	strh.w	r2, [r3, #-4]
 800f6c4:	f823 2c02 	strh.w	r2, [r3, #-2]
 800f6c8:	428b      	cmp	r3, r1
 800f6ca:	d1f5      	bne.n	800f6b8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800f6cc:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800f6d0:	4770      	bx	lr
	...

0800f6d4 <_ZN8touchgfx11ApplicationC1Ev>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800f74c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800f6d8:	4606      	mov	r6, r0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	2500      	movs	r5, #0
 800f6de:	f846 3b04 	str.w	r3, [r6], #4
 800f6e2:	22a8      	movs	r2, #168	@ 0xa8
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	f00c ff9e 	bl	801c628 <memset>
 800f6ec:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800f6f0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800f6f4:	4f16      	ldr	r7, [pc, #88]	@ (800f750 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800f6f6:	f7ff ffdb 	bl	800f6b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f6fa:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800f6fe:	f7ff ffd7 	bl	800f6b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f702:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800f706:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800f70a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800f70e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800f712:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800f716:	490f      	ldr	r1, [pc, #60]	@ (800f754 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800f718:	480f      	ldr	r0, [pc, #60]	@ (800f758 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800f71a:	f00c fb91 	bl	801be40 <CRC_Lock>
 800f71e:	4b0f      	ldr	r3, [pc, #60]	@ (800f75c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800f720:	b158      	cbz	r0, 800f73a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800f722:	801d      	strh	r5, [r3, #0]
 800f724:	2300      	movs	r3, #0
 800f726:	4a0e      	ldr	r2, [pc, #56]	@ (800f760 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800f728:	4630      	mov	r0, r6
 800f72a:	6013      	str	r3, [r2, #0]
 800f72c:	4a0d      	ldr	r2, [pc, #52]	@ (800f764 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800f72e:	603b      	str	r3, [r7, #0]
 800f730:	6013      	str	r3, [r2, #0]
 800f732:	f7ff ff2e 	bl	800f592 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800f736:	4620      	mov	r0, r4
 800f738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f73a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f73e:	2002      	movs	r0, #2
 800f740:	801a      	strh	r2, [r3, #0]
 800f742:	6038      	str	r0, [r7, #0]
 800f744:	f001 fa50 	bl	8010be8 <_ZN8touchgfx6Screen4drawEv>
 800f748:	e7ec      	b.n	800f724 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800f74a:	bf00      	nop
 800f74c:	0801e8f0 	.word	0x0801e8f0
 800f750:	24065a8c 	.word	0x24065a8c
 800f754:	b5e8b5cd 	.word	0xb5e8b5cd
 800f758:	f407a5c2 	.word	0xf407a5c2
 800f75c:	2400001c 	.word	0x2400001c
 800f760:	24065a9c 	.word	0x24065a9c
 800f764:	24065a90 	.word	0x24065a90

0800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800f768:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800f76c:	3b01      	subs	r3, #1
 800f76e:	b29b      	uxth	r3, r3
 800f770:	428b      	cmp	r3, r1
 800f772:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800f776:	b510      	push	{r4, lr}
 800f778:	d908      	bls.n	800f78c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800f77a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f77e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	6062      	str	r2, [r4, #4]
 800f78c:	bd10      	pop	{r4, pc}
	...

0800f790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	b08f      	sub	sp, #60	@ 0x3c
 800f796:	4b8f      	ldr	r3, [pc, #572]	@ (800f9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800f798:	4683      	mov	fp, r0
 800f79a:	ac0a      	add	r4, sp, #40	@ 0x28
 800f79c:	e884 0006 	stmia.w	r4, {r1, r2}
 800f7a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	4b8c      	ldr	r3, [pc, #560]	@ (800f9d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800f7a8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f7ac:	f7ff fe10 	bl	800f3d0 <_ZN8touchgfx4Rect10restrictToEss>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f7fd fdbe 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d16a      	bne.n	800f890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f7ba:	9403      	str	r4, [sp, #12]
 800f7bc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800f7c0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800f7c4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800f7c8:	9301      	str	r3, [sp, #4]
 800f7ca:	35a4      	adds	r5, #164	@ 0xa4
 800f7cc:	b15c      	cbz	r4, 800f7e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	9803      	ldr	r0, [sp, #12]
 800f7d2:	f7ff fe4d 	bl	800f470 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f7d6:	3c01      	subs	r4, #1
 800f7d8:	b118      	cbz	r0, 800f7e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800f7da:	b2a1      	uxth	r1, r4
 800f7dc:	9801      	ldr	r0, [sp, #4]
 800f7de:	f7ff ffc3 	bl	800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f7e2:	3d08      	subs	r5, #8
 800f7e4:	e7f2      	b.n	800f7cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800f7e6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800f7ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f7ee:	f8cd a010 	str.w	sl, [sp, #16]
 800f7f2:	9302      	str	r3, [sp, #8]
 800f7f4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f7f8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800f7fc:	9306      	str	r3, [sp, #24]
 800f7fe:	445c      	add	r4, fp
 800f800:	2500      	movs	r5, #0
 800f802:	4626      	mov	r6, r4
 800f804:	f8cd a014 	str.w	sl, [sp, #20]
 800f808:	462f      	mov	r7, r5
 800f80a:	9b05      	ldr	r3, [sp, #20]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d073      	beq.n	800f8f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800f810:	9903      	ldr	r1, [sp, #12]
 800f812:	4630      	mov	r0, r6
 800f814:	f7ff fdba 	bl	800f38c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f818:	b350      	cbz	r0, 800f870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800f81a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800f81e:	f9b6 c000 	ldrsh.w	ip, [r6]
 800f822:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800f826:	45e6      	cmp	lr, ip
 800f828:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800f82c:	db33      	blt.n	800f896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800f82e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800f832:	88b3      	ldrh	r3, [r6, #4]
 800f834:	4472      	add	r2, lr
 800f836:	4463      	add	r3, ip
 800f838:	b212      	sxth	r2, r2
 800f83a:	b21b      	sxth	r3, r3
 800f83c:	429a      	cmp	r2, r3
 800f83e:	dc2a      	bgt.n	800f896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800f840:	fa1f f289 	uxth.w	r2, r9
 800f844:	88f3      	ldrh	r3, [r6, #6]
 800f846:	45c8      	cmp	r8, r9
 800f848:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800f84c:	4413      	add	r3, r2
 800f84e:	fa1f fc88 	uxth.w	ip, r8
 800f852:	b29b      	uxth	r3, r3
 800f854:	fa0f fe83 	sxth.w	lr, r3
 800f858:	db0f      	blt.n	800f87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800f85a:	eba3 030c 	sub.w	r3, r3, ip
 800f85e:	1ac9      	subs	r1, r1, r3
 800f860:	b209      	sxth	r1, r1
 800f862:	2900      	cmp	r1, #0
 800f864:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800f868:	dd12      	ble.n	800f890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f86a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800f86e:	4605      	mov	r5, r0
 800f870:	9b05      	ldr	r3, [sp, #20]
 800f872:	3e08      	subs	r6, #8
 800f874:	3b01      	subs	r3, #1
 800f876:	9305      	str	r3, [sp, #20]
 800f878:	e7c7      	b.n	800f80a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800f87a:	4461      	add	r1, ip
 800f87c:	b209      	sxth	r1, r1
 800f87e:	4571      	cmp	r1, lr
 800f880:	dc38      	bgt.n	800f8f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f882:	eba2 020c 	sub.w	r2, r2, ip
 800f886:	b212      	sxth	r2, r2
 800f888:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800f88c:	2a00      	cmp	r2, #0
 800f88e:	dcee      	bgt.n	800f86e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800f890:	b00f      	add	sp, #60	@ 0x3c
 800f892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f896:	45c8      	cmp	r8, r9
 800f898:	db2c      	blt.n	800f8f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f89a:	88f3      	ldrh	r3, [r6, #6]
 800f89c:	4499      	add	r9, r3
 800f89e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800f8a2:	4498      	add	r8, r3
 800f8a4:	fa0f f989 	sxth.w	r9, r9
 800f8a8:	fa0f f888 	sxth.w	r8, r8
 800f8ac:	45c1      	cmp	r9, r8
 800f8ae:	db21      	blt.n	800f8f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f8b0:	fa1f f28c 	uxth.w	r2, ip
 800f8b4:	88b3      	ldrh	r3, [r6, #4]
 800f8b6:	45e6      	cmp	lr, ip
 800f8b8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800f8bc:	4413      	add	r3, r2
 800f8be:	fa1f f88e 	uxth.w	r8, lr
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	fa0f f983 	sxth.w	r9, r3
 800f8c8:	db0a      	blt.n	800f8e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800f8ca:	eba3 0308 	sub.w	r3, r3, r8
 800f8ce:	1ac9      	subs	r1, r1, r3
 800f8d0:	b209      	sxth	r1, r1
 800f8d2:	2900      	cmp	r1, #0
 800f8d4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800f8d8:	ddda      	ble.n	800f890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f8da:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800f8de:	e7c6      	b.n	800f86e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800f8e0:	4441      	add	r1, r8
 800f8e2:	b209      	sxth	r1, r1
 800f8e4:	4549      	cmp	r1, r9
 800f8e6:	dc05      	bgt.n	800f8f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f8e8:	eba2 0208 	sub.w	r2, r2, r8
 800f8ec:	b212      	sxth	r2, r2
 800f8ee:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800f8f2:	e7cb      	b.n	800f88c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800f8f4:	4607      	mov	r7, r0
 800f8f6:	e7bb      	b.n	800f870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800f8f8:	2d00      	cmp	r5, #0
 800f8fa:	d181      	bne.n	800f800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800f8fc:	2f00      	cmp	r7, #0
 800f8fe:	f000 81dd 	beq.w	800fcbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800f902:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800f906:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800f90a:	b2b3      	uxth	r3, r6
 800f90c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800f910:	9305      	str	r3, [sp, #20]
 800f912:	9a05      	ldr	r2, [sp, #20]
 800f914:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800f918:	4413      	add	r3, r2
 800f91a:	b2ba      	uxth	r2, r7
 800f91c:	4492      	add	sl, r2
 800f91e:	b29b      	uxth	r3, r3
 800f920:	fa1f fa8a 	uxth.w	sl, sl
 800f924:	fa0f f883 	sxth.w	r8, r3
 800f928:	fa0f f98a 	sxth.w	r9, sl
 800f92c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800f930:	9b04      	ldr	r3, [sp, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d052      	beq.n	800f9dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800f936:	9903      	ldr	r1, [sp, #12]
 800f938:	4620      	mov	r0, r4
 800f93a:	f7ff fd27 	bl	800f38c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f93e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f942:	b1c0      	cbz	r0, 800f976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f944:	f9b4 e000 	ldrsh.w	lr, [r4]
 800f948:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f94c:	4576      	cmp	r6, lr
 800f94e:	dc22      	bgt.n	800f996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f950:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f954:	44f4      	add	ip, lr
 800f956:	fa0f fc8c 	sxth.w	ip, ip
 800f95a:	45e0      	cmp	r8, ip
 800f95c:	db1b      	blt.n	800f996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f95e:	428f      	cmp	r7, r1
 800f960:	fa1f fc81 	uxth.w	ip, r1
 800f964:	88e1      	ldrh	r1, [r4, #6]
 800f966:	dc0d      	bgt.n	800f984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800f968:	ebaa 0c0c 	sub.w	ip, sl, ip
 800f96c:	f8a4 9002 	strh.w	r9, [r4, #2]
 800f970:	eba1 010c 	sub.w	r1, r1, ip
 800f974:	80e1      	strh	r1, [r4, #6]
 800f976:	4628      	mov	r0, r5
 800f978:	9904      	ldr	r1, [sp, #16]
 800f97a:	3c08      	subs	r4, #8
 800f97c:	4605      	mov	r5, r0
 800f97e:	3901      	subs	r1, #1
 800f980:	9104      	str	r1, [sp, #16]
 800f982:	e7d3      	b.n	800f92c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800f984:	4461      	add	r1, ip
 800f986:	b209      	sxth	r1, r1
 800f988:	4549      	cmp	r1, r9
 800f98a:	dcf5      	bgt.n	800f978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800f98c:	eba2 0c0c 	sub.w	ip, r2, ip
 800f990:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f994:	e7ef      	b.n	800f976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f996:	428f      	cmp	r7, r1
 800f998:	dcee      	bgt.n	800f978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800f99a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800f99e:	4461      	add	r1, ip
 800f9a0:	b209      	sxth	r1, r1
 800f9a2:	4589      	cmp	r9, r1
 800f9a4:	dbe8      	blt.n	800f978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800f9a6:	4576      	cmp	r6, lr
 800f9a8:	fa1f fc8e 	uxth.w	ip, lr
 800f9ac:	88a1      	ldrh	r1, [r4, #4]
 800f9ae:	dc07      	bgt.n	800f9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800f9b0:	eba3 0c0c 	sub.w	ip, r3, ip
 800f9b4:	f8a4 8000 	strh.w	r8, [r4]
 800f9b8:	eba1 010c 	sub.w	r1, r1, ip
 800f9bc:	80a1      	strh	r1, [r4, #4]
 800f9be:	e7da      	b.n	800f976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f9c0:	4461      	add	r1, ip
 800f9c2:	b209      	sxth	r1, r1
 800f9c4:	4588      	cmp	r8, r1
 800f9c6:	dbd7      	blt.n	800f978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800f9c8:	9905      	ldr	r1, [sp, #20]
 800f9ca:	eba1 0c0c 	sub.w	ip, r1, ip
 800f9ce:	f8a4 c004 	strh.w	ip, [r4, #4]
 800f9d2:	e7d0      	b.n	800f976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f9d4:	24065a46 	.word	0x24065a46
 800f9d8:	24065a44 	.word	0x24065a44
 800f9dc:	2d00      	cmp	r5, #0
 800f9de:	f000 816d 	beq.w	800fcbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800f9e2:	9b06      	ldr	r3, [sp, #24]
 800f9e4:	445b      	add	r3, fp
 800f9e6:	461c      	mov	r4, r3
 800f9e8:	9b02      	ldr	r3, [sp, #8]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	f000 8166 	beq.w	800fcbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800f9f0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800f9f4:	9803      	ldr	r0, [sp, #12]
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	f7ff fd3a 	bl	800f470 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f9fc:	b120      	cbz	r0, 800fa08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800f9fe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800fa02:	9801      	ldr	r0, [sp, #4]
 800fa04:	f7ff feb0 	bl	800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fa08:	9903      	ldr	r1, [sp, #12]
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	f7ff fcbe 	bl	800f38c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	f000 809c 	beq.w	800fb4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800fa16:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800fa1a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800fa1e:	fa1f f189 	uxth.w	r1, r9
 800fa22:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800fa26:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa28:	eb01 0c03 	add.w	ip, r1, r3
 800fa2c:	b283      	uxth	r3, r0
 800fa2e:	4548      	cmp	r0, r9
 800fa30:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800fa34:	fa1f fa8c 	uxth.w	sl, ip
 800fa38:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800fa3c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800fa40:	eb03 050c 	add.w	r5, r3, ip
 800fa44:	b2ad      	uxth	r5, r5
 800fa46:	9505      	str	r5, [sp, #20]
 800fa48:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800fa4c:	9504      	str	r5, [sp, #16]
 800fa4e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800fa52:	f340 8099 	ble.w	800fb88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800fa56:	1a5b      	subs	r3, r3, r1
 800fa58:	4596      	cmp	lr, r2
 800fa5a:	fa0f f08a 	sxth.w	r0, sl
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	b21e      	sxth	r6, r3
 800fa62:	dd2e      	ble.n	800fac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800fa64:	9f02      	ldr	r7, [sp, #8]
 800fa66:	fa1f fe8e 	uxth.w	lr, lr
 800fa6a:	b292      	uxth	r2, r2
 800fa6c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800fa70:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800fa74:	9f04      	ldr	r7, [sp, #16]
 800fa76:	ebae 0102 	sub.w	r1, lr, r2
 800fa7a:	44a6      	add	lr, r4
 800fa7c:	1a3f      	subs	r7, r7, r0
 800fa7e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800fa82:	b289      	uxth	r1, r1
 800fa84:	4402      	add	r2, r0
 800fa86:	fa0f fe8e 	sxth.w	lr, lr
 800fa8a:	b20d      	sxth	r5, r1
 800fa8c:	b212      	sxth	r2, r2
 800fa8e:	436f      	muls	r7, r5
 800fa90:	ebae 0202 	sub.w	r2, lr, r2
 800fa94:	4372      	muls	r2, r6
 800fa96:	4297      	cmp	r7, r2
 800fa98:	db09      	blt.n	800faae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800fa9a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800fa9e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800faa2:	449c      	add	ip, r3
 800faa4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800faa8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800faac:	e686      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800faae:	4421      	add	r1, r4
 800fab0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800fab4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800fab8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800fabc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fac0:	e67c      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fac2:	9f04      	ldr	r7, [sp, #16]
 800fac4:	42b8      	cmp	r0, r7
 800fac6:	da27      	bge.n	800fb18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800fac8:	9902      	ldr	r1, [sp, #8]
 800faca:	1a3f      	subs	r7, r7, r0
 800facc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800fad0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800fad4:	eb05 010e 	add.w	r1, r5, lr
 800fad8:	fa1f f881 	uxth.w	r8, r1
 800fadc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800fae0:	4411      	add	r1, r2
 800fae2:	fa0f f988 	sxth.w	r9, r8
 800fae6:	eba2 020e 	sub.w	r2, r2, lr
 800faea:	eba1 0108 	sub.w	r1, r1, r8
 800faee:	4372      	muls	r2, r6
 800faf0:	b289      	uxth	r1, r1
 800faf2:	fa0f f881 	sxth.w	r8, r1
 800faf6:	fb08 f707 	mul.w	r7, r8, r7
 800fafa:	42ba      	cmp	r2, r7
 800fafc:	dc06      	bgt.n	800fb0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800fafe:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800fb02:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800fb06:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800fb0a:	e7ca      	b.n	800faa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800fb0c:	4429      	add	r1, r5
 800fb0e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800fb12:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800fb16:	e651      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fb18:	9805      	ldr	r0, [sp, #20]
 800fb1a:	2d06      	cmp	r5, #6
 800fb1c:	ebaa 0000 	sub.w	r0, sl, r0
 800fb20:	b280      	uxth	r0, r0
 800fb22:	fa0f fe80 	sxth.w	lr, r0
 800fb26:	d817      	bhi.n	800fb58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800fb28:	9b04      	ldr	r3, [sp, #16]
 800fb2a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800fb2e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800fb32:	1c6b      	adds	r3, r5, #1
 800fb34:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800fb38:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	9801      	ldr	r0, [sp, #4]
 800fb40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fb44:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800fb48:	805a      	strh	r2, [r3, #2]
 800fb4a:	809e      	strh	r6, [r3, #4]
 800fb4c:	80d9      	strh	r1, [r3, #6]
 800fb4e:	9b02      	ldr	r3, [sp, #8]
 800fb50:	3c08      	subs	r4, #8
 800fb52:	3b01      	subs	r3, #1
 800fb54:	9302      	str	r3, [sp, #8]
 800fb56:	e747      	b.n	800f9e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800fb58:	9a02      	ldr	r2, [sp, #8]
 800fb5a:	45b6      	cmp	lr, r6
 800fb5c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800fb60:	db0d      	blt.n	800fb7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800fb62:	449c      	add	ip, r3
 800fb64:	445a      	add	r2, fp
 800fb66:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800fb6a:	fa1f fc8c 	uxth.w	ip, ip
 800fb6e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800fb72:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800fb76:	448c      	add	ip, r1
 800fb78:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800fb7c:	e61e      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fb7e:	445a      	add	r2, fp
 800fb80:	4484      	add	ip, r0
 800fb82:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800fb86:	e78f      	b.n	800faa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800fb88:	fa1f f18e 	uxth.w	r1, lr
 800fb8c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800fb90:	b293      	uxth	r3, r2
 800fb92:	4596      	cmp	lr, r2
 800fb94:	eb01 0806 	add.w	r8, r1, r6
 800fb98:	9306      	str	r3, [sp, #24]
 800fb9a:	fa1f f888 	uxth.w	r8, r8
 800fb9e:	9f06      	ldr	r7, [sp, #24]
 800fba0:	fa0f f388 	sxth.w	r3, r8
 800fba4:	9307      	str	r3, [sp, #28]
 800fba6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800fbaa:	443b      	add	r3, r7
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	9308      	str	r3, [sp, #32]
 800fbb0:	da24      	bge.n	800fbfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800fbb2:	9905      	ldr	r1, [sp, #20]
 800fbb4:	eba3 0308 	sub.w	r3, r3, r8
 800fbb8:	eba2 020e 	sub.w	r2, r2, lr
 800fbbc:	eba9 0000 	sub.w	r0, r9, r0
 800fbc0:	ebaa 0401 	sub.w	r4, sl, r1
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	b2a4      	uxth	r4, r4
 800fbc8:	b219      	sxth	r1, r3
 800fbca:	b225      	sxth	r5, r4
 800fbcc:	4348      	muls	r0, r1
 800fbce:	436a      	muls	r2, r5
 800fbd0:	4282      	cmp	r2, r0
 800fbd2:	9a02      	ldr	r2, [sp, #8]
 800fbd4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800fbd8:	445a      	add	r2, fp
 800fbda:	dc06      	bgt.n	800fbea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800fbdc:	9b07      	ldr	r3, [sp, #28]
 800fbde:	44a4      	add	ip, r4
 800fbe0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800fbe4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800fbe8:	e75e      	b.n	800faa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800fbea:	9904      	ldr	r1, [sp, #16]
 800fbec:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800fbf0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800fbf4:	4433      	add	r3, r6
 800fbf6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800fbfa:	e5df      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fbfc:	9f06      	ldr	r7, [sp, #24]
 800fbfe:	9b04      	ldr	r3, [sp, #16]
 800fc00:	1bc9      	subs	r1, r1, r7
 800fc02:	fa0f f78a 	sxth.w	r7, sl
 800fc06:	b289      	uxth	r1, r1
 800fc08:	429f      	cmp	r7, r3
 800fc0a:	fa0f fe81 	sxth.w	lr, r1
 800fc0e:	dd23      	ble.n	800fc58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800fc10:	9a05      	ldr	r2, [sp, #20]
 800fc12:	eba9 0000 	sub.w	r0, r9, r0
 800fc16:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800fc1a:	ebaa 0202 	sub.w	r2, sl, r2
 800fc1e:	9d07      	ldr	r5, [sp, #28]
 800fc20:	fb0e f000 	mul.w	r0, lr, r0
 800fc24:	b292      	uxth	r2, r2
 800fc26:	eba5 0a03 	sub.w	sl, r5, r3
 800fc2a:	9b02      	ldr	r3, [sp, #8]
 800fc2c:	b214      	sxth	r4, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	fb04 fa0a 	mul.w	sl, r4, sl
 800fc34:	445b      	add	r3, fp
 800fc36:	4550      	cmp	r0, sl
 800fc38:	db03      	blt.n	800fc42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800fc3a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800fc3e:	4494      	add	ip, r2
 800fc40:	e732      	b.n	800faa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800fc42:	9a04      	ldr	r2, [sp, #16]
 800fc44:	4431      	add	r1, r6
 800fc46:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800fc4a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800fc4e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800fc52:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fc56:	e75c      	b.n	800fb12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800fc58:	9b08      	ldr	r3, [sp, #32]
 800fc5a:	2d06      	cmp	r5, #6
 800fc5c:	eba3 0308 	sub.w	r3, r3, r8
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	b218      	sxth	r0, r3
 800fc64:	d813      	bhi.n	800fc8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800fc66:	9b07      	ldr	r3, [sp, #28]
 800fc68:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800fc6c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800fc70:	1c6b      	adds	r3, r5, #1
 800fc72:	9901      	ldr	r1, [sp, #4]
 800fc74:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800fc78:	9b01      	ldr	r3, [sp, #4]
 800fc7a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800fc7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fc82:	805a      	strh	r2, [r3, #2]
 800fc84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc86:	f8a3 e006 	strh.w	lr, [r3, #6]
 800fc8a:	809a      	strh	r2, [r3, #4]
 800fc8c:	e75f      	b.n	800fb4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800fc8e:	9c02      	ldr	r4, [sp, #8]
 800fc90:	4570      	cmp	r0, lr
 800fc92:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800fc96:	db0d      	blt.n	800fcb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800fc98:	4431      	add	r1, r6
 800fc9a:	9b06      	ldr	r3, [sp, #24]
 800fc9c:	445c      	add	r4, fp
 800fc9e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800fca2:	b289      	uxth	r1, r1
 800fca4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800fca8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800fcac:	4419      	add	r1, r3
 800fcae:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800fcb2:	e583      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fcb4:	445c      	add	r4, fp
 800fcb6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800fcba:	e79b      	b.n	800fbf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800fcbc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800fcc0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800fcc4:	1e65      	subs	r5, r4, #1
 800fcc6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800fcca:	b2ad      	uxth	r5, r5
 800fccc:	42b5      	cmp	r5, r6
 800fcce:	d044      	beq.n	800fd5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800fcd0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800fcd4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800fcd8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800fcdc:	4282      	cmp	r2, r0
 800fcde:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800fce2:	d11f      	bne.n	800fd24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800fce4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800fce8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800fcec:	459c      	cmp	ip, r3
 800fcee:	d119      	bne.n	800fd24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800fcf0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800fcf4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800fcf8:	19d8      	adds	r0, r3, r7
 800fcfa:	b200      	sxth	r0, r0
 800fcfc:	4288      	cmp	r0, r1
 800fcfe:	d109      	bne.n	800fd14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800fd00:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800fd04:	4413      	add	r3, r2
 800fd06:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	9801      	ldr	r0, [sp, #4]
 800fd0e:	f7ff fd2b 	bl	800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fd12:	e003      	b.n	800fd1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800fd14:	4411      	add	r1, r2
 800fd16:	b209      	sxth	r1, r1
 800fd18:	42b9      	cmp	r1, r7
 800fd1a:	d0f3      	beq.n	800fd04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800fd1c:	3d01      	subs	r5, #1
 800fd1e:	3c08      	subs	r4, #8
 800fd20:	b2ad      	uxth	r5, r5
 800fd22:	e7d3      	b.n	800fccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800fd24:	42b9      	cmp	r1, r7
 800fd26:	d1f9      	bne.n	800fd1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800fd28:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800fd2c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800fd30:	4299      	cmp	r1, r3
 800fd32:	d1f3      	bne.n	800fd1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800fd34:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800fd38:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800fd3c:	181f      	adds	r7, r3, r0
 800fd3e:	b23f      	sxth	r7, r7
 800fd40:	42ba      	cmp	r2, r7
 800fd42:	d105      	bne.n	800fd50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800fd44:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800fd48:	440b      	add	r3, r1
 800fd4a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800fd4e:	e7dc      	b.n	800fd0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800fd50:	440a      	add	r2, r1
 800fd52:	b212      	sxth	r2, r2
 800fd54:	4290      	cmp	r0, r2
 800fd56:	d1e1      	bne.n	800fd1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800fd58:	e7f6      	b.n	800fd48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800fd5a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800fd5e:	2e07      	cmp	r6, #7
 800fd60:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800fd64:	d812      	bhi.n	800fd8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800fd66:	1c75      	adds	r5, r6, #1
 800fd68:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800fd6c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800fd70:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800fd74:	9d01      	ldr	r5, [sp, #4]
 800fd76:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800fd7a:	442c      	add	r4, r5
 800fd7c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800fd80:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800fd84:	8061      	strh	r1, [r4, #2]
 800fd86:	80a2      	strh	r2, [r4, #4]
 800fd88:	80e3      	strh	r3, [r4, #6]
 800fd8a:	e581      	b.n	800f890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800fd8c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800fd90:	3e01      	subs	r6, #1
 800fd92:	445c      	add	r4, fp
 800fd94:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800fd98:	f04f 37ff 	mov.w	r7, #4294967295
 800fd9c:	2500      	movs	r5, #0
 800fd9e:	9305      	str	r3, [sp, #20]
 800fda0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800fda4:	1e72      	subs	r2, r6, #1
 800fda6:	9302      	str	r3, [sp, #8]
 800fda8:	4691      	mov	r9, r2
 800fdaa:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800fdae:	9304      	str	r3, [sp, #16]
 800fdb0:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800fdb4:	f1b9 3fff 	cmp.w	r9, #4294967295
 800fdb8:	6818      	ldr	r0, [r3, #0]
 800fdba:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800fdbe:	9207      	str	r2, [sp, #28]
 800fdc0:	bf16      	itet	ne
 800fdc2:	9905      	ldrne	r1, [sp, #20]
 800fdc4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800fdc8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800fdcc:	9306      	str	r3, [sp, #24]
 800fdce:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800fdd2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800fdd6:	fb18 f801 	smulbb	r8, r8, r1
 800fdda:	6859      	ldr	r1, [r3, #4]
 800fddc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800fde0:	4671      	mov	r1, lr
 800fde2:	a80c      	add	r0, sp, #48	@ 0x30
 800fde4:	f7ff fb6a 	bl	800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fde8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800fdec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800fdf0:	f04f 0c08 	mov.w	ip, #8
 800fdf4:	9b04      	ldr	r3, [sp, #16]
 800fdf6:	9a02      	ldr	r2, [sp, #8]
 800fdf8:	fb10 f001 	smulbb	r0, r0, r1
 800fdfc:	fb02 8803 	mla	r8, r2, r3, r8
 800fe00:	eba0 0108 	sub.w	r1, r0, r8
 800fe04:	fb90 f0fc 	sdiv	r0, r0, ip
 800fe08:	4288      	cmp	r0, r1
 800fe0a:	dc20      	bgt.n	800fe4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 800fe0c:	4551      	cmp	r1, sl
 800fe0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fe12:	da03      	bge.n	800fe1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 800fe14:	b1d9      	cbz	r1, 800fe4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 800fe16:	468a      	mov	sl, r1
 800fe18:	464f      	mov	r7, r9
 800fe1a:	4635      	mov	r5, r6
 800fe1c:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe20:	f119 0f02 	cmn.w	r9, #2
 800fe24:	d1c6      	bne.n	800fdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800fe26:	4616      	mov	r6, r2
 800fe28:	3201      	adds	r2, #1
 800fe2a:	f1a4 0408 	sub.w	r4, r4, #8
 800fe2e:	d1b7      	bne.n	800fda0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800fe30:	9b01      	ldr	r3, [sp, #4]
 800fe32:	b2ac      	uxth	r4, r5
 800fe34:	00ed      	lsls	r5, r5, #3
 800fe36:	1958      	adds	r0, r3, r5
 800fe38:	1c7b      	adds	r3, r7, #1
 800fe3a:	d10b      	bne.n	800fe54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	9803      	ldr	r0, [sp, #12]
 800fe40:	f7ff fb3c 	bl	800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fe44:	4621      	mov	r1, r4
 800fe46:	9801      	ldr	r0, [sp, #4]
 800fe48:	f7ff fc8e 	bl	800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fe4c:	e4b6      	b.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fe4e:	464f      	mov	r7, r9
 800fe50:	4635      	mov	r5, r6
 800fe52:	e7ed      	b.n	800fe30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 800fe54:	9b01      	ldr	r3, [sp, #4]
 800fe56:	00ff      	lsls	r7, r7, #3
 800fe58:	445d      	add	r5, fp
 800fe5a:	19d9      	adds	r1, r3, r7
 800fe5c:	445f      	add	r7, fp
 800fe5e:	f7ff fb2d 	bl	800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fe62:	9b03      	ldr	r3, [sp, #12]
 800fe64:	cb03      	ldmia	r3!, {r0, r1}
 800fe66:	9b03      	ldr	r3, [sp, #12]
 800fe68:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800fe6c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800fe70:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800fe74:	6869      	ldr	r1, [r5, #4]
 800fe76:	c303      	stmia	r3!, {r0, r1}
 800fe78:	e7e4      	b.n	800fe44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 800fe7a:	bf00      	nop

0800fe7c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800fe84:	b09b      	sub	sp, #108	@ 0x6c
 800fe86:	4604      	mov	r4, r0
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f7fd fa52 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe8e:	4605      	mov	r5, r0
 800fe90:	b948      	cbnz	r0, 800fea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	4620      	mov	r0, r4
 800fe96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe98:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fe9c:	4798      	blx	r3
 800fe9e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800fea2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800fea6:	4bc5      	ldr	r3, [pc, #788]	@ (80101bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d03f      	beq.n	800ff2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800feae:	4dc4      	ldr	r5, [pc, #784]	@ (80101c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800feb0:	4628      	mov	r0, r5
 800feb2:	f7fd fa3e 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 800feb6:	4606      	mov	r6, r0
 800feb8:	2800      	cmp	r0, #0
 800feba:	d138      	bne.n	800ff2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800febc:	4628      	mov	r0, r5
 800febe:	f7ff f99b 	bl	800f1f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	6829      	ldr	r1, [r5, #0]
 800fec6:	4620      	mov	r0, r4
 800fec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feca:	686a      	ldr	r2, [r5, #4]
 800fecc:	4798      	blx	r3
 800fece:	802e      	strh	r6, [r5, #0]
 800fed0:	806e      	strh	r6, [r5, #2]
 800fed2:	80ae      	strh	r6, [r5, #4]
 800fed4:	80ee      	strh	r6, [r5, #6]
 800fed6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800feda:	4dba      	ldr	r5, [pc, #744]	@ (80101c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800fedc:	4640      	mov	r0, r8
 800fede:	f7ff fbe7 	bl	800f6b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fee2:	882e      	ldrh	r6, [r5, #0]
 800fee4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800fee8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800feec:	4633      	mov	r3, r6
 800feee:	42bb      	cmp	r3, r7
 800fef0:	d224      	bcs.n	800ff3c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800fef2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800fef6:	2907      	cmp	r1, #7
 800fef8:	d816      	bhi.n	800ff28 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800fefa:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800fefe:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800ff02:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800ff06:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800ff0a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800ff0e:	1c4a      	adds	r2, r1, #1
 800ff10:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800ff14:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800ff18:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800ff1c:	f8a2 a002 	strh.w	sl, [r2, #2]
 800ff20:	f8a2 e004 	strh.w	lr, [r2, #4]
 800ff24:	f8a2 c006 	strh.w	ip, [r2, #6]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	e7df      	b.n	800feee <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800ff2e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1cf      	bne.n	800fed6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800ff36:	b01b      	add	sp, #108	@ 0x6c
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800ff40:	42b3      	cmp	r3, r6
 800ff42:	d90c      	bls.n	800ff5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800ff44:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ff48:	6822      	ldr	r2, [r4, #0]
 800ff4a:	3601      	adds	r6, #1
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800ff50:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800ff54:	b2b6      	uxth	r6, r6
 800ff56:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800ff5a:	47b8      	blx	r7
 800ff5c:	e7ee      	b.n	800ff3c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800ff5e:	4a9a      	ldr	r2, [pc, #616]	@ (80101c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800ff60:	6813      	ldr	r3, [r2, #0]
 800ff62:	4691      	mov	r9, r2
 800ff64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	f040 80e0 	bne.w	801012e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 800ff6e:	8829      	ldrh	r1, [r5, #0]
 800ff70:	2600      	movs	r6, #0
 800ff72:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800ff76:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800ff7a:	33ae      	adds	r3, #174	@ 0xae
 800ff7c:	428f      	cmp	r7, r1
 800ff7e:	f103 0308 	add.w	r3, r3, #8
 800ff82:	dd0a      	ble.n	800ff9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800ff84:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800ff88:	3101      	adds	r1, #1
 800ff8a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800ff8e:	4402      	add	r2, r0
 800ff90:	b212      	sxth	r2, r2
 800ff92:	4296      	cmp	r6, r2
 800ff94:	bfb8      	it	lt
 800ff96:	4616      	movlt	r6, r2
 800ff98:	e7f0      	b.n	800ff7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800ff9a:	4b8c      	ldr	r3, [pc, #560]	@ (80101cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800ff9c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80101c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	2b0f      	cmp	r3, #15
 800ffa4:	bf8c      	ite	hi
 800ffa6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800ffaa:	f04f 0b01 	movls.w	fp, #1
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ffb4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800ffb8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800ffbc:	4b82      	ldr	r3, [pc, #520]	@ (80101c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800ffbe:	4438      	add	r0, r7
 800ffc0:	b207      	sxth	r7, r0
 800ffc2:	6818      	ldr	r0, [r3, #0]
 800ffc4:	42b7      	cmp	r7, r6
 800ffc6:	6803      	ldr	r3, [r0, #0]
 800ffc8:	f280 8083 	bge.w	80100d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800ffcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ffd0:	4798      	blx	r3
 800ffd2:	eb07 030b 	add.w	r3, r7, fp
 800ffd6:	4298      	cmp	r0, r3
 800ffd8:	da07      	bge.n	800ffea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800ffda:	42b0      	cmp	r0, r6
 800ffdc:	da05      	bge.n	800ffea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800ffde:	4287      	cmp	r7, r0
 800ffe0:	dd6c      	ble.n	80100bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800ffe2:	2f00      	cmp	r7, #0
 800ffe4:	dd6a      	ble.n	80100bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	e004      	b.n	800fff4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 800ffea:	4287      	cmp	r7, r0
 800ffec:	dcfb      	bgt.n	800ffe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 800ffee:	42b0      	cmp	r0, r6
 800fff0:	bfa8      	it	ge
 800fff2:	4630      	movge	r0, r6
 800fff4:	4b76      	ldr	r3, [pc, #472]	@ (80101d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800fff6:	1bc0      	subs	r0, r0, r7
 800fff8:	2200      	movs	r2, #0
 800fffa:	f8ad 7016 	strh.w	r7, [sp, #22]
 800fffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010002:	882f      	ldrh	r7, [r5, #0]
 8010004:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010008:	f8ad 3018 	strh.w	r3, [sp, #24]
 801000c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010010:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8010014:	42bb      	cmp	r3, r7
 8010016:	d9cd      	bls.n	800ffb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8010018:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801001c:	ab07      	add	r3, sp, #28
 801001e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8010022:	6851      	ldr	r1, [r2, #4]
 8010024:	c303      	stmia	r3!, {r0, r1}
 8010026:	a905      	add	r1, sp, #20
 8010028:	a807      	add	r0, sp, #28
 801002a:	f7ff f9af 	bl	800f38c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801002e:	2800      	cmp	r0, #0
 8010030:	d04c      	beq.n	80100cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8010032:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010036:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801003a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801003e:	4686      	mov	lr, r0
 8010040:	4290      	cmp	r0, r2
 8010042:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8010046:	4450      	add	r0, sl
 8010048:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801004c:	bfb8      	it	lt
 801004e:	4696      	movlt	lr, r2
 8010050:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010054:	4452      	add	r2, sl
 8010056:	b280      	uxth	r0, r0
 8010058:	4299      	cmp	r1, r3
 801005a:	468c      	mov	ip, r1
 801005c:	b292      	uxth	r2, r2
 801005e:	9302      	str	r3, [sp, #8]
 8010060:	bfb8      	it	lt
 8010062:	469c      	movlt	ip, r3
 8010064:	b203      	sxth	r3, r0
 8010066:	fa0f fa82 	sxth.w	sl, r2
 801006a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801006e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8010072:	4553      	cmp	r3, sl
 8010074:	bfb8      	it	lt
 8010076:	4602      	movlt	r2, r0
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	eba2 020e 	sub.w	r2, r2, lr
 801007e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010082:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8010086:	4411      	add	r1, r2
 8010088:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801008c:	4413      	add	r3, r2
 801008e:	b289      	uxth	r1, r1
 8010090:	b29b      	uxth	r3, r3
 8010092:	b208      	sxth	r0, r1
 8010094:	b21a      	sxth	r2, r3
 8010096:	4290      	cmp	r0, r2
 8010098:	bfb8      	it	lt
 801009a:	460b      	movlt	r3, r1
 801009c:	eba3 030c 	sub.w	r3, r3, ip
 80100a0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80100a4:	a807      	add	r0, sp, #28
 80100a6:	f7fd f944 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 80100aa:	b920      	cbnz	r0, 80100b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	a907      	add	r1, sp, #28
 80100b0:	4620      	mov	r0, r4
 80100b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100b4:	4798      	blx	r3
 80100b6:	3701      	adds	r7, #1
 80100b8:	b2bf      	uxth	r7, r7
 80100ba:	e7a9      	b.n	8010010 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80100bc:	f8d9 0000 	ldr.w	r0, [r9]
 80100c0:	2101      	movs	r1, #1
 80100c2:	6803      	ldr	r3, [r0, #0]
 80100c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80100c8:	4798      	blx	r3
 80100ca:	e773      	b.n	800ffb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80100cc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80100d0:	e7e8      	b.n	80100a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80100d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d4:	4798      	blx	r3
 80100d6:	4b3f      	ldr	r3, [pc, #252]	@ (80101d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f43f af2b 	beq.w	800ff36 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80100e0:	2300      	movs	r3, #0
 80100e2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80100e6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80100ea:	882b      	ldrh	r3, [r5, #0]
 80100ec:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80100f0:	42ab      	cmp	r3, r5
 80100f2:	f4bf af20 	bcs.w	800ff36 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80100f6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80100fa:	2907      	cmp	r1, #7
 80100fc:	d814      	bhi.n	8010128 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80100fe:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8010102:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8010106:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801010a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801010e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8010112:	1c4a      	adds	r2, r1, #1
 8010114:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8010118:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801011c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8010120:	f8a2 c002 	strh.w	ip, [r2, #2]
 8010124:	8097      	strh	r7, [r2, #4]
 8010126:	80d6      	strh	r6, [r2, #6]
 8010128:	3301      	adds	r3, #1
 801012a:	b29b      	uxth	r3, r3
 801012c:	e7e0      	b.n	80100f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801012e:	2b02      	cmp	r3, #2
 8010130:	f040 8133 	bne.w	801039a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8010134:	4b28      	ldr	r3, [pc, #160]	@ (80101d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8010136:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2b01      	cmp	r3, #1
 801013e:	f000 8098 	beq.w	8010272 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8010142:	882a      	ldrh	r2, [r5, #0]
 8010144:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8010148:	3201      	adds	r2, #1
 801014a:	b292      	uxth	r2, r2
 801014c:	2900      	cmp	r1, #0
 801014e:	d0c2      	beq.n	80100d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8010150:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8010154:	4694      	mov	ip, r2
 8010156:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801015a:	f04f 0900 	mov.w	r9, #0
 801015e:	441e      	add	r6, r3
 8010160:	b236      	sxth	r6, r6
 8010162:	fa1f f38c 	uxth.w	r3, ip
 8010166:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801016a:	4299      	cmp	r1, r3
 801016c:	f240 80be 	bls.w	80102ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8010170:	4427      	add	r7, r4
 8010172:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8010176:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801017a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801017e:	4283      	cmp	r3, r0
 8010180:	f340 80a0 	ble.w	80102c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8010184:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8010188:	46e1      	mov	r9, ip
 801018a:	4406      	add	r6, r0
 801018c:	b236      	sxth	r6, r6
 801018e:	429e      	cmp	r6, r3
 8010190:	bfa8      	it	ge
 8010192:	461e      	movge	r6, r3
 8010194:	f10c 0c01 	add.w	ip, ip, #1
 8010198:	e7e3      	b.n	8010162 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801019a:	d10a      	bne.n	80101b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801019c:	4562      	cmp	r2, ip
 801019e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80101a2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80101a6:	bfb8      	it	lt
 80101a8:	4662      	movlt	r2, ip
 80101aa:	4288      	cmp	r0, r1
 80101ac:	bfb8      	it	lt
 80101ae:	461f      	movlt	r7, r3
 80101b0:	e086      	b.n	80102c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80101b2:	428a      	cmp	r2, r1
 80101b4:	bfb8      	it	lt
 80101b6:	460a      	movlt	r2, r1
 80101b8:	e082      	b.n	80102c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80101ba:	bf00      	nop
 80101bc:	24065a88 	.word	0x24065a88
 80101c0:	24065a94 	.word	0x24065a94
 80101c4:	2400001c 	.word	0x2400001c
 80101c8:	24065a50 	.word	0x24065a50
 80101cc:	24065a46 	.word	0x24065a46
 80101d0:	24065a44 	.word	0x24065a44
 80101d4:	24065a4e 	.word	0x24065a4e
 80101d8:	24065a48 	.word	0x24065a48
 80101dc:	19a1      	adds	r1, r4, r6
 80101de:	ab07      	add	r3, sp, #28
 80101e0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80101e4:	6849      	ldr	r1, [r1, #4]
 80101e6:	c303      	stmia	r3!, {r0, r1}
 80101e8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80101ec:	a807      	add	r0, sp, #28
 80101ee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80101f2:	2b13      	cmp	r3, #19
 80101f4:	440b      	add	r3, r1
 80101f6:	bfd8      	it	le
 80101f8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80101fc:	1a9b      	subs	r3, r3, r2
 80101fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010202:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010206:	f7ff f811 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801020a:	a807      	add	r0, sp, #28
 801020c:	f7fd f891 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010210:	bb78      	cbnz	r0, 8010272 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8010212:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8010216:	4426      	add	r6, r4
 8010218:	f8d9 0000 	ldr.w	r0, [r9]
 801021c:	f1bc 0f14 	cmp.w	ip, #20
 8010220:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010224:	f8d0 e000 	ldr.w	lr, [r0]
 8010228:	bfa8      	it	ge
 801022a:	f04f 0c14 	movge.w	ip, #20
 801022e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010232:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010236:	fa1f fc8c 	uxth.w	ip, ip
 801023a:	f8cd c000 	str.w	ip, [sp]
 801023e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8010242:	47d8      	blx	fp
 8010244:	4683      	mov	fp, r0
 8010246:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801024a:	a807      	add	r0, sp, #28
 801024c:	f7fe ffd4 	bl	800f1f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010250:	6823      	ldr	r3, [r4, #0]
 8010252:	4620      	mov	r0, r4
 8010254:	a907      	add	r1, sp, #28
 8010256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010258:	4798      	blx	r3
 801025a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801025e:	eba0 000b 	sub.w	r0, r0, fp
 8010262:	b200      	sxth	r0, r0
 8010264:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8010268:	b918      	cbnz	r0, 8010272 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801026a:	b2b9      	uxth	r1, r7
 801026c:	4650      	mov	r0, sl
 801026e:	f7ff fa7b 	bl	800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010272:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8010276:	f1bb 0f00 	cmp.w	fp, #0
 801027a:	f43f af2c 	beq.w	80100d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801027e:	882b      	ldrh	r3, [r5, #0]
 8010280:	2700      	movs	r7, #0
 8010282:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8010286:	3301      	adds	r3, #1
 8010288:	b29b      	uxth	r3, r3
 801028a:	b299      	uxth	r1, r3
 801028c:	00fe      	lsls	r6, r7, #3
 801028e:	458b      	cmp	fp, r1
 8010290:	d9a4      	bls.n	80101dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8010292:	4426      	add	r6, r4
 8010294:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8010298:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801029c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80102a0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80102a4:	4408      	add	r0, r1
 80102a6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80102aa:	4461      	add	r1, ip
 80102ac:	b200      	sxth	r0, r0
 80102ae:	b209      	sxth	r1, r1
 80102b0:	4288      	cmp	r0, r1
 80102b2:	f6bf af72 	bge.w	801019a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80102b6:	4584      	cmp	ip, r0
 80102b8:	4662      	mov	r2, ip
 80102ba:	461f      	mov	r7, r3
 80102bc:	bfb8      	it	lt
 80102be:	4602      	movlt	r2, r0
 80102c0:	3301      	adds	r3, #1
 80102c2:	e7e2      	b.n	801028a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80102c4:	d10e      	bne.n	80102e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80102c6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80102ca:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80102ce:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80102d2:	4473      	add	r3, lr
 80102d4:	b21b      	sxth	r3, r3
 80102d6:	429e      	cmp	r6, r3
 80102d8:	bfa8      	it	ge
 80102da:	461e      	movge	r6, r3
 80102dc:	4287      	cmp	r7, r0
 80102de:	bfb8      	it	lt
 80102e0:	46e1      	movlt	r9, ip
 80102e2:	e757      	b.n	8010194 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80102e4:	4286      	cmp	r6, r0
 80102e6:	bfa8      	it	ge
 80102e8:	4606      	movge	r6, r0
 80102ea:	e753      	b.n	8010194 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80102ec:	eb0a 0007 	add.w	r0, sl, r7
 80102f0:	4427      	add	r7, r4
 80102f2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80102f6:	f1bb 0f13 	cmp.w	fp, #19
 80102fa:	bfdc      	itt	le
 80102fc:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8010300:	445e      	addle	r6, fp
 8010302:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010306:	bfd8      	it	le
 8010308:	b236      	sxthle	r6, r6
 801030a:	f7fd f812 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 801030e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010312:	2800      	cmp	r0, #0
 8010314:	f47f af1a 	bne.w	801014c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8010318:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801031c:	fa1f fb8b 	uxth.w	fp, fp
 8010320:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8010324:	1ab6      	subs	r6, r6, r2
 8010326:	4829      	ldr	r0, [pc, #164]	@ (80103cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8010328:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801032c:	2e14      	cmp	r6, #20
 801032e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8010332:	6800      	ldr	r0, [r0, #0]
 8010334:	bfa8      	it	ge
 8010336:	2614      	movge	r6, #20
 8010338:	f8ad 101c 	strh.w	r1, [sp, #28]
 801033c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8010340:	b289      	uxth	r1, r1
 8010342:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010346:	b2b6      	uxth	r6, r6
 8010348:	f8d0 c000 	ldr.w	ip, [r0]
 801034c:	b292      	uxth	r2, r2
 801034e:	455e      	cmp	r6, fp
 8010350:	bf94      	ite	ls
 8010352:	9600      	strls	r6, [sp, #0]
 8010354:	f8cd b000 	strhi.w	fp, [sp]
 8010358:	b29b      	uxth	r3, r3
 801035a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801035e:	47b0      	blx	r6
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8010366:	a907      	add	r1, sp, #28
 8010368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801036a:	4620      	mov	r0, r4
 801036c:	4798      	blx	r3
 801036e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8010372:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8010376:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801037a:	1a5b      	subs	r3, r3, r1
 801037c:	440a      	add	r2, r1
 801037e:	b21b      	sxth	r3, r3
 8010380:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8010384:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8010388:	2b00      	cmp	r3, #0
 801038a:	f47f aeda 	bne.w	8010142 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801038e:	fa1f f189 	uxth.w	r1, r9
 8010392:	4650      	mov	r0, sl
 8010394:	f7ff f9e8 	bl	800f768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010398:	e6d3      	b.n	8010142 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801039a:	882e      	ldrh	r6, [r5, #0]
 801039c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80103a0:	42b3      	cmp	r3, r6
 80103a2:	f67f ae98 	bls.w	80100d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80103a6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80103aa:	ab07      	add	r3, sp, #28
 80103ac:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80103b0:	6851      	ldr	r1, [r2, #4]
 80103b2:	c303      	stmia	r3!, {r0, r1}
 80103b4:	a807      	add	r0, sp, #28
 80103b6:	f7fc ffbc 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 80103ba:	b920      	cbnz	r0, 80103c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	a907      	add	r1, sp, #28
 80103c0:	4620      	mov	r0, r4
 80103c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103c4:	4798      	blx	r3
 80103c6:	3601      	adds	r6, #1
 80103c8:	b2b6      	uxth	r6, r6
 80103ca:	e7e7      	b.n	801039c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80103cc:	24065a50 	.word	0x24065a50

080103d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80103d0:	4b03      	ldr	r3, [pc, #12]	@ (80103e0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	801a      	strh	r2, [r3, #0]
 80103d6:	805a      	strh	r2, [r3, #2]
 80103d8:	809a      	strh	r2, [r3, #4]
 80103da:	80da      	strh	r2, [r3, #6]
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	24065a94 	.word	0x24065a94

080103e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	b09d      	sub	sp, #116	@ 0x74
 80103ea:	4606      	mov	r6, r0
 80103ec:	4614      	mov	r4, r2
 80103ee:	468a      	mov	sl, r1
 80103f0:	a803      	add	r0, sp, #12
 80103f2:	461d      	mov	r5, r3
 80103f4:	f000 fd72 	bl	8010edc <_ZN8touchgfx12TextProviderC1Ev>
 80103f8:	6833      	ldr	r3, [r6, #0]
 80103fa:	4630      	mov	r0, r6
 80103fc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8010400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010402:	4798      	blx	r3
 8010404:	6833      	ldr	r3, [r6, #0]
 8010406:	4607      	mov	r7, r0
 8010408:	4630      	mov	r0, r6
 801040a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801040c:	4798      	blx	r3
 801040e:	462a      	mov	r2, r5
 8010410:	2500      	movs	r5, #0
 8010412:	4621      	mov	r1, r4
 8010414:	9000      	str	r0, [sp, #0]
 8010416:	463b      	mov	r3, r7
 8010418:	462c      	mov	r4, r5
 801041a:	46a9      	mov	r9, r5
 801041c:	46a8      	mov	r8, r5
 801041e:	a803      	add	r0, sp, #12
 8010420:	f000 fdaf 	bl	8010f82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010424:	2300      	movs	r3, #0
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801042c:	429c      	cmp	r4, r3
 801042e:	d002      	beq.n	8010436 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8010430:	455c      	cmp	r4, fp
 8010432:	bf18      	it	ne
 8010434:	4625      	movne	r5, r4
 8010436:	ab02      	add	r3, sp, #8
 8010438:	4632      	mov	r2, r6
 801043a:	4651      	mov	r1, sl
 801043c:	a803      	add	r0, sp, #12
 801043e:	f001 f895 	bl	801156c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010442:	4604      	mov	r4, r0
 8010444:	b108      	cbz	r0, 801044a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8010446:	280a      	cmp	r0, #10
 8010448:	d10a      	bne.n	8010460 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801044a:	45c1      	cmp	r9, r8
 801044c:	bf38      	it	cc
 801044e:	46c1      	movcc	r9, r8
 8010450:	f04f 0800 	mov.w	r8, #0
 8010454:	2c00      	cmp	r4, #0
 8010456:	d1e5      	bne.n	8010424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8010458:	4648      	mov	r0, r9
 801045a:	b01d      	add	sp, #116	@ 0x74
 801045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010460:	9a02      	ldr	r2, [sp, #8]
 8010462:	2a00      	cmp	r2, #0
 8010464:	d0de      	beq.n	8010424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8010466:	7b57      	ldrb	r7, [r2, #13]
 8010468:	4629      	mov	r1, r5
 801046a:	6833      	ldr	r3, [r6, #0]
 801046c:	007f      	lsls	r7, r7, #1
 801046e:	8894      	ldrh	r4, [r2, #4]
 8010470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010472:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8010476:	7a97      	ldrb	r7, [r2, #10]
 8010478:	4307      	orrs	r7, r0
 801047a:	4630      	mov	r0, r6
 801047c:	4798      	blx	r3
 801047e:	4438      	add	r0, r7
 8010480:	4480      	add	r8, r0
 8010482:	fa1f f888 	uxth.w	r8, r8
 8010486:	e7e5      	b.n	8010454 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08010488 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8010488:	b508      	push	{r3, lr}
 801048a:	6803      	ldr	r3, [r0, #0]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	4798      	blx	r3
 8010490:	b128      	cbz	r0, 801049e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8010492:	7b43      	ldrb	r3, [r0, #13]
 8010494:	7a80      	ldrb	r0, [r0, #10]
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801049c:	4318      	orrs	r0, r3
 801049e:	bd08      	pop	{r3, pc}

080104a0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80104a0:	b40e      	push	{r1, r2, r3}
 80104a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104a4:	b09e      	sub	sp, #120	@ 0x78
 80104a6:	4605      	mov	r5, r0
 80104a8:	ab23      	add	r3, sp, #140	@ 0x8c
 80104aa:	a805      	add	r0, sp, #20
 80104ac:	f853 4b04 	ldr.w	r4, [r3], #4
 80104b0:	9303      	str	r3, [sp, #12]
 80104b2:	f000 fd13 	bl	8010edc <_ZN8touchgfx12TextProviderC1Ev>
 80104b6:	682b      	ldr	r3, [r5, #0]
 80104b8:	4628      	mov	r0, r5
 80104ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104bc:	4798      	blx	r3
 80104be:	682b      	ldr	r3, [r5, #0]
 80104c0:	4606      	mov	r6, r0
 80104c2:	4628      	mov	r0, r5
 80104c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104c6:	4798      	blx	r3
 80104c8:	4633      	mov	r3, r6
 80104ca:	4621      	mov	r1, r4
 80104cc:	ae1e      	add	r6, sp, #120	@ 0x78
 80104ce:	2400      	movs	r4, #0
 80104d0:	9000      	str	r0, [sp, #0]
 80104d2:	9a03      	ldr	r2, [sp, #12]
 80104d4:	a805      	add	r0, sp, #20
 80104d6:	f000 fd54 	bl	8010f82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80104da:	f846 4d68 	str.w	r4, [r6, #-104]!
 80104de:	462a      	mov	r2, r5
 80104e0:	4633      	mov	r3, r6
 80104e2:	4621      	mov	r1, r4
 80104e4:	a805      	add	r0, sp, #20
 80104e6:	f001 f841 	bl	801156c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80104ea:	b300      	cbz	r0, 801052e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80104ec:	280a      	cmp	r0, #10
 80104ee:	d01a      	beq.n	8010526 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80104f0:	9f04      	ldr	r7, [sp, #16]
 80104f2:	b1c7      	cbz	r7, 8010526 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80104f4:	7b78      	ldrb	r0, [r7, #13]
 80104f6:	7a3b      	ldrb	r3, [r7, #8]
 80104f8:	00c1      	lsls	r1, r0, #3
 80104fa:	88ea      	ldrh	r2, [r5, #6]
 80104fc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8010500:	4319      	orrs	r1, r3
 8010502:	0643      	lsls	r3, r0, #25
 8010504:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010508:	bf48      	it	mi
 801050a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801050e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8010512:	bf48      	it	mi
 8010514:	b219      	sxthmi	r1, r3
 8010516:	79fb      	ldrb	r3, [r7, #7]
 8010518:	4303      	orrs	r3, r0
 801051a:	4413      	add	r3, r2
 801051c:	1a5b      	subs	r3, r3, r1
 801051e:	b21b      	sxth	r3, r3
 8010520:	429c      	cmp	r4, r3
 8010522:	bfb8      	it	lt
 8010524:	461c      	movlt	r4, r3
 8010526:	4633      	mov	r3, r6
 8010528:	462a      	mov	r2, r5
 801052a:	2100      	movs	r1, #0
 801052c:	e7da      	b.n	80104e4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801052e:	b2a0      	uxth	r0, r4
 8010530:	b01e      	add	sp, #120	@ 0x78
 8010532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010536:	b003      	add	sp, #12
 8010538:	4770      	bx	lr

0801053a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801053a:	7a43      	ldrb	r3, [r0, #9]
 801053c:	8880      	ldrh	r0, [r0, #4]
 801053e:	4418      	add	r0, r3
 8010540:	b280      	uxth	r0, r0
 8010542:	4770      	bx	lr

08010544 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8010544:	6803      	ldr	r3, [r0, #0]
 8010546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010548:	4718      	bx	r3

0801054a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801054a:	b40e      	push	{r1, r2, r3}
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	b09d      	sub	sp, #116	@ 0x74
 8010550:	4604      	mov	r4, r0
 8010552:	ab21      	add	r3, sp, #132	@ 0x84
 8010554:	a803      	add	r0, sp, #12
 8010556:	f853 5b04 	ldr.w	r5, [r3], #4
 801055a:	9302      	str	r3, [sp, #8]
 801055c:	f000 fcbe 	bl	8010edc <_ZN8touchgfx12TextProviderC1Ev>
 8010560:	6823      	ldr	r3, [r4, #0]
 8010562:	4620      	mov	r0, r4
 8010564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010566:	4798      	blx	r3
 8010568:	6823      	ldr	r3, [r4, #0]
 801056a:	4606      	mov	r6, r0
 801056c:	4620      	mov	r0, r4
 801056e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010570:	2401      	movs	r4, #1
 8010572:	4798      	blx	r3
 8010574:	4633      	mov	r3, r6
 8010576:	9000      	str	r0, [sp, #0]
 8010578:	4629      	mov	r1, r5
 801057a:	9a02      	ldr	r2, [sp, #8]
 801057c:	a803      	add	r0, sp, #12
 801057e:	f000 fd00 	bl	8010f82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010582:	a803      	add	r0, sp, #12
 8010584:	f001 f872 	bl	801166c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010588:	b2a3      	uxth	r3, r4
 801058a:	b138      	cbz	r0, 801059c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801058c:	280a      	cmp	r0, #10
 801058e:	a803      	add	r0, sp, #12
 8010590:	bf04      	itt	eq
 8010592:	3301      	addeq	r3, #1
 8010594:	b21c      	sxtheq	r4, r3
 8010596:	f001 f869 	bl	801166c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801059a:	e7f5      	b.n	8010588 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801059c:	4618      	mov	r0, r3
 801059e:	b01d      	add	sp, #116	@ 0x74
 80105a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105a4:	b003      	add	sp, #12
 80105a6:	4770      	bx	lr

080105a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80105a8:	b40e      	push	{r1, r2, r3}
 80105aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ac:	b09e      	sub	sp, #120	@ 0x78
 80105ae:	4604      	mov	r4, r0
 80105b0:	ab23      	add	r3, sp, #140	@ 0x8c
 80105b2:	a805      	add	r0, sp, #20
 80105b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80105b8:	9303      	str	r3, [sp, #12]
 80105ba:	f000 fc8f 	bl	8010edc <_ZN8touchgfx12TextProviderC1Ev>
 80105be:	6823      	ldr	r3, [r4, #0]
 80105c0:	4620      	mov	r0, r4
 80105c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105c4:	4798      	blx	r3
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	4606      	mov	r6, r0
 80105ca:	4620      	mov	r0, r4
 80105cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105ce:	4798      	blx	r3
 80105d0:	4633      	mov	r3, r6
 80105d2:	4629      	mov	r1, r5
 80105d4:	9000      	str	r0, [sp, #0]
 80105d6:	9a03      	ldr	r2, [sp, #12]
 80105d8:	a805      	add	r0, sp, #20
 80105da:	f000 fcd2 	bl	8010f82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80105de:	ad1e      	add	r5, sp, #120	@ 0x78
 80105e0:	2100      	movs	r1, #0
 80105e2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80105e6:	4622      	mov	r2, r4
 80105e8:	a805      	add	r0, sp, #20
 80105ea:	f845 1d68 	str.w	r1, [r5, #-104]!
 80105ee:	462b      	mov	r3, r5
 80105f0:	f000 ffbc 	bl	801156c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80105f4:	b1d8      	cbz	r0, 801062e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80105f6:	280a      	cmp	r0, #10
 80105f8:	d012      	beq.n	8010620 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80105fa:	9804      	ldr	r0, [sp, #16]
 80105fc:	b180      	cbz	r0, 8010620 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80105fe:	7b47      	ldrb	r7, [r0, #13]
 8010600:	88e2      	ldrh	r2, [r4, #6]
 8010602:	00fb      	lsls	r3, r7, #3
 8010604:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8010608:	7a03      	ldrb	r3, [r0, #8]
 801060a:	430b      	orrs	r3, r1
 801060c:	0679      	lsls	r1, r7, #25
 801060e:	bf44      	itt	mi
 8010610:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010614:	b21b      	sxthmi	r3, r3
 8010616:	1ad3      	subs	r3, r2, r3
 8010618:	b21b      	sxth	r3, r3
 801061a:	429e      	cmp	r6, r3
 801061c:	bfa8      	it	ge
 801061e:	461e      	movge	r6, r3
 8010620:	462b      	mov	r3, r5
 8010622:	4622      	mov	r2, r4
 8010624:	2100      	movs	r1, #0
 8010626:	a805      	add	r0, sp, #20
 8010628:	f000 ffa0 	bl	801156c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801062c:	e7e2      	b.n	80105f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801062e:	4630      	mov	r0, r6
 8010630:	b01e      	add	sp, #120	@ 0x78
 8010632:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010636:	b003      	add	sp, #12
 8010638:	4770      	bx	lr

0801063a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801063a:	b513      	push	{r0, r1, r4, lr}
 801063c:	6803      	ldr	r3, [r0, #0]
 801063e:	2400      	movs	r4, #0
 8010640:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010644:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010648:	f8ad 1004 	strh.w	r1, [sp, #4]
 801064c:	4669      	mov	r1, sp
 801064e:	691b      	ldr	r3, [r3, #16]
 8010650:	9400      	str	r4, [sp, #0]
 8010652:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010656:	4798      	blx	r3
 8010658:	b002      	add	sp, #8
 801065a:	bd10      	pop	{r4, pc}

0801065c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	680b      	ldr	r3, [r1, #0]
 8010660:	460c      	mov	r4, r1
 8010662:	4605      	mov	r5, r0
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	4798      	blx	r3
 8010668:	6823      	ldr	r3, [r4, #0]
 801066a:	4620      	mov	r0, r4
 801066c:	4629      	mov	r1, r5
 801066e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010670:	4798      	blx	r3
 8010672:	4628      	mov	r0, r5
 8010674:	bd38      	pop	{r3, r4, r5, pc}

08010676 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010676:	b410      	push	{r4}
 8010678:	880a      	ldrh	r2, [r1, #0]
 801067a:	8884      	ldrh	r4, [r0, #4]
 801067c:	4422      	add	r2, r4
 801067e:	800a      	strh	r2, [r1, #0]
 8010680:	884a      	ldrh	r2, [r1, #2]
 8010682:	88c4      	ldrh	r4, [r0, #6]
 8010684:	4422      	add	r2, r4
 8010686:	804a      	strh	r2, [r1, #2]
 8010688:	6940      	ldr	r0, [r0, #20]
 801068a:	b120      	cbz	r0, 8010696 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801068c:	6803      	ldr	r3, [r0, #0]
 801068e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010694:	4718      	bx	r3
 8010696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801069a:	4770      	bx	lr

0801069c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801069c:	b570      	push	{r4, r5, r6, lr}
 801069e:	8882      	ldrh	r2, [r0, #4]
 80106a0:	460c      	mov	r4, r1
 80106a2:	880b      	ldrh	r3, [r1, #0]
 80106a4:	4605      	mov	r5, r0
 80106a6:	4413      	add	r3, r2
 80106a8:	800b      	strh	r3, [r1, #0]
 80106aa:	884b      	ldrh	r3, [r1, #2]
 80106ac:	88c2      	ldrh	r2, [r0, #6]
 80106ae:	4413      	add	r3, r2
 80106b0:	804b      	strh	r3, [r1, #2]
 80106b2:	1d01      	adds	r1, r0, #4
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7fc fdf9 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 80106ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	dd0b      	ble.n	80106da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80106c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	dd07      	ble.n	80106da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80106ca:	6968      	ldr	r0, [r5, #20]
 80106cc:	b128      	cbz	r0, 80106da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80106ce:	6803      	ldr	r3, [r0, #0]
 80106d0:	4621      	mov	r1, r4
 80106d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106d8:	4718      	bx	r3
 80106da:	bd70      	pop	{r4, r5, r6, pc}

080106dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80106dc:	b570      	push	{r4, r5, r6, lr}
 80106de:	8882      	ldrh	r2, [r0, #4]
 80106e0:	460c      	mov	r4, r1
 80106e2:	880b      	ldrh	r3, [r1, #0]
 80106e4:	4605      	mov	r5, r0
 80106e6:	4413      	add	r3, r2
 80106e8:	800b      	strh	r3, [r1, #0]
 80106ea:	884b      	ldrh	r3, [r1, #2]
 80106ec:	88c2      	ldrh	r2, [r0, #6]
 80106ee:	4413      	add	r3, r2
 80106f0:	804b      	strh	r3, [r1, #2]
 80106f2:	1d01      	adds	r1, r0, #4
 80106f4:	4620      	mov	r0, r4
 80106f6:	f7fc fdd9 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 80106fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	dd19      	ble.n	8010736 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8010702:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010706:	2b00      	cmp	r3, #0
 8010708:	dd15      	ble.n	8010736 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801070a:	6968      	ldr	r0, [r5, #20]
 801070c:	b128      	cbz	r0, 801071a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801070e:	6803      	ldr	r3, [r0, #0]
 8010710:	4621      	mov	r1, r4
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010718:	4718      	bx	r3
 801071a:	4b07      	ldr	r3, [pc, #28]	@ (8010738 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3304      	adds	r3, #4
 8010720:	429d      	cmp	r5, r3
 8010722:	d108      	bne.n	8010736 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8010724:	f7fe ff10 	bl	800f548 <_ZN8touchgfx11Application11getInstanceEv>
 8010728:	6803      	ldr	r3, [r0, #0]
 801072a:	6821      	ldr	r1, [r4, #0]
 801072c:	6862      	ldr	r2, [r4, #4]
 801072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010734:	4718      	bx	r3
 8010736:	bd70      	pop	{r4, r5, r6, pc}
 8010738:	24065a8c 	.word	0x24065a8c

0801073c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	4604      	mov	r4, r0
 8010740:	4616      	mov	r6, r2
 8010742:	460d      	mov	r5, r1
 8010744:	b901      	cbnz	r1, 8010748 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8010746:	b192      	cbz	r2, 801076e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	4620      	mov	r0, r4
 801074c:	699b      	ldr	r3, [r3, #24]
 801074e:	4798      	blx	r3
 8010750:	88e2      	ldrh	r2, [r4, #6]
 8010752:	88a1      	ldrh	r1, [r4, #4]
 8010754:	4620      	mov	r0, r4
 8010756:	4432      	add	r2, r6
 8010758:	4429      	add	r1, r5
 801075a:	b212      	sxth	r2, r2
 801075c:	b209      	sxth	r1, r1
 801075e:	f7f9 f91c 	bl	800999a <_ZN8touchgfx8Drawable5setXYEss>
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	4620      	mov	r0, r4
 8010766:	699b      	ldr	r3, [r3, #24]
 8010768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801076c:	4718      	bx	r3
 801076e:	bd70      	pop	{r4, r5, r6, pc}

08010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8010770:	b510      	push	{r4, lr}
 8010772:	2300      	movs	r3, #0
 8010774:	4604      	mov	r4, r0
 8010776:	4608      	mov	r0, r1
 8010778:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801077c:	8023      	strh	r3, [r4, #0]
 801077e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010782:	8063      	strh	r3, [r4, #2]
 8010784:	6803      	ldr	r3, [r0, #0]
 8010786:	80a1      	strh	r1, [r4, #4]
 8010788:	4621      	mov	r1, r4
 801078a:	80e2      	strh	r2, [r4, #6]
 801078c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801078e:	4798      	blx	r3
 8010790:	4620      	mov	r0, r4
 8010792:	bd10      	pop	{r4, pc}

08010794 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8010794:	b530      	push	{r4, r5, lr}
 8010796:	8083      	strh	r3, [r0, #4]
 8010798:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801079c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80107a0:	80c3      	strh	r3, [r0, #6]
 80107a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80107a6:	6141      	str	r1, [r0, #20]
 80107a8:	7203      	strb	r3, [r0, #8]
 80107aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80107ae:	8302      	strh	r2, [r0, #24]
 80107b0:	7243      	strb	r3, [r0, #9]
 80107b2:	7a83      	ldrb	r3, [r0, #10]
 80107b4:	f365 0306 	bfi	r3, r5, #0, #7
 80107b8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80107bc:	f365 13c7 	bfi	r3, r5, #7, #1
 80107c0:	7283      	strb	r3, [r0, #10]
 80107c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80107c6:	72c3      	strb	r3, [r0, #11]
 80107c8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80107cc:	7303      	strb	r3, [r0, #12]
 80107ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80107d2:	81c3      	strh	r3, [r0, #14]
 80107d4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80107d8:	8203      	strh	r3, [r0, #16]
 80107da:	4b01      	ldr	r3, [pc, #4]	@ (80107e0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80107dc:	6003      	str	r3, [r0, #0]
 80107de:	bd30      	pop	{r4, r5, pc}
 80107e0:	0801e9ac 	.word	0x0801e9ac

080107e4 <_ZNK8touchgfx9ConstFont4findEt>:
 80107e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107e6:	6944      	ldr	r4, [r0, #20]
 80107e8:	b3bc      	cbz	r4, 801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80107ea:	88a3      	ldrh	r3, [r4, #4]
 80107ec:	8b02      	ldrh	r2, [r0, #24]
 80107ee:	1acb      	subs	r3, r1, r3
 80107f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80107f4:	d431      	bmi.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80107f6:	4293      	cmp	r3, r2
 80107f8:	dd0c      	ble.n	8010814 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80107fa:	230e      	movs	r3, #14
 80107fc:	fb03 4302 	mla	r3, r3, r2, r4
 8010800:	889b      	ldrh	r3, [r3, #4]
 8010802:	1a5b      	subs	r3, r3, r1
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	429a      	cmp	r2, r3
 8010808:	db27      	blt.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801080a:	2b00      	cmp	r3, #0
 801080c:	bfbc      	itt	lt
 801080e:	2302      	movlt	r3, #2
 8010810:	fb92 f3f3 	sdivlt	r3, r2, r3
 8010814:	2500      	movs	r5, #0
 8010816:	260e      	movs	r6, #14
 8010818:	4295      	cmp	r5, r2
 801081a:	dc1e      	bgt.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801081c:	fb06 4003 	mla	r0, r6, r3, r4
 8010820:	8887      	ldrh	r7, [r0, #4]
 8010822:	42b9      	cmp	r1, r7
 8010824:	d01a      	beq.n	801085c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8010826:	d20d      	bcs.n	8010844 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8010828:	1e5a      	subs	r2, r3, #1
 801082a:	4295      	cmp	r5, r2
 801082c:	dc15      	bgt.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801082e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8010832:	1a5b      	subs	r3, r3, r1
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	429a      	cmp	r2, r3
 8010838:	db0f      	blt.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801083a:	429d      	cmp	r5, r3
 801083c:	ddec      	ble.n	8010818 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801083e:	1953      	adds	r3, r2, r5
 8010840:	105b      	asrs	r3, r3, #1
 8010842:	e7e9      	b.n	8010818 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010844:	1c5d      	adds	r5, r3, #1
 8010846:	42aa      	cmp	r2, r5
 8010848:	db07      	blt.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801084a:	8a43      	ldrh	r3, [r0, #18]
 801084c:	1acb      	subs	r3, r1, r3
 801084e:	442b      	add	r3, r5
 8010850:	429d      	cmp	r5, r3
 8010852:	dc02      	bgt.n	801085a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010854:	429a      	cmp	r2, r3
 8010856:	dadf      	bge.n	8010818 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010858:	e7f1      	b.n	801083e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801085a:	2000      	movs	r0, #0
 801085c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801085e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801085e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010860:	4604      	mov	r4, r0
 8010862:	4617      	mov	r7, r2
 8010864:	461e      	mov	r6, r3
 8010866:	b911      	cbnz	r1, 801086e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010868:	2500      	movs	r5, #0
 801086a:	4628      	mov	r0, r5
 801086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801086e:	290a      	cmp	r1, #10
 8010870:	d0fa      	beq.n	8010868 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010872:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8010876:	4291      	cmp	r1, r2
 8010878:	d0f6      	beq.n	8010868 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801087a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801087e:	4291      	cmp	r1, r2
 8010880:	d0f2      	beq.n	8010868 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010882:	f7ff ffaf 	bl	80107e4 <_ZNK8touchgfx9ConstFont4findEt>
 8010886:	4605      	mov	r5, r0
 8010888:	b950      	cbnz	r0, 80108a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801088a:	6823      	ldr	r3, [r4, #0]
 801088c:	4620      	mov	r0, r4
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	4798      	blx	r3
 8010892:	4601      	mov	r1, r0
 8010894:	4620      	mov	r0, r4
 8010896:	f7ff ffa5 	bl	80107e4 <_ZNK8touchgfx9ConstFont4findEt>
 801089a:	4605      	mov	r5, r0
 801089c:	2800      	cmp	r0, #0
 801089e:	d0e3      	beq.n	8010868 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	4629      	mov	r1, r5
 80108a4:	4620      	mov	r0, r4
 80108a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108a8:	4798      	blx	r3
 80108aa:	6038      	str	r0, [r7, #0]
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	4620      	mov	r0, r4
 80108b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b2:	4798      	blx	r3
 80108b4:	7030      	strb	r0, [r6, #0]
 80108b6:	e7d8      	b.n	801086a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080108b8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80108b8:	2000      	movs	r0, #0
 80108ba:	4770      	bx	lr

080108bc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80108bc:	2001      	movs	r0, #1
 80108be:	4770      	bx	lr

080108c0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80108c0:	2002      	movs	r0, #2
 80108c2:	4770      	bx	lr

080108c4 <_ZN8touchgfx12GestureEventD1Ev>:
 80108c4:	4770      	bx	lr

080108c6 <_ZN8touchgfx9DragEventD1Ev>:
 80108c6:	4770      	bx	lr

080108c8 <_ZN8touchgfx10ClickEventD1Ev>:
 80108c8:	4770      	bx	lr

080108ca <_ZN8touchgfx10ClickEventD0Ev>:
 80108ca:	b510      	push	{r4, lr}
 80108cc:	4604      	mov	r4, r0
 80108ce:	210c      	movs	r1, #12
 80108d0:	f00b fbdf 	bl	801c092 <_ZdlPvj>
 80108d4:	4620      	mov	r0, r4
 80108d6:	bd10      	pop	{r4, pc}

080108d8 <_ZN8touchgfx9DragEventD0Ev>:
 80108d8:	b510      	push	{r4, lr}
 80108da:	4604      	mov	r4, r0
 80108dc:	2110      	movs	r1, #16
 80108de:	f00b fbd8 	bl	801c092 <_ZdlPvj>
 80108e2:	4620      	mov	r0, r4
 80108e4:	bd10      	pop	{r4, pc}

080108e6 <_ZN8touchgfx12GestureEventD0Ev>:
 80108e6:	b510      	push	{r4, lr}
 80108e8:	4604      	mov	r4, r0
 80108ea:	210c      	movs	r1, #12
 80108ec:	f00b fbd1 	bl	801c092 <_ZdlPvj>
 80108f0:	4620      	mov	r0, r4
 80108f2:	bd10      	pop	{r4, pc}

080108f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80108f4:	b530      	push	{r4, r5, lr}
 80108f6:	460d      	mov	r5, r1
 80108f8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80108fa:	b087      	sub	sp, #28
 80108fc:	4604      	mov	r4, r0
 80108fe:	b301      	cbz	r1, 8010942 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8010900:	a801      	add	r0, sp, #4
 8010902:	f7ff ff35 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010906:	892a      	ldrh	r2, [r5, #8]
 8010908:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801090c:	7928      	ldrb	r0, [r5, #4]
 801090e:	1ad2      	subs	r2, r2, r3
 8010910:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010912:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8010916:	441a      	add	r2, r3
 8010918:	896b      	ldrh	r3, [r5, #10]
 801091a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801091e:	f88d 0010 	strb.w	r0, [sp, #16]
 8010922:	1b5b      	subs	r3, r3, r5
 8010924:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8010926:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010928:	442b      	add	r3, r5
 801092a:	4d07      	ldr	r5, [pc, #28]	@ (8010948 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801092c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8010930:	a903      	add	r1, sp, #12
 8010932:	9503      	str	r5, [sp, #12]
 8010934:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010938:	f8ad 3016 	strh.w	r3, [sp, #22]
 801093c:	6803      	ldr	r3, [r0, #0]
 801093e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010940:	4798      	blx	r3
 8010942:	b007      	add	sp, #28
 8010944:	bd30      	pop	{r4, r5, pc}
 8010946:	bf00      	nop
 8010948:	0801ea3c 	.word	0x0801ea3c

0801094c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010950:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010952:	b08a      	sub	sp, #40	@ 0x28
 8010954:	4604      	mov	r4, r0
 8010956:	460d      	mov	r5, r1
 8010958:	b113      	cbz	r3, 8010960 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801095a:	790b      	ldrb	r3, [r1, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d044      	beq.n	80109ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8010960:	f104 0804 	add.w	r8, r4, #4
 8010964:	a803      	add	r0, sp, #12
 8010966:	4641      	mov	r1, r8
 8010968:	f7ff ff02 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801096c:	792b      	ldrb	r3, [r5, #4]
 801096e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8010972:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8010976:	b983      	cbnz	r3, 801099a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8010978:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801097c:	892a      	ldrh	r2, [r5, #8]
 801097e:	88e9      	ldrh	r1, [r5, #6]
 8010980:	4640      	mov	r0, r8
 8010982:	1b92      	subs	r2, r2, r6
 8010984:	9301      	str	r3, [sp, #4]
 8010986:	1bc9      	subs	r1, r1, r7
 8010988:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801098c:	b212      	sxth	r2, r2
 801098e:	9300      	str	r3, [sp, #0]
 8010990:	b209      	sxth	r1, r1
 8010992:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8010996:	f7fc fba7 	bl	800d0e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801099a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801099c:	b329      	cbz	r1, 80109ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801099e:	a805      	add	r0, sp, #20
 80109a0:	f7ff fee6 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80109a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80109a8:	792b      	ldrb	r3, [r5, #4]
 80109aa:	a907      	add	r1, sp, #28
 80109ac:	1abf      	subs	r7, r7, r2
 80109ae:	88ea      	ldrh	r2, [r5, #6]
 80109b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80109b2:	4417      	add	r7, r2
 80109b4:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80109b6:	f88d 3020 	strb.w	r3, [sp, #32]
 80109ba:	4417      	add	r7, r2
 80109bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80109c0:	1ab6      	subs	r6, r6, r2
 80109c2:	892a      	ldrh	r2, [r5, #8]
 80109c4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80109c8:	4416      	add	r6, r2
 80109ca:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80109cc:	4416      	add	r6, r2
 80109ce:	4a08      	ldr	r2, [pc, #32]	@ (80109f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80109d0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80109d4:	2600      	movs	r6, #0
 80109d6:	9207      	str	r2, [sp, #28]
 80109d8:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80109dc:	6803      	ldr	r3, [r0, #0]
 80109de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109e0:	4798      	blx	r3
 80109e2:	792b      	ldrb	r3, [r5, #4]
 80109e4:	b10b      	cbz	r3, 80109ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80109e6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80109ea:	b00a      	add	sp, #40	@ 0x28
 80109ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f0:	0801ea14 	.word	0x0801ea14

080109f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80109f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f8:	460c      	mov	r4, r1
 80109fa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80109fc:	b088      	sub	sp, #32
 80109fe:	4605      	mov	r5, r0
 8010a00:	2900      	cmp	r1, #0
 8010a02:	d06d      	beq.n	8010ae0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8010a04:	4668      	mov	r0, sp
 8010a06:	f7ff feb3 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010a0a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8010a0c:	88e3      	ldrh	r3, [r4, #6]
 8010a0e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8010a12:	440b      	add	r3, r1
 8010a14:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8010a18:	b21b      	sxth	r3, r3
 8010a1a:	4543      	cmp	r3, r8
 8010a1c:	db31      	blt.n	8010a82 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010a1e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8010a22:	44c4      	add	ip, r8
 8010a24:	fa0f fc8c 	sxth.w	ip, ip
 8010a28:	4563      	cmp	r3, ip
 8010a2a:	da2a      	bge.n	8010a82 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010a2c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8010a2e:	8926      	ldrh	r6, [r4, #8]
 8010a30:	4416      	add	r6, r2
 8010a32:	b236      	sxth	r6, r6
 8010a34:	42be      	cmp	r6, r7
 8010a36:	db24      	blt.n	8010a82 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010a38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010a3c:	4438      	add	r0, r7
 8010a3e:	b200      	sxth	r0, r0
 8010a40:	4286      	cmp	r6, r0
 8010a42:	da1e      	bge.n	8010a82 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010a44:	8963      	ldrh	r3, [r4, #10]
 8010a46:	4419      	add	r1, r3
 8010a48:	b209      	sxth	r1, r1
 8010a4a:	4541      	cmp	r1, r8
 8010a4c:	db08      	blt.n	8010a60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010a4e:	4561      	cmp	r1, ip
 8010a50:	da06      	bge.n	8010a60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010a52:	89a3      	ldrh	r3, [r4, #12]
 8010a54:	441a      	add	r2, r3
 8010a56:	b212      	sxth	r2, r2
 8010a58:	42ba      	cmp	r2, r7
 8010a5a:	db01      	blt.n	8010a60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010a5c:	4282      	cmp	r2, r0
 8010a5e:	db10      	blt.n	8010a82 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010a60:	4b21      	ldr	r3, [pc, #132]	@ (8010ae8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8010a62:	a904      	add	r1, sp, #16
 8010a64:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8010a66:	9304      	str	r3, [sp, #16]
 8010a68:	2302      	movs	r3, #2
 8010a6a:	f88d 3014 	strb.w	r3, [sp, #20]
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a74:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010a78:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010a7c:	6803      	ldr	r3, [r0, #0]
 8010a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a80:	4798      	blx	r3
 8010a82:	1d29      	adds	r1, r5, #4
 8010a84:	a802      	add	r0, sp, #8
 8010a86:	f7ff fe73 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010a8a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010a8e:	88e0      	ldrh	r0, [r4, #6]
 8010a90:	eba3 0808 	sub.w	r8, r3, r8
 8010a94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010a98:	7921      	ldrb	r1, [r4, #4]
 8010a9a:	fa1f f888 	uxth.w	r8, r8
 8010a9e:	1bdf      	subs	r7, r3, r7
 8010aa0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8010aa4:	b2bb      	uxth	r3, r7
 8010aa6:	4440      	add	r0, r8
 8010aa8:	8922      	ldrh	r2, [r4, #8]
 8010aaa:	8967      	ldrh	r7, [r4, #10]
 8010aac:	4460      	add	r0, ip
 8010aae:	89a4      	ldrh	r4, [r4, #12]
 8010ab0:	441a      	add	r2, r3
 8010ab2:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8010ab4:	44b8      	add	r8, r7
 8010ab6:	4423      	add	r3, r4
 8010ab8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8010abc:	4432      	add	r2, r6
 8010abe:	44e0      	add	r8, ip
 8010ac0:	4433      	add	r3, r6
 8010ac2:	4c0a      	ldr	r4, [pc, #40]	@ (8010aec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8010ac4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8010ac6:	f88d 1014 	strb.w	r1, [sp, #20]
 8010aca:	a904      	add	r1, sp, #16
 8010acc:	9404      	str	r4, [sp, #16]
 8010ace:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010ad2:	f8ad 801a 	strh.w	r8, [sp, #26]
 8010ad6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010ada:	6803      	ldr	r3, [r0, #0]
 8010adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ade:	4798      	blx	r3
 8010ae0:	b008      	add	sp, #32
 8010ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ae6:	bf00      	nop
 8010ae8:	0801ea14 	.word	0x0801ea14
 8010aec:	0801ea28 	.word	0x0801ea28

08010af0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8010af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010af2:	4604      	mov	r4, r0
 8010af4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8010af8:	3201      	adds	r2, #1
 8010afa:	d112      	bne.n	8010b22 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8010afc:	2500      	movs	r5, #0
 8010afe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010b02:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010b06:	6803      	ldr	r3, [r0, #0]
 8010b08:	9500      	str	r5, [sp, #0]
 8010b0a:	466d      	mov	r5, sp
 8010b0c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010b10:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010b14:	4629      	mov	r1, r5
 8010b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b18:	4798      	blx	r3
 8010b1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010b22:	4620      	mov	r0, r4
 8010b24:	b003      	add	sp, #12
 8010b26:	bd30      	pop	{r4, r5, pc}

08010b28 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8010b28:	b513      	push	{r0, r1, r4, lr}
 8010b2a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8010b2e:	4604      	mov	r4, r0
 8010b30:	3301      	adds	r3, #1
 8010b32:	d109      	bne.n	8010b48 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8010b34:	4601      	mov	r1, r0
 8010b36:	4668      	mov	r0, sp
 8010b38:	f7ff fe1a 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010b3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b40:	8423      	strh	r3, [r4, #32]
 8010b42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010b46:	8463      	strh	r3, [r4, #34]	@ 0x22
 8010b48:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8010b4c:	b002      	add	sp, #8
 8010b4e:	bd10      	pop	{r4, pc}

08010b50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8010b50:	b513      	push	{r0, r1, r4, lr}
 8010b52:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8010b56:	4604      	mov	r4, r0
 8010b58:	3301      	adds	r3, #1
 8010b5a:	d109      	bne.n	8010b70 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8010b5c:	4601      	mov	r1, r0
 8010b5e:	4668      	mov	r0, sp
 8010b60:	f7ff fe06 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010b64:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b68:	8423      	strh	r3, [r4, #32]
 8010b6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010b6e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8010b70:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8010b74:	b002      	add	sp, #8
 8010b76:	bd10      	pop	{r4, pc}

08010b78 <_ZN8touchgfx6ScreenC1Ev>:
 8010b78:	b570      	push	{r4, r5, r6, lr}
 8010b7a:	4b17      	ldr	r3, [pc, #92]	@ (8010bd8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	4a17      	ldr	r2, [pc, #92]	@ (8010bdc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8010b80:	2101      	movs	r1, #1
 8010b82:	f845 3b04 	str.w	r3, [r5], #4
 8010b86:	2300      	movs	r3, #0
 8010b88:	6042      	str	r2, [r0, #4]
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	8103      	strh	r3, [r0, #8]
 8010b8e:	8143      	strh	r3, [r0, #10]
 8010b90:	8183      	strh	r3, [r0, #12]
 8010b92:	81c3      	strh	r3, [r0, #14]
 8010b94:	8203      	strh	r3, [r0, #16]
 8010b96:	8243      	strh	r3, [r0, #18]
 8010b98:	8283      	strh	r3, [r0, #20]
 8010b9a:	82c3      	strh	r3, [r0, #22]
 8010b9c:	6203      	str	r3, [r0, #32]
 8010b9e:	8483      	strh	r3, [r0, #36]	@ 0x24
 8010ba0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8010ba2:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8010ba6:	6343      	str	r3, [r0, #52]	@ 0x34
 8010ba8:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8010bac:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010bb0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010bb4:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8010bb8:	4b09      	ldr	r3, [pc, #36]	@ (8010be0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8010bba:	4628      	mov	r0, r5
 8010bbc:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010bc0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8010bc2:	4a08      	ldr	r2, [pc, #32]	@ (8010be4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8010bc4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010bc8:	4798      	blx	r3
 8010bca:	6863      	ldr	r3, [r4, #4]
 8010bcc:	4628      	mov	r0, r5
 8010bce:	4631      	mov	r1, r6
 8010bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bd2:	4798      	blx	r3
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	bd70      	pop	{r4, r5, r6, pc}
 8010bd8:	0801ea50 	.word	0x0801ea50
 8010bdc:	0801e564 	.word	0x0801e564
 8010be0:	24065a46 	.word	0x24065a46
 8010be4:	24065a44 	.word	0x24065a44

08010be8 <_ZN8touchgfx6Screen4drawEv>:
 8010be8:	4b09      	ldr	r3, [pc, #36]	@ (8010c10 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8010bea:	b507      	push	{r0, r1, r2, lr}
 8010bec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	4b08      	ldr	r3, [pc, #32]	@ (8010c14 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8010bf4:	9100      	str	r1, [sp, #0]
 8010bf6:	4669      	mov	r1, sp
 8010bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bfc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010c00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c04:	6803      	ldr	r3, [r0, #0]
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	4798      	blx	r3
 8010c0a:	b003      	add	sp, #12
 8010c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c10:	24065a44 	.word	0x24065a44
 8010c14:	24065a46 	.word	0x24065a46

08010c18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010c20:	b089      	sub	sp, #36	@ 0x24
 8010c22:	4680      	mov	r8, r0
 8010c24:	460c      	mov	r4, r1
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	4615      	mov	r5, r2
 8010c2a:	dd0e      	ble.n	8010c4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010c2c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dd0a      	ble.n	8010c4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010c34:	4628      	mov	r0, r5
 8010c36:	f7ff ff5b 	bl	8010af0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	f7fe fba6 	bl	800f38c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010c40:	69eb      	ldr	r3, [r5, #28]
 8010c42:	b928      	cbnz	r0, 8010c50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8010c44:	461d      	mov	r5, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1f4      	bne.n	8010c34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8010c4a:	b009      	add	sp, #36	@ 0x24
 8010c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c50:	ae04      	add	r6, sp, #16
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	f000 80b5 	beq.w	8010dc2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010c58:	682b      	ldr	r3, [r5, #0]
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	a802      	add	r0, sp, #8
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	4798      	blx	r3
 8010c62:	4628      	mov	r0, r5
 8010c64:	f7ff ff60 	bl	8010b28 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010c68:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010c6c:	4407      	add	r7, r0
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f7ff ff6e 	bl	8010b50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010c74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010c78:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010c7c:	b23f      	sxth	r7, r7
 8010c7e:	4418      	add	r0, r3
 8010c80:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010c84:	4621      	mov	r1, r4
 8010c86:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010c8a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c94:	f8ad 7010 	strh.w	r7, [sp, #16]
 8010c98:	f7fc fb08 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f7ff ff27 	bl	8010af0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010ca2:	ab06      	add	r3, sp, #24
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010caa:	e883 0003 	stmia.w	r3, {r0, r1}
 8010cae:	4611      	mov	r1, r2
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fc fafb 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 8010cb6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010cba:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010cbe:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8010cc2:	4299      	cmp	r1, r3
 8010cc4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8010cc8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8010ccc:	d10b      	bne.n	8010ce6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010cce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010cd2:	4552      	cmp	r2, sl
 8010cd4:	d107      	bne.n	8010ce6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010cd6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010cda:	455a      	cmp	r2, fp
 8010cdc:	d103      	bne.n	8010ce6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010cde:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010ce2:	454a      	cmp	r2, r9
 8010ce4:	d06d      	beq.n	8010dc2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010ce6:	f1bb 0f00 	cmp.w	fp, #0
 8010cea:	dd65      	ble.n	8010db8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8010cec:	f1b9 0f00 	cmp.w	r9, #0
 8010cf0:	dd62      	ble.n	8010db8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8010cf2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010cf6:	fa1f f08a 	uxth.w	r0, sl
 8010cfa:	4552      	cmp	r2, sl
 8010cfc:	9000      	str	r0, [sp, #0]
 8010cfe:	da12      	bge.n	8010d26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8010d00:	9301      	str	r3, [sp, #4]
 8010d02:	9b00      	ldr	r3, [sp, #0]
 8010d04:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010d08:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010d0c:	1a9a      	subs	r2, r3, r2
 8010d0e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8010d12:	4631      	mov	r1, r6
 8010d14:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010d18:	4640      	mov	r0, r8
 8010d1a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010d1e:	69ea      	ldr	r2, [r5, #28]
 8010d20:	f7ff ff7a 	bl	8010c18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010d24:	9b01      	ldr	r3, [sp, #4]
 8010d26:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010d2a:	b29f      	uxth	r7, r3
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	da0d      	bge.n	8010d4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8010d30:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010d34:	1aba      	subs	r2, r7, r2
 8010d36:	f8ad a012 	strh.w	sl, [sp, #18]
 8010d3a:	4631      	mov	r1, r6
 8010d3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010d40:	4640      	mov	r0, r8
 8010d42:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010d46:	69ea      	ldr	r2, [r5, #28]
 8010d48:	f7ff ff66 	bl	8010c18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010d4c:	8822      	ldrh	r2, [r4, #0]
 8010d4e:	445f      	add	r7, fp
 8010d50:	88a3      	ldrh	r3, [r4, #4]
 8010d52:	b2bf      	uxth	r7, r7
 8010d54:	4413      	add	r3, r2
 8010d56:	b23a      	sxth	r2, r7
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	b219      	sxth	r1, r3
 8010d5c:	4291      	cmp	r1, r2
 8010d5e:	dd0d      	ble.n	8010d7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8010d60:	1bdb      	subs	r3, r3, r7
 8010d62:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010d66:	f8ad a012 	strh.w	sl, [sp, #18]
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010d70:	4640      	mov	r0, r8
 8010d72:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010d76:	69ea      	ldr	r2, [r5, #28]
 8010d78:	f7ff ff4e 	bl	8010c18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010d7c:	88e2      	ldrh	r2, [r4, #6]
 8010d7e:	8863      	ldrh	r3, [r4, #2]
 8010d80:	4413      	add	r3, r2
 8010d82:	9a00      	ldr	r2, [sp, #0]
 8010d84:	444a      	add	r2, r9
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	fa1f f982 	uxth.w	r9, r2
 8010d8c:	b219      	sxth	r1, r3
 8010d8e:	fa0f f289 	sxth.w	r2, r9
 8010d92:	428a      	cmp	r2, r1
 8010d94:	da15      	bge.n	8010dc2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010d96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010d9a:	eba3 0309 	sub.w	r3, r3, r9
 8010d9e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010da2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010da6:	4631      	mov	r1, r6
 8010da8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010dac:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010db0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010db4:	69ea      	ldr	r2, [r5, #28]
 8010db6:	e001      	b.n	8010dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8010db8:	69ea      	ldr	r2, [r5, #28]
 8010dba:	4621      	mov	r1, r4
 8010dbc:	4640      	mov	r0, r8
 8010dbe:	f7ff ff2b 	bl	8010c18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f7ff fe94 	bl	8010af0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010dc8:	6861      	ldr	r1, [r4, #4]
 8010dca:	4602      	mov	r2, r0
 8010dcc:	4633      	mov	r3, r6
 8010dce:	6820      	ldr	r0, [r4, #0]
 8010dd0:	c303      	stmia	r3!, {r0, r1}
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	f7fc fa69 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 8010dda:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f77f af33 	ble.w	8010c4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010de4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f77f af2e 	ble.w	8010c4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010dee:	4628      	mov	r0, r5
 8010df0:	f7ff fe9a 	bl	8010b28 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010df4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010df8:	1a18      	subs	r0, r3, r0
 8010dfa:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010dfe:	4628      	mov	r0, r5
 8010e00:	f7ff fea6 	bl	8010b50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010e04:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010e08:	4631      	mov	r1, r6
 8010e0a:	1a18      	subs	r0, r3, r0
 8010e0c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010e10:	4628      	mov	r0, r5
 8010e12:	682b      	ldr	r3, [r5, #0]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	4798      	blx	r3
 8010e18:	e717      	b.n	8010c4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08010e1a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8010e1a:	b570      	push	{r4, r5, r6, lr}
 8010e1c:	1d06      	adds	r6, r0, #4
 8010e1e:	b086      	sub	sp, #24
 8010e20:	460c      	mov	r4, r1
 8010e22:	2300      	movs	r3, #0
 8010e24:	4631      	mov	r1, r6
 8010e26:	4605      	mov	r5, r0
 8010e28:	a802      	add	r0, sp, #8
 8010e2a:	9301      	str	r3, [sp, #4]
 8010e2c:	f7ff fca0 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010e30:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010e34:	8822      	ldrh	r2, [r4, #0]
 8010e36:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8010e3a:	1ad2      	subs	r2, r2, r3
 8010e3c:	8863      	ldrh	r3, [r4, #2]
 8010e3e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010e42:	1a5b      	subs	r3, r3, r1
 8010e44:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8010e48:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010e4c:	aa01      	add	r2, sp, #4
 8010e4e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010e52:	4630      	mov	r0, r6
 8010e54:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010e58:	a904      	add	r1, sp, #16
 8010e5a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010e5e:	f7fc fafd 	bl	800d45c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010e62:	9a01      	ldr	r2, [sp, #4]
 8010e64:	b11a      	cbz	r2, 8010e6e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8010e66:	4621      	mov	r1, r4
 8010e68:	4628      	mov	r0, r5
 8010e6a:	f7ff fed5 	bl	8010c18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010e6e:	b006      	add	sp, #24
 8010e70:	bd70      	pop	{r4, r5, r6, pc}

08010e72 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010e72:	4602      	mov	r2, r0
 8010e74:	b530      	push	{r4, r5, lr}
 8010e76:	4604      	mov	r4, r0
 8010e78:	b085      	sub	sp, #20
 8010e7a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010e7e:	460d      	mov	r5, r1
 8010e80:	466b      	mov	r3, sp
 8010e82:	6851      	ldr	r1, [r2, #4]
 8010e84:	c303      	stmia	r3!, {r0, r1}
 8010e86:	4629      	mov	r1, r5
 8010e88:	4668      	mov	r0, sp
 8010e8a:	f7fc fa0f 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 8010e8e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010e92:	b12b      	cbz	r3, 8010ea0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8010e94:	4669      	mov	r1, sp
 8010e96:	4620      	mov	r0, r4
 8010e98:	f7ff ffbf 	bl	8010e1a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010e9c:	b005      	add	sp, #20
 8010e9e:	bd30      	pop	{r4, r5, pc}
 8010ea0:	3404      	adds	r4, #4
 8010ea2:	a802      	add	r0, sp, #8
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	f7ff fc63 	bl	8010770 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010eaa:	f8bd 3000 	ldrh.w	r3, [sp]
 8010eae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010eb2:	4669      	mov	r1, sp
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010ebc:	f8ad 3000 	strh.w	r3, [sp]
 8010ec0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010ec4:	1a9b      	subs	r3, r3, r2
 8010ec6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010eca:	f7fc fa8e 	bl	800d3ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010ece:	e7e5      	b.n	8010e9c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08010ed0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	680a      	ldr	r2, [r1, #0]
 8010ed4:	1d01      	adds	r1, r0, #4
 8010ed6:	6992      	ldr	r2, [r2, #24]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	4710      	bx	r2

08010edc <_ZN8touchgfx12TextProviderC1Ev>:
 8010edc:	b538      	push	{r3, r4, r5, lr}
 8010ede:	2500      	movs	r5, #0
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	220e      	movs	r2, #14
 8010ee6:	7403      	strb	r3, [r0, #16]
 8010ee8:	4629      	mov	r1, r5
 8010eea:	6145      	str	r5, [r0, #20]
 8010eec:	7605      	strb	r5, [r0, #24]
 8010eee:	83c5      	strh	r5, [r0, #30]
 8010ef0:	8405      	strh	r5, [r0, #32]
 8010ef2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8010ef4:	8705      	strh	r5, [r0, #56]	@ 0x38
 8010ef6:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8010ef8:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8010efc:	e9c0 5500 	strd	r5, r5, [r0]
 8010f00:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8010f04:	304c      	adds	r0, #76	@ 0x4c
 8010f06:	f00b fb8f 	bl	801c628 <memset>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8010f12:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8010f16:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8010f1a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8010f1e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8010f22:	f7f9 fd41 	bl	800a9a8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010f26:	4620      	mov	r0, r4
 8010f28:	bd38      	pop	{r3, r4, r5, pc}

08010f2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010f2a:	b530      	push	{r4, r5, lr}
 8010f2c:	2500      	movs	r5, #0
 8010f2e:	2401      	movs	r4, #1
 8010f30:	6843      	ldr	r3, [r0, #4]
 8010f32:	b913      	cbnz	r3, 8010f3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8010f34:	6803      	ldr	r3, [r0, #0]
 8010f36:	b313      	cbz	r3, 8010f7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010f38:	6043      	str	r3, [r0, #4]
 8010f3a:	7e03      	ldrb	r3, [r0, #24]
 8010f3c:	b143      	cbz	r3, 8010f50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010f3e:	6943      	ldr	r3, [r0, #20]
 8010f40:	b12b      	cbz	r3, 8010f4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010f42:	881a      	ldrh	r2, [r3, #0]
 8010f44:	b11a      	cbz	r2, 8010f4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010f46:	1c9a      	adds	r2, r3, #2
 8010f48:	6142      	str	r2, [r0, #20]
 8010f4a:	8818      	ldrh	r0, [r3, #0]
 8010f4c:	bd30      	pop	{r4, r5, pc}
 8010f4e:	7605      	strb	r5, [r0, #24]
 8010f50:	6843      	ldr	r3, [r0, #4]
 8010f52:	8819      	ldrh	r1, [r3, #0]
 8010f54:	b199      	cbz	r1, 8010f7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010f56:	1c9a      	adds	r2, r3, #2
 8010f58:	2902      	cmp	r1, #2
 8010f5a:	6042      	str	r2, [r0, #4]
 8010f5c:	d1f5      	bne.n	8010f4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010f5e:	7c03      	ldrb	r3, [r0, #16]
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d8e5      	bhi.n	8010f30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010f64:	1c5a      	adds	r2, r3, #1
 8010f66:	3302      	adds	r3, #2
 8010f68:	7402      	strb	r2, [r0, #16]
 8010f6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010f6e:	6143      	str	r3, [r0, #20]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0dd      	beq.n	8010f30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d0da      	beq.n	8010f30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010f7a:	7604      	strb	r4, [r0, #24]
 8010f7c:	e7d8      	b.n	8010f30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010f7e:	2000      	movs	r0, #0
 8010f80:	e7e4      	b.n	8010f4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010f82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8010f82:	6001      	str	r1, [r0, #0]
 8010f84:	2100      	movs	r1, #0
 8010f86:	b430      	push	{r4, r5}
 8010f88:	6041      	str	r1, [r0, #4]
 8010f8a:	6815      	ldr	r5, [r2, #0]
 8010f8c:	6085      	str	r5, [r0, #8]
 8010f8e:	6852      	ldr	r2, [r2, #4]
 8010f90:	6443      	str	r3, [r0, #68]	@ 0x44
 8010f92:	9b02      	ldr	r3, [sp, #8]
 8010f94:	60c2      	str	r2, [r0, #12]
 8010f96:	7401      	strb	r1, [r0, #16]
 8010f98:	6141      	str	r1, [r0, #20]
 8010f9a:	7601      	strb	r1, [r0, #24]
 8010f9c:	8701      	strh	r1, [r0, #56]	@ 0x38
 8010f9e:	8401      	strh	r1, [r0, #32]
 8010fa0:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8010fa4:	6483      	str	r3, [r0, #72]	@ 0x48
 8010fa6:	bc30      	pop	{r4, r5}
 8010fa8:	f7f9 bcfe 	b.w	800a9a8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08010fac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fae:	4605      	mov	r5, r0
 8010fb0:	4608      	mov	r0, r1
 8010fb2:	b1f1      	cbz	r1, 8010ff2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8010fb4:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8010fb8:	460b      	mov	r3, r1
 8010fba:	f101 0708 	add.w	r7, r1, #8
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	6818      	ldr	r0, [r3, #0]
 8010fc2:	3308      	adds	r3, #8
 8010fc4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010fc8:	4626      	mov	r6, r4
 8010fca:	42bb      	cmp	r3, r7
 8010fcc:	c603      	stmia	r6!, {r0, r1}
 8010fce:	4634      	mov	r4, r6
 8010fd0:	d1f6      	bne.n	8010fc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	6030      	str	r0, [r6, #0]
 8010fd6:	4610      	mov	r0, r2
 8010fd8:	889b      	ldrh	r3, [r3, #4]
 8010fda:	80b3      	strh	r3, [r6, #4]
 8010fdc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8010fe0:	015b      	lsls	r3, r3, #5
 8010fe2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8010fe6:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8010fea:	430b      	orrs	r3, r1
 8010fec:	425b      	negs	r3, r3
 8010fee:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8010ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ff4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010ff4:	b538      	push	{r3, r4, r5, lr}
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	6811      	ldr	r1, [r2, #0]
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	68cd      	ldr	r5, [r1, #12]
 8010ffe:	4619      	mov	r1, r3
 8011000:	47a8      	blx	r5
 8011002:	2800      	cmp	r0, #0
 8011004:	bf08      	it	eq
 8011006:	4620      	moveq	r0, r4
 8011008:	bd38      	pop	{r3, r4, r5, pc}
	...

0801100c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011010:	468c      	mov	ip, r1
 8011012:	4604      	mov	r4, r0
 8011014:	4615      	mov	r5, r2
 8011016:	b942      	cbnz	r2, 801102a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8011018:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801101c:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8011020:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8011024:	4628      	mov	r0, r5
 8011026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102a:	7b50      	ldrb	r0, [r2, #13]
 801102c:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8011030:	8893      	ldrh	r3, [r2, #4]
 8011032:	0106      	lsls	r6, r0, #4
 8011034:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8011038:	79ee      	ldrb	r6, [r5, #7]
 801103a:	4316      	orrs	r6, r2
 801103c:	185a      	adds	r2, r3, r1
 801103e:	b291      	uxth	r1, r2
 8011040:	b2b7      	uxth	r7, r6
 8011042:	291d      	cmp	r1, #29
 8011044:	d87f      	bhi.n	8011146 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8011046:	2201      	movs	r2, #1
 8011048:	10f6      	asrs	r6, r6, #3
 801104a:	408a      	lsls	r2, r1
 801104c:	4974      	ldr	r1, [pc, #464]	@ (8011220 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801104e:	420a      	tst	r2, r1
 8011050:	d12e      	bne.n	80110b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8011052:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8011056:	d076      	beq.n	8011146 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8011058:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801105c:	462b      	mov	r3, r5
 801105e:	f105 0e08 	add.w	lr, r5, #8
 8011062:	4615      	mov	r5, r2
 8011064:	6818      	ldr	r0, [r3, #0]
 8011066:	3308      	adds	r3, #8
 8011068:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801106c:	4694      	mov	ip, r2
 801106e:	4573      	cmp	r3, lr
 8011070:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011074:	4662      	mov	r2, ip
 8011076:	d1f5      	bne.n	8011064 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	f8cc 0000 	str.w	r0, [ip]
 801107e:	889b      	ldrh	r3, [r3, #4]
 8011080:	f8ac 3004 	strh.w	r3, [ip, #4]
 8011084:	b2b3      	uxth	r3, r6
 8011086:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801108a:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801108e:	1aca      	subs	r2, r1, r3
 8011090:	1bcf      	subs	r7, r1, r7
 8011092:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8011096:	b292      	uxth	r2, r2
 8011098:	1afb      	subs	r3, r7, r3
 801109a:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801109e:	10d2      	asrs	r2, r2, #3
 80110a0:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80110a4:	4302      	orrs	r2, r0
 80110a6:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 80110aa:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80110ae:	e7b9      	b.n	8011024 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80110b0:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 80110b4:	462b      	mov	r3, r5
 80110b6:	f105 0808 	add.w	r8, r5, #8
 80110ba:	4615      	mov	r5, r2
 80110bc:	6818      	ldr	r0, [r3, #0]
 80110be:	3308      	adds	r3, #8
 80110c0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80110c4:	4696      	mov	lr, r2
 80110c6:	4543      	cmp	r3, r8
 80110c8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80110cc:	4672      	mov	r2, lr
 80110ce:	d1f5      	bne.n	80110bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80110d0:	6818      	ldr	r0, [r3, #0]
 80110d2:	f8ce 0000 	str.w	r0, [lr]
 80110d6:	889b      	ldrh	r3, [r3, #4]
 80110d8:	f8ae 3004 	strh.w	r3, [lr, #4]
 80110dc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80110de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80110e2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80110e4:	f640 6333 	movw	r3, #3635	@ 0xe33
 80110e8:	4299      	cmp	r1, r3
 80110ea:	d111      	bne.n	8011110 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 80110ec:	f8dc 3000 	ldr.w	r3, [ip]
 80110f0:	4660      	mov	r0, ip
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	4798      	blx	r3
 80110f6:	7b41      	ldrb	r1, [r0, #13]
 80110f8:	00cb      	lsls	r3, r1, #3
 80110fa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80110fe:	7a03      	ldrb	r3, [r0, #8]
 8011100:	4313      	orrs	r3, r2
 8011102:	064a      	lsls	r2, r1, #25
 8011104:	bf44      	itt	mi
 8011106:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801110a:	b21b      	sxthmi	r3, r3
 801110c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8011110:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8011114:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8011118:	443b      	add	r3, r7
 801111a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801111e:	4433      	add	r3, r6
 8011120:	b29b      	uxth	r3, r3
 8011122:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8011126:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801112a:	10db      	asrs	r3, r3, #3
 801112c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011130:	4313      	orrs	r3, r2
 8011132:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8011136:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801113a:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801113e:	1a9b      	subs	r3, r3, r2
 8011140:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8011144:	e76e      	b.n	8011024 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8011146:	f023 0204 	bic.w	r2, r3, #4
 801114a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801114e:	428a      	cmp	r2, r1
 8011150:	d003      	beq.n	801115a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8011152:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8011156:	4293      	cmp	r3, r2
 8011158:	d120      	bne.n	801119c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801115a:	3b01      	subs	r3, #1
 801115c:	4662      	mov	r2, ip
 801115e:	4629      	mov	r1, r5
 8011160:	4620      	mov	r0, r4
 8011162:	b29b      	uxth	r3, r3
 8011164:	f7ff ff46 	bl	8010ff4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011168:	7b41      	ldrb	r1, [r0, #13]
 801116a:	00cb      	lsls	r3, r1, #3
 801116c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011170:	7a03      	ldrb	r3, [r0, #8]
 8011172:	0648      	lsls	r0, r1, #25
 8011174:	ea43 0302 	orr.w	r3, r3, r2
 8011178:	bf44      	itt	mi
 801117a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801117e:	b21b      	sxthmi	r3, r3
 8011180:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8011184:	7b6b      	ldrb	r3, [r5, #13]
 8011186:	7aaa      	ldrb	r2, [r5, #10]
 8011188:	005b      	lsls	r3, r3, #1
 801118a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801118e:	4313      	orrs	r3, r2
 8011190:	115a      	asrs	r2, r3, #5
 8011192:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8011196:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801119a:	e032      	b.n	8011202 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801119c:	00c2      	lsls	r2, r0, #3
 801119e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80111a2:	7a2a      	ldrb	r2, [r5, #8]
 80111a4:	430a      	orrs	r2, r1
 80111a6:	0641      	lsls	r1, r0, #25
 80111a8:	f640 6109 	movw	r1, #3593	@ 0xe09
 80111ac:	bf44      	itt	mi
 80111ae:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80111b2:	b212      	sxthmi	r2, r2
 80111b4:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80111b8:	f023 0210 	bic.w	r2, r3, #16
 80111bc:	428a      	cmp	r2, r1
 80111be:	d003      	beq.n	80111c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 80111c0:	f640 6213 	movw	r2, #3603	@ 0xe13
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d129      	bne.n	801121c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 80111c8:	7b6e      	ldrb	r6, [r5, #13]
 80111ca:	4629      	mov	r1, r5
 80111cc:	4620      	mov	r0, r4
 80111ce:	0076      	lsls	r6, r6, #1
 80111d0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80111d4:	7aae      	ldrb	r6, [r5, #10]
 80111d6:	4316      	orrs	r6, r2
 80111d8:	f640 6213 	movw	r2, #3603	@ 0xe13
 80111dc:	4293      	cmp	r3, r2
 80111de:	4662      	mov	r2, ip
 80111e0:	bf16      	itet	ne
 80111e2:	f103 33ff 	addne.w	r3, r3, #4294967295
 80111e6:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 80111ea:	b29b      	uxthne	r3, r3
 80111ec:	f7ff ff02 	bl	8010ff4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80111f0:	7b43      	ldrb	r3, [r0, #13]
 80111f2:	7a82      	ldrb	r2, [r0, #10]
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111fa:	4313      	orrs	r3, r2
 80111fc:	1af6      	subs	r6, r6, r3
 80111fe:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8011202:	7b69      	ldrb	r1, [r5, #13]
 8011204:	00cb      	lsls	r3, r1, #3
 8011206:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801120a:	7a2b      	ldrb	r3, [r5, #8]
 801120c:	4313      	orrs	r3, r2
 801120e:	064a      	lsls	r2, r1, #25
 8011210:	bf44      	itt	mi
 8011212:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011216:	b21b      	sxthmi	r3, r3
 8011218:	1bdb      	subs	r3, r3, r7
 801121a:	e746      	b.n	80110aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801121c:	2300      	movs	r3, #0
 801121e:	e7ba      	b.n	8011196 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 8011220:	3fc00079 	.word	0x3fc00079

08011224 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8011224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011228:	4604      	mov	r4, r0
 801122a:	b942      	cbnz	r2, 801123e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801122c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011230:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8011234:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8011238:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801123c:	e047      	b.n	80112ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801123e:	7b51      	ldrb	r1, [r2, #13]
 8011240:	8893      	ldrh	r3, [r2, #4]
 8011242:	010d      	lsls	r5, r1, #4
 8011244:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8011248:	79d5      	ldrb	r5, [r2, #7]
 801124a:	4305      	orrs	r5, r0
 801124c:	2d04      	cmp	r5, #4
 801124e:	bfcc      	ite	gt
 8011250:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8011254:	f04f 0e01 	movle.w	lr, #1
 8011258:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801125c:	f200 80ab 	bhi.w	80113b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8011260:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8011264:	4283      	cmp	r3, r0
 8011266:	d216      	bcs.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011268:	f240 605b 	movw	r0, #1627	@ 0x65b
 801126c:	4283      	cmp	r3, r0
 801126e:	d859      	bhi.n	8011324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8011270:	f240 6057 	movw	r0, #1623	@ 0x657
 8011274:	4283      	cmp	r3, r0
 8011276:	d20e      	bcs.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011278:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801127c:	d24a      	bcs.n	8011314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801127e:	f240 604e 	movw	r0, #1614	@ 0x64e
 8011282:	4283      	cmp	r3, r0
 8011284:	d207      	bcs.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011286:	f240 601a 	movw	r0, #1562	@ 0x61a
 801128a:	4283      	cmp	r3, r0
 801128c:	d02a      	beq.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801128e:	d821      	bhi.n	80112d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8011290:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8011294:	d35b      	bcc.n	801134e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011296:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801129a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801129e:	f040 80d0 	bne.w	8011442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80112a2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80112a6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80112aa:	f040 80ca 	bne.w	8011442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80112ae:	00cb      	lsls	r3, r1, #3
 80112b0:	0649      	lsls	r1, r1, #25
 80112b2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80112b6:	7a13      	ldrb	r3, [r2, #8]
 80112b8:	ea43 0300 	orr.w	r3, r3, r0
 80112bc:	bf44      	itt	mi
 80112be:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80112c2:	b21b      	sxthmi	r3, r3
 80112c4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80112c8:	1b5d      	subs	r5, r3, r5
 80112ca:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80112ce:	4610      	mov	r0, r2
 80112d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112d4:	f240 604b 	movw	r0, #1611	@ 0x64b
 80112d8:	4283      	cmp	r3, r0
 80112da:	d338      	bcc.n	801134e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80112dc:	f240 604c 	movw	r0, #1612	@ 0x64c
 80112e0:	4283      	cmp	r3, r0
 80112e2:	d9d8      	bls.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80112e4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 80112e8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 80112ec:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80112f0:	f040 80f3 	bne.w	80114da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80112f4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80112f8:	f040 80ef 	bne.w	80114da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80112fc:	00cb      	lsls	r3, r1, #3
 80112fe:	064e      	lsls	r6, r1, #25
 8011300:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8011304:	7a13      	ldrb	r3, [r2, #8]
 8011306:	ea43 0300 	orr.w	r3, r3, r0
 801130a:	bf44      	itt	mi
 801130c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011310:	b21b      	sxthmi	r3, r3
 8011312:	e7d9      	b.n	80112c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8011314:	f240 6054 	movw	r0, #1620	@ 0x654
 8011318:	4283      	cmp	r3, r0
 801131a:	d8e3      	bhi.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801131c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8011320:	d9e0      	bls.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011322:	e7b8      	b.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011324:	f240 6074 	movw	r0, #1652	@ 0x674
 8011328:	4283      	cmp	r3, r0
 801132a:	d0b4      	beq.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801132c:	d82d      	bhi.n	801138a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801132e:	f240 605e 	movw	r0, #1630	@ 0x65e
 8011332:	4283      	cmp	r3, r0
 8011334:	d804      	bhi.n	8011340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8011336:	f240 605d 	movw	r0, #1629	@ 0x65d
 801133a:	4283      	cmp	r3, r0
 801133c:	d3d2      	bcc.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801133e:	e7aa      	b.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011340:	f240 605f 	movw	r0, #1631	@ 0x65f
 8011344:	4283      	cmp	r3, r0
 8011346:	d0cd      	beq.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011348:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801134c:	d0a3      	beq.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801134e:	00cb      	lsls	r3, r1, #3
 8011350:	0649      	lsls	r1, r1, #25
 8011352:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8011356:	7a13      	ldrb	r3, [r2, #8]
 8011358:	ea43 0300 	orr.w	r3, r3, r0
 801135c:	bf44      	itt	mi
 801135e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011362:	b21b      	sxthmi	r3, r3
 8011364:	1b5d      	subs	r5, r3, r5
 8011366:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801136a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801136e:	7b53      	ldrb	r3, [r2, #13]
 8011370:	015b      	lsls	r3, r3, #5
 8011372:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8011376:	7993      	ldrb	r3, [r2, #6]
 8011378:	430b      	orrs	r3, r1
 801137a:	2105      	movs	r1, #5
 801137c:	005b      	lsls	r3, r3, #1
 801137e:	fb93 f3f1 	sdiv	r3, r3, r1
 8011382:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8011386:	440b      	add	r3, r1
 8011388:	e756      	b.n	8011238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801138a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801138e:	4283      	cmp	r3, r0
 8011390:	d809      	bhi.n	80113a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8011392:	f240 60df 	movw	r0, #1759	@ 0x6df
 8011396:	4283      	cmp	r3, r0
 8011398:	f4bf af7d 	bcs.w	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801139c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80113a0:	2b05      	cmp	r3, #5
 80113a2:	d8d4      	bhi.n	801134e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80113a4:	e777      	b.n	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80113a6:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80113aa:	4283      	cmp	r3, r0
 80113ac:	d09a      	beq.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80113ae:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80113b2:	4283      	cmp	r3, r0
 80113b4:	e7ca      	b.n	801134c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80113b6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80113ba:	d22b      	bcs.n	8011414 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80113bc:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80113c0:	4283      	cmp	r3, r0
 80113c2:	d28f      	bcs.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80113c4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80113c8:	4283      	cmp	r3, r0
 80113ca:	d816      	bhi.n	80113fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80113cc:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80113d0:	4283      	cmp	r3, r0
 80113d2:	f4bf af60 	bcs.w	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80113d6:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 80113da:	4283      	cmp	r3, r0
 80113dc:	d80a      	bhi.n	80113f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80113de:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 80113e2:	4283      	cmp	r3, r0
 80113e4:	f4bf af57 	bcs.w	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80113e8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 80113ec:	4283      	cmp	r3, r0
 80113ee:	f43f af79 	beq.w	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80113f2:	e7ac      	b.n	801134e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80113f4:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 80113f8:	e7f8      	b.n	80113ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80113fa:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80113fe:	4283      	cmp	r3, r0
 8011400:	d802      	bhi.n	8011408 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8011402:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8011406:	e798      	b.n	801133a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8011408:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801140c:	4283      	cmp	r3, r0
 801140e:	f47f af42 	bne.w	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011412:	e767      	b.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011414:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8011418:	4283      	cmp	r3, r0
 801141a:	f43f af63 	beq.w	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801141e:	d802      	bhi.n	8011426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8011420:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8011424:	e7f2      	b.n	801140c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8011426:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801142a:	4283      	cmp	r3, r0
 801142c:	d805      	bhi.n	801143a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801142e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8011432:	4283      	cmp	r3, r0
 8011434:	f4ff af2f 	bcc.w	8011296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011438:	e754      	b.n	80112e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801143a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801143e:	4283      	cmp	r3, r0
 8011440:	e7af      	b.n	80113a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8011442:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8011446:	4617      	mov	r7, r2
 8011448:	f102 0808 	add.w	r8, r2, #8
 801144c:	4666      	mov	r6, ip
 801144e:	6838      	ldr	r0, [r7, #0]
 8011450:	3708      	adds	r7, #8
 8011452:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011456:	46e6      	mov	lr, ip
 8011458:	4547      	cmp	r7, r8
 801145a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801145e:	46f4      	mov	ip, lr
 8011460:	d1f5      	bne.n	801144e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8011462:	6838      	ldr	r0, [r7, #0]
 8011464:	f8ce 0000 	str.w	r0, [lr]
 8011468:	88b9      	ldrh	r1, [r7, #4]
 801146a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801146e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8011472:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8011476:	d009      	beq.n	801148c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8011478:	7b51      	ldrb	r1, [r2, #13]
 801147a:	7992      	ldrb	r2, [r2, #6]
 801147c:	0149      	lsls	r1, r1, #5
 801147e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8011482:	4311      	orrs	r1, r2
 8011484:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011488:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801148c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8011490:	b2ad      	uxth	r5, r5
 8011492:	d00d      	beq.n	80114b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8011494:	442b      	add	r3, r5
 8011496:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801149a:	b29b      	uxth	r3, r3
 801149c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80114a0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80114a4:	10db      	asrs	r3, r3, #3
 80114a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80114aa:	4313      	orrs	r3, r2
 80114ac:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80114b0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80114b4:	00cb      	lsls	r3, r1, #3
 80114b6:	064f      	lsls	r7, r1, #25
 80114b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80114bc:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80114c0:	ea43 0302 	orr.w	r3, r3, r2
 80114c4:	bf44      	itt	mi
 80114c6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80114ca:	b21b      	sxthmi	r3, r3
 80114cc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80114d0:	1b5b      	subs	r3, r3, r5
 80114d2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80114d6:	4632      	mov	r2, r6
 80114d8:	e6f9      	b.n	80112ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80114da:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80114de:	4617      	mov	r7, r2
 80114e0:	f102 0908 	add.w	r9, r2, #8
 80114e4:	4666      	mov	r6, ip
 80114e6:	6838      	ldr	r0, [r7, #0]
 80114e8:	3708      	adds	r7, #8
 80114ea:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80114ee:	46e0      	mov	r8, ip
 80114f0:	454f      	cmp	r7, r9
 80114f2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80114f6:	46c4      	mov	ip, r8
 80114f8:	d1f5      	bne.n	80114e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80114fa:	6838      	ldr	r0, [r7, #0]
 80114fc:	f8c8 0000 	str.w	r0, [r8]
 8011500:	88b9      	ldrh	r1, [r7, #4]
 8011502:	f8a8 1004 	strh.w	r1, [r8, #4]
 8011506:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801150a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801150e:	d009      	beq.n	8011524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8011510:	7b51      	ldrb	r1, [r2, #13]
 8011512:	7992      	ldrb	r2, [r2, #6]
 8011514:	0149      	lsls	r1, r1, #5
 8011516:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801151a:	4311      	orrs	r1, r2
 801151c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011520:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8011524:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8011528:	d00e      	beq.n	8011548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801152a:	eba3 030e 	sub.w	r3, r3, lr
 801152e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8011532:	b29b      	uxth	r3, r3
 8011534:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011538:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801153c:	10db      	asrs	r3, r3, #3
 801153e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011542:	4313      	orrs	r3, r2
 8011544:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8011548:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801154c:	00cb      	lsls	r3, r1, #3
 801154e:	0648      	lsls	r0, r1, #25
 8011550:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011554:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8011558:	ea43 0302 	orr.w	r3, r3, r2
 801155c:	bf44      	itt	mi
 801155e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011562:	b21b      	sxthmi	r3, r3
 8011564:	1b5d      	subs	r5, r3, r5
 8011566:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801156a:	e7b4      	b.n	80114d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801156c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011570:	461e      	mov	r6, r3
 8011572:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8011574:	4604      	mov	r4, r0
 8011576:	4617      	mov	r7, r2
 8011578:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801157c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8011580:	f7f9 f96c 	bl	800a85c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011584:	4605      	mov	r5, r0
 8011586:	b918      	cbnz	r0, 8011590 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8011588:	6030      	str	r0, [r6, #0]
 801158a:	4628      	mov	r0, r5
 801158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	4601      	mov	r1, r0
 8011594:	4638      	mov	r0, r7
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	4798      	blx	r3
 801159a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801159e:	4602      	mov	r2, r0
 80115a0:	6030      	str	r0, [r6, #0]
 80115a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80115a6:	d213      	bcs.n	80115d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80115a8:	4643      	mov	r3, r8
 80115aa:	4639      	mov	r1, r7
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7ff fe39 	bl	8011224 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80115b2:	6030      	str	r0, [r6, #0]
 80115b4:	6833      	ldr	r3, [r6, #0]
 80115b6:	b143      	cbz	r3, 80115ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80115b8:	7b5a      	ldrb	r2, [r3, #13]
 80115ba:	7a9b      	ldrb	r3, [r3, #10]
 80115bc:	0052      	lsls	r2, r2, #1
 80115be:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80115c2:	4313      	orrs	r3, r2
 80115c4:	bf0c      	ite	eq
 80115c6:	2301      	moveq	r3, #1
 80115c8:	2300      	movne	r3, #0
 80115ca:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80115ce:	e7dc      	b.n	801158a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80115d0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80115d8:	d804      	bhi.n	80115e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80115da:	4639      	mov	r1, r7
 80115dc:	4620      	mov	r0, r4
 80115de:	f7ff fd15 	bl	801100c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80115e2:	e7e6      	b.n	80115b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80115e4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d0e3      	beq.n	80115b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80115ec:	f640 1302 	movw	r3, #2306	@ 0x902
 80115f0:	429d      	cmp	r5, r3
 80115f2:	d1df      	bne.n	80115b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80115f4:	4601      	mov	r1, r0
 80115f6:	4620      	mov	r0, r4
 80115f8:	f7ff fcd8 	bl	8010fac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80115fc:	e7d9      	b.n	80115b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080115fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80115fe:	b510      	push	{r4, lr}
 8011600:	4604      	mov	r4, r0
 8011602:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8011606:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8011608:	b1e1      	cbz	r1, 8011644 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801160a:	2b0a      	cmp	r3, #10
 801160c:	d02d      	beq.n	801166a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801160e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8011610:	3901      	subs	r1, #1
 8011612:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8011616:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8011618:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801161c:	1c51      	adds	r1, r2, #1
 801161e:	b289      	uxth	r1, r1
 8011620:	2901      	cmp	r1, #1
 8011622:	bf8a      	itet	hi
 8011624:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011628:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801162a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801162c:	1c5a      	adds	r2, r3, #1
 801162e:	8722      	strh	r2, [r4, #56]	@ 0x38
 8011630:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011632:	4413      	add	r3, r2
 8011634:	b29b      	uxth	r3, r3
 8011636:	2b09      	cmp	r3, #9
 8011638:	bf88      	it	hi
 801163a:	3b0a      	subhi	r3, #10
 801163c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011640:	8458      	strh	r0, [r3, #34]	@ 0x22
 8011642:	e7de      	b.n	8011602 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8011644:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8011646:	2b0a      	cmp	r3, #10
 8011648:	d00f      	beq.n	801166a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801164a:	4620      	mov	r0, r4
 801164c:	f7ff fc6d 	bl	8010f2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8011650:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8011652:	1c5a      	adds	r2, r3, #1
 8011654:	8722      	strh	r2, [r4, #56]	@ 0x38
 8011656:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011658:	4413      	add	r3, r2
 801165a:	b29b      	uxth	r3, r3
 801165c:	2b09      	cmp	r3, #9
 801165e:	bf88      	it	hi
 8011660:	3b0a      	subhi	r3, #10
 8011662:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011666:	8458      	strh	r0, [r3, #34]	@ 0x22
 8011668:	e7ec      	b.n	8011644 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801166a:	bd10      	pop	{r4, pc}

0801166c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8011670:	4604      	mov	r4, r0
 8011672:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8011676:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8011678:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801167a:	3a01      	subs	r2, #1
 801167c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801167e:	1c5a      	adds	r2, r3, #1
 8011680:	b292      	uxth	r2, r2
 8011682:	2a09      	cmp	r2, #9
 8011684:	bf8a      	itet	hi
 8011686:	3b09      	subhi	r3, #9
 8011688:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801168a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801168c:	f7ff ffb7 	bl	80115fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011690:	8c23      	ldrh	r3, [r4, #32]
 8011692:	2b01      	cmp	r3, #1
 8011694:	bf9c      	itt	ls
 8011696:	3301      	addls	r3, #1
 8011698:	8423      	strhls	r3, [r4, #32]
 801169a:	8be3      	ldrh	r3, [r4, #30]
 801169c:	b90b      	cbnz	r3, 80116a2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801169e:	2302      	movs	r3, #2
 80116a0:	83e3      	strh	r3, [r4, #30]
 80116a2:	8be3      	ldrh	r3, [r4, #30]
 80116a4:	4628      	mov	r0, r5
 80116a6:	3b01      	subs	r3, #1
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	83e3      	strh	r3, [r4, #30]
 80116ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80116b0:	8365      	strh	r5, [r4, #26]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}

080116b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80116b4:	428a      	cmp	r2, r1
 80116b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ba:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80116bc:	d932      	bls.n	8011724 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80116be:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80116c0:	1a54      	subs	r4, r2, r1
 80116c2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80116c6:	19ee      	adds	r6, r5, r7
 80116c8:	fa1f fe84 	uxth.w	lr, r4
 80116cc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80116d0:	3e01      	subs	r6, #1
 80116d2:	b2b4      	uxth	r4, r6
 80116d4:	eba4 090e 	sub.w	r9, r4, lr
 80116d8:	fa1f f989 	uxth.w	r9, r9
 80116dc:	2c09      	cmp	r4, #9
 80116de:	4626      	mov	r6, r4
 80116e0:	bf88      	it	hi
 80116e2:	f1a4 060a 	subhi.w	r6, r4, #10
 80116e6:	f1bc 0f00 	cmp.w	ip, #0
 80116ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80116ee:	bf08      	it	eq
 80116f0:	f04f 0c02 	moveq.w	ip, #2
 80116f4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80116f8:	b2a4      	uxth	r4, r4
 80116fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116fe:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8011702:	454c      	cmp	r4, r9
 8011704:	fa1f fc8c 	uxth.w	ip, ip
 8011708:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801170c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8011710:	d1e4      	bne.n	80116dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8011712:	eba5 050e 	sub.w	r5, r5, lr
 8011716:	eb0e 0408 	add.w	r4, lr, r8
 801171a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801171e:	8705      	strh	r5, [r0, #56]	@ 0x38
 8011720:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8011724:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8011726:	250a      	movs	r5, #10
 8011728:	1a64      	subs	r4, r4, r1
 801172a:	4439      	add	r1, r7
 801172c:	b289      	uxth	r1, r1
 801172e:	8704      	strh	r4, [r0, #56]	@ 0x38
 8011730:	2909      	cmp	r1, #9
 8011732:	bf88      	it	hi
 8011734:	390a      	subhi	r1, #10
 8011736:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8011738:	b18a      	cbz	r2, 801175e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801173a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801173c:	3a01      	subs	r2, #1
 801173e:	3101      	adds	r1, #1
 8011740:	b292      	uxth	r2, r2
 8011742:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8011746:	8701      	strh	r1, [r0, #56]	@ 0x38
 8011748:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801174a:	b901      	cbnz	r1, 801174e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801174c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801174e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8011750:	3901      	subs	r1, #1
 8011752:	b289      	uxth	r1, r1
 8011754:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8011756:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801175a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801175c:	e7ec      	b.n	8011738 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801175e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011762:	f7ff bf4c 	b.w	80115fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08011766 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8011766:	b570      	push	{r4, r5, r6, lr}
 8011768:	2500      	movs	r5, #0
 801176a:	4295      	cmp	r5, r2
 801176c:	d011      	beq.n	8011792 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801176e:	8bc4      	ldrh	r4, [r0, #30]
 8011770:	f831 6b02 	ldrh.w	r6, [r1], #2
 8011774:	4414      	add	r4, r2
 8011776:	3c01      	subs	r4, #1
 8011778:	1b64      	subs	r4, r4, r5
 801177a:	b2a4      	uxth	r4, r4
 801177c:	2c01      	cmp	r4, #1
 801177e:	bf88      	it	hi
 8011780:	3c02      	subhi	r4, #2
 8011782:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011786:	8b64      	ldrh	r4, [r4, #26]
 8011788:	42b4      	cmp	r4, r6
 801178a:	d117      	bne.n	80117bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801178c:	3501      	adds	r5, #1
 801178e:	b2ad      	uxth	r5, r5
 8011790:	e7eb      	b.n	801176a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8011792:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011796:	2400      	movs	r4, #0
 8011798:	4413      	add	r3, r2
 801179a:	b2a2      	uxth	r2, r4
 801179c:	429a      	cmp	r2, r3
 801179e:	da0f      	bge.n	80117c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80117a0:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80117a2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80117a6:	3401      	adds	r4, #1
 80117a8:	4432      	add	r2, r6
 80117aa:	b292      	uxth	r2, r2
 80117ac:	2a09      	cmp	r2, #9
 80117ae:	bf88      	it	hi
 80117b0:	3a0a      	subhi	r2, #10
 80117b2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80117b6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80117b8:	42aa      	cmp	r2, r5
 80117ba:	d0ee      	beq.n	801179a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80117bc:	2000      	movs	r0, #0
 80117be:	bd70      	pop	{r4, r5, r6, pc}
 80117c0:	2001      	movs	r0, #1
 80117c2:	e7fc      	b.n	80117be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080117c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80117c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c8:	4605      	mov	r5, r0
 80117ca:	4616      	mov	r6, r2
 80117cc:	1c8c      	adds	r4, r1, #2
 80117ce:	8809      	ldrh	r1, [r1, #0]
 80117d0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80117d4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80117d8:	42b3      	cmp	r3, r6
 80117da:	d124      	bne.n	8011826 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80117dc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80117e0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80117e4:	f001 070f 	and.w	r7, r1, #15
 80117e8:	4652      	mov	r2, sl
 80117ea:	f8cd 8000 	str.w	r8, [sp]
 80117ee:	464b      	mov	r3, r9
 80117f0:	4621      	mov	r1, r4
 80117f2:	4628      	mov	r0, r5
 80117f4:	f7ff ffb7 	bl	8011766 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80117f8:	4683      	mov	fp, r0
 80117fa:	b168      	cbz	r0, 8011818 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80117fc:	eb0a 0109 	add.w	r1, sl, r9
 8011800:	463a      	mov	r2, r7
 8011802:	4628      	mov	r0, r5
 8011804:	4441      	add	r1, r8
 8011806:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801180a:	4649      	mov	r1, r9
 801180c:	f7ff ff52 	bl	80116b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8011810:	4658      	mov	r0, fp
 8011812:	b003      	add	sp, #12
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011818:	eb07 010a 	add.w	r1, r7, sl
 801181c:	4449      	add	r1, r9
 801181e:	4441      	add	r1, r8
 8011820:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8011824:	e7d2      	b.n	80117cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8011826:	f04f 0b00 	mov.w	fp, #0
 801182a:	e7f1      	b.n	8011810 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801182c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801182c:	b570      	push	{r4, r5, r6, lr}
 801182e:	8810      	ldrh	r0, [r2, #0]
 8011830:	4298      	cmp	r0, r3
 8011832:	d817      	bhi.n	8011864 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8011834:	1e48      	subs	r0, r1, #1
 8011836:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801183a:	4298      	cmp	r0, r3
 801183c:	d312      	bcc.n	8011864 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801183e:	2400      	movs	r4, #0
 8011840:	428c      	cmp	r4, r1
 8011842:	d20f      	bcs.n	8011864 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8011844:	1860      	adds	r0, r4, r1
 8011846:	1040      	asrs	r0, r0, #1
 8011848:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801184c:	0085      	lsls	r5, r0, #2
 801184e:	42b3      	cmp	r3, r6
 8011850:	d902      	bls.n	8011858 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8011852:	3001      	adds	r0, #1
 8011854:	b284      	uxth	r4, r0
 8011856:	e7f3      	b.n	8011840 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8011858:	d201      	bcs.n	801185e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801185a:	b281      	uxth	r1, r0
 801185c:	e7f0      	b.n	8011840 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801185e:	442a      	add	r2, r5
 8011860:	8850      	ldrh	r0, [r2, #2]
 8011862:	bd70      	pop	{r4, r5, r6, pc}
 8011864:	2000      	movs	r0, #0
 8011866:	e7fc      	b.n	8011862 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08011868 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8011868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801186c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801186e:	4604      	mov	r4, r0
 8011870:	260b      	movs	r6, #11
 8011872:	886f      	ldrh	r7, [r5, #2]
 8011874:	087f      	lsrs	r7, r7, #1
 8011876:	3e01      	subs	r6, #1
 8011878:	d013      	beq.n	80118a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801187a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801187c:	462a      	mov	r2, r5
 801187e:	4639      	mov	r1, r7
 8011880:	4620      	mov	r0, r4
 8011882:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011886:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801188a:	4643      	mov	r3, r8
 801188c:	f7ff ffce 	bl	801182c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8011890:	b138      	cbz	r0, 80118a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8011892:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8011896:	4642      	mov	r2, r8
 8011898:	4620      	mov	r0, r4
 801189a:	f7ff ff93 	bl	80117c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d1e9      	bne.n	8011876 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80118a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080118a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80118a8:	b570      	push	{r4, r5, r6, lr}
 80118aa:	694a      	ldr	r2, [r1, #20]
 80118ac:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80118ae:	684b      	ldr	r3, [r1, #4]
 80118b0:	1b54      	subs	r4, r2, r5
 80118b2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80118b4:	f000 8106 	beq.w	8011ac4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80118b8:	1b9b      	subs	r3, r3, r6
 80118ba:	d003      	beq.n	80118c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80118bc:	4363      	muls	r3, r4
 80118be:	2210      	movs	r2, #16
 80118c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80118c4:	680c      	ldr	r4, [r1, #0]
 80118c6:	698a      	ldr	r2, [r1, #24]
 80118c8:	1b65      	subs	r5, r4, r5
 80118ca:	f000 80fd 	beq.w	8011ac8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80118ce:	1b92      	subs	r2, r2, r6
 80118d0:	d003      	beq.n	80118da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80118d2:	436a      	muls	r2, r5
 80118d4:	2410      	movs	r4, #16
 80118d6:	fb92 f2f4 	sdiv	r2, r2, r4
 80118da:	1a9b      	subs	r3, r3, r2
 80118dc:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8011b04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80118e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80118e4:	460a      	mov	r2, r1
 80118e6:	ee07 3a90 	vmov	s15, r3
 80118ea:	f100 040c 	add.w	r4, r0, #12
 80118ee:	4603      	mov	r3, r0
 80118f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118f4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80118f8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80118fc:	eeb1 6a43 	vneg.f32	s12, s6
 8011900:	edd2 7a02 	vldr	s15, [r2, #8]
 8011904:	3214      	adds	r2, #20
 8011906:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801190a:	ece3 6a01 	vstmia	r3!, {s13}
 801190e:	429c      	cmp	r4, r3
 8011910:	ed52 7a02 	vldr	s15, [r2, #-8]
 8011914:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011918:	edc3 7a02 	vstr	s15, [r3, #8]
 801191c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8011920:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011924:	edc3 7a05 	vstr	s15, [r3, #20]
 8011928:	d1ea      	bne.n	8011900 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801192a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801192c:	698b      	ldr	r3, [r1, #24]
 801192e:	edd0 4a02 	vldr	s9, [r0, #8]
 8011932:	1a9b      	subs	r3, r3, r2
 8011934:	edd0 3a00 	vldr	s7, [r0]
 8011938:	edd0 6a01 	vldr	s13, [r0, #4]
 801193c:	ee07 3a90 	vmov	s15, r3
 8011940:	684b      	ldr	r3, [r1, #4]
 8011942:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8011946:	ed90 5a05 	vldr	s10, [r0, #20]
 801194a:	1a9b      	subs	r3, r3, r2
 801194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011950:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8011954:	ed90 2a03 	vldr	s4, [r0, #12]
 8011958:	ee07 3a10 	vmov	s14, r3
 801195c:	edd0 5a04 	vldr	s11, [r0, #16]
 8011960:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011964:	ed90 1a07 	vldr	s2, [r0, #28]
 8011968:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801196c:	edd0 2a06 	vldr	s5, [r0, #24]
 8011970:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8011974:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8011978:	ee27 7a04 	vmul.f32	s14, s14, s8
 801197c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8011980:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011984:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011988:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801198c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801198e:	694a      	ldr	r2, [r1, #20]
 8011990:	1b13      	subs	r3, r2, r4
 8011992:	ee07 3a10 	vmov	s14, r3
 8011996:	680b      	ldr	r3, [r1, #0]
 8011998:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801199c:	1b1b      	subs	r3, r3, r4
 801199e:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119a2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80119a6:	ee07 3a10 	vmov	s14, r3
 80119aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119b2:	eee6 4a87 	vfma.f32	s9, s13, s14
 80119b6:	ee64 4a86 	vmul.f32	s9, s9, s12
 80119ba:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80119be:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80119c0:	698b      	ldr	r3, [r1, #24]
 80119c2:	1a9b      	subs	r3, r3, r2
 80119c4:	ee06 3a90 	vmov	s13, r3
 80119c8:	684b      	ldr	r3, [r1, #4]
 80119ca:	1a9b      	subs	r3, r3, r2
 80119cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80119d0:	ee07 3a10 	vmov	s14, r3
 80119d4:	ee66 6a84 	vmul.f32	s13, s13, s8
 80119d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119dc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80119e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119e4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80119e8:	ee66 6a83 	vmul.f32	s13, s13, s6
 80119ec:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80119f0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80119f2:	694a      	ldr	r2, [r1, #20]
 80119f4:	1b13      	subs	r3, r2, r4
 80119f6:	ee07 3a10 	vmov	s14, r3
 80119fa:	680b      	ldr	r3, [r1, #0]
 80119fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a00:	1b1b      	subs	r3, r3, r4
 8011a02:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011a06:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8011a0a:	ee07 3a10 	vmov	s14, r3
 8011a0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a12:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011a16:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011a1a:	edd0 5a08 	vldr	s11, [r0, #32]
 8011a1e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8011a22:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8011a26:	ee25 5a06 	vmul.f32	s10, s10, s12
 8011a2a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8011a2e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8011a30:	698b      	ldr	r3, [r1, #24]
 8011a32:	1a9b      	subs	r3, r3, r2
 8011a34:	ee07 3a10 	vmov	s14, r3
 8011a38:	684b      	ldr	r3, [r1, #4]
 8011a3a:	1a9b      	subs	r3, r3, r2
 8011a3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a40:	ee01 3a90 	vmov	s3, r3
 8011a44:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011a48:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011a4c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8011a50:	ee61 1a84 	vmul.f32	s3, s3, s8
 8011a54:	eea1 7a21 	vfma.f32	s14, s2, s3
 8011a58:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011a5c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8011a60:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8011a62:	694a      	ldr	r2, [r1, #20]
 8011a64:	1b13      	subs	r3, r2, r4
 8011a66:	ee03 3a10 	vmov	s6, r3
 8011a6a:	680b      	ldr	r3, [r1, #0]
 8011a6c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011a70:	1b1b      	subs	r3, r3, r4
 8011a72:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011a76:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8011a7a:	ee03 3a10 	vmov	s6, r3
 8011a7e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011a82:	ee23 4a04 	vmul.f32	s8, s6, s8
 8011a86:	eee1 5a04 	vfma.f32	s11, s2, s8
 8011a8a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011a8e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8011a92:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8011a96:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8011a9a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa2:	dd13      	ble.n	8011acc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8011aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011aa8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8011aac:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8011aae:	eee3 7a87 	vfma.f32	s15, s7, s14
 8011ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aba:	dd15      	ble.n	8011ae8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8011abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ac0:	6403      	str	r3, [r0, #64]	@ 0x40
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}
 8011ac4:	4623      	mov	r3, r4
 8011ac6:	e6fd      	b.n	80118c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011ac8:	462a      	mov	r2, r5
 8011aca:	e706      	b.n	80118da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8011acc:	d502      	bpl.n	8011ad4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8011ace:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8011ad2:	e7e9      	b.n	8011aa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8011ad4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8011ad8:	eea3 2a85 	vfma.f32	s4, s7, s10
 8011adc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8011ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae4:	dade      	bge.n	8011aa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8011ae6:	e7f2      	b.n	8011ace <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8011ae8:	d502      	bpl.n	8011af0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8011aea:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8011aee:	e7e7      	b.n	8011ac0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8011af0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8011af4:	eee3 4a86 	vfma.f32	s9, s7, s12
 8011af8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8011afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b00:	dadc      	bge.n	8011abc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8011b02:	e7f2      	b.n	8011aea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8011b04:	3d800000 	.word	0x3d800000

08011b08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8011b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b0c:	2714      	movs	r7, #20
 8011b0e:	435f      	muls	r7, r3
 8011b10:	eb02 0c07 	add.w	ip, r2, r7
 8011b14:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8011b18:	f115 0e0f 	adds.w	lr, r5, #15
 8011b1c:	f100 80a2 	bmi.w	8011c64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8011b20:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8011b24:	9c08      	ldr	r4, [sp, #32]
 8011b26:	2614      	movs	r6, #20
 8011b28:	f8c0 e014 	str.w	lr, [r0, #20]
 8011b2c:	4366      	muls	r6, r4
 8011b2e:	eb02 0806 	add.w	r8, r2, r6
 8011b32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011b36:	f115 040f 	adds.w	r4, r5, #15
 8011b3a:	f100 809f 	bmi.w	8011c7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8011b3e:	1124      	asrs	r4, r4, #4
 8011b40:	eba4 040e 	sub.w	r4, r4, lr
 8011b44:	6184      	str	r4, [r0, #24]
 8011b46:	2c00      	cmp	r4, #0
 8011b48:	f000 808a 	beq.w	8011c60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8011b4c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8011b50:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011b54:	5995      	ldr	r5, [r2, r6]
 8011b56:	eba4 0809 	sub.w	r8, r4, r9
 8011b5a:	59d4      	ldr	r4, [r2, r7]
 8011b5c:	eba5 0a04 	sub.w	sl, r5, r4
 8011b60:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8011b64:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8011b68:	fb0e fe05 	mul.w	lr, lr, r5
 8011b6c:	fb0a ee19 	mls	lr, sl, r9, lr
 8011b70:	fb08 e404 	mla	r4, r8, r4, lr
 8011b74:	3c01      	subs	r4, #1
 8011b76:	19a4      	adds	r4, r4, r6
 8011b78:	f100 808c 	bmi.w	8011c94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8011b7c:	fb94 fef6 	sdiv	lr, r4, r6
 8011b80:	fb06 441e 	mls	r4, r6, lr, r4
 8011b84:	f8c0 e000 	str.w	lr, [r0]
 8011b88:	6104      	str	r4, [r0, #16]
 8011b8a:	2d00      	cmp	r5, #0
 8011b8c:	f2c0 8095 	blt.w	8011cba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8011b90:	fb95 f4f6 	sdiv	r4, r5, r6
 8011b94:	fb06 5514 	mls	r5, r6, r4, r5
 8011b98:	6044      	str	r4, [r0, #4]
 8011b9a:	6085      	str	r5, [r0, #8]
 8011b9c:	60c6      	str	r6, [r0, #12]
 8011b9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011ba2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011ba6:	6945      	ldr	r5, [r0, #20]
 8011ba8:	59d2      	ldr	r2, [r2, r7]
 8011baa:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8011bae:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8011cdc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8011bb2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8011bb6:	ee07 4a10 	vmov	s14, r4
 8011bba:	6804      	ldr	r4, [r0, #0]
 8011bbc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8011bc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011bc4:	ee07 2a90 	vmov	s15, r2
 8011bc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bd4:	edd3 6a00 	vldr	s13, [r3]
 8011bd8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011bdc:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8011be0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011be4:	edc0 6a07 	vstr	s13, [r0, #28]
 8011be8:	edd0 6a01 	vldr	s13, [r0, #4]
 8011bec:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8011bf0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011bf4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8011bf8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011bfc:	ed80 6a08 	vstr	s12, [r0, #32]
 8011c00:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8011c02:	6242      	str	r2, [r0, #36]	@ 0x24
 8011c04:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8011c08:	ed93 6a03 	vldr	s12, [r3, #12]
 8011c0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011c10:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8011c14:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011c18:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8011c1c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8011c20:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8011c24:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011c28:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8011c2c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8011c2e:	6302      	str	r2, [r0, #48]	@ 0x30
 8011c30:	ed93 6a06 	vldr	s12, [r3, #24]
 8011c34:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8011c38:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011c3c:	eeb0 7a46 	vmov.f32	s14, s12
 8011c40:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8011c44:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011c48:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8011c4c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8011c50:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8011c54:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c58:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8011c5c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8011c5e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8011c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c64:	2410      	movs	r4, #16
 8011c66:	f1c5 0501 	rsb	r5, r5, #1
 8011c6a:	fb9e fef4 	sdiv	lr, lr, r4
 8011c6e:	f015 050f 	ands.w	r5, r5, #15
 8011c72:	bf18      	it	ne
 8011c74:	2501      	movne	r5, #1
 8011c76:	ebae 0e05 	sub.w	lr, lr, r5
 8011c7a:	e753      	b.n	8011b24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8011c7c:	f04f 0910 	mov.w	r9, #16
 8011c80:	f1c5 0501 	rsb	r5, r5, #1
 8011c84:	fb94 f4f9 	sdiv	r4, r4, r9
 8011c88:	f015 050f 	ands.w	r5, r5, #15
 8011c8c:	bf18      	it	ne
 8011c8e:	2501      	movne	r5, #1
 8011c90:	1b64      	subs	r4, r4, r5
 8011c92:	e755      	b.n	8011b40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8011c94:	4264      	negs	r4, r4
 8011c96:	fb94 fef6 	sdiv	lr, r4, r6
 8011c9a:	f1ce 0800 	rsb	r8, lr, #0
 8011c9e:	fb06 441e 	mls	r4, r6, lr, r4
 8011ca2:	f8c0 8000 	str.w	r8, [r0]
 8011ca6:	6104      	str	r4, [r0, #16]
 8011ca8:	2c00      	cmp	r4, #0
 8011caa:	f43f af6e 	beq.w	8011b8a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8011cae:	ea6f 0e0e 	mvn.w	lr, lr
 8011cb2:	1b34      	subs	r4, r6, r4
 8011cb4:	f8c0 e000 	str.w	lr, [r0]
 8011cb8:	e766      	b.n	8011b88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8011cba:	426d      	negs	r5, r5
 8011cbc:	fb95 f4f6 	sdiv	r4, r5, r6
 8011cc0:	f1c4 0e00 	rsb	lr, r4, #0
 8011cc4:	fb06 5514 	mls	r5, r6, r4, r5
 8011cc8:	f8c0 e004 	str.w	lr, [r0, #4]
 8011ccc:	6085      	str	r5, [r0, #8]
 8011cce:	2d00      	cmp	r5, #0
 8011cd0:	f43f af64 	beq.w	8011b9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8011cd4:	43e4      	mvns	r4, r4
 8011cd6:	1b75      	subs	r5, r6, r5
 8011cd8:	6044      	str	r4, [r0, #4]
 8011cda:	e75e      	b.n	8011b9a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8011cdc:	3d800000 	.word	0x3d800000

08011ce0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8011ce0:	4b01      	ldr	r3, [pc, #4]	@ (8011ce8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8011ce2:	6018      	str	r0, [r3, #0]
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	24065ab0 	.word	0x24065ab0

08011cec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8011cec:	4b06      	ldr	r3, [pc, #24]	@ (8011d08 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8011cee:	881a      	ldrh	r2, [r3, #0]
 8011cf0:	4282      	cmp	r2, r0
 8011cf2:	d807      	bhi.n	8011d04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8011cf4:	4b05      	ldr	r3, [pc, #20]	@ (8011d0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	4298      	cmp	r0, r3
 8011cfc:	bfac      	ite	ge
 8011cfe:	2000      	movge	r0, #0
 8011d00:	2001      	movlt	r0, #1
 8011d02:	4770      	bx	lr
 8011d04:	2000      	movs	r0, #0
 8011d06:	4770      	bx	lr
 8011d08:	24065ad0 	.word	0x24065ad0
 8011d0c:	24065ad4 	.word	0x24065ad4

08011d10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8011d10:	b508      	push	{r3, lr}
 8011d12:	4601      	mov	r1, r0
 8011d14:	f7ff ffea 	bl	8011cec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8011d18:	b118      	cbz	r0, 8011d22 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8011d1a:	4b02      	ldr	r3, [pc, #8]	@ (8011d24 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8011d22:	bd08      	pop	{r3, pc}
 8011d24:	24065ab4 	.word	0x24065ab4

08011d28 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8011d28:	b538      	push	{r3, r4, r5, lr}
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	f7ff ffde 	bl	8011cec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8011d30:	b1d8      	cbz	r0, 8011d6a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8011d32:	4b0f      	ldr	r3, [pc, #60]	@ (8011d70 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	1ae4      	subs	r4, r4, r3
 8011d38:	230e      	movs	r3, #14
 8011d3a:	4363      	muls	r3, r4
 8011d3c:	4c0d      	ldr	r4, [pc, #52]	@ (8011d74 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8011d3e:	6825      	ldr	r5, [r4, #0]
 8011d40:	18ea      	adds	r2, r5, r3
 8011d42:	7b12      	ldrb	r2, [r2, #12]
 8011d44:	f012 0220 	ands.w	r2, r2, #32
 8011d48:	d010      	beq.n	8011d6c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8011d4a:	f9b1 2000 	ldrsh.w	r2, [r1]
 8011d4e:	52ea      	strh	r2, [r5, r3]
 8011d50:	6822      	ldr	r2, [r4, #0]
 8011d52:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011d56:	441a      	add	r2, r3
 8011d58:	8055      	strh	r5, [r2, #2]
 8011d5a:	6822      	ldr	r2, [r4, #0]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8011d62:	809a      	strh	r2, [r3, #4]
 8011d64:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8011d68:	80da      	strh	r2, [r3, #6]
 8011d6a:	bd38      	pop	{r3, r4, r5, pc}
 8011d6c:	4610      	mov	r0, r2
 8011d6e:	e7fc      	b.n	8011d6a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8011d70:	24065ad0 	.word	0x24065ad0
 8011d74:	24065ab8 	.word	0x24065ab8

08011d78 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8011d78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	460c      	mov	r4, r1
 8011d80:	f7ff ffb4 	bl	8011cec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8011d84:	b918      	cbnz	r0, 8011d8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8011d86:	2000      	movs	r0, #0
 8011d88:	b002      	add	sp, #8
 8011d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d8e:	4608      	mov	r0, r1
 8011d90:	f7fb facf 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d1f6      	bne.n	8011d86 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8011d98:	4b3f      	ldr	r3, [pc, #252]	@ (8011e98 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8011d9a:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8011e9c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8011d9e:	881d      	ldrh	r5, [r3, #0]
 8011da0:	f8d9 a000 	ldr.w	sl, [r9]
 8011da4:	46c8      	mov	r8, r9
 8011da6:	1b73      	subs	r3, r6, r5
 8011da8:	250e      	movs	r5, #14
 8011daa:	435d      	muls	r5, r3
 8011dac:	eb0a 0705 	add.w	r7, sl, r5
 8011db0:	7b3b      	ldrb	r3, [r7, #12]
 8011db2:	f013 0f20 	tst.w	r3, #32
 8011db6:	d0e6      	beq.n	8011d86 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8011db8:	4621      	mov	r1, r4
 8011dba:	4638      	mov	r0, r7
 8011dbc:	f7fd fb58 	bl	800f470 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d1e1      	bne.n	8011d88 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f7fd fb52 	bl	800f470 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011dcc:	b108      	cbz	r0, 8011dd2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8011dce:	4621      	mov	r1, r4
 8011dd0:	e020      	b.n	8011e14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8011dd2:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011dd6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d11e      	bne.n	8011e1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8011dde:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011de2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d118      	bne.n	8011e1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8011dea:	6820      	ldr	r0, [r4, #0]
 8011dec:	466b      	mov	r3, sp
 8011dee:	6861      	ldr	r1, [r4, #4]
 8011df0:	c303      	stmia	r3!, {r0, r1}
 8011df2:	4639      	mov	r1, r7
 8011df4:	4668      	mov	r0, sp
 8011df6:	f7fd fb61 	bl	800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011dfa:	f8d9 3000 	ldr.w	r3, [r9]
 8011dfe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011e02:	442b      	add	r3, r5
 8011e04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011e08:	4413      	add	r3, r2
 8011e0a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	dc04      	bgt.n	8011e1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8011e12:	4669      	mov	r1, sp
 8011e14:	4630      	mov	r0, r6
 8011e16:	f7ff ff87 	bl	8011d28 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8011e1a:	e7b5      	b.n	8011d88 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8011e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e20:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011e24:	442b      	add	r3, r5
 8011e26:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011e2a:	4291      	cmp	r1, r2
 8011e2c:	d119      	bne.n	8011e62 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8011e2e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011e32:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8011e36:	4291      	cmp	r1, r2
 8011e38:	d113      	bne.n	8011e62 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8011e3a:	6820      	ldr	r0, [r4, #0]
 8011e3c:	466a      	mov	r2, sp
 8011e3e:	6861      	ldr	r1, [r4, #4]
 8011e40:	c203      	stmia	r2!, {r0, r1}
 8011e42:	4619      	mov	r1, r3
 8011e44:	4668      	mov	r0, sp
 8011e46:	f7fd fb39 	bl	800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8011e4e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011e52:	442b      	add	r3, r5
 8011e54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011e58:	4413      	add	r3, r2
 8011e5a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	ddd7      	ble.n	8011e12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7fb fa65 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e68:	b990      	cbnz	r0, 8011e90 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8011e6a:	88a7      	ldrh	r7, [r4, #4]
 8011e6c:	88e3      	ldrh	r3, [r4, #6]
 8011e6e:	fb17 f703 	smulbb	r7, r7, r3
 8011e72:	f8d8 3000 	ldr.w	r3, [r8]
 8011e76:	441d      	add	r5, r3
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f7fb fa5a 	bl	800d332 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e7e:	b948      	cbnz	r0, 8011e94 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8011e80:	88ab      	ldrh	r3, [r5, #4]
 8011e82:	88ea      	ldrh	r2, [r5, #6]
 8011e84:	fb13 f302 	smulbb	r3, r3, r2
 8011e88:	42bb      	cmp	r3, r7
 8011e8a:	f6bf af7c 	bge.w	8011d86 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8011e8e:	e79e      	b.n	8011dce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8011e90:	2700      	movs	r7, #0
 8011e92:	e7ee      	b.n	8011e72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8011e94:	2300      	movs	r3, #0
 8011e96:	e7f7      	b.n	8011e88 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8011e98:	24065ad0 	.word	0x24065ad0
 8011e9c:	24065ab8 	.word	0x24065ab8

08011ea0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8011ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ea2:	4c24      	ldr	r4, [pc, #144]	@ (8011f34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d042      	beq.n	8011f30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8011eaa:	4a23      	ldr	r2, [pc, #140]	@ (8011f38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8011eac:	4d23      	ldr	r5, [pc, #140]	@ (8011f3c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8011eae:	8811      	ldrh	r1, [r2, #0]
 8011eb0:	f8b5 c000 	ldrh.w	ip, [r5]
 8011eb4:	4822      	ldr	r0, [pc, #136]	@ (8011f40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8011eb6:	4461      	add	r1, ip
 8011eb8:	1c4a      	adds	r2, r1, #1
 8011eba:	008f      	lsls	r7, r1, #2
 8011ebc:	f022 0201 	bic.w	r2, r2, #1
 8011ec0:	19de      	adds	r6, r3, r7
 8011ec2:	0412      	lsls	r2, r2, #16
 8011ec4:	6006      	str	r6, [r0, #0]
 8011ec6:	4e1f      	ldr	r6, [pc, #124]	@ (8011f44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8011ec8:	0c12      	lsrs	r2, r2, #16
 8011eca:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8011ece:	19da      	adds	r2, r3, r7
 8011ed0:	6032      	str	r2, [r6, #0]
 8011ed2:	220e      	movs	r2, #14
 8011ed4:	fb02 f20c 	mul.w	r2, r2, ip
 8011ed8:	3203      	adds	r2, #3
 8011eda:	f022 0203 	bic.w	r2, r2, #3
 8011ede:	443a      	add	r2, r7
 8011ee0:	4f19      	ldr	r7, [pc, #100]	@ (8011f48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8011ee2:	4413      	add	r3, r2
 8011ee4:	603b      	str	r3, [r7, #0]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	4f18      	ldr	r7, [pc, #96]	@ (8011f4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8011eea:	469c      	mov	ip, r3
 8011eec:	803b      	strh	r3, [r7, #0]
 8011eee:	4f18      	ldr	r7, [pc, #96]	@ (8011f50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8011ef0:	683f      	ldr	r7, [r7, #0]
 8011ef2:	1aba      	subs	r2, r7, r2
 8011ef4:	4f17      	ldr	r7, [pc, #92]	@ (8011f54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8011ef6:	603a      	str	r2, [r7, #0]
 8011ef8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8011efc:	4a16      	ldr	r2, [pc, #88]	@ (8011f58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8011efe:	8013      	strh	r3, [r2, #0]
 8011f00:	428b      	cmp	r3, r1
 8011f02:	d10d      	bne.n	8011f20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8011f04:	882d      	ldrh	r5, [r5, #0]
 8011f06:	2300      	movs	r3, #0
 8011f08:	6830      	ldr	r0, [r6, #0]
 8011f0a:	240e      	movs	r4, #14
 8011f0c:	429d      	cmp	r5, r3
 8011f0e:	d90f      	bls.n	8011f30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8011f10:	fb04 0203 	mla	r2, r4, r3, r0
 8011f14:	3301      	adds	r3, #1
 8011f16:	7b11      	ldrb	r1, [r2, #12]
 8011f18:	f36f 1145 	bfc	r1, #5, #1
 8011f1c:	7311      	strb	r1, [r2, #12]
 8011f1e:	e7f5      	b.n	8011f0c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8011f20:	6822      	ldr	r2, [r4, #0]
 8011f22:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8011f26:	6802      	ldr	r2, [r0, #0]
 8011f28:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	e7e7      	b.n	8011f00 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8011f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f32:	bf00      	nop
 8011f34:	24065ab4 	.word	0x24065ab4
 8011f38:	24065ad0 	.word	0x24065ad0
 8011f3c:	24065ad4 	.word	0x24065ad4
 8011f40:	24065ac8 	.word	0x24065ac8
 8011f44:	24065ab8 	.word	0x24065ab8
 8011f48:	24065ac0 	.word	0x24065ac0
 8011f4c:	24065ad2 	.word	0x24065ad2
 8011f50:	24065abc 	.word	0x24065abc
 8011f54:	24065acc 	.word	0x24065acc
 8011f58:	24065ac4 	.word	0x24065ac4

08011f5c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8011f5c:	4b06      	ldr	r3, [pc, #24]	@ (8011f78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	b943      	cbnz	r3, 8011f74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8011f62:	b139      	cbz	r1, 8011f74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8011f64:	4b05      	ldr	r3, [pc, #20]	@ (8011f7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8011f66:	801a      	strh	r2, [r3, #0]
 8011f68:	4b05      	ldr	r3, [pc, #20]	@ (8011f80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8011f6a:	6019      	str	r1, [r3, #0]
 8011f6c:	4b05      	ldr	r3, [pc, #20]	@ (8011f84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8011f6e:	6018      	str	r0, [r3, #0]
 8011f70:	f7ff bf96 	b.w	8011ea0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop
 8011f78:	24065ac0 	.word	0x24065ac0
 8011f7c:	24065ad4 	.word	0x24065ad4
 8011f80:	24065abc 	.word	0x24065abc
 8011f84:	24065ab4 	.word	0x24065ab4

08011f88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8011f88:	b470      	push	{r4, r5, r6}
 8011f8a:	4c07      	ldr	r4, [pc, #28]	@ (8011fa8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8011f8c:	4605      	mov	r5, r0
 8011f8e:	4610      	mov	r0, r2
 8011f90:	9a03      	ldr	r2, [sp, #12]
 8011f92:	6826      	ldr	r6, [r4, #0]
 8011f94:	b936      	cbnz	r6, 8011fa4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8011f96:	6025      	str	r5, [r4, #0]
 8011f98:	4c04      	ldr	r4, [pc, #16]	@ (8011fac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8011f9a:	8021      	strh	r1, [r4, #0]
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	bc70      	pop	{r4, r5, r6}
 8011fa0:	f7ff bfdc 	b.w	8011f5c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8011fa4:	bc70      	pop	{r4, r5, r6}
 8011fa6:	4770      	bx	lr
 8011fa8:	24065ad8 	.word	0x24065ad8
 8011fac:	24065ad0 	.word	0x24065ad0

08011fb0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011fb0:	4a12      	ldr	r2, [pc, #72]	@ (8011ffc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8011fb2:	8803      	ldrh	r3, [r0, #0]
 8011fb4:	8812      	ldrh	r2, [r2, #0]
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d207      	bcs.n	8011fca <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8011fba:	4a11      	ldr	r2, [pc, #68]	@ (8012000 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8011fbc:	2114      	movs	r1, #20
 8011fbe:	6812      	ldr	r2, [r2, #0]
 8011fc0:	fb01 2303 	mla	r3, r1, r3, r2
 8011fc4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8011fc8:	4770      	bx	lr
 8011fca:	490e      	ldr	r1, [pc, #56]	@ (8012004 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8011fcc:	8809      	ldrh	r1, [r1, #0]
 8011fce:	4411      	add	r1, r2
 8011fd0:	428b      	cmp	r3, r1
 8011fd2:	da04      	bge.n	8011fde <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8011fd4:	1a9b      	subs	r3, r3, r2
 8011fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8012008 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8011fd8:	210e      	movs	r1, #14
 8011fda:	6812      	ldr	r2, [r2, #0]
 8011fdc:	e7f0      	b.n	8011fc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8011fde:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d108      	bne.n	8011ff8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8011fe6:	4b09      	ldr	r3, [pc, #36]	@ (801200c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	b91b      	cbnz	r3, 8011ff4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8011fec:	4b08      	ldr	r3, [pc, #32]	@ (8012010 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011fee:	f9b3 0000 	ldrsh.w	r0, [r3]
 8011ff2:	4770      	bx	lr
 8011ff4:	4b07      	ldr	r3, [pc, #28]	@ (8012014 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8011ff6:	e7fa      	b.n	8011fee <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	4770      	bx	lr
 8011ffc:	24065ad0 	.word	0x24065ad0
 8012000:	24065ad8 	.word	0x24065ad8
 8012004:	24065ad4 	.word	0x24065ad4
 8012008:	24065ab8 	.word	0x24065ab8
 801200c:	24065a48 	.word	0x24065a48
 8012010:	24065a4a 	.word	0x24065a4a
 8012014:	24065a4c 	.word	0x24065a4c

08012018 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8012018:	4a12      	ldr	r2, [pc, #72]	@ (8012064 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801201a:	8803      	ldrh	r3, [r0, #0]
 801201c:	8812      	ldrh	r2, [r2, #0]
 801201e:	4293      	cmp	r3, r2
 8012020:	d207      	bcs.n	8012032 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8012022:	4a11      	ldr	r2, [pc, #68]	@ (8012068 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8012024:	2114      	movs	r1, #20
 8012026:	6812      	ldr	r2, [r2, #0]
 8012028:	fb01 2303 	mla	r3, r1, r3, r2
 801202c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8012030:	4770      	bx	lr
 8012032:	490e      	ldr	r1, [pc, #56]	@ (801206c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8012034:	8809      	ldrh	r1, [r1, #0]
 8012036:	4411      	add	r1, r2
 8012038:	428b      	cmp	r3, r1
 801203a:	da04      	bge.n	8012046 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801203c:	1a9b      	subs	r3, r3, r2
 801203e:	4a0c      	ldr	r2, [pc, #48]	@ (8012070 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8012040:	210e      	movs	r1, #14
 8012042:	6812      	ldr	r2, [r2, #0]
 8012044:	e7f0      	b.n	8012028 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8012046:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801204a:	4293      	cmp	r3, r2
 801204c:	d108      	bne.n	8012060 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801204e:	4b09      	ldr	r3, [pc, #36]	@ (8012074 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	b91b      	cbnz	r3, 801205c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8012054:	4b08      	ldr	r3, [pc, #32]	@ (8012078 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8012056:	f9b3 0000 	ldrsh.w	r0, [r3]
 801205a:	4770      	bx	lr
 801205c:	4b07      	ldr	r3, [pc, #28]	@ (801207c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801205e:	e7fa      	b.n	8012056 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8012060:	2000      	movs	r0, #0
 8012062:	4770      	bx	lr
 8012064:	24065ad0 	.word	0x24065ad0
 8012068:	24065ad8 	.word	0x24065ad8
 801206c:	24065ad4 	.word	0x24065ad4
 8012070:	24065ab8 	.word	0x24065ab8
 8012074:	24065a48 	.word	0x24065a48
 8012078:	24065a4c 	.word	0x24065a4c
 801207c:	24065a4a 	.word	0x24065a4a

08012080 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8012080:	4a22      	ldr	r2, [pc, #136]	@ (801210c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8012082:	b530      	push	{r4, r5, lr}
 8012084:	880b      	ldrh	r3, [r1, #0]
 8012086:	8812      	ldrh	r2, [r2, #0]
 8012088:	4293      	cmp	r3, r2
 801208a:	d213      	bcs.n	80120b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801208c:	4a20      	ldr	r2, [pc, #128]	@ (8012110 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801208e:	2114      	movs	r1, #20
 8012090:	6812      	ldr	r2, [r2, #0]
 8012092:	fb01 2303 	mla	r3, r1, r3, r2
 8012096:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801209a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801209e:	8a1a      	ldrh	r2, [r3, #16]
 80120a0:	8a5b      	ldrh	r3, [r3, #18]
 80120a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80120a6:	8004      	strh	r4, [r0, #0]
 80120a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120ac:	8041      	strh	r1, [r0, #2]
 80120ae:	8082      	strh	r2, [r0, #4]
 80120b0:	80c3      	strh	r3, [r0, #6]
 80120b2:	e024      	b.n	80120fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80120b4:	4917      	ldr	r1, [pc, #92]	@ (8012114 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80120b6:	8809      	ldrh	r1, [r1, #0]
 80120b8:	4411      	add	r1, r2
 80120ba:	428b      	cmp	r3, r1
 80120bc:	da10      	bge.n	80120e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80120be:	1a9b      	subs	r3, r3, r2
 80120c0:	220e      	movs	r2, #14
 80120c2:	4353      	muls	r3, r2
 80120c4:	4a14      	ldr	r2, [pc, #80]	@ (8012118 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80120c6:	6811      	ldr	r1, [r2, #0]
 80120c8:	18ca      	adds	r2, r1, r3
 80120ca:	5ecd      	ldrsh	r5, [r1, r3]
 80120cc:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80120d0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80120d4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80120d8:	8005      	strh	r5, [r0, #0]
 80120da:	8044      	strh	r4, [r0, #2]
 80120dc:	8081      	strh	r1, [r0, #4]
 80120de:	e7e7      	b.n	80120b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80120e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d10b      	bne.n	8012100 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 80120e8:	4b0c      	ldr	r3, [pc, #48]	@ (801211c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80120ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 80120ee:	4b0c      	ldr	r3, [pc, #48]	@ (8012120 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80120f0:	8081      	strh	r1, [r0, #4]
 80120f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80120f6:	2300      	movs	r3, #0
 80120f8:	80c2      	strh	r2, [r0, #6]
 80120fa:	8003      	strh	r3, [r0, #0]
 80120fc:	8043      	strh	r3, [r0, #2]
 80120fe:	bd30      	pop	{r4, r5, pc}
 8012100:	2300      	movs	r3, #0
 8012102:	8003      	strh	r3, [r0, #0]
 8012104:	8043      	strh	r3, [r0, #2]
 8012106:	8083      	strh	r3, [r0, #4]
 8012108:	e7d2      	b.n	80120b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801210a:	bf00      	nop
 801210c:	24065ad0 	.word	0x24065ad0
 8012110:	24065ad8 	.word	0x24065ad8
 8012114:	24065ad4 	.word	0x24065ad4
 8012118:	24065ab8 	.word	0x24065ab8
 801211c:	24065a44 	.word	0x24065a44
 8012120:	24065a46 	.word	0x24065a46

08012124 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012124:	4a12      	ldr	r2, [pc, #72]	@ (8012170 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012126:	8803      	ldrh	r3, [r0, #0]
 8012128:	8811      	ldrh	r1, [r2, #0]
 801212a:	428b      	cmp	r3, r1
 801212c:	d20b      	bcs.n	8012146 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801212e:	4a11      	ldr	r2, [pc, #68]	@ (8012174 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012130:	6812      	ldr	r2, [r2, #0]
 8012132:	b112      	cbz	r2, 801213a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8012134:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012138:	b9c0      	cbnz	r0, 801216c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801213a:	4a0f      	ldr	r2, [pc, #60]	@ (8012178 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801213c:	6811      	ldr	r1, [r2, #0]
 801213e:	2214      	movs	r2, #20
 8012140:	4353      	muls	r3, r2
 8012142:	58c8      	ldr	r0, [r1, r3]
 8012144:	4770      	bx	lr
 8012146:	4a0d      	ldr	r2, [pc, #52]	@ (801217c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012148:	8812      	ldrh	r2, [r2, #0]
 801214a:	440a      	add	r2, r1
 801214c:	4293      	cmp	r3, r2
 801214e:	da04      	bge.n	801215a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8012150:	4a08      	ldr	r2, [pc, #32]	@ (8012174 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012152:	6812      	ldr	r2, [r2, #0]
 8012154:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012158:	4770      	bx	lr
 801215a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801215e:	4293      	cmp	r3, r2
 8012160:	d103      	bne.n	801216a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8012162:	4b07      	ldr	r3, [pc, #28]	@ (8012180 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8012168:	4770      	bx	lr
 801216a:	2000      	movs	r0, #0
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop
 8012170:	24065ad0 	.word	0x24065ad0
 8012174:	24065ab4 	.word	0x24065ab4
 8012178:	24065ad8 	.word	0x24065ad8
 801217c:	24065ad4 	.word	0x24065ad4
 8012180:	24065a50 	.word	0x24065a50

08012184 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8012184:	4b24      	ldr	r3, [pc, #144]	@ (8012218 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8012186:	8802      	ldrh	r2, [r0, #0]
 8012188:	8818      	ldrh	r0, [r3, #0]
 801218a:	4282      	cmp	r2, r0
 801218c:	d221      	bcs.n	80121d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801218e:	4b23      	ldr	r3, [pc, #140]	@ (801221c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8012190:	6819      	ldr	r1, [r3, #0]
 8012192:	2314      	movs	r3, #20
 8012194:	fb03 1302 	mla	r3, r3, r2, r1
 8012198:	6858      	ldr	r0, [r3, #4]
 801219a:	2800      	cmp	r0, #0
 801219c:	d03a      	beq.n	8012214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801219e:	4920      	ldr	r1, [pc, #128]	@ (8012220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80121a0:	6809      	ldr	r1, [r1, #0]
 80121a2:	2900      	cmp	r1, #0
 80121a4:	d036      	beq.n	8012214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80121a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121aa:	2900      	cmp	r1, #0
 80121ac:	d032      	beq.n	8012214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80121ae:	891a      	ldrh	r2, [r3, #8]
 80121b0:	8958      	ldrh	r0, [r3, #10]
 80121b2:	4350      	muls	r0, r2
 80121b4:	7c5a      	ldrb	r2, [r3, #17]
 80121b6:	7cdb      	ldrb	r3, [r3, #19]
 80121b8:	0952      	lsrs	r2, r2, #5
 80121ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80121be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80121c2:	2b0b      	cmp	r3, #11
 80121c4:	bf18      	it	ne
 80121c6:	0040      	lslne	r0, r0, #1
 80121c8:	3003      	adds	r0, #3
 80121ca:	f020 0003 	bic.w	r0, r0, #3
 80121ce:	4408      	add	r0, r1
 80121d0:	4770      	bx	lr
 80121d2:	4b14      	ldr	r3, [pc, #80]	@ (8012224 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80121d4:	881b      	ldrh	r3, [r3, #0]
 80121d6:	4403      	add	r3, r0
 80121d8:	429a      	cmp	r2, r3
 80121da:	da1a      	bge.n	8012212 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80121dc:	4b12      	ldr	r3, [pc, #72]	@ (8012228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80121de:	1a10      	subs	r0, r2, r0
 80121e0:	210e      	movs	r1, #14
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	fb01 3000 	mla	r0, r1, r0, r3
 80121e8:	7b03      	ldrb	r3, [r0, #12]
 80121ea:	f003 031f 	and.w	r3, r3, #31
 80121ee:	2b0b      	cmp	r3, #11
 80121f0:	d10b      	bne.n	801220a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80121f2:	8903      	ldrh	r3, [r0, #8]
 80121f4:	8940      	ldrh	r0, [r0, #10]
 80121f6:	4358      	muls	r0, r3
 80121f8:	4b09      	ldr	r3, [pc, #36]	@ (8012220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80121fa:	3003      	adds	r0, #3
 80121fc:	6819      	ldr	r1, [r3, #0]
 80121fe:	f020 0303 	bic.w	r3, r0, #3
 8012202:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012206:	4418      	add	r0, r3
 8012208:	4770      	bx	lr
 801220a:	2b0d      	cmp	r3, #13
 801220c:	d101      	bne.n	8012212 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801220e:	300d      	adds	r0, #13
 8012210:	4770      	bx	lr
 8012212:	2000      	movs	r0, #0
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop
 8012218:	24065ad0 	.word	0x24065ad0
 801221c:	24065ad8 	.word	0x24065ad8
 8012220:	24065ab4 	.word	0x24065ab4
 8012224:	24065ad4 	.word	0x24065ad4
 8012228:	24065ab8 	.word	0x24065ab8

0801222c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801222c:	4b1f      	ldr	r3, [pc, #124]	@ (80122ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801222e:	b510      	push	{r4, lr}
 8012230:	8802      	ldrh	r2, [r0, #0]
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	429a      	cmp	r2, r3
 8012236:	d21a      	bcs.n	801226e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8012238:	4b1d      	ldr	r3, [pc, #116]	@ (80122b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801223a:	2114      	movs	r1, #20
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	fb01 3102 	mla	r1, r1, r2, r3
 8012242:	7c4b      	ldrb	r3, [r1, #17]
 8012244:	0958      	lsrs	r0, r3, #5
 8012246:	7ccb      	ldrb	r3, [r1, #19]
 8012248:	491a      	ldr	r1, [pc, #104]	@ (80122b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801224a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801224e:	6809      	ldr	r1, [r1, #0]
 8012250:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8012254:	b2d8      	uxtb	r0, r3
 8012256:	b149      	cbz	r1, 801226c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8012258:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801225c:	b132      	cbz	r2, 801226c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801225e:	2b0e      	cmp	r3, #14
 8012260:	d021      	beq.n	80122a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8012262:	280f      	cmp	r0, #15
 8012264:	d01d      	beq.n	80122a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8012266:	2810      	cmp	r0, #16
 8012268:	bf08      	it	eq
 801226a:	2002      	moveq	r0, #2
 801226c:	bd10      	pop	{r4, pc}
 801226e:	4912      	ldr	r1, [pc, #72]	@ (80122b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8012270:	8809      	ldrh	r1, [r1, #0]
 8012272:	4419      	add	r1, r3
 8012274:	428a      	cmp	r2, r1
 8012276:	da09      	bge.n	801228c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	4a10      	ldr	r2, [pc, #64]	@ (80122bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801227c:	210e      	movs	r1, #14
 801227e:	6812      	ldr	r2, [r2, #0]
 8012280:	fb01 2303 	mla	r3, r1, r3, r2
 8012284:	7b18      	ldrb	r0, [r3, #12]
 8012286:	f000 001f 	and.w	r0, r0, #31
 801228a:	e7ef      	b.n	801226c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801228c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8012290:	429a      	cmp	r2, r3
 8012292:	d108      	bne.n	80122a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8012294:	f7f6 fc8c 	bl	8008bb0 <_ZN8touchgfx3HAL3lcdEv>
 8012298:	6803      	ldr	r3, [r0, #0]
 801229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122a0:	4718      	bx	r3
 80122a2:	2001      	movs	r0, #1
 80122a4:	e7e2      	b.n	801226c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80122a6:	2000      	movs	r0, #0
 80122a8:	e7e0      	b.n	801226c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80122aa:	bf00      	nop
 80122ac:	24065ad0 	.word	0x24065ad0
 80122b0:	24065ad8 	.word	0x24065ad8
 80122b4:	24065ab4 	.word	0x24065ab4
 80122b8:	24065ad4 	.word	0x24065ad4
 80122bc:	24065ab8 	.word	0x24065ab8

080122c0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80122c0:	2018      	movs	r0, #24
 80122c2:	4770      	bx	lr

080122c4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80122c4:	2001      	movs	r0, #1
 80122c6:	4770      	bx	lr

080122c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80122c8:	4b02      	ldr	r3, [pc, #8]	@ (80122d4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 80122ca:	8818      	ldrh	r0, [r3, #0]
 80122cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80122d0:	b280      	uxth	r0, r0
 80122d2:	4770      	bx	lr
 80122d4:	24065a4a 	.word	0x24065a4a

080122d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80122d8:	2bff      	cmp	r3, #255	@ 0xff
 80122da:	d04c      	beq.n	8012376 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80122dc:	2a2c      	cmp	r2, #44	@ 0x2c
 80122de:	d030      	beq.n	8012342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 80122e0:	d80f      	bhi.n	8012302 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80122e2:	2a08      	cmp	r2, #8
 80122e4:	d043      	beq.n	801236e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80122e6:	d805      	bhi.n	80122f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80122e8:	2a04      	cmp	r2, #4
 80122ea:	d03e      	beq.n	801236a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80122ec:	2a05      	cmp	r2, #5
 80122ee:	d03a      	beq.n	8012366 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80122f0:	2300      	movs	r3, #0
 80122f2:	e024      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80122f4:	2a0a      	cmp	r2, #10
 80122f6:	d03a      	beq.n	801236e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80122f8:	d301      	bcc.n	80122fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80122fa:	2a0b      	cmp	r2, #11
 80122fc:	d1f8      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80122fe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012300:	e01d      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012302:	2a30      	cmp	r2, #48	@ 0x30
 8012304:	d035      	beq.n	8012372 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8012306:	d80a      	bhi.n	801231e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8012308:	2a2e      	cmp	r2, #46	@ 0x2e
 801230a:	684b      	ldr	r3, [r1, #4]
 801230c:	d023      	beq.n	8012356 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801230e:	d90d      	bls.n	801232c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8012310:	781a      	ldrb	r2, [r3, #0]
 8012312:	785b      	ldrb	r3, [r3, #1]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d1eb      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012318:	b98a      	cbnz	r2, 801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801231a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801231c:	e00f      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801231e:	2a32      	cmp	r2, #50	@ 0x32
 8012320:	d027      	beq.n	8012372 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8012322:	d301      	bcc.n	8012328 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8012324:	2a33      	cmp	r2, #51	@ 0x33
 8012326:	d1e3      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012328:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801232a:	e008      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801232c:	781a      	ldrb	r2, [r3, #0]
 801232e:	785b      	ldrb	r3, [r3, #1]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d1dd      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012334:	2a00      	cmp	r2, #0
 8012336:	d0f0      	beq.n	801231a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8012338:	2a01      	cmp	r2, #1
 801233a:	d1d9      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801233c:	6943      	ldr	r3, [r0, #20]
 801233e:	4618      	mov	r0, r3
 8012340:	4770      	bx	lr
 8012342:	684b      	ldr	r3, [r1, #4]
 8012344:	781a      	ldrb	r2, [r3, #0]
 8012346:	785b      	ldrb	r3, [r3, #1]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d1d1      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801234c:	b14a      	cbz	r2, 8012362 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801234e:	2a01      	cmp	r2, #1
 8012350:	bf08      	it	eq
 8012352:	68c3      	ldreq	r3, [r0, #12]
 8012354:	e7f3      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012356:	781a      	ldrb	r2, [r3, #0]
 8012358:	785b      	ldrb	r3, [r3, #1]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d1c8      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801235e:	2a00      	cmp	r2, #0
 8012360:	d1ed      	bne.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012362:	69c3      	ldr	r3, [r0, #28]
 8012364:	e7eb      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012366:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012368:	e7e9      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801236a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801236c:	e7e7      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801236e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012370:	e7e5      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012372:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012374:	e7e3      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012376:	2a2c      	cmp	r2, #44	@ 0x2c
 8012378:	d030      	beq.n	80123dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801237a:	d80f      	bhi.n	801239c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801237c:	2a08      	cmp	r2, #8
 801237e:	d042      	beq.n	8012406 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8012380:	d805      	bhi.n	801238e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8012382:	2a04      	cmp	r2, #4
 8012384:	d03d      	beq.n	8012402 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8012386:	2a05      	cmp	r2, #5
 8012388:	d1b2      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801238a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801238c:	e7d7      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801238e:	2a0a      	cmp	r2, #10
 8012390:	d039      	beq.n	8012406 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8012392:	d301      	bcc.n	8012398 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8012394:	2a0b      	cmp	r2, #11
 8012396:	d1ab      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012398:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801239a:	e7d0      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801239c:	2a30      	cmp	r2, #48	@ 0x30
 801239e:	d034      	beq.n	801240a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80123a0:	d80b      	bhi.n	80123ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 80123a2:	2a2e      	cmp	r2, #46	@ 0x2e
 80123a4:	684b      	ldr	r3, [r1, #4]
 80123a6:	d023      	beq.n	80123f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80123a8:	d90e      	bls.n	80123c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 80123aa:	781a      	ldrb	r2, [r3, #0]
 80123ac:	785b      	ldrb	r3, [r3, #1]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d19e      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80123b2:	2a00      	cmp	r2, #0
 80123b4:	d1c3      	bne.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80123b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80123b8:	e7c1      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80123ba:	2a32      	cmp	r2, #50	@ 0x32
 80123bc:	d025      	beq.n	801240a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80123be:	d301      	bcc.n	80123c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80123c0:	2a33      	cmp	r2, #51	@ 0x33
 80123c2:	d195      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80123c4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80123c6:	e7ba      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80123c8:	781a      	ldrb	r2, [r3, #0]
 80123ca:	785b      	ldrb	r3, [r3, #1]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d18f      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80123d0:	2a00      	cmp	r2, #0
 80123d2:	d0f0      	beq.n	80123b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 80123d4:	2a01      	cmp	r2, #1
 80123d6:	d18b      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80123d8:	6983      	ldr	r3, [r0, #24]
 80123da:	e7b0      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80123dc:	684b      	ldr	r3, [r1, #4]
 80123de:	781a      	ldrb	r2, [r3, #0]
 80123e0:	785b      	ldrb	r3, [r3, #1]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d184      	bne.n	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80123e6:	b152      	cbz	r2, 80123fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80123e8:	2a01      	cmp	r2, #1
 80123ea:	bf08      	it	eq
 80123ec:	6903      	ldreq	r3, [r0, #16]
 80123ee:	e7a6      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80123f0:	781a      	ldrb	r2, [r3, #0]
 80123f2:	785b      	ldrb	r3, [r3, #1]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f47f af7b 	bne.w	80122f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80123fa:	2a00      	cmp	r2, #0
 80123fc:	d19f      	bne.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80123fe:	6a03      	ldr	r3, [r0, #32]
 8012400:	e79d      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012402:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012404:	e79b      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012406:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012408:	e799      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801240a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801240c:	e797      	b.n	801233e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801240e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801240e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012412:	b085      	sub	sp, #20
 8012414:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012416:	9203      	str	r2, [sp, #12]
 8012418:	6870      	ldr	r0, [r6, #4]
 801241a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801241e:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8012422:	9101      	str	r1, [sp, #4]
 8012424:	fa1f f885 	uxth.w	r8, r5
 8012428:	43ed      	mvns	r5, r5
 801242a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801242e:	b2ed      	uxtb	r5, r5
 8012430:	fb00 2404 	mla	r4, r0, r4, r2
 8012434:	6832      	ldr	r2, [r6, #0]
 8012436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801243a:	4414      	add	r4, r2
 801243c:	f8dc 2000 	ldr.w	r2, [ip]
 8012440:	9202      	str	r2, [sp, #8]
 8012442:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012446:	f102 0e04 	add.w	lr, r2, #4
 801244a:	9a01      	ldr	r2, [sp, #4]
 801244c:	2a00      	cmp	r2, #0
 801244e:	dc03      	bgt.n	8012458 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8012450:	9a03      	ldr	r2, [sp, #12]
 8012452:	2a00      	cmp	r2, #0
 8012454:	f340 8116 	ble.w	8012684 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012458:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801245a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801245e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8012462:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012464:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8012468:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801246c:	2b00      	cmp	r3, #0
 801246e:	dd0e      	ble.n	801248e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8012470:	1406      	asrs	r6, r0, #16
 8012472:	d405      	bmi.n	8012480 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012474:	4556      	cmp	r6, sl
 8012476:	da03      	bge.n	8012480 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012478:	1416      	asrs	r6, r2, #16
 801247a:	d401      	bmi.n	8012480 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801247c:	454e      	cmp	r6, r9
 801247e:	db07      	blt.n	8012490 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8012480:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012482:	3b01      	subs	r3, #1
 8012484:	3403      	adds	r4, #3
 8012486:	4430      	add	r0, r6
 8012488:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801248a:	4432      	add	r2, r6
 801248c:	e7ee      	b.n	801246c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801248e:	d063      	beq.n	8012558 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8012490:	1e5e      	subs	r6, r3, #1
 8012492:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8012494:	fb07 0706 	mla	r7, r7, r6, r0
 8012498:	143f      	asrs	r7, r7, #16
 801249a:	d454      	bmi.n	8012546 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801249c:	4557      	cmp	r7, sl
 801249e:	da52      	bge.n	8012546 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80124a0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80124a2:	fb07 2606 	mla	r6, r7, r6, r2
 80124a6:	1436      	asrs	r6, r6, #16
 80124a8:	d44d      	bmi.n	8012546 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80124aa:	454e      	cmp	r6, r9
 80124ac:	da4b      	bge.n	8012546 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80124ae:	1ce6      	adds	r6, r4, #3
 80124b0:	4699      	mov	r9, r3
 80124b2:	f1b9 0f00 	cmp.w	r9, #0
 80124b6:	f106 0603 	add.w	r6, r6, #3
 80124ba:	dd48      	ble.n	801254e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80124bc:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80124c0:	1417      	asrs	r7, r2, #16
 80124c2:	9902      	ldr	r1, [sp, #8]
 80124c4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80124c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80124cc:	fb0b 1707 	mla	r7, fp, r7, r1
 80124d0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80124d4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80124d6:	f817 700a 	ldrb.w	r7, [r7, sl]
 80124da:	fb1b fb05 	smulbb	fp, fp, r5
 80124de:	4408      	add	r0, r1
 80124e0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80124e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80124e6:	440a      	add	r2, r1
 80124e8:	eb0e 0a07 	add.w	sl, lr, r7
 80124ec:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80124f0:	fb07 b708 	mla	r7, r7, r8, fp
 80124f4:	b2bf      	uxth	r7, r7
 80124f6:	f107 0b01 	add.w	fp, r7, #1
 80124fa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80124fe:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8012502:	fb1b fb05 	smulbb	fp, fp, r5
 8012506:	123f      	asrs	r7, r7, #8
 8012508:	f806 7c06 	strb.w	r7, [r6, #-6]
 801250c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8012510:	fb07 b708 	mla	r7, r7, r8, fp
 8012514:	b2bf      	uxth	r7, r7
 8012516:	f107 0b01 	add.w	fp, r7, #1
 801251a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801251e:	123f      	asrs	r7, r7, #8
 8012520:	f806 7c05 	strb.w	r7, [r6, #-5]
 8012524:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8012528:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801252c:	fb1a fa05 	smulbb	sl, sl, r5
 8012530:	fb07 a708 	mla	r7, r7, r8, sl
 8012534:	b2bf      	uxth	r7, r7
 8012536:	f107 0a01 	add.w	sl, r7, #1
 801253a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801253e:	123f      	asrs	r7, r7, #8
 8012540:	f806 7c04 	strb.w	r7, [r6, #-4]
 8012544:	e7b5      	b.n	80124b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8012546:	2700      	movs	r7, #0
 8012548:	1bde      	subs	r6, r3, r7
 801254a:	2e00      	cmp	r6, #0
 801254c:	dc42      	bgt.n	80125d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801254e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012556:	441c      	add	r4, r3
 8012558:	9b01      	ldr	r3, [sp, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f340 8092 	ble.w	8012684 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012566:	ee30 0a04 	vadd.f32	s0, s0, s8
 801256a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801256e:	eef0 6a62 	vmov.f32	s13, s5
 8012572:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012576:	ee31 1a05 	vadd.f32	s2, s2, s10
 801257a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801257e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8012582:	eef0 6a43 	vmov.f32	s13, s6
 8012586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801258a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801258e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012592:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012596:	ee77 2a62 	vsub.f32	s5, s14, s5
 801259a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801259e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80125a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80125a6:	ee12 2a90 	vmov	r2, s5
 80125aa:	eef0 2a47 	vmov.f32	s5, s14
 80125ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80125b2:	ee13 2a10 	vmov	r2, s6
 80125b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80125b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ba:	eeb0 3a67 	vmov.f32	s6, s15
 80125be:	fb92 f3f3 	sdiv	r3, r2, r3
 80125c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80125c4:	9b01      	ldr	r3, [sp, #4]
 80125c6:	9a03      	ldr	r2, [sp, #12]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	9301      	str	r3, [sp, #4]
 80125cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ce:	bf08      	it	eq
 80125d0:	4613      	moveq	r3, r2
 80125d2:	e73a      	b.n	801244a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80125d4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80125d8:	d44e      	bmi.n	8012678 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80125da:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80125de:	4556      	cmp	r6, sl
 80125e0:	dd4a      	ble.n	8012678 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80125e2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80125e6:	d447      	bmi.n	8012678 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80125e8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80125ec:	4559      	cmp	r1, fp
 80125ee:	dd43      	ble.n	8012678 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80125f0:	fa0f f986 	sxth.w	r9, r6
 80125f4:	9902      	ldr	r1, [sp, #8]
 80125f6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80125fa:	fb0b 1909 	mla	r9, fp, r9, r1
 80125fe:	f814 b006 	ldrb.w	fp, [r4, r6]
 8012602:	f819 900a 	ldrb.w	r9, [r9, sl]
 8012606:	fb1b fb05 	smulbb	fp, fp, r5
 801260a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801260e:	eb0e 0a09 	add.w	sl, lr, r9
 8012612:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8012616:	fb09 b908 	mla	r9, r9, r8, fp
 801261a:	fa1f f989 	uxth.w	r9, r9
 801261e:	f109 0b01 	add.w	fp, r9, #1
 8012622:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012626:	ea4f 2929 	mov.w	r9, r9, asr #8
 801262a:	f804 9006 	strb.w	r9, [r4, r6]
 801262e:	4426      	add	r6, r4
 8012630:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012634:	f896 b001 	ldrb.w	fp, [r6, #1]
 8012638:	fb1b fb05 	smulbb	fp, fp, r5
 801263c:	fb09 b908 	mla	r9, r9, r8, fp
 8012640:	fa1f f989 	uxth.w	r9, r9
 8012644:	f109 0b01 	add.w	fp, r9, #1
 8012648:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801264c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012650:	f886 9001 	strb.w	r9, [r6, #1]
 8012654:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012658:	f896 a002 	ldrb.w	sl, [r6, #2]
 801265c:	fb1a fa05 	smulbb	sl, sl, r5
 8012660:	fb09 a908 	mla	r9, r9, r8, sl
 8012664:	fa1f f989 	uxth.w	r9, r9
 8012668:	f109 0a01 	add.w	sl, r9, #1
 801266c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8012670:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012674:	f886 9002 	strb.w	r9, [r6, #2]
 8012678:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801267a:	3701      	adds	r7, #1
 801267c:	4408      	add	r0, r1
 801267e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012680:	440a      	add	r2, r1
 8012682:	e761      	b.n	8012548 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012684:	b005      	add	sp, #20
 8012686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801268a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801268a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012690:	4693      	mov	fp, r2
 8012692:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012698:	6868      	ldr	r0, [r5, #4]
 801269a:	6877      	ldr	r7, [r6, #4]
 801269c:	9100      	str	r1, [sp, #0]
 801269e:	3704      	adds	r7, #4
 80126a0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80126a4:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 80126a8:	fb00 2404 	mla	r4, r0, r4, r2
 80126ac:	682a      	ldr	r2, [r5, #0]
 80126ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80126b2:	4414      	add	r4, r2
 80126b4:	6832      	ldr	r2, [r6, #0]
 80126b6:	9201      	str	r2, [sp, #4]
 80126b8:	9a00      	ldr	r2, [sp, #0]
 80126ba:	2a00      	cmp	r2, #0
 80126bc:	dc03      	bgt.n	80126c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80126be:	f1bb 0f00 	cmp.w	fp, #0
 80126c2:	f340 80bc 	ble.w	801283e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80126c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80126c8:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80126cc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80126d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126d2:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80126d6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80126da:	2b00      	cmp	r3, #0
 80126dc:	dd0c      	ble.n	80126f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80126de:	1405      	asrs	r5, r0, #16
 80126e0:	d405      	bmi.n	80126ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80126e2:	4555      	cmp	r5, sl
 80126e4:	da03      	bge.n	80126ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80126e6:	1415      	asrs	r5, r2, #16
 80126e8:	d401      	bmi.n	80126ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80126ea:	454d      	cmp	r5, r9
 80126ec:	db05      	blt.n	80126fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80126ee:	4440      	add	r0, r8
 80126f0:	4472      	add	r2, lr
 80126f2:	3b01      	subs	r3, #1
 80126f4:	3403      	adds	r4, #3
 80126f6:	e7f0      	b.n	80126da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80126f8:	d03f      	beq.n	801277a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80126fa:	1e5d      	subs	r5, r3, #1
 80126fc:	fb08 0c05 	mla	ip, r8, r5, r0
 8012700:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8012704:	d42e      	bmi.n	8012764 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012706:	45d4      	cmp	ip, sl
 8012708:	da2c      	bge.n	8012764 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801270a:	fb0e 2505 	mla	r5, lr, r5, r2
 801270e:	142d      	asrs	r5, r5, #16
 8012710:	d428      	bmi.n	8012764 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012712:	454d      	cmp	r5, r9
 8012714:	da26      	bge.n	8012764 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012716:	1ce5      	adds	r5, r4, #3
 8012718:	469c      	mov	ip, r3
 801271a:	f1bc 0f00 	cmp.w	ip, #0
 801271e:	f105 0503 	add.w	r5, r5, #3
 8012722:	dd25      	ble.n	8012770 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8012724:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012728:	ea4f 4922 	mov.w	r9, r2, asr #16
 801272c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012730:	4472      	add	r2, lr
 8012732:	468a      	mov	sl, r1
 8012734:	9901      	ldr	r1, [sp, #4]
 8012736:	fb0a 1909 	mla	r9, sl, r9, r1
 801273a:	1401      	asrs	r1, r0, #16
 801273c:	4440      	add	r0, r8
 801273e:	f819 9001 	ldrb.w	r9, [r9, r1]
 8012742:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012746:	eb07 0a09 	add.w	sl, r7, r9
 801274a:	f817 9009 	ldrb.w	r9, [r7, r9]
 801274e:	f805 9c06 	strb.w	r9, [r5, #-6]
 8012752:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012756:	f805 9c05 	strb.w	r9, [r5, #-5]
 801275a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801275e:	f805 9c04 	strb.w	r9, [r5, #-4]
 8012762:	e7da      	b.n	801271a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012764:	2500      	movs	r5, #0
 8012766:	eba3 0c05 	sub.w	ip, r3, r5
 801276a:	f1bc 0f00 	cmp.w	ip, #0
 801276e:	dc3b      	bgt.n	80127e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8012770:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012778:	441c      	add	r4, r3
 801277a:	9b00      	ldr	r3, [sp, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	dd5e      	ble.n	801283e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012780:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012786:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801278a:	eeb0 6a62 	vmov.f32	s12, s5
 801278e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012792:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012796:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801279a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801279e:	eeb0 6a43 	vmov.f32	s12, s6
 80127a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80127a6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80127aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80127ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80127b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80127b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80127ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80127be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80127c2:	ee12 2a90 	vmov	r2, s5
 80127c6:	eef0 2a47 	vmov.f32	s5, s14
 80127ca:	fb92 f8f3 	sdiv	r8, r2, r3
 80127ce:	ee13 2a10 	vmov	r2, s6
 80127d2:	eeb0 3a67 	vmov.f32	s6, s15
 80127d6:	fb92 fef3 	sdiv	lr, r2, r3
 80127da:	9b00      	ldr	r3, [sp, #0]
 80127dc:	3b01      	subs	r3, #1
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127e2:	bf08      	it	eq
 80127e4:	465b      	moveq	r3, fp
 80127e6:	e767      	b.n	80126b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80127e8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80127ec:	d423      	bmi.n	8012836 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80127ee:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80127f2:	45cc      	cmp	ip, r9
 80127f4:	dd1f      	ble.n	8012836 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80127f6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80127fa:	d41c      	bmi.n	8012836 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80127fc:	68f1      	ldr	r1, [r6, #12]
 80127fe:	4551      	cmp	r1, sl
 8012800:	dd19      	ble.n	8012836 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012802:	fa0f fc8c 	sxth.w	ip, ip
 8012806:	9901      	ldr	r1, [sp, #4]
 8012808:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801280c:	f81c c009 	ldrb.w	ip, [ip, r9]
 8012810:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012814:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8012818:	eb07 090c 	add.w	r9, r7, ip
 801281c:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8012820:	f804 a00c 	strb.w	sl, [r4, ip]
 8012824:	44a4      	add	ip, r4
 8012826:	f899 a001 	ldrb.w	sl, [r9, #1]
 801282a:	f88c a001 	strb.w	sl, [ip, #1]
 801282e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8012832:	f88c 9002 	strb.w	r9, [ip, #2]
 8012836:	4440      	add	r0, r8
 8012838:	4472      	add	r2, lr
 801283a:	3501      	adds	r5, #1
 801283c:	e793      	b.n	8012766 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801283e:	b003      	add	sp, #12
 8012840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012844 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012848:	b085      	sub	sp, #20
 801284a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801284e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8012850:	9202      	str	r2, [sp, #8]
 8012852:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8012856:	6860      	ldr	r0, [r4, #4]
 8012858:	9203      	str	r2, [sp, #12]
 801285a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801285e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8012862:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8012866:	fb00 2505 	mla	r5, r0, r5, r2
 801286a:	6822      	ldr	r2, [r4, #0]
 801286c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012870:	4415      	add	r5, r2
 8012872:	f8dc 2000 	ldr.w	r2, [ip]
 8012876:	9200      	str	r2, [sp, #0]
 8012878:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801287c:	3204      	adds	r2, #4
 801287e:	9201      	str	r2, [sp, #4]
 8012880:	2900      	cmp	r1, #0
 8012882:	dc03      	bgt.n	801288c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8012884:	9a02      	ldr	r2, [sp, #8]
 8012886:	2a00      	cmp	r2, #0
 8012888:	f340 8127 	ble.w	8012ada <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801288c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801288e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8012892:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8012896:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012898:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801289c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	dd0d      	ble.n	80128c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80128a4:	1422      	asrs	r2, r4, #16
 80128a6:	d405      	bmi.n	80128b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80128a8:	4542      	cmp	r2, r8
 80128aa:	da03      	bge.n	80128b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80128ac:	1402      	asrs	r2, r0, #16
 80128ae:	d401      	bmi.n	80128b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80128b0:	42ba      	cmp	r2, r7
 80128b2:	db06      	blt.n	80128c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80128b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80128b6:	4474      	add	r4, lr
 80128b8:	3b01      	subs	r3, #1
 80128ba:	3503      	adds	r5, #3
 80128bc:	4410      	add	r0, r2
 80128be:	e7ef      	b.n	80128a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80128c0:	d075      	beq.n	80129ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80128c2:	1e5a      	subs	r2, r3, #1
 80128c4:	fb0e 4602 	mla	r6, lr, r2, r4
 80128c8:	1436      	asrs	r6, r6, #16
 80128ca:	d465      	bmi.n	8012998 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80128cc:	4546      	cmp	r6, r8
 80128ce:	da63      	bge.n	8012998 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80128d0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80128d2:	fb06 0202 	mla	r2, r6, r2, r0
 80128d6:	1412      	asrs	r2, r2, #16
 80128d8:	d45e      	bmi.n	8012998 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80128da:	42ba      	cmp	r2, r7
 80128dc:	da5c      	bge.n	8012998 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80128de:	1cef      	adds	r7, r5, #3
 80128e0:	4699      	mov	r9, r3
 80128e2:	f1b9 0f00 	cmp.w	r9, #0
 80128e6:	dd5d      	ble.n	80129a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80128e8:	1402      	asrs	r2, r0, #16
 80128ea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80128ee:	1426      	asrs	r6, r4, #16
 80128f0:	4692      	mov	sl, r2
 80128f2:	9a00      	ldr	r2, [sp, #0]
 80128f4:	fb08 220a 	mla	r2, r8, sl, r2
 80128f8:	5d92      	ldrb	r2, [r2, r6]
 80128fa:	9e01      	ldr	r6, [sp, #4]
 80128fc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8012900:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8012904:	d041      	beq.n	801298a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8012906:	9a03      	ldr	r2, [sp, #12]
 8012908:	fa5f fb86 	uxtb.w	fp, r6
 801290c:	fb02 f808 	mul.w	r8, r2, r8
 8012910:	f108 0201 	add.w	r2, r8, #1
 8012914:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8012918:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801291c:	1212      	asrs	r2, r2, #8
 801291e:	fa1f fa82 	uxth.w	sl, r2
 8012922:	43d2      	mvns	r2, r2
 8012924:	fb1b fb0a 	smulbb	fp, fp, sl
 8012928:	b2d2      	uxtb	r2, r2
 801292a:	fb08 b802 	mla	r8, r8, r2, fp
 801292e:	fa1f f888 	uxth.w	r8, r8
 8012932:	f108 0b01 	add.w	fp, r8, #1
 8012936:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801293a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801293e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8012942:	fb1b fb0a 	smulbb	fp, fp, sl
 8012946:	ea4f 2828 	mov.w	r8, r8, asr #8
 801294a:	fb16 fa0a 	smulbb	sl, r6, sl
 801294e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8012952:	f807 8c03 	strb.w	r8, [r7, #-3]
 8012956:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801295a:	fb06 aa02 	mla	sl, r6, r2, sl
 801295e:	fb08 b802 	mla	r8, r8, r2, fp
 8012962:	fa1f fa8a 	uxth.w	sl, sl
 8012966:	fa1f f888 	uxth.w	r8, r8
 801296a:	f10a 0601 	add.w	r6, sl, #1
 801296e:	f108 0b01 	add.w	fp, r8, #1
 8012972:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8012976:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801297a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801297e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012982:	f807 ac01 	strb.w	sl, [r7, #-1]
 8012986:	f807 8c02 	strb.w	r8, [r7, #-2]
 801298a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801298c:	4474      	add	r4, lr
 801298e:	3703      	adds	r7, #3
 8012990:	f109 39ff 	add.w	r9, r9, #4294967295
 8012994:	4410      	add	r0, r2
 8012996:	e7a4      	b.n	80128e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8012998:	f04f 0800 	mov.w	r8, #0
 801299c:	eba3 0208 	sub.w	r2, r3, r8
 80129a0:	2a00      	cmp	r2, #0
 80129a2:	dc3b      	bgt.n	8012a1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80129a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80129a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80129ac:	441d      	add	r5, r3
 80129ae:	2900      	cmp	r1, #0
 80129b0:	f340 8093 	ble.w	8012ada <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80129b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80129b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80129be:	3901      	subs	r1, #1
 80129c0:	eeb0 6a62 	vmov.f32	s12, s5
 80129c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80129c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80129cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80129d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80129d4:	eeb0 6a43 	vmov.f32	s12, s6
 80129d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80129dc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80129e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80129e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80129e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80129ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80129f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80129f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80129f8:	ee12 2a90 	vmov	r2, s5
 80129fc:	eef0 2a47 	vmov.f32	s5, s14
 8012a00:	fb92 fef3 	sdiv	lr, r2, r3
 8012a04:	ee13 2a10 	vmov	r2, s6
 8012a08:	eeb0 3a67 	vmov.f32	s6, s15
 8012a0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012a10:	9a02      	ldr	r2, [sp, #8]
 8012a12:	9312      	str	r3, [sp, #72]	@ 0x48
 8012a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a16:	bf08      	it	eq
 8012a18:	4613      	moveq	r3, r2
 8012a1a:	e731      	b.n	8012880 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012a1c:	1427      	asrs	r7, r4, #16
 8012a1e:	d456      	bmi.n	8012ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8012a20:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012a24:	42be      	cmp	r6, r7
 8012a26:	dd52      	ble.n	8012ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8012a28:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012a2c:	d44f      	bmi.n	8012ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8012a2e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012a32:	454a      	cmp	r2, r9
 8012a34:	dd4b      	ble.n	8012ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8012a36:	9a00      	ldr	r2, [sp, #0]
 8012a38:	b236      	sxth	r6, r6
 8012a3a:	fb09 2606 	mla	r6, r9, r6, r2
 8012a3e:	5df2      	ldrb	r2, [r6, r7]
 8012a40:	9e01      	ldr	r6, [sp, #4]
 8012a42:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8012a46:	0e3a      	lsrs	r2, r7, #24
 8012a48:	d041      	beq.n	8012ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8012a4a:	9e03      	ldr	r6, [sp, #12]
 8012a4c:	fa5f fb87 	uxtb.w	fp, r7
 8012a50:	4372      	muls	r2, r6
 8012a52:	1c56      	adds	r6, r2, #1
 8012a54:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012a58:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8012a5c:	1212      	asrs	r2, r2, #8
 8012a5e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8012a62:	fa1f fa82 	uxth.w	sl, r2
 8012a66:	43d2      	mvns	r2, r2
 8012a68:	fb1b fb0a 	smulbb	fp, fp, sl
 8012a6c:	b2d2      	uxtb	r2, r2
 8012a6e:	fb09 b902 	mla	r9, r9, r2, fp
 8012a72:	fa1f f989 	uxth.w	r9, r9
 8012a76:	f109 0b01 	add.w	fp, r9, #1
 8012a7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012a7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8012a82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8012a86:	fb1b fb0a 	smulbb	fp, fp, sl
 8012a8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012a8e:	fb17 fa0a 	smulbb	sl, r7, sl
 8012a92:	f805 9006 	strb.w	r9, [r5, r6]
 8012a96:	442e      	add	r6, r5
 8012a98:	78b7      	ldrb	r7, [r6, #2]
 8012a9a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8012a9e:	fb07 aa02 	mla	sl, r7, r2, sl
 8012aa2:	fb09 b902 	mla	r9, r9, r2, fp
 8012aa6:	fa1f fa8a 	uxth.w	sl, sl
 8012aaa:	fa1f f989 	uxth.w	r9, r9
 8012aae:	f10a 0701 	add.w	r7, sl, #1
 8012ab2:	f109 0b01 	add.w	fp, r9, #1
 8012ab6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8012aba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012abe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012ac2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012ac6:	f886 a002 	strb.w	sl, [r6, #2]
 8012aca:	f886 9001 	strb.w	r9, [r6, #1]
 8012ace:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012ad0:	4474      	add	r4, lr
 8012ad2:	f108 0801 	add.w	r8, r8, #1
 8012ad6:	4410      	add	r0, r2
 8012ad8:	e760      	b.n	801299c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8012ada:	b005      	add	sp, #20
 8012adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ae0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae4:	b085      	sub	sp, #20
 8012ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012aea:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8012aec:	9203      	str	r2, [sp, #12]
 8012aee:	6868      	ldr	r0, [r5, #4]
 8012af0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8012af4:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8012af8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8012afc:	fb00 2404 	mla	r4, r0, r4, r2
 8012b00:	682a      	ldr	r2, [r5, #0]
 8012b02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012b06:	4414      	add	r4, r2
 8012b08:	f8dc 2000 	ldr.w	r2, [ip]
 8012b0c:	9201      	str	r2, [sp, #4]
 8012b0e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012b12:	3204      	adds	r2, #4
 8012b14:	9202      	str	r2, [sp, #8]
 8012b16:	2900      	cmp	r1, #0
 8012b18:	dc03      	bgt.n	8012b22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8012b1a:	9a03      	ldr	r2, [sp, #12]
 8012b1c:	2a00      	cmp	r2, #0
 8012b1e:	f340 8137 	ble.w	8012d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012b22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012b24:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8012b28:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8012b2c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012b2e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8012b32:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	dd0d      	ble.n	8012b56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012b3a:	1405      	asrs	r5, r0, #16
 8012b3c:	d405      	bmi.n	8012b4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012b3e:	4545      	cmp	r5, r8
 8012b40:	da03      	bge.n	8012b4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012b42:	1415      	asrs	r5, r2, #16
 8012b44:	d401      	bmi.n	8012b4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012b46:	42bd      	cmp	r5, r7
 8012b48:	db06      	blt.n	8012b58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012b4a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8012b4c:	4470      	add	r0, lr
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	3403      	adds	r4, #3
 8012b52:	442a      	add	r2, r5
 8012b54:	e7ef      	b.n	8012b36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8012b56:	d070      	beq.n	8012c3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8012b58:	1e5d      	subs	r5, r3, #1
 8012b5a:	fb0e 0605 	mla	r6, lr, r5, r0
 8012b5e:	1436      	asrs	r6, r6, #16
 8012b60:	d462      	bmi.n	8012c28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8012b62:	4546      	cmp	r6, r8
 8012b64:	da60      	bge.n	8012c28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8012b66:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8012b68:	fb06 2505 	mla	r5, r6, r5, r2
 8012b6c:	142d      	asrs	r5, r5, #16
 8012b6e:	d45b      	bmi.n	8012c28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8012b70:	42bd      	cmp	r5, r7
 8012b72:	da59      	bge.n	8012c28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8012b74:	1ce5      	adds	r5, r4, #3
 8012b76:	469a      	mov	sl, r3
 8012b78:	f1ba 0f00 	cmp.w	sl, #0
 8012b7c:	dd58      	ble.n	8012c30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8012b7e:	1416      	asrs	r6, r2, #16
 8012b80:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8012b84:	1407      	asrs	r7, r0, #16
 8012b86:	46b1      	mov	r9, r6
 8012b88:	9e01      	ldr	r6, [sp, #4]
 8012b8a:	fb08 6609 	mla	r6, r8, r9, r6
 8012b8e:	5df6      	ldrb	r6, [r6, r7]
 8012b90:	9f02      	ldr	r7, [sp, #8]
 8012b92:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8012b96:	0e37      	lsrs	r7, r6, #24
 8012b98:	2fff      	cmp	r7, #255	@ 0xff
 8012b9a:	f000 80f0 	beq.w	8012d7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8012b9e:	fa5f f887 	uxtb.w	r8, r7
 8012ba2:	b3d7      	cbz	r7, 8012c1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012ba4:	fa1f f788 	uxth.w	r7, r8
 8012ba8:	ea6f 0808 	mvn.w	r8, r8
 8012bac:	fa5f fb86 	uxtb.w	fp, r6
 8012bb0:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8012bb4:	fa5f f888 	uxtb.w	r8, r8
 8012bb8:	fb1b fb07 	smulbb	fp, fp, r7
 8012bbc:	fb09 b908 	mla	r9, r9, r8, fp
 8012bc0:	fa1f f989 	uxth.w	r9, r9
 8012bc4:	f109 0b01 	add.w	fp, r9, #1
 8012bc8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012bcc:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8012bd0:	fb1b fb08 	smulbb	fp, fp, r8
 8012bd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012bd8:	f805 9c03 	strb.w	r9, [r5, #-3]
 8012bdc:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8012be0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8012be4:	fb09 b907 	mla	r9, r9, r7, fp
 8012be8:	fa1f f989 	uxth.w	r9, r9
 8012bec:	f109 0b01 	add.w	fp, r9, #1
 8012bf0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012bf4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012bf8:	f805 9c02 	strb.w	r9, [r5, #-2]
 8012bfc:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8012c00:	fb19 f808 	smulbb	r8, r9, r8
 8012c04:	fb06 8607 	mla	r6, r6, r7, r8
 8012c08:	b2b6      	uxth	r6, r6
 8012c0a:	f106 0801 	add.w	r8, r6, #1
 8012c0e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8012c12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012c16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012c1a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8012c1c:	4470      	add	r0, lr
 8012c1e:	3503      	adds	r5, #3
 8012c20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c24:	4432      	add	r2, r6
 8012c26:	e7a7      	b.n	8012b78 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012c28:	2600      	movs	r6, #0
 8012c2a:	1b9d      	subs	r5, r3, r6
 8012c2c:	2d00      	cmp	r5, #0
 8012c2e:	dc3b      	bgt.n	8012ca8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8012c30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012c38:	441c      	add	r4, r3
 8012c3a:	2900      	cmp	r1, #0
 8012c3c:	f340 80a8 	ble.w	8012d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012c40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012c4a:	3901      	subs	r1, #1
 8012c4c:	eeb0 6a62 	vmov.f32	s12, s5
 8012c50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012c54:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012c58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012c5c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8012c60:	eeb0 6a43 	vmov.f32	s12, s6
 8012c64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012c68:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8012c6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012c70:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012c74:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012c78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012c7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012c80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012c84:	ee12 2a90 	vmov	r2, s5
 8012c88:	eef0 2a47 	vmov.f32	s5, s14
 8012c8c:	fb92 fef3 	sdiv	lr, r2, r3
 8012c90:	ee13 2a10 	vmov	r2, s6
 8012c94:	eeb0 3a67 	vmov.f32	s6, s15
 8012c98:	fb92 f3f3 	sdiv	r3, r2, r3
 8012c9c:	9a03      	ldr	r2, [sp, #12]
 8012c9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ca2:	bf08      	it	eq
 8012ca4:	4613      	moveq	r3, r2
 8012ca6:	e736      	b.n	8012b16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8012ca8:	ea5f 4820 	movs.w	r8, r0, asr #16
 8012cac:	d457      	bmi.n	8012d5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012cae:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8012cb2:	4547      	cmp	r7, r8
 8012cb4:	dd53      	ble.n	8012d5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012cb6:	ea5f 4922 	movs.w	r9, r2, asr #16
 8012cba:	d450      	bmi.n	8012d5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012cbc:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8012cc0:	454d      	cmp	r5, r9
 8012cc2:	dd4c      	ble.n	8012d5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012cc4:	9d01      	ldr	r5, [sp, #4]
 8012cc6:	b23f      	sxth	r7, r7
 8012cc8:	fb09 5707 	mla	r7, r9, r7, r5
 8012ccc:	f817 5008 	ldrb.w	r5, [r7, r8]
 8012cd0:	9f02      	ldr	r7, [sp, #8]
 8012cd2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8012cd6:	0e2f      	lsrs	r7, r5, #24
 8012cd8:	2fff      	cmp	r7, #255	@ 0xff
 8012cda:	d045      	beq.n	8012d68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8012cdc:	fa5f f987 	uxtb.w	r9, r7
 8012ce0:	b3ef      	cbz	r7, 8012d5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012ce2:	fa1f f889 	uxth.w	r8, r9
 8012ce6:	ea6f 0909 	mvn.w	r9, r9
 8012cea:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8012cee:	fa5f fb85 	uxtb.w	fp, r5
 8012cf2:	f814 a007 	ldrb.w	sl, [r4, r7]
 8012cf6:	fa5f f989 	uxtb.w	r9, r9
 8012cfa:	fb1b fb08 	smulbb	fp, fp, r8
 8012cfe:	fb0a ba09 	mla	sl, sl, r9, fp
 8012d02:	fa1f fa8a 	uxth.w	sl, sl
 8012d06:	f10a 0b01 	add.w	fp, sl, #1
 8012d0a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8012d0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012d12:	f804 a007 	strb.w	sl, [r4, r7]
 8012d16:	4427      	add	r7, r4
 8012d18:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012d1c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8012d20:	f897 b001 	ldrb.w	fp, [r7, #1]
 8012d24:	fb1b fb09 	smulbb	fp, fp, r9
 8012d28:	fb0a ba08 	mla	sl, sl, r8, fp
 8012d2c:	fa1f fa8a 	uxth.w	sl, sl
 8012d30:	f10a 0b01 	add.w	fp, sl, #1
 8012d34:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8012d38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012d3c:	f887 a001 	strb.w	sl, [r7, #1]
 8012d40:	f897 a002 	ldrb.w	sl, [r7, #2]
 8012d44:	fb1a f909 	smulbb	r9, sl, r9
 8012d48:	fb05 9508 	mla	r5, r5, r8, r9
 8012d4c:	b2ad      	uxth	r5, r5
 8012d4e:	f105 0901 	add.w	r9, r5, #1
 8012d52:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8012d56:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012d5a:	f887 9002 	strb.w	r9, [r7, #2]
 8012d5e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8012d60:	4470      	add	r0, lr
 8012d62:	3601      	adds	r6, #1
 8012d64:	442a      	add	r2, r5
 8012d66:	e760      	b.n	8012c2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8012d68:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8012d6c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8012d70:	55e5      	strb	r5, [r4, r7]
 8012d72:	4427      	add	r7, r4
 8012d74:	0c2d      	lsrs	r5, r5, #16
 8012d76:	f887 8001 	strb.w	r8, [r7, #1]
 8012d7a:	70bd      	strb	r5, [r7, #2]
 8012d7c:	e7ef      	b.n	8012d5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012d7e:	0a37      	lsrs	r7, r6, #8
 8012d80:	f805 6c03 	strb.w	r6, [r5, #-3]
 8012d84:	0c36      	lsrs	r6, r6, #16
 8012d86:	f805 7c02 	strb.w	r7, [r5, #-2]
 8012d8a:	f805 6c01 	strb.w	r6, [r5, #-1]
 8012d8e:	e744      	b.n	8012c1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012d90:	b005      	add	sp, #20
 8012d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d96 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012d96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d9a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012d9c:	9201      	str	r2, [sp, #4]
 8012d9e:	6870      	ldr	r0, [r6, #4]
 8012da0:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012da4:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8012da8:	fa1f fe85 	uxth.w	lr, r5
 8012dac:	43ed      	mvns	r5, r5
 8012dae:	f8dc 8000 	ldr.w	r8, [ip]
 8012db2:	b2ed      	uxtb	r5, r5
 8012db4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8012db8:	fb00 2404 	mla	r4, r0, r4, r2
 8012dbc:	6832      	ldr	r2, [r6, #0]
 8012dbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012dc2:	4414      	add	r4, r2
 8012dc4:	2900      	cmp	r1, #0
 8012dc6:	dc03      	bgt.n	8012dd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8012dc8:	9a01      	ldr	r2, [sp, #4]
 8012dca:	2a00      	cmp	r2, #0
 8012dcc:	f340 810d 	ble.w	8012fea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8012dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012dd2:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8012dd6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8012dda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ddc:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8012de0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd0e      	ble.n	8012e06 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012de8:	1406      	asrs	r6, r0, #16
 8012dea:	d405      	bmi.n	8012df8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8012dec:	4556      	cmp	r6, sl
 8012dee:	da03      	bge.n	8012df8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8012df0:	1416      	asrs	r6, r2, #16
 8012df2:	d401      	bmi.n	8012df8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8012df4:	454e      	cmp	r6, r9
 8012df6:	db07      	blt.n	8012e08 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012df8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8012dfa:	3b01      	subs	r3, #1
 8012dfc:	3403      	adds	r4, #3
 8012dfe:	4430      	add	r0, r6
 8012e00:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012e02:	4432      	add	r2, r6
 8012e04:	e7ee      	b.n	8012de4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8012e06:	d060      	beq.n	8012eca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8012e08:	1e5e      	subs	r6, r3, #1
 8012e0a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8012e0c:	fb07 0706 	mla	r7, r7, r6, r0
 8012e10:	143f      	asrs	r7, r7, #16
 8012e12:	d451      	bmi.n	8012eb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8012e14:	4557      	cmp	r7, sl
 8012e16:	da4f      	bge.n	8012eb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8012e18:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012e1a:	fb07 2606 	mla	r6, r7, r6, r2
 8012e1e:	1436      	asrs	r6, r6, #16
 8012e20:	d44a      	bmi.n	8012eb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8012e22:	454e      	cmp	r6, r9
 8012e24:	da48      	bge.n	8012eb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8012e26:	1ce6      	adds	r6, r4, #3
 8012e28:	4699      	mov	r9, r3
 8012e2a:	f1b9 0f00 	cmp.w	r9, #0
 8012e2e:	f106 0603 	add.w	r6, r6, #3
 8012e32:	dd45      	ble.n	8012ec0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8012e34:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8012e38:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8012e3c:	1417      	asrs	r7, r2, #16
 8012e3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012e42:	fb0b a707 	mla	r7, fp, r7, sl
 8012e46:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8012e4a:	fb1b fb05 	smulbb	fp, fp, r5
 8012e4e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012e52:	eb08 0a07 	add.w	sl, r8, r7
 8012e56:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012e5a:	fb07 b70e 	mla	r7, r7, lr, fp
 8012e5e:	b2bf      	uxth	r7, r7
 8012e60:	f107 0b01 	add.w	fp, r7, #1
 8012e64:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012e68:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8012e6c:	fb1b fb05 	smulbb	fp, fp, r5
 8012e70:	123f      	asrs	r7, r7, #8
 8012e72:	f806 7c06 	strb.w	r7, [r6, #-6]
 8012e76:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8012e7a:	fb07 b70e 	mla	r7, r7, lr, fp
 8012e7e:	b2bf      	uxth	r7, r7
 8012e80:	f107 0b01 	add.w	fp, r7, #1
 8012e84:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012e88:	123f      	asrs	r7, r7, #8
 8012e8a:	f806 7c05 	strb.w	r7, [r6, #-5]
 8012e8e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8012e92:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8012e96:	fb1a fa05 	smulbb	sl, sl, r5
 8012e9a:	fb07 a70e 	mla	r7, r7, lr, sl
 8012e9e:	b2bf      	uxth	r7, r7
 8012ea0:	f107 0a01 	add.w	sl, r7, #1
 8012ea4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8012ea8:	123f      	asrs	r7, r7, #8
 8012eaa:	f806 7c04 	strb.w	r7, [r6, #-4]
 8012eae:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8012eb0:	4438      	add	r0, r7
 8012eb2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012eb4:	443a      	add	r2, r7
 8012eb6:	e7b8      	b.n	8012e2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8012eb8:	2700      	movs	r7, #0
 8012eba:	1bde      	subs	r6, r3, r7
 8012ebc:	2e00      	cmp	r6, #0
 8012ebe:	dc3f      	bgt.n	8012f40 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8012ec0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012ec8:	441c      	add	r4, r3
 8012eca:	2900      	cmp	r1, #0
 8012ecc:	f340 808d 	ble.w	8012fea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8012ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012ed4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ed6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012eda:	3901      	subs	r1, #1
 8012edc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012ee0:	eef0 6a62 	vmov.f32	s13, s5
 8012ee4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012ee8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012eec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012ef0:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8012ef4:	eef0 6a43 	vmov.f32	s13, s6
 8012ef8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012efc:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8012f00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012f04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012f08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012f0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012f10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012f14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012f18:	ee12 2a90 	vmov	r2, s5
 8012f1c:	eef0 2a47 	vmov.f32	s5, s14
 8012f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8012f24:	ee13 2a10 	vmov	r2, s6
 8012f28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012f2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f2c:	eeb0 3a67 	vmov.f32	s6, s15
 8012f30:	fb92 f3f3 	sdiv	r3, r2, r3
 8012f34:	9a01      	ldr	r2, [sp, #4]
 8012f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8012f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f3a:	bf08      	it	eq
 8012f3c:	4613      	moveq	r3, r2
 8012f3e:	e741      	b.n	8012dc4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8012f40:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012f44:	d44b      	bmi.n	8012fde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8012f46:	f8dc b008 	ldr.w	fp, [ip, #8]
 8012f4a:	45cb      	cmp	fp, r9
 8012f4c:	dd47      	ble.n	8012fde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8012f4e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8012f52:	d444      	bmi.n	8012fde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8012f54:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8012f58:	4556      	cmp	r6, sl
 8012f5a:	dd40      	ble.n	8012fde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8012f5c:	fa0f f68b 	sxth.w	r6, fp
 8012f60:	fb0a 9906 	mla	r9, sl, r6, r9
 8012f64:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8012f68:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012f6c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8012f70:	fb1b fb05 	smulbb	fp, fp, r5
 8012f74:	eb08 0a09 	add.w	sl, r8, r9
 8012f78:	f818 9009 	ldrb.w	r9, [r8, r9]
 8012f7c:	fb09 b90e 	mla	r9, r9, lr, fp
 8012f80:	fa1f f989 	uxth.w	r9, r9
 8012f84:	f109 0b01 	add.w	fp, r9, #1
 8012f88:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012f8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012f90:	f804 9006 	strb.w	r9, [r4, r6]
 8012f94:	4426      	add	r6, r4
 8012f96:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012f9a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8012f9e:	fb1b fb05 	smulbb	fp, fp, r5
 8012fa2:	fb09 b90e 	mla	r9, r9, lr, fp
 8012fa6:	fa1f f989 	uxth.w	r9, r9
 8012faa:	f109 0b01 	add.w	fp, r9, #1
 8012fae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012fb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012fb6:	f886 9001 	strb.w	r9, [r6, #1]
 8012fba:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012fbe:	f896 a002 	ldrb.w	sl, [r6, #2]
 8012fc2:	fb1a fa05 	smulbb	sl, sl, r5
 8012fc6:	fb09 a90e 	mla	r9, r9, lr, sl
 8012fca:	fa1f f989 	uxth.w	r9, r9
 8012fce:	f109 0a01 	add.w	sl, r9, #1
 8012fd2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8012fd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012fda:	f886 9002 	strb.w	r9, [r6, #2]
 8012fde:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8012fe0:	3701      	adds	r7, #1
 8012fe2:	4430      	add	r0, r6
 8012fe4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012fe6:	4432      	add	r2, r6
 8012fe8:	e767      	b.n	8012eba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8012fea:	b003      	add	sp, #12
 8012fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ff0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012ffa:	9201      	str	r2, [sp, #4]
 8012ffc:	6868      	ldr	r0, [r5, #4]
 8012ffe:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8013000:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8013004:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8013008:	fb00 2404 	mla	r4, r0, r4, r2
 801300c:	682a      	ldr	r2, [r5, #0]
 801300e:	f8d7 8000 	ldr.w	r8, [r7]
 8013012:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013016:	4414      	add	r4, r2
 8013018:	2900      	cmp	r1, #0
 801301a:	dc03      	bgt.n	8013024 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801301c:	9a01      	ldr	r2, [sp, #4]
 801301e:	2a00      	cmp	r2, #0
 8013020:	f340 80af 	ble.w	8013182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8013024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013026:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801302a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801302e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013030:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8013034:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8013038:	2b00      	cmp	r3, #0
 801303a:	dd0c      	ble.n	8013056 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801303c:	1405      	asrs	r5, r0, #16
 801303e:	d405      	bmi.n	801304c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013040:	4555      	cmp	r5, sl
 8013042:	da03      	bge.n	801304c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013044:	1415      	asrs	r5, r2, #16
 8013046:	d401      	bmi.n	801304c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013048:	454d      	cmp	r5, r9
 801304a:	db05      	blt.n	8013058 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801304c:	4470      	add	r0, lr
 801304e:	4462      	add	r2, ip
 8013050:	3b01      	subs	r3, #1
 8013052:	3403      	adds	r4, #3
 8013054:	e7f0      	b.n	8013038 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013056:	d038      	beq.n	80130ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013058:	1e5d      	subs	r5, r3, #1
 801305a:	fb0e 0605 	mla	r6, lr, r5, r0
 801305e:	1436      	asrs	r6, r6, #16
 8013060:	d42a      	bmi.n	80130b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013062:	4556      	cmp	r6, sl
 8013064:	da28      	bge.n	80130b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013066:	fb0c 2505 	mla	r5, ip, r5, r2
 801306a:	142d      	asrs	r5, r5, #16
 801306c:	d424      	bmi.n	80130b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801306e:	454d      	cmp	r5, r9
 8013070:	da22      	bge.n	80130b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013072:	1ce6      	adds	r6, r4, #3
 8013074:	4699      	mov	r9, r3
 8013076:	f1b9 0f00 	cmp.w	r9, #0
 801307a:	f106 0603 	add.w	r6, r6, #3
 801307e:	dd1f      	ble.n	80130c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8013080:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8013084:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013088:	1415      	asrs	r5, r2, #16
 801308a:	4470      	add	r0, lr
 801308c:	4462      	add	r2, ip
 801308e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013092:	fb0b a505 	mla	r5, fp, r5, sl
 8013096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801309a:	eb08 0a05 	add.w	sl, r8, r5
 801309e:	f818 5005 	ldrb.w	r5, [r8, r5]
 80130a2:	f806 5c06 	strb.w	r5, [r6, #-6]
 80130a6:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80130aa:	f806 5c05 	strb.w	r5, [r6, #-5]
 80130ae:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80130b2:	f806 5c04 	strb.w	r5, [r6, #-4]
 80130b6:	e7de      	b.n	8013076 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80130b8:	2600      	movs	r6, #0
 80130ba:	1b9d      	subs	r5, r3, r6
 80130bc:	2d00      	cmp	r5, #0
 80130be:	dc38      	bgt.n	8013132 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80130c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80130c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80130c8:	441c      	add	r4, r3
 80130ca:	2900      	cmp	r1, #0
 80130cc:	dd59      	ble.n	8013182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80130ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80130d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80130d8:	3901      	subs	r1, #1
 80130da:	eeb0 6a62 	vmov.f32	s12, s5
 80130de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80130e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80130e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80130ea:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80130ee:	eeb0 6a43 	vmov.f32	s12, s6
 80130f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80130f6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80130fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80130fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013102:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013106:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801310a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801310e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013112:	ee12 2a90 	vmov	r2, s5
 8013116:	eef0 2a47 	vmov.f32	s5, s14
 801311a:	fb92 fef3 	sdiv	lr, r2, r3
 801311e:	ee13 2a10 	vmov	r2, s6
 8013122:	eeb0 3a67 	vmov.f32	s6, s15
 8013126:	fb92 fcf3 	sdiv	ip, r2, r3
 801312a:	9a01      	ldr	r2, [sp, #4]
 801312c:	bf08      	it	eq
 801312e:	4613      	moveq	r3, r2
 8013130:	e772      	b.n	8013018 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013132:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013136:	d420      	bmi.n	801317a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013138:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801313c:	45cb      	cmp	fp, r9
 801313e:	dd1c      	ble.n	801317a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013140:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013144:	d419      	bmi.n	801317a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013146:	68fd      	ldr	r5, [r7, #12]
 8013148:	4555      	cmp	r5, sl
 801314a:	dd16      	ble.n	801317a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801314c:	fa0f f58b 	sxth.w	r5, fp
 8013150:	fb0a 9505 	mla	r5, sl, r5, r9
 8013154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013158:	f818 9005 	ldrb.w	r9, [r8, r5]
 801315c:	eb08 0b05 	add.w	fp, r8, r5
 8013160:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8013164:	f804 9005 	strb.w	r9, [r4, r5]
 8013168:	4425      	add	r5, r4
 801316a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801316e:	f885 9001 	strb.w	r9, [r5, #1]
 8013172:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8013176:	f885 9002 	strb.w	r9, [r5, #2]
 801317a:	4470      	add	r0, lr
 801317c:	4462      	add	r2, ip
 801317e:	3601      	adds	r6, #1
 8013180:	e79b      	b.n	80130ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8013182:	b003      	add	sp, #12
 8013184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013188 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	b085      	sub	sp, #20
 801318e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013192:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013194:	9202      	str	r2, [sp, #8]
 8013196:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801319a:	6860      	ldr	r0, [r4, #4]
 801319c:	9203      	str	r2, [sp, #12]
 801319e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80131a2:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80131a6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80131aa:	fb00 2505 	mla	r5, r0, r5, r2
 80131ae:	6822      	ldr	r2, [r4, #0]
 80131b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131b4:	4415      	add	r5, r2
 80131b6:	f8dc 2000 	ldr.w	r2, [ip]
 80131ba:	9201      	str	r2, [sp, #4]
 80131bc:	2900      	cmp	r1, #0
 80131be:	dc03      	bgt.n	80131c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80131c0:	9a02      	ldr	r2, [sp, #8]
 80131c2:	2a00      	cmp	r2, #0
 80131c4:	f340 8122 	ble.w	801340c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80131c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80131ca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80131ce:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80131d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80131d4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80131d8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80131dc:	2b00      	cmp	r3, #0
 80131de:	dd0d      	ble.n	80131fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80131e0:	1422      	asrs	r2, r4, #16
 80131e2:	d405      	bmi.n	80131f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80131e4:	4542      	cmp	r2, r8
 80131e6:	da03      	bge.n	80131f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80131e8:	1402      	asrs	r2, r0, #16
 80131ea:	d401      	bmi.n	80131f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80131ec:	42ba      	cmp	r2, r7
 80131ee:	db06      	blt.n	80131fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80131f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80131f2:	4474      	add	r4, lr
 80131f4:	3b01      	subs	r3, #1
 80131f6:	3503      	adds	r5, #3
 80131f8:	4410      	add	r0, r2
 80131fa:	e7ef      	b.n	80131dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80131fc:	d072      	beq.n	80132e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80131fe:	1e5a      	subs	r2, r3, #1
 8013200:	fb0e 4602 	mla	r6, lr, r2, r4
 8013204:	1436      	asrs	r6, r6, #16
 8013206:	d462      	bmi.n	80132ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013208:	4546      	cmp	r6, r8
 801320a:	da60      	bge.n	80132ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801320c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801320e:	fb06 0202 	mla	r2, r6, r2, r0
 8013212:	1412      	asrs	r2, r2, #16
 8013214:	d45b      	bmi.n	80132ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013216:	42ba      	cmp	r2, r7
 8013218:	da59      	bge.n	80132ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801321a:	1cef      	adds	r7, r5, #3
 801321c:	4699      	mov	r9, r3
 801321e:	f1b9 0f00 	cmp.w	r9, #0
 8013222:	dd5a      	ble.n	80132da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8013224:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013228:	1426      	asrs	r6, r4, #16
 801322a:	1402      	asrs	r2, r0, #16
 801322c:	fb08 6202 	mla	r2, r8, r2, r6
 8013230:	9e01      	ldr	r6, [sp, #4]
 8013232:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013236:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801323a:	d041      	beq.n	80132c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801323c:	9a03      	ldr	r2, [sp, #12]
 801323e:	fa5f fb86 	uxtb.w	fp, r6
 8013242:	fb02 f808 	mul.w	r8, r2, r8
 8013246:	f108 0201 	add.w	r2, r8, #1
 801324a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801324e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013252:	1212      	asrs	r2, r2, #8
 8013254:	fa1f fa82 	uxth.w	sl, r2
 8013258:	43d2      	mvns	r2, r2
 801325a:	fb1b fb0a 	smulbb	fp, fp, sl
 801325e:	b2d2      	uxtb	r2, r2
 8013260:	fb08 b802 	mla	r8, r8, r2, fp
 8013264:	fa1f f888 	uxth.w	r8, r8
 8013268:	f108 0b01 	add.w	fp, r8, #1
 801326c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013270:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013274:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013278:	fb1b fb0a 	smulbb	fp, fp, sl
 801327c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013280:	fb16 fa0a 	smulbb	sl, r6, sl
 8013284:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013288:	f807 8c03 	strb.w	r8, [r7, #-3]
 801328c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013290:	fb06 aa02 	mla	sl, r6, r2, sl
 8013294:	fb08 b802 	mla	r8, r8, r2, fp
 8013298:	fa1f fa8a 	uxth.w	sl, sl
 801329c:	fa1f f888 	uxth.w	r8, r8
 80132a0:	f10a 0601 	add.w	r6, sl, #1
 80132a4:	f108 0b01 	add.w	fp, r8, #1
 80132a8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80132ac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80132b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80132b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80132b8:	f807 ac01 	strb.w	sl, [r7, #-1]
 80132bc:	f807 8c02 	strb.w	r8, [r7, #-2]
 80132c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80132c2:	4474      	add	r4, lr
 80132c4:	3703      	adds	r7, #3
 80132c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80132ca:	4410      	add	r0, r2
 80132cc:	e7a7      	b.n	801321e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80132ce:	f04f 0800 	mov.w	r8, #0
 80132d2:	eba3 0208 	sub.w	r2, r3, r8
 80132d6:	2a00      	cmp	r2, #0
 80132d8:	dc3b      	bgt.n	8013352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80132da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80132e2:	441d      	add	r5, r3
 80132e4:	2900      	cmp	r1, #0
 80132e6:	f340 8091 	ble.w	801340c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80132ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80132ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80132f4:	3901      	subs	r1, #1
 80132f6:	eeb0 6a62 	vmov.f32	s12, s5
 80132fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80132fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013302:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013306:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801330a:	eeb0 6a43 	vmov.f32	s12, s6
 801330e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013312:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8013316:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801331a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801331e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013322:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013326:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801332a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801332e:	ee12 2a90 	vmov	r2, s5
 8013332:	eef0 2a47 	vmov.f32	s5, s14
 8013336:	fb92 fef3 	sdiv	lr, r2, r3
 801333a:	ee13 2a10 	vmov	r2, s6
 801333e:	eeb0 3a67 	vmov.f32	s6, s15
 8013342:	fb92 f3f3 	sdiv	r3, r2, r3
 8013346:	9a02      	ldr	r2, [sp, #8]
 8013348:	9312      	str	r3, [sp, #72]	@ 0x48
 801334a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801334c:	bf08      	it	eq
 801334e:	4613      	moveq	r3, r2
 8013350:	e734      	b.n	80131bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013352:	1427      	asrs	r7, r4, #16
 8013354:	d454      	bmi.n	8013400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013356:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801335a:	42be      	cmp	r6, r7
 801335c:	dd50      	ble.n	8013400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801335e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013362:	d44d      	bmi.n	8013400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013364:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013368:	454a      	cmp	r2, r9
 801336a:	dd49      	ble.n	8013400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801336c:	b236      	sxth	r6, r6
 801336e:	9a01      	ldr	r2, [sp, #4]
 8013370:	fb09 7606 	mla	r6, r9, r6, r7
 8013374:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013378:	0e3a      	lsrs	r2, r7, #24
 801337a:	d041      	beq.n	8013400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801337c:	9e03      	ldr	r6, [sp, #12]
 801337e:	fa5f fb87 	uxtb.w	fp, r7
 8013382:	4372      	muls	r2, r6
 8013384:	1c56      	adds	r6, r2, #1
 8013386:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801338a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801338e:	1212      	asrs	r2, r2, #8
 8013390:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013394:	fa1f fa82 	uxth.w	sl, r2
 8013398:	43d2      	mvns	r2, r2
 801339a:	fb1b fb0a 	smulbb	fp, fp, sl
 801339e:	b2d2      	uxtb	r2, r2
 80133a0:	fb09 b902 	mla	r9, r9, r2, fp
 80133a4:	fa1f f989 	uxth.w	r9, r9
 80133a8:	f109 0b01 	add.w	fp, r9, #1
 80133ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133b0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80133b4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80133b8:	fb1b fb0a 	smulbb	fp, fp, sl
 80133bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133c0:	fb17 fa0a 	smulbb	sl, r7, sl
 80133c4:	f805 9006 	strb.w	r9, [r5, r6]
 80133c8:	442e      	add	r6, r5
 80133ca:	78b7      	ldrb	r7, [r6, #2]
 80133cc:	f896 9001 	ldrb.w	r9, [r6, #1]
 80133d0:	fb07 aa02 	mla	sl, r7, r2, sl
 80133d4:	fb09 b902 	mla	r9, r9, r2, fp
 80133d8:	fa1f fa8a 	uxth.w	sl, sl
 80133dc:	fa1f f989 	uxth.w	r9, r9
 80133e0:	f10a 0701 	add.w	r7, sl, #1
 80133e4:	f109 0b01 	add.w	fp, r9, #1
 80133e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80133ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80133f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133f8:	f886 a002 	strb.w	sl, [r6, #2]
 80133fc:	f886 9001 	strb.w	r9, [r6, #1]
 8013400:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013402:	4474      	add	r4, lr
 8013404:	f108 0801 	add.w	r8, r8, #1
 8013408:	4410      	add	r0, r2
 801340a:	e762      	b.n	80132d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801340c:	b005      	add	sp, #20
 801340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013412 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013416:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8013418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801341c:	9201      	str	r2, [sp, #4]
 801341e:	6860      	ldr	r0, [r4, #4]
 8013420:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8013424:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8013428:	fb00 2505 	mla	r5, r0, r5, r2
 801342c:	6822      	ldr	r2, [r4, #0]
 801342e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013432:	4415      	add	r5, r2
 8013434:	f8dc 2000 	ldr.w	r2, [ip]
 8013438:	9200      	str	r2, [sp, #0]
 801343a:	2900      	cmp	r1, #0
 801343c:	dc03      	bgt.n	8013446 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801343e:	9a01      	ldr	r2, [sp, #4]
 8013440:	2a00      	cmp	r2, #0
 8013442:	f340 812b 	ble.w	801369c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013446:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013448:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801344c:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8013450:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013452:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013456:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801345a:	2b00      	cmp	r3, #0
 801345c:	dd0e      	ble.n	801347c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801345e:	1422      	asrs	r2, r4, #16
 8013460:	d405      	bmi.n	801346e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013462:	4572      	cmp	r2, lr
 8013464:	da03      	bge.n	801346e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013466:	1402      	asrs	r2, r0, #16
 8013468:	d401      	bmi.n	801346e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801346a:	42ba      	cmp	r2, r7
 801346c:	db07      	blt.n	801347e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801346e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013470:	3b01      	subs	r3, #1
 8013472:	3503      	adds	r5, #3
 8013474:	4414      	add	r4, r2
 8013476:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013478:	4410      	add	r0, r2
 801347a:	e7ee      	b.n	801345a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801347c:	d06f      	beq.n	801355e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801347e:	1e5a      	subs	r2, r3, #1
 8013480:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8013482:	fb06 4602 	mla	r6, r6, r2, r4
 8013486:	1436      	asrs	r6, r6, #16
 8013488:	d45e      	bmi.n	8013548 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801348a:	4576      	cmp	r6, lr
 801348c:	da5c      	bge.n	8013548 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801348e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8013490:	fb06 0202 	mla	r2, r6, r2, r0
 8013494:	1412      	asrs	r2, r2, #16
 8013496:	d457      	bmi.n	8013548 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013498:	42ba      	cmp	r2, r7
 801349a:	da55      	bge.n	8013548 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801349c:	1cee      	adds	r6, r5, #3
 801349e:	469a      	mov	sl, r3
 80134a0:	f1ba 0f00 	cmp.w	sl, #0
 80134a4:	dd56      	ble.n	8013554 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80134a6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80134aa:	1427      	asrs	r7, r4, #16
 80134ac:	1402      	asrs	r2, r0, #16
 80134ae:	fb0e 7202 	mla	r2, lr, r2, r7
 80134b2:	9f00      	ldr	r7, [sp, #0]
 80134b4:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80134b8:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80134bc:	d03c      	beq.n	8013538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80134be:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80134c2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80134c6:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80134ca:	fa5f f28e 	uxtb.w	r2, lr
 80134ce:	b2ff      	uxtb	r7, r7
 80134d0:	f000 80dd 	beq.w	801368e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80134d4:	fa1f f882 	uxth.w	r8, r2
 80134d8:	43d2      	mvns	r2, r2
 80134da:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80134de:	fb17 f708 	smulbb	r7, r7, r8
 80134e2:	b2d2      	uxtb	r2, r2
 80134e4:	fb19 f908 	smulbb	r9, r9, r8
 80134e8:	fb0e 7702 	mla	r7, lr, r2, r7
 80134ec:	fb1b f808 	smulbb	r8, fp, r8
 80134f0:	b2bf      	uxth	r7, r7
 80134f2:	f107 0e01 	add.w	lr, r7, #1
 80134f6:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80134fa:	123f      	asrs	r7, r7, #8
 80134fc:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013500:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8013504:	fb07 9902 	mla	r9, r7, r2, r9
 8013508:	fa1f f989 	uxth.w	r9, r9
 801350c:	f109 0701 	add.w	r7, r9, #1
 8013510:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8013514:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013518:	fb07 8802 	mla	r8, r7, r2, r8
 801351c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013520:	fa1f f888 	uxth.w	r8, r8
 8013524:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013528:	f108 0201 	add.w	r2, r8, #1
 801352c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013530:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013534:	f806 8c01 	strb.w	r8, [r6, #-1]
 8013538:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801353a:	3603      	adds	r6, #3
 801353c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013540:	4414      	add	r4, r2
 8013542:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013544:	4410      	add	r0, r2
 8013546:	e7ab      	b.n	80134a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013548:	f04f 0e00 	mov.w	lr, #0
 801354c:	eba3 020e 	sub.w	r2, r3, lr
 8013550:	2a00      	cmp	r2, #0
 8013552:	dc3d      	bgt.n	80135d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8013554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801355c:	441d      	add	r5, r3
 801355e:	2900      	cmp	r1, #0
 8013560:	f340 809c 	ble.w	801369c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013564:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801356a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801356e:	3901      	subs	r1, #1
 8013570:	eeb0 6a62 	vmov.f32	s12, s5
 8013574:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013578:	ee31 1a05 	vadd.f32	s2, s2, s10
 801357c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013580:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8013584:	eeb0 6a43 	vmov.f32	s12, s6
 8013588:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801358c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8013590:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013594:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013598:	ee77 2a62 	vsub.f32	s5, s14, s5
 801359c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80135a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80135a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80135a8:	ee12 2a90 	vmov	r2, s5
 80135ac:	eef0 2a47 	vmov.f32	s5, s14
 80135b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80135b4:	ee13 2a10 	vmov	r2, s6
 80135b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80135ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135bc:	eeb0 3a67 	vmov.f32	s6, s15
 80135c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80135c4:	9a01      	ldr	r2, [sp, #4]
 80135c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80135c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135ca:	bf08      	it	eq
 80135cc:	4613      	moveq	r3, r2
 80135ce:	e734      	b.n	801343a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80135d0:	1427      	asrs	r7, r4, #16
 80135d2:	d44d      	bmi.n	8013670 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80135d4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80135d8:	42be      	cmp	r6, r7
 80135da:	dd49      	ble.n	8013670 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80135dc:	ea5f 4820 	movs.w	r8, r0, asr #16
 80135e0:	d446      	bmi.n	8013670 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80135e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80135e6:	4542      	cmp	r2, r8
 80135e8:	dd42      	ble.n	8013670 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80135ea:	b236      	sxth	r6, r6
 80135ec:	9a00      	ldr	r2, [sp, #0]
 80135ee:	fb08 7606 	mla	r6, r8, r6, r7
 80135f2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80135f6:	0e3a      	lsrs	r2, r7, #24
 80135f8:	d03a      	beq.n	8013670 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80135fa:	2aff      	cmp	r2, #255	@ 0xff
 80135fc:	b2d6      	uxtb	r6, r2
 80135fe:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013602:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8013606:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801360a:	b2ff      	uxtb	r7, r7
 801360c:	d037      	beq.n	801367e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801360e:	fa1f f986 	uxth.w	r9, r6
 8013612:	4472      	add	r2, lr
 8013614:	43f6      	mvns	r6, r6
 8013616:	f815 8002 	ldrb.w	r8, [r5, r2]
 801361a:	fb17 f709 	smulbb	r7, r7, r9
 801361e:	fb1a fa09 	smulbb	sl, sl, r9
 8013622:	b2f6      	uxtb	r6, r6
 8013624:	fb1b f909 	smulbb	r9, fp, r9
 8013628:	fb08 7706 	mla	r7, r8, r6, r7
 801362c:	b2bf      	uxth	r7, r7
 801362e:	f107 0801 	add.w	r8, r7, #1
 8013632:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8013636:	123f      	asrs	r7, r7, #8
 8013638:	54af      	strb	r7, [r5, r2]
 801363a:	442a      	add	r2, r5
 801363c:	7857      	ldrb	r7, [r2, #1]
 801363e:	fb07 aa06 	mla	sl, r7, r6, sl
 8013642:	fa1f fa8a 	uxth.w	sl, sl
 8013646:	f10a 0701 	add.w	r7, sl, #1
 801364a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801364e:	7897      	ldrb	r7, [r2, #2]
 8013650:	fb07 9906 	mla	r9, r7, r6, r9
 8013654:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013658:	fa1f f989 	uxth.w	r9, r9
 801365c:	f882 a001 	strb.w	sl, [r2, #1]
 8013660:	f109 0601 	add.w	r6, r9, #1
 8013664:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8013668:	ea4f 2929 	mov.w	r9, r9, asr #8
 801366c:	f882 9002 	strb.w	r9, [r2, #2]
 8013670:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013672:	f10e 0e01 	add.w	lr, lr, #1
 8013676:	4414      	add	r4, r2
 8013678:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801367a:	4410      	add	r0, r2
 801367c:	e766      	b.n	801354c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801367e:	4472      	add	r2, lr
 8013680:	54af      	strb	r7, [r5, r2]
 8013682:	442a      	add	r2, r5
 8013684:	f882 a001 	strb.w	sl, [r2, #1]
 8013688:	f882 b002 	strb.w	fp, [r2, #2]
 801368c:	e7f0      	b.n	8013670 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801368e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013692:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013696:	f806 bc01 	strb.w	fp, [r6, #-1]
 801369a:	e74d      	b.n	8013538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801369c:	b003      	add	sp, #12
 801369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080136a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80136a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a8:	b087      	sub	sp, #28
 80136aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80136ae:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80136b0:	9204      	str	r2, [sp, #16]
 80136b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80136b6:	6860      	ldr	r0, [r4, #4]
 80136b8:	9205      	str	r2, [sp, #20]
 80136ba:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80136be:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80136c2:	9101      	str	r1, [sp, #4]
 80136c4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 80136c8:	fb00 2505 	mla	r5, r0, r5, r2
 80136cc:	6822      	ldr	r2, [r4, #0]
 80136ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136d2:	4415      	add	r5, r2
 80136d4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80136d8:	3201      	adds	r2, #1
 80136da:	f022 0201 	bic.w	r2, r2, #1
 80136de:	9202      	str	r2, [sp, #8]
 80136e0:	f8dc 2000 	ldr.w	r2, [ip]
 80136e4:	9203      	str	r2, [sp, #12]
 80136e6:	9a01      	ldr	r2, [sp, #4]
 80136e8:	2a00      	cmp	r2, #0
 80136ea:	dc03      	bgt.n	80136f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80136ec:	9a04      	ldr	r2, [sp, #16]
 80136ee:	2a00      	cmp	r2, #0
 80136f0:	f340 8135 	ble.w	801395e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80136f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80136f6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80136fa:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80136fe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013700:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013704:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8013708:	2b00      	cmp	r3, #0
 801370a:	dd0d      	ble.n	8013728 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801370c:	1422      	asrs	r2, r4, #16
 801370e:	d405      	bmi.n	801371c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013710:	4542      	cmp	r2, r8
 8013712:	da03      	bge.n	801371c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013714:	1402      	asrs	r2, r0, #16
 8013716:	d401      	bmi.n	801371c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013718:	42ba      	cmp	r2, r7
 801371a:	db06      	blt.n	801372a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801371c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801371e:	4474      	add	r4, lr
 8013720:	3b01      	subs	r3, #1
 8013722:	3503      	adds	r5, #3
 8013724:	4410      	add	r0, r2
 8013726:	e7ef      	b.n	8013708 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013728:	d077      	beq.n	801381a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801372a:	1e5a      	subs	r2, r3, #1
 801372c:	fb0e 4602 	mla	r6, lr, r2, r4
 8013730:	1436      	asrs	r6, r6, #16
 8013732:	d469      	bmi.n	8013808 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013734:	4546      	cmp	r6, r8
 8013736:	da67      	bge.n	8013808 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013738:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801373a:	fb06 0202 	mla	r2, r6, r2, r0
 801373e:	1412      	asrs	r2, r2, #16
 8013740:	d462      	bmi.n	8013808 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013742:	42ba      	cmp	r2, r7
 8013744:	da60      	bge.n	8013808 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013746:	1cee      	adds	r6, r5, #3
 8013748:	4699      	mov	r9, r3
 801374a:	f1b9 0f00 	cmp.w	r9, #0
 801374e:	dd5f      	ble.n	8013810 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8013750:	1422      	asrs	r2, r4, #16
 8013752:	9902      	ldr	r1, [sp, #8]
 8013754:	1407      	asrs	r7, r0, #16
 8013756:	fb01 2707 	mla	r7, r1, r7, r2
 801375a:	9903      	ldr	r1, [sp, #12]
 801375c:	087a      	lsrs	r2, r7, #1
 801375e:	5c8a      	ldrb	r2, [r1, r2]
 8013760:	07f9      	lsls	r1, r7, #31
 8013762:	bf54      	ite	pl
 8013764:	f002 020f 	andpl.w	r2, r2, #15
 8013768:	1112      	asrmi	r2, r2, #4
 801376a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801376e:	b2d2      	uxtb	r2, r2
 8013770:	2a00      	cmp	r2, #0
 8013772:	d042      	beq.n	80137fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8013774:	497b      	ldr	r1, [pc, #492]	@ (8013964 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8013776:	680f      	ldr	r7, [r1, #0]
 8013778:	9905      	ldr	r1, [sp, #20]
 801377a:	fa5f fb87 	uxtb.w	fp, r7
 801377e:	434a      	muls	r2, r1
 8013780:	f102 0801 	add.w	r8, r2, #1
 8013784:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8013788:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801378c:	1212      	asrs	r2, r2, #8
 801378e:	fa1f fa82 	uxth.w	sl, r2
 8013792:	43d2      	mvns	r2, r2
 8013794:	fb1b fb0a 	smulbb	fp, fp, sl
 8013798:	b2d2      	uxtb	r2, r2
 801379a:	fb08 b802 	mla	r8, r8, r2, fp
 801379e:	fa1f f888 	uxth.w	r8, r8
 80137a2:	f108 0b01 	add.w	fp, r8, #1
 80137a6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80137aa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80137ae:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80137b2:	fb1b fb0a 	smulbb	fp, fp, sl
 80137b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80137ba:	fb17 fa0a 	smulbb	sl, r7, sl
 80137be:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80137c2:	f806 8c03 	strb.w	r8, [r6, #-3]
 80137c6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80137ca:	fb07 aa02 	mla	sl, r7, r2, sl
 80137ce:	fb08 b802 	mla	r8, r8, r2, fp
 80137d2:	fa1f fa8a 	uxth.w	sl, sl
 80137d6:	fa1f f888 	uxth.w	r8, r8
 80137da:	f10a 0701 	add.w	r7, sl, #1
 80137de:	f108 0b01 	add.w	fp, r8, #1
 80137e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80137e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80137ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80137ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80137f2:	f806 ac01 	strb.w	sl, [r6, #-1]
 80137f6:	f806 8c02 	strb.w	r8, [r6, #-2]
 80137fa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80137fc:	4474      	add	r4, lr
 80137fe:	3603      	adds	r6, #3
 8013800:	f109 39ff 	add.w	r9, r9, #4294967295
 8013804:	4410      	add	r0, r2
 8013806:	e7a0      	b.n	801374a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8013808:	2700      	movs	r7, #0
 801380a:	1bda      	subs	r2, r3, r7
 801380c:	2a00      	cmp	r2, #0
 801380e:	dc3e      	bgt.n	801388e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8013810:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013814:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013818:	441d      	add	r5, r3
 801381a:	9b01      	ldr	r3, [sp, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	f340 809e 	ble.w	801395e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8013822:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013826:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013828:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801382c:	eeb0 6a62 	vmov.f32	s12, s5
 8013830:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013834:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013838:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801383c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8013840:	eeb0 6a43 	vmov.f32	s12, s6
 8013844:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013848:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801384c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013850:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013854:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013858:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801385c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013860:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013864:	ee12 2a90 	vmov	r2, s5
 8013868:	eef0 2a47 	vmov.f32	s5, s14
 801386c:	fb92 fef3 	sdiv	lr, r2, r3
 8013870:	ee13 2a10 	vmov	r2, s6
 8013874:	eeb0 3a67 	vmov.f32	s6, s15
 8013878:	fb92 f3f3 	sdiv	r3, r2, r3
 801387c:	9314      	str	r3, [sp, #80]	@ 0x50
 801387e:	9b01      	ldr	r3, [sp, #4]
 8013880:	9a04      	ldr	r2, [sp, #16]
 8013882:	3b01      	subs	r3, #1
 8013884:	9301      	str	r3, [sp, #4]
 8013886:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013888:	bf08      	it	eq
 801388a:	4613      	moveq	r3, r2
 801388c:	e72b      	b.n	80136e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801388e:	1426      	asrs	r6, r4, #16
 8013890:	d460      	bmi.n	8013954 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013892:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013896:	42b2      	cmp	r2, r6
 8013898:	dd5c      	ble.n	8013954 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801389a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801389e:	d459      	bmi.n	8013954 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80138a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80138a4:	4542      	cmp	r2, r8
 80138a6:	dd55      	ble.n	8013954 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80138a8:	9a02      	ldr	r2, [sp, #8]
 80138aa:	9903      	ldr	r1, [sp, #12]
 80138ac:	fb08 6602 	mla	r6, r8, r2, r6
 80138b0:	0872      	lsrs	r2, r6, #1
 80138b2:	07f6      	lsls	r6, r6, #31
 80138b4:	5c8a      	ldrb	r2, [r1, r2]
 80138b6:	bf54      	ite	pl
 80138b8:	f002 020f 	andpl.w	r2, r2, #15
 80138bc:	1112      	asrmi	r2, r2, #4
 80138be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80138c2:	b2d2      	uxtb	r2, r2
 80138c4:	2a00      	cmp	r2, #0
 80138c6:	d045      	beq.n	8013954 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80138c8:	4926      	ldr	r1, [pc, #152]	@ (8013964 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80138ca:	f8d1 8000 	ldr.w	r8, [r1]
 80138ce:	9905      	ldr	r1, [sp, #20]
 80138d0:	fa5f fb88 	uxtb.w	fp, r8
 80138d4:	434a      	muls	r2, r1
 80138d6:	1c56      	adds	r6, r2, #1
 80138d8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80138dc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80138e0:	1212      	asrs	r2, r2, #8
 80138e2:	f815 9006 	ldrb.w	r9, [r5, r6]
 80138e6:	fa1f fa82 	uxth.w	sl, r2
 80138ea:	43d2      	mvns	r2, r2
 80138ec:	fb1b fb0a 	smulbb	fp, fp, sl
 80138f0:	b2d2      	uxtb	r2, r2
 80138f2:	fb09 b902 	mla	r9, r9, r2, fp
 80138f6:	fa1f f989 	uxth.w	r9, r9
 80138fa:	f109 0b01 	add.w	fp, r9, #1
 80138fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013902:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8013906:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801390a:	fb1b fb0a 	smulbb	fp, fp, sl
 801390e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013912:	fb18 fa0a 	smulbb	sl, r8, sl
 8013916:	f805 9006 	strb.w	r9, [r5, r6]
 801391a:	442e      	add	r6, r5
 801391c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8013920:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013924:	fb08 aa02 	mla	sl, r8, r2, sl
 8013928:	fb09 b902 	mla	r9, r9, r2, fp
 801392c:	fa1f fa8a 	uxth.w	sl, sl
 8013930:	fa1f f989 	uxth.w	r9, r9
 8013934:	f10a 0801 	add.w	r8, sl, #1
 8013938:	f109 0b01 	add.w	fp, r9, #1
 801393c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8013940:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013944:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013948:	ea4f 2929 	mov.w	r9, r9, asr #8
 801394c:	f886 a002 	strb.w	sl, [r6, #2]
 8013950:	f886 9001 	strb.w	r9, [r6, #1]
 8013954:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013956:	4474      	add	r4, lr
 8013958:	3701      	adds	r7, #1
 801395a:	4410      	add	r0, r2
 801395c:	e755      	b.n	801380a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801395e:	b007      	add	sp, #28
 8013960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013964:	24065a58 	.word	0x24065a58

08013968 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801396c:	b085      	sub	sp, #20
 801396e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013972:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013974:	9203      	str	r2, [sp, #12]
 8013976:	6860      	ldr	r0, [r4, #4]
 8013978:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801397c:	9100      	str	r1, [sp, #0]
 801397e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8013982:	fb00 2606 	mla	r6, r0, r6, r2
 8013986:	6822      	ldr	r2, [r4, #0]
 8013988:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801398c:	4416      	add	r6, r2
 801398e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013992:	3201      	adds	r2, #1
 8013994:	f022 0201 	bic.w	r2, r2, #1
 8013998:	9201      	str	r2, [sp, #4]
 801399a:	f8dc 2000 	ldr.w	r2, [ip]
 801399e:	9202      	str	r2, [sp, #8]
 80139a0:	9a00      	ldr	r2, [sp, #0]
 80139a2:	2a00      	cmp	r2, #0
 80139a4:	dc03      	bgt.n	80139ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80139a6:	9a03      	ldr	r2, [sp, #12]
 80139a8:	2a00      	cmp	r2, #0
 80139aa:	f340 8140 	ble.w	8013c2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80139ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80139b0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80139b4:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 80139b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80139ba:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80139be:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	dd0e      	ble.n	80139e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80139c6:	142a      	asrs	r2, r5, #16
 80139c8:	d405      	bmi.n	80139d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80139ca:	4572      	cmp	r2, lr
 80139cc:	da03      	bge.n	80139d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80139ce:	1422      	asrs	r2, r4, #16
 80139d0:	d401      	bmi.n	80139d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80139d2:	42ba      	cmp	r2, r7
 80139d4:	db07      	blt.n	80139e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80139d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80139d8:	3b01      	subs	r3, #1
 80139da:	3603      	adds	r6, #3
 80139dc:	4415      	add	r5, r2
 80139de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80139e0:	4414      	add	r4, r2
 80139e2:	e7ee      	b.n	80139c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80139e4:	d072      	beq.n	8013acc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80139e6:	1e5a      	subs	r2, r3, #1
 80139e8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80139ea:	fb00 5002 	mla	r0, r0, r2, r5
 80139ee:	1400      	asrs	r0, r0, #16
 80139f0:	d463      	bmi.n	8013aba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80139f2:	4570      	cmp	r0, lr
 80139f4:	da61      	bge.n	8013aba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80139f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80139f8:	fb00 4202 	mla	r2, r0, r2, r4
 80139fc:	1412      	asrs	r2, r2, #16
 80139fe:	d45c      	bmi.n	8013aba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8013a00:	42ba      	cmp	r2, r7
 8013a02:	da5a      	bge.n	8013aba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8013a04:	1cf0      	adds	r0, r6, #3
 8013a06:	469a      	mov	sl, r3
 8013a08:	f1ba 0f00 	cmp.w	sl, #0
 8013a0c:	dd59      	ble.n	8013ac2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8013a0e:	142a      	asrs	r2, r5, #16
 8013a10:	9901      	ldr	r1, [sp, #4]
 8013a12:	1427      	asrs	r7, r4, #16
 8013a14:	fb01 2707 	mla	r7, r1, r7, r2
 8013a18:	9902      	ldr	r1, [sp, #8]
 8013a1a:	087a      	lsrs	r2, r7, #1
 8013a1c:	5c8a      	ldrb	r2, [r1, r2]
 8013a1e:	07f9      	lsls	r1, r7, #31
 8013a20:	bf54      	ite	pl
 8013a22:	f002 020f 	andpl.w	r2, r2, #15
 8013a26:	1112      	asrmi	r2, r2, #4
 8013a28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013a2c:	b2d2      	uxtb	r2, r2
 8013a2e:	2a00      	cmp	r2, #0
 8013a30:	d03b      	beq.n	8013aaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013a32:	4980      	ldr	r1, [pc, #512]	@ (8013c34 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8013a34:	2aff      	cmp	r2, #255	@ 0xff
 8013a36:	680f      	ldr	r7, [r1, #0]
 8013a38:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013a3c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8013a40:	b2ff      	uxtb	r7, r7
 8013a42:	f000 80ed 	beq.w	8013c20 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8013a46:	fa1f f882 	uxth.w	r8, r2
 8013a4a:	43d2      	mvns	r2, r2
 8013a4c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8013a50:	fb17 f708 	smulbb	r7, r7, r8
 8013a54:	b2d2      	uxtb	r2, r2
 8013a56:	fb19 f908 	smulbb	r9, r9, r8
 8013a5a:	fb0e 7702 	mla	r7, lr, r2, r7
 8013a5e:	fb1b f808 	smulbb	r8, fp, r8
 8013a62:	b2bf      	uxth	r7, r7
 8013a64:	f107 0e01 	add.w	lr, r7, #1
 8013a68:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8013a6c:	123f      	asrs	r7, r7, #8
 8013a6e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8013a72:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8013a76:	fb07 9902 	mla	r9, r7, r2, r9
 8013a7a:	fa1f f989 	uxth.w	r9, r9
 8013a7e:	f109 0701 	add.w	r7, r9, #1
 8013a82:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8013a86:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8013a8a:	fb07 8802 	mla	r8, r7, r2, r8
 8013a8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013a92:	fa1f f888 	uxth.w	r8, r8
 8013a96:	f800 9c02 	strb.w	r9, [r0, #-2]
 8013a9a:	f108 0201 	add.w	r2, r8, #1
 8013a9e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013aa2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013aa6:	f800 8c01 	strb.w	r8, [r0, #-1]
 8013aaa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013aac:	3003      	adds	r0, #3
 8013aae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ab2:	4415      	add	r5, r2
 8013ab4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013ab6:	4414      	add	r4, r2
 8013ab8:	e7a6      	b.n	8013a08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013aba:	2700      	movs	r7, #0
 8013abc:	1bda      	subs	r2, r3, r7
 8013abe:	2a00      	cmp	r2, #0
 8013ac0:	dc40      	bgt.n	8013b44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8013ac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013aca:	441e      	add	r6, r3
 8013acc:	9b00      	ldr	r3, [sp, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f340 80ad 	ble.w	8013c2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8013ad4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ada:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013ade:	eeb0 6a62 	vmov.f32	s12, s5
 8013ae2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013ae6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013aea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013aee:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8013af2:	eeb0 6a43 	vmov.f32	s12, s6
 8013af6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013afa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8013afe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013b02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013b06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013b0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013b0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013b12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013b16:	ee12 2a90 	vmov	r2, s5
 8013b1a:	eef0 2a47 	vmov.f32	s5, s14
 8013b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b22:	ee13 2a10 	vmov	r2, s6
 8013b26:	9311      	str	r3, [sp, #68]	@ 0x44
 8013b28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b2a:	eeb0 3a67 	vmov.f32	s6, s15
 8013b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b32:	9312      	str	r3, [sp, #72]	@ 0x48
 8013b34:	9b00      	ldr	r3, [sp, #0]
 8013b36:	9a03      	ldr	r2, [sp, #12]
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b3e:	bf08      	it	eq
 8013b40:	4613      	moveq	r3, r2
 8013b42:	e72d      	b.n	80139a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8013b44:	1428      	asrs	r0, r5, #16
 8013b46:	d45c      	bmi.n	8013c02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013b48:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013b4c:	4282      	cmp	r2, r0
 8013b4e:	dd58      	ble.n	8013c02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013b50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8013b54:	d455      	bmi.n	8013c02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013b56:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013b5a:	4572      	cmp	r2, lr
 8013b5c:	dd51      	ble.n	8013c02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013b5e:	9a01      	ldr	r2, [sp, #4]
 8013b60:	9902      	ldr	r1, [sp, #8]
 8013b62:	fb0e 0002 	mla	r0, lr, r2, r0
 8013b66:	0842      	lsrs	r2, r0, #1
 8013b68:	07c0      	lsls	r0, r0, #31
 8013b6a:	5c8a      	ldrb	r2, [r1, r2]
 8013b6c:	bf54      	ite	pl
 8013b6e:	f002 020f 	andpl.w	r2, r2, #15
 8013b72:	1112      	asrmi	r2, r2, #4
 8013b74:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013b78:	b2d2      	uxtb	r2, r2
 8013b7a:	2a00      	cmp	r2, #0
 8013b7c:	d041      	beq.n	8013c02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013b7e:	492d      	ldr	r1, [pc, #180]	@ (8013c34 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8013b80:	2aff      	cmp	r2, #255	@ 0xff
 8013b82:	6808      	ldr	r0, [r1, #0]
 8013b84:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8013b88:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8013b8c:	fa5f fe80 	uxtb.w	lr, r0
 8013b90:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8013b94:	d03b      	beq.n	8013c0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8013b96:	fa1f f982 	uxth.w	r9, r2
 8013b9a:	4438      	add	r0, r7
 8013b9c:	43d2      	mvns	r2, r2
 8013b9e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8013ba2:	fb1e fe09 	smulbb	lr, lr, r9
 8013ba6:	fb1a fa09 	smulbb	sl, sl, r9
 8013baa:	b2d2      	uxtb	r2, r2
 8013bac:	fb1b f909 	smulbb	r9, fp, r9
 8013bb0:	fb08 ee02 	mla	lr, r8, r2, lr
 8013bb4:	fa1f fe8e 	uxth.w	lr, lr
 8013bb8:	f10e 0801 	add.w	r8, lr, #1
 8013bbc:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8013bc0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013bc4:	f806 e000 	strb.w	lr, [r6, r0]
 8013bc8:	4430      	add	r0, r6
 8013bca:	f890 e001 	ldrb.w	lr, [r0, #1]
 8013bce:	fb0e aa02 	mla	sl, lr, r2, sl
 8013bd2:	fa1f fa8a 	uxth.w	sl, sl
 8013bd6:	f10a 0e01 	add.w	lr, sl, #1
 8013bda:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8013bde:	f890 e002 	ldrb.w	lr, [r0, #2]
 8013be2:	fb0e 9902 	mla	r9, lr, r2, r9
 8013be6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013bea:	fa1f f989 	uxth.w	r9, r9
 8013bee:	f880 a001 	strb.w	sl, [r0, #1]
 8013bf2:	f109 0201 	add.w	r2, r9, #1
 8013bf6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8013bfa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013bfe:	f880 9002 	strb.w	r9, [r0, #2]
 8013c02:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013c04:	3701      	adds	r7, #1
 8013c06:	4415      	add	r5, r2
 8013c08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c0a:	4414      	add	r4, r2
 8013c0c:	e756      	b.n	8013abc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013c0e:	4438      	add	r0, r7
 8013c10:	f806 e000 	strb.w	lr, [r6, r0]
 8013c14:	4430      	add	r0, r6
 8013c16:	f880 a001 	strb.w	sl, [r0, #1]
 8013c1a:	f880 b002 	strb.w	fp, [r0, #2]
 8013c1e:	e7f0      	b.n	8013c02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013c20:	f800 7c03 	strb.w	r7, [r0, #-3]
 8013c24:	f800 9c02 	strb.w	r9, [r0, #-2]
 8013c28:	f800 bc01 	strb.w	fp, [r0, #-1]
 8013c2c:	e73d      	b.n	8013aaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013c2e:	b005      	add	sp, #20
 8013c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c34:	24065a58 	.word	0x24065a58

08013c38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8013c38:	4770      	bx	lr

08013c3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8013c3a:	4770      	bx	lr

08013c3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8013c3c:	4770      	bx	lr

08013c3e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8013c3e:	4770      	bx	lr

08013c40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8013c40:	4770      	bx	lr

08013c42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8013c42:	4770      	bx	lr

08013c44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8013c44:	4770      	bx	lr

08013c46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8013c46:	4770      	bx	lr

08013c48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013c48:	4770      	bx	lr

08013c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013c4a:	4770      	bx	lr

08013c4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8013c4c:	4770      	bx	lr

08013c4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8013c4e:	4770      	bx	lr

08013c50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8013c50:	4770      	bx	lr

08013c52 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8013c52:	4770      	bx	lr

08013c54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013c54:	4770      	bx	lr

08013c56 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8013c56:	4770      	bx	lr

08013c58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013c58:	4770      	bx	lr

08013c5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013c5a:	4770      	bx	lr

08013c5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8013c5c:	4770      	bx	lr

08013c5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8013c5e:	4770      	bx	lr

08013c60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8013c60:	4770      	bx	lr

08013c62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8013c62:	4770      	bx	lr

08013c64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013c64:	4770      	bx	lr

08013c66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8013c66:	4770      	bx	lr

08013c68 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8013c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	b087      	sub	sp, #28
 8013c6e:	4615      	mov	r5, r2
 8013c70:	461f      	mov	r7, r3
 8013c72:	b353      	cbz	r3, 8013cca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8013c74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	dd26      	ble.n	8013cca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8013c7c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	dd22      	ble.n	8013cca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8013c84:	6808      	ldr	r0, [r1, #0]
 8013c86:	aa04      	add	r2, sp, #16
 8013c88:	6849      	ldr	r1, [r1, #4]
 8013c8a:	4c1b      	ldr	r4, [pc, #108]	@ (8013cf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8013c8c:	c203      	stmia	r2!, {r0, r1}
 8013c8e:	a804      	add	r0, sp, #16
 8013c90:	f7fb facc 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013c94:	6820      	ldr	r0, [r4, #0]
 8013c96:	6803      	ldr	r3, [r0, #0]
 8013c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c9a:	4798      	blx	r3
 8013c9c:	2fff      	cmp	r7, #255	@ 0xff
 8013c9e:	d016      	beq.n	8013cce <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8013ca0:	f010 0f08 	tst.w	r0, #8
 8013ca4:	6820      	ldr	r0, [r4, #0]
 8013ca6:	d015      	beq.n	8013cd4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8013ca8:	2400      	movs	r4, #0
 8013caa:	6801      	ldr	r1, [r0, #0]
 8013cac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013cb0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013cb4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8013cb8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8013cbc:	9401      	str	r4, [sp, #4]
 8013cbe:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8013cc2:	9400      	str	r4, [sp, #0]
 8013cc4:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	47a0      	blx	r4
 8013cca:	b007      	add	sp, #28
 8013ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cce:	f010 0f02 	tst.w	r0, #2
 8013cd2:	e7e7      	b.n	8013ca4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8013cd4:	6803      	ldr	r3, [r0, #0]
 8013cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cd8:	4798      	blx	r3
 8013cda:	4b08      	ldr	r3, [pc, #32]	@ (8013cfc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8013cdc:	4601      	mov	r1, r0
 8013cde:	4630      	mov	r0, r6
 8013ce0:	881a      	ldrh	r2, [r3, #0]
 8013ce2:	6833      	ldr	r3, [r6, #0]
 8013ce4:	e9cd 5700 	strd	r5, r7, [sp]
 8013ce8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013cea:	ab04      	add	r3, sp, #16
 8013cec:	47a8      	blx	r5
 8013cee:	6820      	ldr	r0, [r4, #0]
 8013cf0:	6803      	ldr	r3, [r0, #0]
 8013cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cf4:	4798      	blx	r3
 8013cf6:	e7e8      	b.n	8013cca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8013cf8:	24065a50 	.word	0x24065a50
 8013cfc:	24065a4a 	.word	0x24065a4a

08013d00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8013d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d04:	b08b      	sub	sp, #44	@ 0x2c
 8013d06:	460d      	mov	r5, r1
 8013d08:	4616      	mov	r6, r2
 8013d0a:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8013d0e:	f1b8 0f00 	cmp.w	r8, #0
 8013d12:	d047      	beq.n	8013da4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8013d14:	6810      	ldr	r0, [r2, #0]
 8013d16:	ac06      	add	r4, sp, #24
 8013d18:	6851      	ldr	r1, [r2, #4]
 8013d1a:	4f51      	ldr	r7, [pc, #324]	@ (8013e60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8013d1c:	c403      	stmia	r4!, {r0, r1}
 8013d1e:	6818      	ldr	r0, [r3, #0]
 8013d20:	ac08      	add	r4, sp, #32
 8013d22:	6859      	ldr	r1, [r3, #4]
 8013d24:	c403      	stmia	r4!, {r0, r1}
 8013d26:	a806      	add	r0, sp, #24
 8013d28:	f7fb fa80 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013d2c:	4631      	mov	r1, r6
 8013d2e:	a808      	add	r0, sp, #32
 8013d30:	f7fb faa4 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013d34:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013d38:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8013d3c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013d40:	6838      	ldr	r0, [r7, #0]
 8013d42:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013d46:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8013d4a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8013d4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013d52:	440d      	add	r5, r1
 8013d54:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013d58:	440a      	add	r2, r1
 8013d5a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013d5e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013d62:	4413      	add	r3, r2
 8013d64:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013d68:	6803      	ldr	r3, [r0, #0]
 8013d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d6c:	4798      	blx	r3
 8013d6e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8013d72:	d01a      	beq.n	8013daa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8013d74:	f010 0f04 	tst.w	r0, #4
 8013d78:	6838      	ldr	r0, [r7, #0]
 8013d7a:	d019      	beq.n	8013db0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	6807      	ldr	r7, [r0, #0]
 8013d80:	b2a4      	uxth	r4, r4
 8013d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d86:	b2b6      	uxth	r6, r6
 8013d88:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8013d8c:	9401      	str	r4, [sp, #4]
 8013d8e:	9600      	str	r6, [sp, #0]
 8013d90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013d94:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8013d98:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013d9c:	9102      	str	r1, [sp, #8]
 8013d9e:	4629      	mov	r1, r5
 8013da0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013da2:	47a0      	blx	r4
 8013da4:	b00b      	add	sp, #44	@ 0x2c
 8013da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013daa:	f010 0f01 	tst.w	r0, #1
 8013dae:	e7e3      	b.n	8013d78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8013db0:	6803      	ldr	r3, [r0, #0]
 8013db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013db4:	4798      	blx	r3
 8013db6:	4a2b      	ldr	r2, [pc, #172]	@ (8013e64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8013db8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8013dbc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8013dc0:	8813      	ldrh	r3, [r2, #0]
 8013dc2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8013dc6:	fb03 f404 	mul.w	r4, r3, r4
 8013dca:	fb03 c101 	mla	r1, r3, r1, ip
 8013dce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013dd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013dd6:	4408      	add	r0, r1
 8013dd8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013ddc:	4404      	add	r4, r0
 8013dde:	d02e      	beq.n	8013e3e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8013de0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8013de4:	1b9b      	subs	r3, r3, r6
 8013de6:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8013dea:	1b96      	subs	r6, r2, r6
 8013dec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013df0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013df4:	42a0      	cmp	r0, r4
 8013df6:	d22d      	bcs.n	8013e54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8013df8:	eb00 0e01 	add.w	lr, r0, r1
 8013dfc:	4570      	cmp	r0, lr
 8013dfe:	d210      	bcs.n	8013e22 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8013e00:	f890 9000 	ldrb.w	r9, [r0]
 8013e04:	f815 2b01 	ldrb.w	r2, [r5], #1
 8013e08:	fb19 f90c 	smulbb	r9, r9, ip
 8013e0c:	fb02 9208 	mla	r2, r2, r8, r9
 8013e10:	b292      	uxth	r2, r2
 8013e12:	f102 0901 	add.w	r9, r2, #1
 8013e16:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8013e1a:	1212      	asrs	r2, r2, #8
 8013e1c:	f800 2b01 	strb.w	r2, [r0], #1
 8013e20:	e7ec      	b.n	8013dfc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8013e22:	4418      	add	r0, r3
 8013e24:	4435      	add	r5, r6
 8013e26:	e7e5      	b.n	8013df4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8013e28:	8813      	ldrh	r3, [r2, #0]
 8013e2a:	1b9b      	subs	r3, r3, r6
 8013e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e30:	4418      	add	r0, r3
 8013e32:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013e36:	1b9b      	subs	r3, r3, r6
 8013e38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e3c:	441d      	add	r5, r3
 8013e3e:	42a0      	cmp	r0, r4
 8013e40:	d208      	bcs.n	8013e54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8013e42:	eb00 0c01 	add.w	ip, r0, r1
 8013e46:	4560      	cmp	r0, ip
 8013e48:	d2ee      	bcs.n	8013e28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8013e4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013e4e:	f800 3b01 	strb.w	r3, [r0], #1
 8013e52:	e7f8      	b.n	8013e46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8013e54:	6838      	ldr	r0, [r7, #0]
 8013e56:	6803      	ldr	r3, [r0, #0]
 8013e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e5a:	4798      	blx	r3
 8013e5c:	e7a2      	b.n	8013da4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8013e5e:	bf00      	nop
 8013e60:	24065a50 	.word	0x24065a50
 8013e64:	24065a4a 	.word	0x24065a4a

08013e68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8013e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	b085      	sub	sp, #20
 8013e6e:	9300      	str	r3, [sp, #0]
 8013e70:	4b41      	ldr	r3, [pc, #260]	@ (8013f78 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d136      	bne.n	8013ee6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8013e78:	4a40      	ldr	r2, [pc, #256]	@ (8013f7c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8013e7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013e7e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d131      	bne.n	8013eea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8013e86:	4b3e      	ldr	r3, [pc, #248]	@ (8013f80 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8013e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e8c:	ac02      	add	r4, sp, #8
 8013e8e:	6808      	ldr	r0, [r1, #0]
 8013e90:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e94:	ab02      	add	r3, sp, #8
 8013e96:	6849      	ldr	r1, [r1, #4]
 8013e98:	4d3a      	ldr	r5, [pc, #232]	@ (8013f84 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8013e9a:	c303      	stmia	r3!, {r0, r1}
 8013e9c:	4669      	mov	r1, sp
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	f7fb f9ec 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013ea4:	4668      	mov	r0, sp
 8013ea6:	f7fb f9c1 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013eaa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013eae:	f8bd 2000 	ldrh.w	r2, [sp]
 8013eb2:	462e      	mov	r6, r5
 8013eb4:	6828      	ldr	r0, [r5, #0]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013ebc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013ec0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8013eca:	6803      	ldr	r3, [r0, #0]
 8013ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ece:	4798      	blx	r3
 8013ed0:	f010 0f01 	tst.w	r0, #1
 8013ed4:	d00b      	beq.n	8013eee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8013ed6:	6828      	ldr	r0, [r5, #0]
 8013ed8:	6803      	ldr	r3, [r0, #0]
 8013eda:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ee0:	4798      	blx	r3
 8013ee2:	b005      	add	sp, #20
 8013ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ee6:	4a26      	ldr	r2, [pc, #152]	@ (8013f80 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8013ee8:	e7c7      	b.n	8013e7a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8013eea:	4b24      	ldr	r3, [pc, #144]	@ (8013f7c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8013eec:	e7cc      	b.n	8013e88 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8013eee:	6830      	ldr	r0, [r6, #0]
 8013ef0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8013ef4:	6803      	ldr	r3, [r0, #0]
 8013ef6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8013efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013efc:	4798      	blx	r3
 8013efe:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8013f02:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013f06:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8013f0a:	fb14 3402 	smlabb	r4, r4, r2, r3
 8013f0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013f12:	4404      	add	r4, r0
 8013f14:	6830      	ldr	r0, [r6, #0]
 8013f16:	6803      	ldr	r3, [r0, #0]
 8013f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f1a:	4798      	blx	r3
 8013f1c:	4917      	ldr	r1, [pc, #92]	@ (8013f7c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8013f1e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8013f22:	880b      	ldrh	r3, [r1, #0]
 8013f24:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8013f28:	fb03 c202 	mla	r2, r3, r2, ip
 8013f2c:	437b      	muls	r3, r7
 8013f2e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8013f32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013f36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f3a:	4410      	add	r0, r2
 8013f3c:	18c2      	adds	r2, r0, r3
 8013f3e:	4290      	cmp	r0, r2
 8013f40:	d214      	bcs.n	8013f6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8013f42:	eb00 0c07 	add.w	ip, r0, r7
 8013f46:	4560      	cmp	r0, ip
 8013f48:	d204      	bcs.n	8013f54 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8013f4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013f4e:	f800 3b01 	strb.w	r3, [r0], #1
 8013f52:	e7f8      	b.n	8013f46 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8013f54:	880b      	ldrh	r3, [r1, #0]
 8013f56:	1b5b      	subs	r3, r3, r5
 8013f58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f5c:	4418      	add	r0, r3
 8013f5e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013f62:	1b5b      	subs	r3, r3, r5
 8013f64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f68:	441c      	add	r4, r3
 8013f6a:	e7e8      	b.n	8013f3e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8013f6c:	6830      	ldr	r0, [r6, #0]
 8013f6e:	6803      	ldr	r3, [r0, #0]
 8013f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f72:	4798      	blx	r3
 8013f74:	e7b5      	b.n	8013ee2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8013f76:	bf00      	nop
 8013f78:	24065a48 	.word	0x24065a48
 8013f7c:	24065a4a 	.word	0x24065a4a
 8013f80:	24065a4c 	.word	0x24065a4c
 8013f84:	24065a50 	.word	0x24065a50

08013f88 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8013f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f8c:	b08f      	sub	sp, #60	@ 0x3c
 8013f8e:	461c      	mov	r4, r3
 8013f90:	9203      	str	r2, [sp, #12]
 8013f92:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8013f96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013f98:	6820      	ldr	r0, [r4, #0]
 8013f9a:	9100      	str	r1, [sp, #0]
 8013f9c:	9204      	str	r2, [sp, #16]
 8013f9e:	aa0a      	add	r2, sp, #40	@ 0x28
 8013fa0:	6861      	ldr	r1, [r4, #4]
 8013fa2:	c203      	stmia	r2!, {r0, r1}
 8013fa4:	6818      	ldr	r0, [r3, #0]
 8013fa6:	aa0c      	add	r2, sp, #48	@ 0x30
 8013fa8:	6859      	ldr	r1, [r3, #4]
 8013faa:	c203      	stmia	r2!, {r0, r1}
 8013fac:	a80a      	add	r0, sp, #40	@ 0x28
 8013fae:	f7fb f93d 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	a80c      	add	r0, sp, #48	@ 0x30
 8013fb6:	f7fb f961 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013fba:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8013fbe:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8013fc2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013fc6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8013fca:	bfdb      	ittet	le
 8013fcc:	b2b3      	uxthle	r3, r6
 8013fce:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8013fd2:	2301      	movgt	r3, #1
 8013fd4:	fb92 f3f3 	sdivle	r3, r2, r3
 8013fd8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8013fdc:	441d      	add	r5, r3
 8013fde:	fb92 f1f3 	sdiv	r1, r2, r3
 8013fe2:	fa1f fc81 	uxth.w	ip, r1
 8013fe6:	3d01      	subs	r5, #1
 8013fe8:	fb0c 2413 	mls	r4, ip, r3, r2
 8013fec:	4661      	mov	r1, ip
 8013fee:	fb14 f406 	smulbb	r4, r4, r6
 8013ff2:	4404      	add	r4, r0
 8013ff4:	fb95 f5f3 	sdiv	r5, r5, r3
 8013ff8:	b2a4      	uxth	r4, r4
 8013ffa:	b131      	cbz	r1, 801400a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8013ffc:	9b03      	ldr	r3, [sp, #12]
 8013ffe:	9900      	ldr	r1, [sp, #0]
 8014000:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014004:	ba1b      	rev	r3, r3
 8014006:	4419      	add	r1, r3
 8014008:	9100      	str	r1, [sp, #0]
 801400a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801400e:	b2ad      	uxth	r5, r5
 8014010:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8014014:	4418      	add	r0, r3
 8014016:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801401a:	00ad      	lsls	r5, r5, #2
 801401c:	441a      	add	r2, r3
 801401e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8014022:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8014026:	9301      	str	r3, [sp, #4]
 8014028:	4b79      	ldr	r3, [pc, #484]	@ (8014210 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801402a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801402e:	6818      	ldr	r0, [r3, #0]
 8014030:	6803      	ldr	r3, [r0, #0]
 8014032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014034:	4798      	blx	r3
 8014036:	4a77      	ldr	r2, [pc, #476]	@ (8014214 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8014038:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801403c:	2c00      	cmp	r4, #0
 801403e:	8813      	ldrh	r3, [r2, #0]
 8014040:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8014044:	9209      	str	r2, [sp, #36]	@ 0x24
 8014046:	fb03 c101 	mla	r1, r3, r1, ip
 801404a:	fb06 f303 	mul.w	r3, r6, r3
 801404e:	bf18      	it	ne
 8014050:	2600      	movne	r6, #0
 8014052:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801405a:	4408      	add	r0, r1
 801405c:	4403      	add	r3, r0
 801405e:	9306      	str	r3, [sp, #24]
 8014060:	f105 0304 	add.w	r3, r5, #4
 8014064:	9305      	str	r3, [sp, #20]
 8014066:	9b01      	ldr	r3, [sp, #4]
 8014068:	bf08      	it	eq
 801406a:	461e      	moveq	r6, r3
 801406c:	2300      	movs	r3, #0
 801406e:	b2b6      	uxth	r6, r6
 8014070:	9302      	str	r3, [sp, #8]
 8014072:	9a06      	ldr	r2, [sp, #24]
 8014074:	4290      	cmp	r0, r2
 8014076:	f080 80c2 	bcs.w	80141fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801407a:	b963      	cbnz	r3, 8014096 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801407c:	9b00      	ldr	r3, [sp, #0]
 801407e:	781a      	ldrb	r2, [r3, #0]
 8014080:	0993      	lsrs	r3, r2, #6
 8014082:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014086:	9202      	str	r2, [sp, #8]
 8014088:	1e5a      	subs	r2, r3, #1
 801408a:	2a02      	cmp	r2, #2
 801408c:	d815      	bhi.n	80140ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801408e:	9a00      	ldr	r2, [sp, #0]
 8014090:	b29b      	uxth	r3, r3
 8014092:	3201      	adds	r2, #1
 8014094:	9200      	str	r2, [sp, #0]
 8014096:	b1b4      	cbz	r4, 80140c6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8014098:	429c      	cmp	r4, r3
 801409a:	bf91      	iteee	ls
 801409c:	1b1c      	subls	r4, r3, r4
 801409e:	1ae4      	subhi	r4, r4, r3
 80140a0:	4635      	movhi	r5, r6
 80140a2:	f04f 0e00 	movhi.w	lr, #0
 80140a6:	bf9b      	ittet	ls
 80140a8:	fa1f fe84 	uxthls.w	lr, r4
 80140ac:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 80140b0:	b2a4      	uxthhi	r4, r4
 80140b2:	2400      	movls	r4, #0
 80140b4:	4673      	mov	r3, lr
 80140b6:	462e      	mov	r6, r5
 80140b8:	e7db      	b.n	8014072 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 80140ba:	9a00      	ldr	r2, [sp, #0]
 80140bc:	9b00      	ldr	r3, [sp, #0]
 80140be:	3202      	adds	r2, #2
 80140c0:	785b      	ldrb	r3, [r3, #1]
 80140c2:	9200      	str	r2, [sp, #0]
 80140c4:	e7e7      	b.n	8014096 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80140c6:	2204      	movs	r2, #4
 80140c8:	9905      	ldr	r1, [sp, #20]
 80140ca:	429e      	cmp	r6, r3
 80140cc:	4615      	mov	r5, r2
 80140ce:	9a02      	ldr	r2, [sp, #8]
 80140d0:	bf94      	ite	ls
 80140d2:	eba3 0e06 	subls.w	lr, r3, r6
 80140d6:	46a6      	movhi	lr, r4
 80140d8:	fb15 1202 	smlabb	r2, r5, r2, r1
 80140dc:	9903      	ldr	r1, [sp, #12]
 80140de:	bf8c      	ite	hi
 80140e0:	1af5      	subhi	r5, r6, r3
 80140e2:	fa1f fe8e 	uxthls.w	lr, lr
 80140e6:	f851 c002 	ldr.w	ip, [r1, r2]
 80140ea:	bf9a      	itte	ls
 80140ec:	4625      	movls	r5, r4
 80140ee:	4632      	movls	r2, r6
 80140f0:	b2ad      	uxthhi	r5, r5
 80140f2:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80140f6:	bf88      	it	hi
 80140f8:	461a      	movhi	r2, r3
 80140fa:	b179      	cbz	r1, 801411c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80140fc:	29ff      	cmp	r1, #255	@ 0xff
 80140fe:	fa5f f98c 	uxtb.w	r9, ip
 8014102:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8014106:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801410a:	d126      	bne.n	801415a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801410c:	9f04      	ldr	r7, [sp, #16]
 801410e:	2fff      	cmp	r7, #255	@ 0xff
 8014110:	d123      	bne.n	801415a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8014112:	4682      	mov	sl, r0
 8014114:	4611      	mov	r1, r2
 8014116:	f10a 0a03 	add.w	sl, sl, #3
 801411a:	b9a9      	cbnz	r1, 8014148 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801411c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014120:	429e      	cmp	r6, r3
 8014122:	4410      	add	r0, r2
 8014124:	d8c6      	bhi.n	80140b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8014126:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801412a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801412e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014130:	1b64      	subs	r4, r4, r5
 8014132:	9a01      	ldr	r2, [sp, #4]
 8014134:	881b      	ldrh	r3, [r3, #0]
 8014136:	b2a4      	uxth	r4, r4
 8014138:	1a9b      	subs	r3, r3, r2
 801413a:	2c00      	cmp	r4, #0
 801413c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014140:	bf18      	it	ne
 8014142:	2500      	movne	r5, #0
 8014144:	4418      	add	r0, r3
 8014146:	e7b5      	b.n	80140b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8014148:	3901      	subs	r1, #1
 801414a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801414e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8014152:	f80a cc01 	strb.w	ip, [sl, #-1]
 8014156:	b289      	uxth	r1, r1
 8014158:	e7dd      	b.n	8014116 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801415a:	9f04      	ldr	r7, [sp, #16]
 801415c:	fb07 fa01 	mul.w	sl, r7, r1
 8014160:	f10a 0101 	add.w	r1, sl, #1
 8014164:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8014168:	1209      	asrs	r1, r1, #8
 801416a:	ea6f 0a01 	mvn.w	sl, r1
 801416e:	b289      	uxth	r1, r1
 8014170:	fb19 f901 	smulbb	r9, r9, r1
 8014174:	fa5f fa8a 	uxtb.w	sl, sl
 8014178:	fb18 f801 	smulbb	r8, r8, r1
 801417c:	fb1c f101 	smulbb	r1, ip, r1
 8014180:	fa1f f789 	uxth.w	r7, r9
 8014184:	4684      	mov	ip, r0
 8014186:	4691      	mov	r9, r2
 8014188:	9707      	str	r7, [sp, #28]
 801418a:	b289      	uxth	r1, r1
 801418c:	fa1f f788 	uxth.w	r7, r8
 8014190:	9708      	str	r7, [sp, #32]
 8014192:	f10c 0c03 	add.w	ip, ip, #3
 8014196:	f1b9 0f00 	cmp.w	r9, #0
 801419a:	d0bf      	beq.n	801411c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801419c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 80141a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80141a4:	9f07      	ldr	r7, [sp, #28]
 80141a6:	fa1f f989 	uxth.w	r9, r9
 80141aa:	fb08 780a 	mla	r8, r8, sl, r7
 80141ae:	9f08      	ldr	r7, [sp, #32]
 80141b0:	fa1f f888 	uxth.w	r8, r8
 80141b4:	f108 0b01 	add.w	fp, r8, #1
 80141b8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80141bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80141c0:	f80c 8c03 	strb.w	r8, [ip, #-3]
 80141c4:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 80141c8:	fb08 780a 	mla	r8, r8, sl, r7
 80141cc:	fa1f f888 	uxth.w	r8, r8
 80141d0:	f108 0b01 	add.w	fp, r8, #1
 80141d4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80141d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80141dc:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80141e0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80141e4:	fb08 180a 	mla	r8, r8, sl, r1
 80141e8:	fa1f f888 	uxth.w	r8, r8
 80141ec:	f108 0b01 	add.w	fp, r8, #1
 80141f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80141f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80141f8:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80141fc:	e7c9      	b.n	8014192 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80141fe:	4b04      	ldr	r3, [pc, #16]	@ (8014210 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8014200:	6818      	ldr	r0, [r3, #0]
 8014202:	6803      	ldr	r3, [r0, #0]
 8014204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014206:	4798      	blx	r3
 8014208:	b00f      	add	sp, #60	@ 0x3c
 801420a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420e:	bf00      	nop
 8014210:	24065a50 	.word	0x24065a50
 8014214:	24065a4a 	.word	0x24065a4a

08014218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421c:	b089      	sub	sp, #36	@ 0x24
 801421e:	4607      	mov	r7, r0
 8014220:	4689      	mov	r9, r1
 8014222:	4692      	mov	sl, r2
 8014224:	ac08      	add	r4, sp, #32
 8014226:	461e      	mov	r6, r3
 8014228:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801422c:	4620      	mov	r0, r4
 801422e:	f7fd ff79 	bl	8012124 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	4605      	mov	r5, r0
 8014236:	4620      	mov	r0, r4
 8014238:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801423c:	f7fd feb8 	bl	8011fb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014240:	4683      	mov	fp, r0
 8014242:	4620      	mov	r0, r4
 8014244:	f7fd fee8 	bl	8012018 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014248:	4653      	mov	r3, sl
 801424a:	464a      	mov	r2, r9
 801424c:	4639      	mov	r1, r7
 801424e:	9500      	str	r5, [sp, #0]
 8014250:	e9cd b001 	strd	fp, r0, [sp, #4]
 8014254:	a806      	add	r0, sp, #24
 8014256:	47c0      	blx	r8
 8014258:	a906      	add	r1, sp, #24
 801425a:	4630      	mov	r0, r6
 801425c:	f7fd fd8c 	bl	8011d78 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8014260:	4628      	mov	r0, r5
 8014262:	b009      	add	sp, #36	@ 0x24
 8014264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014268 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8014268:	b510      	push	{r4, lr}
 801426a:	4604      	mov	r4, r0
 801426c:	2104      	movs	r1, #4
 801426e:	f007 ff10 	bl	801c092 <_ZdlPvj>
 8014272:	4620      	mov	r0, r4
 8014274:	bd10      	pop	{r4, pc}

08014276 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8014276:	b510      	push	{r4, lr}
 8014278:	4604      	mov	r4, r0
 801427a:	2104      	movs	r1, #4
 801427c:	f007 ff09 	bl	801c092 <_ZdlPvj>
 8014280:	4620      	mov	r0, r4
 8014282:	bd10      	pop	{r4, pc}

08014284 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8014284:	b510      	push	{r4, lr}
 8014286:	4604      	mov	r4, r0
 8014288:	f640 0144 	movw	r1, #2116	@ 0x844
 801428c:	f007 ff01 	bl	801c092 <_ZdlPvj>
 8014290:	4620      	mov	r0, r4
 8014292:	bd10      	pop	{r4, pc}

08014294 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8014294:	b510      	push	{r4, lr}
 8014296:	4604      	mov	r4, r0
 8014298:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801429c:	f007 fef9 	bl	801c092 <_ZdlPvj>
 80142a0:	4620      	mov	r0, r4
 80142a2:	bd10      	pop	{r4, pc}

080142a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	4604      	mov	r4, r0
 80142a8:	2104      	movs	r1, #4
 80142aa:	f007 fef2 	bl	801c092 <_ZdlPvj>
 80142ae:	4620      	mov	r0, r4
 80142b0:	bd10      	pop	{r4, pc}

080142b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80142b2:	b510      	push	{r4, lr}
 80142b4:	4604      	mov	r4, r0
 80142b6:	2104      	movs	r1, #4
 80142b8:	f007 feeb 	bl	801c092 <_ZdlPvj>
 80142bc:	4620      	mov	r0, r4
 80142be:	bd10      	pop	{r4, pc}

080142c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80142c0:	b510      	push	{r4, lr}
 80142c2:	4604      	mov	r4, r0
 80142c4:	2104      	movs	r1, #4
 80142c6:	f007 fee4 	bl	801c092 <_ZdlPvj>
 80142ca:	4620      	mov	r0, r4
 80142cc:	bd10      	pop	{r4, pc}

080142ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80142ce:	b510      	push	{r4, lr}
 80142d0:	4604      	mov	r4, r0
 80142d2:	2104      	movs	r1, #4
 80142d4:	f007 fedd 	bl	801c092 <_ZdlPvj>
 80142d8:	4620      	mov	r0, r4
 80142da:	bd10      	pop	{r4, pc}

080142dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80142dc:	b510      	push	{r4, lr}
 80142de:	4604      	mov	r4, r0
 80142e0:	2104      	movs	r1, #4
 80142e2:	f007 fed6 	bl	801c092 <_ZdlPvj>
 80142e6:	4620      	mov	r0, r4
 80142e8:	bd10      	pop	{r4, pc}

080142ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80142ea:	b510      	push	{r4, lr}
 80142ec:	4604      	mov	r4, r0
 80142ee:	2104      	movs	r1, #4
 80142f0:	f007 fecf 	bl	801c092 <_ZdlPvj>
 80142f4:	4620      	mov	r0, r4
 80142f6:	bd10      	pop	{r4, pc}

080142f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80142f8:	b510      	push	{r4, lr}
 80142fa:	4604      	mov	r4, r0
 80142fc:	2104      	movs	r1, #4
 80142fe:	f007 fec8 	bl	801c092 <_ZdlPvj>
 8014302:	4620      	mov	r0, r4
 8014304:	bd10      	pop	{r4, pc}

08014306 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014306:	b510      	push	{r4, lr}
 8014308:	4604      	mov	r4, r0
 801430a:	2104      	movs	r1, #4
 801430c:	f007 fec1 	bl	801c092 <_ZdlPvj>
 8014310:	4620      	mov	r0, r4
 8014312:	bd10      	pop	{r4, pc}

08014314 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014314:	b510      	push	{r4, lr}
 8014316:	4604      	mov	r4, r0
 8014318:	2104      	movs	r1, #4
 801431a:	f007 feba 	bl	801c092 <_ZdlPvj>
 801431e:	4620      	mov	r0, r4
 8014320:	bd10      	pop	{r4, pc}

08014322 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014322:	b510      	push	{r4, lr}
 8014324:	4604      	mov	r4, r0
 8014326:	2104      	movs	r1, #4
 8014328:	f007 feb3 	bl	801c092 <_ZdlPvj>
 801432c:	4620      	mov	r0, r4
 801432e:	bd10      	pop	{r4, pc}

08014330 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014330:	b510      	push	{r4, lr}
 8014332:	4604      	mov	r4, r0
 8014334:	2104      	movs	r1, #4
 8014336:	f007 feac 	bl	801c092 <_ZdlPvj>
 801433a:	4620      	mov	r0, r4
 801433c:	bd10      	pop	{r4, pc}

0801433e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801433e:	b510      	push	{r4, lr}
 8014340:	4604      	mov	r4, r0
 8014342:	2104      	movs	r1, #4
 8014344:	f007 fea5 	bl	801c092 <_ZdlPvj>
 8014348:	4620      	mov	r0, r4
 801434a:	bd10      	pop	{r4, pc}

0801434c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801434c:	b510      	push	{r4, lr}
 801434e:	4604      	mov	r4, r0
 8014350:	2104      	movs	r1, #4
 8014352:	f007 fe9e 	bl	801c092 <_ZdlPvj>
 8014356:	4620      	mov	r0, r4
 8014358:	bd10      	pop	{r4, pc}

0801435a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801435a:	b510      	push	{r4, lr}
 801435c:	4604      	mov	r4, r0
 801435e:	2104      	movs	r1, #4
 8014360:	f007 fe97 	bl	801c092 <_ZdlPvj>
 8014364:	4620      	mov	r0, r4
 8014366:	bd10      	pop	{r4, pc}

08014368 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014368:	b510      	push	{r4, lr}
 801436a:	4604      	mov	r4, r0
 801436c:	2104      	movs	r1, #4
 801436e:	f007 fe90 	bl	801c092 <_ZdlPvj>
 8014372:	4620      	mov	r0, r4
 8014374:	bd10      	pop	{r4, pc}

08014376 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014376:	b510      	push	{r4, lr}
 8014378:	4604      	mov	r4, r0
 801437a:	2104      	movs	r1, #4
 801437c:	f007 fe89 	bl	801c092 <_ZdlPvj>
 8014380:	4620      	mov	r0, r4
 8014382:	bd10      	pop	{r4, pc}

08014384 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8014384:	b510      	push	{r4, lr}
 8014386:	4604      	mov	r4, r0
 8014388:	2104      	movs	r1, #4
 801438a:	f007 fe82 	bl	801c092 <_ZdlPvj>
 801438e:	4620      	mov	r0, r4
 8014390:	bd10      	pop	{r4, pc}

08014392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8014392:	b510      	push	{r4, lr}
 8014394:	4604      	mov	r4, r0
 8014396:	2104      	movs	r1, #4
 8014398:	f007 fe7b 	bl	801c092 <_ZdlPvj>
 801439c:	4620      	mov	r0, r4
 801439e:	bd10      	pop	{r4, pc}

080143a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80143a0:	b510      	push	{r4, lr}
 80143a2:	4604      	mov	r4, r0
 80143a4:	2104      	movs	r1, #4
 80143a6:	f007 fe74 	bl	801c092 <_ZdlPvj>
 80143aa:	4620      	mov	r0, r4
 80143ac:	bd10      	pop	{r4, pc}

080143ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80143ae:	b510      	push	{r4, lr}
 80143b0:	4604      	mov	r4, r0
 80143b2:	2104      	movs	r1, #4
 80143b4:	f007 fe6d 	bl	801c092 <_ZdlPvj>
 80143b8:	4620      	mov	r0, r4
 80143ba:	bd10      	pop	{r4, pc}

080143bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80143bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c0:	b08f      	sub	sp, #60	@ 0x3c
 80143c2:	461c      	mov	r4, r3
 80143c4:	460e      	mov	r6, r1
 80143c6:	9206      	str	r2, [sp, #24]
 80143c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80143cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80143ce:	9202      	str	r2, [sp, #8]
 80143d0:	2a00      	cmp	r2, #0
 80143d2:	f000 8128 	beq.w	8014626 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80143d6:	6820      	ldr	r0, [r4, #0]
 80143d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80143da:	6861      	ldr	r1, [r4, #4]
 80143dc:	c203      	stmia	r2!, {r0, r1}
 80143de:	6818      	ldr	r0, [r3, #0]
 80143e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80143e2:	6859      	ldr	r1, [r3, #4]
 80143e4:	c203      	stmia	r2!, {r0, r1}
 80143e6:	a80a      	add	r0, sp, #40	@ 0x28
 80143e8:	f7fa ff20 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80143ec:	4621      	mov	r1, r4
 80143ee:	a80c      	add	r0, sp, #48	@ 0x30
 80143f0:	f7fa ff44 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80143f4:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80143f8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80143fc:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8014400:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8014404:	bfdb      	ittet	le
 8014406:	b2bb      	uxthle	r3, r7
 8014408:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801440c:	2301      	movgt	r3, #1
 801440e:	fb92 f3f3 	sdivle	r3, r2, r3
 8014412:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8014416:	441d      	add	r5, r3
 8014418:	fb92 f1f3 	sdiv	r1, r2, r3
 801441c:	fa1f fc81 	uxth.w	ip, r1
 8014420:	3d01      	subs	r5, #1
 8014422:	fb0c 2413 	mls	r4, ip, r3, r2
 8014426:	4661      	mov	r1, ip
 8014428:	fb14 f407 	smulbb	r4, r4, r7
 801442c:	4404      	add	r4, r0
 801442e:	fb95 f5f3 	sdiv	r5, r5, r3
 8014432:	b2a4      	uxth	r4, r4
 8014434:	b121      	cbz	r1, 8014440 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8014436:	9b06      	ldr	r3, [sp, #24]
 8014438:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801443c:	ba1b      	rev	r3, r3
 801443e:	441e      	add	r6, r3
 8014440:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8014444:	b2ad      	uxth	r5, r5
 8014446:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801444a:	4418      	add	r0, r3
 801444c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8014450:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8014454:	00ad      	lsls	r5, r5, #2
 8014456:	441a      	add	r2, r3
 8014458:	4b74      	ldr	r3, [pc, #464]	@ (801462c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801445a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801445e:	6818      	ldr	r0, [r3, #0]
 8014460:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8014464:	6803      	ldr	r3, [r0, #0]
 8014466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014468:	4798      	blx	r3
 801446a:	4a71      	ldr	r2, [pc, #452]	@ (8014630 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801446c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8014470:	2c00      	cmp	r4, #0
 8014472:	8813      	ldrh	r3, [r2, #0]
 8014474:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8014478:	9209      	str	r2, [sp, #36]	@ 0x24
 801447a:	fb03 c101 	mla	r1, r3, r1, ip
 801447e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014482:	fb03 f307 	mul.w	r3, r3, r7
 8014486:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801448a:	9204      	str	r2, [sp, #16]
 801448c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014490:	9a02      	ldr	r2, [sp, #8]
 8014492:	4408      	add	r0, r1
 8014494:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8014498:	4403      	add	r3, r0
 801449a:	b292      	uxth	r2, r2
 801449c:	9307      	str	r3, [sp, #28]
 801449e:	f105 0304 	add.w	r3, r5, #4
 80144a2:	bf0c      	ite	eq
 80144a4:	4645      	moveq	r5, r8
 80144a6:	2500      	movne	r5, #0
 80144a8:	9308      	str	r3, [sp, #32]
 80144aa:	2300      	movs	r3, #0
 80144ac:	b2ad      	uxth	r5, r5
 80144ae:	9205      	str	r2, [sp, #20]
 80144b0:	9303      	str	r3, [sp, #12]
 80144b2:	9a07      	ldr	r2, [sp, #28]
 80144b4:	4282      	cmp	r2, r0
 80144b6:	f240 80b1 	bls.w	801461c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80144ba:	b95b      	cbnz	r3, 80144d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 80144bc:	7832      	ldrb	r2, [r6, #0]
 80144be:	0993      	lsrs	r3, r2, #6
 80144c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80144c4:	9203      	str	r2, [sp, #12]
 80144c6:	1e5a      	subs	r2, r3, #1
 80144c8:	2a02      	cmp	r2, #2
 80144ca:	bf8d      	iteet	hi
 80144cc:	7873      	ldrbhi	r3, [r6, #1]
 80144ce:	3601      	addls	r6, #1
 80144d0:	b29b      	uxthls	r3, r3
 80144d2:	3602      	addhi	r6, #2
 80144d4:	b184      	cbz	r4, 80144f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 80144d6:	429c      	cmp	r4, r3
 80144d8:	bf91      	iteee	ls
 80144da:	1b1c      	subls	r4, r3, r4
 80144dc:	1ae4      	subhi	r4, r4, r3
 80144de:	4629      	movhi	r1, r5
 80144e0:	f04f 0e00 	movhi.w	lr, #0
 80144e4:	bf9b      	ittet	ls
 80144e6:	fa1f fe84 	uxthls.w	lr, r4
 80144ea:	2400      	movls	r4, #0
 80144ec:	b2a4      	uxthhi	r4, r4
 80144ee:	fa1f f188 	uxthls.w	r1, r8
 80144f2:	4673      	mov	r3, lr
 80144f4:	460d      	mov	r5, r1
 80144f6:	e7dc      	b.n	80144b2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80144f8:	2203      	movs	r2, #3
 80144fa:	9908      	ldr	r1, [sp, #32]
 80144fc:	42ab      	cmp	r3, r5
 80144fe:	4617      	mov	r7, r2
 8014500:	9a03      	ldr	r2, [sp, #12]
 8014502:	bf24      	itt	cs
 8014504:	eba3 0e05 	subcs.w	lr, r3, r5
 8014508:	9501      	strcs	r5, [sp, #4]
 801450a:	fb17 1702 	smlabb	r7, r7, r2, r1
 801450e:	9a06      	ldr	r2, [sp, #24]
 8014510:	bf34      	ite	cc
 8014512:	1ae9      	subcc	r1, r5, r3
 8014514:	fa1f fe8e 	uxthcs.w	lr, lr
 8014518:	4417      	add	r7, r2
 801451a:	9a02      	ldr	r2, [sp, #8]
 801451c:	bf2f      	iteee	cs
 801451e:	4621      	movcs	r1, r4
 8014520:	b289      	uxthcc	r1, r1
 8014522:	9301      	strcc	r3, [sp, #4]
 8014524:	46a6      	movcc	lr, r4
 8014526:	2aff      	cmp	r2, #255	@ 0xff
 8014528:	d11e      	bne.n	8014568 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801452a:	4681      	mov	r9, r0
 801452c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8014530:	f109 0903 	add.w	r9, r9, #3
 8014534:	f1bc 0f00 	cmp.w	ip, #0
 8014538:	d15f      	bne.n	80145fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801453a:	9a01      	ldr	r2, [sp, #4]
 801453c:	42ab      	cmp	r3, r5
 801453e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014542:	4410      	add	r0, r2
 8014544:	d3d5      	bcc.n	80144f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8014546:	fa1f f188 	uxth.w	r1, r8
 801454a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801454e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014550:	1a64      	subs	r4, r4, r1
 8014552:	881b      	ldrh	r3, [r3, #0]
 8014554:	b2a4      	uxth	r4, r4
 8014556:	eba3 0308 	sub.w	r3, r3, r8
 801455a:	2c00      	cmp	r4, #0
 801455c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014560:	bf18      	it	ne
 8014562:	2100      	movne	r1, #0
 8014564:	4418      	add	r0, r3
 8014566:	e7c4      	b.n	80144f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8014568:	4684      	mov	ip, r0
 801456a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801456e:	f10c 0c03 	add.w	ip, ip, #3
 8014572:	f1ba 0f00 	cmp.w	sl, #0
 8014576:	d0e0      	beq.n	801453a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8014578:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801457c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014580:	9a05      	ldr	r2, [sp, #20]
 8014582:	f897 9000 	ldrb.w	r9, [r7]
 8014586:	fa1f fa8a 	uxth.w	sl, sl
 801458a:	fb1b fb02 	smulbb	fp, fp, r2
 801458e:	9a04      	ldr	r2, [sp, #16]
 8014590:	fb09 b902 	mla	r9, r9, r2, fp
 8014594:	9a05      	ldr	r2, [sp, #20]
 8014596:	fa1f f989 	uxth.w	r9, r9
 801459a:	f109 0b01 	add.w	fp, r9, #1
 801459e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80145a2:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 80145a6:	fb1b fb02 	smulbb	fp, fp, r2
 80145aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145ae:	9a04      	ldr	r2, [sp, #16]
 80145b0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80145b4:	f897 9001 	ldrb.w	r9, [r7, #1]
 80145b8:	fb09 b902 	mla	r9, r9, r2, fp
 80145bc:	9a05      	ldr	r2, [sp, #20]
 80145be:	fa1f f989 	uxth.w	r9, r9
 80145c2:	f109 0b01 	add.w	fp, r9, #1
 80145c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80145ca:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 80145ce:	fb1b fb02 	smulbb	fp, fp, r2
 80145d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145d6:	9a04      	ldr	r2, [sp, #16]
 80145d8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 80145dc:	f897 9002 	ldrb.w	r9, [r7, #2]
 80145e0:	fb09 b902 	mla	r9, r9, r2, fp
 80145e4:	fa1f f989 	uxth.w	r9, r9
 80145e8:	f109 0b01 	add.w	fp, r9, #1
 80145ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80145f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145f4:	f80c 9c01 	strb.w	r9, [ip, #-1]
 80145f8:	e7b9      	b.n	801456e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 80145fa:	f897 a000 	ldrb.w	sl, [r7]
 80145fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014602:	f809 ac03 	strb.w	sl, [r9, #-3]
 8014606:	fa1f fc8c 	uxth.w	ip, ip
 801460a:	f897 a001 	ldrb.w	sl, [r7, #1]
 801460e:	f809 ac02 	strb.w	sl, [r9, #-2]
 8014612:	f897 a002 	ldrb.w	sl, [r7, #2]
 8014616:	f809 ac01 	strb.w	sl, [r9, #-1]
 801461a:	e789      	b.n	8014530 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801461c:	4b03      	ldr	r3, [pc, #12]	@ (801462c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801461e:	6818      	ldr	r0, [r3, #0]
 8014620:	6803      	ldr	r3, [r0, #0]
 8014622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014624:	4798      	blx	r3
 8014626:	b00f      	add	sp, #60	@ 0x3c
 8014628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801462c:	24065a50 	.word	0x24065a50
 8014630:	24065a4a 	.word	0x24065a4a

08014634 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8014634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014638:	b09b      	sub	sp, #108	@ 0x6c
 801463a:	461d      	mov	r5, r3
 801463c:	4604      	mov	r4, r0
 801463e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8014640:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8014644:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8014648:	9208      	str	r2, [sp, #32]
 801464a:	2a00      	cmp	r2, #0
 801464c:	f000 81f3 	beq.w	8014a36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8014650:	6828      	ldr	r0, [r5, #0]
 8014652:	aa16      	add	r2, sp, #88	@ 0x58
 8014654:	6869      	ldr	r1, [r5, #4]
 8014656:	c203      	stmia	r2!, {r0, r1}
 8014658:	6818      	ldr	r0, [r3, #0]
 801465a:	aa18      	add	r2, sp, #96	@ 0x60
 801465c:	6859      	ldr	r1, [r3, #4]
 801465e:	c203      	stmia	r2!, {r0, r1}
 8014660:	a816      	add	r0, sp, #88	@ 0x58
 8014662:	f7fa fde3 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014666:	4629      	mov	r1, r5
 8014668:	a818      	add	r0, sp, #96	@ 0x60
 801466a:	f7fa fe07 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801466e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8014672:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8014676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801467a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801467e:	bfdb      	ittet	le
 8014680:	b29a      	uxthle	r2, r3
 8014682:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8014686:	f04f 0a01 	movgt.w	sl, #1
 801468a:	fb91 faf2 	sdivle	sl, r1, r2
 801468e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8014692:	4456      	add	r6, sl
 8014694:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8014698:	3e01      	subs	r6, #1
 801469a:	fb92 f0fa 	sdiv	r0, r2, sl
 801469e:	b280      	uxth	r0, r0
 80146a0:	fb00 281a 	mls	r8, r0, sl, r2
 80146a4:	900e      	str	r0, [sp, #56]	@ 0x38
 80146a6:	fb18 f803 	smulbb	r8, r8, r3
 80146aa:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 80146ae:	4488      	add	r8, r1
 80146b0:	4419      	add	r1, r3
 80146b2:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 80146b6:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 80146ba:	fa1f f888 	uxth.w	r8, r8
 80146be:	441a      	add	r2, r3
 80146c0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80146c4:	9303      	str	r3, [sp, #12]
 80146c6:	4b9c      	ldr	r3, [pc, #624]	@ (8014938 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 80146c8:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	6803      	ldr	r3, [r0, #0]
 80146d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146d2:	4798      	blx	r3
 80146d4:	4b99      	ldr	r3, [pc, #612]	@ (801493c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 80146d6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 80146da:	f1b8 0f00 	cmp.w	r8, #0
 80146de:	881a      	ldrh	r2, [r3, #0]
 80146e0:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 80146e4:	fb02 f505 	mul.w	r5, r2, r5
 80146e8:	fb02 7101 	mla	r1, r2, r1, r7
 80146ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146f0:	9314      	str	r3, [sp, #80]	@ 0x50
 80146f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80146f6:	9b08      	ldr	r3, [sp, #32]
 80146f8:	fb96 f6fa 	sdiv	r6, r6, sl
 80146fc:	4408      	add	r0, r1
 80146fe:	f106 0601 	add.w	r6, r6, #1
 8014702:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014706:	f04f 0100 	mov.w	r1, #0
 801470a:	eb00 0205 	add.w	r2, r0, r5
 801470e:	b2b6      	uxth	r6, r6
 8014710:	b29b      	uxth	r3, r3
 8014712:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014714:	9209      	str	r2, [sp, #36]	@ 0x24
 8014716:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014718:	930d      	str	r3, [sp, #52]	@ 0x34
 801471a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801471e:	4b88      	ldr	r3, [pc, #544]	@ (8014940 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8014720:	f106 0204 	add.w	r2, r6, #4
 8014724:	eba3 0304 	sub.w	r3, r3, r4
 8014728:	9205      	str	r2, [sp, #20]
 801472a:	9a03      	ldr	r2, [sp, #12]
 801472c:	bf18      	it	ne
 801472e:	2200      	movne	r2, #0
 8014730:	9315      	str	r3, [sp, #84]	@ 0x54
 8014732:	b292      	uxth	r2, r2
 8014734:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014738:	fa11 f383 	uxtah	r3, r1, r3
 801473c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801473e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014742:	3304      	adds	r3, #4
 8014744:	9306      	str	r3, [sp, #24]
 8014746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014748:	4283      	cmp	r3, r0
 801474a:	f240 816f 	bls.w	8014a2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801474e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8014752:	f04f 0900 	mov.w	r9, #0
 8014756:	9d06      	ldr	r5, [sp, #24]
 8014758:	fbb8 f3f3 	udiv	r3, r8, r3
 801475c:	ebaa 0303 	sub.w	r3, sl, r3
 8014760:	782d      	ldrb	r5, [r5, #0]
 8014762:	b29b      	uxth	r3, r3
 8014764:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014766:	3501      	adds	r5, #1
 8014768:	9312      	str	r3, [sp, #72]	@ 0x48
 801476a:	9b06      	ldr	r3, [sp, #24]
 801476c:	9504      	str	r5, [sp, #16]
 801476e:	7859      	ldrb	r1, [r3, #1]
 8014770:	789b      	ldrb	r3, [r3, #2]
 8014772:	021b      	lsls	r3, r3, #8
 8014774:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8014778:	9906      	ldr	r1, [sp, #24]
 801477a:	78c9      	ldrb	r1, [r1, #3]
 801477c:	430b      	orrs	r3, r1
 801477e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014780:	4419      	add	r1, r3
 8014782:	1c4d      	adds	r5, r1, #1
 8014784:	7849      	ldrb	r1, [r1, #1]
 8014786:	9502      	str	r5, [sp, #8]
 8014788:	0209      	lsls	r1, r1, #8
 801478a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801478c:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8014790:	5ceb      	ldrb	r3, [r5, r3]
 8014792:	4319      	orrs	r1, r3
 8014794:	b28b      	uxth	r3, r1
 8014796:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801479a:	930a      	str	r3, [sp, #40]	@ 0x28
 801479c:	2300      	movs	r3, #0
 801479e:	9307      	str	r3, [sp, #28]
 80147a0:	2301      	movs	r3, #1
 80147a2:	e9cd 3300 	strd	r3, r3, [sp]
 80147a6:	469c      	mov	ip, r3
 80147a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80147ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80147ae:	f1b8 0f00 	cmp.w	r8, #0
 80147b2:	f000 8082 	beq.w	80148ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 80147b6:	45c4      	cmp	ip, r8
 80147b8:	d270      	bcs.n	801489c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80147ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147bc:	eba8 080c 	sub.w	r8, r8, ip
 80147c0:	4611      	mov	r1, r2
 80147c2:	4283      	cmp	r3, r0
 80147c4:	fa1f f888 	uxth.w	r8, r8
 80147c8:	d802      	bhi.n	80147d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 80147ca:	e074      	b.n	80148b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d15f      	bne.n	8014890 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80147d0:	9b02      	ldr	r3, [sp, #8]
 80147d2:	9a01      	ldr	r2, [sp, #4]
 80147d4:	785b      	ldrb	r3, [r3, #1]
 80147d6:	f1c2 0207 	rsb	r2, r2, #7
 80147da:	9d01      	ldr	r5, [sp, #4]
 80147dc:	4093      	lsls	r3, r2
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80147e4:	9b02      	ldr	r3, [sp, #8]
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	412b      	asrs	r3, r5
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	4313      	orrs	r3, r2
 80147ee:	462a      	mov	r2, r5
 80147f0:	3201      	adds	r2, #1
 80147f2:	b29e      	uxth	r6, r3
 80147f4:	b2d2      	uxtb	r2, r2
 80147f6:	2a08      	cmp	r2, #8
 80147f8:	9201      	str	r2, [sp, #4]
 80147fa:	9a02      	ldr	r2, [sp, #8]
 80147fc:	bf09      	itett	eq
 80147fe:	3202      	addeq	r2, #2
 8014800:	3201      	addne	r2, #1
 8014802:	9202      	streq	r2, [sp, #8]
 8014804:	2200      	moveq	r2, #0
 8014806:	bf14      	ite	ne
 8014808:	9202      	strne	r2, [sp, #8]
 801480a:	9201      	streq	r2, [sp, #4]
 801480c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801480e:	42b2      	cmp	r2, r6
 8014810:	d309      	bcc.n	8014826 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8014812:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8014816:	2301      	movs	r3, #1
 8014818:	9a04      	ldr	r2, [sp, #16]
 801481a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801481e:	d30e      	bcc.n	801483e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8014820:	9300      	str	r3, [sp, #0]
 8014822:	2500      	movs	r5, #0
 8014824:	e035      	b.n	8014892 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8014826:	9b04      	ldr	r3, [sp, #16]
 8014828:	429e      	cmp	r6, r3
 801482a:	d318      	bcc.n	801485e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801482c:	9b00      	ldr	r3, [sp, #0]
 801482e:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8014832:	18e3      	adds	r3, r4, r3
 8014834:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8014838:	9b00      	ldr	r3, [sp, #0]
 801483a:	3301      	adds	r3, #1
 801483c:	b29b      	uxth	r3, r3
 801483e:	9a04      	ldr	r2, [sp, #16]
 8014840:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8014844:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014848:	9f00      	ldr	r7, [sp, #0]
 801484a:	7115      	strb	r5, [r2, #4]
 801484c:	3701      	adds	r7, #1
 801484e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014850:	7157      	strb	r7, [r2, #5]
 8014852:	80d5      	strh	r5, [r2, #6]
 8014854:	9a04      	ldr	r2, [sp, #16]
 8014856:	3201      	adds	r2, #1
 8014858:	b292      	uxth	r2, r2
 801485a:	9204      	str	r2, [sp, #16]
 801485c:	e7e0      	b.n	8014820 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801485e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014862:	4632      	mov	r2, r6
 8014864:	795b      	ldrb	r3, [r3, #5]
 8014866:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801486a:	4425      	add	r5, r4
 801486c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801486e:	eb07 0c05 	add.w	ip, r7, r5
 8014872:	f1bc 0f00 	cmp.w	ip, #0
 8014876:	dd07      	ble.n	8014888 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8014878:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801487c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8014880:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8014884:	88d2      	ldrh	r2, [r2, #6]
 8014886:	e7f1      	b.n	801486c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8014888:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801488c:	b29b      	uxth	r3, r3
 801488e:	e7c3      	b.n	8014818 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8014890:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8014892:	460a      	mov	r2, r1
 8014894:	960a      	str	r6, [sp, #40]	@ 0x28
 8014896:	46a9      	mov	r9, r5
 8014898:	469c      	mov	ip, r3
 801489a:	e788      	b.n	80147ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801489c:	ebac 0308 	sub.w	r3, ip, r8
 80148a0:	eb09 0508 	add.w	r5, r9, r8
 80148a4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	b2ad      	uxth	r5, r5
 80148ac:	f04f 0800 	mov.w	r8, #0
 80148b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148b2:	4282      	cmp	r2, r0
 80148b4:	d88a      	bhi.n	80147cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80148b6:	460a      	mov	r2, r1
 80148b8:	e745      	b.n	8014746 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 80148ba:	4594      	cmp	ip, r2
 80148bc:	9d08      	ldr	r5, [sp, #32]
 80148be:	4686      	mov	lr, r0
 80148c0:	bf27      	ittee	cs
 80148c2:	ebac 0302 	subcs.w	r3, ip, r2
 80148c6:	4616      	movcs	r6, r2
 80148c8:	eba2 010c 	subcc.w	r1, r2, ip
 80148cc:	4666      	movcc	r6, ip
 80148ce:	bf27      	ittee	cs
 80148d0:	b29b      	uxthcs	r3, r3
 80148d2:	4641      	movcs	r1, r8
 80148d4:	b289      	uxthcc	r1, r1
 80148d6:	4643      	movcc	r3, r8
 80148d8:	2dff      	cmp	r5, #255	@ 0xff
 80148da:	eb09 0506 	add.w	r5, r9, r6
 80148de:	b2ad      	uxth	r5, r5
 80148e0:	d130      	bne.n	8014944 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80148e2:	45a9      	cmp	r9, r5
 80148e4:	f10e 0e03 	add.w	lr, lr, #3
 80148e8:	d17a      	bne.n	80149e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 80148ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80148ee:	4594      	cmp	ip, r2
 80148f0:	4430      	add	r0, r6
 80148f2:	d3db      	bcc.n	80148ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80148f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80148f6:	9903      	ldr	r1, [sp, #12]
 80148f8:	8812      	ldrh	r2, [r2, #0]
 80148fa:	1a52      	subs	r2, r2, r1
 80148fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80148fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014902:	4410      	add	r0, r2
 8014904:	9a07      	ldr	r2, [sp, #28]
 8014906:	3201      	adds	r2, #1
 8014908:	428a      	cmp	r2, r1
 801490a:	9207      	str	r2, [sp, #28]
 801490c:	f040 8081 	bne.w	8014a12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8014910:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8014914:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8014918:	9b03      	ldr	r3, [sp, #12]
 801491a:	eba8 080c 	sub.w	r8, r8, ip
 801491e:	fa1f f888 	uxth.w	r8, r8
 8014922:	f1b8 0f00 	cmp.w	r8, #0
 8014926:	bf08      	it	eq
 8014928:	461a      	moveq	r2, r3
 801492a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801492c:	bf18      	it	ne
 801492e:	2200      	movne	r2, #0
 8014930:	3301      	adds	r3, #1
 8014932:	b292      	uxth	r2, r2
 8014934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014936:	e6fd      	b.n	8014734 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8014938:	24065a50 	.word	0x24065a50
 801493c:	24065a4a 	.word	0x24065a4a
 8014940:	fffff7fb 	.word	0xfffff7fb
 8014944:	45a9      	cmp	r9, r5
 8014946:	f10e 0e03 	add.w	lr, lr, #3
 801494a:	d0ce      	beq.n	80148ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801494c:	f109 0701 	add.w	r7, r9, #1
 8014950:	44a1      	add	r9, r4
 8014952:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8014956:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801495a:	9713      	str	r7, [sp, #76]	@ 0x4c
 801495c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8014960:	9f05      	ldr	r7, [sp, #20]
 8014962:	eb07 0908 	add.w	r9, r7, r8
 8014966:	f817 8008 	ldrb.w	r8, [r7, r8]
 801496a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801496c:	fb1b fb07 	smulbb	fp, fp, r7
 8014970:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8014972:	fb08 b807 	mla	r8, r8, r7, fp
 8014976:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8014978:	fa1f f888 	uxth.w	r8, r8
 801497c:	f108 0b01 	add.w	fp, r8, #1
 8014980:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014984:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8014988:	fb1b fb07 	smulbb	fp, fp, r7
 801498c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014990:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8014992:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8014996:	f899 8001 	ldrb.w	r8, [r9, #1]
 801499a:	fb08 b807 	mla	r8, r8, r7, fp
 801499e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80149a0:	fa1f f888 	uxth.w	r8, r8
 80149a4:	f108 0b01 	add.w	fp, r8, #1
 80149a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80149ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80149b0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80149b4:	f899 8002 	ldrb.w	r8, [r9, #2]
 80149b8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80149bc:	fb19 f907 	smulbb	r9, r9, r7
 80149c0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80149c2:	fb08 9807 	mla	r8, r8, r7, r9
 80149c6:	fa1f f888 	uxth.w	r8, r8
 80149ca:	f108 0901 	add.w	r9, r8, #1
 80149ce:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80149d2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 80149d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80149da:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80149de:	e7b1      	b.n	8014944 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80149e0:	f109 0b01 	add.w	fp, r9, #1
 80149e4:	44a1      	add	r9, r4
 80149e6:	9f05      	ldr	r7, [sp, #20]
 80149e8:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 80149ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80149f0:	eb07 0908 	add.w	r9, r7, r8
 80149f4:	f817 8008 	ldrb.w	r8, [r7, r8]
 80149f8:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80149fc:	f899 8001 	ldrb.w	r8, [r9, #1]
 8014a00:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8014a04:	f899 8002 	ldrb.w	r8, [r9, #2]
 8014a08:	fa1f f98b 	uxth.w	r9, fp
 8014a0c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8014a10:	e767      	b.n	80148e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8014a12:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8014a16:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8014a1a:	eba8 0801 	sub.w	r8, r8, r1
 8014a1e:	fa1f f888 	uxth.w	r8, r8
 8014a22:	f1b8 0f00 	cmp.w	r8, #0
 8014a26:	bf18      	it	ne
 8014a28:	2100      	movne	r1, #0
 8014a2a:	e741      	b.n	80148b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8014a2c:	4b03      	ldr	r3, [pc, #12]	@ (8014a3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8014a2e:	6818      	ldr	r0, [r3, #0]
 8014a30:	6803      	ldr	r3, [r0, #0]
 8014a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a34:	4798      	blx	r3
 8014a36:	b01b      	add	sp, #108	@ 0x6c
 8014a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3c:	24065a50 	.word	0x24065a50

08014a40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8014a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a44:	b09d      	sub	sp, #116	@ 0x74
 8014a46:	461d      	mov	r5, r3
 8014a48:	4604      	mov	r4, r0
 8014a4a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8014a4c:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8014a50:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8014a54:	920c      	str	r2, [sp, #48]	@ 0x30
 8014a56:	2a00      	cmp	r2, #0
 8014a58:	f000 81de 	beq.w	8014e18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8014a5c:	6828      	ldr	r0, [r5, #0]
 8014a5e:	aa18      	add	r2, sp, #96	@ 0x60
 8014a60:	6869      	ldr	r1, [r5, #4]
 8014a62:	c203      	stmia	r2!, {r0, r1}
 8014a64:	6818      	ldr	r0, [r3, #0]
 8014a66:	aa1a      	add	r2, sp, #104	@ 0x68
 8014a68:	6859      	ldr	r1, [r3, #4]
 8014a6a:	c203      	stmia	r2!, {r0, r1}
 8014a6c:	a818      	add	r0, sp, #96	@ 0x60
 8014a6e:	f7fa fbdd 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014a72:	4629      	mov	r1, r5
 8014a74:	a81a      	add	r0, sp, #104	@ 0x68
 8014a76:	f7fa fc01 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014a7a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8014a7e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8014a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014a86:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8014a8a:	bfdb      	ittet	le
 8014a8c:	b29a      	uxthle	r2, r3
 8014a8e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8014a92:	2201      	movgt	r2, #1
 8014a94:	fb91 f2f2 	sdivle	r2, r1, r2
 8014a98:	9201      	str	r2, [sp, #4]
 8014a9a:	9801      	ldr	r0, [sp, #4]
 8014a9c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8014aa0:	9901      	ldr	r1, [sp, #4]
 8014aa2:	fb92 f0f0 	sdiv	r0, r2, r0
 8014aa6:	b280      	uxth	r0, r0
 8014aa8:	440f      	add	r7, r1
 8014aaa:	900d      	str	r0, [sp, #52]	@ 0x34
 8014aac:	3f01      	subs	r7, #1
 8014aae:	9801      	ldr	r0, [sp, #4]
 8014ab0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8014ab2:	fb05 2510 	mls	r5, r5, r0, r2
 8014ab6:	fb97 f7f1 	sdiv	r7, r7, r1
 8014aba:	fb15 f503 	smulbb	r5, r5, r3
 8014abe:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8014ac2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8014ac6:	3701      	adds	r7, #1
 8014ac8:	440d      	add	r5, r1
 8014aca:	4419      	add	r1, r3
 8014acc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8014ad0:	b2bf      	uxth	r7, r7
 8014ad2:	441a      	add	r2, r3
 8014ad4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8014ad8:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8014adc:	00bf      	lsls	r7, r7, #2
 8014ade:	9304      	str	r3, [sp, #16]
 8014ae0:	b2ad      	uxth	r5, r5
 8014ae2:	4bb0      	ldr	r3, [pc, #704]	@ (8014da4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8014ae4:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8014ae8:	6818      	ldr	r0, [r3, #0]
 8014aea:	6803      	ldr	r3, [r0, #0]
 8014aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014aee:	4798      	blx	r3
 8014af0:	4bad      	ldr	r3, [pc, #692]	@ (8014da8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8014af2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8014af6:	2d00      	cmp	r5, #0
 8014af8:	881a      	ldrh	r2, [r3, #0]
 8014afa:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8014afe:	fb02 f606 	mul.w	r6, r2, r6
 8014b02:	fb02 c101 	mla	r1, r2, r1, ip
 8014b06:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014b0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8014b0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014b10:	4ba6      	ldr	r3, [pc, #664]	@ (8014dac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8014b12:	eb00 0801 	add.w	r8, r0, r1
 8014b16:	bf18      	it	ne
 8014b18:	2100      	movne	r1, #0
 8014b1a:	eba3 0304 	sub.w	r3, r3, r4
 8014b1e:	eb08 0206 	add.w	r2, r8, r6
 8014b22:	9317      	str	r3, [sp, #92]	@ 0x5c
 8014b24:	9208      	str	r2, [sp, #32]
 8014b26:	f107 0204 	add.w	r2, r7, #4
 8014b2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8014b2c:	9a04      	ldr	r2, [sp, #16]
 8014b2e:	bf08      	it	eq
 8014b30:	4611      	moveq	r1, r2
 8014b32:	2200      	movs	r2, #0
 8014b34:	b289      	uxth	r1, r1
 8014b36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b3c:	fa12 f383 	uxtah	r3, r2, r3
 8014b40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014b42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b46:	3304      	adds	r3, #4
 8014b48:	9306      	str	r3, [sp, #24]
 8014b4a:	9b08      	ldr	r3, [sp, #32]
 8014b4c:	4543      	cmp	r3, r8
 8014b4e:	f240 815e 	bls.w	8014e0e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8014b52:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8014b56:	f04f 0b01 	mov.w	fp, #1
 8014b5a:	9a01      	ldr	r2, [sp, #4]
 8014b5c:	9806      	ldr	r0, [sp, #24]
 8014b5e:	465e      	mov	r6, fp
 8014b60:	f8cd b008 	str.w	fp, [sp, #8]
 8014b64:	7800      	ldrb	r0, [r0, #0]
 8014b66:	fbb5 f3f3 	udiv	r3, r5, r3
 8014b6a:	1ad3      	subs	r3, r2, r3
 8014b6c:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b6e:	3001      	adds	r0, #1
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	9005      	str	r0, [sp, #20]
 8014b74:	9312      	str	r3, [sp, #72]	@ 0x48
 8014b76:	9b06      	ldr	r3, [sp, #24]
 8014b78:	785a      	ldrb	r2, [r3, #1]
 8014b7a:	789b      	ldrb	r3, [r3, #2]
 8014b7c:	021b      	lsls	r3, r3, #8
 8014b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b82:	9a06      	ldr	r2, [sp, #24]
 8014b84:	78d2      	ldrb	r2, [r2, #3]
 8014b86:	4313      	orrs	r3, r2
 8014b88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014b8a:	441a      	add	r2, r3
 8014b8c:	1c50      	adds	r0, r2, #1
 8014b8e:	7852      	ldrb	r2, [r2, #1]
 8014b90:	9003      	str	r0, [sp, #12]
 8014b92:	0212      	lsls	r2, r2, #8
 8014b94:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8014b96:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8014b9a:	5cc3      	ldrb	r3, [r0, r3]
 8014b9c:	431a      	orrs	r2, r3
 8014b9e:	b293      	uxth	r3, r2
 8014ba0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8014ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	461a      	mov	r2, r3
 8014baa:	9307      	str	r3, [sp, #28]
 8014bac:	2d00      	cmp	r5, #0
 8014bae:	d07c      	beq.n	8014caa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8014bb0:	42ae      	cmp	r6, r5
 8014bb2:	d26c      	bcs.n	8014c8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8014bb4:	9b08      	ldr	r3, [sp, #32]
 8014bb6:	1bad      	subs	r5, r5, r6
 8014bb8:	4608      	mov	r0, r1
 8014bba:	4543      	cmp	r3, r8
 8014bbc:	b2ad      	uxth	r5, r5
 8014bbe:	d802      	bhi.n	8014bc6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8014bc0:	e071      	b.n	8014ca6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d15d      	bne.n	8014c82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8014bc6:	9b03      	ldr	r3, [sp, #12]
 8014bc8:	9a02      	ldr	r2, [sp, #8]
 8014bca:	785b      	ldrb	r3, [r3, #1]
 8014bcc:	f1c2 0207 	rsb	r2, r2, #7
 8014bd0:	9902      	ldr	r1, [sp, #8]
 8014bd2:	4093      	lsls	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8014bda:	9b03      	ldr	r3, [sp, #12]
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	410b      	asrs	r3, r1
 8014be0:	3101      	adds	r1, #1
 8014be2:	b2c9      	uxtb	r1, r1
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	2908      	cmp	r1, #8
 8014be8:	9102      	str	r1, [sp, #8]
 8014bea:	9903      	ldr	r1, [sp, #12]
 8014bec:	ea43 0302 	orr.w	r3, r3, r2
 8014bf0:	bf0c      	ite	eq
 8014bf2:	3102      	addeq	r1, #2
 8014bf4:	3101      	addne	r1, #1
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	bf05      	ittet	eq
 8014bfa:	9103      	streq	r1, [sp, #12]
 8014bfc:	2100      	moveq	r1, #0
 8014bfe:	9103      	strne	r1, [sp, #12]
 8014c00:	9102      	streq	r1, [sp, #8]
 8014c02:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014c04:	4291      	cmp	r1, r2
 8014c06:	d30a      	bcc.n	8014c1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8014c08:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	9905      	ldr	r1, [sp, #20]
 8014c10:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014c14:	d30f      	bcc.n	8014c36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8014c16:	469b      	mov	fp, r3
 8014c18:	f04f 0c00 	mov.w	ip, #0
 8014c1c:	e032      	b.n	8014c84 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8014c1e:	9b05      	ldr	r3, [sp, #20]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d318      	bcc.n	8014c56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8014c24:	eb04 030b 	add.w	r3, r4, fp
 8014c28:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8014c2c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8014c30:	f10b 0301 	add.w	r3, fp, #1
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	9905      	ldr	r1, [sp, #20]
 8014c38:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8014c3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8014c40:	710e      	strb	r6, [r1, #4]
 8014c42:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8014c44:	80ce      	strh	r6, [r1, #6]
 8014c46:	f10b 0601 	add.w	r6, fp, #1
 8014c4a:	714e      	strb	r6, [r1, #5]
 8014c4c:	9905      	ldr	r1, [sp, #20]
 8014c4e:	3101      	adds	r1, #1
 8014c50:	b289      	uxth	r1, r1
 8014c52:	9105      	str	r1, [sp, #20]
 8014c54:	e7df      	b.n	8014c16 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8014c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c5a:	4611      	mov	r1, r2
 8014c5c:	795b      	ldrb	r3, [r3, #5]
 8014c5e:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8014c62:	4426      	add	r6, r4
 8014c64:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8014c66:	4437      	add	r7, r6
 8014c68:	2f00      	cmp	r7, #0
 8014c6a:	dd06      	ble.n	8014c7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8014c6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8014c70:	790f      	ldrb	r7, [r1, #4]
 8014c72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014c76:	88c9      	ldrh	r1, [r1, #6]
 8014c78:	e7f4      	b.n	8014c64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8014c7a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	e7c5      	b.n	8014c0e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8014c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c84:	920a      	str	r2, [sp, #40]	@ 0x28
 8014c86:	4601      	mov	r1, r0
 8014c88:	4662      	mov	r2, ip
 8014c8a:	461e      	mov	r6, r3
 8014c8c:	e78e      	b.n	8014bac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8014c8e:	1b73      	subs	r3, r6, r5
 8014c90:	eb02 0c05 	add.w	ip, r2, r5
 8014c94:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	fa1f fc8c 	uxth.w	ip, ip
 8014c9e:	2500      	movs	r5, #0
 8014ca0:	9a08      	ldr	r2, [sp, #32]
 8014ca2:	4542      	cmp	r2, r8
 8014ca4:	d88d      	bhi.n	8014bc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8014ca6:	4601      	mov	r1, r0
 8014ca8:	e74f      	b.n	8014b4a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8014caa:	428e      	cmp	r6, r1
 8014cac:	bf2b      	itete	cs
 8014cae:	468e      	movcs	lr, r1
 8014cb0:	46b6      	movcc	lr, r6
 8014cb2:	1a73      	subcs	r3, r6, r1
 8014cb4:	1b88      	subcc	r0, r1, r6
 8014cb6:	eb02 0c0e 	add.w	ip, r2, lr
 8014cba:	bf2b      	itete	cs
 8014cbc:	4628      	movcs	r0, r5
 8014cbe:	462b      	movcc	r3, r5
 8014cc0:	b29b      	uxthcs	r3, r3
 8014cc2:	b280      	uxthcc	r0, r0
 8014cc4:	f108 0503 	add.w	r5, r8, #3
 8014cc8:	fa1f fc8c 	uxth.w	ip, ip
 8014ccc:	4562      	cmp	r2, ip
 8014cce:	d06f      	beq.n	8014db0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8014cd0:	1c57      	adds	r7, r2, #1
 8014cd2:	4422      	add	r2, r4
 8014cd4:	b2bf      	uxth	r7, r7
 8014cd6:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8014cda:	9713      	str	r7, [sp, #76]	@ 0x4c
 8014cdc:	2704      	movs	r7, #4
 8014cde:	46b9      	mov	r9, r7
 8014ce0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8014ce2:	fb19 7202 	smlabb	r2, r9, r2, r7
 8014ce6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014ce8:	58bf      	ldr	r7, [r7, r2]
 8014cea:	0e3a      	lsrs	r2, r7, #24
 8014cec:	9209      	str	r2, [sp, #36]	@ 0x24
 8014cee:	d016      	beq.n	8014d1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8014cf0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014cf4:	fa5f fa87 	uxtb.w	sl, r7
 8014cf8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014cfc:	fa5f f289 	uxtb.w	r2, r9
 8014d00:	9214      	str	r2, [sp, #80]	@ 0x50
 8014d02:	b2fa      	uxtb	r2, r7
 8014d04:	9215      	str	r2, [sp, #84]	@ 0x54
 8014d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d08:	2aff      	cmp	r2, #255	@ 0xff
 8014d0a:	d10b      	bne.n	8014d24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8014d0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014d0e:	2aff      	cmp	r2, #255	@ 0xff
 8014d10:	d108      	bne.n	8014d24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8014d12:	f805 ac03 	strb.w	sl, [r5, #-3]
 8014d16:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014d1a:	f805 7c01 	strb.w	r7, [r5, #-1]
 8014d1e:	3503      	adds	r5, #3
 8014d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d22:	e7d3      	b.n	8014ccc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8014d24:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8014d26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014d28:	437a      	muls	r2, r7
 8014d2a:	1c57      	adds	r7, r2, #1
 8014d2c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8014d30:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8014d34:	1212      	asrs	r2, r2, #8
 8014d36:	fa1f f982 	uxth.w	r9, r2
 8014d3a:	43d2      	mvns	r2, r2
 8014d3c:	fb1a fa09 	smulbb	sl, sl, r9
 8014d40:	b2d2      	uxtb	r2, r2
 8014d42:	fb07 a702 	mla	r7, r7, r2, sl
 8014d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d48:	b2bf      	uxth	r7, r7
 8014d4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014d4c:	f107 0a01 	add.w	sl, r7, #1
 8014d50:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014d54:	fb12 fa09 	smulbb	sl, r2, r9
 8014d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d5a:	123f      	asrs	r7, r7, #8
 8014d5c:	f805 7c03 	strb.w	r7, [r5, #-3]
 8014d60:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8014d64:	fb07 aa02 	mla	sl, r7, r2, sl
 8014d68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8014d6a:	fb12 f909 	smulbb	r9, r2, r9
 8014d6e:	fa1f fa8a 	uxth.w	sl, sl
 8014d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d74:	f10a 0701 	add.w	r7, sl, #1
 8014d78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d7c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8014d80:	fb07 9902 	mla	r9, r7, r2, r9
 8014d84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014d88:	fa1f f989 	uxth.w	r9, r9
 8014d8c:	f805 ac02 	strb.w	sl, [r5, #-2]
 8014d90:	f109 0201 	add.w	r2, r9, #1
 8014d94:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8014d98:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d9c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8014da0:	e7bd      	b.n	8014d1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8014da2:	bf00      	nop
 8014da4:	24065a50 	.word	0x24065a50
 8014da8:	24065a4a 	.word	0x24065a4a
 8014dac:	fffff7fb 	.word	0xfffff7fb
 8014db0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014db4:	428e      	cmp	r6, r1
 8014db6:	44f0      	add	r8, lr
 8014db8:	f4ff af71 	bcc.w	8014c9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8014dbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8014dbe:	9904      	ldr	r1, [sp, #16]
 8014dc0:	8812      	ldrh	r2, [r2, #0]
 8014dc2:	1a52      	subs	r2, r2, r1
 8014dc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014dc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014dca:	4490      	add	r8, r2
 8014dcc:	9a07      	ldr	r2, [sp, #28]
 8014dce:	3201      	adds	r2, #1
 8014dd0:	428a      	cmp	r2, r1
 8014dd2:	9207      	str	r2, [sp, #28]
 8014dd4:	d111      	bne.n	8014dfa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8014dd6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8014dda:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8014dde:	9b04      	ldr	r3, [sp, #16]
 8014de0:	eba5 050c 	sub.w	r5, r5, ip
 8014de4:	b2ad      	uxth	r5, r5
 8014de6:	2d00      	cmp	r5, #0
 8014de8:	bf08      	it	eq
 8014dea:	4619      	moveq	r1, r3
 8014dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014dee:	bf18      	it	ne
 8014df0:	2100      	movne	r1, #0
 8014df2:	3301      	adds	r3, #1
 8014df4:	b289      	uxth	r1, r1
 8014df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014df8:	e69e      	b.n	8014b38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8014dfa:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8014dfe:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8014e02:	1a2d      	subs	r5, r5, r0
 8014e04:	b2ad      	uxth	r5, r5
 8014e06:	2d00      	cmp	r5, #0
 8014e08:	bf18      	it	ne
 8014e0a:	2000      	movne	r0, #0
 8014e0c:	e748      	b.n	8014ca0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8014e0e:	4b04      	ldr	r3, [pc, #16]	@ (8014e20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8014e10:	6818      	ldr	r0, [r3, #0]
 8014e12:	6803      	ldr	r3, [r0, #0]
 8014e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e16:	4798      	blx	r3
 8014e18:	b01d      	add	sp, #116	@ 0x74
 8014e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e1e:	bf00      	nop
 8014e20:	24065a50 	.word	0x24065a50

08014e24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8014e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e28:	b08f      	sub	sp, #60	@ 0x3c
 8014e2a:	4616      	mov	r6, r2
 8014e2c:	4681      	mov	r9, r0
 8014e2e:	460d      	mov	r5, r1
 8014e30:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8014e34:	9205      	str	r2, [sp, #20]
 8014e36:	2a00      	cmp	r2, #0
 8014e38:	f000 82a8 	beq.w	801538c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8014e3c:	6830      	ldr	r0, [r6, #0]
 8014e3e:	ac0a      	add	r4, sp, #40	@ 0x28
 8014e40:	6871      	ldr	r1, [r6, #4]
 8014e42:	c403      	stmia	r4!, {r0, r1}
 8014e44:	6818      	ldr	r0, [r3, #0]
 8014e46:	ac0c      	add	r4, sp, #48	@ 0x30
 8014e48:	6859      	ldr	r1, [r3, #4]
 8014e4a:	c403      	stmia	r4!, {r0, r1}
 8014e4c:	a80a      	add	r0, sp, #40	@ 0x28
 8014e4e:	f7fa f9ed 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014e52:	4631      	mov	r1, r6
 8014e54:	a80c      	add	r0, sp, #48	@ 0x30
 8014e56:	f7fa fa11 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014e5a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8014e5e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8014e62:	bfdb      	ittet	le
 8014e64:	b293      	uxthle	r3, r2
 8014e66:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8014e6a:	2301      	movgt	r3, #1
 8014e6c:	fb91 f3f3 	sdivle	r3, r1, r3
 8014e70:	9300      	str	r3, [sp, #0]
 8014e72:	f105 0308 	add.w	r3, r5, #8
 8014e76:	9900      	ldr	r1, [sp, #0]
 8014e78:	9306      	str	r3, [sp, #24]
 8014e7a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8014e7e:	440b      	add	r3, r1
 8014e80:	3b01      	subs	r3, #1
 8014e82:	fb93 f3f1 	sdiv	r3, r3, r1
 8014e86:	3b01      	subs	r3, #1
 8014e88:	9906      	ldr	r1, [sp, #24]
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014e90:	9900      	ldr	r1, [sp, #0]
 8014e92:	9307      	str	r3, [sp, #28]
 8014e94:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014e98:	fb93 f0f1 	sdiv	r0, r3, r1
 8014e9c:	b284      	uxth	r4, r0
 8014e9e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8014ea2:	b280      	uxth	r0, r0
 8014ea4:	9402      	str	r4, [sp, #8]
 8014ea6:	9d02      	ldr	r5, [sp, #8]
 8014ea8:	9c00      	ldr	r4, [sp, #0]
 8014eaa:	fb05 3514 	mls	r5, r5, r4, r3
 8014eae:	fb15 f502 	smulbb	r5, r5, r2
 8014eb2:	440d      	add	r5, r1
 8014eb4:	b2ad      	uxth	r5, r5
 8014eb6:	2800      	cmp	r0, #0
 8014eb8:	d071      	beq.n	8014f9e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8014eba:	1e42      	subs	r2, r0, #1
 8014ebc:	9806      	ldr	r0, [sp, #24]
 8014ebe:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8014ec2:	9a07      	ldr	r2, [sp, #28]
 8014ec4:	fa98 f888 	rev.w	r8, r8
 8014ec8:	4490      	add	r8, r2
 8014eca:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8014ece:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8014ed2:	4411      	add	r1, r2
 8014ed4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8014ed8:	f8df b348 	ldr.w	fp, [pc, #840]	@ 8015224 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8014edc:	4413      	add	r3, r2
 8014ede:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8014ee2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014ee6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8014eea:	9301      	str	r3, [sp, #4]
 8014eec:	4bcb      	ldr	r3, [pc, #812]	@ (801521c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8014eee:	6818      	ldr	r0, [r3, #0]
 8014ef0:	6803      	ldr	r3, [r0, #0]
 8014ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ef4:	4798      	blx	r3
 8014ef6:	4bca      	ldr	r3, [pc, #808]	@ (8015220 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8014ef8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8014efc:	881b      	ldrh	r3, [r3, #0]
 8014efe:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8014f02:	fb03 2707 	mla	r7, r3, r7, r2
 8014f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014f0a:	4363      	muls	r3, r4
 8014f0c:	2400      	movs	r4, #0
 8014f0e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014f12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014f16:	4621      	mov	r1, r4
 8014f18:	4407      	add	r7, r0
 8014f1a:	18fb      	adds	r3, r7, r3
 8014f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f1e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8014f22:	fb95 f3f3 	sdiv	r3, r5, r3
 8014f26:	9304      	str	r3, [sp, #16]
 8014f28:	f109 0304 	add.w	r3, r9, #4
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	9308      	str	r3, [sp, #32]
 8014f30:	f007 fb7a 	bl	801c628 <memset>
 8014f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f36:	42bb      	cmp	r3, r7
 8014f38:	f240 8223 	bls.w	8015382 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8014f3c:	2003      	movs	r0, #3
 8014f3e:	f04f 0c07 	mov.w	ip, #7
 8014f42:	f04f 0e0b 	mov.w	lr, #11
 8014f46:	2d00      	cmp	r5, #0
 8014f48:	f000 813c 	beq.w	80151c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8014f4c:	f898 3000 	ldrb.w	r3, [r8]
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	2bfe      	cmp	r3, #254	@ 0xfe
 8014f54:	d126      	bne.n	8014fa4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8014f56:	f898 1001 	ldrb.w	r1, [r8, #1]
 8014f5a:	f108 0604 	add.w	r6, r8, #4
 8014f5e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014f62:	3d01      	subs	r5, #1
 8014f64:	b2c9      	uxtb	r1, r1
 8014f66:	f898 8003 	ldrb.w	r8, [r8, #3]
 8014f6a:	b2d2      	uxtb	r2, r2
 8014f6c:	f361 0407 	bfi	r4, r1, #0, #8
 8014f70:	fa5f f888 	uxtb.w	r8, r8
 8014f74:	b2ad      	uxth	r5, r5
 8014f76:	f362 240f 	bfi	r4, r2, #8, #8
 8014f7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8014f7e:	fb10 2208 	smlabb	r2, r0, r8, r2
 8014f82:	f368 4417 	bfi	r4, r8, #16, #8
 8014f86:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8014f8a:	0e23      	lsrs	r3, r4, #24
 8014f8c:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8014f90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014f94:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8014f98:	605c      	str	r4, [r3, #4]
 8014f9a:	46b0      	mov	r8, r6
 8014f9c:	e7d3      	b.n	8014f46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 8014f9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014fa2:	e792      	b.n	8014eca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8014fa4:	2bff      	cmp	r3, #255	@ 0xff
 8014fa6:	d127      	bne.n	8014ff8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8014fa8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014fac:	f108 0605 	add.w	r6, r8, #5
 8014fb0:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014fb4:	3d01      	subs	r5, #1
 8014fb6:	b2d2      	uxtb	r2, r2
 8014fb8:	f898 1003 	ldrb.w	r1, [r8, #3]
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	f898 8004 	ldrb.w	r8, [r8, #4]
 8014fc2:	f362 0407 	bfi	r4, r2, #0, #8
 8014fc6:	b2c9      	uxtb	r1, r1
 8014fc8:	fa5f f888 	uxtb.w	r8, r8
 8014fcc:	f363 240f 	bfi	r4, r3, #8, #8
 8014fd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014fd4:	b2ad      	uxth	r5, r5
 8014fd6:	fb10 3301 	smlabb	r3, r0, r1, r3
 8014fda:	f361 4417 	bfi	r4, r1, #16, #8
 8014fde:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8014fe2:	f368 641f 	bfi	r4, r8, #24, #8
 8014fe6:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8014fea:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8014fee:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8014ff2:	f8c8 4004 	str.w	r4, [r8, #4]
 8014ff6:	e7d0      	b.n	8014f9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8014ff8:	119a      	asrs	r2, r3, #6
 8014ffa:	f108 0601 	add.w	r6, r8, #1
 8014ffe:	d107      	bne.n	8015010 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8015000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015004:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8015008:	685c      	ldr	r4, [r3, #4]
 801500a:	3d01      	subs	r5, #1
 801500c:	b2ad      	uxth	r5, r5
 801500e:	e7c4      	b.n	8014f9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8015010:	2a01      	cmp	r2, #1
 8015012:	d129      	bne.n	8015068 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8015014:	f003 0203 	and.w	r2, r3, #3
 8015018:	1ea1      	subs	r1, r4, #2
 801501a:	4411      	add	r1, r2
 801501c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8015020:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8015024:	b2c9      	uxtb	r1, r1
 8015026:	3a02      	subs	r2, #2
 8015028:	3b02      	subs	r3, #2
 801502a:	f361 0407 	bfi	r4, r1, #0, #8
 801502e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8015032:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015036:	f362 240f 	bfi	r4, r2, #8, #8
 801503a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801503e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015042:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8015046:	fb10 2203 	smlabb	r2, r0, r3, r2
 801504a:	f363 4417 	bfi	r4, r3, #16, #8
 801504e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8015052:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8015056:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801505a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801505e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8015062:	f8c8 4004 	str.w	r4, [r8, #4]
 8015066:	e7d0      	b.n	801500a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8015068:	2a02      	cmp	r2, #2
 801506a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801506e:	d12e      	bne.n	80150ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 8015070:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015074:	f1a3 0a20 	sub.w	sl, r3, #32
 8015078:	f108 0602 	add.w	r6, r8, #2
 801507c:	b2d2      	uxtb	r2, r2
 801507e:	f002 010f 	and.w	r1, r2, #15
 8015082:	1112      	asrs	r2, r2, #4
 8015084:	3908      	subs	r1, #8
 8015086:	3a08      	subs	r2, #8
 8015088:	4451      	add	r1, sl
 801508a:	4492      	add	sl, r2
 801508c:	4421      	add	r1, r4
 801508e:	b2c9      	uxtb	r1, r1
 8015090:	f361 0407 	bfi	r4, r1, #0, #8
 8015094:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8015098:	f1a8 0820 	sub.w	r8, r8, #32
 801509c:	4443      	add	r3, r8
 801509e:	b2db      	uxtb	r3, r3
 80150a0:	f363 240f 	bfi	r4, r3, #8, #8
 80150a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80150a8:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 80150ac:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 80150b0:	fb10 330a 	smlabb	r3, r0, sl, r3
 80150b4:	f36a 4417 	bfi	r4, sl, #16, #8
 80150b8:	fb1c 3301 	smlabb	r3, ip, r1, r3
 80150bc:	0e22      	lsrs	r2, r4, #24
 80150be:	fb1e 3202 	smlabb	r2, lr, r2, r3
 80150c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80150c6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80150ca:	6054      	str	r4, [r2, #4]
 80150cc:	e79d      	b.n	801500a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80150ce:	3301      	adds	r3, #1
 80150d0:	42ab      	cmp	r3, r5
 80150d2:	dd59      	ble.n	8015188 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 80150d4:	1b5d      	subs	r5, r3, r5
 80150d6:	2d00      	cmp	r5, #0
 80150d8:	dc58      	bgt.n	801518c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 80150da:	f8dd a004 	ldr.w	sl, [sp, #4]
 80150de:	f04f 0800 	mov.w	r8, #0
 80150e2:	f1ba 0f00 	cmp.w	sl, #0
 80150e6:	f340 8108 	ble.w	80152fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 80150ea:	1c73      	adds	r3, r6, #1
 80150ec:	9303      	str	r3, [sp, #12]
 80150ee:	7833      	ldrb	r3, [r6, #0]
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80150f4:	d16a      	bne.n	80151cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 80150f6:	7871      	ldrb	r1, [r6, #1]
 80150f8:	1d33      	adds	r3, r6, #4
 80150fa:	78b2      	ldrb	r2, [r6, #2]
 80150fc:	b2c9      	uxtb	r1, r1
 80150fe:	78f0      	ldrb	r0, [r6, #3]
 8015100:	b2d2      	uxtb	r2, r2
 8015102:	9303      	str	r3, [sp, #12]
 8015104:	f361 0407 	bfi	r4, r1, #0, #8
 8015108:	b2c0      	uxtb	r0, r0
 801510a:	2303      	movs	r3, #3
 801510c:	f362 240f 	bfi	r4, r2, #8, #8
 8015110:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015114:	fb13 2200 	smlabb	r2, r3, r0, r2
 8015118:	f360 4417 	bfi	r4, r0, #16, #8
 801511c:	2307      	movs	r3, #7
 801511e:	0e25      	lsrs	r5, r4, #24
 8015120:	fb13 2101 	smlabb	r1, r3, r1, r2
 8015124:	230b      	movs	r3, #11
 8015126:	fb13 1305 	smlabb	r3, r3, r5, r1
 801512a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801512e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8015132:	605c      	str	r4, [r3, #4]
 8015134:	2501      	movs	r5, #1
 8015136:	462e      	mov	r6, r5
 8015138:	eb06 0308 	add.w	r3, r6, r8
 801513c:	ebaa 0a06 	sub.w	sl, sl, r6
 8015140:	1bad      	subs	r5, r5, r6
 8015142:	2b40      	cmp	r3, #64	@ 0x40
 8015144:	dd16      	ble.n	8015174 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8015146:	4658      	mov	r0, fp
 8015148:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801514c:	f7f6 fe92 	bl	800be74 <_ZN8touchgfx5paint9flushLineEPmi>
 8015150:	4659      	mov	r1, fp
 8015152:	9b05      	ldr	r3, [sp, #20]
 8015154:	4642      	mov	r2, r8
 8015156:	4638      	mov	r0, r7
 8015158:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801515c:	f7f6 ff68 	bl	800c030 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8015160:	4b30      	ldr	r3, [pc, #192]	@ (8015224 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 8015162:	4447      	add	r7, r8
 8015164:	f04f 0800 	mov.w	r8, #0
 8015168:	459b      	cmp	fp, r3
 801516a:	bf0c      	ite	eq
 801516c:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8015228 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 8015170:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 8015224 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8015174:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8015178:	4633      	mov	r3, r6
 801517a:	3b01      	subs	r3, #1
 801517c:	f842 4b04 	str.w	r4, [r2], #4
 8015180:	d1fb      	bne.n	801517a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 8015182:	44b0      	add	r8, r6
 8015184:	9e03      	ldr	r6, [sp, #12]
 8015186:	e7ac      	b.n	80150e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8015188:	1aed      	subs	r5, r5, r3
 801518a:	e73f      	b.n	801500c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801518c:	9b01      	ldr	r3, [sp, #4]
 801518e:	42ab      	cmp	r3, r5
 8015190:	bfa8      	it	ge
 8015192:	462b      	movge	r3, r5
 8015194:	4698      	mov	r8, r3
 8015196:	9b01      	ldr	r3, [sp, #4]
 8015198:	eba3 0a08 	sub.w	sl, r3, r8
 801519c:	0e23      	lsrs	r3, r4, #24
 801519e:	eba5 0508 	sub.w	r5, r5, r8
 80151a2:	d00b      	beq.n	80151bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 80151a4:	9a05      	ldr	r2, [sp, #20]
 80151a6:	4641      	mov	r1, r8
 80151a8:	4638      	mov	r0, r7
 80151aa:	4353      	muls	r3, r2
 80151ac:	1c5a      	adds	r2, r3, #1
 80151ae:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80151b2:	4622      	mov	r2, r4
 80151b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80151b8:	f7f6 fe9a 	bl	800bef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80151bc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80151c0:	4447      	add	r7, r8
 80151c2:	e78c      	b.n	80150de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80151c4:	f8dd a004 	ldr.w	sl, [sp, #4]
 80151c8:	4646      	mov	r6, r8
 80151ca:	e788      	b.n	80150de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80151cc:	2bff      	cmp	r3, #255	@ 0xff
 80151ce:	d11d      	bne.n	801520c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 80151d0:	7870      	ldrb	r0, [r6, #1]
 80151d2:	1d73      	adds	r3, r6, #5
 80151d4:	78b2      	ldrb	r2, [r6, #2]
 80151d6:	b2c0      	uxtb	r0, r0
 80151d8:	78f5      	ldrb	r5, [r6, #3]
 80151da:	b2d2      	uxtb	r2, r2
 80151dc:	9303      	str	r3, [sp, #12]
 80151de:	f360 0407 	bfi	r4, r0, #0, #8
 80151e2:	7933      	ldrb	r3, [r6, #4]
 80151e4:	b2ed      	uxtb	r5, r5
 80151e6:	b2d9      	uxtb	r1, r3
 80151e8:	f362 240f 	bfi	r4, r2, #8, #8
 80151ec:	2303      	movs	r3, #3
 80151ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80151f2:	f365 4417 	bfi	r4, r5, #16, #8
 80151f6:	fb13 2205 	smlabb	r2, r3, r5, r2
 80151fa:	2307      	movs	r3, #7
 80151fc:	f361 641f 	bfi	r4, r1, #24, #8
 8015200:	fb13 2000 	smlabb	r0, r3, r0, r2
 8015204:	230b      	movs	r3, #11
 8015206:	fb13 0301 	smlabb	r3, r3, r1, r0
 801520a:	e78e      	b.n	801512a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801520c:	119d      	asrs	r5, r3, #6
 801520e:	d10d      	bne.n	801522c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8015210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015214:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8015218:	685c      	ldr	r4, [r3, #4]
 801521a:	e78b      	b.n	8015134 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801521c:	24065a50 	.word	0x24065a50
 8015220:	24065a4a 	.word	0x24065a4a
 8015224:	2405fae0 	.word	0x2405fae0
 8015228:	2405fbe0 	.word	0x2405fbe0
 801522c:	2d01      	cmp	r5, #1
 801522e:	d12a      	bne.n	8015286 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8015230:	f003 0203 	and.w	r2, r3, #3
 8015234:	1ea1      	subs	r1, r4, #2
 8015236:	2603      	movs	r6, #3
 8015238:	4411      	add	r1, r2
 801523a:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801523e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8015242:	b2c9      	uxtb	r1, r1
 8015244:	3a02      	subs	r2, #2
 8015246:	3b02      	subs	r3, #2
 8015248:	f361 0407 	bfi	r4, r1, #0, #8
 801524c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8015250:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015254:	f362 240f 	bfi	r4, r2, #8, #8
 8015258:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801525c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015260:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8015264:	fb16 2203 	smlabb	r2, r6, r3, r2
 8015268:	f363 4417 	bfi	r4, r3, #16, #8
 801526c:	2307      	movs	r3, #7
 801526e:	0e20      	lsrs	r0, r4, #24
 8015270:	fb13 2101 	smlabb	r1, r3, r1, r2
 8015274:	230b      	movs	r3, #11
 8015276:	fb13 1300 	smlabb	r3, r3, r0, r1
 801527a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801527e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8015282:	605c      	str	r4, [r3, #4]
 8015284:	e757      	b.n	8015136 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8015286:	2d02      	cmp	r5, #2
 8015288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801528c:	d12f      	bne.n	80152ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801528e:	1cb2      	adds	r2, r6, #2
 8015290:	f1a3 0020 	sub.w	r0, r3, #32
 8015294:	9203      	str	r2, [sp, #12]
 8015296:	7872      	ldrb	r2, [r6, #1]
 8015298:	b2d2      	uxtb	r2, r2
 801529a:	f002 010f 	and.w	r1, r2, #15
 801529e:	1112      	asrs	r2, r2, #4
 80152a0:	3908      	subs	r1, #8
 80152a2:	3a08      	subs	r2, #8
 80152a4:	4401      	add	r1, r0
 80152a6:	4402      	add	r2, r0
 80152a8:	4421      	add	r1, r4
 80152aa:	b2c9      	uxtb	r1, r1
 80152ac:	f361 0407 	bfi	r4, r1, #0, #8
 80152b0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80152b4:	3d20      	subs	r5, #32
 80152b6:	442b      	add	r3, r5
 80152b8:	2503      	movs	r5, #3
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	f363 240f 	bfi	r4, r3, #8, #8
 80152c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80152c4:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 80152c8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80152cc:	fb15 3302 	smlabb	r3, r5, r2, r3
 80152d0:	f362 4417 	bfi	r4, r2, #16, #8
 80152d4:	2207      	movs	r2, #7
 80152d6:	0e20      	lsrs	r0, r4, #24
 80152d8:	fb12 3201 	smlabb	r2, r2, r1, r3
 80152dc:	210b      	movs	r1, #11
 80152de:	fb11 2100 	smlabb	r1, r1, r0, r2
 80152e2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80152e6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80152ea:	604c      	str	r4, [r1, #4]
 80152ec:	e722      	b.n	8015134 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80152ee:	1c5d      	adds	r5, r3, #1
 80152f0:	4656      	mov	r6, sl
 80152f2:	45aa      	cmp	sl, r5
 80152f4:	bfa8      	it	ge
 80152f6:	462e      	movge	r6, r5
 80152f8:	e71e      	b.n	8015138 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 80152fa:	f1b8 0f00 	cmp.w	r8, #0
 80152fe:	d00d      	beq.n	801531c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8015300:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8015304:	4658      	mov	r0, fp
 8015306:	f7f6 fdb5 	bl	800be74 <_ZN8touchgfx5paint9flushLineEPmi>
 801530a:	4642      	mov	r2, r8
 801530c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015310:	4638      	mov	r0, r7
 8015312:	9b05      	ldr	r3, [sp, #20]
 8015314:	4659      	mov	r1, fp
 8015316:	4447      	add	r7, r8
 8015318:	f7f6 fe8a 	bl	800c030 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801531c:	4b1d      	ldr	r3, [pc, #116]	@ (8015394 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801531e:	9a01      	ldr	r2, [sp, #4]
 8015320:	881b      	ldrh	r3, [r3, #0]
 8015322:	1a9b      	subs	r3, r3, r2
 8015324:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015328:	441f      	add	r7, r3
 801532a:	9b04      	ldr	r3, [sp, #16]
 801532c:	3301      	adds	r3, #1
 801532e:	9304      	str	r3, [sp, #16]
 8015330:	9a04      	ldr	r2, [sp, #16]
 8015332:	9b00      	ldr	r3, [sp, #0]
 8015334:	4293      	cmp	r3, r2
 8015336:	d11d      	bne.n	8015374 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8015338:	9b02      	ldr	r3, [sp, #8]
 801533a:	2400      	movs	r4, #0
 801533c:	9a02      	ldr	r2, [sp, #8]
 801533e:	f103 0801 	add.w	r8, r3, #1
 8015342:	9b06      	ldr	r3, [sp, #24]
 8015344:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015348:	4621      	mov	r1, r4
 801534a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801534e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015352:	9b07      	ldr	r3, [sp, #28]
 8015354:	ba36      	rev	r6, r6
 8015356:	9808      	ldr	r0, [sp, #32]
 8015358:	441e      	add	r6, r3
 801535a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801535e:	1aed      	subs	r5, r5, r3
 8015360:	f007 f962 	bl	801c628 <memset>
 8015364:	f8cd 8008 	str.w	r8, [sp, #8]
 8015368:	b2ad      	uxth	r5, r5
 801536a:	9404      	str	r4, [sp, #16]
 801536c:	f7f6 fd6a 	bl	800be44 <_ZN8touchgfx5paint8tearDownEv>
 8015370:	46b0      	mov	r8, r6
 8015372:	e5df      	b.n	8014f34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 8015374:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015378:	9a01      	ldr	r2, [sp, #4]
 801537a:	1a9b      	subs	r3, r3, r2
 801537c:	1b5d      	subs	r5, r3, r5
 801537e:	b2ad      	uxth	r5, r5
 8015380:	e7f4      	b.n	801536c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 8015382:	4b05      	ldr	r3, [pc, #20]	@ (8015398 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	6803      	ldr	r3, [r0, #0]
 8015388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801538a:	4798      	blx	r3
 801538c:	b00f      	add	sp, #60	@ 0x3c
 801538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015392:	bf00      	nop
 8015394:	24065a4a 	.word	0x24065a4a
 8015398:	24065a50 	.word	0x24065a50

0801539c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a0:	b093      	sub	sp, #76	@ 0x4c
 80153a2:	460d      	mov	r5, r1
 80153a4:	4616      	mov	r6, r2
 80153a6:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 80153aa:	9000      	str	r0, [sp, #0]
 80153ac:	f1bb 0f00 	cmp.w	fp, #0
 80153b0:	f000 82ac 	beq.w	801590c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 80153b4:	6810      	ldr	r0, [r2, #0]
 80153b6:	ac0e      	add	r4, sp, #56	@ 0x38
 80153b8:	6851      	ldr	r1, [r2, #4]
 80153ba:	c403      	stmia	r4!, {r0, r1}
 80153bc:	6818      	ldr	r0, [r3, #0]
 80153be:	ac10      	add	r4, sp, #64	@ 0x40
 80153c0:	6859      	ldr	r1, [r3, #4]
 80153c2:	c403      	stmia	r4!, {r0, r1}
 80153c4:	a80e      	add	r0, sp, #56	@ 0x38
 80153c6:	f7f9 ff31 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80153ca:	4631      	mov	r1, r6
 80153cc:	a810      	add	r0, sp, #64	@ 0x40
 80153ce:	f7f9 ff55 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80153d2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80153d6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80153da:	bfdb      	ittet	le
 80153dc:	b293      	uxthle	r3, r2
 80153de:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80153e2:	2301      	movgt	r3, #1
 80153e4:	fb91 f3f3 	sdivle	r3, r1, r3
 80153e8:	9301      	str	r3, [sp, #4]
 80153ea:	f105 0308 	add.w	r3, r5, #8
 80153ee:	9901      	ldr	r1, [sp, #4]
 80153f0:	9305      	str	r3, [sp, #20]
 80153f2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80153f6:	440b      	add	r3, r1
 80153f8:	3b01      	subs	r3, #1
 80153fa:	fb93 f3f1 	sdiv	r3, r3, r1
 80153fe:	3b01      	subs	r3, #1
 8015400:	9905      	ldr	r1, [sp, #20]
 8015402:	b29b      	uxth	r3, r3
 8015404:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015408:	9901      	ldr	r1, [sp, #4]
 801540a:	9306      	str	r3, [sp, #24]
 801540c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8015410:	fb93 f0f1 	sdiv	r0, r3, r1
 8015414:	b284      	uxth	r4, r0
 8015416:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801541a:	9403      	str	r4, [sp, #12]
 801541c:	9d03      	ldr	r5, [sp, #12]
 801541e:	9c01      	ldr	r4, [sp, #4]
 8015420:	fb05 3714 	mls	r7, r5, r4, r3
 8015424:	fb17 f702 	smulbb	r7, r7, r2
 8015428:	440f      	add	r7, r1
 801542a:	b2bf      	uxth	r7, r7
 801542c:	2d00      	cmp	r5, #0
 801542e:	d06b      	beq.n	8015508 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8015430:	1e6a      	subs	r2, r5, #1
 8015432:	9805      	ldr	r0, [sp, #20]
 8015434:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8015438:	9a06      	ldr	r2, [sp, #24]
 801543a:	fa99 f989 	rev.w	r9, r9
 801543e:	4491      	add	r9, r2
 8015440:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8015444:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8015448:	4411      	add	r1, r2
 801544a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801544e:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 80157ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 8015452:	4413      	add	r3, r2
 8015454:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8015458:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801545c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8015460:	9302      	str	r3, [sp, #8]
 8015462:	4bd0      	ldr	r3, [pc, #832]	@ (80157a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 8015464:	6818      	ldr	r0, [r3, #0]
 8015466:	6803      	ldr	r3, [r0, #0]
 8015468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801546a:	4798      	blx	r3
 801546c:	4bce      	ldr	r3, [pc, #824]	@ (80157a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801546e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8015472:	881b      	ldrh	r3, [r3, #0]
 8015474:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8015478:	fb03 2404 	mla	r4, r3, r4, r2
 801547c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015480:	436b      	muls	r3, r5
 8015482:	2500      	movs	r5, #0
 8015484:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801548c:	4629      	mov	r1, r5
 801548e:	4404      	add	r4, r0
 8015490:	18e3      	adds	r3, r4, r3
 8015492:	930d      	str	r3, [sp, #52]	@ 0x34
 8015494:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8015498:	fb97 f3f3 	sdiv	r3, r7, r3
 801549c:	9304      	str	r3, [sp, #16]
 801549e:	9b00      	ldr	r3, [sp, #0]
 80154a0:	3304      	adds	r3, #4
 80154a2:	4618      	mov	r0, r3
 80154a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80154a6:	f007 f8bf 	bl	801c628 <memset>
 80154aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80154ac:	42a3      	cmp	r3, r4
 80154ae:	f240 8228 	bls.w	8015902 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 80154b2:	2003      	movs	r0, #3
 80154b4:	2607      	movs	r6, #7
 80154b6:	2f00      	cmp	r7, #0
 80154b8:	f000 80cb 	beq.w	8015652 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 80154bc:	f899 3000 	ldrb.w	r3, [r9]
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80154c4:	d123      	bne.n	801550e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 80154c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80154ca:	3f01      	subs	r7, #1
 80154cc:	f899 2002 	ldrb.w	r2, [r9, #2]
 80154d0:	f109 0804 	add.w	r8, r9, #4
 80154d4:	b2db      	uxtb	r3, r3
 80154d6:	f899 1003 	ldrb.w	r1, [r9, #3]
 80154da:	b2d2      	uxtb	r2, r2
 80154dc:	f363 0507 	bfi	r5, r3, #0, #8
 80154e0:	b2c9      	uxtb	r1, r1
 80154e2:	b2bf      	uxth	r7, r7
 80154e4:	f362 250f 	bfi	r5, r2, #8, #8
 80154e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80154ec:	fb10 2201 	smlabb	r2, r0, r1, r2
 80154f0:	f361 4517 	bfi	r5, r1, #16, #8
 80154f4:	fb16 2303 	smlabb	r3, r6, r3, r2
 80154f8:	9a00      	ldr	r2, [sp, #0]
 80154fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80154fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015502:	605d      	str	r5, [r3, #4]
 8015504:	46c1      	mov	r9, r8
 8015506:	e7d6      	b.n	80154b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8015508:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801550c:	e798      	b.n	8015440 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801550e:	119a      	asrs	r2, r3, #6
 8015510:	f109 0801 	add.w	r8, r9, #1
 8015514:	d108      	bne.n	8015528 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8015516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801551a:	9a00      	ldr	r2, [sp, #0]
 801551c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015520:	685d      	ldr	r5, [r3, #4]
 8015522:	3f01      	subs	r7, #1
 8015524:	b2bf      	uxth	r7, r7
 8015526:	e7ed      	b.n	8015504 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8015528:	2a01      	cmp	r2, #1
 801552a:	d125      	bne.n	8015578 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801552c:	f003 0103 	and.w	r1, r3, #3
 8015530:	1eaa      	subs	r2, r5, #2
 8015532:	440a      	add	r2, r1
 8015534:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8015538:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801553c:	b2d2      	uxtb	r2, r2
 801553e:	3902      	subs	r1, #2
 8015540:	3b02      	subs	r3, #2
 8015542:	f362 0507 	bfi	r5, r2, #0, #8
 8015546:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801554a:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801554e:	f361 250f 	bfi	r5, r1, #8, #8
 8015552:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015556:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801555a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801555e:	fb10 1103 	smlabb	r1, r0, r3, r1
 8015562:	f363 4517 	bfi	r5, r3, #16, #8
 8015566:	9b00      	ldr	r3, [sp, #0]
 8015568:	fb16 1202 	smlabb	r2, r6, r2, r1
 801556c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8015570:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015574:	6055      	str	r5, [r2, #4]
 8015576:	e7d4      	b.n	8015522 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8015578:	2a02      	cmp	r2, #2
 801557a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801557e:	d12c      	bne.n	80155da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8015580:	f899 2001 	ldrb.w	r2, [r9, #1]
 8015584:	f1a3 0c20 	sub.w	ip, r3, #32
 8015588:	f109 0802 	add.w	r8, r9, #2
 801558c:	b2d2      	uxtb	r2, r2
 801558e:	f002 010f 	and.w	r1, r2, #15
 8015592:	1112      	asrs	r2, r2, #4
 8015594:	3908      	subs	r1, #8
 8015596:	3a08      	subs	r2, #8
 8015598:	4461      	add	r1, ip
 801559a:	4494      	add	ip, r2
 801559c:	4429      	add	r1, r5
 801559e:	b2c9      	uxtb	r1, r1
 80155a0:	f361 0507 	bfi	r5, r1, #0, #8
 80155a4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80155a8:	f1ae 0e20 	sub.w	lr, lr, #32
 80155ac:	4473      	add	r3, lr
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	f363 250f 	bfi	r5, r3, #8, #8
 80155b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80155b8:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 80155bc:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80155c0:	fb10 330c 	smlabb	r3, r0, ip, r3
 80155c4:	f36c 4517 	bfi	r5, ip, #16, #8
 80155c8:	fb16 3101 	smlabb	r1, r6, r1, r3
 80155cc:	9b00      	ldr	r3, [sp, #0]
 80155ce:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80155d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80155d6:	604d      	str	r5, [r1, #4]
 80155d8:	e7a3      	b.n	8015522 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80155da:	3301      	adds	r3, #1
 80155dc:	42bb      	cmp	r3, r7
 80155de:	dd23      	ble.n	8015628 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 80155e0:	eba3 0907 	sub.w	r9, r3, r7
 80155e4:	f1b9 0f00 	cmp.w	r9, #0
 80155e8:	dc20      	bgt.n	801562c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 80155ea:	9e02      	ldr	r6, [sp, #8]
 80155ec:	2700      	movs	r7, #0
 80155ee:	2e00      	cmp	r6, #0
 80155f0:	f340 8142 	ble.w	8015878 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 80155f4:	f108 0301 	add.w	r3, r8, #1
 80155f8:	9307      	str	r3, [sp, #28]
 80155fa:	f898 3000 	ldrb.w	r3, [r8]
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	119a      	asrs	r2, r3, #6
 8015602:	d12a      	bne.n	801565a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8015604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015608:	9a00      	ldr	r2, [sp, #0]
 801560a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801560e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015612:	685d      	ldr	r5, [r3, #4]
 8015614:	f040 811f 	bne.w	8015856 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8015618:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801561c:	7025      	strb	r5, [r4, #0]
 801561e:	7063      	strb	r3, [r4, #1]
 8015620:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8015624:	70a3      	strb	r3, [r4, #2]
 8015626:	e04e      	b.n	80156c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8015628:	1aff      	subs	r7, r7, r3
 801562a:	e77b      	b.n	8015524 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801562c:	9b02      	ldr	r3, [sp, #8]
 801562e:	4620      	mov	r0, r4
 8015630:	462a      	mov	r2, r5
 8015632:	454b      	cmp	r3, r9
 8015634:	bfa8      	it	ge
 8015636:	464b      	movge	r3, r9
 8015638:	461f      	mov	r7, r3
 801563a:	9b02      	ldr	r3, [sp, #8]
 801563c:	4639      	mov	r1, r7
 801563e:	1bde      	subs	r6, r3, r7
 8015640:	eba9 0907 	sub.w	r9, r9, r7
 8015644:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015648:	465b      	mov	r3, fp
 801564a:	f7f6 fc51 	bl	800bef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801564e:	443c      	add	r4, r7
 8015650:	e7cc      	b.n	80155ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8015652:	46c8      	mov	r8, r9
 8015654:	9e02      	ldr	r6, [sp, #8]
 8015656:	46b9      	mov	r9, r7
 8015658:	e7c8      	b.n	80155ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801565a:	2a01      	cmp	r2, #1
 801565c:	d136      	bne.n	80156cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801565e:	f003 0103 	and.w	r1, r3, #3
 8015662:	1ea8      	subs	r0, r5, #2
 8015664:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8015668:	4408      	add	r0, r1
 801566a:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801566e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8015672:	b2c0      	uxtb	r0, r0
 8015674:	f1a1 0102 	sub.w	r1, r1, #2
 8015678:	f1a3 0302 	sub.w	r3, r3, #2
 801567c:	f360 0507 	bfi	r5, r0, #0, #8
 8015680:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8015684:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8015688:	f361 250f 	bfi	r5, r1, #8, #8
 801568c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8015690:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8015694:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8015698:	f04f 0303 	mov.w	r3, #3
 801569c:	fb13 ce08 	smlabb	lr, r3, r8, ip
 80156a0:	f04f 0c07 	mov.w	ip, #7
 80156a4:	9b00      	ldr	r3, [sp, #0]
 80156a6:	f368 4517 	bfi	r5, r8, #16, #8
 80156aa:	fb1c ec00 	smlabb	ip, ip, r0, lr
 80156ae:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 80156b2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80156b6:	f8cc 5004 	str.w	r5, [ip, #4]
 80156ba:	f040 80cd 	bne.w	8015858 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 80156be:	7020      	strb	r0, [r4, #0]
 80156c0:	7061      	strb	r1, [r4, #1]
 80156c2:	f884 8002 	strb.w	r8, [r4, #2]
 80156c6:	3e01      	subs	r6, #1
 80156c8:	3403      	adds	r4, #3
 80156ca:	e0c1      	b.n	8015850 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 80156cc:	2a02      	cmp	r2, #2
 80156ce:	d13d      	bne.n	801574c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 80156d0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80156d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80156d8:	f108 0202 	add.w	r2, r8, #2
 80156dc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80156e0:	b2c9      	uxtb	r1, r1
 80156e2:	f1a3 0c20 	sub.w	ip, r3, #32
 80156e6:	9207      	str	r2, [sp, #28]
 80156e8:	f001 000f 	and.w	r0, r1, #15
 80156ec:	f1a0 0008 	sub.w	r0, r0, #8
 80156f0:	4460      	add	r0, ip
 80156f2:	4428      	add	r0, r5
 80156f4:	b2c0      	uxtb	r0, r0
 80156f6:	f360 0507 	bfi	r5, r0, #0, #8
 80156fa:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80156fe:	f1a2 0220 	sub.w	r2, r2, #32
 8015702:	4413      	add	r3, r2
 8015704:	ea4f 1221 	mov.w	r2, r1, asr #4
 8015708:	b2db      	uxtb	r3, r3
 801570a:	f1a2 0208 	sub.w	r2, r2, #8
 801570e:	f363 250f 	bfi	r5, r3, #8, #8
 8015712:	4462      	add	r2, ip
 8015714:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8015718:	f04f 0c03 	mov.w	ip, #3
 801571c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8015720:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015724:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8015728:	f04f 0107 	mov.w	r1, #7
 801572c:	f362 4517 	bfi	r5, r2, #16, #8
 8015730:	fb11 c100 	smlabb	r1, r1, r0, ip
 8015734:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8015738:	9900      	ldr	r1, [sp, #0]
 801573a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801573e:	604d      	str	r5, [r1, #4]
 8015740:	f040 8089 	bne.w	8015856 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8015744:	7020      	strb	r0, [r4, #0]
 8015746:	7063      	strb	r3, [r4, #1]
 8015748:	70a2      	strb	r2, [r4, #2]
 801574a:	e7bc      	b.n	80156c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801574c:	2bfe      	cmp	r3, #254	@ 0xfe
 801574e:	d12f      	bne.n	80157b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8015750:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015754:	f108 0304 	add.w	r3, r8, #4
 8015758:	f898 2002 	ldrb.w	r2, [r8, #2]
 801575c:	f04f 0c03 	mov.w	ip, #3
 8015760:	f898 1003 	ldrb.w	r1, [r8, #3]
 8015764:	b2c0      	uxtb	r0, r0
 8015766:	b2d2      	uxtb	r2, r2
 8015768:	9307      	str	r3, [sp, #28]
 801576a:	b2c9      	uxtb	r1, r1
 801576c:	f360 0507 	bfi	r5, r0, #0, #8
 8015770:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8015774:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8015778:	f362 250f 	bfi	r5, r2, #8, #8
 801577c:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8015780:	f04f 0307 	mov.w	r3, #7
 8015784:	f361 4517 	bfi	r5, r1, #16, #8
 8015788:	fb13 c300 	smlabb	r3, r3, r0, ip
 801578c:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8015790:	9b00      	ldr	r3, [sp, #0]
 8015792:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8015796:	605d      	str	r5, [r3, #4]
 8015798:	d15d      	bne.n	8015856 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801579a:	7020      	strb	r0, [r4, #0]
 801579c:	7062      	strb	r2, [r4, #1]
 801579e:	70a1      	strb	r1, [r4, #2]
 80157a0:	e791      	b.n	80156c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80157a2:	bf00      	nop
 80157a4:	24065a50 	.word	0x24065a50
 80157a8:	24065a4a 	.word	0x24065a4a
 80157ac:	2405fae0 	.word	0x2405fae0
 80157b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80157b4:	1c5a      	adds	r2, r3, #1
 80157b6:	b94b      	cbnz	r3, 80157cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 80157b8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80157bc:	d14c      	bne.n	8015858 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 80157be:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80157c2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80157c6:	7025      	strb	r5, [r4, #0]
 80157c8:	7062      	strb	r2, [r4, #1]
 80157ca:	e72b      	b.n	8015624 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 80157cc:	4296      	cmp	r6, r2
 80157ce:	46b0      	mov	r8, r6
 80157d0:	bfa8      	it	ge
 80157d2:	4690      	movge	r8, r2
 80157d4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80157d8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80157dc:	eba6 0608 	sub.w	r6, r6, r8
 80157e0:	eba2 0908 	sub.w	r9, r2, r8
 80157e4:	9308      	str	r3, [sp, #32]
 80157e6:	b2eb      	uxtb	r3, r5
 80157e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80157ea:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80157ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157f0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80157f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80157f6:	9b08      	ldr	r3, [sp, #32]
 80157f8:	d030      	beq.n	801585c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 80157fa:	18fb      	adds	r3, r7, r3
 80157fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80157fe:	dd15      	ble.n	801582c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8015800:	4650      	mov	r0, sl
 8015802:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8015806:	f7f6 fb35 	bl	800be74 <_ZN8touchgfx5paint9flushLineEPmi>
 801580a:	2203      	movs	r2, #3
 801580c:	4651      	mov	r1, sl
 801580e:	465b      	mov	r3, fp
 8015810:	4620      	mov	r0, r4
 8015812:	443c      	add	r4, r7
 8015814:	fb97 f2f2 	sdiv	r2, r7, r2
 8015818:	f7f6 fbbe 	bl	800bf98 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801581c:	4b3d      	ldr	r3, [pc, #244]	@ (8015914 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801581e:	2700      	movs	r7, #0
 8015820:	459a      	cmp	sl, r3
 8015822:	bf0c      	ite	eq
 8015824:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8015920 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8015828:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8015914 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801582c:	eb0a 0307 	add.w	r3, sl, r7
 8015830:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015832:	f1b8 0801 	subs.w	r8, r8, #1
 8015836:	f103 0303 	add.w	r3, r3, #3
 801583a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801583e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015840:	f803 2c02 	strb.w	r2, [r3, #-2]
 8015844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015846:	f803 2c01 	strb.w	r2, [r3, #-1]
 801584a:	d1f1      	bne.n	8015830 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801584c:	9b08      	ldr	r3, [sp, #32]
 801584e:	441f      	add	r7, r3
 8015850:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015854:	e6cb      	b.n	80155ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8015856:	2201      	movs	r2, #1
 8015858:	4690      	mov	r8, r2
 801585a:	e7bb      	b.n	80157d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801585c:	4423      	add	r3, r4
 801585e:	42a3      	cmp	r3, r4
 8015860:	d9f6      	bls.n	8015850 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8015862:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015864:	3403      	adds	r4, #3
 8015866:	f804 2c03 	strb.w	r2, [r4, #-3]
 801586a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801586c:	f804 2c02 	strb.w	r2, [r4, #-2]
 8015870:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015872:	f804 2c01 	strb.w	r2, [r4, #-1]
 8015876:	e7f2      	b.n	801585e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8015878:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801587c:	d00e      	beq.n	801589c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801587e:	b16f      	cbz	r7, 801589c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8015880:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8015884:	4650      	mov	r0, sl
 8015886:	f7f6 faf5 	bl	800be74 <_ZN8touchgfx5paint9flushLineEPmi>
 801588a:	2203      	movs	r2, #3
 801588c:	4620      	mov	r0, r4
 801588e:	443c      	add	r4, r7
 8015890:	465b      	mov	r3, fp
 8015892:	4651      	mov	r1, sl
 8015894:	fb97 f2f2 	sdiv	r2, r7, r2
 8015898:	f7f6 fb7e 	bl	800bf98 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801589c:	4b1e      	ldr	r3, [pc, #120]	@ (8015918 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801589e:	9a02      	ldr	r2, [sp, #8]
 80158a0:	881b      	ldrh	r3, [r3, #0]
 80158a2:	1a9b      	subs	r3, r3, r2
 80158a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158a8:	441c      	add	r4, r3
 80158aa:	9b04      	ldr	r3, [sp, #16]
 80158ac:	3301      	adds	r3, #1
 80158ae:	9304      	str	r3, [sp, #16]
 80158b0:	9a04      	ldr	r2, [sp, #16]
 80158b2:	9b01      	ldr	r3, [sp, #4]
 80158b4:	4293      	cmp	r3, r2
 80158b6:	d11c      	bne.n	80158f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 80158b8:	9b03      	ldr	r3, [sp, #12]
 80158ba:	2500      	movs	r5, #0
 80158bc:	9a03      	ldr	r2, [sp, #12]
 80158be:	1c5e      	adds	r6, r3, #1
 80158c0:	9b05      	ldr	r3, [sp, #20]
 80158c2:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 80158c6:	4629      	mov	r1, r5
 80158c8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80158cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80158d0:	9b06      	ldr	r3, [sp, #24]
 80158d2:	fa98 f888 	rev.w	r8, r8
 80158d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158d8:	4498      	add	r8, r3
 80158da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80158de:	1aff      	subs	r7, r7, r3
 80158e0:	f006 fea2 	bl	801c628 <memset>
 80158e4:	b2bf      	uxth	r7, r7
 80158e6:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80158ea:	f7f6 faab 	bl	800be44 <_ZN8touchgfx5paint8tearDownEv>
 80158ee:	46c1      	mov	r9, r8
 80158f0:	e5db      	b.n	80154aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 80158f2:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 80158f6:	9b02      	ldr	r3, [sp, #8]
 80158f8:	1aff      	subs	r7, r7, r3
 80158fa:	eba7 0709 	sub.w	r7, r7, r9
 80158fe:	b2bf      	uxth	r7, r7
 8015900:	e7f3      	b.n	80158ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8015902:	4b06      	ldr	r3, [pc, #24]	@ (801591c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8015904:	6818      	ldr	r0, [r3, #0]
 8015906:	6803      	ldr	r3, [r0, #0]
 8015908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801590a:	4798      	blx	r3
 801590c:	b013      	add	sp, #76	@ 0x4c
 801590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015912:	bf00      	nop
 8015914:	2405fae0 	.word	0x2405fae0
 8015918:	24065a4a 	.word	0x24065a4a
 801591c:	24065a50 	.word	0x24065a50
 8015920:	2405fbe0 	.word	0x2405fbe0

08015924 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8015924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015928:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801592c:	9c06      	ldr	r4, [sp, #24]
 801592e:	2800      	cmp	r0, #0
 8015930:	d06e      	beq.n	8015a10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015932:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8015936:	2d00      	cmp	r5, #0
 8015938:	dd6a      	ble.n	8015a10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801593a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801593e:	f1bc 0f00 	cmp.w	ip, #0
 8015942:	dd65      	ble.n	8015a10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015944:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8015948:	28ff      	cmp	r0, #255	@ 0xff
 801594a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801594e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8015952:	fb02 3306 	mla	r3, r2, r6, r3
 8015956:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801595a:	b2e4      	uxtb	r4, r4
 801595c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015960:	4419      	add	r1, r3
 8015962:	fb02 f30c 	mul.w	r3, r2, ip
 8015966:	eba2 0205 	sub.w	r2, r2, r5
 801596a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801596e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015972:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015976:	440b      	add	r3, r1
 8015978:	d03e      	beq.n	80159f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801597a:	fa1f fc80 	uxth.w	ip, r0
 801597e:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8015982:	fb06 f60c 	mul.w	r6, r6, ip
 8015986:	b280      	uxth	r0, r0
 8015988:	fb07 f70c 	mul.w	r7, r7, ip
 801598c:	fb04 f40c 	mul.w	r4, r4, ip
 8015990:	4299      	cmp	r1, r3
 8015992:	d23d      	bcs.n	8015a10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015994:	eb01 0c05 	add.w	ip, r1, r5
 8015998:	458c      	cmp	ip, r1
 801599a:	f101 0e03 	add.w	lr, r1, #3
 801599e:	d928      	bls.n	80159f2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80159a0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80159a4:	fb11 f100 	smulbb	r1, r1, r0
 80159a8:	4421      	add	r1, r4
 80159aa:	b289      	uxth	r1, r1
 80159ac:	f101 0801 	add.w	r8, r1, #1
 80159b0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80159b4:	1209      	asrs	r1, r1, #8
 80159b6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80159ba:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80159be:	fb11 f100 	smulbb	r1, r1, r0
 80159c2:	4439      	add	r1, r7
 80159c4:	b289      	uxth	r1, r1
 80159c6:	f101 0801 	add.w	r8, r1, #1
 80159ca:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80159ce:	1209      	asrs	r1, r1, #8
 80159d0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80159d4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80159d8:	fb11 f100 	smulbb	r1, r1, r0
 80159dc:	4431      	add	r1, r6
 80159de:	b289      	uxth	r1, r1
 80159e0:	f101 0801 	add.w	r8, r1, #1
 80159e4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80159e8:	1209      	asrs	r1, r1, #8
 80159ea:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80159ee:	4671      	mov	r1, lr
 80159f0:	e7d2      	b.n	8015998 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80159f2:	4411      	add	r1, r2
 80159f4:	e7cc      	b.n	8015990 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80159f6:	4411      	add	r1, r2
 80159f8:	4299      	cmp	r1, r3
 80159fa:	d209      	bcs.n	8015a10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80159fc:	1948      	adds	r0, r1, r5
 80159fe:	4281      	cmp	r1, r0
 8015a00:	d2f9      	bcs.n	80159f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8015a02:	700c      	strb	r4, [r1, #0]
 8015a04:	3103      	adds	r1, #3
 8015a06:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015a0a:	f801 6c01 	strb.w	r6, [r1, #-1]
 8015a0e:	e7f6      	b.n	80159fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8015a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8015a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a18:	b093      	sub	sp, #76	@ 0x4c
 8015a1a:	4699      	mov	r9, r3
 8015a1c:	4617      	mov	r7, r2
 8015a1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a22:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8015a26:	4604      	mov	r4, r0
 8015a28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015a2c:	a80c      	add	r0, sp, #48	@ 0x30
 8015a2e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8015a32:	460d      	mov	r5, r1
 8015a34:	4649      	mov	r1, r9
 8015a36:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8015a3a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015a3e:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8015a42:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8015a46:	f7f7 fc31 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 8015a4a:	4639      	mov	r1, r7
 8015a4c:	a80c      	add	r0, sp, #48	@ 0x30
 8015a4e:	f7f7 fc2d 	bl	800d2ac <_ZN8touchgfx4RectaNERKS0_>
 8015a52:	4b78      	ldr	r3, [pc, #480]	@ (8015c34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8015a54:	8818      	ldrh	r0, [r3, #0]
 8015a56:	4b78      	ldr	r3, [pc, #480]	@ (8015c38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8015a58:	b202      	sxth	r2, r0
 8015a5a:	8819      	ldrh	r1, [r3, #0]
 8015a5c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8015a60:	b20f      	sxth	r7, r1
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	da07      	bge.n	8015a76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8015a66:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8015a6a:	4463      	add	r3, ip
 8015a6c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8015a70:	2300      	movs	r3, #0
 8015a72:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8015a76:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8015a7a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8015a7e:	1ad2      	subs	r2, r2, r3
 8015a80:	4594      	cmp	ip, r2
 8015a82:	bfc4      	itt	gt
 8015a84:	1ac2      	subgt	r2, r0, r3
 8015a86:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8015a8a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8015a8e:	2a00      	cmp	r2, #0
 8015a90:	da07      	bge.n	8015aa2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8015a92:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8015a96:	4462      	add	r2, ip
 8015a98:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015aa2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8015aa6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8015aaa:	1abf      	subs	r7, r7, r2
 8015aac:	45bc      	cmp	ip, r7
 8015aae:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8015c40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8015ab2:	bfc8      	it	gt
 8015ab4:	1a8f      	subgt	r7, r1, r2
 8015ab6:	f89c c000 	ldrb.w	ip, [ip]
 8015aba:	bfc8      	it	gt
 8015abc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8015ac0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8015ac4:	f1bc 0f00 	cmp.w	ip, #0
 8015ac8:	d176      	bne.n	8015bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8015aca:	4287      	cmp	r7, r0
 8015acc:	bf14      	ite	ne
 8015ace:	2100      	movne	r1, #0
 8015ad0:	2101      	moveq	r1, #1
 8015ad2:	2f00      	cmp	r7, #0
 8015ad4:	9107      	str	r1, [sp, #28]
 8015ad6:	dd73      	ble.n	8015bc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8015ad8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8015adc:	2900      	cmp	r1, #0
 8015ade:	9104      	str	r1, [sp, #16]
 8015ae0:	dd6e      	ble.n	8015bc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8015ae2:	f8b9 1000 	ldrh.w	r1, [r9]
 8015ae6:	a80e      	add	r0, sp, #56	@ 0x38
 8015ae8:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8015aec:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8015af0:	1a5b      	subs	r3, r3, r1
 8015af2:	a910      	add	r1, sp, #64	@ 0x40
 8015af4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8015af8:	b21b      	sxth	r3, r3
 8015afa:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8015afe:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8015c44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8015b02:	9305      	str	r3, [sp, #20]
 8015b04:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8015b08:	1ad2      	subs	r2, r2, r3
 8015b0a:	b213      	sxth	r3, r2
 8015b0c:	9306      	str	r3, [sp, #24]
 8015b0e:	9b05      	ldr	r3, [sp, #20]
 8015b10:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8015b14:	9b06      	ldr	r3, [sp, #24]
 8015b16:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8015b1a:	9b04      	ldr	r3, [sp, #16]
 8015b1c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8015b20:	2300      	movs	r3, #0
 8015b22:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b24:	f7f9 fbaa 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015b28:	4640      	mov	r0, r8
 8015b2a:	f7f9 fb7f 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b2e:	a810      	add	r0, sp, #64	@ 0x40
 8015b30:	f7f9 fb7c 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b34:	4b41      	ldr	r3, [pc, #260]	@ (8015c3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8015b36:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	881b      	ldrh	r3, [r3, #0]
 8015b3e:	9308      	str	r3, [sp, #32]
 8015b40:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015b44:	b21b      	sxth	r3, r3
 8015b46:	9303      	str	r3, [sp, #12]
 8015b48:	682b      	ldr	r3, [r5, #0]
 8015b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b4c:	4798      	blx	r3
 8015b4e:	9a03      	ldr	r2, [sp, #12]
 8015b50:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8015b54:	4681      	mov	r9, r0
 8015b56:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8015b5a:	fb13 f302 	smulbb	r3, r3, r2
 8015b5e:	2203      	movs	r2, #3
 8015b60:	f8da 0000 	ldr.w	r0, [sl]
 8015b64:	fb15 3302 	smlabb	r3, r5, r2, r3
 8015b68:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8015b6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015b6c:	441d      	add	r5, r3
 8015b6e:	6803      	ldr	r3, [r0, #0]
 8015b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b72:	4798      	blx	r3
 8015b74:	9009      	str	r0, [sp, #36]	@ 0x24
 8015b76:	f8da 0000 	ldr.w	r0, [sl]
 8015b7a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8015b7e:	6803      	ldr	r3, [r0, #0]
 8015b80:	910a      	str	r1, [sp, #40]	@ 0x28
 8015b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b84:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8015b88:	4798      	blx	r3
 8015b8a:	f010 0f01 	tst.w	r0, #1
 8015b8e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8015b92:	d01e      	beq.n	8015bd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8015b94:	f8da 0000 	ldr.w	r0, [sl]
 8015b98:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8015b9c:	6803      	ldr	r3, [r0, #0]
 8015b9e:	9200      	str	r2, [sp, #0]
 8015ba0:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015ba2:	462b      	mov	r3, r5
 8015ba4:	e898 0006 	ldmia.w	r8, {r1, r2}
 8015ba8:	47b0      	blx	r6
 8015baa:	9b05      	ldr	r3, [sp, #20]
 8015bac:	80a7      	strh	r7, [r4, #4]
 8015bae:	8023      	strh	r3, [r4, #0]
 8015bb0:	9b06      	ldr	r3, [sp, #24]
 8015bb2:	8063      	strh	r3, [r4, #2]
 8015bb4:	9b04      	ldr	r3, [sp, #16]
 8015bb6:	e007      	b.n	8015bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8015bb8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8015bbc:	4288      	cmp	r0, r1
 8015bbe:	e785      	b.n	8015acc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	8023      	strh	r3, [r4, #0]
 8015bc4:	8063      	strh	r3, [r4, #2]
 8015bc6:	80a3      	strh	r3, [r4, #4]
 8015bc8:	4620      	mov	r0, r4
 8015bca:	80e3      	strh	r3, [r4, #6]
 8015bcc:	b013      	add	sp, #76	@ 0x4c
 8015bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd2:	fb09 f606 	mul.w	r6, r9, r6
 8015bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bd8:	fb11 6602 	smlabb	r6, r1, r2, r6
 8015bdc:	9a07      	ldr	r2, [sp, #28]
 8015bde:	4433      	add	r3, r6
 8015be0:	461e      	mov	r6, r3
 8015be2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8015be6:	b16a      	cbz	r2, 8015c04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8015be8:	9a08      	ldr	r2, [sp, #32]
 8015bea:	4593      	cmp	fp, r2
 8015bec:	d10a      	bne.n	8015c04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8015bee:	f8da 0000 	ldr.w	r0, [sl]
 8015bf2:	fb09 f303 	mul.w	r3, r9, r3
 8015bf6:	4629      	mov	r1, r5
 8015bf8:	6802      	ldr	r2, [r0, #0]
 8015bfa:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8015bfe:	4632      	mov	r2, r6
 8015c00:	47d0      	blx	sl
 8015c02:	e7d2      	b.n	8015baa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8015c04:	9a03      	ldr	r2, [sp, #12]
 8015c06:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8015c44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8015c0a:	fb02 5803 	mla	r8, r2, r3, r5
 8015c0e:	4545      	cmp	r5, r8
 8015c10:	d2cb      	bcs.n	8015baa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8015c12:	f8db 0000 	ldr.w	r0, [fp]
 8015c16:	4629      	mov	r1, r5
 8015c18:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8015c1c:	6802      	ldr	r2, [r0, #0]
 8015c1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c22:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8015c26:	4632      	mov	r2, r6
 8015c28:	47d0      	blx	sl
 8015c2a:	9b03      	ldr	r3, [sp, #12]
 8015c2c:	444e      	add	r6, r9
 8015c2e:	441d      	add	r5, r3
 8015c30:	e7ed      	b.n	8015c0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8015c32:	bf00      	nop
 8015c34:	24065a44 	.word	0x24065a44
 8015c38:	24065a46 	.word	0x24065a46
 8015c3c:	24065a4a 	.word	0x24065a4a
 8015c40:	24065a48 	.word	0x24065a48
 8015c44:	24065a50 	.word	0x24065a50

08015c48 <_ZN8touchgfx8LCD24bppC1Ev>:
 8015c48:	2200      	movs	r2, #0
 8015c4a:	490e      	ldr	r1, [pc, #56]	@ (8015c84 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8015c4c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015c50:	6001      	str	r1, [r0, #0]
 8015c52:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015c56:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015c5a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8015c5e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8015c62:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8015c66:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8015c6a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8015c6e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8015c72:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8015c76:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8015c7a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8015c7e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8015c82:	4770      	bx	lr
 8015c84:	0801ec74 	.word	0x0801ec74

08015c88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8c:	b091      	sub	sp, #68	@ 0x44
 8015c8e:	4607      	mov	r7, r0
 8015c90:	4688      	mov	r8, r1
 8015c92:	6810      	ldr	r0, [r2, #0]
 8015c94:	6851      	ldr	r1, [r2, #4]
 8015c96:	ac0c      	add	r4, sp, #48	@ 0x30
 8015c98:	4616      	mov	r6, r2
 8015c9a:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8015c9e:	4d64      	ldr	r5, [pc, #400]	@ (8015e30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8015ca0:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8015e34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8015ca4:	c403      	stmia	r4!, {r0, r1}
 8015ca6:	6818      	ldr	r0, [r3, #0]
 8015ca8:	ac0e      	add	r4, sp, #56	@ 0x38
 8015caa:	6859      	ldr	r1, [r3, #4]
 8015cac:	c403      	stmia	r4!, {r0, r1}
 8015cae:	a80c      	add	r0, sp, #48	@ 0x30
 8015cb0:	f7f9 fabc 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015cb4:	4631      	mov	r1, r6
 8015cb6:	a80e      	add	r0, sp, #56	@ 0x38
 8015cb8:	f7f9 fae0 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015cbc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8015cc0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8015cc4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015cc8:	6828      	ldr	r0, [r5, #0]
 8015cca:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015cce:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8015cd2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8015cd6:	440f      	add	r7, r1
 8015cd8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8015cdc:	440a      	add	r2, r1
 8015cde:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8015ce2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8015ce6:	4413      	add	r3, r2
 8015ce8:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8015cec:	6803      	ldr	r3, [r0, #0]
 8015cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cf0:	4798      	blx	r3
 8015cf2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8015cf6:	6828      	ldr	r0, [r5, #0]
 8015cf8:	d01f      	beq.n	8015d3a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	2500      	movs	r5, #0
 8015cfe:	6801      	ldr	r1, [r0, #0]
 8015d00:	b2a4      	uxth	r4, r4
 8015d02:	b2b6      	uxth	r6, r6
 8015d04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015d08:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8015d0c:	250b      	movs	r5, #11
 8015d0e:	9507      	str	r5, [sp, #28]
 8015d10:	f8ba 5000 	ldrh.w	r5, [sl]
 8015d14:	f8cd 9010 	str.w	r9, [sp, #16]
 8015d18:	9602      	str	r6, [sp, #8]
 8015d1a:	9401      	str	r4, [sp, #4]
 8015d1c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8015d20:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8015d24:	9203      	str	r2, [sp, #12]
 8015d26:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8015d2a:	9200      	str	r2, [sp, #0]
 8015d2c:	4642      	mov	r2, r8
 8015d2e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8015d30:	4639      	mov	r1, r7
 8015d32:	47a0      	blx	r4
 8015d34:	b011      	add	sp, #68	@ 0x44
 8015d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d3a:	6803      	ldr	r3, [r0, #0]
 8015d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d3e:	4798      	blx	r3
 8015d40:	f8ba 5000 	ldrh.w	r5, [sl]
 8015d44:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8015d48:	f04f 0e04 	mov.w	lr, #4
 8015d4c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8015d50:	436e      	muls	r6, r5
 8015d52:	fb05 2303 	mla	r3, r5, r3, r2
 8015d56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015d5a:	1b2d      	subs	r5, r5, r4
 8015d5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d64:	4418      	add	r0, r3
 8015d66:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8015d6a:	1982      	adds	r2, r0, r6
 8015d6c:	1b1b      	subs	r3, r3, r4
 8015d6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015d74:	4290      	cmp	r0, r2
 8015d76:	d254      	bcs.n	8015e22 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8015d78:	eb00 0a04 	add.w	sl, r0, r4
 8015d7c:	4550      	cmp	r0, sl
 8015d7e:	d24c      	bcs.n	8015e1a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8015d80:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015d84:	fb1e e101 	smlabb	r1, lr, r1, lr
 8015d88:	eb08 0c01 	add.w	ip, r8, r1
 8015d8c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8015d90:	b173      	cbz	r3, 8015db0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015d92:	2bff      	cmp	r3, #255	@ 0xff
 8015d94:	f818 b001 	ldrb.w	fp, [r8, r1]
 8015d98:	d10c      	bne.n	8015db4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015d9a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015d9e:	d109      	bne.n	8015db4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015da0:	f880 b000 	strb.w	fp, [r0]
 8015da4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8015da8:	7043      	strb	r3, [r0, #1]
 8015daa:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8015dae:	7083      	strb	r3, [r0, #2]
 8015db0:	3003      	adds	r0, #3
 8015db2:	e7e3      	b.n	8015d7c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8015db4:	fb09 f103 	mul.w	r1, r9, r3
 8015db8:	1c4b      	adds	r3, r1, #1
 8015dba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015dbe:	7801      	ldrb	r1, [r0, #0]
 8015dc0:	121b      	asrs	r3, r3, #8
 8015dc2:	b29e      	uxth	r6, r3
 8015dc4:	43db      	mvns	r3, r3
 8015dc6:	fb1b fb06 	smulbb	fp, fp, r6
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	fb01 b103 	mla	r1, r1, r3, fp
 8015dd0:	b289      	uxth	r1, r1
 8015dd2:	f101 0b01 	add.w	fp, r1, #1
 8015dd6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8015dda:	f890 b001 	ldrb.w	fp, [r0, #1]
 8015dde:	fb1b fb03 	smulbb	fp, fp, r3
 8015de2:	1209      	asrs	r1, r1, #8
 8015de4:	7001      	strb	r1, [r0, #0]
 8015de6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8015dea:	fb01 b106 	mla	r1, r1, r6, fp
 8015dee:	b289      	uxth	r1, r1
 8015df0:	f101 0b01 	add.w	fp, r1, #1
 8015df4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8015df8:	1209      	asrs	r1, r1, #8
 8015dfa:	7041      	strb	r1, [r0, #1]
 8015dfc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8015e00:	f890 c002 	ldrb.w	ip, [r0, #2]
 8015e04:	fb1c f303 	smulbb	r3, ip, r3
 8015e08:	fb01 3606 	mla	r6, r1, r6, r3
 8015e0c:	b2b6      	uxth	r6, r6
 8015e0e:	1c73      	adds	r3, r6, #1
 8015e10:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8015e14:	1236      	asrs	r6, r6, #8
 8015e16:	7086      	strb	r6, [r0, #2]
 8015e18:	e7ca      	b.n	8015db0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e1c:	4428      	add	r0, r5
 8015e1e:	441f      	add	r7, r3
 8015e20:	e7a8      	b.n	8015d74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8015e22:	4b03      	ldr	r3, [pc, #12]	@ (8015e30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8015e24:	6818      	ldr	r0, [r3, #0]
 8015e26:	6803      	ldr	r3, [r0, #0]
 8015e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e2a:	4798      	blx	r3
 8015e2c:	e782      	b.n	8015d34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8015e2e:	bf00      	nop
 8015e30:	24065a50 	.word	0x24065a50
 8015e34:	24065a4a 	.word	0x24065a4a

08015e38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	b091      	sub	sp, #68	@ 0x44
 8015e3e:	4680      	mov	r8, r0
 8015e40:	460e      	mov	r6, r1
 8015e42:	6810      	ldr	r0, [r2, #0]
 8015e44:	6851      	ldr	r1, [r2, #4]
 8015e46:	ad0c      	add	r5, sp, #48	@ 0x30
 8015e48:	4614      	mov	r4, r2
 8015e4a:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8015e4e:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8015fe8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8015e52:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8015fec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8015e56:	c503      	stmia	r5!, {r0, r1}
 8015e58:	6818      	ldr	r0, [r3, #0]
 8015e5a:	ad0e      	add	r5, sp, #56	@ 0x38
 8015e5c:	6859      	ldr	r1, [r3, #4]
 8015e5e:	c503      	stmia	r5!, {r0, r1}
 8015e60:	a80c      	add	r0, sp, #48	@ 0x30
 8015e62:	f7f9 f9e3 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015e66:	4621      	mov	r1, r4
 8015e68:	a80e      	add	r0, sp, #56	@ 0x38
 8015e6a:	f7f9 fa07 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015e6e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8015e72:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8015e76:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015e7a:	f8d9 0000 	ldr.w	r0, [r9]
 8015e7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015e82:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8015e86:	eb08 0401 	add.w	r4, r8, r1
 8015e8a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8015e8e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8015e92:	440a      	add	r2, r1
 8015e94:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8015e98:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8015e9c:	4413      	add	r3, r2
 8015e9e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8015ea2:	6803      	ldr	r3, [r0, #0]
 8015ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ea6:	4798      	blx	r3
 8015ea8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8015eac:	f8d9 0000 	ldr.w	r0, [r9]
 8015eb0:	d022      	beq.n	8015ef8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	f04f 0c01 	mov.w	ip, #1
 8015eb8:	6801      	ldr	r1, [r0, #0]
 8015eba:	b2ad      	uxth	r5, r5
 8015ebc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015ec0:	e9cd c208 	strd	ip, r2, [sp, #32]
 8015ec4:	f04f 0c0b 	mov.w	ip, #11
 8015ec8:	f8cd c01c 	str.w	ip, [sp, #28]
 8015ecc:	f8ba c000 	ldrh.w	ip, [sl]
 8015ed0:	9704      	str	r7, [sp, #16]
 8015ed2:	9502      	str	r5, [sp, #8]
 8015ed4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8015ed8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8015edc:	9203      	str	r2, [sp, #12]
 8015ede:	fa1f f288 	uxth.w	r2, r8
 8015ee2:	9201      	str	r2, [sp, #4]
 8015ee4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8015ee8:	9200      	str	r2, [sp, #0]
 8015eea:	4632      	mov	r2, r6
 8015eec:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8015eee:	4621      	mov	r1, r4
 8015ef0:	47a8      	blx	r5
 8015ef2:	b011      	add	sp, #68	@ 0x44
 8015ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef8:	6803      	ldr	r3, [r0, #0]
 8015efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015efc:	4798      	blx	r3
 8015efe:	f8ba 2000 	ldrh.w	r2, [sl]
 8015f02:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8015f06:	f04f 0e03 	mov.w	lr, #3
 8015f0a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8015f0e:	4355      	muls	r5, r2
 8015f10:	fa1f fc87 	uxth.w	ip, r7
 8015f14:	fb02 1303 	mla	r3, r2, r3, r1
 8015f18:	eba2 0208 	sub.w	r2, r2, r8
 8015f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015f28:	4418      	add	r0, r3
 8015f2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015f2c:	1943      	adds	r3, r0, r5
 8015f2e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8015f32:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8015f36:	eba2 0208 	sub.w	r2, r2, r8
 8015f3a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015f3e:	b2ad      	uxth	r5, r5
 8015f40:	4298      	cmp	r0, r3
 8015f42:	d24a      	bcs.n	8015fda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8015f44:	eb00 0908 	add.w	r9, r0, r8
 8015f48:	4621      	mov	r1, r4
 8015f4a:	4548      	cmp	r0, r9
 8015f4c:	460c      	mov	r4, r1
 8015f4e:	d240      	bcs.n	8015fd2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8015f50:	f04f 0a04 	mov.w	sl, #4
 8015f54:	7824      	ldrb	r4, [r4, #0]
 8015f56:	2fff      	cmp	r7, #255	@ 0xff
 8015f58:	f101 0101 	add.w	r1, r1, #1
 8015f5c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8015f60:	eb06 0a04 	add.w	sl, r6, r4
 8015f64:	f816 b004 	ldrb.w	fp, [r6, r4]
 8015f68:	d02b      	beq.n	8015fc2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8015f6a:	7804      	ldrb	r4, [r0, #0]
 8015f6c:	fb14 f405 	smulbb	r4, r4, r5
 8015f70:	fb0b 440c 	mla	r4, fp, ip, r4
 8015f74:	b2a4      	uxth	r4, r4
 8015f76:	f104 0b01 	add.w	fp, r4, #1
 8015f7a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015f7e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8015f82:	fb1b fb05 	smulbb	fp, fp, r5
 8015f86:	1224      	asrs	r4, r4, #8
 8015f88:	7004      	strb	r4, [r0, #0]
 8015f8a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015f8e:	fb04 b40c 	mla	r4, r4, ip, fp
 8015f92:	b2a4      	uxth	r4, r4
 8015f94:	f104 0b01 	add.w	fp, r4, #1
 8015f98:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015f9c:	1224      	asrs	r4, r4, #8
 8015f9e:	7044      	strb	r4, [r0, #1]
 8015fa0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015fa4:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015fa8:	fb1a fa05 	smulbb	sl, sl, r5
 8015fac:	fb04 a40c 	mla	r4, r4, ip, sl
 8015fb0:	b2a4      	uxth	r4, r4
 8015fb2:	f104 0a01 	add.w	sl, r4, #1
 8015fb6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8015fba:	1224      	asrs	r4, r4, #8
 8015fbc:	7084      	strb	r4, [r0, #2]
 8015fbe:	3003      	adds	r0, #3
 8015fc0:	e7c3      	b.n	8015f4a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8015fc2:	f880 b000 	strb.w	fp, [r0]
 8015fc6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015fca:	7044      	strb	r4, [r0, #1]
 8015fcc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015fd0:	e7f4      	b.n	8015fbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8015fd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8015fd4:	4420      	add	r0, r4
 8015fd6:	188c      	adds	r4, r1, r2
 8015fd8:	e7b2      	b.n	8015f40 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8015fda:	4b03      	ldr	r3, [pc, #12]	@ (8015fe8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8015fdc:	6818      	ldr	r0, [r3, #0]
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fe2:	4798      	blx	r3
 8015fe4:	e785      	b.n	8015ef2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8015fe6:	bf00      	nop
 8015fe8:	24065a50 	.word	0x24065a50
 8015fec:	24065a4a 	.word	0x24065a4a

08015ff0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015ff0:	b4f0      	push	{r4, r5, r6, r7}
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	4611      	mov	r1, r2
 8015ff6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	780f      	ldrb	r7, [r1, #0]
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	784e      	ldrb	r6, [r1, #1]
 8016002:	b11f      	cbz	r7, 801600c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8016004:	2f01      	cmp	r7, #1
 8016006:	d01d      	beq.n	8016044 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8016008:	bcf0      	pop	{r4, r5, r6, r7}
 801600a:	4770      	bx	lr
 801600c:	2e03      	cmp	r6, #3
 801600e:	d8fb      	bhi.n	8016008 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8016010:	e8df f006 	tbb	[pc, r6]
 8016014:	16140702 	.word	0x16140702
 8016018:	9504      	str	r5, [sp, #16]
 801601a:	4620      	mov	r0, r4
 801601c:	bcf0      	pop	{r4, r5, r6, r7}
 801601e:	f7ff be33 	b.w	8015c88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8016022:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8016024:	2800      	cmp	r0, #0
 8016026:	d0ef      	beq.n	8016008 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8016028:	6806      	ldr	r6, [r0, #0]
 801602a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801602e:	68f5      	ldr	r5, [r6, #12]
 8016030:	4613      	mov	r3, r2
 8016032:	46ac      	mov	ip, r5
 8016034:	460a      	mov	r2, r1
 8016036:	4621      	mov	r1, r4
 8016038:	bcf0      	pop	{r4, r5, r6, r7}
 801603a:	4760      	bx	ip
 801603c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801603e:	e7f1      	b.n	8016024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8016040:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8016042:	e7ef      	b.n	8016024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8016044:	2e03      	cmp	r6, #3
 8016046:	d8df      	bhi.n	8016008 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8016048:	e8df f006 	tbb	[pc, r6]
 801604c:	110f0702 	.word	0x110f0702
 8016050:	9504      	str	r5, [sp, #16]
 8016052:	4620      	mov	r0, r4
 8016054:	bcf0      	pop	{r4, r5, r6, r7}
 8016056:	f7ff beef 	b.w	8015e38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801605a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801605c:	2800      	cmp	r0, #0
 801605e:	d0d3      	beq.n	8016008 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8016060:	6806      	ldr	r6, [r0, #0]
 8016062:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8016066:	68b5      	ldr	r5, [r6, #8]
 8016068:	e7e2      	b.n	8016030 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801606a:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801606c:	e7f6      	b.n	801605c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801606e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8016070:	e7f4      	b.n	801605c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08016074 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8016074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016078:	4605      	mov	r5, r0
 801607a:	b08f      	sub	sp, #60	@ 0x3c
 801607c:	460c      	mov	r4, r1
 801607e:	461f      	mov	r7, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d052      	beq.n	801612a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016084:	6808      	ldr	r0, [r1, #0]
 8016086:	ab0a      	add	r3, sp, #40	@ 0x28
 8016088:	6849      	ldr	r1, [r1, #4]
 801608a:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8016254 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801608e:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8016258 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8016092:	c303      	stmia	r3!, {r0, r1}
 8016094:	6810      	ldr	r0, [r2, #0]
 8016096:	ab0c      	add	r3, sp, #48	@ 0x30
 8016098:	6851      	ldr	r1, [r2, #4]
 801609a:	c303      	stmia	r3!, {r0, r1}
 801609c:	a80a      	add	r0, sp, #40	@ 0x28
 801609e:	f7f9 f8c5 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80160a2:	4621      	mov	r1, r4
 80160a4:	a80c      	add	r0, sp, #48	@ 0x30
 80160a6:	f7f9 f8e9 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80160aa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80160ae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80160b2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80160b6:	f8d8 0000 	ldr.w	r0, [r8]
 80160ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 80160be:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 80160c2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80160c6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80160ca:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80160ce:	440a      	add	r2, r1
 80160d0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80160d4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80160d8:	4413      	add	r3, r2
 80160da:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80160de:	6803      	ldr	r3, [r0, #0]
 80160e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160e2:	4798      	blx	r3
 80160e4:	2fff      	cmp	r7, #255	@ 0xff
 80160e6:	d023      	beq.n	8016130 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80160e8:	f010 0f04 	tst.w	r0, #4
 80160ec:	f8d8 0000 	ldr.w	r0, [r8]
 80160f0:	d021      	beq.n	8016136 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80160f2:	2100      	movs	r1, #0
 80160f4:	f04f 0e01 	mov.w	lr, #1
 80160f8:	f8d0 c000 	ldr.w	ip, [r0]
 80160fc:	b2a4      	uxth	r4, r4
 80160fe:	9106      	str	r1, [sp, #24]
 8016100:	b2b6      	uxth	r6, r6
 8016102:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016106:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801610a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801610e:	f8b9 e000 	ldrh.w	lr, [r9]
 8016112:	9703      	str	r7, [sp, #12]
 8016114:	9401      	str	r4, [sp, #4]
 8016116:	9600      	str	r6, [sp, #0]
 8016118:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801611c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016120:	9102      	str	r1, [sp, #8]
 8016122:	4629      	mov	r1, r5
 8016124:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8016128:	47a0      	blx	r4
 801612a:	b00f      	add	sp, #60	@ 0x3c
 801612c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016130:	f010 0f01 	tst.w	r0, #1
 8016134:	e7da      	b.n	80160ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8016136:	6803      	ldr	r3, [r0, #0]
 8016138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801613a:	4798      	blx	r3
 801613c:	f8b9 1000 	ldrh.w	r1, [r9]
 8016140:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016144:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8016148:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801614c:	434c      	muls	r4, r1
 801614e:	2fff      	cmp	r7, #255	@ 0xff
 8016150:	fb01 2303 	mla	r3, r1, r3, r2
 8016154:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016158:	eba1 0106 	sub.w	r1, r1, r6
 801615c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016164:	4418      	add	r0, r3
 8016166:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801616a:	eba3 0606 	sub.w	r6, r3, r6
 801616e:	4404      	add	r4, r0
 8016170:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8016174:	d04a      	beq.n	801620c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8016176:	43fa      	mvns	r2, r7
 8016178:	b2bb      	uxth	r3, r7
 801617a:	b2d7      	uxtb	r7, r2
 801617c:	42a0      	cmp	r0, r4
 801617e:	d263      	bcs.n	8016248 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016180:	eb00 0e0c 	add.w	lr, r0, ip
 8016184:	4586      	cmp	lr, r0
 8016186:	f100 0803 	add.w	r8, r0, #3
 801618a:	d93a      	bls.n	8016202 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801618c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8016190:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8016194:	00d0      	lsls	r0, r2, #3
 8016196:	fb19 f907 	smulbb	r9, r9, r7
 801619a:	b2c0      	uxtb	r0, r0
 801619c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80161a0:	fb00 9003 	mla	r0, r0, r3, r9
 80161a4:	b280      	uxth	r0, r0
 80161a6:	f100 0901 	add.w	r9, r0, #1
 80161aa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80161ae:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80161b2:	fb19 f907 	smulbb	r9, r9, r7
 80161b6:	1200      	asrs	r0, r0, #8
 80161b8:	f808 0c03 	strb.w	r0, [r8, #-3]
 80161bc:	10d0      	asrs	r0, r2, #3
 80161be:	1212      	asrs	r2, r2, #8
 80161c0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80161c4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80161c8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80161cc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80161d0:	fb00 9003 	mla	r0, r0, r3, r9
 80161d4:	b280      	uxth	r0, r0
 80161d6:	f100 0901 	add.w	r9, r0, #1
 80161da:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80161de:	1200      	asrs	r0, r0, #8
 80161e0:	f808 0c02 	strb.w	r0, [r8, #-2]
 80161e4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80161e8:	fb10 f007 	smulbb	r0, r0, r7
 80161ec:	fb02 0203 	mla	r2, r2, r3, r0
 80161f0:	b292      	uxth	r2, r2
 80161f2:	1c50      	adds	r0, r2, #1
 80161f4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80161f8:	4640      	mov	r0, r8
 80161fa:	1212      	asrs	r2, r2, #8
 80161fc:	f808 2c01 	strb.w	r2, [r8, #-1]
 8016200:	e7c0      	b.n	8016184 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8016202:	4408      	add	r0, r1
 8016204:	4435      	add	r5, r6
 8016206:	e7b9      	b.n	801617c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8016208:	4408      	add	r0, r1
 801620a:	4435      	add	r5, r6
 801620c:	42a0      	cmp	r0, r4
 801620e:	d21b      	bcs.n	8016248 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016210:	eb00 070c 	add.w	r7, r0, ip
 8016214:	42b8      	cmp	r0, r7
 8016216:	d2f7      	bcs.n	8016208 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8016218:	f835 3b02 	ldrh.w	r3, [r5], #2
 801621c:	3003      	adds	r0, #3
 801621e:	00da      	lsls	r2, r3, #3
 8016220:	b2d2      	uxtb	r2, r2
 8016222:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016226:	f800 2c03 	strb.w	r2, [r0, #-3]
 801622a:	10da      	asrs	r2, r3, #3
 801622c:	121b      	asrs	r3, r3, #8
 801622e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8016232:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8016236:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801623a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801623e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8016242:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016246:	e7e5      	b.n	8016214 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8016248:	4b02      	ldr	r3, [pc, #8]	@ (8016254 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801624a:	6818      	ldr	r0, [r3, #0]
 801624c:	6803      	ldr	r3, [r0, #0]
 801624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016250:	4798      	blx	r3
 8016252:	e76a      	b.n	801612a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016254:	24065a50 	.word	0x24065a50
 8016258:	24065a4a 	.word	0x24065a4a

0801625c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016260:	b08a      	sub	sp, #40	@ 0x28
 8016262:	460d      	mov	r5, r1
 8016264:	4604      	mov	r4, r0
 8016266:	461e      	mov	r6, r3
 8016268:	6808      	ldr	r0, [r1, #0]
 801626a:	ab06      	add	r3, sp, #24
 801626c:	6849      	ldr	r1, [r1, #4]
 801626e:	4f5d      	ldr	r7, [pc, #372]	@ (80163e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8016270:	c303      	stmia	r3!, {r0, r1}
 8016272:	6810      	ldr	r0, [r2, #0]
 8016274:	ab08      	add	r3, sp, #32
 8016276:	6851      	ldr	r1, [r2, #4]
 8016278:	c303      	stmia	r3!, {r0, r1}
 801627a:	a806      	add	r0, sp, #24
 801627c:	f7f8 ffd6 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016280:	4629      	mov	r1, r5
 8016282:	a808      	add	r0, sp, #32
 8016284:	f7f8 fffa 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016288:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801628c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8016290:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016294:	6838      	ldr	r0, [r7, #0]
 8016296:	fb11 2103 	smlabb	r1, r1, r3, r2
 801629a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801629e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80162a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80162a6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80162aa:	440a      	add	r2, r1
 80162ac:	f8ad 2020 	strh.w	r2, [sp, #32]
 80162b0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80162b4:	4413      	add	r3, r2
 80162b6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80162ba:	6803      	ldr	r3, [r0, #0]
 80162bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80162be:	4798      	blx	r3
 80162c0:	2eff      	cmp	r6, #255	@ 0xff
 80162c2:	d119      	bne.n	80162f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80162c4:	f010 0f20 	tst.w	r0, #32
 80162c8:	6838      	ldr	r0, [r7, #0]
 80162ca:	d018      	beq.n	80162fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80162cc:	b2ad      	uxth	r5, r5
 80162ce:	2700      	movs	r7, #0
 80162d0:	6801      	ldr	r1, [r0, #0]
 80162d2:	9501      	str	r5, [sp, #4]
 80162d4:	fa1f f588 	uxth.w	r5, r8
 80162d8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80162dc:	9500      	str	r5, [sp, #0]
 80162de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80162e2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80162e6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80162ea:	9602      	str	r6, [sp, #8]
 80162ec:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80162ee:	4621      	mov	r1, r4
 80162f0:	47a8      	blx	r5
 80162f2:	b00a      	add	sp, #40	@ 0x28
 80162f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162f8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80162fc:	e7e4      	b.n	80162c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80162fe:	6803      	ldr	r3, [r0, #0]
 8016300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016302:	4798      	blx	r3
 8016304:	4b38      	ldr	r3, [pc, #224]	@ (80163e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8016306:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801630a:	f8b3 c000 	ldrh.w	ip, [r3]
 801630e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8016312:	fb0c f505 	mul.w	r5, ip, r5
 8016316:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801631a:	fb0c 2303 	mla	r3, ip, r3, r2
 801631e:	ebac 0c08 	sub.w	ip, ip, r8
 8016322:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016326:	ebae 0e08 	sub.w	lr, lr, r8
 801632a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801632e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016332:	4418      	add	r0, r3
 8016334:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016338:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801633c:	4405      	add	r5, r0
 801633e:	42a8      	cmp	r0, r5
 8016340:	d24a      	bcs.n	80163d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8016342:	eb00 0803 	add.w	r8, r0, r3
 8016346:	4540      	cmp	r0, r8
 8016348:	d243      	bcs.n	80163d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801634a:	78e2      	ldrb	r2, [r4, #3]
 801634c:	b15a      	cbz	r2, 8016366 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801634e:	2aff      	cmp	r2, #255	@ 0xff
 8016350:	f894 9000 	ldrb.w	r9, [r4]
 8016354:	d10a      	bne.n	801636c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016356:	2eff      	cmp	r6, #255	@ 0xff
 8016358:	d108      	bne.n	801636c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801635a:	f880 9000 	strb.w	r9, [r0]
 801635e:	7862      	ldrb	r2, [r4, #1]
 8016360:	7042      	strb	r2, [r0, #1]
 8016362:	78a2      	ldrb	r2, [r4, #2]
 8016364:	7082      	strb	r2, [r0, #2]
 8016366:	3003      	adds	r0, #3
 8016368:	3404      	adds	r4, #4
 801636a:	e7ec      	b.n	8016346 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801636c:	4372      	muls	r2, r6
 801636e:	1c51      	adds	r1, r2, #1
 8016370:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8016374:	1209      	asrs	r1, r1, #8
 8016376:	fa1f fa81 	uxth.w	sl, r1
 801637a:	43c9      	mvns	r1, r1
 801637c:	fb19 f90a 	smulbb	r9, r9, sl
 8016380:	b2ca      	uxtb	r2, r1
 8016382:	7801      	ldrb	r1, [r0, #0]
 8016384:	fb01 9902 	mla	r9, r1, r2, r9
 8016388:	fa1f f989 	uxth.w	r9, r9
 801638c:	f109 0101 	add.w	r1, r9, #1
 8016390:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8016394:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016398:	f880 9000 	strb.w	r9, [r0]
 801639c:	f890 9001 	ldrb.w	r9, [r0, #1]
 80163a0:	7861      	ldrb	r1, [r4, #1]
 80163a2:	fb19 f902 	smulbb	r9, r9, r2
 80163a6:	fb01 910a 	mla	r1, r1, sl, r9
 80163aa:	b289      	uxth	r1, r1
 80163ac:	f101 0901 	add.w	r9, r1, #1
 80163b0:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80163b4:	1209      	asrs	r1, r1, #8
 80163b6:	7041      	strb	r1, [r0, #1]
 80163b8:	7881      	ldrb	r1, [r0, #2]
 80163ba:	f894 9002 	ldrb.w	r9, [r4, #2]
 80163be:	fb11 f202 	smulbb	r2, r1, r2
 80163c2:	fb09 220a 	mla	r2, r9, sl, r2
 80163c6:	b292      	uxth	r2, r2
 80163c8:	1c51      	adds	r1, r2, #1
 80163ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80163ce:	1212      	asrs	r2, r2, #8
 80163d0:	e7c8      	b.n	8016364 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80163d2:	4460      	add	r0, ip
 80163d4:	4474      	add	r4, lr
 80163d6:	e7b2      	b.n	801633e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80163d8:	6838      	ldr	r0, [r7, #0]
 80163da:	6803      	ldr	r3, [r0, #0]
 80163dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163de:	4798      	blx	r3
 80163e0:	e787      	b.n	80162f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80163e2:	bf00      	nop
 80163e4:	24065a50 	.word	0x24065a50
 80163e8:	24065a4a 	.word	0x24065a4a

080163ec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80163ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80163f0:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 80163f4:	4607      	mov	r7, r0
 80163f6:	460c      	mov	r4, r1
 80163f8:	4692      	mov	sl, r2
 80163fa:	4699      	mov	r9, r3
 80163fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80163fe:	b335      	cbz	r5, 801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8016400:	4608      	mov	r0, r1
 8016402:	f7fb fdd5 	bl	8011fb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016406:	4680      	mov	r8, r0
 8016408:	4620      	mov	r0, r4
 801640a:	f7fb fe05 	bl	8012018 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801640e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016412:	4620      	mov	r0, r4
 8016414:	f8ad a008 	strh.w	sl, [sp, #8]
 8016418:	f8ad 900a 	strh.w	r9, [sp, #10]
 801641c:	f8ad 800c 	strh.w	r8, [sp, #12]
 8016420:	f7fb ff04 	bl	801222c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016424:	2810      	cmp	r0, #16
 8016426:	d812      	bhi.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8016428:	e8df f000 	tbb	[pc, r0]
 801642c:	11092d24 	.word	0x11092d24
 8016430:	11111111 	.word	0x11111111
 8016434:	14111111 	.word	0x14111111
 8016438:	4c111111 	.word	0x4c111111
 801643c:	3c          	.byte	0x3c
 801643d:	00          	.byte	0x00
 801643e:	4620      	mov	r0, r4
 8016440:	f7fb fe70 	bl	8012124 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016444:	462b      	mov	r3, r5
 8016446:	4632      	mov	r2, r6
 8016448:	a902      	add	r1, sp, #8
 801644a:	f7ff ff07 	bl	801625c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801644e:	b004      	add	sp, #16
 8016450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016454:	4620      	mov	r0, r4
 8016456:	f7fb fe65 	bl	8012124 <_ZNK8touchgfx6Bitmap7getDataEv>
 801645a:	4680      	mov	r8, r0
 801645c:	4620      	mov	r0, r4
 801645e:	f7fb fe91 	bl	8012184 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016462:	ab02      	add	r3, sp, #8
 8016464:	4602      	mov	r2, r0
 8016466:	4641      	mov	r1, r8
 8016468:	4638      	mov	r0, r7
 801646a:	e9cd 6500 	strd	r6, r5, [sp]
 801646e:	f7ff fdbf 	bl	8015ff0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8016472:	e7ec      	b.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8016474:	4620      	mov	r0, r4
 8016476:	f7fb fe55 	bl	8012124 <_ZNK8touchgfx6Bitmap7getDataEv>
 801647a:	462b      	mov	r3, r5
 801647c:	4632      	mov	r2, r6
 801647e:	a902      	add	r1, sp, #8
 8016480:	f7ff fdf8 	bl	8016074 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016484:	e7e3      	b.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8016486:	683b      	ldr	r3, [r7, #0]
 8016488:	4620      	mov	r0, r4
 801648a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801648e:	f7fb fe49 	bl	8012124 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016492:	2300      	movs	r3, #0
 8016494:	4601      	mov	r1, r0
 8016496:	aa02      	add	r2, sp, #8
 8016498:	4638      	mov	r0, r7
 801649a:	e9cd 5300 	strd	r5, r3, [sp]
 801649e:	4633      	mov	r3, r6
 80164a0:	47c0      	blx	r8
 80164a2:	e7d4      	b.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80164a4:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80164a6:	2f00      	cmp	r7, #0
 80164a8:	d0d1      	beq.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80164b0:	4620      	mov	r0, r4
 80164b2:	f7fb fe37 	bl	8012124 <_ZNK8touchgfx6Bitmap7getDataEv>
 80164b6:	9500      	str	r5, [sp, #0]
 80164b8:	4601      	mov	r1, r0
 80164ba:	4633      	mov	r3, r6
 80164bc:	aa02      	add	r2, sp, #8
 80164be:	4638      	mov	r0, r7
 80164c0:	47c0      	blx	r8
 80164c2:	e7c4      	b.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80164c4:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80164c6:	2f00      	cmp	r7, #0
 80164c8:	d0c1      	beq.n	801644e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80164d0:	e7ee      	b.n	80164b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

080164d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80164d2:	b4f0      	push	{r4, r5, r6, r7}
 80164d4:	4616      	mov	r6, r2
 80164d6:	461c      	mov	r4, r3
 80164d8:	460d      	mov	r5, r1
 80164da:	9a04      	ldr	r2, [sp, #16]
 80164dc:	2e01      	cmp	r6, #1
 80164de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80164e2:	d00e      	beq.n	8016502 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80164e4:	d303      	bcc.n	80164ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80164e6:	2e02      	cmp	r6, #2
 80164e8:	d006      	beq.n	80164f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80164ea:	bcf0      	pop	{r4, r5, r6, r7}
 80164ec:	4770      	bx	lr
 80164ee:	4621      	mov	r1, r4
 80164f0:	4628      	mov	r0, r5
 80164f2:	bcf0      	pop	{r4, r5, r6, r7}
 80164f4:	f7ff bdbe 	b.w	8016074 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80164f8:	4621      	mov	r1, r4
 80164fa:	4628      	mov	r0, r5
 80164fc:	bcf0      	pop	{r4, r5, r6, r7}
 80164fe:	f7ff bead 	b.w	801625c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016502:	6805      	ldr	r5, [r0, #0]
 8016504:	2600      	movs	r6, #0
 8016506:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801650a:	68ed      	ldr	r5, [r5, #12]
 801650c:	4613      	mov	r3, r2
 801650e:	4622      	mov	r2, r4
 8016510:	46ac      	mov	ip, r5
 8016512:	bcf0      	pop	{r4, r5, r6, r7}
 8016514:	4760      	bx	ip
	...

08016518 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016518:	b160      	cbz	r0, 8016534 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801651a:	2903      	cmp	r1, #3
 801651c:	d818      	bhi.n	8016550 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801651e:	e8df f001 	tbb	[pc, r1]
 8016522:	1902      	.short	0x1902
 8016524:	1b06      	.short	0x1b06
 8016526:	4b0e      	ldr	r3, [pc, #56]	@ (8016560 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8016528:	8818      	ldrh	r0, [r3, #0]
 801652a:	4240      	negs	r0, r0
 801652c:	4770      	bx	lr
 801652e:	4b0c      	ldr	r3, [pc, #48]	@ (8016560 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8016530:	8818      	ldrh	r0, [r3, #0]
 8016532:	4770      	bx	lr
 8016534:	2903      	cmp	r1, #3
 8016536:	d80b      	bhi.n	8016550 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8016538:	a301      	add	r3, pc, #4	@ (adr r3, 8016540 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801653a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801653e:	bf00      	nop
 8016540:	08016555 	.word	0x08016555
 8016544:	0801652f 	.word	0x0801652f
 8016548:	08016559 	.word	0x08016559
 801654c:	08016527 	.word	0x08016527
 8016550:	2000      	movs	r0, #0
 8016552:	4770      	bx	lr
 8016554:	2001      	movs	r0, #1
 8016556:	4770      	bx	lr
 8016558:	f04f 30ff 	mov.w	r0, #4294967295
 801655c:	4770      	bx	lr
 801655e:	bf00      	nop
 8016560:	24065a4a 	.word	0x24065a4a

08016564 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8016564:	b160      	cbz	r0, 8016580 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8016566:	2903      	cmp	r1, #3
 8016568:	d818      	bhi.n	801659c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801656a:	e8df f001 	tbb	[pc, r1]
 801656e:	0219      	.short	0x0219
 8016570:	051b      	.short	0x051b
 8016572:	4b0e      	ldr	r3, [pc, #56]	@ (80165ac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016574:	8818      	ldrh	r0, [r3, #0]
 8016576:	4770      	bx	lr
 8016578:	4b0c      	ldr	r3, [pc, #48]	@ (80165ac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801657a:	8818      	ldrh	r0, [r3, #0]
 801657c:	4240      	negs	r0, r0
 801657e:	4770      	bx	lr
 8016580:	2903      	cmp	r1, #3
 8016582:	d80b      	bhi.n	801659c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8016584:	a301      	add	r3, pc, #4	@ (adr r3, 801658c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8016586:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801658a:	bf00      	nop
 801658c:	08016573 	.word	0x08016573
 8016590:	080165a5 	.word	0x080165a5
 8016594:	08016579 	.word	0x08016579
 8016598:	080165a1 	.word	0x080165a1
 801659c:	2000      	movs	r0, #0
 801659e:	4770      	bx	lr
 80165a0:	2001      	movs	r0, #1
 80165a2:	4770      	bx	lr
 80165a4:	f04f 30ff 	mov.w	r0, #4294967295
 80165a8:	4770      	bx	lr
 80165aa:	bf00      	nop
 80165ac:	24065a4a 	.word	0x24065a4a

080165b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80165b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b4:	b097      	sub	sp, #92	@ 0x5c
 80165b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80165b8:	a912      	add	r1, sp, #72	@ 0x48
 80165ba:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 80165be:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 80165c2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 80165c6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 80165ca:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 80165ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80165d2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 80165d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80165d8:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80165dc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 80165e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80165e2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80165e6:	798d      	ldrb	r5, [r1, #6]
 80165e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80165ea:	7b4b      	ldrb	r3, [r1, #13]
 80165ec:	0158      	lsls	r0, r3, #5
 80165ee:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80165f2:	4328      	orrs	r0, r5
 80165f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80165f6:	f000 817c 	beq.w	80168f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80165fa:	011b      	lsls	r3, r3, #4
 80165fc:	79c8      	ldrb	r0, [r1, #7]
 80165fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016602:	4303      	orrs	r3, r0
 8016604:	930e      	str	r3, [sp, #56]	@ 0x38
 8016606:	f000 8174 	beq.w	80168f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801660a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801660e:	b29b      	uxth	r3, r3
 8016610:	2f00      	cmp	r7, #0
 8016612:	f000 8116 	beq.w	8016842 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8016616:	1aff      	subs	r7, r7, r3
 8016618:	b2bf      	uxth	r7, r7
 801661a:	043b      	lsls	r3, r7, #16
 801661c:	d502      	bpl.n	8016624 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801661e:	1bf6      	subs	r6, r6, r7
 8016620:	2700      	movs	r7, #0
 8016622:	b236      	sxth	r6, r6
 8016624:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016628:	a812      	add	r0, sp, #72	@ 0x48
 801662a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801662e:	428e      	cmp	r6, r1
 8016630:	b28b      	uxth	r3, r1
 8016632:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8016636:	bfbf      	itttt	lt
 8016638:	18ff      	addlt	r7, r7, r3
 801663a:	1bbe      	sublt	r6, r7, r6
 801663c:	b2b7      	uxthlt	r7, r6
 801663e:	460e      	movlt	r6, r1
 8016640:	8891      	ldrh	r1, [r2, #4]
 8016642:	440b      	add	r3, r1
 8016644:	4631      	mov	r1, r6
 8016646:	b21b      	sxth	r3, r3
 8016648:	9310      	str	r3, [sp, #64]	@ 0x40
 801664a:	88d3      	ldrh	r3, [r2, #6]
 801664c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801664e:	449a      	add	sl, r3
 8016650:	fa0f f38a 	sxth.w	r3, sl
 8016654:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8016658:	930f      	str	r3, [sp, #60]	@ 0x3c
 801665a:	4bb5      	ldr	r3, [pc, #724]	@ (8016930 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801665c:	f893 b000 	ldrb.w	fp, [r3]
 8016660:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016664:	f1dc 0300 	rsbs	r3, ip, #0
 8016668:	eb43 030c 	adc.w	r3, r3, ip
 801666c:	930d      	str	r3, [sp, #52]	@ 0x34
 801666e:	464b      	mov	r3, r9
 8016670:	f7f8 fc50 	bl	800ef14 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016674:	4631      	mov	r1, r6
 8016676:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801667a:	464b      	mov	r3, r9
 801667c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801667e:	a812      	add	r0, sp, #72	@ 0x48
 8016680:	f7f8 fc65 	bl	800ef4e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016684:	a916      	add	r1, sp, #88	@ 0x58
 8016686:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801668a:	a815      	add	r0, sp, #84	@ 0x54
 801668c:	f7f8 fd8c 	bl	800f1a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016690:	f1b9 0f00 	cmp.w	r9, #0
 8016694:	f040 80d8 	bne.w	8016848 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8016698:	f1bb 0f01 	cmp.w	fp, #1
 801669c:	f040 80dc 	bne.w	8016858 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80166a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80166a2:	b153      	cbz	r3, 80166ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80166a4:	2508      	movs	r5, #8
 80166a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166a8:	fb95 f3f8 	sdiv	r3, r5, r8
 80166ac:	1e5d      	subs	r5, r3, #1
 80166ae:	4415      	add	r5, r2
 80166b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80166b4:	fb15 f503 	smulbb	r5, r5, r3
 80166b8:	b2ad      	uxth	r5, r5
 80166ba:	b907      	cbnz	r7, 80166be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80166bc:	b16c      	cbz	r4, 80166da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80166be:	fb04 7305 	mla	r3, r4, r5, r7
 80166c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80166c4:	ebaa 0a04 	sub.w	sl, sl, r4
 80166c8:	fb08 f303 	mul.w	r3, r8, r3
 80166cc:	fa1f fa8a 	uxth.w	sl, sl
 80166d0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80166d4:	f003 0407 	and.w	r4, r3, #7
 80166d8:	9226      	str	r2, [sp, #152]	@ 0x98
 80166da:	4649      	mov	r1, r9
 80166dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80166de:	f7ff ff1b 	bl	8016518 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80166e2:	4683      	mov	fp, r0
 80166e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80166e6:	f7ff ff3d 	bl	8016564 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80166ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80166ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80166ee:	4681      	mov	r9, r0
 80166f0:	1a9b      	subs	r3, r3, r2
 80166f2:	459a      	cmp	sl, r3
 80166f4:	bfa8      	it	ge
 80166f6:	469a      	movge	sl, r3
 80166f8:	f1ba 0f00 	cmp.w	sl, #0
 80166fc:	f340 80f9 	ble.w	80168f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016700:	1bf6      	subs	r6, r6, r7
 8016702:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016704:	1b9e      	subs	r6, r3, r6
 8016706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016708:	429e      	cmp	r6, r3
 801670a:	bfd4      	ite	le
 801670c:	ebc7 0706 	rsble	r7, r7, r6
 8016710:	ebc7 0703 	rsbgt	r7, r7, r3
 8016714:	2f00      	cmp	r7, #0
 8016716:	f340 80ec 	ble.w	80168f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801671a:	1bed      	subs	r5, r5, r7
 801671c:	fb08 f305 	mul.w	r3, r8, r5
 8016720:	930d      	str	r3, [sp, #52]	@ 0x34
 8016722:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016724:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8016728:	930e      	str	r3, [sp, #56]	@ 0x38
 801672a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801672c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016730:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016732:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016734:	b2db      	uxtb	r3, r3
 8016736:	9310      	str	r3, [sp, #64]	@ 0x40
 8016738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801673a:	2b00      	cmp	r3, #0
 801673c:	f040 80de 	bne.w	80168fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8016740:	4b7c      	ldr	r3, [pc, #496]	@ (8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8016742:	6818      	ldr	r0, [r3, #0]
 8016744:	6803      	ldr	r3, [r0, #0]
 8016746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016748:	4798      	blx	r3
 801674a:	2301      	movs	r3, #1
 801674c:	4a7a      	ldr	r2, [pc, #488]	@ (8016938 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801674e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8016752:	fb07 9b1b 	mls	fp, r7, fp, r9
 8016756:	fa03 f308 	lsl.w	r3, r3, r8
 801675a:	8811      	ldrh	r1, [r2, #0]
 801675c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8016760:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8016764:	3b01      	subs	r3, #1
 8016766:	fb06 bb07 	mla	fp, r6, r7, fp
 801676a:	b2db      	uxtb	r3, r3
 801676c:	930a      	str	r3, [sp, #40]	@ 0x28
 801676e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8016772:	fb01 2303 	mla	r3, r1, r3, r2
 8016776:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801677a:	18c3      	adds	r3, r0, r3
 801677c:	9309      	str	r3, [sp, #36]	@ 0x24
 801677e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016780:	781a      	ldrb	r2, [r3, #0]
 8016782:	4122      	asrs	r2, r4
 8016784:	b2d2      	uxtb	r2, r2
 8016786:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801678a:	f0c0 80d7 	bcc.w	801693c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801678e:	46be      	mov	lr, r7
 8016790:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016792:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016796:	f0c0 80ba 	bcc.w	801690e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801679a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801679c:	4013      	ands	r3, r2
 801679e:	d041      	beq.n	8016824 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80167a0:	20ff      	movs	r0, #255	@ 0xff
 80167a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80167a4:	fb90 f5f5 	sdiv	r5, r0, r5
 80167a8:	436b      	muls	r3, r5
 80167aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80167ac:	dd03      	ble.n	80167b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80167ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80167b0:	4285      	cmp	r5, r0
 80167b2:	f000 80a5 	beq.w	8016900 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80167b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80167b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80167ba:	fb15 f303 	smulbb	r3, r5, r3
 80167be:	b29b      	uxth	r3, r3
 80167c0:	1c5d      	adds	r5, r3, #1
 80167c2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80167c6:	780d      	ldrb	r5, [r1, #0]
 80167c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80167cc:	fa1f fc83 	uxth.w	ip, r3
 80167d0:	43db      	mvns	r3, r3
 80167d2:	fb10 f90c 	smulbb	r9, r0, ip
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80167da:	fb05 9503 	mla	r5, r5, r3, r9
 80167de:	b2ad      	uxth	r5, r5
 80167e0:	f105 0901 	add.w	r9, r5, #1
 80167e4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80167e8:	fb10 f90c 	smulbb	r9, r0, ip
 80167ec:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80167ee:	122d      	asrs	r5, r5, #8
 80167f0:	fb10 fc0c 	smulbb	ip, r0, ip
 80167f4:	700d      	strb	r5, [r1, #0]
 80167f6:	784d      	ldrb	r5, [r1, #1]
 80167f8:	fb05 9503 	mla	r5, r5, r3, r9
 80167fc:	b2ad      	uxth	r5, r5
 80167fe:	f105 0901 	add.w	r9, r5, #1
 8016802:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016806:	122d      	asrs	r5, r5, #8
 8016808:	704d      	strb	r5, [r1, #1]
 801680a:	788d      	ldrb	r5, [r1, #2]
 801680c:	fb05 cc03 	mla	ip, r5, r3, ip
 8016810:	fa1f fc8c 	uxth.w	ip, ip
 8016814:	f10c 0301 	add.w	r3, ip, #1
 8016818:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801681c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016820:	f881 c002 	strb.w	ip, [r1, #2]
 8016824:	4444      	add	r4, r8
 8016826:	4431      	add	r1, r6
 8016828:	b2a4      	uxth	r4, r4
 801682a:	2c07      	cmp	r4, #7
 801682c:	bf89      	itett	hi
 801682e:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8016830:	fa42 f208 	asrls.w	r2, r2, r8
 8016834:	2400      	movhi	r4, #0
 8016836:	785a      	ldrbhi	r2, [r3, #1]
 8016838:	bf8a      	itet	hi
 801683a:	3301      	addhi	r3, #1
 801683c:	b2d2      	uxtbls	r2, r2
 801683e:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8016840:	e7a7      	b.n	8016792 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8016842:	441e      	add	r6, r3
 8016844:	b236      	sxth	r6, r6
 8016846:	e6ed      	b.n	8016624 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016848:	f1b9 0f01 	cmp.w	r9, #1
 801684c:	f47f af28 	bne.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016850:	f1bb 0f01 	cmp.w	fp, #1
 8016854:	f47f af24 	bne.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016858:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801685c:	f8db 0000 	ldr.w	r0, [fp]
 8016860:	6803      	ldr	r3, [r0, #0]
 8016862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016864:	4798      	blx	r3
 8016866:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801686a:	465a      	mov	r2, fp
 801686c:	d006      	beq.n	801687c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801686e:	f1b8 0f04 	cmp.w	r8, #4
 8016872:	d141      	bne.n	80168f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8016874:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016876:	3300      	adds	r3, #0
 8016878:	bf18      	it	ne
 801687a:	2301      	movne	r3, #1
 801687c:	0580      	lsls	r0, r0, #22
 801687e:	d566      	bpl.n	801694e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8016880:	f1b8 0f08 	cmp.w	r8, #8
 8016884:	d163      	bne.n	801694e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8016886:	2b00      	cmp	r3, #0
 8016888:	bf0c      	ite	eq
 801688a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801688e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8016892:	2f00      	cmp	r7, #0
 8016894:	f47f af04 	bne.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016898:	2c00      	cmp	r4, #0
 801689a:	f47f af01 	bne.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801689e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80168a2:	18f3      	adds	r3, r6, r3
 80168a4:	4283      	cmp	r3, r0
 80168a6:	f73f aefb 	bgt.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80168aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80168ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80168ae:	4403      	add	r3, r0
 80168b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80168b2:	4283      	cmp	r3, r0
 80168b4:	f73f aef4 	bgt.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80168b8:	f1b8 0f08 	cmp.w	r8, #8
 80168bc:	6810      	ldr	r0, [r2, #0]
 80168be:	f04f 0600 	mov.w	r6, #0
 80168c2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 80168c6:	bf18      	it	ne
 80168c8:	3501      	addne	r5, #1
 80168ca:	6804      	ldr	r4, [r0, #0]
 80168cc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 80168d0:	bf18      	it	ne
 80168d2:	f025 0501 	bicne.w	r5, r5, #1
 80168d6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80168da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80168dc:	bf18      	it	ne
 80168de:	b2ad      	uxthne	r5, r5
 80168e0:	9104      	str	r1, [sp, #16]
 80168e2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80168e4:	e9cd 5a00 	strd	r5, sl, [sp]
 80168e8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80168ec:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80168ee:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 80168f0:	47a0      	blx	r4
 80168f2:	b017      	add	sp, #92	@ 0x5c
 80168f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168f8:	2300      	movs	r3, #0
 80168fa:	e7bf      	b.n	801687c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80168fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80168fe:	e724      	b.n	801674a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8016900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016902:	700b      	strb	r3, [r1, #0]
 8016904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016906:	704b      	strb	r3, [r1, #1]
 8016908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801690a:	708b      	strb	r3, [r1, #2]
 801690c:	e78a      	b.n	8016824 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801690e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016910:	b153      	cbz	r3, 8016928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8016912:	441c      	add	r4, r3
 8016914:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016916:	b2a4      	uxth	r4, r4
 8016918:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801691c:	f004 0407 	and.w	r4, r4, #7
 8016920:	781a      	ldrb	r2, [r3, #0]
 8016922:	9326      	str	r3, [sp, #152]	@ 0x98
 8016924:	4122      	asrs	r2, r4
 8016926:	b2d2      	uxtb	r2, r2
 8016928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801692a:	445b      	add	r3, fp
 801692c:	9309      	str	r3, [sp, #36]	@ 0x24
 801692e:	e72a      	b.n	8016786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8016930:	24065a48 	.word	0x24065a48
 8016934:	24065a50 	.word	0x24065a50
 8016938:	24065a4a 	.word	0x24065a4a
 801693c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801693e:	2b00      	cmp	r3, #0
 8016940:	d1d7      	bne.n	80168f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016942:	4b06      	ldr	r3, [pc, #24]	@ (801695c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8016944:	6818      	ldr	r0, [r3, #0]
 8016946:	6803      	ldr	r3, [r0, #0]
 8016948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801694a:	4798      	blx	r3
 801694c:	e7d1      	b.n	80168f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801694e:	2b00      	cmp	r3, #0
 8016950:	f43f aea6 	beq.w	80166a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016958:	e79b      	b.n	8016892 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801695a:	bf00      	nop
 801695c:	24065a50 	.word	0x24065a50

08016960 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016960:	b538      	push	{r3, r4, r5, lr}
 8016962:	4c15      	ldr	r4, [pc, #84]	@ (80169b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016964:	4605      	mov	r5, r0
 8016966:	7823      	ldrb	r3, [r4, #0]
 8016968:	f3bf 8f5b 	dmb	ish
 801696c:	07da      	lsls	r2, r3, #31
 801696e:	d40b      	bmi.n	8016988 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016970:	4620      	mov	r0, r4
 8016972:	f005 fb90 	bl	801c096 <__cxa_guard_acquire>
 8016976:	b138      	cbz	r0, 8016988 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016978:	4620      	mov	r0, r4
 801697a:	f005 fb98 	bl	801c0ae <__cxa_guard_release>
 801697e:	4a0f      	ldr	r2, [pc, #60]	@ (80169bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016980:	490f      	ldr	r1, [pc, #60]	@ (80169c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016982:	4810      	ldr	r0, [pc, #64]	@ (80169c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016984:	f005 fb80 	bl	801c088 <__aeabi_atexit>
 8016988:	4c0f      	ldr	r4, [pc, #60]	@ (80169c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801698a:	7823      	ldrb	r3, [r4, #0]
 801698c:	f3bf 8f5b 	dmb	ish
 8016990:	07db      	lsls	r3, r3, #31
 8016992:	d40b      	bmi.n	80169ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016994:	4620      	mov	r0, r4
 8016996:	f005 fb7e 	bl	801c096 <__cxa_guard_acquire>
 801699a:	b138      	cbz	r0, 80169ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801699c:	4620      	mov	r0, r4
 801699e:	f005 fb86 	bl	801c0ae <__cxa_guard_release>
 80169a2:	4a06      	ldr	r2, [pc, #24]	@ (80169bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80169a4:	4909      	ldr	r1, [pc, #36]	@ (80169cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80169a6:	480a      	ldr	r0, [pc, #40]	@ (80169d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80169a8:	f005 fb6e 	bl	801c088 <__aeabi_atexit>
 80169ac:	4b05      	ldr	r3, [pc, #20]	@ (80169c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80169ae:	616b      	str	r3, [r5, #20]
 80169b0:	4b07      	ldr	r3, [pc, #28]	@ (80169d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80169b2:	61ab      	str	r3, [r5, #24]
 80169b4:	bd38      	pop	{r3, r4, r5, pc}
 80169b6:	bf00      	nop
 80169b8:	24065b2c 	.word	0x24065b2c
 80169bc:	24000000 	.word	0x24000000
 80169c0:	08013c63 	.word	0x08013c63
 80169c4:	24000068 	.word	0x24000068
 80169c8:	24065b30 	.word	0x24065b30
 80169cc:	08013c61 	.word	0x08013c61
 80169d0:	2400006c 	.word	0x2400006c

080169d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80169d4:	b538      	push	{r3, r4, r5, lr}
 80169d6:	4c15      	ldr	r4, [pc, #84]	@ (8016a2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80169d8:	4605      	mov	r5, r0
 80169da:	7823      	ldrb	r3, [r4, #0]
 80169dc:	f3bf 8f5b 	dmb	ish
 80169e0:	07da      	lsls	r2, r3, #31
 80169e2:	d40b      	bmi.n	80169fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80169e4:	4620      	mov	r0, r4
 80169e6:	f005 fb56 	bl	801c096 <__cxa_guard_acquire>
 80169ea:	b138      	cbz	r0, 80169fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80169ec:	4620      	mov	r0, r4
 80169ee:	f005 fb5e 	bl	801c0ae <__cxa_guard_release>
 80169f2:	4a0f      	ldr	r2, [pc, #60]	@ (8016a30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80169f4:	490f      	ldr	r1, [pc, #60]	@ (8016a34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80169f6:	4810      	ldr	r0, [pc, #64]	@ (8016a38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80169f8:	f005 fb46 	bl	801c088 <__aeabi_atexit>
 80169fc:	4c0f      	ldr	r4, [pc, #60]	@ (8016a3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80169fe:	7823      	ldrb	r3, [r4, #0]
 8016a00:	f3bf 8f5b 	dmb	ish
 8016a04:	07db      	lsls	r3, r3, #31
 8016a06:	d40b      	bmi.n	8016a20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016a08:	4620      	mov	r0, r4
 8016a0a:	f005 fb44 	bl	801c096 <__cxa_guard_acquire>
 8016a0e:	b138      	cbz	r0, 8016a20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016a10:	4620      	mov	r0, r4
 8016a12:	f005 fb4c 	bl	801c0ae <__cxa_guard_release>
 8016a16:	4a06      	ldr	r2, [pc, #24]	@ (8016a30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016a18:	4909      	ldr	r1, [pc, #36]	@ (8016a40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016a1a:	480a      	ldr	r0, [pc, #40]	@ (8016a44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016a1c:	f005 fb34 	bl	801c088 <__aeabi_atexit>
 8016a20:	4b05      	ldr	r3, [pc, #20]	@ (8016a38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016a22:	60eb      	str	r3, [r5, #12]
 8016a24:	4b07      	ldr	r3, [pc, #28]	@ (8016a44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016a26:	612b      	str	r3, [r5, #16]
 8016a28:	bd38      	pop	{r3, r4, r5, pc}
 8016a2a:	bf00      	nop
 8016a2c:	24065b0c 	.word	0x24065b0c
 8016a30:	24000000 	.word	0x24000000
 8016a34:	08013c67 	.word	0x08013c67
 8016a38:	24000048 	.word	0x24000048
 8016a3c:	24065b10 	.word	0x24065b10
 8016a40:	08013c65 	.word	0x08013c65
 8016a44:	2400004c 	.word	0x2400004c

08016a48 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016a48:	b510      	push	{r4, lr}
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	f7ff ff88 	bl	8016960 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016a50:	4620      	mov	r0, r4
 8016a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a56:	f7ff bfbd 	b.w	80169d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016a5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016a5c:	b538      	push	{r3, r4, r5, lr}
 8016a5e:	4c15      	ldr	r4, [pc, #84]	@ (8016ab4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016a60:	4605      	mov	r5, r0
 8016a62:	7823      	ldrb	r3, [r4, #0]
 8016a64:	f3bf 8f5b 	dmb	ish
 8016a68:	07da      	lsls	r2, r3, #31
 8016a6a:	d40b      	bmi.n	8016a84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f005 fb12 	bl	801c096 <__cxa_guard_acquire>
 8016a72:	b138      	cbz	r0, 8016a84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016a74:	4620      	mov	r0, r4
 8016a76:	f005 fb1a 	bl	801c0ae <__cxa_guard_release>
 8016a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8016ab8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016a7c:	490f      	ldr	r1, [pc, #60]	@ (8016abc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016a7e:	4810      	ldr	r0, [pc, #64]	@ (8016ac0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016a80:	f005 fb02 	bl	801c088 <__aeabi_atexit>
 8016a84:	4c0f      	ldr	r4, [pc, #60]	@ (8016ac4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016a86:	7823      	ldrb	r3, [r4, #0]
 8016a88:	f3bf 8f5b 	dmb	ish
 8016a8c:	07db      	lsls	r3, r3, #31
 8016a8e:	d40b      	bmi.n	8016aa8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016a90:	4620      	mov	r0, r4
 8016a92:	f005 fb00 	bl	801c096 <__cxa_guard_acquire>
 8016a96:	b138      	cbz	r0, 8016aa8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f005 fb08 	bl	801c0ae <__cxa_guard_release>
 8016a9e:	4a06      	ldr	r2, [pc, #24]	@ (8016ab8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016aa0:	4909      	ldr	r1, [pc, #36]	@ (8016ac8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8016aa2:	480a      	ldr	r0, [pc, #40]	@ (8016acc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016aa4:	f005 faf0 	bl	801c088 <__aeabi_atexit>
 8016aa8:	4b05      	ldr	r3, [pc, #20]	@ (8016ac0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016aaa:	626b      	str	r3, [r5, #36]	@ 0x24
 8016aac:	4b07      	ldr	r3, [pc, #28]	@ (8016acc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016aae:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016ab0:	bd38      	pop	{r3, r4, r5, pc}
 8016ab2:	bf00      	nop
 8016ab4:	24065b34 	.word	0x24065b34
 8016ab8:	24000000 	.word	0x24000000
 8016abc:	08013c5b 	.word	0x08013c5b
 8016ac0:	24000070 	.word	0x24000070
 8016ac4:	24065b38 	.word	0x24065b38
 8016ac8:	08013c59 	.word	0x08013c59
 8016acc:	24000074 	.word	0x24000074

08016ad0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8016ad0:	b538      	push	{r3, r4, r5, lr}
 8016ad2:	4c15      	ldr	r4, [pc, #84]	@ (8016b28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016ad4:	4605      	mov	r5, r0
 8016ad6:	7823      	ldrb	r3, [r4, #0]
 8016ad8:	f3bf 8f5b 	dmb	ish
 8016adc:	07da      	lsls	r2, r3, #31
 8016ade:	d40b      	bmi.n	8016af8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f005 fad8 	bl	801c096 <__cxa_guard_acquire>
 8016ae6:	b138      	cbz	r0, 8016af8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016ae8:	4620      	mov	r0, r4
 8016aea:	f005 fae0 	bl	801c0ae <__cxa_guard_release>
 8016aee:	4a0f      	ldr	r2, [pc, #60]	@ (8016b2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016af0:	490f      	ldr	r1, [pc, #60]	@ (8016b30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016af2:	4810      	ldr	r0, [pc, #64]	@ (8016b34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016af4:	f005 fac8 	bl	801c088 <__aeabi_atexit>
 8016af8:	4c0f      	ldr	r4, [pc, #60]	@ (8016b38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016afa:	7823      	ldrb	r3, [r4, #0]
 8016afc:	f3bf 8f5b 	dmb	ish
 8016b00:	07db      	lsls	r3, r3, #31
 8016b02:	d40b      	bmi.n	8016b1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016b04:	4620      	mov	r0, r4
 8016b06:	f005 fac6 	bl	801c096 <__cxa_guard_acquire>
 8016b0a:	b138      	cbz	r0, 8016b1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f005 face 	bl	801c0ae <__cxa_guard_release>
 8016b12:	4a06      	ldr	r2, [pc, #24]	@ (8016b2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016b14:	4909      	ldr	r1, [pc, #36]	@ (8016b3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016b16:	480a      	ldr	r0, [pc, #40]	@ (8016b40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016b18:	f005 fab6 	bl	801c088 <__aeabi_atexit>
 8016b1c:	4b05      	ldr	r3, [pc, #20]	@ (8016b34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016b1e:	61eb      	str	r3, [r5, #28]
 8016b20:	4b07      	ldr	r3, [pc, #28]	@ (8016b40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016b22:	622b      	str	r3, [r5, #32]
 8016b24:	bd38      	pop	{r3, r4, r5, pc}
 8016b26:	bf00      	nop
 8016b28:	24065b14 	.word	0x24065b14
 8016b2c:	24000000 	.word	0x24000000
 8016b30:	08013c5f 	.word	0x08013c5f
 8016b34:	24000050 	.word	0x24000050
 8016b38:	24065b18 	.word	0x24065b18
 8016b3c:	08013c5d 	.word	0x08013c5d
 8016b40:	24000054 	.word	0x24000054

08016b44 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016b44:	b510      	push	{r4, lr}
 8016b46:	4604      	mov	r4, r0
 8016b48:	f7ff ff88 	bl	8016a5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b52:	f7ff bfbd 	b.w	8016ad0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016b58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016b58:	b538      	push	{r3, r4, r5, lr}
 8016b5a:	4c15      	ldr	r4, [pc, #84]	@ (8016bb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016b5c:	4605      	mov	r5, r0
 8016b5e:	7823      	ldrb	r3, [r4, #0]
 8016b60:	f3bf 8f5b 	dmb	ish
 8016b64:	07da      	lsls	r2, r3, #31
 8016b66:	d40b      	bmi.n	8016b80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f005 fa94 	bl	801c096 <__cxa_guard_acquire>
 8016b6e:	b138      	cbz	r0, 8016b80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016b70:	4620      	mov	r0, r4
 8016b72:	f005 fa9c 	bl	801c0ae <__cxa_guard_release>
 8016b76:	4a0f      	ldr	r2, [pc, #60]	@ (8016bb4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016b78:	490f      	ldr	r1, [pc, #60]	@ (8016bb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016b7a:	4810      	ldr	r0, [pc, #64]	@ (8016bbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016b7c:	f005 fa84 	bl	801c088 <__aeabi_atexit>
 8016b80:	4c0f      	ldr	r4, [pc, #60]	@ (8016bc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8016b82:	7823      	ldrb	r3, [r4, #0]
 8016b84:	f3bf 8f5b 	dmb	ish
 8016b88:	07db      	lsls	r3, r3, #31
 8016b8a:	d40b      	bmi.n	8016ba4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	f005 fa82 	bl	801c096 <__cxa_guard_acquire>
 8016b92:	b138      	cbz	r0, 8016ba4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016b94:	4620      	mov	r0, r4
 8016b96:	f005 fa8a 	bl	801c0ae <__cxa_guard_release>
 8016b9a:	4a06      	ldr	r2, [pc, #24]	@ (8016bb4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016b9c:	4909      	ldr	r1, [pc, #36]	@ (8016bc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8016b9e:	480a      	ldr	r0, [pc, #40]	@ (8016bc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016ba0:	f005 fa72 	bl	801c088 <__aeabi_atexit>
 8016ba4:	4b05      	ldr	r3, [pc, #20]	@ (8016bbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016ba6:	636b      	str	r3, [r5, #52]	@ 0x34
 8016ba8:	4b07      	ldr	r3, [pc, #28]	@ (8016bc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016baa:	63ab      	str	r3, [r5, #56]	@ 0x38
 8016bac:	bd38      	pop	{r3, r4, r5, pc}
 8016bae:	bf00      	nop
 8016bb0:	24065b1c 	.word	0x24065b1c
 8016bb4:	24000000 	.word	0x24000000
 8016bb8:	08013c53 	.word	0x08013c53
 8016bbc:	24000058 	.word	0x24000058
 8016bc0:	24065b20 	.word	0x24065b20
 8016bc4:	08013c51 	.word	0x08013c51
 8016bc8:	2400005c 	.word	0x2400005c

08016bcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8016bcc:	b538      	push	{r3, r4, r5, lr}
 8016bce:	4c15      	ldr	r4, [pc, #84]	@ (8016c24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8016bd0:	4605      	mov	r5, r0
 8016bd2:	7823      	ldrb	r3, [r4, #0]
 8016bd4:	f3bf 8f5b 	dmb	ish
 8016bd8:	07da      	lsls	r2, r3, #31
 8016bda:	d40b      	bmi.n	8016bf4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f005 fa5a 	bl	801c096 <__cxa_guard_acquire>
 8016be2:	b138      	cbz	r0, 8016bf4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016be4:	4620      	mov	r0, r4
 8016be6:	f005 fa62 	bl	801c0ae <__cxa_guard_release>
 8016bea:	4a0f      	ldr	r2, [pc, #60]	@ (8016c28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016bec:	490f      	ldr	r1, [pc, #60]	@ (8016c2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8016bee:	4810      	ldr	r0, [pc, #64]	@ (8016c30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016bf0:	f005 fa4a 	bl	801c088 <__aeabi_atexit>
 8016bf4:	4c0f      	ldr	r4, [pc, #60]	@ (8016c34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8016bf6:	7823      	ldrb	r3, [r4, #0]
 8016bf8:	f3bf 8f5b 	dmb	ish
 8016bfc:	07db      	lsls	r3, r3, #31
 8016bfe:	d40b      	bmi.n	8016c18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016c00:	4620      	mov	r0, r4
 8016c02:	f005 fa48 	bl	801c096 <__cxa_guard_acquire>
 8016c06:	b138      	cbz	r0, 8016c18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016c08:	4620      	mov	r0, r4
 8016c0a:	f005 fa50 	bl	801c0ae <__cxa_guard_release>
 8016c0e:	4a06      	ldr	r2, [pc, #24]	@ (8016c28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016c10:	4909      	ldr	r1, [pc, #36]	@ (8016c38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8016c12:	480a      	ldr	r0, [pc, #40]	@ (8016c3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016c14:	f005 fa38 	bl	801c088 <__aeabi_atexit>
 8016c18:	4b05      	ldr	r3, [pc, #20]	@ (8016c30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016c1a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8016c1c:	4b07      	ldr	r3, [pc, #28]	@ (8016c3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016c1e:	632b      	str	r3, [r5, #48]	@ 0x30
 8016c20:	bd38      	pop	{r3, r4, r5, pc}
 8016c22:	bf00      	nop
 8016c24:	24065af4 	.word	0x24065af4
 8016c28:	24000000 	.word	0x24000000
 8016c2c:	08013c57 	.word	0x08013c57
 8016c30:	24000030 	.word	0x24000030
 8016c34:	24065af8 	.word	0x24065af8
 8016c38:	08013c55 	.word	0x08013c55
 8016c3c:	24000034 	.word	0x24000034

08016c40 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8016c40:	b510      	push	{r4, lr}
 8016c42:	4604      	mov	r4, r0
 8016c44:	f7ff ff88 	bl	8016b58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016c48:	4620      	mov	r0, r4
 8016c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c4e:	f7ff bfbd 	b.w	8016bcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08016c54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8016c54:	b538      	push	{r3, r4, r5, lr}
 8016c56:	4c15      	ldr	r4, [pc, #84]	@ (8016cac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016c58:	4605      	mov	r5, r0
 8016c5a:	7823      	ldrb	r3, [r4, #0]
 8016c5c:	f3bf 8f5b 	dmb	ish
 8016c60:	07da      	lsls	r2, r3, #31
 8016c62:	d40b      	bmi.n	8016c7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016c64:	4620      	mov	r0, r4
 8016c66:	f005 fa16 	bl	801c096 <__cxa_guard_acquire>
 8016c6a:	b138      	cbz	r0, 8016c7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f005 fa1e 	bl	801c0ae <__cxa_guard_release>
 8016c72:	4a0f      	ldr	r2, [pc, #60]	@ (8016cb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016c74:	490f      	ldr	r1, [pc, #60]	@ (8016cb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8016c76:	4810      	ldr	r0, [pc, #64]	@ (8016cb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016c78:	f005 fa06 	bl	801c088 <__aeabi_atexit>
 8016c7c:	4c0f      	ldr	r4, [pc, #60]	@ (8016cbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8016c7e:	7823      	ldrb	r3, [r4, #0]
 8016c80:	f3bf 8f5b 	dmb	ish
 8016c84:	07db      	lsls	r3, r3, #31
 8016c86:	d40b      	bmi.n	8016ca0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016c88:	4620      	mov	r0, r4
 8016c8a:	f005 fa04 	bl	801c096 <__cxa_guard_acquire>
 8016c8e:	b138      	cbz	r0, 8016ca0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016c90:	4620      	mov	r0, r4
 8016c92:	f005 fa0c 	bl	801c0ae <__cxa_guard_release>
 8016c96:	4a06      	ldr	r2, [pc, #24]	@ (8016cb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016c98:	4909      	ldr	r1, [pc, #36]	@ (8016cc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016c9a:	480a      	ldr	r0, [pc, #40]	@ (8016cc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016c9c:	f005 f9f4 	bl	801c088 <__aeabi_atexit>
 8016ca0:	4b05      	ldr	r3, [pc, #20]	@ (8016cb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016ca2:	646b      	str	r3, [r5, #68]	@ 0x44
 8016ca4:	4b07      	ldr	r3, [pc, #28]	@ (8016cc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016ca6:	64ab      	str	r3, [r5, #72]	@ 0x48
 8016ca8:	bd38      	pop	{r3, r4, r5, pc}
 8016caa:	bf00      	nop
 8016cac:	24065b24 	.word	0x24065b24
 8016cb0:	24000000 	.word	0x24000000
 8016cb4:	08013c4b 	.word	0x08013c4b
 8016cb8:	24000060 	.word	0x24000060
 8016cbc:	24065b28 	.word	0x24065b28
 8016cc0:	08013c49 	.word	0x08013c49
 8016cc4:	24000064 	.word	0x24000064

08016cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8016cc8:	b538      	push	{r3, r4, r5, lr}
 8016cca:	4c15      	ldr	r4, [pc, #84]	@ (8016d20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016ccc:	4605      	mov	r5, r0
 8016cce:	7823      	ldrb	r3, [r4, #0]
 8016cd0:	f3bf 8f5b 	dmb	ish
 8016cd4:	07da      	lsls	r2, r3, #31
 8016cd6:	d40b      	bmi.n	8016cf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016cd8:	4620      	mov	r0, r4
 8016cda:	f005 f9dc 	bl	801c096 <__cxa_guard_acquire>
 8016cde:	b138      	cbz	r0, 8016cf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f005 f9e4 	bl	801c0ae <__cxa_guard_release>
 8016ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8016d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016ce8:	490f      	ldr	r1, [pc, #60]	@ (8016d28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8016cea:	4810      	ldr	r0, [pc, #64]	@ (8016d2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016cec:	f005 f9cc 	bl	801c088 <__aeabi_atexit>
 8016cf0:	4c0f      	ldr	r4, [pc, #60]	@ (8016d30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8016cf2:	7823      	ldrb	r3, [r4, #0]
 8016cf4:	f3bf 8f5b 	dmb	ish
 8016cf8:	07db      	lsls	r3, r3, #31
 8016cfa:	d40b      	bmi.n	8016d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f005 f9ca 	bl	801c096 <__cxa_guard_acquire>
 8016d02:	b138      	cbz	r0, 8016d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016d04:	4620      	mov	r0, r4
 8016d06:	f005 f9d2 	bl	801c0ae <__cxa_guard_release>
 8016d0a:	4a06      	ldr	r2, [pc, #24]	@ (8016d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016d0c:	4909      	ldr	r1, [pc, #36]	@ (8016d34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8016d0e:	480a      	ldr	r0, [pc, #40]	@ (8016d38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016d10:	f005 f9ba 	bl	801c088 <__aeabi_atexit>
 8016d14:	4b05      	ldr	r3, [pc, #20]	@ (8016d2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016d16:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8016d18:	4b07      	ldr	r3, [pc, #28]	@ (8016d38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016d1a:	642b      	str	r3, [r5, #64]	@ 0x40
 8016d1c:	bd38      	pop	{r3, r4, r5, pc}
 8016d1e:	bf00      	nop
 8016d20:	24065b04 	.word	0x24065b04
 8016d24:	24000000 	.word	0x24000000
 8016d28:	08013c4f 	.word	0x08013c4f
 8016d2c:	24000040 	.word	0x24000040
 8016d30:	24065b08 	.word	0x24065b08
 8016d34:	08013c4d 	.word	0x08013c4d
 8016d38:	24000044 	.word	0x24000044

08016d3c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8016d3c:	b510      	push	{r4, lr}
 8016d3e:	4604      	mov	r4, r0
 8016d40:	f7ff ff88 	bl	8016c54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8016d44:	4620      	mov	r0, r4
 8016d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d4a:	f7ff bfbd 	b.w	8016cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08016d50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8016d50:	b538      	push	{r3, r4, r5, lr}
 8016d52:	4c15      	ldr	r4, [pc, #84]	@ (8016da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8016d54:	4605      	mov	r5, r0
 8016d56:	7823      	ldrb	r3, [r4, #0]
 8016d58:	f3bf 8f5b 	dmb	ish
 8016d5c:	07da      	lsls	r2, r3, #31
 8016d5e:	d40b      	bmi.n	8016d78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016d60:	4620      	mov	r0, r4
 8016d62:	f005 f998 	bl	801c096 <__cxa_guard_acquire>
 8016d66:	b138      	cbz	r0, 8016d78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f005 f9a0 	bl	801c0ae <__cxa_guard_release>
 8016d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8016dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016d70:	490f      	ldr	r1, [pc, #60]	@ (8016db0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8016d72:	4810      	ldr	r0, [pc, #64]	@ (8016db4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016d74:	f005 f988 	bl	801c088 <__aeabi_atexit>
 8016d78:	4c0f      	ldr	r4, [pc, #60]	@ (8016db8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8016d7a:	7823      	ldrb	r3, [r4, #0]
 8016d7c:	f3bf 8f5b 	dmb	ish
 8016d80:	07db      	lsls	r3, r3, #31
 8016d82:	d40b      	bmi.n	8016d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016d84:	4620      	mov	r0, r4
 8016d86:	f005 f986 	bl	801c096 <__cxa_guard_acquire>
 8016d8a:	b138      	cbz	r0, 8016d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f005 f98e 	bl	801c0ae <__cxa_guard_release>
 8016d92:	4a06      	ldr	r2, [pc, #24]	@ (8016dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016d94:	4909      	ldr	r1, [pc, #36]	@ (8016dbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8016d96:	480a      	ldr	r0, [pc, #40]	@ (8016dc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016d98:	f005 f976 	bl	801c088 <__aeabi_atexit>
 8016d9c:	4b05      	ldr	r3, [pc, #20]	@ (8016db4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016d9e:	656b      	str	r3, [r5, #84]	@ 0x54
 8016da0:	4b07      	ldr	r3, [pc, #28]	@ (8016dc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016da2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8016da4:	bd38      	pop	{r3, r4, r5, pc}
 8016da6:	bf00      	nop
 8016da8:	24065afc 	.word	0x24065afc
 8016dac:	24000000 	.word	0x24000000
 8016db0:	08013c43 	.word	0x08013c43
 8016db4:	24000038 	.word	0x24000038
 8016db8:	24065b00 	.word	0x24065b00
 8016dbc:	08013c41 	.word	0x08013c41
 8016dc0:	2400003c 	.word	0x2400003c

08016dc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8016dc4:	b538      	push	{r3, r4, r5, lr}
 8016dc6:	4c15      	ldr	r4, [pc, #84]	@ (8016e1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8016dc8:	4605      	mov	r5, r0
 8016dca:	7823      	ldrb	r3, [r4, #0]
 8016dcc:	f3bf 8f5b 	dmb	ish
 8016dd0:	07da      	lsls	r2, r3, #31
 8016dd2:	d40b      	bmi.n	8016dec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f005 f95e 	bl	801c096 <__cxa_guard_acquire>
 8016dda:	b138      	cbz	r0, 8016dec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016ddc:	4620      	mov	r0, r4
 8016dde:	f005 f966 	bl	801c0ae <__cxa_guard_release>
 8016de2:	4a0f      	ldr	r2, [pc, #60]	@ (8016e20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016de4:	490f      	ldr	r1, [pc, #60]	@ (8016e24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8016de6:	4810      	ldr	r0, [pc, #64]	@ (8016e28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016de8:	f005 f94e 	bl	801c088 <__aeabi_atexit>
 8016dec:	4c0f      	ldr	r4, [pc, #60]	@ (8016e2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8016dee:	7823      	ldrb	r3, [r4, #0]
 8016df0:	f3bf 8f5b 	dmb	ish
 8016df4:	07db      	lsls	r3, r3, #31
 8016df6:	d40b      	bmi.n	8016e10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016df8:	4620      	mov	r0, r4
 8016dfa:	f005 f94c 	bl	801c096 <__cxa_guard_acquire>
 8016dfe:	b138      	cbz	r0, 8016e10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016e00:	4620      	mov	r0, r4
 8016e02:	f005 f954 	bl	801c0ae <__cxa_guard_release>
 8016e06:	4a06      	ldr	r2, [pc, #24]	@ (8016e20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016e08:	4909      	ldr	r1, [pc, #36]	@ (8016e30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8016e0a:	480a      	ldr	r0, [pc, #40]	@ (8016e34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016e0c:	f005 f93c 	bl	801c088 <__aeabi_atexit>
 8016e10:	4b05      	ldr	r3, [pc, #20]	@ (8016e28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016e12:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016e14:	4b07      	ldr	r3, [pc, #28]	@ (8016e34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016e16:	652b      	str	r3, [r5, #80]	@ 0x50
 8016e18:	bd38      	pop	{r3, r4, r5, pc}
 8016e1a:	bf00      	nop
 8016e1c:	24065aec 	.word	0x24065aec
 8016e20:	24000000 	.word	0x24000000
 8016e24:	08013c47 	.word	0x08013c47
 8016e28:	24000028 	.word	0x24000028
 8016e2c:	24065af0 	.word	0x24065af0
 8016e30:	08013c45 	.word	0x08013c45
 8016e34:	2400002c 	.word	0x2400002c

08016e38 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	f7ff ff88 	bl	8016d50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8016e40:	4620      	mov	r0, r4
 8016e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e46:	f7ff bfbd 	b.w	8016dc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08016e4a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8016e4a:	b510      	push	{r4, lr}
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	f7ff fff3 	bl	8016e38 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8016e52:	4620      	mov	r0, r4
 8016e54:	f7ff ff72 	bl	8016d3c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f7ff fe73 	bl	8016b44 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f7ff fdf2 	bl	8016a48 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8016e64:	4620      	mov	r0, r4
 8016e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e6a:	f7ff bee9 	b.w	8016c40 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08016e70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4c0b      	ldr	r4, [pc, #44]	@ (8016ea0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8016e74:	4605      	mov	r5, r0
 8016e76:	7823      	ldrb	r3, [r4, #0]
 8016e78:	f3bf 8f5b 	dmb	ish
 8016e7c:	07db      	lsls	r3, r3, #31
 8016e7e:	d40b      	bmi.n	8016e98 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8016e80:	4620      	mov	r0, r4
 8016e82:	f005 f908 	bl	801c096 <__cxa_guard_acquire>
 8016e86:	b138      	cbz	r0, 8016e98 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f005 f910 	bl	801c0ae <__cxa_guard_release>
 8016e8e:	4a05      	ldr	r2, [pc, #20]	@ (8016ea4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8016e90:	4905      	ldr	r1, [pc, #20]	@ (8016ea8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8016e92:	4806      	ldr	r0, [pc, #24]	@ (8016eac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8016e94:	f005 f8f8 	bl	801c088 <__aeabi_atexit>
 8016e98:	4b04      	ldr	r3, [pc, #16]	@ (8016eac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8016e9a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8016e9c:	bd38      	pop	{r3, r4, r5, pc}
 8016e9e:	bf00      	nop
 8016ea0:	24065ae0 	.word	0x24065ae0
 8016ea4:	24000000 	.word	0x24000000
 8016ea8:	08013c3f 	.word	0x08013c3f
 8016eac:	24000020 	.word	0x24000020

08016eb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8016eb0:	b538      	push	{r3, r4, r5, lr}
 8016eb2:	4c0b      	ldr	r4, [pc, #44]	@ (8016ee0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8016eb4:	4605      	mov	r5, r0
 8016eb6:	7823      	ldrb	r3, [r4, #0]
 8016eb8:	f3bf 8f5b 	dmb	ish
 8016ebc:	07db      	lsls	r3, r3, #31
 8016ebe:	d40b      	bmi.n	8016ed8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	f005 f8e8 	bl	801c096 <__cxa_guard_acquire>
 8016ec6:	b138      	cbz	r0, 8016ed8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f005 f8f0 	bl	801c0ae <__cxa_guard_release>
 8016ece:	4a05      	ldr	r2, [pc, #20]	@ (8016ee4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8016ed0:	4905      	ldr	r1, [pc, #20]	@ (8016ee8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8016ed2:	4806      	ldr	r0, [pc, #24]	@ (8016eec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8016ed4:	f005 f8d8 	bl	801c088 <__aeabi_atexit>
 8016ed8:	4b04      	ldr	r3, [pc, #16]	@ (8016eec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8016eda:	662b      	str	r3, [r5, #96]	@ 0x60
 8016edc:	bd38      	pop	{r3, r4, r5, pc}
 8016ede:	bf00      	nop
 8016ee0:	24065ae4 	.word	0x24065ae4
 8016ee4:	24000000 	.word	0x24000000
 8016ee8:	08013c3d 	.word	0x08013c3d
 8016eec:	24000024 	.word	0x24000024

08016ef0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8016ef0:	b570      	push	{r4, r5, r6, lr}
 8016ef2:	4d0c      	ldr	r5, [pc, #48]	@ (8016f24 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8016ef4:	4606      	mov	r6, r0
 8016ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8016f28 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8016ef8:	782b      	ldrb	r3, [r5, #0]
 8016efa:	f3bf 8f5b 	dmb	ish
 8016efe:	f013 0f01 	tst.w	r3, #1
 8016f02:	d10d      	bne.n	8016f20 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8016f04:	4628      	mov	r0, r5
 8016f06:	f005 f8c6 	bl	801c096 <__cxa_guard_acquire>
 8016f0a:	b148      	cbz	r0, 8016f20 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8016f0c:	4b07      	ldr	r3, [pc, #28]	@ (8016f2c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8016f0e:	4628      	mov	r0, r5
 8016f10:	6023      	str	r3, [r4, #0]
 8016f12:	f005 f8cc 	bl	801c0ae <__cxa_guard_release>
 8016f16:	4a06      	ldr	r2, [pc, #24]	@ (8016f30 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8016f18:	4620      	mov	r0, r4
 8016f1a:	4906      	ldr	r1, [pc, #24]	@ (8016f34 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8016f1c:	f005 f8b4 	bl	801c088 <__aeabi_atexit>
 8016f20:	6674      	str	r4, [r6, #100]	@ 0x64
 8016f22:	bd70      	pop	{r4, r5, r6, pc}
 8016f24:	24065ae8 	.word	0x24065ae8
 8016f28:	24065c40 	.word	0x24065c40
 8016f2c:	0801eab4 	.word	0x0801eab4
 8016f30:	24000000 	.word	0x24000000
 8016f34:	08013c3b 	.word	0x08013c3b

08016f38 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8016f38:	b510      	push	{r4, lr}
 8016f3a:	4604      	mov	r4, r0
 8016f3c:	f7ff ff98 	bl	8016e70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8016f40:	4620      	mov	r0, r4
 8016f42:	f7ff ffb5 	bl	8016eb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8016f46:	4620      	mov	r0, r4
 8016f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f4c:	f7ff bfd0 	b.w	8016ef0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08016f50 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8016f50:	b570      	push	{r4, r5, r6, lr}
 8016f52:	4d0c      	ldr	r5, [pc, #48]	@ (8016f84 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 8016f54:	4606      	mov	r6, r0
 8016f56:	4c0c      	ldr	r4, [pc, #48]	@ (8016f88 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 8016f58:	782b      	ldrb	r3, [r5, #0]
 8016f5a:	f3bf 8f5b 	dmb	ish
 8016f5e:	f013 0f01 	tst.w	r3, #1
 8016f62:	d10d      	bne.n	8016f80 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8016f64:	4628      	mov	r0, r5
 8016f66:	f005 f896 	bl	801c096 <__cxa_guard_acquire>
 8016f6a:	b148      	cbz	r0, 8016f80 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8016f6c:	4b07      	ldr	r3, [pc, #28]	@ (8016f8c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8016f6e:	4628      	mov	r0, r5
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	f005 f89c 	bl	801c0ae <__cxa_guard_release>
 8016f76:	4a06      	ldr	r2, [pc, #24]	@ (8016f90 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 8016f78:	4620      	mov	r0, r4
 8016f7a:	4906      	ldr	r1, [pc, #24]	@ (8016f94 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8016f7c:	f005 f884 	bl	801c088 <__aeabi_atexit>
 8016f80:	66b4      	str	r4, [r6, #104]	@ 0x68
 8016f82:	bd70      	pop	{r4, r5, r6, pc}
 8016f84:	24065adc 	.word	0x24065adc
 8016f88:	24065b3c 	.word	0x24065b3c
 8016f8c:	0801eacc 	.word	0x0801eacc
 8016f90:	24000000 	.word	0x24000000
 8016f94:	08013c39 	.word	0x08013c39

08016f98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8016f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9c:	b087      	sub	sp, #28
 8016f9e:	788d      	ldrb	r5, [r1, #2]
 8016fa0:	f891 9000 	ldrb.w	r9, [r1]
 8016fa4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8016fa8:	9501      	str	r5, [sp, #4]
 8016faa:	784d      	ldrb	r5, [r1, #1]
 8016fac:	9203      	str	r2, [sp, #12]
 8016fae:	9502      	str	r5, [sp, #8]
 8016fb0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8016fb4:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8016fb8:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8016fbc:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8016fc0:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8016fc4:	fb06 0708 	mla	r7, r6, r8, r0
 8016fc8:	2e00      	cmp	r6, #0
 8016fca:	eb02 0a07 	add.w	sl, r2, r7
 8016fce:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8016fd2:	9d01      	ldr	r5, [sp, #4]
 8016fd4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8016fd8:	ea45 0509 	orr.w	r5, r5, r9
 8016fdc:	9505      	str	r5, [sp, #20]
 8016fde:	f2c0 80b2 	blt.w	8017146 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8016fe2:	45b3      	cmp	fp, r6
 8016fe4:	f340 80af 	ble.w	8017146 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	f2c0 80aa 	blt.w	8017142 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8016fee:	4580      	cmp	r8, r0
 8016ff0:	f340 80a7 	ble.w	8017142 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8016ff4:	9a03      	ldr	r2, [sp, #12]
 8016ff6:	5dd7      	ldrb	r7, [r2, r7]
 8016ff8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016ffc:	441f      	add	r7, r3
 8016ffe:	1c42      	adds	r2, r0, #1
 8017000:	f100 80a4 	bmi.w	801714c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8017004:	4590      	cmp	r8, r2
 8017006:	f340 80a1 	ble.w	801714c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801700a:	2c00      	cmp	r4, #0
 801700c:	f000 809e 	beq.w	801714c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8017010:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8017014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017018:	441d      	add	r5, r3
 801701a:	3601      	adds	r6, #1
 801701c:	f100 809a 	bmi.w	8017154 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8017020:	45b3      	cmp	fp, r6
 8017022:	f340 8097 	ble.w	8017154 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8017026:	f1bc 0f00 	cmp.w	ip, #0
 801702a:	f000 8093 	beq.w	8017154 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801702e:	2800      	cmp	r0, #0
 8017030:	f2c0 808e 	blt.w	8017150 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8017034:	4580      	cmp	r8, r0
 8017036:	f340 808b 	ble.w	8017150 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801703a:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801703e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017042:	441e      	add	r6, r3
 8017044:	3001      	adds	r0, #1
 8017046:	f100 8088 	bmi.w	801715a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801704a:	4580      	cmp	r8, r0
 801704c:	f340 8085 	ble.w	801715a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8017050:	2c00      	cmp	r4, #0
 8017052:	f000 8082 	beq.w	801715a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8017056:	44d0      	add	r8, sl
 8017058:	f898 2001 	ldrb.w	r2, [r8, #1]
 801705c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017060:	4413      	add	r3, r2
 8017062:	b2a4      	uxth	r4, r4
 8017064:	f895 a000 	ldrb.w	sl, [r5]
 8017068:	fa1f fc8c 	uxth.w	ip, ip
 801706c:	fb04 fb0c 	mul.w	fp, r4, ip
 8017070:	0124      	lsls	r4, r4, #4
 8017072:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8017076:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801707a:	eba4 040b 	sub.w	r4, r4, fp
 801707e:	fa1f f08c 	uxth.w	r0, ip
 8017082:	b2a2      	uxth	r2, r4
 8017084:	783c      	ldrb	r4, [r7, #0]
 8017086:	eba8 0800 	sub.w	r8, r8, r0
 801708a:	fa1f fc8e 	uxth.w	ip, lr
 801708e:	fb02 fa0a 	mul.w	sl, r2, sl
 8017092:	ea6f 0e0e 	mvn.w	lr, lr
 8017096:	fa1f f888 	uxth.w	r8, r8
 801709a:	fa5f fe8e 	uxtb.w	lr, lr
 801709e:	fb08 aa04 	mla	sl, r8, r4, sl
 80170a2:	7834      	ldrb	r4, [r6, #0]
 80170a4:	fb19 f90e 	smulbb	r9, r9, lr
 80170a8:	fb00 aa04 	mla	sl, r0, r4, sl
 80170ac:	781c      	ldrb	r4, [r3, #0]
 80170ae:	fb0b a404 	mla	r4, fp, r4, sl
 80170b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80170b6:	fb04 990c 	mla	r9, r4, ip, r9
 80170ba:	fa1f f989 	uxth.w	r9, r9
 80170be:	f109 0401 	add.w	r4, r9, #1
 80170c2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80170c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80170ca:	f881 9000 	strb.w	r9, [r1]
 80170ce:	f895 9001 	ldrb.w	r9, [r5, #1]
 80170d2:	787c      	ldrb	r4, [r7, #1]
 80170d4:	fb02 f909 	mul.w	r9, r2, r9
 80170d8:	fb08 9904 	mla	r9, r8, r4, r9
 80170dc:	7874      	ldrb	r4, [r6, #1]
 80170de:	fb00 9904 	mla	r9, r0, r4, r9
 80170e2:	785c      	ldrb	r4, [r3, #1]
 80170e4:	fb0b 9404 	mla	r4, fp, r4, r9
 80170e8:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80170ec:	9c02      	ldr	r4, [sp, #8]
 80170ee:	fb14 f90e 	smulbb	r9, r4, lr
 80170f2:	fb0a 940c 	mla	r4, sl, ip, r9
 80170f6:	b2a4      	uxth	r4, r4
 80170f8:	f104 0901 	add.w	r9, r4, #1
 80170fc:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8017100:	1224      	asrs	r4, r4, #8
 8017102:	704c      	strb	r4, [r1, #1]
 8017104:	78ad      	ldrb	r5, [r5, #2]
 8017106:	78bc      	ldrb	r4, [r7, #2]
 8017108:	436a      	muls	r2, r5
 801710a:	789b      	ldrb	r3, [r3, #2]
 801710c:	fb08 2204 	mla	r2, r8, r4, r2
 8017110:	78b4      	ldrb	r4, [r6, #2]
 8017112:	fb00 2004 	mla	r0, r0, r4, r2
 8017116:	fb0b 0b03 	mla	fp, fp, r3, r0
 801711a:	9b01      	ldr	r3, [sp, #4]
 801711c:	fb13 fe0e 	smulbb	lr, r3, lr
 8017120:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8017124:	fb0b ec0c 	mla	ip, fp, ip, lr
 8017128:	fa1f fc8c 	uxth.w	ip, ip
 801712c:	f10c 0e01 	add.w	lr, ip, #1
 8017130:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8017134:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017138:	f881 c002 	strb.w	ip, [r1, #2]
 801713c:	b007      	add	sp, #28
 801713e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017142:	af05      	add	r7, sp, #20
 8017144:	e75b      	b.n	8016ffe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8017146:	ad05      	add	r5, sp, #20
 8017148:	462f      	mov	r7, r5
 801714a:	e766      	b.n	801701a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801714c:	ad05      	add	r5, sp, #20
 801714e:	e764      	b.n	801701a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8017150:	ae05      	add	r6, sp, #20
 8017152:	e777      	b.n	8017044 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8017154:	ab05      	add	r3, sp, #20
 8017156:	461e      	mov	r6, r3
 8017158:	e783      	b.n	8017062 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801715a:	ab05      	add	r3, sp, #20
 801715c:	e781      	b.n	8017062 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801715e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801715e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017162:	b093      	sub	sp, #76	@ 0x4c
 8017164:	9210      	str	r2, [sp, #64]	@ 0x40
 8017166:	9309      	str	r3, [sp, #36]	@ 0x24
 8017168:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801716a:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801716e:	9011      	str	r0, [sp, #68]	@ 0x44
 8017170:	930e      	str	r3, [sp, #56]	@ 0x38
 8017172:	6850      	ldr	r0, [r2, #4]
 8017174:	910d      	str	r1, [sp, #52]	@ 0x34
 8017176:	6812      	ldr	r2, [r2, #0]
 8017178:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801717c:	fb00 1303 	mla	r3, r0, r3, r1
 8017180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017184:	18d3      	adds	r3, r2, r3
 8017186:	930a      	str	r3, [sp, #40]	@ 0x28
 8017188:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	930c      	str	r3, [sp, #48]	@ 0x30
 801718e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017190:	685c      	ldr	r4, [r3, #4]
 8017192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017194:	3404      	adds	r4, #4
 8017196:	43db      	mvns	r3, r3
 8017198:	b2db      	uxtb	r3, r3
 801719a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801719c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801719e:	2b00      	cmp	r3, #0
 80171a0:	dc03      	bgt.n	80171aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80171a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f340 8250 	ble.w	801764a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80171aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80171ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80171b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80171b4:	1e48      	subs	r0, r1, #1
 80171b6:	1e55      	subs	r5, r2, #1
 80171b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	f340 80ee 	ble.w	801739c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80171c0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80171c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80171c4:	1436      	asrs	r6, r6, #16
 80171c6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80171ca:	d406      	bmi.n	80171da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171cc:	4286      	cmp	r6, r0
 80171ce:	da04      	bge.n	80171da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	db02      	blt.n	80171da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171d4:	42ab      	cmp	r3, r5
 80171d6:	f2c0 80e2 	blt.w	801739e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80171da:	3601      	adds	r6, #1
 80171dc:	f100 80cf 	bmi.w	801737e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80171e0:	42b1      	cmp	r1, r6
 80171e2:	f2c0 80cc 	blt.w	801737e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80171e6:	3301      	adds	r3, #1
 80171e8:	f100 80c9 	bmi.w	801737e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80171ec:	429a      	cmp	r2, r3
 80171ee:	f2c0 80c6 	blt.w	801737e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80171f2:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 80171f6:	f1bb 0f00 	cmp.w	fp, #0
 80171fa:	f340 80f1 	ble.w	80173e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80171fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017200:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8017202:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8017204:	141d      	asrs	r5, r3, #16
 8017206:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017208:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801720c:	68c7      	ldr	r7, [r0, #12]
 801720e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017210:	1418      	asrs	r0, r3, #16
 8017212:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8017216:	6892      	ldr	r2, [r2, #8]
 8017218:	f100 8137 	bmi.w	801748a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801721c:	f102 3cff 	add.w	ip, r2, #4294967295
 8017220:	4560      	cmp	r0, ip
 8017222:	f280 8132 	bge.w	801748a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8017226:	2d00      	cmp	r5, #0
 8017228:	f2c0 812f 	blt.w	801748a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801722c:	f107 3cff 	add.w	ip, r7, #4294967295
 8017230:	4565      	cmp	r5, ip
 8017232:	f280 812a 	bge.w	801748a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8017236:	b212      	sxth	r2, r2
 8017238:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801723a:	fb05 0002 	mla	r0, r5, r2, r0
 801723e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8017240:	f817 c000 	ldrb.w	ip, [r7, r0]
 8017244:	4405      	add	r5, r0
 8017246:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801724a:	eb04 0e0c 	add.w	lr, r4, ip
 801724e:	f1b8 0f00 	cmp.w	r8, #0
 8017252:	f000 810c 	beq.w	801746e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8017256:	786f      	ldrb	r7, [r5, #1]
 8017258:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801725c:	4427      	add	r7, r4
 801725e:	2900      	cmp	r1, #0
 8017260:	f000 810d 	beq.w	801747e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8017264:	18a8      	adds	r0, r5, r2
 8017266:	5caa      	ldrb	r2, [r5, r2]
 8017268:	7840      	ldrb	r0, [r0, #1]
 801726a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801726e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017272:	4422      	add	r2, r4
 8017274:	4420      	add	r0, r4
 8017276:	fa1f f388 	uxth.w	r3, r8
 801727a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801727e:	b289      	uxth	r1, r1
 8017280:	f897 c000 	ldrb.w	ip, [r7]
 8017284:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8017288:	fb03 f901 	mul.w	r9, r3, r1
 801728c:	011b      	lsls	r3, r3, #4
 801728e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017292:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8017296:	eba3 0309 	sub.w	r3, r3, r9
 801729a:	b289      	uxth	r1, r1
 801729c:	b29b      	uxth	r3, r3
 801729e:	eba8 0801 	sub.w	r8, r8, r1
 80172a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80172a6:	fa1f f888 	uxth.w	r8, r8
 80172aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80172ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172ae:	fb08 cc0a 	mla	ip, r8, sl, ip
 80172b2:	f892 a000 	ldrb.w	sl, [r2]
 80172b6:	fb01 cc0a 	mla	ip, r1, sl, ip
 80172ba:	f890 a000 	ldrb.w	sl, [r0]
 80172be:	fb09 cc0a 	mla	ip, r9, sl, ip
 80172c2:	f896 a000 	ldrb.w	sl, [r6]
 80172c6:	fb1a fa03 	smulbb	sl, sl, r3
 80172ca:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80172ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172d0:	fb0c ac05 	mla	ip, ip, r5, sl
 80172d4:	fa1f fc8c 	uxth.w	ip, ip
 80172d8:	f10c 0a01 	add.w	sl, ip, #1
 80172dc:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80172e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80172e4:	f886 a000 	strb.w	sl, [r6]
 80172e8:	f897 c001 	ldrb.w	ip, [r7, #1]
 80172ec:	f89e a001 	ldrb.w	sl, [lr, #1]
 80172f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80172f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172f6:	fb08 cc0a 	mla	ip, r8, sl, ip
 80172fa:	f892 a001 	ldrb.w	sl, [r2, #1]
 80172fe:	fb01 cc0a 	mla	ip, r1, sl, ip
 8017302:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017306:	fb09 cc0a 	mla	ip, r9, sl, ip
 801730a:	f896 a001 	ldrb.w	sl, [r6, #1]
 801730e:	fb1a fa03 	smulbb	sl, sl, r3
 8017312:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017316:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017318:	fb0c ac05 	mla	ip, ip, r5, sl
 801731c:	fa1f fc8c 	uxth.w	ip, ip
 8017320:	f10c 0a01 	add.w	sl, ip, #1
 8017324:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8017328:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801732c:	f886 c001 	strb.w	ip, [r6, #1]
 8017330:	78bf      	ldrb	r7, [r7, #2]
 8017332:	f89e c002 	ldrb.w	ip, [lr, #2]
 8017336:	437b      	muls	r3, r7
 8017338:	fb08 330c 	mla	r3, r8, ip, r3
 801733c:	f892 c002 	ldrb.w	ip, [r2, #2]
 8017340:	7882      	ldrb	r2, [r0, #2]
 8017342:	fb01 310c 	mla	r1, r1, ip, r3
 8017346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017348:	fb09 1902 	mla	r9, r9, r2, r1
 801734c:	78b1      	ldrb	r1, [r6, #2]
 801734e:	fb11 f103 	smulbb	r1, r1, r3
 8017352:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017356:	fb09 1505 	mla	r5, r9, r5, r1
 801735a:	b2ad      	uxth	r5, r5
 801735c:	1c6b      	adds	r3, r5, #1
 801735e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8017362:	122d      	asrs	r5, r5, #8
 8017364:	70b5      	strb	r5, [r6, #2]
 8017366:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017368:	3603      	adds	r6, #3
 801736a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801736c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017370:	4413      	add	r3, r2
 8017372:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017374:	931d      	str	r3, [sp, #116]	@ 0x74
 8017376:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017378:	4413      	add	r3, r2
 801737a:	931e      	str	r3, [sp, #120]	@ 0x78
 801737c:	e73b      	b.n	80171f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801737e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017380:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8017382:	4433      	add	r3, r6
 8017384:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8017386:	931d      	str	r3, [sp, #116]	@ 0x74
 8017388:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801738a:	4433      	add	r3, r6
 801738c:	931e      	str	r3, [sp, #120]	@ 0x78
 801738e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017390:	3b01      	subs	r3, #1
 8017392:	9309      	str	r3, [sp, #36]	@ 0x24
 8017394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017396:	3303      	adds	r3, #3
 8017398:	930a      	str	r3, [sp, #40]	@ 0x28
 801739a:	e70d      	b.n	80171b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801739c:	d028      	beq.n	80173f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173a0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80173a2:	3b01      	subs	r3, #1
 80173a4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80173a6:	fb00 5003 	mla	r0, r0, r3, r5
 80173aa:	1400      	asrs	r0, r0, #16
 80173ac:	f53f af21 	bmi.w	80171f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80173b0:	3901      	subs	r1, #1
 80173b2:	4288      	cmp	r0, r1
 80173b4:	f6bf af1d 	bge.w	80171f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80173b8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80173ba:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80173bc:	fb01 0303 	mla	r3, r1, r3, r0
 80173c0:	141b      	asrs	r3, r3, #16
 80173c2:	f53f af16 	bmi.w	80171f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80173c6:	3a01      	subs	r2, #1
 80173c8:	4293      	cmp	r3, r2
 80173ca:	f6bf af12 	bge.w	80171f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80173ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80173d4:	1cdf      	adds	r7, r3, #3
 80173d6:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80173da:	f1b9 0f00 	cmp.w	r9, #0
 80173de:	dc73      	bgt.n	80174c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80173e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80173e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80173e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173ec:	441a      	add	r2, r3
 80173ee:	920a      	str	r2, [sp, #40]	@ 0x28
 80173f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	f340 8129 	ble.w	801764a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80173f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80173fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80173fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017402:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017406:	eef0 6a62 	vmov.f32	s13, s5
 801740a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801740e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017412:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017416:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801741a:	eef0 6a43 	vmov.f32	s13, s6
 801741e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017422:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8017426:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801742a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801742e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017432:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017436:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801743a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801743e:	ee12 2a90 	vmov	r2, s5
 8017442:	eef0 2a47 	vmov.f32	s5, s14
 8017446:	fb92 f3f3 	sdiv	r3, r2, r3
 801744a:	ee13 2a10 	vmov	r2, s6
 801744e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8017450:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017452:	eeb0 3a67 	vmov.f32	s6, s15
 8017456:	fb92 f3f3 	sdiv	r3, r2, r3
 801745a:	9320      	str	r3, [sp, #128]	@ 0x80
 801745c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801745e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017460:	3b01      	subs	r3, #1
 8017462:	930d      	str	r3, [sp, #52]	@ 0x34
 8017464:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017466:	bf08      	it	eq
 8017468:	4613      	moveq	r3, r2
 801746a:	9309      	str	r3, [sp, #36]	@ 0x24
 801746c:	e696      	b.n	801719c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801746e:	b149      	cbz	r1, 8017484 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8017470:	5caa      	ldrb	r2, [r5, r2]
 8017472:	4670      	mov	r0, lr
 8017474:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017478:	4422      	add	r2, r4
 801747a:	4677      	mov	r7, lr
 801747c:	e6fb      	b.n	8017276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801747e:	4670      	mov	r0, lr
 8017480:	4672      	mov	r2, lr
 8017482:	e6f8      	b.n	8017276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8017484:	4670      	mov	r0, lr
 8017486:	4672      	mov	r2, lr
 8017488:	e7f7      	b.n	801747a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801748a:	f110 0c01 	adds.w	ip, r0, #1
 801748e:	f53f af6a 	bmi.w	8017366 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017492:	4562      	cmp	r2, ip
 8017494:	f6ff af67 	blt.w	8017366 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017498:	f115 0c01 	adds.w	ip, r5, #1
 801749c:	f53f af63 	bmi.w	8017366 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80174a0:	4567      	cmp	r7, ip
 80174a2:	f6ff af60 	blt.w	8017366 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80174a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174a8:	b23f      	sxth	r7, r7
 80174aa:	b212      	sxth	r2, r2
 80174ac:	9002      	str	r0, [sp, #8]
 80174ae:	9701      	str	r7, [sp, #4]
 80174b0:	9200      	str	r2, [sp, #0]
 80174b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80174b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80174b6:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80174ba:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80174be:	4623      	mov	r3, r4
 80174c0:	4631      	mov	r1, r6
 80174c2:	f7ff fd69 	bl	8016f98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80174c6:	e74e      	b.n	8017366 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80174c8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80174ca:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80174cc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80174d0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80174d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80174d4:	1400      	asrs	r0, r0, #16
 80174d6:	142d      	asrs	r5, r5, #16
 80174d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80174da:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80174de:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80174e2:	fb02 5000 	mla	r0, r2, r0, r5
 80174e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80174e8:	f815 e000 	ldrb.w	lr, [r5, r0]
 80174ec:	eb05 0c00 	add.w	ip, r5, r0
 80174f0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80174f4:	eb04 060e 	add.w	r6, r4, lr
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f000 8097 	beq.w	801762c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80174fe:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8017502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017506:	4425      	add	r5, r4
 8017508:	2900      	cmp	r1, #0
 801750a:	f000 8098 	beq.w	801763e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801750e:	eb0c 0002 	add.w	r0, ip, r2
 8017512:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017516:	7840      	ldrb	r0, [r0, #1]
 8017518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801751c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017520:	4422      	add	r2, r4
 8017522:	4420      	add	r0, r4
 8017524:	b29b      	uxth	r3, r3
 8017526:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801752a:	b289      	uxth	r1, r1
 801752c:	f895 e000 	ldrb.w	lr, [r5]
 8017530:	3703      	adds	r7, #3
 8017532:	f109 39ff 	add.w	r9, r9, #4294967295
 8017536:	fb03 f801 	mul.w	r8, r3, r1
 801753a:	011b      	lsls	r3, r3, #4
 801753c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8017540:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8017544:	eba3 0308 	sub.w	r3, r3, r8
 8017548:	b289      	uxth	r1, r1
 801754a:	b29b      	uxth	r3, r3
 801754c:	ebac 0c01 	sub.w	ip, ip, r1
 8017550:	fb03 fe0e 	mul.w	lr, r3, lr
 8017554:	fa1f fc8c 	uxth.w	ip, ip
 8017558:	930f      	str	r3, [sp, #60]	@ 0x3c
 801755a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801755c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017560:	f892 b000 	ldrb.w	fp, [r2]
 8017564:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017568:	f890 b000 	ldrb.w	fp, [r0]
 801756c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017570:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8017574:	fb1b fb03 	smulbb	fp, fp, r3
 8017578:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801757c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801757e:	fb0e be0a 	mla	lr, lr, sl, fp
 8017582:	fa1f fe8e 	uxth.w	lr, lr
 8017586:	f10e 0b01 	add.w	fp, lr, #1
 801758a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801758e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017592:	f807 ec06 	strb.w	lr, [r7, #-6]
 8017596:	f895 e001 	ldrb.w	lr, [r5, #1]
 801759a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801759e:	fb03 fe0e 	mul.w	lr, r3, lr
 80175a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80175a4:	fb0c ee0b 	mla	lr, ip, fp, lr
 80175a8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80175ac:	fb01 ee0b 	mla	lr, r1, fp, lr
 80175b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80175b4:	fb08 ee0b 	mla	lr, r8, fp, lr
 80175b8:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80175bc:	fb1b fb03 	smulbb	fp, fp, r3
 80175c0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80175c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175c6:	fb0e be0a 	mla	lr, lr, sl, fp
 80175ca:	fa1f fe8e 	uxth.w	lr, lr
 80175ce:	f10e 0b01 	add.w	fp, lr, #1
 80175d2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80175d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80175da:	f807 ec05 	strb.w	lr, [r7, #-5]
 80175de:	78ad      	ldrb	r5, [r5, #2]
 80175e0:	78b6      	ldrb	r6, [r6, #2]
 80175e2:	436b      	muls	r3, r5
 80175e4:	7895      	ldrb	r5, [r2, #2]
 80175e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80175e8:	fb0c 3306 	mla	r3, ip, r6, r3
 80175ec:	fb01 3305 	mla	r3, r1, r5, r3
 80175f0:	7885      	ldrb	r5, [r0, #2]
 80175f2:	fb08 3805 	mla	r8, r8, r5, r3
 80175f6:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80175fa:	fb13 f302 	smulbb	r3, r3, r2
 80175fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8017602:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8017604:	fb08 380a 	mla	r8, r8, sl, r3
 8017608:	fa1f f888 	uxth.w	r8, r8
 801760c:	f108 0301 	add.w	r3, r8, #1
 8017610:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8017614:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017616:	4413      	add	r3, r2
 8017618:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801761a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801761e:	931d      	str	r3, [sp, #116]	@ 0x74
 8017620:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017622:	f807 8c04 	strb.w	r8, [r7, #-4]
 8017626:	4413      	add	r3, r2
 8017628:	931e      	str	r3, [sp, #120]	@ 0x78
 801762a:	e6d6      	b.n	80173da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801762c:	b151      	cbz	r1, 8017644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801762e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017632:	4630      	mov	r0, r6
 8017634:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017638:	4422      	add	r2, r4
 801763a:	4635      	mov	r5, r6
 801763c:	e772      	b.n	8017524 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801763e:	4630      	mov	r0, r6
 8017640:	4632      	mov	r2, r6
 8017642:	e76f      	b.n	8017524 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017644:	4630      	mov	r0, r6
 8017646:	4632      	mov	r2, r6
 8017648:	e7f7      	b.n	801763a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801764a:	b013      	add	sp, #76	@ 0x4c
 801764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017650 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017650:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017654:	784c      	ldrb	r4, [r1, #1]
 8017656:	f891 a002 	ldrb.w	sl, [r1, #2]
 801765a:	0224      	lsls	r4, r4, #8
 801765c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8017660:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8017664:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017668:	f891 a000 	ldrb.w	sl, [r1]
 801766c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8017670:	ea44 040a 	orr.w	r4, r4, sl
 8017674:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8017678:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801767c:	9401      	str	r4, [sp, #4]
 801767e:	fb05 c70e 	mla	r7, r5, lr, ip
 8017682:	2d00      	cmp	r5, #0
 8017684:	eb02 0807 	add.w	r8, r2, r7
 8017688:	db72      	blt.n	8017770 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801768a:	45a9      	cmp	r9, r5
 801768c:	dd70      	ble.n	8017770 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801768e:	f1bc 0f00 	cmp.w	ip, #0
 8017692:	db6b      	blt.n	801776c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8017694:	45e6      	cmp	lr, ip
 8017696:	dd69      	ble.n	801776c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8017698:	5dd7      	ldrb	r7, [r2, r7]
 801769a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801769e:	441f      	add	r7, r3
 80176a0:	f11c 0201 	adds.w	r2, ip, #1
 80176a4:	d467      	bmi.n	8017776 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80176a6:	4596      	cmp	lr, r2
 80176a8:	dd65      	ble.n	8017776 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80176aa:	2800      	cmp	r0, #0
 80176ac:	d063      	beq.n	8017776 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80176ae:	f898 4001 	ldrb.w	r4, [r8, #1]
 80176b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80176b6:	441c      	add	r4, r3
 80176b8:	3501      	adds	r5, #1
 80176ba:	d460      	bmi.n	801777e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80176bc:	45a9      	cmp	r9, r5
 80176be:	dd5e      	ble.n	801777e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80176c0:	2e00      	cmp	r6, #0
 80176c2:	d05c      	beq.n	801777e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80176c4:	f1bc 0f00 	cmp.w	ip, #0
 80176c8:	db57      	blt.n	801777a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80176ca:	45e6      	cmp	lr, ip
 80176cc:	dd55      	ble.n	801777a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80176ce:	f818 500e 	ldrb.w	r5, [r8, lr]
 80176d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176d6:	441d      	add	r5, r3
 80176d8:	f11c 0201 	adds.w	r2, ip, #1
 80176dc:	d452      	bmi.n	8017784 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80176de:	4596      	cmp	lr, r2
 80176e0:	dd50      	ble.n	8017784 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	d04e      	beq.n	8017784 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80176e6:	44c6      	add	lr, r8
 80176e8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80176ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176f0:	4413      	add	r3, r2
 80176f2:	b280      	uxth	r0, r0
 80176f4:	f897 8000 	ldrb.w	r8, [r7]
 80176f8:	b2b2      	uxth	r2, r6
 80176fa:	fb00 f602 	mul.w	r6, r0, r2
 80176fe:	0100      	lsls	r0, r0, #4
 8017700:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8017704:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8017708:	1b80      	subs	r0, r0, r6
 801770a:	fa1f fc82 	uxth.w	ip, r2
 801770e:	b282      	uxth	r2, r0
 8017710:	7820      	ldrb	r0, [r4, #0]
 8017712:	ebae 0e0c 	sub.w	lr, lr, ip
 8017716:	4350      	muls	r0, r2
 8017718:	fa1f fe8e 	uxth.w	lr, lr
 801771c:	fb0e 0808 	mla	r8, lr, r8, r0
 8017720:	7828      	ldrb	r0, [r5, #0]
 8017722:	fb0c 8800 	mla	r8, ip, r0, r8
 8017726:	7818      	ldrb	r0, [r3, #0]
 8017728:	fb06 8000 	mla	r0, r6, r0, r8
 801772c:	1200      	asrs	r0, r0, #8
 801772e:	7008      	strb	r0, [r1, #0]
 8017730:	7860      	ldrb	r0, [r4, #1]
 8017732:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017736:	4350      	muls	r0, r2
 8017738:	fb0e 0808 	mla	r8, lr, r8, r0
 801773c:	7868      	ldrb	r0, [r5, #1]
 801773e:	fb0c 8800 	mla	r8, ip, r0, r8
 8017742:	7858      	ldrb	r0, [r3, #1]
 8017744:	fb06 8000 	mla	r0, r6, r0, r8
 8017748:	1200      	asrs	r0, r0, #8
 801774a:	7048      	strb	r0, [r1, #1]
 801774c:	78a0      	ldrb	r0, [r4, #2]
 801774e:	78bf      	ldrb	r7, [r7, #2]
 8017750:	4350      	muls	r0, r2
 8017752:	78aa      	ldrb	r2, [r5, #2]
 8017754:	fb0e 0007 	mla	r0, lr, r7, r0
 8017758:	fb0c 0c02 	mla	ip, ip, r2, r0
 801775c:	789a      	ldrb	r2, [r3, #2]
 801775e:	fb06 c202 	mla	r2, r6, r2, ip
 8017762:	1212      	asrs	r2, r2, #8
 8017764:	708a      	strb	r2, [r1, #2]
 8017766:	b002      	add	sp, #8
 8017768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801776c:	af01      	add	r7, sp, #4
 801776e:	e797      	b.n	80176a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8017770:	ac01      	add	r4, sp, #4
 8017772:	4627      	mov	r7, r4
 8017774:	e7a0      	b.n	80176b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017776:	ac01      	add	r4, sp, #4
 8017778:	e79e      	b.n	80176b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801777a:	ad01      	add	r5, sp, #4
 801777c:	e7ac      	b.n	80176d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801777e:	ab01      	add	r3, sp, #4
 8017780:	461d      	mov	r5, r3
 8017782:	e7b6      	b.n	80176f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8017784:	ab01      	add	r3, sp, #4
 8017786:	e7b4      	b.n	80176f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08017788 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801778c:	b08d      	sub	sp, #52	@ 0x34
 801778e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017792:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8017796:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017798:	900b      	str	r0, [sp, #44]	@ 0x2c
 801779a:	9306      	str	r3, [sp, #24]
 801779c:	6850      	ldr	r0, [r2, #4]
 801779e:	6812      	ldr	r2, [r2, #0]
 80177a0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80177a2:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 80177a6:	fb00 1303 	mla	r3, r0, r3, r1
 80177aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80177ae:	18d3      	adds	r3, r2, r3
 80177b0:	9307      	str	r3, [sp, #28]
 80177b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	9308      	str	r3, [sp, #32]
 80177b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80177ba:	685d      	ldr	r5, [r3, #4]
 80177bc:	3504      	adds	r5, #4
 80177be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	dc03      	bgt.n	80177cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80177c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	f340 81e6 	ble.w	8017b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80177cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80177ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80177d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80177d6:	1e48      	subs	r0, r1, #1
 80177d8:	1e56      	subs	r6, r2, #1
 80177da:	9b06      	ldr	r3, [sp, #24]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	f340 80bd 	ble.w	801795c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80177e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80177e4:	1427      	asrs	r7, r4, #16
 80177e6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80177ea:	d406      	bmi.n	80177fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80177ec:	4287      	cmp	r7, r0
 80177ee:	da04      	bge.n	80177fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	db02      	blt.n	80177fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80177f4:	42b3      	cmp	r3, r6
 80177f6:	f2c0 80b2 	blt.w	801795e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80177fa:	3701      	adds	r7, #1
 80177fc:	f100 80a1 	bmi.w	8017942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017800:	42b9      	cmp	r1, r7
 8017802:	f2c0 809e 	blt.w	8017942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017806:	3301      	adds	r3, #1
 8017808:	f100 809b 	bmi.w	8017942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801780c:	429a      	cmp	r2, r3
 801780e:	f2c0 8098 	blt.w	8017942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017812:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8017816:	f1bb 0f00 	cmp.w	fp, #0
 801781a:	f340 80bf 	ble.w	801799c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801781e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017820:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8017822:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017824:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017828:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801782c:	1420      	asrs	r0, r4, #16
 801782e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8017830:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017834:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017838:	6892      	ldr	r2, [r2, #8]
 801783a:	f100 8103 	bmi.w	8017a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801783e:	f102 3eff 	add.w	lr, r2, #4294967295
 8017842:	4570      	cmp	r0, lr
 8017844:	f280 80fe 	bge.w	8017a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017848:	2f00      	cmp	r7, #0
 801784a:	f2c0 80fb 	blt.w	8017a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801784e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017852:	4577      	cmp	r7, lr
 8017854:	f280 80f6 	bge.w	8017a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017858:	b212      	sxth	r2, r2
 801785a:	fb07 0002 	mla	r0, r7, r2, r0
 801785e:	9f08      	ldr	r7, [sp, #32]
 8017860:	f817 8000 	ldrb.w	r8, [r7, r0]
 8017864:	eb07 0e00 	add.w	lr, r7, r0
 8017868:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801786c:	eb05 0c08 	add.w	ip, r5, r8
 8017870:	2b00      	cmp	r3, #0
 8017872:	f000 80d8 	beq.w	8017a26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017876:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801787a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801787e:	442f      	add	r7, r5
 8017880:	2900      	cmp	r1, #0
 8017882:	f000 80d9 	beq.w	8017a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017886:	eb0e 0002 	add.w	r0, lr, r2
 801788a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801788e:	7840      	ldrb	r0, [r0, #1]
 8017890:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017898:	442a      	add	r2, r5
 801789a:	4428      	add	r0, r5
 801789c:	b29b      	uxth	r3, r3
 801789e:	f815 a008 	ldrb.w	sl, [r5, r8]
 80178a2:	b289      	uxth	r1, r1
 80178a4:	f897 8000 	ldrb.w	r8, [r7]
 80178a8:	fb03 f901 	mul.w	r9, r3, r1
 80178ac:	011b      	lsls	r3, r3, #4
 80178ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80178b2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80178b6:	eba3 0309 	sub.w	r3, r3, r9
 80178ba:	b289      	uxth	r1, r1
 80178bc:	b29b      	uxth	r3, r3
 80178be:	ebae 0e01 	sub.w	lr, lr, r1
 80178c2:	fb03 f808 	mul.w	r8, r3, r8
 80178c6:	fa1f fe8e 	uxth.w	lr, lr
 80178ca:	fb0e 880a 	mla	r8, lr, sl, r8
 80178ce:	f892 a000 	ldrb.w	sl, [r2]
 80178d2:	fb01 880a 	mla	r8, r1, sl, r8
 80178d6:	f890 a000 	ldrb.w	sl, [r0]
 80178da:	fb09 880a 	mla	r8, r9, sl, r8
 80178de:	ea4f 2828 	mov.w	r8, r8, asr #8
 80178e2:	f886 8000 	strb.w	r8, [r6]
 80178e6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80178ea:	f89c a001 	ldrb.w	sl, [ip, #1]
 80178ee:	fb03 f808 	mul.w	r8, r3, r8
 80178f2:	fb0e 880a 	mla	r8, lr, sl, r8
 80178f6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80178fa:	fb01 880a 	mla	r8, r1, sl, r8
 80178fe:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017902:	fb09 880a 	mla	r8, r9, sl, r8
 8017906:	ea4f 2828 	mov.w	r8, r8, asr #8
 801790a:	f886 8001 	strb.w	r8, [r6, #1]
 801790e:	78bf      	ldrb	r7, [r7, #2]
 8017910:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017914:	437b      	muls	r3, r7
 8017916:	7892      	ldrb	r2, [r2, #2]
 8017918:	fb0e 330c 	mla	r3, lr, ip, r3
 801791c:	fb01 3102 	mla	r1, r1, r2, r3
 8017920:	7882      	ldrb	r2, [r0, #2]
 8017922:	fb09 1902 	mla	r9, r9, r2, r1
 8017926:	ea4f 2929 	mov.w	r9, r9, asr #8
 801792a:	f886 9002 	strb.w	r9, [r6, #2]
 801792e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017930:	3603      	adds	r6, #3
 8017932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017938:	441c      	add	r4, r3
 801793a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801793c:	4413      	add	r3, r2
 801793e:	9318      	str	r3, [sp, #96]	@ 0x60
 8017940:	e769      	b.n	8017816 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017944:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017946:	441c      	add	r4, r3
 8017948:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801794a:	443b      	add	r3, r7
 801794c:	9318      	str	r3, [sp, #96]	@ 0x60
 801794e:	9b06      	ldr	r3, [sp, #24]
 8017950:	3b01      	subs	r3, #1
 8017952:	9306      	str	r3, [sp, #24]
 8017954:	9b07      	ldr	r3, [sp, #28]
 8017956:	3303      	adds	r3, #3
 8017958:	9307      	str	r3, [sp, #28]
 801795a:	e73e      	b.n	80177da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801795c:	d026      	beq.n	80179ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801795e:	9b06      	ldr	r3, [sp, #24]
 8017960:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8017962:	3b01      	subs	r3, #1
 8017964:	fb00 4003 	mla	r0, r0, r3, r4
 8017968:	1400      	asrs	r0, r0, #16
 801796a:	f53f af52 	bmi.w	8017812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801796e:	3901      	subs	r1, #1
 8017970:	4288      	cmp	r0, r1
 8017972:	f6bf af4e 	bge.w	8017812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017976:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017978:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801797a:	fb01 0303 	mla	r3, r1, r3, r0
 801797e:	141b      	asrs	r3, r3, #16
 8017980:	f53f af47 	bmi.w	8017812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017984:	3a01      	subs	r2, #1
 8017986:	4293      	cmp	r3, r2
 8017988:	f6bf af43 	bge.w	8017812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801798c:	9b07      	ldr	r3, [sp, #28]
 801798e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8017992:	f103 0803 	add.w	r8, r3, #3
 8017996:	f1ba 0f00 	cmp.w	sl, #0
 801799a:	dc71      	bgt.n	8017a80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801799c:	9b06      	ldr	r3, [sp, #24]
 801799e:	9a07      	ldr	r2, [sp, #28]
 80179a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80179a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80179a8:	441a      	add	r2, r3
 80179aa:	9207      	str	r2, [sp, #28]
 80179ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	f340 80f2 	ble.w	8017b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80179b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80179b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80179ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80179be:	eeb0 6a62 	vmov.f32	s12, s5
 80179c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80179c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80179ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80179ce:	ee16 4a10 	vmov	r4, s12
 80179d2:	eeb0 6a43 	vmov.f32	s12, s6
 80179d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80179da:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 80179de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80179e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80179e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80179ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80179ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80179f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80179f6:	ee12 2a90 	vmov	r2, s5
 80179fa:	eef0 2a47 	vmov.f32	s5, s14
 80179fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017a02:	ee13 2a10 	vmov	r2, s6
 8017a06:	9319      	str	r3, [sp, #100]	@ 0x64
 8017a08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017a0a:	eeb0 3a67 	vmov.f32	s6, s15
 8017a0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017a18:	3b01      	subs	r3, #1
 8017a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017a1e:	bf08      	it	eq
 8017a20:	4613      	moveq	r3, r2
 8017a22:	9306      	str	r3, [sp, #24]
 8017a24:	e6cb      	b.n	80177be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017a26:	b151      	cbz	r1, 8017a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8017a28:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017a2c:	4660      	mov	r0, ip
 8017a2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017a32:	442a      	add	r2, r5
 8017a34:	4667      	mov	r7, ip
 8017a36:	e731      	b.n	801789c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017a38:	4660      	mov	r0, ip
 8017a3a:	4662      	mov	r2, ip
 8017a3c:	e72e      	b.n	801789c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017a3e:	4660      	mov	r0, ip
 8017a40:	4662      	mov	r2, ip
 8017a42:	e7f7      	b.n	8017a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8017a44:	f110 0e01 	adds.w	lr, r0, #1
 8017a48:	f53f af71 	bmi.w	801792e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017a4c:	4572      	cmp	r2, lr
 8017a4e:	f6ff af6e 	blt.w	801792e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017a52:	f117 0e01 	adds.w	lr, r7, #1
 8017a56:	f53f af6a 	bmi.w	801792e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017a5a:	45f4      	cmp	ip, lr
 8017a5c:	f6ff af67 	blt.w	801792e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017a60:	b212      	sxth	r2, r2
 8017a62:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017a66:	fa0f f38c 	sxth.w	r3, ip
 8017a6a:	9200      	str	r2, [sp, #0]
 8017a6c:	4631      	mov	r1, r6
 8017a6e:	9a08      	ldr	r2, [sp, #32]
 8017a70:	9301      	str	r3, [sp, #4]
 8017a72:	462b      	mov	r3, r5
 8017a74:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8017a78:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8017a7a:	f7ff fde9 	bl	8017650 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8017a7e:	e756      	b.n	801792e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017a80:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017a82:	1426      	asrs	r6, r4, #16
 8017a84:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8017a86:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017a8a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017a8e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8017a90:	1400      	asrs	r0, r0, #16
 8017a92:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017a96:	fb02 6000 	mla	r0, r2, r0, r6
 8017a9a:	9e08      	ldr	r6, [sp, #32]
 8017a9c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8017aa0:	eb06 0c00 	add.w	ip, r6, r0
 8017aa4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017aa8:	eb05 070e 	add.w	r7, r5, lr
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d064      	beq.n	8017b7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8017ab0:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8017ab4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017ab8:	442e      	add	r6, r5
 8017aba:	2900      	cmp	r1, #0
 8017abc:	d066      	beq.n	8017b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8017abe:	eb0c 0002 	add.w	r0, ip, r2
 8017ac2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017ac6:	7840      	ldrb	r0, [r0, #1]
 8017ac8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017acc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017ad0:	442a      	add	r2, r5
 8017ad2:	4428      	add	r0, r5
 8017ad4:	b29b      	uxth	r3, r3
 8017ad6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8017ada:	b289      	uxth	r1, r1
 8017adc:	f896 e000 	ldrb.w	lr, [r6]
 8017ae0:	f108 0803 	add.w	r8, r8, #3
 8017ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ae8:	fb03 f901 	mul.w	r9, r3, r1
 8017aec:	011b      	lsls	r3, r3, #4
 8017aee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017af2:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8017af6:	eba3 0309 	sub.w	r3, r3, r9
 8017afa:	b289      	uxth	r1, r1
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	ebac 0c01 	sub.w	ip, ip, r1
 8017b02:	fb03 fe0e 	mul.w	lr, r3, lr
 8017b06:	fa1f fc8c 	uxth.w	ip, ip
 8017b0a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017b0e:	f892 b000 	ldrb.w	fp, [r2]
 8017b12:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017b16:	f890 b000 	ldrb.w	fp, [r0]
 8017b1a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017b1e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017b22:	f808 ec06 	strb.w	lr, [r8, #-6]
 8017b26:	f896 e001 	ldrb.w	lr, [r6, #1]
 8017b2a:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017b2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8017b32:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017b36:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017b3a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017b3e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017b42:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017b46:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017b4a:	f808 ec05 	strb.w	lr, [r8, #-5]
 8017b4e:	78b6      	ldrb	r6, [r6, #2]
 8017b50:	78bf      	ldrb	r7, [r7, #2]
 8017b52:	4373      	muls	r3, r6
 8017b54:	7896      	ldrb	r6, [r2, #2]
 8017b56:	7882      	ldrb	r2, [r0, #2]
 8017b58:	fb0c 3307 	mla	r3, ip, r7, r3
 8017b5c:	fb01 3306 	mla	r3, r1, r6, r3
 8017b60:	fb09 3902 	mla	r9, r9, r2, r3
 8017b64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017b66:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017b68:	441c      	add	r4, r3
 8017b6a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017b6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b70:	4413      	add	r3, r2
 8017b72:	f808 9c04 	strb.w	r9, [r8, #-4]
 8017b76:	9318      	str	r3, [sp, #96]	@ 0x60
 8017b78:	e70d      	b.n	8017996 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8017b7a:	b151      	cbz	r1, 8017b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8017b7c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b80:	4638      	mov	r0, r7
 8017b82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b86:	442a      	add	r2, r5
 8017b88:	463e      	mov	r6, r7
 8017b8a:	e7a3      	b.n	8017ad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8017b8c:	4638      	mov	r0, r7
 8017b8e:	463a      	mov	r2, r7
 8017b90:	e7a0      	b.n	8017ad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8017b92:	4638      	mov	r0, r7
 8017b94:	463a      	mov	r2, r7
 8017b96:	e7f7      	b.n	8017b88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8017b98:	b00d      	add	sp, #52	@ 0x34
 8017b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8017b9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8017ba6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017baa:	2d00      	cmp	r5, #0
 8017bac:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8017bb0:	fb05 700c 	mla	r0, r5, ip, r7
 8017bb4:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8017bb8:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8017bbc:	eb02 0800 	add.w	r8, r2, r0
 8017bc0:	f2c0 8118 	blt.w	8017df4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8017bc4:	45a9      	cmp	r9, r5
 8017bc6:	f340 8115 	ble.w	8017df4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8017bca:	2f00      	cmp	r7, #0
 8017bcc:	f2c0 8110 	blt.w	8017df0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8017bd0:	45bc      	cmp	ip, r7
 8017bd2:	f340 810d 	ble.w	8017df0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8017bd6:	5c12      	ldrb	r2, [r2, r0]
 8017bd8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017bdc:	1c7a      	adds	r2, r7, #1
 8017bde:	f100 810c 	bmi.w	8017dfa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8017be2:	4594      	cmp	ip, r2
 8017be4:	f340 8109 	ble.w	8017dfa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8017be8:	2c00      	cmp	r4, #0
 8017bea:	f000 8108 	beq.w	8017dfe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8017bee:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017bf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017bf6:	3501      	adds	r5, #1
 8017bf8:	f100 8105 	bmi.w	8017e06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8017bfc:	45a9      	cmp	r9, r5
 8017bfe:	f340 8102 	ble.w	8017e06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8017c02:	f1be 0f00 	cmp.w	lr, #0
 8017c06:	f000 8101 	beq.w	8017e0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8017c0a:	2f00      	cmp	r7, #0
 8017c0c:	f2c0 80f9 	blt.w	8017e02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8017c10:	45bc      	cmp	ip, r7
 8017c12:	f340 80f6 	ble.w	8017e02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8017c16:	f818 200c 	ldrb.w	r2, [r8, ip]
 8017c1a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017c1e:	3701      	adds	r7, #1
 8017c20:	f100 80f7 	bmi.w	8017e12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8017c24:	45bc      	cmp	ip, r7
 8017c26:	f340 80f4 	ble.w	8017e12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8017c2a:	2c00      	cmp	r4, #0
 8017c2c:	f000 80f3 	beq.w	8017e16 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8017c30:	44c4      	add	ip, r8
 8017c32:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8017c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017c3a:	fa1f fc84 	uxth.w	ip, r4
 8017c3e:	fa1f f48e 	uxth.w	r4, lr
 8017c42:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8017c46:	fb04 fe0c 	mul.w	lr, r4, ip
 8017c4a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8017c4e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017c52:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8017c56:	ebac 070e 	sub.w	r7, ip, lr
 8017c5a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8017c5e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017c62:	b2a4      	uxth	r4, r4
 8017c64:	b2bf      	uxth	r7, r7
 8017c66:	1b1b      	subs	r3, r3, r4
 8017c68:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8017c6c:	fb07 fc0a 	mul.w	ip, r7, sl
 8017c70:	b29b      	uxth	r3, r3
 8017c72:	fb03 cc0b 	mla	ip, r3, fp, ip
 8017c76:	9300      	str	r3, [sp, #0]
 8017c78:	fb04 cc09 	mla	ip, r4, r9, ip
 8017c7c:	fb0e cc08 	mla	ip, lr, r8, ip
 8017c80:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017c84:	9301      	str	r3, [sp, #4]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	f000 80af 	beq.w	8017dea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8017c8c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8017c90:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8017c94:	fb0b fc0c 	mul.w	ip, fp, ip
 8017c98:	fb0b f606 	mul.w	r6, fp, r6
 8017c9c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8017ca0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8017ca4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8017ca8:	44dc      	add	ip, fp
 8017caa:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8017cae:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8017cb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017cb6:	fb0a fb0b 	mul.w	fp, sl, fp
 8017cba:	fb0a fa00 	mul.w	sl, sl, r0
 8017cbe:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8017cc2:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8017cc6:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8017cca:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8017cce:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017cd2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8017cd6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8017cda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8017cde:	0a36      	lsrs	r6, r6, #8
 8017ce0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017ce4:	44dc      	add	ip, fp
 8017ce6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8017cea:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8017cee:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8017cf2:	fb09 fb0b 	mul.w	fp, r9, fp
 8017cf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017cfa:	fb09 f905 	mul.w	r9, r9, r5
 8017cfe:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8017d02:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8017d06:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8017d0a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8017d0e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8017d12:	fb0c fc07 	mul.w	ip, ip, r7
 8017d16:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8017d1a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8017d1e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8017d22:	4458      	add	r0, fp
 8017d24:	fb08 f505 	mul.w	r5, r8, r5
 8017d28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017d2c:	fb08 f802 	mul.w	r8, r8, r2
 8017d30:	0a00      	lsrs	r0, r0, #8
 8017d32:	0a2a      	lsrs	r2, r5, #8
 8017d34:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8017d38:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8017d3c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8017d40:	4415      	add	r5, r2
 8017d42:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8017d46:	0a2d      	lsrs	r5, r5, #8
 8017d48:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017d4c:	9a00      	ldr	r2, [sp, #0]
 8017d4e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8017d52:	fb03 cc02 	mla	ip, r3, r2, ip
 8017d56:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017d5a:	9b01      	ldr	r3, [sp, #4]
 8017d5c:	fb05 c50e 	mla	r5, r5, lr, ip
 8017d60:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8017d64:	fb00 5004 	mla	r0, r0, r4, r5
 8017d68:	0a00      	lsrs	r0, r0, #8
 8017d6a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8017d6e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8017d72:	4378      	muls	r0, r7
 8017d74:	fb02 0006 	mla	r0, r2, r6, r0
 8017d78:	fb0e 0e08 	mla	lr, lr, r8, r0
 8017d7c:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8017d80:	fb04 e000 	mla	r0, r4, r0, lr
 8017d84:	0a00      	lsrs	r0, r0, #8
 8017d86:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8017d8a:	4328      	orrs	r0, r5
 8017d8c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8017d90:	b2ad      	uxth	r5, r5
 8017d92:	b2c4      	uxtb	r4, r0
 8017d94:	436b      	muls	r3, r5
 8017d96:	fb14 f405 	smulbb	r4, r4, r5
 8017d9a:	1c5a      	adds	r2, r3, #1
 8017d9c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017da0:	780b      	ldrb	r3, [r1, #0]
 8017da2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8017da6:	b2d2      	uxtb	r2, r2
 8017da8:	fb03 4302 	mla	r3, r3, r2, r4
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	1c5c      	adds	r4, r3, #1
 8017db0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8017db4:	784c      	ldrb	r4, [r1, #1]
 8017db6:	fb14 f402 	smulbb	r4, r4, r2
 8017dba:	121b      	asrs	r3, r3, #8
 8017dbc:	700b      	strb	r3, [r1, #0]
 8017dbe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8017dc2:	fb03 4305 	mla	r3, r3, r5, r4
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	1c5c      	adds	r4, r3, #1
 8017dca:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8017dce:	0c04      	lsrs	r4, r0, #16
 8017dd0:	7888      	ldrb	r0, [r1, #2]
 8017dd2:	121b      	asrs	r3, r3, #8
 8017dd4:	fb10 f002 	smulbb	r0, r0, r2
 8017dd8:	704b      	strb	r3, [r1, #1]
 8017dda:	fb04 0005 	mla	r0, r4, r5, r0
 8017dde:	b280      	uxth	r0, r0
 8017de0:	1c43      	adds	r3, r0, #1
 8017de2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017de6:	1200      	asrs	r0, r0, #8
 8017de8:	7088      	strb	r0, [r1, #2]
 8017dea:	b003      	add	sp, #12
 8017dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df0:	2600      	movs	r6, #0
 8017df2:	e6f3      	b.n	8017bdc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8017df4:	2000      	movs	r0, #0
 8017df6:	4606      	mov	r6, r0
 8017df8:	e6fd      	b.n	8017bf6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	e6fb      	b.n	8017bf6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8017dfe:	4620      	mov	r0, r4
 8017e00:	e6f9      	b.n	8017bf6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8017e02:	2500      	movs	r5, #0
 8017e04:	e70b      	b.n	8017c1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8017e06:	2200      	movs	r2, #0
 8017e08:	4615      	mov	r5, r2
 8017e0a:	e716      	b.n	8017c3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8017e0c:	4672      	mov	r2, lr
 8017e0e:	4675      	mov	r5, lr
 8017e10:	e713      	b.n	8017c3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8017e12:	2200      	movs	r2, #0
 8017e14:	e711      	b.n	8017c3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8017e16:	4622      	mov	r2, r4
 8017e18:	e70f      	b.n	8017c3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08017e1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e1e:	b09f      	sub	sp, #124	@ 0x7c
 8017e20:	921b      	str	r2, [sp, #108]	@ 0x6c
 8017e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e24:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8017e26:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8017e2a:	901d      	str	r0, [sp, #116]	@ 0x74
 8017e2c:	931c      	str	r3, [sp, #112]	@ 0x70
 8017e2e:	6850      	ldr	r0, [r2, #4]
 8017e30:	9119      	str	r1, [sp, #100]	@ 0x64
 8017e32:	6812      	ldr	r2, [r2, #0]
 8017e34:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017e36:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8017e3a:	fb00 1303 	mla	r3, r0, r3, r1
 8017e3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017e42:	18d3      	adds	r3, r2, r3
 8017e44:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e46:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	9312      	str	r3, [sp, #72]	@ 0x48
 8017e4c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8017e4e:	685e      	ldr	r6, [r3, #4]
 8017e50:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8017e54:	3604      	adds	r6, #4
 8017e56:	930d      	str	r3, [sp, #52]	@ 0x34
 8017e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	dc03      	bgt.n	8017e66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017e5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f340 8378 	ble.w	8018556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8017e66:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8017e68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017e6c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017e70:	1e48      	subs	r0, r1, #1
 8017e72:	1e57      	subs	r7, r2, #1
 8017e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	f340 818c 	ble.w	8018194 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017e7c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8017e7e:	142b      	asrs	r3, r5, #16
 8017e80:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8017e84:	d406      	bmi.n	8017e94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017e86:	4584      	cmp	ip, r0
 8017e88:	da04      	bge.n	8017e94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	db02      	blt.n	8017e94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017e8e:	42bb      	cmp	r3, r7
 8017e90:	f2c0 8181 	blt.w	8018196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8017e94:	f11c 0c01 	adds.w	ip, ip, #1
 8017e98:	f100 816f 	bmi.w	801817a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017e9c:	4561      	cmp	r1, ip
 8017e9e:	f2c0 816c 	blt.w	801817a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	f100 8169 	bmi.w	801817a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	f2c0 8166 	blt.w	801817a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017eb0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8017eb4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	f340 818c 	ble.w	80181d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8017ebc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017ebe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017ec2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017ec6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017eca:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8017ecc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8017ed0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017ed2:	141b      	asrs	r3, r3, #16
 8017ed4:	f100 81d0 	bmi.w	8018278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017ed8:	f100 38ff 	add.w	r8, r0, #4294967295
 8017edc:	4543      	cmp	r3, r8
 8017ede:	f280 81cb 	bge.w	8018278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017ee2:	f1bc 0f00 	cmp.w	ip, #0
 8017ee6:	f2c0 81c7 	blt.w	8018278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017eea:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017eee:	45c4      	cmp	ip, r8
 8017ef0:	f280 81c2 	bge.w	8018278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017ef4:	b200      	sxth	r0, r0
 8017ef6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017ef8:	fb0c 3300 	mla	r3, ip, r0, r3
 8017efc:	eb04 0803 	add.w	r8, r4, r3
 8017f00:	5ce3      	ldrb	r3, [r4, r3]
 8017f02:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017f06:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	f000 81a9 	beq.w	8018262 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8017f10:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017f14:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017f18:	940e      	str	r4, [sp, #56]	@ 0x38
 8017f1a:	0e24      	lsrs	r4, r4, #24
 8017f1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8017f1e:	b179      	cbz	r1, 8017f40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017f20:	eb08 0c00 	add.w	ip, r8, r0
 8017f24:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017f28:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017f2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8017f2e:	0e00      	lsrs	r0, r0, #24
 8017f30:	9013      	str	r0, [sp, #76]	@ 0x4c
 8017f32:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017f36:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017f3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017f3c:	0e00      	lsrs	r0, r0, #24
 8017f3e:	9016      	str	r0, [sp, #88]	@ 0x58
 8017f40:	b292      	uxth	r2, r2
 8017f42:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017f44:	b289      	uxth	r1, r1
 8017f46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017f48:	fb02 f901 	mul.w	r9, r2, r1
 8017f4c:	0112      	lsls	r2, r2, #4
 8017f4e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017f52:	eba2 0809 	sub.w	r8, r2, r9
 8017f56:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8017f5a:	b289      	uxth	r1, r1
 8017f5c:	fa1f f888 	uxth.w	r8, r8
 8017f60:	1a52      	subs	r2, r2, r1
 8017f62:	fb08 f000 	mul.w	r0, r8, r0
 8017f66:	b292      	uxth	r2, r2
 8017f68:	fb02 000e 	mla	r0, r2, lr, r0
 8017f6c:	fb01 0004 	mla	r0, r1, r4, r0
 8017f70:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8017f72:	fb09 0004 	mla	r0, r9, r4, r0
 8017f76:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017f7a:	2800      	cmp	r0, #0
 8017f7c:	f000 80f2 	beq.w	8018164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017f80:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8017f84:	d01b      	beq.n	8017fbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8017f86:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8017f8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8017f8e:	fb0e fa0a 	mul.w	sl, lr, sl
 8017f92:	fb0e fe03 	mul.w	lr, lr, r3
 8017f96:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017f9a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8017f9e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8017fa2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8017fa6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017faa:	4453      	add	r3, sl
 8017fac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017fb0:	0a1b      	lsrs	r3, r3, #8
 8017fb2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8017fb6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8017fba:	ea43 030c 	orr.w	r3, r3, ip
 8017fbe:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8017fc0:	2cff      	cmp	r4, #255	@ 0xff
 8017fc2:	d021      	beq.n	8018008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8017fc4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017fc6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8017fca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8017fcc:	fb04 fb0b 	mul.w	fp, r4, fp
 8017fd0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017fd2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8017fd6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8017fd8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017fdc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8017fe0:	fb04 fa0a 	mul.w	sl, r4, sl
 8017fe4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8017fe8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8017fec:	44de      	add	lr, fp
 8017fee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017ff2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017ff6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017ffa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8017ffe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018002:	ea4e 040a 	orr.w	r4, lr, sl
 8018006:	940e      	str	r4, [sp, #56]	@ 0x38
 8018008:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801800a:	2cff      	cmp	r4, #255	@ 0xff
 801800c:	d021      	beq.n	8018052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801800e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018010:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8018014:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018016:	fb04 fb0b 	mul.w	fp, r4, fp
 801801a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801801c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8018020:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018022:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018026:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801802a:	fb04 fa0a 	mul.w	sl, r4, sl
 801802e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8018032:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8018036:	44de      	add	lr, fp
 8018038:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801803c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018040:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018044:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8018048:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801804c:	ea4e 040a 	orr.w	r4, lr, sl
 8018050:	940a      	str	r4, [sp, #40]	@ 0x28
 8018052:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8018054:	2cff      	cmp	r4, #255	@ 0xff
 8018056:	d021      	beq.n	801809c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8018058:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801805a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801805e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8018060:	fb04 fb0b 	mul.w	fp, r4, fp
 8018064:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018066:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801806a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801806c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018070:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8018074:	fb04 fa0a 	mul.w	sl, r4, sl
 8018078:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801807c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8018080:	44de      	add	lr, fp
 8018082:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018086:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801808a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801808e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8018092:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018096:	ea4e 040a 	orr.w	r4, lr, sl
 801809a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801809c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801809e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80180a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80180a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80180aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80180ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80180b0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80180b4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80180b8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80180ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80180be:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80180c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80180c4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80180c8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80180cc:	fb08 f80e 	mul.w	r8, r8, lr
 80180d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80180d4:	fb02 8303 	mla	r3, r2, r3, r8
 80180d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80180da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80180de:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80180e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80180e4:	fb01 330a 	mla	r3, r1, sl, r3
 80180e8:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80180ec:	fb09 3901 	mla	r9, r9, r1, r3
 80180f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80180f4:	4343      	muls	r3, r0
 80180f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80180fa:	1c58      	adds	r0, r3, #1
 80180fc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8018100:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018104:	ea4c 0c09 	orr.w	ip, ip, r9
 8018108:	783b      	ldrb	r3, [r7, #0]
 801810a:	fa5f f28c 	uxtb.w	r2, ip
 801810e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018112:	fb12 f201 	smulbb	r2, r2, r1
 8018116:	b2c0      	uxtb	r0, r0
 8018118:	fb03 2300 	mla	r3, r3, r0, r2
 801811c:	b29b      	uxth	r3, r3
 801811e:	1c5a      	adds	r2, r3, #1
 8018120:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018124:	787a      	ldrb	r2, [r7, #1]
 8018126:	fb12 f200 	smulbb	r2, r2, r0
 801812a:	121b      	asrs	r3, r3, #8
 801812c:	703b      	strb	r3, [r7, #0]
 801812e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018132:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018136:	fb03 2301 	mla	r3, r3, r1, r2
 801813a:	b29b      	uxth	r3, r3
 801813c:	1c5a      	adds	r2, r3, #1
 801813e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018142:	121b      	asrs	r3, r3, #8
 8018144:	707b      	strb	r3, [r7, #1]
 8018146:	78bb      	ldrb	r3, [r7, #2]
 8018148:	fb13 f000 	smulbb	r0, r3, r0
 801814c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8018150:	fa1f fc8c 	uxth.w	ip, ip
 8018154:	f10c 0301 	add.w	r3, ip, #1
 8018158:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801815c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018160:	f887 c002 	strb.w	ip, [r7, #2]
 8018164:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8018166:	3703      	adds	r7, #3
 8018168:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801816a:	441a      	add	r2, r3
 801816c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801816e:	441d      	add	r5, r3
 8018170:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018172:	9229      	str	r2, [sp, #164]	@ 0xa4
 8018174:	3b01      	subs	r3, #1
 8018176:	931a      	str	r3, [sp, #104]	@ 0x68
 8018178:	e69c      	b.n	8017eb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801817a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801817c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801817e:	441c      	add	r4, r3
 8018180:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8018182:	441d      	add	r5, r3
 8018184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018186:	9429      	str	r4, [sp, #164]	@ 0xa4
 8018188:	3b01      	subs	r3, #1
 801818a:	9309      	str	r3, [sp, #36]	@ 0x24
 801818c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801818e:	3303      	adds	r3, #3
 8018190:	930c      	str	r3, [sp, #48]	@ 0x30
 8018192:	e66f      	b.n	8017e74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018194:	d026      	beq.n	80181e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8018196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018198:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801819a:	3b01      	subs	r3, #1
 801819c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801819e:	fb00 4003 	mla	r0, r0, r3, r4
 80181a2:	1400      	asrs	r0, r0, #16
 80181a4:	f53f ae83 	bmi.w	8017eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80181a8:	3901      	subs	r1, #1
 80181aa:	4288      	cmp	r0, r1
 80181ac:	f6bf ae7f 	bge.w	8017eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80181b0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80181b2:	fb01 5303 	mla	r3, r1, r3, r5
 80181b6:	141b      	asrs	r3, r3, #16
 80181b8:	f53f ae79 	bmi.w	8017eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80181bc:	3a01      	subs	r2, #1
 80181be:	4293      	cmp	r3, r2
 80181c0:	f6bf ae75 	bge.w	8017eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80181c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80181c6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80181ca:	f103 0e03 	add.w	lr, r3, #3
 80181ce:	f1bb 0f00 	cmp.w	fp, #0
 80181d2:	dc71      	bgt.n	80182b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80181d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80181da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80181dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80181e0:	4423      	add	r3, r4
 80181e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80181e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	f340 81b5 	ble.w	8018556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80181ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80181f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80181f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80181f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80181fa:	eef0 6a62 	vmov.f32	s13, s5
 80181fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018202:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018206:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801820a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801820e:	eef0 6a43 	vmov.f32	s13, s6
 8018212:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018216:	ee16 5a90 	vmov	r5, s13
 801821a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801821e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018222:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018226:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801822a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801822e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018232:	ee12 2a90 	vmov	r2, s5
 8018236:	eef0 2a47 	vmov.f32	s5, s14
 801823a:	fb92 f3f3 	sdiv	r3, r2, r3
 801823e:	ee13 2a10 	vmov	r2, s6
 8018242:	932b      	str	r3, [sp, #172]	@ 0xac
 8018244:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8018246:	eeb0 3a67 	vmov.f32	s6, s15
 801824a:	fb92 f3f3 	sdiv	r3, r2, r3
 801824e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8018250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018252:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018254:	3b01      	subs	r3, #1
 8018256:	9319      	str	r3, [sp, #100]	@ 0x64
 8018258:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801825a:	bf08      	it	eq
 801825c:	4613      	moveq	r3, r2
 801825e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018260:	e5fa      	b.n	8017e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018262:	2900      	cmp	r1, #0
 8018264:	f43f ae6c 	beq.w	8017f40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018268:	f818 0000 	ldrb.w	r0, [r8, r0]
 801826c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018270:	900a      	str	r0, [sp, #40]	@ 0x28
 8018272:	0e00      	lsrs	r0, r0, #24
 8018274:	9013      	str	r0, [sp, #76]	@ 0x4c
 8018276:	e663      	b.n	8017f40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018278:	f113 0801 	adds.w	r8, r3, #1
 801827c:	f53f af72 	bmi.w	8018164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018280:	4540      	cmp	r0, r8
 8018282:	f6ff af6f 	blt.w	8018164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018286:	f11c 0801 	adds.w	r8, ip, #1
 801828a:	f53f af6b 	bmi.w	8018164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801828e:	45c6      	cmp	lr, r8
 8018290:	f6ff af68 	blt.w	8018164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018294:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8018296:	b200      	sxth	r0, r0
 8018298:	9302      	str	r3, [sp, #8]
 801829a:	fa0f f38e 	sxth.w	r3, lr
 801829e:	9000      	str	r0, [sp, #0]
 80182a0:	9301      	str	r3, [sp, #4]
 80182a2:	4633      	mov	r3, r6
 80182a4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80182a6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80182aa:	e9cd c203 	strd	ip, r2, [sp, #12]
 80182ae:	4639      	mov	r1, r7
 80182b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80182b2:	f7ff fc74 	bl	8017b9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80182b6:	e755      	b.n	8018164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80182b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80182ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80182be:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80182c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80182c4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80182c6:	1427      	asrs	r7, r4, #16
 80182c8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80182ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80182ce:	142b      	asrs	r3, r5, #16
 80182d0:	fb01 7303 	mla	r3, r1, r3, r7
 80182d4:	18e7      	adds	r7, r4, r3
 80182d6:	5ce3      	ldrb	r3, [r4, r3]
 80182d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80182dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80182e0:	2a00      	cmp	r2, #0
 80182e2:	f000 812e 	beq.w	8018542 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80182e6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80182ea:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80182ee:	9410      	str	r4, [sp, #64]	@ 0x40
 80182f0:	0e24      	lsrs	r4, r4, #24
 80182f2:	9417      	str	r4, [sp, #92]	@ 0x5c
 80182f4:	b170      	cbz	r0, 8018314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80182f6:	eb07 0801 	add.w	r8, r7, r1
 80182fa:	5c79      	ldrb	r1, [r7, r1]
 80182fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018300:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018302:	0e09      	lsrs	r1, r1, #24
 8018304:	9114      	str	r1, [sp, #80]	@ 0x50
 8018306:	f898 1001 	ldrb.w	r1, [r8, #1]
 801830a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801830e:	9111      	str	r1, [sp, #68]	@ 0x44
 8018310:	0e09      	lsrs	r1, r1, #24
 8018312:	9118      	str	r1, [sp, #96]	@ 0x60
 8018314:	b292      	uxth	r2, r2
 8018316:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018318:	b280      	uxth	r0, r0
 801831a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801831c:	fb02 f900 	mul.w	r9, r2, r0
 8018320:	0112      	lsls	r2, r2, #4
 8018322:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018326:	eba2 0809 	sub.w	r8, r2, r9
 801832a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801832e:	b280      	uxth	r0, r0
 8018330:	fa1f f888 	uxth.w	r8, r8
 8018334:	1a12      	subs	r2, r2, r0
 8018336:	fb08 f101 	mul.w	r1, r8, r1
 801833a:	b292      	uxth	r2, r2
 801833c:	fb02 110c 	mla	r1, r2, ip, r1
 8018340:	fb00 1104 	mla	r1, r0, r4, r1
 8018344:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8018346:	fb09 1104 	mla	r1, r9, r4, r1
 801834a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801834e:	2900      	cmp	r1, #0
 8018350:	f000 80ec 	beq.w	801852c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8018354:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8018358:	d019      	beq.n	801838e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801835a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801835e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018362:	fb0c fa0a 	mul.w	sl, ip, sl
 8018366:	fb0c fc03 	mul.w	ip, ip, r3
 801836a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801836e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8018372:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8018376:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801837a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801837e:	4453      	add	r3, sl
 8018380:	0a3f      	lsrs	r7, r7, #8
 8018382:	0a1b      	lsrs	r3, r3, #8
 8018384:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8018388:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801838c:	433b      	orrs	r3, r7
 801838e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8018390:	2cff      	cmp	r4, #255	@ 0xff
 8018392:	d020      	beq.n	80183d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8018394:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8018396:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801839a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801839c:	4367      	muls	r7, r4
 801839e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80183a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80183a4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80183a8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80183aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80183ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80183b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80183b6:	44bc      	add	ip, r7
 80183b8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80183bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80183c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80183c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80183c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80183cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80183d0:	ea4c 040a 	orr.w	r4, ip, sl
 80183d4:	9410      	str	r4, [sp, #64]	@ 0x40
 80183d6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80183d8:	2cff      	cmp	r4, #255	@ 0xff
 80183da:	d020      	beq.n	801841e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80183dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80183de:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80183e2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80183e4:	4367      	muls	r7, r4
 80183e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80183e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80183ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80183f0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80183f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80183f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80183fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80183fe:	44bc      	add	ip, r7
 8018400:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8018404:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018408:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801840c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018410:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018414:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018418:	ea4c 040a 	orr.w	r4, ip, sl
 801841c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801841e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8018420:	2cff      	cmp	r4, #255	@ 0xff
 8018422:	d020      	beq.n	8018466 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8018424:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018426:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801842a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801842c:	4367      	muls	r7, r4
 801842e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018430:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018434:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8018438:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801843a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801843e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018442:	fb04 fa0a 	mul.w	sl, r4, sl
 8018446:	44bc      	add	ip, r7
 8018448:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801844c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018450:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018454:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018458:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801845c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018460:	ea4c 040a 	orr.w	r4, ip, sl
 8018464:	9411      	str	r4, [sp, #68]	@ 0x44
 8018466:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8018468:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801846c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018470:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8018474:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018476:	fb08 f707 	mul.w	r7, r8, r7
 801847a:	fb02 770c 	mla	r7, r2, ip, r7
 801847e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8018482:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018484:	fb00 770c 	mla	r7, r0, ip, r7
 8018488:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801848c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801848e:	fb09 770c 	mla	r7, r9, ip, r7
 8018492:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8018496:	fb08 f80c 	mul.w	r8, r8, ip
 801849a:	0a3f      	lsrs	r7, r7, #8
 801849c:	fb02 8303 	mla	r3, r2, r3, r8
 80184a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80184a2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80184a6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80184aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184ac:	fb00 330a 	mla	r3, r0, sl, r3
 80184b0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80184b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80184b6:	fb09 3c0c 	mla	ip, r9, ip, r3
 80184ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80184bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80184c0:	434b      	muls	r3, r1
 80184c2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80184c6:	1c59      	adds	r1, r3, #1
 80184c8:	ea47 070c 	orr.w	r7, r7, ip
 80184cc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80184d0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80184d4:	b2fa      	uxtb	r2, r7
 80184d6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80184da:	fb12 f200 	smulbb	r2, r2, r0
 80184de:	b2c9      	uxtb	r1, r1
 80184e0:	fb03 2301 	mla	r3, r3, r1, r2
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	1c5a      	adds	r2, r3, #1
 80184e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80184ec:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80184f0:	fb12 f201 	smulbb	r2, r2, r1
 80184f4:	121b      	asrs	r3, r3, #8
 80184f6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80184fa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80184fe:	0c3f      	lsrs	r7, r7, #16
 8018500:	fb03 2300 	mla	r3, r3, r0, r2
 8018504:	b29b      	uxth	r3, r3
 8018506:	1c5a      	adds	r2, r3, #1
 8018508:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801850c:	121b      	asrs	r3, r3, #8
 801850e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018512:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018516:	fb13 f101 	smulbb	r1, r3, r1
 801851a:	fb07 1700 	mla	r7, r7, r0, r1
 801851e:	b2bf      	uxth	r7, r7
 8018520:	1c7b      	adds	r3, r7, #1
 8018522:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018526:	123f      	asrs	r7, r7, #8
 8018528:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801852c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801852e:	f10e 0e03 	add.w	lr, lr, #3
 8018532:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018534:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018538:	441a      	add	r2, r3
 801853a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801853c:	9229      	str	r2, [sp, #164]	@ 0xa4
 801853e:	441d      	add	r5, r3
 8018540:	e645      	b.n	80181ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8018542:	2800      	cmp	r0, #0
 8018544:	f43f aee6 	beq.w	8018314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018548:	5c79      	ldrb	r1, [r7, r1]
 801854a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801854e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018550:	0e09      	lsrs	r1, r1, #24
 8018552:	9114      	str	r1, [sp, #80]	@ 0x50
 8018554:	e6de      	b.n	8018314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018556:	b01f      	add	sp, #124	@ 0x7c
 8018558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801855c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801855c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018560:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8018564:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8018568:	2d00      	cmp	r5, #0
 801856a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801856e:	fb05 700e 	mla	r0, r5, lr, r7
 8018572:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8018576:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801857a:	eb02 0800 	add.w	r8, r2, r0
 801857e:	f2c0 8105 	blt.w	801878c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8018582:	45a9      	cmp	r9, r5
 8018584:	f340 8102 	ble.w	801878c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8018588:	2f00      	cmp	r7, #0
 801858a:	f2c0 80fd 	blt.w	8018788 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801858e:	45be      	cmp	lr, r7
 8018590:	f340 80fa 	ble.w	8018788 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8018594:	5c12      	ldrb	r2, [r2, r0]
 8018596:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801859a:	1c7a      	adds	r2, r7, #1
 801859c:	f100 80f9 	bmi.w	8018792 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80185a0:	4596      	cmp	lr, r2
 80185a2:	f340 80f6 	ble.w	8018792 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80185a6:	2c00      	cmp	r4, #0
 80185a8:	f000 80f5 	beq.w	8018796 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80185ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 80185b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80185b4:	3501      	adds	r5, #1
 80185b6:	f100 80f2 	bmi.w	801879e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80185ba:	45a9      	cmp	r9, r5
 80185bc:	f340 80ef 	ble.w	801879e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80185c0:	f1bc 0f00 	cmp.w	ip, #0
 80185c4:	f000 80ee 	beq.w	80187a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80185c8:	2f00      	cmp	r7, #0
 80185ca:	f2c0 80e6 	blt.w	801879a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80185ce:	45be      	cmp	lr, r7
 80185d0:	f340 80e3 	ble.w	801879a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80185d4:	f818 200e 	ldrb.w	r2, [r8, lr]
 80185d8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80185dc:	3701      	adds	r7, #1
 80185de:	f100 80e4 	bmi.w	80187aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80185e2:	45be      	cmp	lr, r7
 80185e4:	f340 80e1 	ble.w	80187aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80185e8:	2c00      	cmp	r4, #0
 80185ea:	f000 80e0 	beq.w	80187ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80185ee:	44c6      	add	lr, r8
 80185f0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80185f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80185f8:	b2a3      	uxth	r3, r4
 80185fa:	fa1f fc8c 	uxth.w	ip, ip
 80185fe:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8018602:	fb0c fe03 	mul.w	lr, ip, r3
 8018606:	011b      	lsls	r3, r3, #4
 8018608:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801860c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8018610:	eba3 070e 	sub.w	r7, r3, lr
 8018614:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8018618:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801861c:	fa1f f48c 	uxth.w	r4, ip
 8018620:	b2bf      	uxth	r7, r7
 8018622:	1b1b      	subs	r3, r3, r4
 8018624:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8018628:	fb07 fc0a 	mul.w	ip, r7, sl
 801862c:	b29b      	uxth	r3, r3
 801862e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8018632:	9300      	str	r3, [sp, #0]
 8018634:	fb04 cc09 	mla	ip, r4, r9, ip
 8018638:	fb0e cc08 	mla	ip, lr, r8, ip
 801863c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018640:	9301      	str	r3, [sp, #4]
 8018642:	2b00      	cmp	r3, #0
 8018644:	f000 809d 	beq.w	8018782 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8018648:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801864c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8018650:	fb0b fc0c 	mul.w	ip, fp, ip
 8018654:	fb0b f606 	mul.w	r6, fp, r6
 8018658:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801865c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8018660:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8018664:	44dc      	add	ip, fp
 8018666:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801866a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801866e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018672:	fb0a fb0b 	mul.w	fp, sl, fp
 8018676:	fb0a fa00 	mul.w	sl, sl, r0
 801867a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801867e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8018682:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8018686:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801868a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801868e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8018692:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018696:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801869a:	0a36      	lsrs	r6, r6, #8
 801869c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80186a0:	44dc      	add	ip, fp
 80186a2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80186a6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80186aa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80186ae:	fb09 fb0b 	mul.w	fp, r9, fp
 80186b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186b6:	fb09 f905 	mul.w	r9, r9, r5
 80186ba:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80186be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80186c2:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80186c6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80186ca:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80186ce:	fb0c fc07 	mul.w	ip, ip, r7
 80186d2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80186d6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80186da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80186de:	4458      	add	r0, fp
 80186e0:	fb08 f505 	mul.w	r5, r8, r5
 80186e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80186e8:	fb08 f802 	mul.w	r8, r8, r2
 80186ec:	0a00      	lsrs	r0, r0, #8
 80186ee:	0a2a      	lsrs	r2, r5, #8
 80186f0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80186f4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80186f8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80186fc:	4415      	add	r5, r2
 80186fe:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8018702:	0a2d      	lsrs	r5, r5, #8
 8018704:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018708:	9a00      	ldr	r2, [sp, #0]
 801870a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801870e:	fb03 cc02 	mla	ip, r3, r2, ip
 8018712:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018716:	9b01      	ldr	r3, [sp, #4]
 8018718:	fb05 c50e 	mla	r5, r5, lr, ip
 801871c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8018720:	43db      	mvns	r3, r3
 8018722:	fb00 5004 	mla	r0, r0, r4, r5
 8018726:	b2db      	uxtb	r3, r3
 8018728:	0a00      	lsrs	r0, r0, #8
 801872a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801872e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8018732:	4378      	muls	r0, r7
 8018734:	fb02 0006 	mla	r0, r2, r6, r0
 8018738:	780a      	ldrb	r2, [r1, #0]
 801873a:	fb0e 0e08 	mla	lr, lr, r8, r0
 801873e:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8018742:	fb04 e000 	mla	r0, r4, r0, lr
 8018746:	fb02 f403 	mul.w	r4, r2, r3
 801874a:	0a00      	lsrs	r0, r0, #8
 801874c:	1c62      	adds	r2, r4, #1
 801874e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8018752:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018756:	4328      	orrs	r0, r5
 8018758:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801875c:	700a      	strb	r2, [r1, #0]
 801875e:	784a      	ldrb	r2, [r1, #1]
 8018760:	435a      	muls	r2, r3
 8018762:	1c54      	adds	r4, r2, #1
 8018764:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018768:	0a02      	lsrs	r2, r0, #8
 801876a:	0c00      	lsrs	r0, r0, #16
 801876c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018770:	704a      	strb	r2, [r1, #1]
 8018772:	788a      	ldrb	r2, [r1, #2]
 8018774:	4353      	muls	r3, r2
 8018776:	1c5a      	adds	r2, r3, #1
 8018778:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801877c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018780:	7088      	strb	r0, [r1, #2]
 8018782:	b003      	add	sp, #12
 8018784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018788:	2600      	movs	r6, #0
 801878a:	e706      	b.n	801859a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801878c:	2000      	movs	r0, #0
 801878e:	4606      	mov	r6, r0
 8018790:	e710      	b.n	80185b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018792:	2000      	movs	r0, #0
 8018794:	e70e      	b.n	80185b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018796:	4620      	mov	r0, r4
 8018798:	e70c      	b.n	80185b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801879a:	2500      	movs	r5, #0
 801879c:	e71e      	b.n	80185dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801879e:	2200      	movs	r2, #0
 80187a0:	4615      	mov	r5, r2
 80187a2:	e729      	b.n	80185f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187a4:	4662      	mov	r2, ip
 80187a6:	4665      	mov	r5, ip
 80187a8:	e726      	b.n	80185f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187aa:	2200      	movs	r2, #0
 80187ac:	e724      	b.n	80185f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187ae:	4622      	mov	r2, r4
 80187b0:	e722      	b.n	80185f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080187b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80187b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b6:	b09b      	sub	sp, #108	@ 0x6c
 80187b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187bc:	9218      	str	r2, [sp, #96]	@ 0x60
 80187be:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80187c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80187c2:	9116      	str	r1, [sp, #88]	@ 0x58
 80187c4:	6850      	ldr	r0, [r2, #4]
 80187c6:	9307      	str	r3, [sp, #28]
 80187c8:	6812      	ldr	r2, [r2, #0]
 80187ca:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80187cc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80187d0:	fb00 1303 	mla	r3, r0, r3, r1
 80187d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80187d8:	18d3      	adds	r3, r2, r3
 80187da:	930a      	str	r3, [sp, #40]	@ 0x28
 80187dc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80187e2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80187e4:	685e      	ldr	r6, [r3, #4]
 80187e6:	3604      	adds	r6, #4
 80187e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	dc03      	bgt.n	80187f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80187ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f340 834f 	ble.w	8018e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80187f6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80187f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80187fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018800:	1e48      	subs	r0, r1, #1
 8018802:	1e57      	subs	r7, r2, #1
 8018804:	9b07      	ldr	r3, [sp, #28]
 8018806:	2b00      	cmp	r3, #0
 8018808:	f340 8178 	ble.w	8018afc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801880c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801880e:	142b      	asrs	r3, r5, #16
 8018810:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018814:	d406      	bmi.n	8018824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018816:	4584      	cmp	ip, r0
 8018818:	da04      	bge.n	8018824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801881a:	2b00      	cmp	r3, #0
 801881c:	db02      	blt.n	8018824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801881e:	42bb      	cmp	r3, r7
 8018820:	f2c0 816d 	blt.w	8018afe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018824:	f11c 0c01 	adds.w	ip, ip, #1
 8018828:	f100 815b 	bmi.w	8018ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801882c:	4561      	cmp	r1, ip
 801882e:	f2c0 8158 	blt.w	8018ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018832:	3301      	adds	r3, #1
 8018834:	f100 8155 	bmi.w	8018ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018838:	429a      	cmp	r2, r3
 801883a:	f2c0 8152 	blt.w	8018ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801883e:	9b07      	ldr	r3, [sp, #28]
 8018840:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018842:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018844:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018846:	2b00      	cmp	r3, #0
 8018848:	f340 8178 	ble.w	8018b3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801884c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801884e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018852:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018856:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801885a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801885c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018860:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018862:	141b      	asrs	r3, r3, #16
 8018864:	f100 81ba 	bmi.w	8018bdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018868:	f101 38ff 	add.w	r8, r1, #4294967295
 801886c:	4543      	cmp	r3, r8
 801886e:	f280 81b5 	bge.w	8018bdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018872:	f1bc 0f00 	cmp.w	ip, #0
 8018876:	f2c0 81b1 	blt.w	8018bdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801887a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801887e:	45c4      	cmp	ip, r8
 8018880:	f280 81ac 	bge.w	8018bdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018884:	b209      	sxth	r1, r1
 8018886:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018888:	fb0c 3301 	mla	r3, ip, r1, r3
 801888c:	eb04 0803 	add.w	r8, r4, r3
 8018890:	5ce3      	ldrb	r3, [r4, r3]
 8018892:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018896:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801889a:	2a00      	cmp	r2, #0
 801889c:	f000 8193 	beq.w	8018bc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80188a0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80188a4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80188a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80188aa:	0e24      	lsrs	r4, r4, #24
 80188ac:	9412      	str	r4, [sp, #72]	@ 0x48
 80188ae:	b178      	cbz	r0, 80188d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80188b0:	eb08 0c01 	add.w	ip, r8, r1
 80188b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80188b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80188bc:	9108      	str	r1, [sp, #32]
 80188be:	0e09      	lsrs	r1, r1, #24
 80188c0:	9110      	str	r1, [sp, #64]	@ 0x40
 80188c2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80188c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80188ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80188cc:	0e09      	lsrs	r1, r1, #24
 80188ce:	9113      	str	r1, [sp, #76]	@ 0x4c
 80188d0:	b292      	uxth	r2, r2
 80188d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80188d4:	b280      	uxth	r0, r0
 80188d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80188d8:	fb02 f900 	mul.w	r9, r2, r0
 80188dc:	0112      	lsls	r2, r2, #4
 80188de:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80188e2:	eba2 0809 	sub.w	r8, r2, r9
 80188e6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80188ea:	b280      	uxth	r0, r0
 80188ec:	fa1f f888 	uxth.w	r8, r8
 80188f0:	1a12      	subs	r2, r2, r0
 80188f2:	fb08 f101 	mul.w	r1, r8, r1
 80188f6:	b292      	uxth	r2, r2
 80188f8:	fb02 110e 	mla	r1, r2, lr, r1
 80188fc:	fb00 1104 	mla	r1, r0, r4, r1
 8018900:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018902:	fb09 1104 	mla	r1, r9, r4, r1
 8018906:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801890a:	2900      	cmp	r1, #0
 801890c:	f000 80de 	beq.w	8018acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018910:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8018914:	d01b      	beq.n	801894e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8018916:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801891a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801891e:	fb0e fa0a 	mul.w	sl, lr, sl
 8018922:	fb0e fe03 	mul.w	lr, lr, r3
 8018926:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801892a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801892e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8018932:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8018936:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801893a:	4453      	add	r3, sl
 801893c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018940:	0a1b      	lsrs	r3, r3, #8
 8018942:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8018946:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801894a:	ea43 030c 	orr.w	r3, r3, ip
 801894e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018950:	2cff      	cmp	r4, #255	@ 0xff
 8018952:	d021      	beq.n	8018998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8018954:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018956:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801895a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801895c:	fb04 fb0b 	mul.w	fp, r4, fp
 8018960:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018962:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8018966:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018968:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801896c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8018970:	fb04 fa0a 	mul.w	sl, r4, sl
 8018974:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8018978:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801897c:	44de      	add	lr, fp
 801897e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018982:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018986:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801898a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801898e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018992:	ea4e 040a 	orr.w	r4, lr, sl
 8018996:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018998:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801899a:	2cff      	cmp	r4, #255	@ 0xff
 801899c:	d021      	beq.n	80189e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801899e:	9c08      	ldr	r4, [sp, #32]
 80189a0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80189a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80189a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80189aa:	9c08      	ldr	r4, [sp, #32]
 80189ac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80189b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80189b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80189b6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80189ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80189be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80189c2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80189c6:	44de      	add	lr, fp
 80189c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80189cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80189d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80189d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80189d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80189dc:	ea4e 040a 	orr.w	r4, lr, sl
 80189e0:	9408      	str	r4, [sp, #32]
 80189e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80189e4:	2cff      	cmp	r4, #255	@ 0xff
 80189e6:	d021      	beq.n	8018a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80189e8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80189ea:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80189ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80189f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80189f4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80189f6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80189fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80189fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018a00:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8018a04:	fb04 fa0a 	mul.w	sl, r4, sl
 8018a08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8018a0c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8018a10:	44de      	add	lr, fp
 8018a12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018a16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018a1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018a1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8018a22:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018a26:	ea4e 040a 	orr.w	r4, lr, sl
 8018a2a:	940c      	str	r4, [sp, #48]	@ 0x30
 8018a2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018a2e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8018a32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018a36:	43c9      	mvns	r1, r1
 8018a38:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8018a3c:	9c08      	ldr	r4, [sp, #32]
 8018a3e:	b2c9      	uxtb	r1, r1
 8018a40:	fb08 fc0c 	mul.w	ip, r8, ip
 8018a44:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018a48:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8018a4c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8018a4e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018a52:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8018a56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018a58:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018a5c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8018a60:	fb08 f80e 	mul.w	r8, r8, lr
 8018a64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018a68:	fb02 8303 	mla	r3, r2, r3, r8
 8018a6c:	9a08      	ldr	r2, [sp, #32]
 8018a6e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018a72:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8018a76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018a78:	fb00 330a 	mla	r3, r0, sl, r3
 8018a7c:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8018a80:	fb09 3900 	mla	r9, r9, r0, r3
 8018a84:	783b      	ldrb	r3, [r7, #0]
 8018a86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018a8a:	fb03 f201 	mul.w	r2, r3, r1
 8018a8e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8018a92:	1c53      	adds	r3, r2, #1
 8018a94:	ea4c 0c09 	orr.w	ip, ip, r9
 8018a98:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018a9c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8018aa0:	703b      	strb	r3, [r7, #0]
 8018aa2:	787b      	ldrb	r3, [r7, #1]
 8018aa4:	434b      	muls	r3, r1
 8018aa6:	1c5a      	adds	r2, r3, #1
 8018aa8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018aac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018ab0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018ab4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018ab8:	707b      	strb	r3, [r7, #1]
 8018aba:	78bb      	ldrb	r3, [r7, #2]
 8018abc:	4359      	muls	r1, r3
 8018abe:	1c4b      	adds	r3, r1, #1
 8018ac0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018ac4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8018ac8:	f887 c002 	strb.w	ip, [r7, #2]
 8018acc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8018ace:	3703      	adds	r7, #3
 8018ad0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8018ad2:	441a      	add	r2, r3
 8018ad4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8018ad6:	441d      	add	r5, r3
 8018ad8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018ada:	9225      	str	r2, [sp, #148]	@ 0x94
 8018adc:	3b01      	subs	r3, #1
 8018ade:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018ae0:	e6b0      	b.n	8018844 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018ae2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8018ae4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8018ae6:	441c      	add	r4, r3
 8018ae8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8018aea:	441d      	add	r5, r3
 8018aec:	9b07      	ldr	r3, [sp, #28]
 8018aee:	9425      	str	r4, [sp, #148]	@ 0x94
 8018af0:	3b01      	subs	r3, #1
 8018af2:	9307      	str	r3, [sp, #28]
 8018af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018af6:	3303      	adds	r3, #3
 8018af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8018afa:	e683      	b.n	8018804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018afc:	d026      	beq.n	8018b4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8018afe:	9b07      	ldr	r3, [sp, #28]
 8018b00:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8018b02:	3b01      	subs	r3, #1
 8018b04:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8018b06:	fb00 4003 	mla	r0, r0, r3, r4
 8018b0a:	1400      	asrs	r0, r0, #16
 8018b0c:	f53f ae97 	bmi.w	801883e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018b10:	3901      	subs	r1, #1
 8018b12:	4288      	cmp	r0, r1
 8018b14:	f6bf ae93 	bge.w	801883e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018b18:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8018b1a:	fb01 5303 	mla	r3, r1, r3, r5
 8018b1e:	141b      	asrs	r3, r3, #16
 8018b20:	f53f ae8d 	bmi.w	801883e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018b24:	3a01      	subs	r2, #1
 8018b26:	4293      	cmp	r3, r2
 8018b28:	f6bf ae89 	bge.w	801883e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b2e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018b32:	f103 0e03 	add.w	lr, r3, #3
 8018b36:	f1bb 0f00 	cmp.w	fp, #0
 8018b3a:	dc6d      	bgt.n	8018c18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8018b3c:	9b07      	ldr	r3, [sp, #28]
 8018b3e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018b48:	4423      	add	r3, r4
 8018b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	f340 81a0 	ble.w	8018e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8018b54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018b5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b5e:	eeb0 6a62 	vmov.f32	s12, s5
 8018b62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018b66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018b6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b6e:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8018b72:	eeb0 6a43 	vmov.f32	s12, s6
 8018b76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b7a:	ee16 5a10 	vmov	r5, s12
 8018b7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018b82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018b86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018b8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018b92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018b96:	ee12 2a90 	vmov	r2, s5
 8018b9a:	eef0 2a47 	vmov.f32	s5, s14
 8018b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ba2:	ee13 2a10 	vmov	r2, s6
 8018ba6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8018ba8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018baa:	eeb0 3a67 	vmov.f32	s6, s15
 8018bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bb2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8018bb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018bb6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018bb8:	3b01      	subs	r3, #1
 8018bba:	9316      	str	r3, [sp, #88]	@ 0x58
 8018bbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018bbe:	bf08      	it	eq
 8018bc0:	4613      	moveq	r3, r2
 8018bc2:	9307      	str	r3, [sp, #28]
 8018bc4:	e610      	b.n	80187e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018bc6:	2800      	cmp	r0, #0
 8018bc8:	f43f ae82 	beq.w	80188d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018bcc:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018bd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018bd4:	9108      	str	r1, [sp, #32]
 8018bd6:	0e09      	lsrs	r1, r1, #24
 8018bd8:	9110      	str	r1, [sp, #64]	@ 0x40
 8018bda:	e679      	b.n	80188d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018bdc:	f113 0801 	adds.w	r8, r3, #1
 8018be0:	f53f af74 	bmi.w	8018acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018be4:	4541      	cmp	r1, r8
 8018be6:	f6ff af71 	blt.w	8018acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018bea:	f11c 0801 	adds.w	r8, ip, #1
 8018bee:	f53f af6d 	bmi.w	8018acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018bf2:	45c6      	cmp	lr, r8
 8018bf4:	f6ff af6a 	blt.w	8018acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018bf8:	b209      	sxth	r1, r1
 8018bfa:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018bfe:	fa0f f38e 	sxth.w	r3, lr
 8018c02:	9100      	str	r1, [sp, #0]
 8018c04:	4639      	mov	r1, r7
 8018c06:	9301      	str	r3, [sp, #4]
 8018c08:	4633      	mov	r3, r6
 8018c0a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018c0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018c10:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8018c12:	f7ff fca3 	bl	801855c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8018c16:	e759      	b.n	8018acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018c18:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018c1a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018c1e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8018c20:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018c24:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8018c26:	1427      	asrs	r7, r4, #16
 8018c28:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018c2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018c2e:	142b      	asrs	r3, r5, #16
 8018c30:	fb01 7303 	mla	r3, r1, r3, r7
 8018c34:	18e7      	adds	r7, r4, r3
 8018c36:	5ce3      	ldrb	r3, [r4, r3]
 8018c38:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018c3c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018c40:	2a00      	cmp	r2, #0
 8018c42:	f000 811d 	beq.w	8018e80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8018c46:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018c4a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018c4e:	940d      	str	r4, [sp, #52]	@ 0x34
 8018c50:	0e24      	lsrs	r4, r4, #24
 8018c52:	9414      	str	r4, [sp, #80]	@ 0x50
 8018c54:	b170      	cbz	r0, 8018c74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018c56:	eb07 0801 	add.w	r8, r7, r1
 8018c5a:	5c79      	ldrb	r1, [r7, r1]
 8018c5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018c60:	9109      	str	r1, [sp, #36]	@ 0x24
 8018c62:	0e09      	lsrs	r1, r1, #24
 8018c64:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c66:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018c6a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018c6e:	910e      	str	r1, [sp, #56]	@ 0x38
 8018c70:	0e09      	lsrs	r1, r1, #24
 8018c72:	9115      	str	r1, [sp, #84]	@ 0x54
 8018c74:	b292      	uxth	r2, r2
 8018c76:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018c78:	b280      	uxth	r0, r0
 8018c7a:	fb02 f900 	mul.w	r9, r2, r0
 8018c7e:	0112      	lsls	r2, r2, #4
 8018c80:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018c84:	eba2 0809 	sub.w	r8, r2, r9
 8018c88:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8018c8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018c8e:	b280      	uxth	r0, r0
 8018c90:	fa1f f888 	uxth.w	r8, r8
 8018c94:	1a09      	subs	r1, r1, r0
 8018c96:	fb08 f202 	mul.w	r2, r8, r2
 8018c9a:	b289      	uxth	r1, r1
 8018c9c:	fb01 220c 	mla	r2, r1, ip, r2
 8018ca0:	fb00 2204 	mla	r2, r0, r4, r2
 8018ca4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018ca6:	fb09 2204 	mla	r2, r9, r4, r2
 8018caa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018cae:	2a00      	cmp	r2, #0
 8018cb0:	f000 80db 	beq.w	8018e6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8018cb4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8018cb8:	d019      	beq.n	8018cee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8018cba:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8018cbe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018cc2:	fb0c fa0a 	mul.w	sl, ip, sl
 8018cc6:	fb0c fc03 	mul.w	ip, ip, r3
 8018cca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018cce:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8018cd2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8018cd6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8018cda:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018cde:	4453      	add	r3, sl
 8018ce0:	0a3f      	lsrs	r7, r7, #8
 8018ce2:	0a1b      	lsrs	r3, r3, #8
 8018ce4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8018ce8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8018cec:	433b      	orrs	r3, r7
 8018cee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8018cf0:	2cff      	cmp	r4, #255	@ 0xff
 8018cf2:	d020      	beq.n	8018d36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8018cf4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018cf6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8018cfa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8018cfc:	4367      	muls	r7, r4
 8018cfe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018d00:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018d04:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8018d08:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8018d0a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8018d0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018d12:	fb04 fa0a 	mul.w	sl, r4, sl
 8018d16:	44bc      	add	ip, r7
 8018d18:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8018d1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018d24:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018d28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d2c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018d30:	ea4c 040a 	orr.w	r4, ip, sl
 8018d34:	940d      	str	r4, [sp, #52]	@ 0x34
 8018d36:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018d38:	2cff      	cmp	r4, #255	@ 0xff
 8018d3a:	d020      	beq.n	8018d7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8018d3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018d3e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8018d42:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018d44:	4367      	muls	r7, r4
 8018d46:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018d48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018d4c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8018d50:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018d52:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8018d56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018d5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8018d5e:	44bc      	add	ip, r7
 8018d60:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8018d64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018d6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018d70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d74:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018d78:	ea4c 040a 	orr.w	r4, ip, sl
 8018d7c:	9409      	str	r4, [sp, #36]	@ 0x24
 8018d7e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018d80:	2cff      	cmp	r4, #255	@ 0xff
 8018d82:	d020      	beq.n	8018dc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8018d84:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018d86:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8018d8a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018d8c:	4367      	muls	r7, r4
 8018d8e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018d90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018d94:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8018d98:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018d9a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8018d9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018da2:	fb04 fa0a 	mul.w	sl, r4, sl
 8018da6:	44bc      	add	ip, r7
 8018da8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8018dac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018db0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018db4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8018db8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018dbc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8018dc0:	ea4c 040a 	orr.w	r4, ip, sl
 8018dc4:	940e      	str	r4, [sp, #56]	@ 0x38
 8018dc6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018dc8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8018dcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018dd0:	43d2      	mvns	r2, r2
 8018dd2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8018dd6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018dd8:	b2d2      	uxtb	r2, r2
 8018dda:	fb08 f707 	mul.w	r7, r8, r7
 8018dde:	fb01 770c 	mla	r7, r1, ip, r7
 8018de2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8018de6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018de8:	fb00 770c 	mla	r7, r0, ip, r7
 8018dec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8018df0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018df2:	fb09 770c 	mla	r7, r9, ip, r7
 8018df6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8018dfa:	fb08 f80c 	mul.w	r8, r8, ip
 8018dfe:	0a3f      	lsrs	r7, r7, #8
 8018e00:	fb01 8303 	mla	r3, r1, r3, r8
 8018e04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e06:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8018e0a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8018e0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018e10:	fb00 330a 	mla	r3, r0, sl, r3
 8018e14:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8018e18:	fb09 3c0c 	mla	ip, r9, ip, r3
 8018e1c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018e20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018e24:	fb03 f102 	mul.w	r1, r3, r2
 8018e28:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8018e2c:	1c4b      	adds	r3, r1, #1
 8018e2e:	ea47 070c 	orr.w	r7, r7, ip
 8018e32:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018e36:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8018e3a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018e3e:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8018e42:	4353      	muls	r3, r2
 8018e44:	1c59      	adds	r1, r3, #1
 8018e46:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018e4a:	0a3b      	lsrs	r3, r7, #8
 8018e4c:	0c3f      	lsrs	r7, r7, #16
 8018e4e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018e52:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018e56:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018e5a:	435a      	muls	r2, r3
 8018e5c:	1c53      	adds	r3, r2, #1
 8018e5e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018e62:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8018e66:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018e6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8018e6c:	f10e 0e03 	add.w	lr, lr, #3
 8018e70:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8018e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018e76:	441a      	add	r2, r3
 8018e78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8018e7a:	9225      	str	r2, [sp, #148]	@ 0x94
 8018e7c:	441d      	add	r5, r3
 8018e7e:	e65a      	b.n	8018b36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8018e80:	2800      	cmp	r0, #0
 8018e82:	f43f aef7 	beq.w	8018c74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018e86:	5c79      	ldrb	r1, [r7, r1]
 8018e88:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018e8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8018e8e:	0e09      	lsrs	r1, r1, #24
 8018e90:	9111      	str	r1, [sp, #68]	@ 0x44
 8018e92:	e6ef      	b.n	8018c74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018e94:	b01b      	add	sp, #108	@ 0x6c
 8018e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8018e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e9e:	b08d      	sub	sp, #52	@ 0x34
 8018ea0:	468b      	mov	fp, r1
 8018ea2:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8018ea6:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8018eaa:	fb0c 5703 	mla	r7, ip, r3, r5
 8018eae:	f1bc 0f00 	cmp.w	ip, #0
 8018eb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018eb4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018eb8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8018ebc:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8018ec0:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8018ec4:	eb02 0607 	add.w	r6, r2, r7
 8018ec8:	f89b 4000 	ldrb.w	r4, [fp]
 8018ecc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8018ed0:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8018ed4:	f2c0 80c1 	blt.w	801905a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8018ed8:	45e6      	cmp	lr, ip
 8018eda:	f340 80be 	ble.w	801905a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8018ede:	2d00      	cmp	r5, #0
 8018ee0:	f2c0 80b7 	blt.w	8019052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8018ee4:	42ab      	cmp	r3, r5
 8018ee6:	f340 80b4 	ble.w	8019052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8018eea:	5dd2      	ldrb	r2, [r2, r7]
 8018eec:	9205      	str	r2, [sp, #20]
 8018eee:	7872      	ldrb	r2, [r6, #1]
 8018ef0:	9206      	str	r2, [sp, #24]
 8018ef2:	78b2      	ldrb	r2, [r6, #2]
 8018ef4:	9207      	str	r2, [sp, #28]
 8018ef6:	1c6a      	adds	r2, r5, #1
 8018ef8:	f100 80b6 	bmi.w	8019068 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8018efc:	4293      	cmp	r3, r2
 8018efe:	f340 80b3 	ble.w	8019068 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8018f02:	f1b8 0f00 	cmp.w	r8, #0
 8018f06:	f000 80af 	beq.w	8019068 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8018f0a:	78f2      	ldrb	r2, [r6, #3]
 8018f0c:	9201      	str	r2, [sp, #4]
 8018f0e:	7932      	ldrb	r2, [r6, #4]
 8018f10:	9202      	str	r2, [sp, #8]
 8018f12:	7972      	ldrb	r2, [r6, #5]
 8018f14:	9203      	str	r2, [sp, #12]
 8018f16:	f11c 0c01 	adds.w	ip, ip, #1
 8018f1a:	f100 80ad 	bmi.w	8019078 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8018f1e:	45e6      	cmp	lr, ip
 8018f20:	f340 80aa 	ble.w	8019078 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8018f24:	f1ba 0f00 	cmp.w	sl, #0
 8018f28:	f000 80a6 	beq.w	8019078 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8018f2c:	2d00      	cmp	r5, #0
 8018f2e:	f2c0 809f 	blt.w	8019070 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8018f32:	42ab      	cmp	r3, r5
 8018f34:	f340 809c 	ble.w	8019070 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8018f38:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018f3c:	f816 9002 	ldrb.w	r9, [r6, r2]
 8018f40:	2203      	movs	r2, #3
 8018f42:	fb03 6c02 	mla	ip, r3, r2, r6
 8018f46:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8018f4a:	f89c e002 	ldrb.w	lr, [ip, #2]
 8018f4e:	9704      	str	r7, [sp, #16]
 8018f50:	3501      	adds	r5, #1
 8018f52:	f100 8098 	bmi.w	8019086 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8018f56:	42ab      	cmp	r3, r5
 8018f58:	f340 8095 	ble.w	8019086 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8018f5c:	f1b8 0f00 	cmp.w	r8, #0
 8018f60:	f000 8091 	beq.w	8019086 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8018f64:	f04f 0c03 	mov.w	ip, #3
 8018f68:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8018f6c:	5cb5      	ldrb	r5, [r6, r2]
 8018f6e:	fb03 620c 	mla	r2, r3, ip, r6
 8018f72:	fb03 630c 	mla	r3, r3, ip, r6
 8018f76:	7912      	ldrb	r2, [r2, #4]
 8018f78:	795e      	ldrb	r6, [r3, #5]
 8018f7a:	fa1f f388 	uxth.w	r3, r8
 8018f7e:	fa1f fc8a 	uxth.w	ip, sl
 8018f82:	fb03 f70c 	mul.w	r7, r3, ip
 8018f86:	011b      	lsls	r3, r3, #4
 8018f88:	9708      	str	r7, [sp, #32]
 8018f8a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8018f8e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8018f92:	1bdb      	subs	r3, r3, r7
 8018f94:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8018f98:	fa1f fc8c 	uxth.w	ip, ip
 8018f9c:	b29b      	uxth	r3, r3
 8018f9e:	9709      	str	r7, [sp, #36]	@ 0x24
 8018fa0:	ebaa 0a0c 	sub.w	sl, sl, ip
 8018fa4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fa8:	fa1f fa8a 	uxth.w	sl, sl
 8018fac:	ea6f 0807 	mvn.w	r8, r7
 8018fb0:	9f01      	ldr	r7, [sp, #4]
 8018fb2:	435f      	muls	r7, r3
 8018fb4:	9b05      	ldr	r3, [sp, #20]
 8018fb6:	fa5f f888 	uxtb.w	r8, r8
 8018fba:	fb0a 7703 	mla	r7, sl, r3, r7
 8018fbe:	9b08      	ldr	r3, [sp, #32]
 8018fc0:	fb14 f408 	smulbb	r4, r4, r8
 8018fc4:	fb0c 7709 	mla	r7, ip, r9, r7
 8018fc8:	fb10 f008 	smulbb	r0, r0, r8
 8018fcc:	fb11 f108 	smulbb	r1, r1, r8
 8018fd0:	fb03 7705 	mla	r7, r3, r5, r7
 8018fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fd6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8018fda:	fb07 4703 	mla	r7, r7, r3, r4
 8018fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fe0:	b2bf      	uxth	r7, r7
 8018fe2:	1c7c      	adds	r4, r7, #1
 8018fe4:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8018fe8:	1224      	asrs	r4, r4, #8
 8018fea:	f88b 4000 	strb.w	r4, [fp]
 8018fee:	9c02      	ldr	r4, [sp, #8]
 8018ff0:	435c      	muls	r4, r3
 8018ff2:	9b06      	ldr	r3, [sp, #24]
 8018ff4:	fb0a 4403 	mla	r4, sl, r3, r4
 8018ff8:	9b04      	ldr	r3, [sp, #16]
 8018ffa:	fb0c 4403 	mla	r4, ip, r3, r4
 8018ffe:	9b08      	ldr	r3, [sp, #32]
 8019000:	fb03 4402 	mla	r4, r3, r2, r4
 8019004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019008:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801900c:	fb04 0403 	mla	r4, r4, r3, r0
 8019010:	9b03      	ldr	r3, [sp, #12]
 8019012:	435a      	muls	r2, r3
 8019014:	b2a4      	uxth	r4, r4
 8019016:	4613      	mov	r3, r2
 8019018:	9a07      	ldr	r2, [sp, #28]
 801901a:	1c60      	adds	r0, r4, #1
 801901c:	fb0a 3a02 	mla	sl, sl, r2, r3
 8019020:	9b08      	ldr	r3, [sp, #32]
 8019022:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8019026:	fb0c ac0e 	mla	ip, ip, lr, sl
 801902a:	1224      	asrs	r4, r4, #8
 801902c:	fb03 c606 	mla	r6, r3, r6, ip
 8019030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019032:	f88b 4001 	strb.w	r4, [fp, #1]
 8019036:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801903a:	fb06 1103 	mla	r1, r6, r3, r1
 801903e:	b289      	uxth	r1, r1
 8019040:	1c4e      	adds	r6, r1, #1
 8019042:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8019046:	1209      	asrs	r1, r1, #8
 8019048:	f88b 1002 	strb.w	r1, [fp, #2]
 801904c:	b00d      	add	sp, #52	@ 0x34
 801904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019052:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019056:	9405      	str	r4, [sp, #20]
 8019058:	e74d      	b.n	8018ef6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801905a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801905e:	9401      	str	r4, [sp, #4]
 8019060:	9405      	str	r4, [sp, #20]
 8019062:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019066:	e756      	b.n	8018f16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8019068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801906c:	9401      	str	r4, [sp, #4]
 801906e:	e752      	b.n	8018f16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8019070:	468e      	mov	lr, r1
 8019072:	9004      	str	r0, [sp, #16]
 8019074:	46a1      	mov	r9, r4
 8019076:	e76b      	b.n	8018f50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8019078:	460e      	mov	r6, r1
 801907a:	4602      	mov	r2, r0
 801907c:	4625      	mov	r5, r4
 801907e:	468e      	mov	lr, r1
 8019080:	9004      	str	r0, [sp, #16]
 8019082:	46a1      	mov	r9, r4
 8019084:	e779      	b.n	8018f7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8019086:	460e      	mov	r6, r1
 8019088:	4602      	mov	r2, r0
 801908a:	4625      	mov	r5, r4
 801908c:	e775      	b.n	8018f7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801908e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801908e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019092:	b09f      	sub	sp, #124	@ 0x7c
 8019094:	920e      	str	r2, [sp, #56]	@ 0x38
 8019096:	9307      	str	r3, [sp, #28]
 8019098:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801909a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801909e:	901d      	str	r0, [sp, #116]	@ 0x74
 80190a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80190a2:	6850      	ldr	r0, [r2, #4]
 80190a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80190a6:	6812      	ldr	r2, [r2, #0]
 80190a8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80190ac:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 80190b0:	fb00 1303 	mla	r3, r0, r3, r1
 80190b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190b8:	18d3      	adds	r3, r2, r3
 80190ba:	9308      	str	r3, [sp, #32]
 80190bc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80190c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190c4:	43db      	mvns	r3, r3
 80190c6:	b2db      	uxtb	r3, r3
 80190c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80190ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	dc03      	bgt.n	80190d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80190d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	f340 81f5 	ble.w	80194c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80190d8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80190da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80190de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80190e2:	1e48      	subs	r0, r1, #1
 80190e4:	1e54      	subs	r4, r2, #1
 80190e6:	9b07      	ldr	r3, [sp, #28]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f340 80d5 	ble.w	8019298 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80190ee:	ea5f 452a 	movs.w	r5, sl, asr #16
 80190f2:	ea4f 4328 	mov.w	r3, r8, asr #16
 80190f6:	d406      	bmi.n	8019106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80190f8:	4285      	cmp	r5, r0
 80190fa:	da04      	bge.n	8019106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	db02      	blt.n	8019106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019100:	42a3      	cmp	r3, r4
 8019102:	f2c0 80ca 	blt.w	801929a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8019106:	3501      	adds	r5, #1
 8019108:	f100 80bb 	bmi.w	8019282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801910c:	42a9      	cmp	r1, r5
 801910e:	f2c0 80b8 	blt.w	8019282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8019112:	3301      	adds	r3, #1
 8019114:	f100 80b5 	bmi.w	8019282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8019118:	429a      	cmp	r2, r3
 801911a:	f2c0 80b2 	blt.w	8019282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801911e:	9b07      	ldr	r3, [sp, #28]
 8019120:	9d08      	ldr	r5, [sp, #32]
 8019122:	930d      	str	r3, [sp, #52]	@ 0x34
 8019124:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019126:	2b00      	cmp	r3, #0
 8019128:	f340 80d6 	ble.w	80192d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801912c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801912e:	ea4f 4428 	mov.w	r4, r8, asr #16
 8019132:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8019134:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8019138:	68c6      	ldr	r6, [r0, #12]
 801913a:	ea5f 402a 	movs.w	r0, sl, asr #16
 801913e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8019142:	689b      	ldr	r3, [r3, #8]
 8019144:	f100 810f 	bmi.w	8019366 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019148:	1e5f      	subs	r7, r3, #1
 801914a:	42b8      	cmp	r0, r7
 801914c:	f280 810b 	bge.w	8019366 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019150:	2c00      	cmp	r4, #0
 8019152:	f2c0 8108 	blt.w	8019366 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019156:	1e77      	subs	r7, r6, #1
 8019158:	42bc      	cmp	r4, r7
 801915a:	f280 8104 	bge.w	8019366 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801915e:	b21b      	sxth	r3, r3
 8019160:	fb04 0003 	mla	r0, r4, r3, r0
 8019164:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019166:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801916a:	1826      	adds	r6, r4, r0
 801916c:	5c24      	ldrb	r4, [r4, r0]
 801916e:	78b7      	ldrb	r7, [r6, #2]
 8019170:	7870      	ldrb	r0, [r6, #1]
 8019172:	970f      	str	r7, [sp, #60]	@ 0x3c
 8019174:	7977      	ldrb	r7, [r6, #5]
 8019176:	f896 e003 	ldrb.w	lr, [r6, #3]
 801917a:	f896 c004 	ldrb.w	ip, [r6, #4]
 801917e:	9710      	str	r7, [sp, #64]	@ 0x40
 8019180:	b1c9      	cbz	r1, 80191b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019182:	f04f 0b03 	mov.w	fp, #3
 8019186:	f06f 0904 	mvn.w	r9, #4
 801918a:	3605      	adds	r6, #5
 801918c:	fb13 930b 	smlabb	r3, r3, fp, r9
 8019190:	eb06 0b03 	add.w	fp, r6, r3
 8019194:	5cf3      	ldrb	r3, [r6, r3]
 8019196:	9311      	str	r3, [sp, #68]	@ 0x44
 8019198:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801919c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801919e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80191a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80191a4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80191a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80191aa:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80191ae:	9314      	str	r3, [sp, #80]	@ 0x50
 80191b0:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80191b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80191b6:	b292      	uxth	r2, r2
 80191b8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80191ba:	b289      	uxth	r1, r1
 80191bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80191c0:	fb02 f601 	mul.w	r6, r2, r1
 80191c4:	0112      	lsls	r2, r2, #4
 80191c6:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80191ca:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 80191ce:	1b92      	subs	r2, r2, r6
 80191d0:	b289      	uxth	r1, r1
 80191d2:	b292      	uxth	r2, r2
 80191d4:	eba9 0901 	sub.w	r9, r9, r1
 80191d8:	fb02 fe0e 	mul.w	lr, r2, lr
 80191dc:	fa1f f989 	uxth.w	r9, r9
 80191e0:	fb02 fc0c 	mul.w	ip, r2, ip
 80191e4:	fb09 e404 	mla	r4, r9, r4, lr
 80191e8:	f895 e000 	ldrb.w	lr, [r5]
 80191ec:	fb09 c000 	mla	r0, r9, r0, ip
 80191f0:	fb01 4407 	mla	r4, r1, r7, r4
 80191f4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80191f6:	fb06 4407 	mla	r4, r6, r7, r4
 80191fa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80191fc:	fb1e fe07 	smulbb	lr, lr, r7
 8019200:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019204:	fb04 e403 	mla	r4, r4, r3, lr
 8019208:	b2a4      	uxth	r4, r4
 801920a:	f104 0e01 	add.w	lr, r4, #1
 801920e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8019212:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019214:	fb01 0004 	mla	r0, r1, r4, r0
 8019218:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801921a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801921e:	fb06 0004 	mla	r0, r6, r4, r0
 8019222:	786c      	ldrb	r4, [r5, #1]
 8019224:	f885 e000 	strb.w	lr, [r5]
 8019228:	fb14 f407 	smulbb	r4, r4, r7
 801922c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019230:	fb00 4003 	mla	r0, r0, r3, r4
 8019234:	b280      	uxth	r0, r0
 8019236:	1c44      	adds	r4, r0, #1
 8019238:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801923c:	1200      	asrs	r0, r0, #8
 801923e:	7068      	strb	r0, [r5, #1]
 8019240:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019242:	4342      	muls	r2, r0
 8019244:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019246:	fb09 2200 	mla	r2, r9, r0, r2
 801924a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801924c:	fb01 2100 	mla	r1, r1, r0, r2
 8019250:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019252:	fb06 1602 	mla	r6, r6, r2, r1
 8019256:	78a9      	ldrb	r1, [r5, #2]
 8019258:	fb11 f107 	smulbb	r1, r1, r7
 801925c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019260:	fb06 1303 	mla	r3, r6, r3, r1
 8019264:	b29b      	uxth	r3, r3
 8019266:	1c5e      	adds	r6, r3, #1
 8019268:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801926c:	121b      	asrs	r3, r3, #8
 801926e:	70ab      	strb	r3, [r5, #2]
 8019270:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8019272:	3503      	adds	r5, #3
 8019274:	449a      	add	sl, r3
 8019276:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8019278:	4498      	add	r8, r3
 801927a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801927c:	3b01      	subs	r3, #1
 801927e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019280:	e750      	b.n	8019124 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019282:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8019284:	449a      	add	sl, r3
 8019286:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8019288:	4498      	add	r8, r3
 801928a:	9b07      	ldr	r3, [sp, #28]
 801928c:	3b01      	subs	r3, #1
 801928e:	9307      	str	r3, [sp, #28]
 8019290:	9b08      	ldr	r3, [sp, #32]
 8019292:	3303      	adds	r3, #3
 8019294:	9308      	str	r3, [sp, #32]
 8019296:	e726      	b.n	80190e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019298:	d026      	beq.n	80192e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801929a:	9b07      	ldr	r3, [sp, #28]
 801929c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801929e:	3b01      	subs	r3, #1
 80192a0:	fb00 a003 	mla	r0, r0, r3, sl
 80192a4:	1400      	asrs	r0, r0, #16
 80192a6:	f53f af3a 	bmi.w	801911e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192aa:	3901      	subs	r1, #1
 80192ac:	4288      	cmp	r0, r1
 80192ae:	f6bf af36 	bge.w	801911e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192b2:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80192b4:	fb01 8303 	mla	r3, r1, r3, r8
 80192b8:	141b      	asrs	r3, r3, #16
 80192ba:	f53f af30 	bmi.w	801911e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192be:	3a01      	subs	r2, #1
 80192c0:	4293      	cmp	r3, r2
 80192c2:	f6bf af2c 	bge.w	801911e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192c6:	9b08      	ldr	r3, [sp, #32]
 80192c8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80192cc:	1cdd      	adds	r5, r3, #3
 80192ce:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 80192d2:	f1bc 0f00 	cmp.w	ip, #0
 80192d6:	dc5f      	bgt.n	8019398 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80192d8:	9b07      	ldr	r3, [sp, #28]
 80192da:	9a08      	ldr	r2, [sp, #32]
 80192dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80192e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192e4:	441a      	add	r2, r3
 80192e6:	9208      	str	r2, [sp, #32]
 80192e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	f340 80e9 	ble.w	80194c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80192f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80192f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80192f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80192fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80192fe:	eef0 6a62 	vmov.f32	s13, s5
 8019302:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019306:	ee31 1a05 	vadd.f32	s2, s2, s10
 801930a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801930e:	ee16 aa90 	vmov	sl, s13
 8019312:	eef0 6a43 	vmov.f32	s13, s6
 8019316:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801931a:	ee16 8a90 	vmov	r8, s13
 801931e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019322:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019326:	ee77 2a62 	vsub.f32	s5, s14, s5
 801932a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801932e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019332:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019336:	ee12 2a90 	vmov	r2, s5
 801933a:	eef0 2a47 	vmov.f32	s5, s14
 801933e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019342:	ee13 2a10 	vmov	r2, s6
 8019346:	932b      	str	r3, [sp, #172]	@ 0xac
 8019348:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801934a:	eeb0 3a67 	vmov.f32	s6, s15
 801934e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019352:	932c      	str	r3, [sp, #176]	@ 0xb0
 8019354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019358:	3b01      	subs	r3, #1
 801935a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801935c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801935e:	bf08      	it	eq
 8019360:	4613      	moveq	r3, r2
 8019362:	9307      	str	r3, [sp, #28]
 8019364:	e6b1      	b.n	80190ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019366:	1c47      	adds	r7, r0, #1
 8019368:	d482      	bmi.n	8019270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801936a:	42bb      	cmp	r3, r7
 801936c:	db80      	blt.n	8019270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801936e:	1c67      	adds	r7, r4, #1
 8019370:	f53f af7e 	bmi.w	8019270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019374:	42be      	cmp	r6, r7
 8019376:	f6ff af7b 	blt.w	8019270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801937a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801937c:	b236      	sxth	r6, r6
 801937e:	9001      	str	r0, [sp, #4]
 8019380:	b21b      	sxth	r3, r3
 8019382:	9600      	str	r6, [sp, #0]
 8019384:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8019386:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801938a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801938e:	4629      	mov	r1, r5
 8019390:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019392:	f7ff fd82 	bl	8018e9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8019396:	e76b      	b.n	8019270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019398:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801939a:	ea4f 402a 	mov.w	r0, sl, asr #16
 801939e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80193a2:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80193a6:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80193aa:	ea4f 4128 	mov.w	r1, r8, asr #16
 80193ae:	fb07 0101 	mla	r1, r7, r1, r0
 80193b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80193b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80193b8:	1844      	adds	r4, r0, r1
 80193ba:	5c40      	ldrb	r0, [r0, r1]
 80193bc:	78a6      	ldrb	r6, [r4, #2]
 80193be:	7861      	ldrb	r1, [r4, #1]
 80193c0:	960f      	str	r6, [sp, #60]	@ 0x3c
 80193c2:	78e6      	ldrb	r6, [r4, #3]
 80193c4:	910d      	str	r1, [sp, #52]	@ 0x34
 80193c6:	9610      	str	r6, [sp, #64]	@ 0x40
 80193c8:	f894 9004 	ldrb.w	r9, [r4, #4]
 80193cc:	f894 b005 	ldrb.w	fp, [r4, #5]
 80193d0:	b192      	cbz	r2, 80193f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80193d2:	f06f 0604 	mvn.w	r6, #4
 80193d6:	2103      	movs	r1, #3
 80193d8:	3405      	adds	r4, #5
 80193da:	fb17 6701 	smlabb	r7, r7, r1, r6
 80193de:	19e6      	adds	r6, r4, r7
 80193e0:	5de4      	ldrb	r4, [r4, r7]
 80193e2:	9417      	str	r4, [sp, #92]	@ 0x5c
 80193e4:	7874      	ldrb	r4, [r6, #1]
 80193e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80193e8:	78b4      	ldrb	r4, [r6, #2]
 80193ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80193ec:	78f4      	ldrb	r4, [r6, #3]
 80193ee:	9418      	str	r4, [sp, #96]	@ 0x60
 80193f0:	7934      	ldrb	r4, [r6, #4]
 80193f2:	941a      	str	r4, [sp, #104]	@ 0x68
 80193f4:	7974      	ldrb	r4, [r6, #5]
 80193f6:	941c      	str	r4, [sp, #112]	@ 0x70
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80193fc:	b292      	uxth	r2, r2
 80193fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019400:	3503      	adds	r5, #3
 8019402:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019406:	fb03 f402 	mul.w	r4, r3, r2
 801940a:	011b      	lsls	r3, r3, #4
 801940c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019410:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8019414:	1b1b      	subs	r3, r3, r4
 8019416:	b292      	uxth	r2, r2
 8019418:	b29b      	uxth	r3, r3
 801941a:	1ab6      	subs	r6, r6, r2
 801941c:	435f      	muls	r7, r3
 801941e:	b2b6      	uxth	r6, r6
 8019420:	fb03 f909 	mul.w	r9, r3, r9
 8019424:	fb03 fb0b 	mul.w	fp, r3, fp
 8019428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801942a:	fb06 7000 	mla	r0, r6, r0, r7
 801942e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8019430:	fb06 bb03 	mla	fp, r6, r3, fp
 8019434:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019436:	fb02 0007 	mla	r0, r2, r7, r0
 801943a:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801943c:	fb02 bb03 	mla	fp, r2, r3, fp
 8019440:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8019442:	fb04 0007 	mla	r0, r4, r7, r0
 8019446:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801944a:	fb17 f701 	smulbb	r7, r7, r1
 801944e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019452:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019454:	fb00 700e 	mla	r0, r0, lr, r7
 8019458:	fb06 9101 	mla	r1, r6, r1, r9
 801945c:	b280      	uxth	r0, r0
 801945e:	1c47      	adds	r7, r0, #1
 8019460:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8019464:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8019466:	1200      	asrs	r0, r0, #8
 8019468:	f805 0c06 	strb.w	r0, [r5, #-6]
 801946c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801946e:	fb02 1100 	mla	r1, r2, r0, r1
 8019472:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8019474:	fb04 1100 	mla	r1, r4, r0, r1
 8019478:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801947c:	fb04 b403 	mla	r4, r4, r3, fp
 8019480:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8019484:	fb10 f007 	smulbb	r0, r0, r7
 8019488:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801948c:	fb13 f307 	smulbb	r3, r3, r7
 8019490:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019494:	fb01 010e 	mla	r1, r1, lr, r0
 8019498:	fb04 340e 	mla	r4, r4, lr, r3
 801949c:	b289      	uxth	r1, r1
 801949e:	b2a4      	uxth	r4, r4
 80194a0:	1c48      	adds	r0, r1, #1
 80194a2:	1c63      	adds	r3, r4, #1
 80194a4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80194a8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80194ac:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80194ae:	1209      	asrs	r1, r1, #8
 80194b0:	1224      	asrs	r4, r4, #8
 80194b2:	449a      	add	sl, r3
 80194b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80194b6:	f805 1c05 	strb.w	r1, [r5, #-5]
 80194ba:	f805 4c04 	strb.w	r4, [r5, #-4]
 80194be:	4498      	add	r8, r3
 80194c0:	e707      	b.n	80192d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80194c2:	b01f      	add	sp, #124	@ 0x7c
 80194c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194c8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80194c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194cc:	b087      	sub	sp, #28
 80194ce:	780d      	ldrb	r5, [r1, #0]
 80194d0:	784c      	ldrb	r4, [r1, #1]
 80194d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80194d6:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 80194da:	9004      	str	r0, [sp, #16]
 80194dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80194e0:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 80194e4:	9005      	str	r0, [sp, #20]
 80194e6:	fb06 bc03 	mla	ip, r6, r3, fp
 80194ea:	2e00      	cmp	r6, #0
 80194ec:	7888      	ldrb	r0, [r1, #2]
 80194ee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80194f2:	eb02 090c 	add.w	r9, r2, ip
 80194f6:	f2c0 8084 	blt.w	8019602 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80194fa:	42b7      	cmp	r7, r6
 80194fc:	f340 8081 	ble.w	8019602 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8019500:	f1bb 0f00 	cmp.w	fp, #0
 8019504:	db79      	blt.n	80195fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8019506:	455b      	cmp	r3, fp
 8019508:	dd77      	ble.n	80195fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801950a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801950e:	9201      	str	r2, [sp, #4]
 8019510:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019514:	9202      	str	r2, [sp, #8]
 8019516:	f899 2002 	ldrb.w	r2, [r9, #2]
 801951a:	9203      	str	r2, [sp, #12]
 801951c:	f11b 0201 	adds.w	r2, fp, #1
 8019520:	d476      	bmi.n	8019610 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019522:	4293      	cmp	r3, r2
 8019524:	dd74      	ble.n	8019610 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019526:	9a04      	ldr	r2, [sp, #16]
 8019528:	2a00      	cmp	r2, #0
 801952a:	d071      	beq.n	8019610 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801952c:	f899 8003 	ldrb.w	r8, [r9, #3]
 8019530:	f899 c004 	ldrb.w	ip, [r9, #4]
 8019534:	f899 a005 	ldrb.w	sl, [r9, #5]
 8019538:	3601      	adds	r6, #1
 801953a:	d471      	bmi.n	8019620 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801953c:	42b7      	cmp	r7, r6
 801953e:	dd6f      	ble.n	8019620 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019540:	9a05      	ldr	r2, [sp, #20]
 8019542:	2a00      	cmp	r2, #0
 8019544:	d06c      	beq.n	8019620 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019546:	f1bb 0f00 	cmp.w	fp, #0
 801954a:	db65      	blt.n	8019618 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801954c:	455b      	cmp	r3, fp
 801954e:	dd63      	ble.n	8019618 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019550:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019554:	f819 e002 	ldrb.w	lr, [r9, r2]
 8019558:	2203      	movs	r2, #3
 801955a:	fb03 9602 	mla	r6, r3, r2, r9
 801955e:	7877      	ldrb	r7, [r6, #1]
 8019560:	78b6      	ldrb	r6, [r6, #2]
 8019562:	f11b 0b01 	adds.w	fp, fp, #1
 8019566:	d40c      	bmi.n	8019582 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019568:	455b      	cmp	r3, fp
 801956a:	dd0a      	ble.n	8019582 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801956c:	9a04      	ldr	r2, [sp, #16]
 801956e:	b142      	cbz	r2, 8019582 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019570:	2203      	movs	r2, #3
 8019572:	fb13 2002 	smlabb	r0, r3, r2, r2
 8019576:	f819 5000 	ldrb.w	r5, [r9, r0]
 801957a:	fb03 9002 	mla	r0, r3, r2, r9
 801957e:	7904      	ldrb	r4, [r0, #4]
 8019580:	7940      	ldrb	r0, [r0, #5]
 8019582:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019586:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801958a:	fb03 fb02 	mul.w	fp, r3, r2
 801958e:	011b      	lsls	r3, r3, #4
 8019590:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8019594:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8019598:	eba3 030b 	sub.w	r3, r3, fp
 801959c:	b292      	uxth	r2, r2
 801959e:	b29b      	uxth	r3, r3
 80195a0:	eba9 0902 	sub.w	r9, r9, r2
 80195a4:	9304      	str	r3, [sp, #16]
 80195a6:	fa1f f989 	uxth.w	r9, r9
 80195aa:	fb03 f808 	mul.w	r8, r3, r8
 80195ae:	9b01      	ldr	r3, [sp, #4]
 80195b0:	fb09 8803 	mla	r8, r9, r3, r8
 80195b4:	9b04      	ldr	r3, [sp, #16]
 80195b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80195ba:	9b02      	ldr	r3, [sp, #8]
 80195bc:	fb02 880e 	mla	r8, r2, lr, r8
 80195c0:	fb09 cc03 	mla	ip, r9, r3, ip
 80195c4:	9b04      	ldr	r3, [sp, #16]
 80195c6:	fb0b 8805 	mla	r8, fp, r5, r8
 80195ca:	fb02 c707 	mla	r7, r2, r7, ip
 80195ce:	fb03 f30a 	mul.w	r3, r3, sl
 80195d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80195d6:	fb0b 7404 	mla	r4, fp, r4, r7
 80195da:	f881 8000 	strb.w	r8, [r1]
 80195de:	1224      	asrs	r4, r4, #8
 80195e0:	704c      	strb	r4, [r1, #1]
 80195e2:	9c03      	ldr	r4, [sp, #12]
 80195e4:	fb09 3904 	mla	r9, r9, r4, r3
 80195e8:	fb02 9206 	mla	r2, r2, r6, r9
 80195ec:	fb0b 2000 	mla	r0, fp, r0, r2
 80195f0:	1200      	asrs	r0, r0, #8
 80195f2:	7088      	strb	r0, [r1, #2]
 80195f4:	b007      	add	sp, #28
 80195f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195fa:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80195fe:	9501      	str	r5, [sp, #4]
 8019600:	e78c      	b.n	801951c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8019602:	4682      	mov	sl, r0
 8019604:	46a4      	mov	ip, r4
 8019606:	46a8      	mov	r8, r5
 8019608:	9501      	str	r5, [sp, #4]
 801960a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801960e:	e793      	b.n	8019538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019610:	4682      	mov	sl, r0
 8019612:	46a4      	mov	ip, r4
 8019614:	46a8      	mov	r8, r5
 8019616:	e78f      	b.n	8019538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019618:	4606      	mov	r6, r0
 801961a:	4627      	mov	r7, r4
 801961c:	46ae      	mov	lr, r5
 801961e:	e7a0      	b.n	8019562 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8019620:	4606      	mov	r6, r0
 8019622:	4627      	mov	r7, r4
 8019624:	46ae      	mov	lr, r5
 8019626:	e7ac      	b.n	8019582 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08019628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962c:	b09b      	sub	sp, #108	@ 0x6c
 801962e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019630:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019632:	9019      	str	r0, [sp, #100]	@ 0x64
 8019634:	9109      	str	r1, [sp, #36]	@ 0x24
 8019636:	6850      	ldr	r0, [r2, #4]
 8019638:	9306      	str	r3, [sp, #24]
 801963a:	6812      	ldr	r2, [r2, #0]
 801963c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8019640:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8019644:	fb00 1303 	mla	r3, r0, r3, r1
 8019648:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801964c:	18d3      	adds	r3, r2, r3
 801964e:	9307      	str	r3, [sp, #28]
 8019650:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	9308      	str	r3, [sp, #32]
 8019656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019658:	2b00      	cmp	r3, #0
 801965a:	dc03      	bgt.n	8019664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801965c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801965e:	2b00      	cmp	r3, #0
 8019660:	f340 81ab 	ble.w	80199ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019664:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8019666:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801966a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801966e:	1e48      	subs	r0, r1, #1
 8019670:	1e55      	subs	r5, r2, #1
 8019672:	9b06      	ldr	r3, [sp, #24]
 8019674:	2b00      	cmp	r3, #0
 8019676:	f340 80b1 	ble.w	80197dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801967a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801967e:	ea4f 4324 	mov.w	r3, r4, asr #16
 8019682:	d406      	bmi.n	8019692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019684:	4286      	cmp	r6, r0
 8019686:	da04      	bge.n	8019692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019688:	2b00      	cmp	r3, #0
 801968a:	db02      	blt.n	8019692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801968c:	42ab      	cmp	r3, r5
 801968e:	f2c0 80a6 	blt.w	80197de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8019692:	3601      	adds	r6, #1
 8019694:	f100 8097 	bmi.w	80197c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019698:	42b1      	cmp	r1, r6
 801969a:	f2c0 8094 	blt.w	80197c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801969e:	3301      	adds	r3, #1
 80196a0:	f100 8091 	bmi.w	80197c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80196a4:	429a      	cmp	r2, r3
 80196a6:	f2c0 808e 	blt.w	80197c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80196aa:	9b06      	ldr	r3, [sp, #24]
 80196ac:	9e07      	ldr	r6, [sp, #28]
 80196ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80196b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	f340 80b0 	ble.w	8019818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80196b8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80196ba:	1425      	asrs	r5, r4, #16
 80196bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80196be:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80196c2:	68c7      	ldr	r7, [r0, #12]
 80196c4:	ea5f 402b 	movs.w	r0, fp, asr #16
 80196c8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80196cc:	689b      	ldr	r3, [r3, #8]
 80196ce:	f100 80ea 	bmi.w	80198a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80196d2:	f103 3cff 	add.w	ip, r3, #4294967295
 80196d6:	4560      	cmp	r0, ip
 80196d8:	f280 80e5 	bge.w	80198a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80196dc:	2d00      	cmp	r5, #0
 80196de:	f2c0 80e2 	blt.w	80198a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80196e2:	f107 3cff 	add.w	ip, r7, #4294967295
 80196e6:	4565      	cmp	r5, ip
 80196e8:	f280 80dd 	bge.w	80198a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80196ec:	b21b      	sxth	r3, r3
 80196ee:	fb05 0003 	mla	r0, r5, r3, r0
 80196f2:	9d08      	ldr	r5, [sp, #32]
 80196f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80196f8:	182f      	adds	r7, r5, r0
 80196fa:	5c2d      	ldrb	r5, [r5, r0]
 80196fc:	7878      	ldrb	r0, [r7, #1]
 80196fe:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019702:	900c      	str	r0, [sp, #48]	@ 0x30
 8019704:	f897 9003 	ldrb.w	r9, [r7, #3]
 8019708:	f897 8004 	ldrb.w	r8, [r7, #4]
 801970c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019710:	b1c9      	cbz	r1, 8019746 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019712:	f04f 0c03 	mov.w	ip, #3
 8019716:	f06f 0004 	mvn.w	r0, #4
 801971a:	3705      	adds	r7, #5
 801971c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019720:	eb07 0c03 	add.w	ip, r7, r3
 8019724:	5cfb      	ldrb	r3, [r7, r3]
 8019726:	930d      	str	r3, [sp, #52]	@ 0x34
 8019728:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801972c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801972e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019732:	9311      	str	r3, [sp, #68]	@ 0x44
 8019734:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8019738:	930e      	str	r3, [sp, #56]	@ 0x38
 801973a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801973e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019740:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019744:	9312      	str	r3, [sp, #72]	@ 0x48
 8019746:	b292      	uxth	r2, r2
 8019748:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801974a:	b289      	uxth	r1, r1
 801974c:	fb02 f301 	mul.w	r3, r2, r1
 8019750:	0112      	lsls	r2, r2, #4
 8019752:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8019756:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801975a:	1ad2      	subs	r2, r2, r3
 801975c:	b289      	uxth	r1, r1
 801975e:	b292      	uxth	r2, r2
 8019760:	1a7f      	subs	r7, r7, r1
 8019762:	fb02 f909 	mul.w	r9, r2, r9
 8019766:	b2bf      	uxth	r7, r7
 8019768:	fb02 f808 	mul.w	r8, r2, r8
 801976c:	fb02 fa0a 	mul.w	sl, r2, sl
 8019770:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019772:	fb07 9905 	mla	r9, r7, r5, r9
 8019776:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019778:	fb07 8800 	mla	r8, r7, r0, r8
 801977c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801977e:	fb07 aa0e 	mla	sl, r7, lr, sl
 8019782:	fb01 9905 	mla	r9, r1, r5, r9
 8019786:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8019788:	fb01 8800 	mla	r8, r1, r0, r8
 801978c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801978e:	fb01 a102 	mla	r1, r1, r2, sl
 8019792:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019794:	fb03 9905 	mla	r9, r3, r5, r9
 8019798:	fb03 8800 	mla	r8, r3, r0, r8
 801979c:	fb03 1302 	mla	r3, r3, r2, r1
 80197a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80197a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80197a8:	121b      	asrs	r3, r3, #8
 80197aa:	f886 9000 	strb.w	r9, [r6]
 80197ae:	f886 8001 	strb.w	r8, [r6, #1]
 80197b2:	70b3      	strb	r3, [r6, #2]
 80197b4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80197b6:	3603      	adds	r6, #3
 80197b8:	449b      	add	fp, r3
 80197ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80197bc:	441c      	add	r4, r3
 80197be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80197c0:	3b01      	subs	r3, #1
 80197c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80197c4:	e774      	b.n	80196b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80197c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80197c8:	449b      	add	fp, r3
 80197ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80197cc:	441c      	add	r4, r3
 80197ce:	9b06      	ldr	r3, [sp, #24]
 80197d0:	3b01      	subs	r3, #1
 80197d2:	9306      	str	r3, [sp, #24]
 80197d4:	9b07      	ldr	r3, [sp, #28]
 80197d6:	3303      	adds	r3, #3
 80197d8:	9307      	str	r3, [sp, #28]
 80197da:	e74a      	b.n	8019672 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80197dc:	d024      	beq.n	8019828 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80197de:	9b06      	ldr	r3, [sp, #24]
 80197e0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80197e2:	3b01      	subs	r3, #1
 80197e4:	fb00 b003 	mla	r0, r0, r3, fp
 80197e8:	1400      	asrs	r0, r0, #16
 80197ea:	f53f af5e 	bmi.w	80196aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80197ee:	3901      	subs	r1, #1
 80197f0:	4288      	cmp	r0, r1
 80197f2:	f6bf af5a 	bge.w	80196aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80197f6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80197f8:	fb01 4303 	mla	r3, r1, r3, r4
 80197fc:	141b      	asrs	r3, r3, #16
 80197fe:	f53f af54 	bmi.w	80196aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019802:	3a01      	subs	r2, #1
 8019804:	4293      	cmp	r3, r2
 8019806:	f6bf af50 	bge.w	80196aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801980a:	9b07      	ldr	r3, [sp, #28]
 801980c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019810:	1cde      	adds	r6, r3, #3
 8019812:	f1be 0f00 	cmp.w	lr, #0
 8019816:	dc5f      	bgt.n	80198d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019818:	9b06      	ldr	r3, [sp, #24]
 801981a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801981e:	9b07      	ldr	r3, [sp, #28]
 8019820:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019824:	4423      	add	r3, r4
 8019826:	9307      	str	r3, [sp, #28]
 8019828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801982a:	2b00      	cmp	r3, #0
 801982c:	f340 80c5 	ble.w	80199ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019834:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019836:	ee30 0a04 	vadd.f32	s0, s0, s8
 801983a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801983e:	eef0 6a62 	vmov.f32	s13, s5
 8019842:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019846:	ee31 1a05 	vadd.f32	s2, s2, s10
 801984a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801984e:	ee16 ba90 	vmov	fp, s13
 8019852:	eef0 6a43 	vmov.f32	s13, s6
 8019856:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801985a:	ee16 4a90 	vmov	r4, s13
 801985e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019862:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019866:	ee77 2a62 	vsub.f32	s5, s14, s5
 801986a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801986e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019872:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019876:	ee12 2a90 	vmov	r2, s5
 801987a:	eef0 2a47 	vmov.f32	s5, s14
 801987e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019882:	ee13 2a10 	vmov	r2, s6
 8019886:	9327      	str	r3, [sp, #156]	@ 0x9c
 8019888:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801988a:	eeb0 3a67 	vmov.f32	s6, s15
 801988e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019892:	9328      	str	r3, [sp, #160]	@ 0xa0
 8019894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019898:	3b01      	subs	r3, #1
 801989a:	9309      	str	r3, [sp, #36]	@ 0x24
 801989c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801989e:	bf08      	it	eq
 80198a0:	4613      	moveq	r3, r2
 80198a2:	9306      	str	r3, [sp, #24]
 80198a4:	e6d7      	b.n	8019656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80198a6:	f110 0c01 	adds.w	ip, r0, #1
 80198aa:	d483      	bmi.n	80197b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80198ac:	4563      	cmp	r3, ip
 80198ae:	db81      	blt.n	80197b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80198b0:	f115 0c01 	adds.w	ip, r5, #1
 80198b4:	f53f af7e 	bmi.w	80197b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80198b8:	4567      	cmp	r7, ip
 80198ba:	f6ff af7b 	blt.w	80197b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80198be:	b23f      	sxth	r7, r7
 80198c0:	b21b      	sxth	r3, r3
 80198c2:	9700      	str	r7, [sp, #0]
 80198c4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80198c8:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80198cc:	9a08      	ldr	r2, [sp, #32]
 80198ce:	4631      	mov	r1, r6
 80198d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80198d2:	f7ff fdf9 	bl	80194c8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80198d6:	e76d      	b.n	80197b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80198d8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80198da:	ea4f 402b 	mov.w	r0, fp, asr #16
 80198de:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80198e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80198e6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80198ea:	1421      	asrs	r1, r4, #16
 80198ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80198ee:	fb0c 0101 	mla	r1, ip, r1, r0
 80198f2:	9808      	ldr	r0, [sp, #32]
 80198f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80198f8:	1845      	adds	r5, r0, r1
 80198fa:	5c40      	ldrb	r0, [r0, r1]
 80198fc:	796f      	ldrb	r7, [r5, #5]
 80198fe:	7869      	ldrb	r1, [r5, #1]
 8019900:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019904:	f895 a003 	ldrb.w	sl, [r5, #3]
 8019908:	f895 9004 	ldrb.w	r9, [r5, #4]
 801990c:	970c      	str	r7, [sp, #48]	@ 0x30
 801990e:	b1a2      	cbz	r2, 801993a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8019910:	2703      	movs	r7, #3
 8019912:	f06f 0304 	mvn.w	r3, #4
 8019916:	3505      	adds	r5, #5
 8019918:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801991c:	eb05 070c 	add.w	r7, r5, ip
 8019920:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019924:	9513      	str	r5, [sp, #76]	@ 0x4c
 8019926:	787d      	ldrb	r5, [r7, #1]
 8019928:	9515      	str	r5, [sp, #84]	@ 0x54
 801992a:	78bd      	ldrb	r5, [r7, #2]
 801992c:	9517      	str	r5, [sp, #92]	@ 0x5c
 801992e:	78fd      	ldrb	r5, [r7, #3]
 8019930:	9514      	str	r5, [sp, #80]	@ 0x50
 8019932:	793d      	ldrb	r5, [r7, #4]
 8019934:	9516      	str	r5, [sp, #88]	@ 0x58
 8019936:	797d      	ldrb	r5, [r7, #5]
 8019938:	9518      	str	r5, [sp, #96]	@ 0x60
 801993a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801993e:	b292      	uxth	r2, r2
 8019940:	3603      	adds	r6, #3
 8019942:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019946:	fb03 f502 	mul.w	r5, r3, r2
 801994a:	011b      	lsls	r3, r3, #4
 801994c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8019950:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8019954:	1b5b      	subs	r3, r3, r5
 8019956:	b292      	uxth	r2, r2
 8019958:	b29b      	uxth	r3, r3
 801995a:	1abf      	subs	r7, r7, r2
 801995c:	fb03 f909 	mul.w	r9, r3, r9
 8019960:	b2bf      	uxth	r7, r7
 8019962:	fb03 fa0a 	mul.w	sl, r3, sl
 8019966:	fb07 9901 	mla	r9, r7, r1, r9
 801996a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801996c:	fb07 aa00 	mla	sl, r7, r0, sl
 8019970:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019972:	fb02 9901 	mla	r9, r2, r1, r9
 8019976:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8019978:	fb02 aa00 	mla	sl, r2, r0, sl
 801997c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801997e:	fb05 9901 	mla	r9, r5, r1, r9
 8019982:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019984:	fb05 aa00 	mla	sl, r5, r0, sl
 8019988:	434b      	muls	r3, r1
 801998a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801998c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019990:	fb07 3308 	mla	r3, r7, r8, r3
 8019994:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019998:	f806 ac06 	strb.w	sl, [r6, #-6]
 801999c:	fb02 3201 	mla	r2, r2, r1, r3
 80199a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80199a2:	f806 9c05 	strb.w	r9, [r6, #-5]
 80199a6:	fb05 2503 	mla	r5, r5, r3, r2
 80199aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80199ac:	122d      	asrs	r5, r5, #8
 80199ae:	449b      	add	fp, r3
 80199b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80199b2:	f806 5c04 	strb.w	r5, [r6, #-4]
 80199b6:	441c      	add	r4, r3
 80199b8:	e72b      	b.n	8019812 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80199ba:	b01b      	add	sp, #108	@ 0x6c
 80199bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80199c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c4:	b087      	sub	sp, #28
 80199c6:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80199ca:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80199ce:	fb05 7003 	mla	r0, r5, r3, r7
 80199d2:	2d00      	cmp	r5, #0
 80199d4:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80199d8:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80199dc:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80199e0:	f2c0 811f 	blt.w	8019c22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80199e4:	45a8      	cmp	r8, r5
 80199e6:	f340 811c 	ble.w	8019c22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80199ea:	2f00      	cmp	r7, #0
 80199ec:	f2c0 8117 	blt.w	8019c1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80199f0:	42bb      	cmp	r3, r7
 80199f2:	f340 8114 	ble.w	8019c1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80199f6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80199fa:	1c7a      	adds	r2, r7, #1
 80199fc:	f100 8114 	bmi.w	8019c28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8019a00:	4293      	cmp	r3, r2
 8019a02:	f340 8111 	ble.w	8019c28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8019a06:	2c00      	cmp	r4, #0
 8019a08:	f000 8110 	beq.w	8019c2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8019a0c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019a10:	3501      	adds	r5, #1
 8019a12:	f100 810f 	bmi.w	8019c34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8019a16:	45a8      	cmp	r8, r5
 8019a18:	f340 810c 	ble.w	8019c34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8019a1c:	f1be 0f00 	cmp.w	lr, #0
 8019a20:	f000 810b 	beq.w	8019c3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8019a24:	2f00      	cmp	r7, #0
 8019a26:	f2c0 8103 	blt.w	8019c30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8019a2a:	42bb      	cmp	r3, r7
 8019a2c:	f340 8100 	ble.w	8019c30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8019a30:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8019a34:	3701      	adds	r7, #1
 8019a36:	f100 8103 	bmi.w	8019c40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8019a3a:	42bb      	cmp	r3, r7
 8019a3c:	f340 8100 	ble.w	8019c40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8019a40:	2c00      	cmp	r4, #0
 8019a42:	f000 80ff 	beq.w	8019c44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8019a46:	3301      	adds	r3, #1
 8019a48:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019a4c:	fa1f fc84 	uxth.w	ip, r4
 8019a50:	fa1f fe8e 	uxth.w	lr, lr
 8019a54:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019a58:	fb0c f90e 	mul.w	r9, ip, lr
 8019a5c:	0e13      	lsrs	r3, r2, #24
 8019a5e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8019a62:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8019a66:	9302      	str	r3, [sp, #8]
 8019a68:	ebac 0709 	sub.w	r7, ip, r9
 8019a6c:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8019a70:	fa1f f48e 	uxth.w	r4, lr
 8019a74:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8019a78:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8019a7c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8019a80:	fb0a fe0e 	mul.w	lr, sl, lr
 8019a84:	1b1b      	subs	r3, r3, r4
 8019a86:	fb0a f606 	mul.w	r6, sl, r6
 8019a8a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8019a8e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019a92:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8019a96:	b29b      	uxth	r3, r3
 8019a98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8019a9c:	b2bf      	uxth	r7, r7
 8019a9e:	9301      	str	r3, [sp, #4]
 8019aa0:	44e6      	add	lr, ip
 8019aa2:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8019aa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019aaa:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019aae:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8019ab2:	9303      	str	r3, [sp, #12]
 8019ab4:	0a33      	lsrs	r3, r6, #8
 8019ab6:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8019aba:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8019abe:	9304      	str	r3, [sp, #16]
 8019ac0:	fb0b f606 	mul.w	r6, fp, r6
 8019ac4:	fb0b f000 	mul.w	r0, fp, r0
 8019ac8:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8019acc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8019ad0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019ad4:	44b6      	add	lr, r6
 8019ad6:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8019ada:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8019ade:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8019ae2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8019ae6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019aea:	fb08 f606 	mul.w	r6, r8, r6
 8019aee:	0a03      	lsrs	r3, r0, #8
 8019af0:	fb08 f505 	mul.w	r5, r8, r5
 8019af4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019af8:	0a30      	lsrs	r0, r6, #8
 8019afa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8019afe:	9305      	str	r3, [sp, #20]
 8019b00:	0e13      	lsrs	r3, r2, #24
 8019b02:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8019b06:	fb0e fe07 	mul.w	lr, lr, r7
 8019b0a:	4430      	add	r0, r6
 8019b0c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8019b10:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019b14:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8019b18:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8019b1c:	0a00      	lsrs	r0, r0, #8
 8019b1e:	435e      	muls	r6, r3
 8019b20:	0a2d      	lsrs	r5, r5, #8
 8019b22:	435a      	muls	r2, r3
 8019b24:	9b03      	ldr	r3, [sp, #12]
 8019b26:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8019b2a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8019b2e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8019b32:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8019b36:	44b4      	add	ip, r6
 8019b38:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8019b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019b40:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8019b44:	9e01      	ldr	r6, [sp, #4]
 8019b46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8019b4a:	fb03 ee06 	mla	lr, r3, r6, lr
 8019b4e:	9b04      	ldr	r3, [sp, #16]
 8019b50:	0a12      	lsrs	r2, r2, #8
 8019b52:	fb0c ee09 	mla	lr, ip, r9, lr
 8019b56:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8019b5a:	9b05      	ldr	r3, [sp, #20]
 8019b5c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8019b60:	fb00 ee04 	mla	lr, r0, r4, lr
 8019b64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b68:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8019b6c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8019b70:	9b01      	ldr	r3, [sp, #4]
 8019b72:	fb07 fe0e 	mul.w	lr, r7, lr
 8019b76:	fb07 f70b 	mul.w	r7, r7, fp
 8019b7a:	fb03 ee06 	mla	lr, r3, r6, lr
 8019b7e:	fb03 730a 	mla	r3, r3, sl, r7
 8019b82:	fb09 e202 	mla	r2, r9, r2, lr
 8019b86:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8019b8a:	fb04 2e0e 	mla	lr, r4, lr, r2
 8019b8e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8019b92:	fb04 3408 	mla	r4, r4, r8, r3
 8019b96:	9b02      	ldr	r3, [sp, #8]
 8019b98:	b292      	uxth	r2, r2
 8019b9a:	fb09 4903 	mla	r9, r9, r3, r4
 8019b9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019ba2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8019ba6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8019baa:	fb09 f902 	mul.w	r9, r9, r2
 8019bae:	ea40 0e0e 	orr.w	lr, r0, lr
 8019bb2:	f109 0301 	add.w	r3, r9, #1
 8019bb6:	fa5f f08e 	uxtb.w	r0, lr
 8019bba:	fb10 f002 	smulbb	r0, r0, r2
 8019bbe:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8019bc2:	780b      	ldrb	r3, [r1, #0]
 8019bc4:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8019bc8:	fa5f f989 	uxtb.w	r9, r9
 8019bcc:	fb03 0309 	mla	r3, r3, r9, r0
 8019bd0:	b29b      	uxth	r3, r3
 8019bd2:	1c58      	adds	r0, r3, #1
 8019bd4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8019bd8:	7848      	ldrb	r0, [r1, #1]
 8019bda:	fb10 f009 	smulbb	r0, r0, r9
 8019bde:	121b      	asrs	r3, r3, #8
 8019be0:	700b      	strb	r3, [r1, #0]
 8019be2:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8019be6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8019bea:	fb03 0302 	mla	r3, r3, r2, r0
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	1c58      	adds	r0, r3, #1
 8019bf2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8019bf6:	121b      	asrs	r3, r3, #8
 8019bf8:	704b      	strb	r3, [r1, #1]
 8019bfa:	788b      	ldrb	r3, [r1, #2]
 8019bfc:	fb13 f909 	smulbb	r9, r3, r9
 8019c00:	fb0e 9e02 	mla	lr, lr, r2, r9
 8019c04:	fa1f fe8e 	uxth.w	lr, lr
 8019c08:	f10e 0301 	add.w	r3, lr, #1
 8019c0c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8019c10:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019c14:	f881 e002 	strb.w	lr, [r1, #2]
 8019c18:	b007      	add	sp, #28
 8019c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c1e:	2600      	movs	r6, #0
 8019c20:	e6eb      	b.n	80199fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8019c22:	2000      	movs	r0, #0
 8019c24:	4606      	mov	r6, r0
 8019c26:	e6f3      	b.n	8019a10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8019c28:	2000      	movs	r0, #0
 8019c2a:	e6f1      	b.n	8019a10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8019c2c:	4620      	mov	r0, r4
 8019c2e:	e6ef      	b.n	8019a10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8019c30:	2500      	movs	r5, #0
 8019c32:	e6ff      	b.n	8019a34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8019c34:	2200      	movs	r2, #0
 8019c36:	4615      	mov	r5, r2
 8019c38:	e708      	b.n	8019a4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019c3a:	4672      	mov	r2, lr
 8019c3c:	4675      	mov	r5, lr
 8019c3e:	e705      	b.n	8019a4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019c40:	2200      	movs	r2, #0
 8019c42:	e703      	b.n	8019a4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019c44:	4622      	mov	r2, r4
 8019c46:	e701      	b.n	8019a4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08019c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4c:	b09d      	sub	sp, #116	@ 0x74
 8019c4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c50:	9307      	str	r3, [sp, #28]
 8019c52:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8019c54:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8019c58:	901b      	str	r0, [sp, #108]	@ 0x6c
 8019c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8019c5c:	6850      	ldr	r0, [r2, #4]
 8019c5e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8019c60:	6812      	ldr	r2, [r2, #0]
 8019c62:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8019c66:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8019c6a:	fb00 1303 	mla	r3, r0, r3, r1
 8019c6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c72:	18d3      	adds	r3, r2, r3
 8019c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c76:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8019c7c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8019c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019c82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	dc03      	bgt.n	8019c90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	f340 8368 	ble.w	801a360 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8019c90:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8019c92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019c96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019c9a:	1e48      	subs	r0, r1, #1
 8019c9c:	1e57      	subs	r7, r2, #1
 8019c9e:	9b07      	ldr	r3, [sp, #28]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	f340 8187 	ble.w	8019fb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8019ca6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8019caa:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019cae:	d406      	bmi.n	8019cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019cb0:	4584      	cmp	ip, r0
 8019cb2:	da04      	bge.n	8019cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	db02      	blt.n	8019cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019cb8:	42bb      	cmp	r3, r7
 8019cba:	f2c0 817c 	blt.w	8019fb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8019cbe:	f11c 0c01 	adds.w	ip, ip, #1
 8019cc2:	f100 816c 	bmi.w	8019f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019cc6:	4561      	cmp	r1, ip
 8019cc8:	f2c0 8169 	blt.w	8019f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019ccc:	3301      	adds	r3, #1
 8019cce:	f100 8166 	bmi.w	8019f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	f2c0 8163 	blt.w	8019f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019cd8:	9b07      	ldr	r3, [sp, #28]
 8019cda:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019cdc:	9318      	str	r3, [sp, #96]	@ 0x60
 8019cde:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	f340 8186 	ble.w	8019ff2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8019ce6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8019ce8:	142a      	asrs	r2, r5, #16
 8019cea:	ea4f 4026 	mov.w	r0, r6, asr #16
 8019cee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019cf2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8019cf6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8019cfa:	f100 81cb 	bmi.w	801a094 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8019cfe:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019d02:	4542      	cmp	r2, r8
 8019d04:	f280 81c6 	bge.w	801a094 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	f2c0 81c3 	blt.w	801a094 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8019d0e:	f103 38ff 	add.w	r8, r3, #4294967295
 8019d12:	4540      	cmp	r0, r8
 8019d14:	f280 81be 	bge.w	801a094 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8019d18:	fa0f f38e 	sxth.w	r3, lr
 8019d1c:	fb00 2203 	mla	r2, r0, r3, r2
 8019d20:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019d22:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8019d26:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8019d2a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8019d2e:	2900      	cmp	r1, #0
 8019d30:	f000 81a6 	beq.w	801a080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8019d34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019d38:	900c      	str	r0, [sp, #48]	@ 0x30
 8019d3a:	0e00      	lsrs	r0, r0, #24
 8019d3c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8019d3e:	f1bc 0f00 	cmp.w	ip, #0
 8019d42:	d00f      	beq.n	8019d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019d44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019d48:	3b01      	subs	r3, #1
 8019d4a:	009b      	lsls	r3, r3, #2
 8019d4c:	3304      	adds	r3, #4
 8019d4e:	eb08 0003 	add.w	r0, r8, r3
 8019d52:	f858 3003 	ldr.w	r3, [r8, r3]
 8019d56:	9308      	str	r3, [sp, #32]
 8019d58:	0e1b      	lsrs	r3, r3, #24
 8019d5a:	9311      	str	r3, [sp, #68]	@ 0x44
 8019d5c:	6843      	ldr	r3, [r0, #4]
 8019d5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019d60:	0e1b      	lsrs	r3, r3, #24
 8019d62:	9314      	str	r3, [sp, #80]	@ 0x50
 8019d64:	b289      	uxth	r1, r1
 8019d66:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019d68:	fa1f fc8c 	uxth.w	ip, ip
 8019d6c:	0108      	lsls	r0, r1, #4
 8019d6e:	fb01 f90c 	mul.w	r9, r1, ip
 8019d72:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8019d76:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8019d7a:	eba0 0809 	sub.w	r8, r0, r9
 8019d7e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019d80:	fa1f f18c 	uxth.w	r1, ip
 8019d84:	fa1f f888 	uxth.w	r8, r8
 8019d88:	1a5b      	subs	r3, r3, r1
 8019d8a:	fb08 f000 	mul.w	r0, r8, r0
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	fb03 000e 	mla	r0, r3, lr, r0
 8019d94:	fb01 0004 	mla	r0, r1, r4, r0
 8019d98:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8019d9a:	fb09 0004 	mla	r0, r9, r4, r0
 8019d9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019da2:	2800      	cmp	r0, #0
 8019da4:	f000 80f2 	beq.w	8019f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019da8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8019dac:	d01b      	beq.n	8019de6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019dae:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8019db2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8019db6:	fb0e fa0a 	mul.w	sl, lr, sl
 8019dba:	fb0e fe02 	mul.w	lr, lr, r2
 8019dbe:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8019dc2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8019dc6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8019dca:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8019dce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019dd2:	4452      	add	r2, sl
 8019dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019dd8:	0a12      	lsrs	r2, r2, #8
 8019dda:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8019dde:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8019de2:	ea42 020c 	orr.w	r2, r2, ip
 8019de6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019de8:	2cff      	cmp	r4, #255	@ 0xff
 8019dea:	d021      	beq.n	8019e30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019dec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019dee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8019df2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019df4:	fb04 fb0b 	mul.w	fp, r4, fp
 8019df8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019dfa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8019dfe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019e00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019e04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8019e08:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019e10:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8019e14:	44de      	add	lr, fp
 8019e16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019e1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019e1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019e26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8019e2a:	ea4e 040a 	orr.w	r4, lr, sl
 8019e2e:	940c      	str	r4, [sp, #48]	@ 0x30
 8019e30:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019e32:	2cff      	cmp	r4, #255	@ 0xff
 8019e34:	d021      	beq.n	8019e7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019e36:	9c08      	ldr	r4, [sp, #32]
 8019e38:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8019e3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019e3e:	fb04 fb0b 	mul.w	fp, r4, fp
 8019e42:	9c08      	ldr	r4, [sp, #32]
 8019e44:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8019e48:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019e4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019e4e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8019e52:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019e5a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8019e5e:	44de      	add	lr, fp
 8019e60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019e64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019e68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e6c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019e70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8019e74:	ea4e 040a 	orr.w	r4, lr, sl
 8019e78:	9408      	str	r4, [sp, #32]
 8019e7a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8019e7c:	2cff      	cmp	r4, #255	@ 0xff
 8019e7e:	d021      	beq.n	8019ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8019e80:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8019e82:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8019e86:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8019e88:	fb04 fb0b 	mul.w	fp, r4, fp
 8019e8c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8019e8e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8019e92:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8019e94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019e98:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8019e9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ea0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019ea4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8019ea8:	44de      	add	lr, fp
 8019eaa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019eae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019eb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019eb6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8019eba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8019ebe:	ea4e 040a 	orr.w	r4, lr, sl
 8019ec2:	940d      	str	r4, [sp, #52]	@ 0x34
 8019ec4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019ec6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8019eca:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8019ece:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8019ed2:	9c08      	ldr	r4, [sp, #32]
 8019ed4:	fb08 fc0c 	mul.w	ip, r8, ip
 8019ed8:	fb03 cc0e 	mla	ip, r3, lr, ip
 8019edc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8019ee0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8019ee2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019ee6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8019eea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019eec:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019ef0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8019ef4:	fb08 f80e 	mul.w	r8, r8, lr
 8019ef8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019efc:	fb03 8202 	mla	r2, r3, r2, r8
 8019f00:	9b08      	ldr	r3, [sp, #32]
 8019f02:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8019f06:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8019f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f0c:	fb01 220a 	mla	r2, r1, sl, r2
 8019f10:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8019f14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019f16:	fb09 2901 	mla	r9, r9, r1, r2
 8019f1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019f1c:	4343      	muls	r3, r0
 8019f1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019f22:	1c58      	adds	r0, r3, #1
 8019f24:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8019f28:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019f2c:	783b      	ldrb	r3, [r7, #0]
 8019f2e:	ea4c 0c09 	orr.w	ip, ip, r9
 8019f32:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019f36:	fa5f f28c 	uxtb.w	r2, ip
 8019f3a:	b2c0      	uxtb	r0, r0
 8019f3c:	fb12 f201 	smulbb	r2, r2, r1
 8019f40:	fb03 2300 	mla	r3, r3, r0, r2
 8019f44:	b29b      	uxth	r3, r3
 8019f46:	1c5a      	adds	r2, r3, #1
 8019f48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019f4c:	787a      	ldrb	r2, [r7, #1]
 8019f4e:	fb12 f200 	smulbb	r2, r2, r0
 8019f52:	121b      	asrs	r3, r3, #8
 8019f54:	703b      	strb	r3, [r7, #0]
 8019f56:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019f5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019f5e:	fb03 2301 	mla	r3, r3, r1, r2
 8019f62:	b29b      	uxth	r3, r3
 8019f64:	1c5a      	adds	r2, r3, #1
 8019f66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019f6a:	121b      	asrs	r3, r3, #8
 8019f6c:	707b      	strb	r3, [r7, #1]
 8019f6e:	78bb      	ldrb	r3, [r7, #2]
 8019f70:	fb13 f000 	smulbb	r0, r3, r0
 8019f74:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019f78:	fa1f fc8c 	uxth.w	ip, ip
 8019f7c:	f10c 0301 	add.w	r3, ip, #1
 8019f80:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019f84:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019f88:	f887 c002 	strb.w	ip, [r7, #2]
 8019f8c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019f8e:	3703      	adds	r7, #3
 8019f90:	441d      	add	r5, r3
 8019f92:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8019f94:	441e      	add	r6, r3
 8019f96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019f98:	3b01      	subs	r3, #1
 8019f9a:	9318      	str	r3, [sp, #96]	@ 0x60
 8019f9c:	e69f      	b.n	8019cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019f9e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019fa0:	441d      	add	r5, r3
 8019fa2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8019fa4:	441e      	add	r6, r3
 8019fa6:	9b07      	ldr	r3, [sp, #28]
 8019fa8:	3b01      	subs	r3, #1
 8019faa:	9307      	str	r3, [sp, #28]
 8019fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019fae:	3303      	adds	r3, #3
 8019fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8019fb2:	e674      	b.n	8019c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8019fb4:	d025      	beq.n	801a002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8019fb6:	9b07      	ldr	r3, [sp, #28]
 8019fb8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8019fba:	3b01      	subs	r3, #1
 8019fbc:	fb00 5003 	mla	r0, r0, r3, r5
 8019fc0:	1400      	asrs	r0, r0, #16
 8019fc2:	f53f ae89 	bmi.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019fc6:	3901      	subs	r1, #1
 8019fc8:	4288      	cmp	r0, r1
 8019fca:	f6bf ae85 	bge.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019fce:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8019fd0:	fb01 6303 	mla	r3, r1, r3, r6
 8019fd4:	141b      	asrs	r3, r3, #16
 8019fd6:	f53f ae7f 	bmi.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019fda:	3a01      	subs	r2, #1
 8019fdc:	4293      	cmp	r3, r2
 8019fde:	f6bf ae7b 	bge.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019fe4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019fe8:	f103 0e03 	add.w	lr, r3, #3
 8019fec:	f1bb 0f00 	cmp.w	fp, #0
 8019ff0:	dc6e      	bgt.n	801a0d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8019ff2:	9b07      	ldr	r3, [sp, #28]
 8019ff4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ffa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019ffe:	4423      	add	r3, r4
 801a000:	930a      	str	r3, [sp, #40]	@ 0x28
 801a002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a004:	2b00      	cmp	r3, #0
 801a006:	f340 81ab 	ble.w	801a360 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a00a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a00e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a010:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a014:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a018:	eef0 6a62 	vmov.f32	s13, s5
 801a01c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a020:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a024:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a028:	ee16 5a90 	vmov	r5, s13
 801a02c:	eef0 6a43 	vmov.f32	s13, s6
 801a030:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a034:	ee16 6a90 	vmov	r6, s13
 801a038:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a03c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a040:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a044:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a048:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a04c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a050:	ee12 2a90 	vmov	r2, s5
 801a054:	eef0 2a47 	vmov.f32	s5, s14
 801a058:	fb92 f3f3 	sdiv	r3, r2, r3
 801a05c:	ee13 2a10 	vmov	r2, s6
 801a060:	9329      	str	r3, [sp, #164]	@ 0xa4
 801a062:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a064:	eeb0 3a67 	vmov.f32	s6, s15
 801a068:	fb92 f3f3 	sdiv	r3, r2, r3
 801a06c:	932a      	str	r3, [sp, #168]	@ 0xa8
 801a06e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a070:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a072:	3b01      	subs	r3, #1
 801a074:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a076:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a078:	bf08      	it	eq
 801a07a:	4613      	moveq	r3, r2
 801a07c:	9307      	str	r3, [sp, #28]
 801a07e:	e600      	b.n	8019c82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a080:	f1bc 0f00 	cmp.w	ip, #0
 801a084:	f43f ae6e 	beq.w	8019d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a088:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a08c:	9308      	str	r3, [sp, #32]
 801a08e:	0e1b      	lsrs	r3, r3, #24
 801a090:	9311      	str	r3, [sp, #68]	@ 0x44
 801a092:	e667      	b.n	8019d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a094:	f112 0801 	adds.w	r8, r2, #1
 801a098:	f53f af78 	bmi.w	8019f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a09c:	45c6      	cmp	lr, r8
 801a09e:	f6ff af75 	blt.w	8019f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a0a2:	f110 0801 	adds.w	r8, r0, #1
 801a0a6:	f53f af71 	bmi.w	8019f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a0aa:	4543      	cmp	r3, r8
 801a0ac:	f6ff af6e 	blt.w	8019f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a0b0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801a0b2:	b21b      	sxth	r3, r3
 801a0b4:	9201      	str	r2, [sp, #4]
 801a0b6:	9300      	str	r3, [sp, #0]
 801a0b8:	fa0f f38e 	sxth.w	r3, lr
 801a0bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a0c2:	e9cd c404 	strd	ip, r4, [sp, #16]
 801a0c6:	4639      	mov	r1, r7
 801a0c8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801a0ca:	f7ff fc79 	bl	80199c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801a0ce:	e75d      	b.n	8019f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a0d0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801a0d2:	142f      	asrs	r7, r5, #16
 801a0d4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801a0d6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a0da:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801a0de:	1433      	asrs	r3, r6, #16
 801a0e0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a0e4:	fb02 7303 	mla	r3, r2, r3, r7
 801a0e8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801a0ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a0f0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a0f4:	2900      	cmp	r1, #0
 801a0f6:	f000 812a 	beq.w	801a34e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801a0fa:	687c      	ldr	r4, [r7, #4]
 801a0fc:	940e      	str	r4, [sp, #56]	@ 0x38
 801a0fe:	0e24      	lsrs	r4, r4, #24
 801a100:	9415      	str	r4, [sp, #84]	@ 0x54
 801a102:	b178      	cbz	r0, 801a124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a104:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801a108:	3a01      	subs	r2, #1
 801a10a:	0092      	lsls	r2, r2, #2
 801a10c:	3204      	adds	r2, #4
 801a10e:	eb07 0802 	add.w	r8, r7, r2
 801a112:	58ba      	ldr	r2, [r7, r2]
 801a114:	9209      	str	r2, [sp, #36]	@ 0x24
 801a116:	0e12      	lsrs	r2, r2, #24
 801a118:	9212      	str	r2, [sp, #72]	@ 0x48
 801a11a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a11e:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a120:	0e12      	lsrs	r2, r2, #24
 801a122:	9216      	str	r2, [sp, #88]	@ 0x58
 801a124:	b289      	uxth	r1, r1
 801a126:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a128:	b280      	uxth	r0, r0
 801a12a:	fb01 f900 	mul.w	r9, r1, r0
 801a12e:	0109      	lsls	r1, r1, #4
 801a130:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a134:	eba1 0809 	sub.w	r8, r1, r9
 801a138:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801a13c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801a13e:	b280      	uxth	r0, r0
 801a140:	fa1f f888 	uxth.w	r8, r8
 801a144:	1a12      	subs	r2, r2, r0
 801a146:	fb08 f101 	mul.w	r1, r8, r1
 801a14a:	b292      	uxth	r2, r2
 801a14c:	fb02 110c 	mla	r1, r2, ip, r1
 801a150:	fb00 1104 	mla	r1, r0, r4, r1
 801a154:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801a156:	fb09 1104 	mla	r1, r9, r4, r1
 801a15a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a15e:	2900      	cmp	r1, #0
 801a160:	f000 80ec 	beq.w	801a33c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801a164:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801a168:	d019      	beq.n	801a19e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801a16a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801a16e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801a172:	fb0c fa0a 	mul.w	sl, ip, sl
 801a176:	fb0c fc03 	mul.w	ip, ip, r3
 801a17a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a17e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801a182:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801a186:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801a18a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a18e:	4453      	add	r3, sl
 801a190:	0a3f      	lsrs	r7, r7, #8
 801a192:	0a1b      	lsrs	r3, r3, #8
 801a194:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801a198:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801a19c:	433b      	orrs	r3, r7
 801a19e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801a1a0:	2cff      	cmp	r4, #255	@ 0xff
 801a1a2:	d020      	beq.n	801a1e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801a1a4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801a1a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801a1aa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801a1ac:	4367      	muls	r7, r4
 801a1ae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801a1b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a1b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801a1b8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801a1ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801a1be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a1c2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1c6:	44bc      	add	ip, r7
 801a1c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801a1cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a1d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a1d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a1dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801a1e0:	ea4c 040a 	orr.w	r4, ip, sl
 801a1e4:	940e      	str	r4, [sp, #56]	@ 0x38
 801a1e6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a1e8:	2cff      	cmp	r4, #255	@ 0xff
 801a1ea:	d020      	beq.n	801a22e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801a1ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a1ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801a1f2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a1f4:	4367      	muls	r7, r4
 801a1f6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a1f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a1fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801a200:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a202:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801a206:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a20a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a20e:	44bc      	add	ip, r7
 801a210:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801a214:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a218:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a21c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a220:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a224:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801a228:	ea4c 040a 	orr.w	r4, ip, sl
 801a22c:	9409      	str	r4, [sp, #36]	@ 0x24
 801a22e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801a230:	2cff      	cmp	r4, #255	@ 0xff
 801a232:	d020      	beq.n	801a276 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801a234:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a236:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801a23a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801a23c:	4367      	muls	r7, r4
 801a23e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a240:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a244:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801a248:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801a24a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801a24e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a252:	fb04 fa0a 	mul.w	sl, r4, sl
 801a256:	44bc      	add	ip, r7
 801a258:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801a25c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a260:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a264:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a268:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a26c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801a270:	ea4c 040a 	orr.w	r4, ip, sl
 801a274:	940f      	str	r4, [sp, #60]	@ 0x3c
 801a276:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801a278:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801a27c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801a280:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801a284:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a286:	fb08 f707 	mul.w	r7, r8, r7
 801a28a:	fb02 770c 	mla	r7, r2, ip, r7
 801a28e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801a292:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a294:	fb00 770c 	mla	r7, r0, ip, r7
 801a298:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801a29c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801a29e:	fb09 770c 	mla	r7, r9, ip, r7
 801a2a2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801a2a6:	fb08 f80c 	mul.w	r8, r8, ip
 801a2aa:	0a3f      	lsrs	r7, r7, #8
 801a2ac:	fb02 8303 	mla	r3, r2, r3, r8
 801a2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a2b2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801a2b6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801a2ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a2bc:	fb00 330a 	mla	r3, r0, sl, r3
 801a2c0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801a2c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a2c6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a2ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a2cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a2d0:	434b      	muls	r3, r1
 801a2d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801a2d6:	1c59      	adds	r1, r3, #1
 801a2d8:	ea47 070c 	orr.w	r7, r7, ip
 801a2dc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a2e0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a2e4:	b2fa      	uxtb	r2, r7
 801a2e6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a2ea:	fb12 f200 	smulbb	r2, r2, r0
 801a2ee:	b2c9      	uxtb	r1, r1
 801a2f0:	fb03 2301 	mla	r3, r3, r1, r2
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	1c5a      	adds	r2, r3, #1
 801a2f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a2fc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a300:	fb12 f201 	smulbb	r2, r2, r1
 801a304:	121b      	asrs	r3, r3, #8
 801a306:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a30a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a30e:	0c3f      	lsrs	r7, r7, #16
 801a310:	fb03 2300 	mla	r3, r3, r0, r2
 801a314:	b29b      	uxth	r3, r3
 801a316:	1c5a      	adds	r2, r3, #1
 801a318:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a31c:	121b      	asrs	r3, r3, #8
 801a31e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a322:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a326:	fb13 f101 	smulbb	r1, r3, r1
 801a32a:	fb07 1700 	mla	r7, r7, r0, r1
 801a32e:	b2bf      	uxth	r7, r7
 801a330:	1c79      	adds	r1, r7, #1
 801a332:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801a336:	123f      	asrs	r7, r7, #8
 801a338:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a33c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a33e:	f10e 0e03 	add.w	lr, lr, #3
 801a342:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a346:	441d      	add	r5, r3
 801a348:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801a34a:	441e      	add	r6, r3
 801a34c:	e64e      	b.n	8019fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801a34e:	2800      	cmp	r0, #0
 801a350:	f43f aee8 	beq.w	801a124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a354:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a358:	9209      	str	r2, [sp, #36]	@ 0x24
 801a35a:	0e12      	lsrs	r2, r2, #24
 801a35c:	9212      	str	r2, [sp, #72]	@ 0x48
 801a35e:	e6e1      	b.n	801a124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a360:	b01d      	add	sp, #116	@ 0x74
 801a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a366 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801a366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a36a:	b087      	sub	sp, #28
 801a36c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801a370:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801a374:	fb05 7003 	mla	r0, r5, r3, r7
 801a378:	2d00      	cmp	r5, #0
 801a37a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801a37e:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801a382:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801a386:	f2c0 810a 	blt.w	801a59e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801a38a:	45a8      	cmp	r8, r5
 801a38c:	f340 8107 	ble.w	801a59e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801a390:	2f00      	cmp	r7, #0
 801a392:	f2c0 8102 	blt.w	801a59a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801a396:	42bb      	cmp	r3, r7
 801a398:	f340 80ff 	ble.w	801a59a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801a39c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a3a0:	1c7a      	adds	r2, r7, #1
 801a3a2:	f100 80ff 	bmi.w	801a5a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801a3a6:	4293      	cmp	r3, r2
 801a3a8:	f340 80fc 	ble.w	801a5a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801a3ac:	2c00      	cmp	r4, #0
 801a3ae:	f000 80fb 	beq.w	801a5a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801a3b2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a3b6:	3501      	adds	r5, #1
 801a3b8:	f100 80fa 	bmi.w	801a5b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801a3bc:	45a8      	cmp	r8, r5
 801a3be:	f340 80f7 	ble.w	801a5b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801a3c2:	f1be 0f00 	cmp.w	lr, #0
 801a3c6:	f000 80f6 	beq.w	801a5b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801a3ca:	2f00      	cmp	r7, #0
 801a3cc:	f2c0 80ee 	blt.w	801a5ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801a3d0:	42bb      	cmp	r3, r7
 801a3d2:	f340 80eb 	ble.w	801a5ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801a3d6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801a3da:	3701      	adds	r7, #1
 801a3dc:	f100 80ee 	bmi.w	801a5bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801a3e0:	42bb      	cmp	r3, r7
 801a3e2:	f340 80eb 	ble.w	801a5bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801a3e6:	2c00      	cmp	r4, #0
 801a3e8:	f000 80ea 	beq.w	801a5c0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801a3ec:	3301      	adds	r3, #1
 801a3ee:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a3f2:	fa1f fc84 	uxth.w	ip, r4
 801a3f6:	fa1f fe8e 	uxth.w	lr, lr
 801a3fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a3fe:	fb0c f90e 	mul.w	r9, ip, lr
 801a402:	0e13      	lsrs	r3, r2, #24
 801a404:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a408:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801a40c:	9302      	str	r3, [sp, #8]
 801a40e:	ebac 0709 	sub.w	r7, ip, r9
 801a412:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801a416:	fa1f f48e 	uxth.w	r4, lr
 801a41a:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801a41e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801a422:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801a426:	fb0a fe0e 	mul.w	lr, sl, lr
 801a42a:	1b1b      	subs	r3, r3, r4
 801a42c:	fb0a f606 	mul.w	r6, sl, r6
 801a430:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801a434:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a438:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801a43c:	b29b      	uxth	r3, r3
 801a43e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a442:	b2bf      	uxth	r7, r7
 801a444:	9301      	str	r3, [sp, #4]
 801a446:	44e6      	add	lr, ip
 801a448:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801a44c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a450:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a454:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801a458:	9303      	str	r3, [sp, #12]
 801a45a:	0a33      	lsrs	r3, r6, #8
 801a45c:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801a460:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801a464:	9304      	str	r3, [sp, #16]
 801a466:	fb0b f606 	mul.w	r6, fp, r6
 801a46a:	fb0b f000 	mul.w	r0, fp, r0
 801a46e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801a472:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801a476:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a47a:	44b6      	add	lr, r6
 801a47c:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801a480:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801a484:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801a488:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801a48c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a490:	fb08 f606 	mul.w	r6, r8, r6
 801a494:	0a03      	lsrs	r3, r0, #8
 801a496:	fb08 f505 	mul.w	r5, r8, r5
 801a49a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a49e:	0a30      	lsrs	r0, r6, #8
 801a4a0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801a4a4:	9305      	str	r3, [sp, #20]
 801a4a6:	0e13      	lsrs	r3, r2, #24
 801a4a8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801a4ac:	fb0e fe07 	mul.w	lr, lr, r7
 801a4b0:	4430      	add	r0, r6
 801a4b2:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801a4b6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a4ba:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801a4be:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801a4c2:	0a00      	lsrs	r0, r0, #8
 801a4c4:	435e      	muls	r6, r3
 801a4c6:	0a2d      	lsrs	r5, r5, #8
 801a4c8:	435a      	muls	r2, r3
 801a4ca:	9b03      	ldr	r3, [sp, #12]
 801a4cc:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801a4d0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801a4d4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801a4d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a4dc:	44b4      	add	ip, r6
 801a4de:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801a4e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4e6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801a4ea:	9e01      	ldr	r6, [sp, #4]
 801a4ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a4f0:	fb03 ee06 	mla	lr, r3, r6, lr
 801a4f4:	9b04      	ldr	r3, [sp, #16]
 801a4f6:	0a12      	lsrs	r2, r2, #8
 801a4f8:	fb0c ee09 	mla	lr, ip, r9, lr
 801a4fc:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801a500:	9b05      	ldr	r3, [sp, #20]
 801a502:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801a506:	fb00 ee04 	mla	lr, r0, r4, lr
 801a50a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a50e:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801a512:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801a516:	9b01      	ldr	r3, [sp, #4]
 801a518:	fb07 fe0e 	mul.w	lr, r7, lr
 801a51c:	fb07 f70b 	mul.w	r7, r7, fp
 801a520:	fb03 ee06 	mla	lr, r3, r6, lr
 801a524:	fb03 730a 	mla	r3, r3, sl, r7
 801a528:	fb09 e202 	mla	r2, r9, r2, lr
 801a52c:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801a530:	fb04 2e0e 	mla	lr, r4, lr, r2
 801a534:	fb04 3408 	mla	r4, r4, r8, r3
 801a538:	9b02      	ldr	r3, [sp, #8]
 801a53a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a53e:	fb09 4903 	mla	r9, r9, r3, r4
 801a542:	780b      	ldrb	r3, [r1, #0]
 801a544:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801a548:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801a54c:	ea40 0e0e 	orr.w	lr, r0, lr
 801a550:	fa5f f989 	uxtb.w	r9, r9
 801a554:	fb03 f209 	mul.w	r2, r3, r9
 801a558:	1c53      	adds	r3, r2, #1
 801a55a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a55e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801a562:	700b      	strb	r3, [r1, #0]
 801a564:	784b      	ldrb	r3, [r1, #1]
 801a566:	fb03 f309 	mul.w	r3, r3, r9
 801a56a:	1c5a      	adds	r2, r3, #1
 801a56c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a570:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801a574:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a578:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a57c:	704b      	strb	r3, [r1, #1]
 801a57e:	788b      	ldrb	r3, [r1, #2]
 801a580:	fb03 f909 	mul.w	r9, r3, r9
 801a584:	f109 0301 	add.w	r3, r9, #1
 801a588:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801a58c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801a590:	f881 e002 	strb.w	lr, [r1, #2]
 801a594:	b007      	add	sp, #28
 801a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a59a:	2600      	movs	r6, #0
 801a59c:	e700      	b.n	801a3a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801a59e:	2000      	movs	r0, #0
 801a5a0:	4606      	mov	r6, r0
 801a5a2:	e708      	b.n	801a3b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	e706      	b.n	801a3b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801a5a8:	4620      	mov	r0, r4
 801a5aa:	e704      	b.n	801a3b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801a5ac:	2500      	movs	r5, #0
 801a5ae:	e714      	b.n	801a3da <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	4615      	mov	r5, r2
 801a5b4:	e71d      	b.n	801a3f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a5b6:	4672      	mov	r2, lr
 801a5b8:	4675      	mov	r5, lr
 801a5ba:	e71a      	b.n	801a3f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a5bc:	2200      	movs	r2, #0
 801a5be:	e718      	b.n	801a3f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a5c0:	4622      	mov	r2, r4
 801a5c2:	e716      	b.n	801a3f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801a5c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c8:	b099      	sub	sp, #100	@ 0x64
 801a5ca:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801a5ce:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801a5d0:	9017      	str	r0, [sp, #92]	@ 0x5c
 801a5d2:	9306      	str	r3, [sp, #24]
 801a5d4:	6850      	ldr	r0, [r2, #4]
 801a5d6:	6812      	ldr	r2, [r2, #0]
 801a5d8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801a5dc:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801a5e0:	fb00 1303 	mla	r3, r0, r3, r1
 801a5e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5e8:	18d3      	adds	r3, r2, r3
 801a5ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5ec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801a5f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	dc03      	bgt.n	801a600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	f340 8360 	ble.w	801acc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801a600:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801a602:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a606:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a60a:	1e48      	subs	r0, r1, #1
 801a60c:	1e57      	subs	r7, r2, #1
 801a60e:	9b06      	ldr	r3, [sp, #24]
 801a610:	2b00      	cmp	r3, #0
 801a612:	f340 817b 	ble.w	801a90c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801a616:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a61a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a61e:	d406      	bmi.n	801a62e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a620:	4584      	cmp	ip, r0
 801a622:	da04      	bge.n	801a62e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a624:	2b00      	cmp	r3, #0
 801a626:	db02      	blt.n	801a62e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a628:	42bb      	cmp	r3, r7
 801a62a:	f2c0 8170 	blt.w	801a90e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a62e:	f11c 0c01 	adds.w	ip, ip, #1
 801a632:	f100 8160 	bmi.w	801a8f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a636:	4561      	cmp	r1, ip
 801a638:	f2c0 815d 	blt.w	801a8f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a63c:	3301      	adds	r3, #1
 801a63e:	f100 815a 	bmi.w	801a8f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a642:	429a      	cmp	r2, r3
 801a644:	f2c0 8157 	blt.w	801a8f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a648:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a64c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801a64e:	f1b8 0f00 	cmp.w	r8, #0
 801a652:	f340 8179 	ble.w	801a948 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801a656:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801a658:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801a65c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801a65e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a662:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a666:	142a      	asrs	r2, r5, #16
 801a668:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a66c:	689b      	ldr	r3, [r3, #8]
 801a66e:	f100 81be 	bmi.w	801a9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a672:	f103 39ff 	add.w	r9, r3, #4294967295
 801a676:	454a      	cmp	r2, r9
 801a678:	f280 81b9 	bge.w	801a9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a67c:	f1bc 0f00 	cmp.w	ip, #0
 801a680:	f2c0 81b5 	blt.w	801a9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a684:	f10e 39ff 	add.w	r9, lr, #4294967295
 801a688:	45cc      	cmp	ip, r9
 801a68a:	f280 81b0 	bge.w	801a9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a68e:	b21b      	sxth	r3, r3
 801a690:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801a692:	fb0c 2203 	mla	r2, ip, r3, r2
 801a696:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801a69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a69e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a6a2:	2900      	cmp	r1, #0
 801a6a4:	f000 8197 	beq.w	801a9d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a6a8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801a6ac:	940a      	str	r4, [sp, #40]	@ 0x28
 801a6ae:	0e24      	lsrs	r4, r4, #24
 801a6b0:	9411      	str	r4, [sp, #68]	@ 0x44
 801a6b2:	b180      	cbz	r0, 801a6d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801a6b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801a6b8:	3b01      	subs	r3, #1
 801a6ba:	009b      	lsls	r3, r3, #2
 801a6bc:	3304      	adds	r3, #4
 801a6be:	eb09 0c03 	add.w	ip, r9, r3
 801a6c2:	f859 3003 	ldr.w	r3, [r9, r3]
 801a6c6:	9307      	str	r3, [sp, #28]
 801a6c8:	0e1b      	lsrs	r3, r3, #24
 801a6ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a6cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6d2:	0e1b      	lsrs	r3, r3, #24
 801a6d4:	9312      	str	r3, [sp, #72]	@ 0x48
 801a6d6:	b289      	uxth	r1, r1
 801a6d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a6da:	b280      	uxth	r0, r0
 801a6dc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a6de:	fb01 fa00 	mul.w	sl, r1, r0
 801a6e2:	0109      	lsls	r1, r1, #4
 801a6e4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801a6e8:	eba1 090a 	sub.w	r9, r1, sl
 801a6ec:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801a6f0:	b280      	uxth	r0, r0
 801a6f2:	fa1f f989 	uxth.w	r9, r9
 801a6f6:	1a09      	subs	r1, r1, r0
 801a6f8:	fb09 f303 	mul.w	r3, r9, r3
 801a6fc:	b289      	uxth	r1, r1
 801a6fe:	fb01 330e 	mla	r3, r1, lr, r3
 801a702:	fb00 3304 	mla	r3, r0, r4, r3
 801a706:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a708:	fb0a 3304 	mla	r3, sl, r4, r3
 801a70c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a710:	2b00      	cmp	r3, #0
 801a712:	f000 80e8 	beq.w	801a8e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a716:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801a71a:	d01b      	beq.n	801a754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801a71c:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801a720:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801a724:	fb0e fb0b 	mul.w	fp, lr, fp
 801a728:	fb0e fe02 	mul.w	lr, lr, r2
 801a72c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801a730:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801a734:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801a738:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801a73c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a740:	445a      	add	r2, fp
 801a742:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a746:	0a12      	lsrs	r2, r2, #8
 801a748:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801a74c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801a750:	ea42 020c 	orr.w	r2, r2, ip
 801a754:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801a756:	2cff      	cmp	r4, #255	@ 0xff
 801a758:	d021      	beq.n	801a79e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801a75a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a75c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801a760:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801a762:	fb04 fc0c 	mul.w	ip, r4, ip
 801a766:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a768:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a76c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801a770:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801a772:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801a776:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a77a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a77e:	44e6      	add	lr, ip
 801a780:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801a784:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a788:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a78c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a790:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a794:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801a798:	ea4e 040b 	orr.w	r4, lr, fp
 801a79c:	940a      	str	r4, [sp, #40]	@ 0x28
 801a79e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a7a0:	2cff      	cmp	r4, #255	@ 0xff
 801a7a2:	d021      	beq.n	801a7e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801a7a4:	9c07      	ldr	r4, [sp, #28]
 801a7a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801a7aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a7ac:	fb04 fc0c 	mul.w	ip, r4, ip
 801a7b0:	9c07      	ldr	r4, [sp, #28]
 801a7b2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a7b6:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801a7ba:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a7bc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801a7c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a7c4:	fb04 fb0b 	mul.w	fp, r4, fp
 801a7c8:	44e6      	add	lr, ip
 801a7ca:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801a7ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a7d2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a7d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a7da:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a7de:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801a7e2:	ea4e 040b 	orr.w	r4, lr, fp
 801a7e6:	9407      	str	r4, [sp, #28]
 801a7e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a7ea:	2cff      	cmp	r4, #255	@ 0xff
 801a7ec:	d021      	beq.n	801a832 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801a7ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a7f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801a7f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a7f6:	fb04 fc0c 	mul.w	ip, r4, ip
 801a7fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a7fc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a800:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801a804:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a806:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801a80a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a80e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a812:	44e6      	add	lr, ip
 801a814:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801a818:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a81c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a820:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801a824:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a828:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801a82c:	ea4e 040b 	orr.w	r4, lr, fp
 801a830:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a834:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801a838:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801a83c:	2bff      	cmp	r3, #255	@ 0xff
 801a83e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801a842:	9c07      	ldr	r4, [sp, #28]
 801a844:	fb09 fc0c 	mul.w	ip, r9, ip
 801a848:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a84c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801a850:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a852:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a856:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801a85a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a85c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801a860:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801a864:	fb09 f90e 	mul.w	r9, r9, lr
 801a868:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a86c:	fb01 9202 	mla	r2, r1, r2, r9
 801a870:	9907      	ldr	r1, [sp, #28]
 801a872:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801a876:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801a87a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a87c:	fb00 220b 	mla	r2, r0, fp, r2
 801a880:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801a884:	fb0a 2a00 	mla	sl, sl, r0, r2
 801a888:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a88c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801a890:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a894:	fa5f f08c 	uxtb.w	r0, ip
 801a898:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a89c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a8a0:	f000 80a2 	beq.w	801a9e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801a8a4:	43db      	mvns	r3, r3
 801a8a6:	783a      	ldrb	r2, [r7, #0]
 801a8a8:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a8ac:	b2db      	uxtb	r3, r3
 801a8ae:	fb02 fe03 	mul.w	lr, r2, r3
 801a8b2:	fb0a fa03 	mul.w	sl, sl, r3
 801a8b6:	f10e 0201 	add.w	r2, lr, #1
 801a8ba:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801a8be:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a8c2:	703a      	strb	r2, [r7, #0]
 801a8c4:	787a      	ldrb	r2, [r7, #1]
 801a8c6:	fb02 f003 	mul.w	r0, r2, r3
 801a8ca:	f10a 0301 	add.w	r3, sl, #1
 801a8ce:	1c42      	adds	r2, r0, #1
 801a8d0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a8d4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a8d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a8dc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a8e0:	707a      	strb	r2, [r7, #1]
 801a8e2:	f887 c002 	strb.w	ip, [r7, #2]
 801a8e6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a8e8:	3703      	adds	r7, #3
 801a8ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801a8ee:	441d      	add	r5, r3
 801a8f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a8f2:	441e      	add	r6, r3
 801a8f4:	e6ab      	b.n	801a64e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a8f6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a8f8:	441d      	add	r5, r3
 801a8fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a8fc:	441e      	add	r6, r3
 801a8fe:	9b06      	ldr	r3, [sp, #24]
 801a900:	3b01      	subs	r3, #1
 801a902:	9306      	str	r3, [sp, #24]
 801a904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a906:	3303      	adds	r3, #3
 801a908:	9309      	str	r3, [sp, #36]	@ 0x24
 801a90a:	e680      	b.n	801a60e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a90c:	d024      	beq.n	801a958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801a90e:	9b06      	ldr	r3, [sp, #24]
 801a910:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801a912:	3b01      	subs	r3, #1
 801a914:	fb00 5003 	mla	r0, r0, r3, r5
 801a918:	1400      	asrs	r0, r0, #16
 801a91a:	f53f ae95 	bmi.w	801a648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a91e:	3901      	subs	r1, #1
 801a920:	4288      	cmp	r0, r1
 801a922:	f6bf ae91 	bge.w	801a648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a926:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801a928:	fb01 6303 	mla	r3, r1, r3, r6
 801a92c:	141b      	asrs	r3, r3, #16
 801a92e:	f53f ae8b 	bmi.w	801a648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a932:	3a01      	subs	r2, #1
 801a934:	4293      	cmp	r3, r2
 801a936:	f6bf ae87 	bge.w	801a648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a93c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a940:	1cdf      	adds	r7, r3, #3
 801a942:	f1bb 0f00 	cmp.w	fp, #0
 801a946:	dc6e      	bgt.n	801aa26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801a948:	9b06      	ldr	r3, [sp, #24]
 801a94a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a950:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a954:	4423      	add	r3, r4
 801a956:	9309      	str	r3, [sp, #36]	@ 0x24
 801a958:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f340 81b0 	ble.w	801acc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801a960:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a964:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a966:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a96a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a96e:	eef0 6a62 	vmov.f32	s13, s5
 801a972:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a976:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a97a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a97e:	ee16 5a90 	vmov	r5, s13
 801a982:	eef0 6a43 	vmov.f32	s13, s6
 801a986:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a98a:	ee16 6a90 	vmov	r6, s13
 801a98e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a992:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a996:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a99a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a99e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a9a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a9a6:	ee12 2a90 	vmov	r2, s5
 801a9aa:	eef0 2a47 	vmov.f32	s5, s14
 801a9ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9b2:	ee13 2a10 	vmov	r2, s6
 801a9b6:	9325      	str	r3, [sp, #148]	@ 0x94
 801a9b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a9ba:	eeb0 3a67 	vmov.f32	s6, s15
 801a9be:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9c2:	9326      	str	r3, [sp, #152]	@ 0x98
 801a9c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a9c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a9c8:	3b01      	subs	r3, #1
 801a9ca:	9315      	str	r3, [sp, #84]	@ 0x54
 801a9cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a9ce:	bf08      	it	eq
 801a9d0:	4613      	moveq	r3, r2
 801a9d2:	9306      	str	r3, [sp, #24]
 801a9d4:	e60d      	b.n	801a5f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a9d6:	2800      	cmp	r0, #0
 801a9d8:	f43f ae7d 	beq.w	801a6d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801a9dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a9e0:	9307      	str	r3, [sp, #28]
 801a9e2:	0e1b      	lsrs	r3, r3, #24
 801a9e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a9e6:	e676      	b.n	801a6d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801a9e8:	7038      	strb	r0, [r7, #0]
 801a9ea:	7079      	strb	r1, [r7, #1]
 801a9ec:	e779      	b.n	801a8e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801a9ee:	f112 0901 	adds.w	r9, r2, #1
 801a9f2:	f53f af78 	bmi.w	801a8e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a9f6:	454b      	cmp	r3, r9
 801a9f8:	f6ff af75 	blt.w	801a8e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a9fc:	f11c 0901 	adds.w	r9, ip, #1
 801aa00:	f53f af71 	bmi.w	801a8e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aa04:	45ce      	cmp	lr, r9
 801aa06:	f6ff af6e 	blt.w	801a8e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aa0a:	b21b      	sxth	r3, r3
 801aa0c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801aa10:	fa0f f28e 	sxth.w	r2, lr
 801aa14:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801aa18:	9200      	str	r2, [sp, #0]
 801aa1a:	4639      	mov	r1, r7
 801aa1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aa1e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801aa20:	f7ff fca1 	bl	801a366 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801aa24:	e75f      	b.n	801a8e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aa26:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801aa28:	1429      	asrs	r1, r5, #16
 801aa2a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801aa2c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801aa30:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801aa34:	1433      	asrs	r3, r6, #16
 801aa36:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801aa3a:	fb0c 1303 	mla	r3, ip, r3, r1
 801aa3e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801aa40:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801aa44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801aa48:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801aa4c:	2a00      	cmp	r2, #0
 801aa4e:	f000 8129 	beq.w	801aca4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801aa52:	684c      	ldr	r4, [r1, #4]
 801aa54:	940c      	str	r4, [sp, #48]	@ 0x30
 801aa56:	0e24      	lsrs	r4, r4, #24
 801aa58:	9413      	str	r4, [sp, #76]	@ 0x4c
 801aa5a:	b198      	cbz	r0, 801aa84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801aa5c:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801aa60:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801aa68:	f10c 0c04 	add.w	ip, ip, #4
 801aa6c:	eb01 080c 	add.w	r8, r1, ip
 801aa70:	f851 100c 	ldr.w	r1, [r1, ip]
 801aa74:	9108      	str	r1, [sp, #32]
 801aa76:	0e09      	lsrs	r1, r1, #24
 801aa78:	9110      	str	r1, [sp, #64]	@ 0x40
 801aa7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801aa7e:	910d      	str	r1, [sp, #52]	@ 0x34
 801aa80:	0e09      	lsrs	r1, r1, #24
 801aa82:	9114      	str	r1, [sp, #80]	@ 0x50
 801aa84:	b292      	uxth	r2, r2
 801aa86:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801aa88:	b280      	uxth	r0, r0
 801aa8a:	fb02 f900 	mul.w	r9, r2, r0
 801aa8e:	0112      	lsls	r2, r2, #4
 801aa90:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801aa94:	eba2 0809 	sub.w	r8, r2, r9
 801aa98:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801aa9c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801aa9e:	b280      	uxth	r0, r0
 801aaa0:	fa1f f888 	uxth.w	r8, r8
 801aaa4:	1a09      	subs	r1, r1, r0
 801aaa6:	fb08 f202 	mul.w	r2, r8, r2
 801aaaa:	b289      	uxth	r1, r1
 801aaac:	fb01 220e 	mla	r2, r1, lr, r2
 801aab0:	fb00 2204 	mla	r2, r0, r4, r2
 801aab4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801aab6:	fb09 2204 	mla	r2, r9, r4, r2
 801aaba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801aabe:	2a00      	cmp	r2, #0
 801aac0:	f000 80e8 	beq.w	801ac94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801aac4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801aac8:	d01b      	beq.n	801ab02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801aaca:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801aace:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801aad2:	fb0e fa0a 	mul.w	sl, lr, sl
 801aad6:	fb0e fe03 	mul.w	lr, lr, r3
 801aada:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801aade:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801aae2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801aae6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801aaea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801aaee:	4453      	add	r3, sl
 801aaf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aaf4:	0a1b      	lsrs	r3, r3, #8
 801aaf6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801aafa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801aafe:	ea43 030c 	orr.w	r3, r3, ip
 801ab02:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ab04:	2cff      	cmp	r4, #255	@ 0xff
 801ab06:	d021      	beq.n	801ab4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801ab08:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ab0a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ab0e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ab10:	fb04 fc0c 	mul.w	ip, r4, ip
 801ab14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ab16:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ab1a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ab1e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ab20:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ab24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ab28:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab2c:	44e6      	add	lr, ip
 801ab2e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ab32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ab3a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ab3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab42:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ab46:	ea4e 040a 	orr.w	r4, lr, sl
 801ab4a:	940c      	str	r4, [sp, #48]	@ 0x30
 801ab4c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ab4e:	2cff      	cmp	r4, #255	@ 0xff
 801ab50:	d021      	beq.n	801ab96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801ab52:	9c08      	ldr	r4, [sp, #32]
 801ab54:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ab58:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ab5a:	fb04 fc0c 	mul.w	ip, r4, ip
 801ab5e:	9c08      	ldr	r4, [sp, #32]
 801ab60:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ab64:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ab66:	fb04 fa0e 	mul.w	sl, r4, lr
 801ab6a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ab6e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ab72:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ab76:	44e6      	add	lr, ip
 801ab78:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ab7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ab80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab88:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ab8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ab90:	ea4e 040a 	orr.w	r4, lr, sl
 801ab94:	9408      	str	r4, [sp, #32]
 801ab96:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ab98:	2cff      	cmp	r4, #255	@ 0xff
 801ab9a:	d021      	beq.n	801abe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801ab9c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ab9e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801aba2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801aba4:	fb04 fc0c 	mul.w	ip, r4, ip
 801aba8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801abaa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801abae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801abb2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801abb4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801abb8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801abbc:	fb04 fa0a 	mul.w	sl, r4, sl
 801abc0:	44e6      	add	lr, ip
 801abc2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801abc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801abca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801abce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801abd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801abd6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801abda:	ea4e 040a 	orr.w	r4, lr, sl
 801abde:	940d      	str	r4, [sp, #52]	@ 0x34
 801abe0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801abe2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801abe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801abea:	2aff      	cmp	r2, #255	@ 0xff
 801abec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801abf0:	9c08      	ldr	r4, [sp, #32]
 801abf2:	fb08 fc0c 	mul.w	ip, r8, ip
 801abf6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801abfa:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801abfe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ac00:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ac04:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ac08:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ac0a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ac0e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ac12:	fb08 f80e 	mul.w	r8, r8, lr
 801ac16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac1a:	fb01 8303 	mla	r3, r1, r3, r8
 801ac1e:	9908      	ldr	r1, [sp, #32]
 801ac20:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ac24:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801ac28:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ac2a:	fb00 330a 	mla	r3, r0, sl, r3
 801ac2e:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801ac32:	fb09 3e0e 	mla	lr, r9, lr, r3
 801ac36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac3a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801ac3e:	ea4c 0c0e 	orr.w	ip, ip, lr
 801ac42:	fa5f f08c 	uxtb.w	r0, ip
 801ac46:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ac4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ac4e:	d032      	beq.n	801acb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801ac50:	43d2      	mvns	r2, r2
 801ac52:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801ac56:	b2d2      	uxtb	r2, r2
 801ac58:	fb0e fe02 	mul.w	lr, lr, r2
 801ac5c:	f10e 0301 	add.w	r3, lr, #1
 801ac60:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801ac64:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ac68:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801ac6c:	4350      	muls	r0, r2
 801ac6e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801ac72:	1c43      	adds	r3, r0, #1
 801ac74:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ac78:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ac7c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801ac80:	4353      	muls	r3, r2
 801ac82:	f807 1c02 	strb.w	r1, [r7, #-2]
 801ac86:	1c5a      	adds	r2, r3, #1
 801ac88:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ac8c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801ac90:	f807 cc01 	strb.w	ip, [r7, #-1]
 801ac94:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ac96:	3703      	adds	r7, #3
 801ac98:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ac9c:	441d      	add	r5, r3
 801ac9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801aca0:	441e      	add	r6, r3
 801aca2:	e64e      	b.n	801a942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801aca4:	2800      	cmp	r0, #0
 801aca6:	f43f aeed 	beq.w	801aa84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801acaa:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801acae:	9108      	str	r1, [sp, #32]
 801acb0:	0e09      	lsrs	r1, r1, #24
 801acb2:	9110      	str	r1, [sp, #64]	@ 0x40
 801acb4:	e6e6      	b.n	801aa84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801acb6:	f807 0c03 	strb.w	r0, [r7, #-3]
 801acba:	f807 1c02 	strb.w	r1, [r7, #-2]
 801acbe:	e7e7      	b.n	801ac90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801acc0:	b019      	add	sp, #100	@ 0x64
 801acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801acc8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801accc:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801acd0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801acd4:	2c00      	cmp	r4, #0
 801acd6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801acda:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801acde:	fb00 4e03 	mla	lr, r0, r3, r4
 801ace2:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801ace6:	f2c0 80b8 	blt.w	801ae5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801acea:	45a1      	cmp	r9, r4
 801acec:	f340 80b5 	ble.w	801ae5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801acf0:	2800      	cmp	r0, #0
 801acf2:	f2c0 80b2 	blt.w	801ae5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801acf6:	4580      	cmp	r8, r0
 801acf8:	f340 80af 	ble.w	801ae5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801acfc:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801ad00:	f01e 0f01 	tst.w	lr, #1
 801ad04:	5d56      	ldrb	r6, [r2, r5]
 801ad06:	bf0c      	ite	eq
 801ad08:	f006 060f 	andeq.w	r6, r6, #15
 801ad0c:	1136      	asrne	r6, r6, #4
 801ad0e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ad12:	b2f6      	uxtb	r6, r6
 801ad14:	f114 0a01 	adds.w	sl, r4, #1
 801ad18:	f100 80a1 	bmi.w	801ae5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ad1c:	45d1      	cmp	r9, sl
 801ad1e:	f340 809e 	ble.w	801ae5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ad22:	2800      	cmp	r0, #0
 801ad24:	f2c0 809b 	blt.w	801ae5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ad28:	4580      	cmp	r8, r0
 801ad2a:	f340 8098 	ble.w	801ae5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ad2e:	2f00      	cmp	r7, #0
 801ad30:	f000 8097 	beq.w	801ae62 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801ad34:	f10e 0b01 	add.w	fp, lr, #1
 801ad38:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801ad3c:	f01b 0f01 	tst.w	fp, #1
 801ad40:	5d55      	ldrb	r5, [r2, r5]
 801ad42:	bf0c      	ite	eq
 801ad44:	f005 050f 	andeq.w	r5, r5, #15
 801ad48:	112d      	asrne	r5, r5, #4
 801ad4a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801ad4e:	b2ed      	uxtb	r5, r5
 801ad50:	f1bc 0f00 	cmp.w	ip, #0
 801ad54:	f000 8089 	beq.w	801ae6a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801ad58:	2c00      	cmp	r4, #0
 801ad5a:	f100 0001 	add.w	r0, r0, #1
 801ad5e:	f2c0 8082 	blt.w	801ae66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ad62:	45a1      	cmp	r9, r4
 801ad64:	dd7f      	ble.n	801ae66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ad66:	2800      	cmp	r0, #0
 801ad68:	db7d      	blt.n	801ae66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ad6a:	4580      	cmp	r8, r0
 801ad6c:	dd7b      	ble.n	801ae66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ad6e:	eb03 0b0e 	add.w	fp, r3, lr
 801ad72:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801ad76:	f01b 0f01 	tst.w	fp, #1
 801ad7a:	5d14      	ldrb	r4, [r2, r4]
 801ad7c:	bf0c      	ite	eq
 801ad7e:	f004 040f 	andeq.w	r4, r4, #15
 801ad82:	1124      	asrne	r4, r4, #4
 801ad84:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ad88:	b2e4      	uxtb	r4, r4
 801ad8a:	f1ba 0f00 	cmp.w	sl, #0
 801ad8e:	db6f      	blt.n	801ae70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ad90:	45d1      	cmp	r9, sl
 801ad92:	dd6d      	ble.n	801ae70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ad94:	2800      	cmp	r0, #0
 801ad96:	db6b      	blt.n	801ae70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ad98:	4580      	cmp	r8, r0
 801ad9a:	dd69      	ble.n	801ae70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ad9c:	2f00      	cmp	r7, #0
 801ad9e:	d069      	beq.n	801ae74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801ada0:	3301      	adds	r3, #1
 801ada2:	449e      	add	lr, r3
 801ada4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ada8:	f01e 0f01 	tst.w	lr, #1
 801adac:	5cd0      	ldrb	r0, [r2, r3]
 801adae:	bf0c      	ite	eq
 801adb0:	f000 000f 	andeq.w	r0, r0, #15
 801adb4:	1100      	asrne	r0, r0, #4
 801adb6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801adba:	b2c3      	uxtb	r3, r0
 801adbc:	b2ba      	uxth	r2, r7
 801adbe:	fa1f fc8c 	uxth.w	ip, ip
 801adc2:	fb02 f00c 	mul.w	r0, r2, ip
 801adc6:	0112      	lsls	r2, r2, #4
 801adc8:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801adcc:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801add0:	1a12      	subs	r2, r2, r0
 801add2:	fa1f fc8c 	uxth.w	ip, ip
 801add6:	b292      	uxth	r2, r2
 801add8:	eba7 070c 	sub.w	r7, r7, ip
 801addc:	436a      	muls	r2, r5
 801adde:	b2bf      	uxth	r7, r7
 801ade0:	fb06 2207 	mla	r2, r6, r7, r2
 801ade4:	fb0c 2404 	mla	r4, ip, r4, r2
 801ade8:	fb00 4303 	mla	r3, r0, r3, r4
 801adec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801adf0:	b38b      	cbz	r3, 801ae56 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801adf2:	4a21      	ldr	r2, [pc, #132]	@ (801ae78 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801adf4:	6814      	ldr	r4, [r2, #0]
 801adf6:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801adfa:	b2e5      	uxtb	r5, r4
 801adfc:	4353      	muls	r3, r2
 801adfe:	1c5a      	adds	r2, r3, #1
 801ae00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ae04:	1212      	asrs	r2, r2, #8
 801ae06:	b290      	uxth	r0, r2
 801ae08:	43d2      	mvns	r2, r2
 801ae0a:	fb15 f500 	smulbb	r5, r5, r0
 801ae0e:	b2d3      	uxtb	r3, r2
 801ae10:	780a      	ldrb	r2, [r1, #0]
 801ae12:	fb02 5203 	mla	r2, r2, r3, r5
 801ae16:	b292      	uxth	r2, r2
 801ae18:	1c55      	adds	r5, r2, #1
 801ae1a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ae1e:	784d      	ldrb	r5, [r1, #1]
 801ae20:	fb15 f503 	smulbb	r5, r5, r3
 801ae24:	1212      	asrs	r2, r2, #8
 801ae26:	700a      	strb	r2, [r1, #0]
 801ae28:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801ae2c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ae30:	fb02 5200 	mla	r2, r2, r0, r5
 801ae34:	b292      	uxth	r2, r2
 801ae36:	1c55      	adds	r5, r2, #1
 801ae38:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ae3c:	1212      	asrs	r2, r2, #8
 801ae3e:	704a      	strb	r2, [r1, #1]
 801ae40:	788a      	ldrb	r2, [r1, #2]
 801ae42:	fb12 f303 	smulbb	r3, r2, r3
 801ae46:	fb04 3300 	mla	r3, r4, r0, r3
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	1c5a      	adds	r2, r3, #1
 801ae4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ae52:	121b      	asrs	r3, r3, #8
 801ae54:	708b      	strb	r3, [r1, #2]
 801ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae5a:	2600      	movs	r6, #0
 801ae5c:	e75a      	b.n	801ad14 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801ae5e:	2500      	movs	r5, #0
 801ae60:	e776      	b.n	801ad50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801ae62:	463d      	mov	r5, r7
 801ae64:	e774      	b.n	801ad50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801ae66:	2400      	movs	r4, #0
 801ae68:	e78f      	b.n	801ad8a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801ae6a:	4663      	mov	r3, ip
 801ae6c:	4664      	mov	r4, ip
 801ae6e:	e7a5      	b.n	801adbc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ae70:	2300      	movs	r3, #0
 801ae72:	e7a3      	b.n	801adbc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ae74:	463b      	mov	r3, r7
 801ae76:	e7a1      	b.n	801adbc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ae78:	24065a58 	.word	0x24065a58

0801ae7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae80:	b097      	sub	sp, #92	@ 0x5c
 801ae82:	9214      	str	r2, [sp, #80]	@ 0x50
 801ae84:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae86:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ae88:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801ae8c:	9015      	str	r0, [sp, #84]	@ 0x54
 801ae8e:	910c      	str	r1, [sp, #48]	@ 0x30
 801ae90:	6850      	ldr	r0, [r2, #4]
 801ae92:	930e      	str	r3, [sp, #56]	@ 0x38
 801ae94:	6812      	ldr	r2, [r2, #0]
 801ae96:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801ae9a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801ae9e:	fb00 1303 	mla	r3, r0, r3, r1
 801aea2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aea6:	eb02 0a03 	add.w	sl, r2, r3
 801aeaa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aeac:	689b      	ldr	r3, [r3, #8]
 801aeae:	3301      	adds	r3, #1
 801aeb0:	f023 0301 	bic.w	r3, r3, #1
 801aeb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aeb6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aeb8:	681f      	ldr	r7, [r3, #0]
 801aeba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	dc03      	bgt.n	801aec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801aec0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	f340 8247 	ble.w	801b356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801aec8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aeca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aece:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aed2:	1e48      	subs	r0, r1, #1
 801aed4:	f102 3cff 	add.w	ip, r2, #4294967295
 801aed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	f340 80e5 	ble.w	801b0aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801aee0:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801aee4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801aee8:	d406      	bmi.n	801aef8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aeea:	4586      	cmp	lr, r0
 801aeec:	da04      	bge.n	801aef8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	db02      	blt.n	801aef8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aef2:	4563      	cmp	r3, ip
 801aef4:	f2c0 80da 	blt.w	801b0ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801aef8:	f11e 0e01 	adds.w	lr, lr, #1
 801aefc:	f100 80cb 	bmi.w	801b096 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801af00:	4571      	cmp	r1, lr
 801af02:	f2c0 80c8 	blt.w	801b096 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801af06:	3301      	adds	r3, #1
 801af08:	f100 80c5 	bmi.w	801b096 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801af0c:	429a      	cmp	r2, r3
 801af0e:	f2c0 80c2 	blt.w	801b096 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801af12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af14:	46d0      	mov	r8, sl
 801af16:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801af1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801af1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801af1e:	2b00      	cmp	r3, #0
 801af20:	f340 80e3 	ble.w	801b0ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801af24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801af26:	1430      	asrs	r0, r6, #16
 801af28:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801af2c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801af30:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801af34:	142b      	asrs	r3, r5, #16
 801af36:	f100 812e 	bmi.w	801b196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801af3a:	f10c 3bff 	add.w	fp, ip, #4294967295
 801af3e:	455b      	cmp	r3, fp
 801af40:	f280 8129 	bge.w	801b196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801af44:	2800      	cmp	r0, #0
 801af46:	f2c0 8126 	blt.w	801b196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801af4a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801af4e:	4558      	cmp	r0, fp
 801af50:	f280 8121 	bge.w	801b196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801af54:	fb00 3309 	mla	r3, r0, r9, r3
 801af58:	0858      	lsrs	r0, r3, #1
 801af5a:	07dc      	lsls	r4, r3, #31
 801af5c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801af60:	bf54      	ite	pl
 801af62:	f00c 0c0f 	andpl.w	ip, ip, #15
 801af66:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801af6a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af6e:	fa5f fc8c 	uxtb.w	ip, ip
 801af72:	2a00      	cmp	r2, #0
 801af74:	f000 80fe 	beq.w	801b174 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801af78:	1c58      	adds	r0, r3, #1
 801af7a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801af7e:	07c0      	lsls	r0, r0, #31
 801af80:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801af84:	bf54      	ite	pl
 801af86:	f00e 0e0f 	andpl.w	lr, lr, #15
 801af8a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801af8e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801af92:	fa5f f08e 	uxtb.w	r0, lr
 801af96:	9010      	str	r0, [sp, #64]	@ 0x40
 801af98:	b1d9      	cbz	r1, 801afd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801af9a:	444b      	add	r3, r9
 801af9c:	0858      	lsrs	r0, r3, #1
 801af9e:	07dc      	lsls	r4, r3, #31
 801afa0:	f103 0301 	add.w	r3, r3, #1
 801afa4:	5c38      	ldrb	r0, [r7, r0]
 801afa6:	bf54      	ite	pl
 801afa8:	f000 000f 	andpl.w	r0, r0, #15
 801afac:	1100      	asrmi	r0, r0, #4
 801afae:	07dc      	lsls	r4, r3, #31
 801afb0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801afb4:	b2c0      	uxtb	r0, r0
 801afb6:	900a      	str	r0, [sp, #40]	@ 0x28
 801afb8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801afbc:	f817 e000 	ldrb.w	lr, [r7, r0]
 801afc0:	bf54      	ite	pl
 801afc2:	f00e 030f 	andpl.w	r3, lr, #15
 801afc6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801afca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801afce:	b2db      	uxtb	r3, r3
 801afd0:	9311      	str	r3, [sp, #68]	@ 0x44
 801afd2:	b292      	uxth	r2, r2
 801afd4:	b289      	uxth	r1, r1
 801afd6:	0113      	lsls	r3, r2, #4
 801afd8:	fb02 f001 	mul.w	r0, r2, r1
 801afdc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801afde:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801afe2:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801afe6:	1a1b      	subs	r3, r3, r0
 801afe8:	b289      	uxth	r1, r1
 801afea:	b29b      	uxth	r3, r3
 801afec:	ebae 0e01 	sub.w	lr, lr, r1
 801aff0:	4353      	muls	r3, r2
 801aff2:	fa1f fe8e 	uxth.w	lr, lr
 801aff6:	fb0c 320e 	mla	r2, ip, lr, r3
 801affa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801affc:	fb01 2203 	mla	r2, r1, r3, r2
 801b000:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b002:	fb00 2203 	mla	r2, r0, r3, r2
 801b006:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b00a:	2a00      	cmp	r2, #0
 801b00c:	d039      	beq.n	801b082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b00e:	4bc7      	ldr	r3, [pc, #796]	@ (801b32c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801b010:	6819      	ldr	r1, [r3, #0]
 801b012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b014:	fa5f fc81 	uxtb.w	ip, r1
 801b018:	435a      	muls	r2, r3
 801b01a:	1c53      	adds	r3, r2, #1
 801b01c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b020:	1212      	asrs	r2, r2, #8
 801b022:	b290      	uxth	r0, r2
 801b024:	43d2      	mvns	r2, r2
 801b026:	fb1c fc00 	smulbb	ip, ip, r0
 801b02a:	b2d3      	uxtb	r3, r2
 801b02c:	f898 2000 	ldrb.w	r2, [r8]
 801b030:	fb02 c203 	mla	r2, r2, r3, ip
 801b034:	b292      	uxth	r2, r2
 801b036:	f102 0c01 	add.w	ip, r2, #1
 801b03a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b03e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b042:	fb1c fc03 	smulbb	ip, ip, r3
 801b046:	1212      	asrs	r2, r2, #8
 801b048:	f888 2000 	strb.w	r2, [r8]
 801b04c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801b050:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801b054:	fb02 c200 	mla	r2, r2, r0, ip
 801b058:	b292      	uxth	r2, r2
 801b05a:	f102 0c01 	add.w	ip, r2, #1
 801b05e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b062:	1212      	asrs	r2, r2, #8
 801b064:	f888 2001 	strb.w	r2, [r8, #1]
 801b068:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b06c:	fb12 f303 	smulbb	r3, r2, r3
 801b070:	fb01 3300 	mla	r3, r1, r0, r3
 801b074:	b29b      	uxth	r3, r3
 801b076:	1c5a      	adds	r2, r3, #1
 801b078:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b07c:	121b      	asrs	r3, r3, #8
 801b07e:	f888 3002 	strb.w	r3, [r8, #2]
 801b082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b084:	f108 0803 	add.w	r8, r8, #3
 801b088:	441d      	add	r5, r3
 801b08a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b08c:	441e      	add	r6, r3
 801b08e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b090:	3b01      	subs	r3, #1
 801b092:	930d      	str	r3, [sp, #52]	@ 0x34
 801b094:	e742      	b.n	801af1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b096:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b098:	f10a 0a03 	add.w	sl, sl, #3
 801b09c:	441d      	add	r5, r3
 801b09e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b0a0:	441e      	add	r6, r3
 801b0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0a4:	3b01      	subs	r3, #1
 801b0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0a8:	e716      	b.n	801aed8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b0aa:	d024      	beq.n	801b0f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0ae:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801b0b0:	3b01      	subs	r3, #1
 801b0b2:	fb00 5003 	mla	r0, r0, r3, r5
 801b0b6:	1400      	asrs	r0, r0, #16
 801b0b8:	f53f af2b 	bmi.w	801af12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b0bc:	3901      	subs	r1, #1
 801b0be:	4288      	cmp	r0, r1
 801b0c0:	f6bf af27 	bge.w	801af12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b0c4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801b0c6:	fb01 6303 	mla	r3, r1, r3, r6
 801b0ca:	141b      	asrs	r3, r3, #16
 801b0cc:	f53f af21 	bmi.w	801af12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b0d0:	3a01      	subs	r2, #1
 801b0d2:	4293      	cmp	r3, r2
 801b0d4:	f6bf af1d 	bge.w	801af12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b0d8:	f10a 0e03 	add.w	lr, sl, #3
 801b0dc:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801b0e0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801b0e4:	f1b8 0f00 	cmp.w	r8, #0
 801b0e8:	dc76      	bgt.n	801b1d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b0f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b0f4:	44a2      	add	sl, r4
 801b0f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	f340 812c 	ble.w	801b356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801b0fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b102:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b104:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b108:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b10c:	eef0 6a62 	vmov.f32	s13, s5
 801b110:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b114:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b118:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b11c:	ee16 5a90 	vmov	r5, s13
 801b120:	eef0 6a43 	vmov.f32	s13, s6
 801b124:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b128:	ee16 6a90 	vmov	r6, s13
 801b12c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b130:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b134:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b138:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b13c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b140:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b144:	ee12 2a90 	vmov	r2, s5
 801b148:	eef0 2a47 	vmov.f32	s5, s14
 801b14c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b150:	ee13 2a10 	vmov	r2, s6
 801b154:	9323      	str	r3, [sp, #140]	@ 0x8c
 801b156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b158:	eeb0 3a67 	vmov.f32	s6, s15
 801b15c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b160:	9324      	str	r3, [sp, #144]	@ 0x90
 801b162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b164:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b166:	3b01      	subs	r3, #1
 801b168:	930c      	str	r3, [sp, #48]	@ 0x30
 801b16a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b16c:	bf08      	it	eq
 801b16e:	4613      	moveq	r3, r2
 801b170:	9309      	str	r3, [sp, #36]	@ 0x24
 801b172:	e6a2      	b.n	801aeba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b174:	2900      	cmp	r1, #0
 801b176:	f43f af2c 	beq.w	801afd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b17a:	eb09 0003 	add.w	r0, r9, r3
 801b17e:	0843      	lsrs	r3, r0, #1
 801b180:	07c0      	lsls	r0, r0, #31
 801b182:	5cfb      	ldrb	r3, [r7, r3]
 801b184:	bf54      	ite	pl
 801b186:	f003 030f 	andpl.w	r3, r3, #15
 801b18a:	111b      	asrmi	r3, r3, #4
 801b18c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b190:	b2db      	uxtb	r3, r3
 801b192:	930a      	str	r3, [sp, #40]	@ 0x28
 801b194:	e71d      	b.n	801afd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b196:	f113 0b01 	adds.w	fp, r3, #1
 801b19a:	f53f af72 	bmi.w	801b082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b19e:	45dc      	cmp	ip, fp
 801b1a0:	f6ff af6f 	blt.w	801b082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b1a4:	f110 0b01 	adds.w	fp, r0, #1
 801b1a8:	f53f af6b 	bmi.w	801b082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b1ac:	45de      	cmp	lr, fp
 801b1ae:	f6ff af68 	blt.w	801b082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b1b2:	9302      	str	r3, [sp, #8]
 801b1b4:	fa0f f38e 	sxth.w	r3, lr
 801b1b8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b1ba:	9301      	str	r3, [sp, #4]
 801b1bc:	fa0f f38c 	sxth.w	r3, ip
 801b1c0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b1c4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b1c8:	9300      	str	r3, [sp, #0]
 801b1ca:	463a      	mov	r2, r7
 801b1cc:	464b      	mov	r3, r9
 801b1ce:	4641      	mov	r1, r8
 801b1d0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b1d2:	f7ff fd79 	bl	801acc8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801b1d6:	e754      	b.n	801b082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b1d8:	142a      	asrs	r2, r5, #16
 801b1da:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b1de:	1433      	asrs	r3, r6, #16
 801b1e0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b1e4:	fb09 2303 	mla	r3, r9, r3, r2
 801b1e8:	085a      	lsrs	r2, r3, #1
 801b1ea:	07dc      	lsls	r4, r3, #31
 801b1ec:	5cba      	ldrb	r2, [r7, r2]
 801b1ee:	bf54      	ite	pl
 801b1f0:	f002 020f 	andpl.w	r2, r2, #15
 801b1f4:	1112      	asrmi	r2, r2, #4
 801b1f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b1fa:	b2d2      	uxtb	r2, r2
 801b1fc:	2900      	cmp	r1, #0
 801b1fe:	f000 8097 	beq.w	801b330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b202:	f103 0b01 	add.w	fp, r3, #1
 801b206:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801b20a:	f01b 0f01 	tst.w	fp, #1
 801b20e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b212:	bf0c      	ite	eq
 801b214:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b218:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b21c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b220:	fa5f f48c 	uxtb.w	r4, ip
 801b224:	9412      	str	r4, [sp, #72]	@ 0x48
 801b226:	b300      	cbz	r0, 801b26a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801b228:	444b      	add	r3, r9
 801b22a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b22e:	07dc      	lsls	r4, r3, #31
 801b230:	f103 0301 	add.w	r3, r3, #1
 801b234:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b238:	bf54      	ite	pl
 801b23a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b23e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b242:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b246:	fa5f f48c 	uxtb.w	r4, ip
 801b24a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b24e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b250:	07dc      	lsls	r4, r3, #31
 801b252:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b256:	bf54      	ite	pl
 801b258:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b25c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b260:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b264:	fa5f f38c 	uxtb.w	r3, ip
 801b268:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b26a:	b289      	uxth	r1, r1
 801b26c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b26e:	b280      	uxth	r0, r0
 801b270:	fb01 f300 	mul.w	r3, r1, r0
 801b274:	0109      	lsls	r1, r1, #4
 801b276:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801b27a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801b27e:	1ac9      	subs	r1, r1, r3
 801b280:	b280      	uxth	r0, r0
 801b282:	b289      	uxth	r1, r1
 801b284:	ebac 0c00 	sub.w	ip, ip, r0
 801b288:	4361      	muls	r1, r4
 801b28a:	fa1f fc8c 	uxth.w	ip, ip
 801b28e:	fb02 120c 	mla	r2, r2, ip, r1
 801b292:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b294:	fb00 2001 	mla	r0, r0, r1, r2
 801b298:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b29a:	fb03 0302 	mla	r3, r3, r2, r0
 801b29e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d039      	beq.n	801b31a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b2a6:	4a21      	ldr	r2, [pc, #132]	@ (801b32c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801b2a8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b2ac:	6810      	ldr	r0, [r2, #0]
 801b2ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b2b0:	fa5f fc80 	uxtb.w	ip, r0
 801b2b4:	4353      	muls	r3, r2
 801b2b6:	1c5a      	adds	r2, r3, #1
 801b2b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b2bc:	121b      	asrs	r3, r3, #8
 801b2be:	b29a      	uxth	r2, r3
 801b2c0:	43db      	mvns	r3, r3
 801b2c2:	fb1c fc02 	smulbb	ip, ip, r2
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	fb01 c103 	mla	r1, r1, r3, ip
 801b2cc:	b289      	uxth	r1, r1
 801b2ce:	f101 0c01 	add.w	ip, r1, #1
 801b2d2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b2d6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801b2da:	fb1c fc03 	smulbb	ip, ip, r3
 801b2de:	1209      	asrs	r1, r1, #8
 801b2e0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b2e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b2e8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b2ec:	fb01 c102 	mla	r1, r1, r2, ip
 801b2f0:	b289      	uxth	r1, r1
 801b2f2:	f101 0c01 	add.w	ip, r1, #1
 801b2f6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b2fa:	1209      	asrs	r1, r1, #8
 801b2fc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b300:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b304:	fb11 f303 	smulbb	r3, r1, r3
 801b308:	fb00 3002 	mla	r0, r0, r2, r3
 801b30c:	b280      	uxth	r0, r0
 801b30e:	1c42      	adds	r2, r0, #1
 801b310:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b314:	1200      	asrs	r0, r0, #8
 801b316:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b31a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b31c:	f10e 0e03 	add.w	lr, lr, #3
 801b320:	f108 38ff 	add.w	r8, r8, #4294967295
 801b324:	441d      	add	r5, r3
 801b326:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b328:	441e      	add	r6, r3
 801b32a:	e6db      	b.n	801b0e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801b32c:	24065a58 	.word	0x24065a58
 801b330:	2800      	cmp	r0, #0
 801b332:	d09a      	beq.n	801b26a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801b334:	444b      	add	r3, r9
 801b336:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b33a:	07db      	lsls	r3, r3, #31
 801b33c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b340:	bf54      	ite	pl
 801b342:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b346:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b34a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b34e:	fa5f f38c 	uxtb.w	r3, ip
 801b352:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b354:	e789      	b.n	801b26a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801b356:	b017      	add	sp, #92	@ 0x5c
 801b358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b35c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b360:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801b364:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801b368:	2d00      	cmp	r5, #0
 801b36a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801b36e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801b372:	fb04 5e03 	mla	lr, r4, r3, r5
 801b376:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801b37a:	f2c0 80b1 	blt.w	801b4e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801b37e:	45a9      	cmp	r9, r5
 801b380:	f340 80ae 	ble.w	801b4e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801b384:	2c00      	cmp	r4, #0
 801b386:	f2c0 80ab 	blt.w	801b4e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801b38a:	45a0      	cmp	r8, r4
 801b38c:	f340 80a8 	ble.w	801b4e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801b390:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801b394:	f01e 0f01 	tst.w	lr, #1
 801b398:	5d97      	ldrb	r7, [r2, r6]
 801b39a:	bf0c      	ite	eq
 801b39c:	f007 070f 	andeq.w	r7, r7, #15
 801b3a0:	113f      	asrne	r7, r7, #4
 801b3a2:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801b3a6:	b2ff      	uxtb	r7, r7
 801b3a8:	f115 0a01 	adds.w	sl, r5, #1
 801b3ac:	f100 809a 	bmi.w	801b4e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801b3b0:	45d1      	cmp	r9, sl
 801b3b2:	f340 8097 	ble.w	801b4e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801b3b6:	2c00      	cmp	r4, #0
 801b3b8:	f2c0 8094 	blt.w	801b4e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801b3bc:	45a0      	cmp	r8, r4
 801b3be:	f340 8091 	ble.w	801b4e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	f000 8090 	beq.w	801b4e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801b3c8:	f10e 0b01 	add.w	fp, lr, #1
 801b3cc:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801b3d0:	f01b 0f01 	tst.w	fp, #1
 801b3d4:	5d96      	ldrb	r6, [r2, r6]
 801b3d6:	bf0c      	ite	eq
 801b3d8:	f006 060f 	andeq.w	r6, r6, #15
 801b3dc:	1136      	asrne	r6, r6, #4
 801b3de:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b3e2:	b2f6      	uxtb	r6, r6
 801b3e4:	f1bc 0f00 	cmp.w	ip, #0
 801b3e8:	f000 8082 	beq.w	801b4f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801b3ec:	2d00      	cmp	r5, #0
 801b3ee:	f104 0401 	add.w	r4, r4, #1
 801b3f2:	db7b      	blt.n	801b4ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b3f4:	45a9      	cmp	r9, r5
 801b3f6:	dd79      	ble.n	801b4ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b3f8:	2c00      	cmp	r4, #0
 801b3fa:	db77      	blt.n	801b4ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b3fc:	45a0      	cmp	r8, r4
 801b3fe:	dd75      	ble.n	801b4ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b400:	eb03 0b0e 	add.w	fp, r3, lr
 801b404:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801b408:	f01b 0f01 	tst.w	fp, #1
 801b40c:	5d55      	ldrb	r5, [r2, r5]
 801b40e:	bf0c      	ite	eq
 801b410:	f005 050f 	andeq.w	r5, r5, #15
 801b414:	112d      	asrne	r5, r5, #4
 801b416:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801b41a:	b2ed      	uxtb	r5, r5
 801b41c:	f1ba 0f00 	cmp.w	sl, #0
 801b420:	db69      	blt.n	801b4f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b422:	45d1      	cmp	r9, sl
 801b424:	dd67      	ble.n	801b4f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b426:	2c00      	cmp	r4, #0
 801b428:	db65      	blt.n	801b4f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b42a:	45a0      	cmp	r8, r4
 801b42c:	dd63      	ble.n	801b4f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b42e:	2800      	cmp	r0, #0
 801b430:	d063      	beq.n	801b4fa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801b432:	3301      	adds	r3, #1
 801b434:	449e      	add	lr, r3
 801b436:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b43a:	f01e 0f01 	tst.w	lr, #1
 801b43e:	5cd4      	ldrb	r4, [r2, r3]
 801b440:	bf0c      	ite	eq
 801b442:	f004 040f 	andeq.w	r4, r4, #15
 801b446:	1124      	asrne	r4, r4, #4
 801b448:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b44c:	b2e3      	uxtb	r3, r4
 801b44e:	b282      	uxth	r2, r0
 801b450:	fa1f fc8c 	uxth.w	ip, ip
 801b454:	fb02 f40c 	mul.w	r4, r2, ip
 801b458:	0112      	lsls	r2, r2, #4
 801b45a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801b45e:	fa1f f08c 	uxth.w	r0, ip
 801b462:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801b466:	1b12      	subs	r2, r2, r4
 801b468:	ebac 0c00 	sub.w	ip, ip, r0
 801b46c:	b292      	uxth	r2, r2
 801b46e:	fa1f fc8c 	uxth.w	ip, ip
 801b472:	4372      	muls	r2, r6
 801b474:	fb07 220c 	mla	r2, r7, ip, r2
 801b478:	fb00 2005 	mla	r0, r0, r5, r2
 801b47c:	fb04 0303 	mla	r3, r4, r3, r0
 801b480:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b484:	b353      	cbz	r3, 801b4dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801b486:	4a1e      	ldr	r2, [pc, #120]	@ (801b500 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801b488:	7808      	ldrb	r0, [r1, #0]
 801b48a:	6814      	ldr	r4, [r2, #0]
 801b48c:	b29a      	uxth	r2, r3
 801b48e:	43db      	mvns	r3, r3
 801b490:	b2e5      	uxtb	r5, r4
 801b492:	b2db      	uxtb	r3, r3
 801b494:	fb15 f502 	smulbb	r5, r5, r2
 801b498:	fb00 5003 	mla	r0, r0, r3, r5
 801b49c:	b280      	uxth	r0, r0
 801b49e:	1c45      	adds	r5, r0, #1
 801b4a0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b4a4:	784d      	ldrb	r5, [r1, #1]
 801b4a6:	fb15 f503 	smulbb	r5, r5, r3
 801b4aa:	1200      	asrs	r0, r0, #8
 801b4ac:	7008      	strb	r0, [r1, #0]
 801b4ae:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b4b2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b4b6:	fb00 5002 	mla	r0, r0, r2, r5
 801b4ba:	b280      	uxth	r0, r0
 801b4bc:	1c45      	adds	r5, r0, #1
 801b4be:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b4c2:	1200      	asrs	r0, r0, #8
 801b4c4:	7048      	strb	r0, [r1, #1]
 801b4c6:	7888      	ldrb	r0, [r1, #2]
 801b4c8:	fb10 f303 	smulbb	r3, r0, r3
 801b4cc:	fb04 3202 	mla	r2, r4, r2, r3
 801b4d0:	b292      	uxth	r2, r2
 801b4d2:	1c53      	adds	r3, r2, #1
 801b4d4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b4d8:	1212      	asrs	r2, r2, #8
 801b4da:	708a      	strb	r2, [r1, #2]
 801b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e0:	2700      	movs	r7, #0
 801b4e2:	e761      	b.n	801b3a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801b4e4:	2600      	movs	r6, #0
 801b4e6:	e77d      	b.n	801b3e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801b4e8:	4606      	mov	r6, r0
 801b4ea:	e77b      	b.n	801b3e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801b4ec:	2500      	movs	r5, #0
 801b4ee:	e795      	b.n	801b41c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801b4f0:	4663      	mov	r3, ip
 801b4f2:	4665      	mov	r5, ip
 801b4f4:	e7ab      	b.n	801b44e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	e7a9      	b.n	801b44e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	e7a7      	b.n	801b44e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801b4fe:	bf00      	nop
 801b500:	24065a58 	.word	0x24065a58

0801b504 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b508:	b093      	sub	sp, #76	@ 0x4c
 801b50a:	461c      	mov	r4, r3
 801b50c:	920c      	str	r2, [sp, #48]	@ 0x30
 801b50e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b510:	9011      	str	r0, [sp, #68]	@ 0x44
 801b512:	9107      	str	r1, [sp, #28]
 801b514:	6850      	ldr	r0, [r2, #4]
 801b516:	6812      	ldr	r2, [r2, #0]
 801b518:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801b51c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801b520:	fb00 1303 	mla	r3, r0, r3, r1
 801b524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b528:	eb02 0b03 	add.w	fp, r2, r3
 801b52c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b52e:	689b      	ldr	r3, [r3, #8]
 801b530:	3301      	adds	r3, #1
 801b532:	f023 0301 	bic.w	r3, r3, #1
 801b536:	9309      	str	r3, [sp, #36]	@ 0x24
 801b538:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b53a:	f8d3 8000 	ldr.w	r8, [r3]
 801b53e:	9b07      	ldr	r3, [sp, #28]
 801b540:	2b00      	cmp	r3, #0
 801b542:	dc03      	bgt.n	801b54c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b546:	2b00      	cmp	r3, #0
 801b548:	f340 822b 	ble.w	801b9a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b54c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b54e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b552:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b556:	1e48      	subs	r0, r1, #1
 801b558:	1e57      	subs	r7, r2, #1
 801b55a:	2c00      	cmp	r4, #0
 801b55c:	f340 80d7 	ble.w	801b70e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801b560:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b564:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b568:	d406      	bmi.n	801b578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b56a:	4584      	cmp	ip, r0
 801b56c:	da04      	bge.n	801b578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b56e:	2b00      	cmp	r3, #0
 801b570:	db02      	blt.n	801b578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b572:	42bb      	cmp	r3, r7
 801b574:	f2c0 80cc 	blt.w	801b710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801b578:	f11c 0c01 	adds.w	ip, ip, #1
 801b57c:	f100 80bf 	bmi.w	801b6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b580:	4561      	cmp	r1, ip
 801b582:	f2c0 80bc 	blt.w	801b6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b586:	3301      	adds	r3, #1
 801b588:	f100 80b9 	bmi.w	801b6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b58c:	429a      	cmp	r2, r3
 801b58e:	f2c0 80b6 	blt.w	801b6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b592:	46a2      	mov	sl, r4
 801b594:	465f      	mov	r7, fp
 801b596:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801b59a:	f1ba 0f00 	cmp.w	sl, #0
 801b59e:	f340 80d4 	ble.w	801b74a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801b5a2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801b5a6:	1430      	asrs	r0, r6, #16
 801b5a8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b5ac:	9308      	str	r3, [sp, #32]
 801b5ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b5b0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b5b4:	142b      	asrs	r3, r5, #16
 801b5b6:	f100 8124 	bmi.w	801b802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b5ba:	f10c 32ff 	add.w	r2, ip, #4294967295
 801b5be:	4293      	cmp	r3, r2
 801b5c0:	f280 811f 	bge.w	801b802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b5c4:	2800      	cmp	r0, #0
 801b5c6:	f2c0 811c 	blt.w	801b802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b5ca:	f10e 32ff 	add.w	r2, lr, #4294967295
 801b5ce:	4290      	cmp	r0, r2
 801b5d0:	f280 8117 	bge.w	801b802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b5d4:	fb00 3309 	mla	r3, r0, r9, r3
 801b5d8:	0858      	lsrs	r0, r3, #1
 801b5da:	07da      	lsls	r2, r3, #31
 801b5dc:	9a08      	ldr	r2, [sp, #32]
 801b5de:	f818 c000 	ldrb.w	ip, [r8, r0]
 801b5e2:	bf54      	ite	pl
 801b5e4:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b5e8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b5ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b5f0:	fa5f fc8c 	uxtb.w	ip, ip
 801b5f4:	2a00      	cmp	r2, #0
 801b5f6:	f000 80ed 	beq.w	801b7d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801b5fa:	1c58      	adds	r0, r3, #1
 801b5fc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b600:	07c0      	lsls	r0, r0, #31
 801b602:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801b606:	bf54      	ite	pl
 801b608:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b60c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b610:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b614:	fa5f fe8e 	uxtb.w	lr, lr
 801b618:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801b61c:	b1c9      	cbz	r1, 801b652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b61e:	444b      	add	r3, r9
 801b620:	0858      	lsrs	r0, r3, #1
 801b622:	07da      	lsls	r2, r3, #31
 801b624:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b628:	bf54      	ite	pl
 801b62a:	f000 000f 	andpl.w	r0, r0, #15
 801b62e:	1100      	asrmi	r0, r0, #4
 801b630:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b634:	b2c0      	uxtb	r0, r0
 801b636:	900a      	str	r0, [sp, #40]	@ 0x28
 801b638:	1c58      	adds	r0, r3, #1
 801b63a:	0843      	lsrs	r3, r0, #1
 801b63c:	07c2      	lsls	r2, r0, #31
 801b63e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b642:	bf54      	ite	pl
 801b644:	f003 030f 	andpl.w	r3, r3, #15
 801b648:	111b      	asrmi	r3, r3, #4
 801b64a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b64e:	b2db      	uxtb	r3, r3
 801b650:	930e      	str	r3, [sp, #56]	@ 0x38
 801b652:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b656:	b289      	uxth	r1, r1
 801b658:	fb02 f301 	mul.w	r3, r2, r1
 801b65c:	0112      	lsls	r2, r2, #4
 801b65e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b662:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801b666:	1ad2      	subs	r2, r2, r3
 801b668:	b289      	uxth	r1, r1
 801b66a:	b292      	uxth	r2, r2
 801b66c:	1a40      	subs	r0, r0, r1
 801b66e:	fa1f fe80 	uxth.w	lr, r0
 801b672:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b674:	4342      	muls	r2, r0
 801b676:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801b67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b67c:	fb01 c102 	mla	r1, r1, r2, ip
 801b680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b682:	fb03 1302 	mla	r3, r3, r2, r1
 801b686:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b68a:	b383      	cbz	r3, 801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b68c:	4ac6      	ldr	r2, [pc, #792]	@ (801b9a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801b68e:	2bff      	cmp	r3, #255	@ 0xff
 801b690:	6812      	ldr	r2, [r2, #0]
 801b692:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801b696:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801b69a:	b2d2      	uxtb	r2, r2
 801b69c:	f000 80ac 	beq.w	801b7f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b6a0:	b299      	uxth	r1, r3
 801b6a2:	43db      	mvns	r3, r3
 801b6a4:	f897 c000 	ldrb.w	ip, [r7]
 801b6a8:	fb12 f201 	smulbb	r2, r2, r1
 801b6ac:	b2db      	uxtb	r3, r3
 801b6ae:	fb10 f001 	smulbb	r0, r0, r1
 801b6b2:	fb0c 2203 	mla	r2, ip, r3, r2
 801b6b6:	fb1e f101 	smulbb	r1, lr, r1
 801b6ba:	b292      	uxth	r2, r2
 801b6bc:	f102 0c01 	add.w	ip, r2, #1
 801b6c0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b6c4:	1212      	asrs	r2, r2, #8
 801b6c6:	703a      	strb	r2, [r7, #0]
 801b6c8:	787a      	ldrb	r2, [r7, #1]
 801b6ca:	fb02 0003 	mla	r0, r2, r3, r0
 801b6ce:	b280      	uxth	r0, r0
 801b6d0:	1c42      	adds	r2, r0, #1
 801b6d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b6d6:	78ba      	ldrb	r2, [r7, #2]
 801b6d8:	fb02 1303 	mla	r3, r2, r3, r1
 801b6dc:	1200      	asrs	r0, r0, #8
 801b6de:	b29b      	uxth	r3, r3
 801b6e0:	7078      	strb	r0, [r7, #1]
 801b6e2:	f103 0e01 	add.w	lr, r3, #1
 801b6e6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801b6ea:	121b      	asrs	r3, r3, #8
 801b6ec:	70bb      	strb	r3, [r7, #2]
 801b6ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b6f0:	3703      	adds	r7, #3
 801b6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6f6:	441d      	add	r5, r3
 801b6f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b6fa:	441e      	add	r6, r3
 801b6fc:	e74d      	b.n	801b59a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b6fe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b700:	3c01      	subs	r4, #1
 801b702:	f10b 0b03 	add.w	fp, fp, #3
 801b706:	441d      	add	r5, r3
 801b708:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b70a:	441e      	add	r6, r3
 801b70c:	e725      	b.n	801b55a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b70e:	d021      	beq.n	801b754 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b710:	1e63      	subs	r3, r4, #1
 801b712:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801b714:	fb00 5003 	mla	r0, r0, r3, r5
 801b718:	1400      	asrs	r0, r0, #16
 801b71a:	f53f af3a 	bmi.w	801b592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b71e:	3901      	subs	r1, #1
 801b720:	4288      	cmp	r0, r1
 801b722:	f6bf af36 	bge.w	801b592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b726:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801b728:	fb01 6303 	mla	r3, r1, r3, r6
 801b72c:	141b      	asrs	r3, r3, #16
 801b72e:	f53f af30 	bmi.w	801b592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b732:	3a01      	subs	r2, #1
 801b734:	4293      	cmp	r3, r2
 801b736:	f6bf af2c 	bge.w	801b592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b73a:	f10b 0c03 	add.w	ip, fp, #3
 801b73e:	46a6      	mov	lr, r4
 801b740:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801b744:	f1be 0f00 	cmp.w	lr, #0
 801b748:	dc79      	bgt.n	801b83e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801b74a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801b74e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b752:	44a3      	add	fp, r4
 801b754:	9b07      	ldr	r3, [sp, #28]
 801b756:	2b00      	cmp	r3, #0
 801b758:	f340 8123 	ble.w	801b9a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b75c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b760:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b762:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b766:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b76a:	eef0 6a62 	vmov.f32	s13, s5
 801b76e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b772:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b776:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b77a:	ee16 5a90 	vmov	r5, s13
 801b77e:	eef0 6a43 	vmov.f32	s13, s6
 801b782:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b786:	ee16 6a90 	vmov	r6, s13
 801b78a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b78e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b792:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b796:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b79a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b79e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b7a2:	ee12 2a90 	vmov	r2, s5
 801b7a6:	eef0 2a47 	vmov.f32	s5, s14
 801b7aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7ae:	ee13 2a10 	vmov	r2, s6
 801b7b2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801b7b4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b7b6:	eeb0 3a67 	vmov.f32	s6, s15
 801b7ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7be:	9320      	str	r3, [sp, #128]	@ 0x80
 801b7c0:	9b07      	ldr	r3, [sp, #28]
 801b7c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b7c4:	3b01      	subs	r3, #1
 801b7c6:	9307      	str	r3, [sp, #28]
 801b7c8:	bf08      	it	eq
 801b7ca:	4614      	moveq	r4, r2
 801b7cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b7ce:	bf18      	it	ne
 801b7d0:	461c      	movne	r4, r3
 801b7d2:	e6b4      	b.n	801b53e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b7d4:	2900      	cmp	r1, #0
 801b7d6:	f43f af3c 	beq.w	801b652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b7da:	eb09 0003 	add.w	r0, r9, r3
 801b7de:	0843      	lsrs	r3, r0, #1
 801b7e0:	07c0      	lsls	r0, r0, #31
 801b7e2:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b7e6:	bf54      	ite	pl
 801b7e8:	f003 030f 	andpl.w	r3, r3, #15
 801b7ec:	111b      	asrmi	r3, r3, #4
 801b7ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b7f2:	b2db      	uxtb	r3, r3
 801b7f4:	930a      	str	r3, [sp, #40]	@ 0x28
 801b7f6:	e72c      	b.n	801b652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b7f8:	703a      	strb	r2, [r7, #0]
 801b7fa:	7078      	strb	r0, [r7, #1]
 801b7fc:	f887 e002 	strb.w	lr, [r7, #2]
 801b800:	e775      	b.n	801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b802:	1c5a      	adds	r2, r3, #1
 801b804:	f53f af73 	bmi.w	801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b808:	4594      	cmp	ip, r2
 801b80a:	f6ff af70 	blt.w	801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b80e:	1c42      	adds	r2, r0, #1
 801b810:	f53f af6d 	bmi.w	801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b814:	4596      	cmp	lr, r2
 801b816:	f6ff af6a 	blt.w	801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b81a:	9302      	str	r3, [sp, #8]
 801b81c:	fa0f f38e 	sxth.w	r3, lr
 801b820:	9a08      	ldr	r2, [sp, #32]
 801b822:	9301      	str	r3, [sp, #4]
 801b824:	fa0f f38c 	sxth.w	r3, ip
 801b828:	9105      	str	r1, [sp, #20]
 801b82a:	4639      	mov	r1, r7
 801b82c:	9300      	str	r3, [sp, #0]
 801b82e:	464b      	mov	r3, r9
 801b830:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b834:	4642      	mov	r2, r8
 801b836:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b838:	f7ff fd90 	bl	801b35c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801b83c:	e757      	b.n	801b6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b83e:	142a      	asrs	r2, r5, #16
 801b840:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b844:	1433      	asrs	r3, r6, #16
 801b846:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801b84a:	fb09 2303 	mla	r3, r9, r3, r2
 801b84e:	085a      	lsrs	r2, r3, #1
 801b850:	07d9      	lsls	r1, r3, #31
 801b852:	f818 2002 	ldrb.w	r2, [r8, r2]
 801b856:	bf54      	ite	pl
 801b858:	f002 020f 	andpl.w	r2, r2, #15
 801b85c:	1112      	asrmi	r2, r2, #4
 801b85e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b862:	b2d2      	uxtb	r2, r2
 801b864:	2800      	cmp	r0, #0
 801b866:	f000 8085 	beq.w	801b974 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801b86a:	f103 0a01 	add.w	sl, r3, #1
 801b86e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801b872:	f01a 0f01 	tst.w	sl, #1
 801b876:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b87a:	bf0c      	ite	eq
 801b87c:	f001 010f 	andeq.w	r1, r1, #15
 801b880:	1109      	asrne	r1, r1, #4
 801b882:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b886:	b2c9      	uxtb	r1, r1
 801b888:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b88a:	b1df      	cbz	r7, 801b8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801b88c:	444b      	add	r3, r9
 801b88e:	0859      	lsrs	r1, r3, #1
 801b890:	f013 0f01 	tst.w	r3, #1
 801b894:	f103 0301 	add.w	r3, r3, #1
 801b898:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b89c:	bf0c      	ite	eq
 801b89e:	f001 010f 	andeq.w	r1, r1, #15
 801b8a2:	1109      	asrne	r1, r1, #4
 801b8a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b8a8:	b2c9      	uxtb	r1, r1
 801b8aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b8ac:	0859      	lsrs	r1, r3, #1
 801b8ae:	07db      	lsls	r3, r3, #31
 801b8b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b8b4:	bf54      	ite	pl
 801b8b6:	f001 010f 	andpl.w	r1, r1, #15
 801b8ba:	1109      	asrmi	r1, r1, #4
 801b8bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b8c0:	b2c9      	uxtb	r1, r1
 801b8c2:	9110      	str	r1, [sp, #64]	@ 0x40
 801b8c4:	b280      	uxth	r0, r0
 801b8c6:	b2bf      	uxth	r7, r7
 801b8c8:	fb00 f307 	mul.w	r3, r0, r7
 801b8cc:	0100      	lsls	r0, r0, #4
 801b8ce:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801b8d2:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801b8d6:	1ac0      	subs	r0, r0, r3
 801b8d8:	b2bf      	uxth	r7, r7
 801b8da:	b280      	uxth	r0, r0
 801b8dc:	1bc9      	subs	r1, r1, r7
 801b8de:	fa1f fa81 	uxth.w	sl, r1
 801b8e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b8e4:	4348      	muls	r0, r1
 801b8e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b8e8:	fb02 020a 	mla	r2, r2, sl, r0
 801b8ec:	fb07 2701 	mla	r7, r7, r1, r2
 801b8f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b8f2:	fb03 7302 	mla	r3, r3, r2, r7
 801b8f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b8fa:	b393      	cbz	r3, 801b962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b8fc:	4a2a      	ldr	r2, [pc, #168]	@ (801b9a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801b8fe:	2bff      	cmp	r3, #255	@ 0xff
 801b900:	6811      	ldr	r1, [r2, #0]
 801b902:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801b906:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801b90a:	b2c9      	uxtb	r1, r1
 801b90c:	d042      	beq.n	801b994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801b90e:	b298      	uxth	r0, r3
 801b910:	43db      	mvns	r3, r3
 801b912:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801b916:	fb11 f100 	smulbb	r1, r1, r0
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	fb17 f700 	smulbb	r7, r7, r0
 801b920:	fb02 1103 	mla	r1, r2, r3, r1
 801b924:	fb1a f000 	smulbb	r0, sl, r0
 801b928:	b289      	uxth	r1, r1
 801b92a:	1c4a      	adds	r2, r1, #1
 801b92c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b930:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801b934:	fb02 7703 	mla	r7, r2, r3, r7
 801b938:	1209      	asrs	r1, r1, #8
 801b93a:	b2bf      	uxth	r7, r7
 801b93c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b940:	1c7a      	adds	r2, r7, #1
 801b942:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b946:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801b94a:	fb02 0303 	mla	r3, r2, r3, r0
 801b94e:	123f      	asrs	r7, r7, #8
 801b950:	b29b      	uxth	r3, r3
 801b952:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b956:	1c5a      	adds	r2, r3, #1
 801b958:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b95c:	121b      	asrs	r3, r3, #8
 801b95e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801b962:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b964:	f10c 0c03 	add.w	ip, ip, #3
 801b968:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b96c:	441d      	add	r5, r3
 801b96e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b970:	441e      	add	r6, r3
 801b972:	e6e7      	b.n	801b744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801b974:	2f00      	cmp	r7, #0
 801b976:	d0a5      	beq.n	801b8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801b978:	444b      	add	r3, r9
 801b97a:	0859      	lsrs	r1, r3, #1
 801b97c:	07db      	lsls	r3, r3, #31
 801b97e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b982:	bf54      	ite	pl
 801b984:	f001 010f 	andpl.w	r1, r1, #15
 801b988:	1109      	asrmi	r1, r1, #4
 801b98a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b98e:	b2c9      	uxtb	r1, r1
 801b990:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b992:	e797      	b.n	801b8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801b994:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b998:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b99c:	f80c ac01 	strb.w	sl, [ip, #-1]
 801b9a0:	e7df      	b.n	801b962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b9a2:	b013      	add	sp, #76	@ 0x4c
 801b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a8:	24065a58 	.word	0x24065a58

0801b9ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801b9ac:	b530      	push	{r4, r5, lr}
 801b9ae:	b29d      	uxth	r5, r3
 801b9b0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801b9b4:	780c      	ldrb	r4, [r1, #0]
 801b9b6:	b298      	uxth	r0, r3
 801b9b8:	7813      	ldrb	r3, [r2, #0]
 801b9ba:	fb14 f405 	smulbb	r4, r4, r5
 801b9be:	fb13 f300 	smulbb	r3, r3, r0
 801b9c2:	441c      	add	r4, r3
 801b9c4:	b2a4      	uxth	r4, r4
 801b9c6:	1c63      	adds	r3, r4, #1
 801b9c8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b9cc:	7853      	ldrb	r3, [r2, #1]
 801b9ce:	fb13 f300 	smulbb	r3, r3, r0
 801b9d2:	1224      	asrs	r4, r4, #8
 801b9d4:	7014      	strb	r4, [r2, #0]
 801b9d6:	784c      	ldrb	r4, [r1, #1]
 801b9d8:	fb14 f405 	smulbb	r4, r4, r5
 801b9dc:	441c      	add	r4, r3
 801b9de:	b2a4      	uxth	r4, r4
 801b9e0:	1c63      	adds	r3, r4, #1
 801b9e2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b9e6:	1224      	asrs	r4, r4, #8
 801b9e8:	7054      	strb	r4, [r2, #1]
 801b9ea:	788b      	ldrb	r3, [r1, #2]
 801b9ec:	7891      	ldrb	r1, [r2, #2]
 801b9ee:	fb13 f305 	smulbb	r3, r3, r5
 801b9f2:	fb11 f000 	smulbb	r0, r1, r0
 801b9f6:	4403      	add	r3, r0
 801b9f8:	b29b      	uxth	r3, r3
 801b9fa:	1c59      	adds	r1, r3, #1
 801b9fc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ba00:	121b      	asrs	r3, r3, #8
 801ba02:	7093      	strb	r3, [r2, #2]
 801ba04:	bd30      	pop	{r4, r5, pc}
	...

0801ba08 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba0c:	461c      	mov	r4, r3
 801ba0e:	b08b      	sub	sp, #44	@ 0x2c
 801ba10:	460e      	mov	r6, r1
 801ba12:	4615      	mov	r5, r2
 801ba14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ba16:	4682      	mov	sl, r0
 801ba18:	6861      	ldr	r1, [r4, #4]
 801ba1a:	aa06      	add	r2, sp, #24
 801ba1c:	6820      	ldr	r0, [r4, #0]
 801ba1e:	2702      	movs	r7, #2
 801ba20:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801ba24:	3504      	adds	r5, #4
 801ba26:	c203      	stmia	r2!, {r0, r1}
 801ba28:	6818      	ldr	r0, [r3, #0]
 801ba2a:	aa08      	add	r2, sp, #32
 801ba2c:	6859      	ldr	r1, [r3, #4]
 801ba2e:	c203      	stmia	r2!, {r0, r1}
 801ba30:	a806      	add	r0, sp, #24
 801ba32:	f7f3 fbfb 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ba36:	4621      	mov	r1, r4
 801ba38:	a808      	add	r0, sp, #32
 801ba3a:	f7f3 fc1f 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ba3e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ba42:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801ba46:	f002 0301 	and.w	r3, r2, #1
 801ba4a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801ba4e:	9302      	str	r3, [sp, #8]
 801ba50:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ba54:	f003 0101 	and.w	r1, r3, #1
 801ba58:	9101      	str	r1, [sp, #4]
 801ba5a:	9801      	ldr	r0, [sp, #4]
 801ba5c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801ba60:	4403      	add	r3, r0
 801ba62:	fb01 2303 	mla	r3, r1, r3, r2
 801ba66:	fb93 f3f7 	sdiv	r3, r3, r7
 801ba6a:	441e      	add	r6, r3
 801ba6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ba70:	441a      	add	r2, r3
 801ba72:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801ba76:	4419      	add	r1, r3
 801ba78:	4b70      	ldr	r3, [pc, #448]	@ (801bc3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801ba7a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ba7e:	6818      	ldr	r0, [r3, #0]
 801ba80:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801ba84:	6803      	ldr	r3, [r0, #0]
 801ba86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba88:	4798      	blx	r3
 801ba8a:	4a6d      	ldr	r2, [pc, #436]	@ (801bc40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801ba8c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ba90:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ba94:	8813      	ldrh	r3, [r2, #0]
 801ba96:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801ba9a:	fb03 1404 	mla	r4, r3, r4, r1
 801ba9e:	4611      	mov	r1, r2
 801baa0:	fb0b f303 	mul.w	r3, fp, r3
 801baa4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801baa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801baac:	4404      	add	r4, r0
 801baae:	4423      	add	r3, r4
 801bab0:	d073      	beq.n	801bb9a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801bab2:	9705      	str	r7, [sp, #20]
 801bab4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801bab8:	9b03      	ldr	r3, [sp, #12]
 801baba:	429c      	cmp	r4, r3
 801babc:	f080 80b5 	bcs.w	801bc2a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801bac0:	9b02      	ldr	r3, [sp, #8]
 801bac2:	b35b      	cbz	r3, 801bb1c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801bac4:	7831      	ldrb	r1, [r6, #0]
 801bac6:	4622      	mov	r2, r4
 801bac8:	1c77      	adds	r7, r6, #1
 801baca:	3403      	adds	r4, #3
 801bacc:	f001 010f 	and.w	r1, r1, #15
 801bad0:	f108 3bff 	add.w	fp, r8, #4294967295
 801bad4:	464b      	mov	r3, r9
 801bad6:	4650      	mov	r0, sl
 801bad8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801badc:	4429      	add	r1, r5
 801bade:	f7ff ff65 	bl	801b9ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801bae2:	f1bb 0f01 	cmp.w	fp, #1
 801bae6:	dd1c      	ble.n	801bb22 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801bae8:	7839      	ldrb	r1, [r7, #0]
 801baea:	4622      	mov	r2, r4
 801baec:	464b      	mov	r3, r9
 801baee:	4650      	mov	r0, sl
 801baf0:	0909      	lsrs	r1, r1, #4
 801baf2:	f1ab 0b02 	sub.w	fp, fp, #2
 801baf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bafa:	4429      	add	r1, r5
 801bafc:	f7ff ff56 	bl	801b9ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801bb00:	f817 1b01 	ldrb.w	r1, [r7], #1
 801bb04:	1ce2      	adds	r2, r4, #3
 801bb06:	464b      	mov	r3, r9
 801bb08:	f001 010f 	and.w	r1, r1, #15
 801bb0c:	4650      	mov	r0, sl
 801bb0e:	3406      	adds	r4, #6
 801bb10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bb14:	4429      	add	r1, r5
 801bb16:	f7ff ff49 	bl	801b9ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801bb1a:	e7e2      	b.n	801bae2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801bb1c:	4637      	mov	r7, r6
 801bb1e:	46c3      	mov	fp, r8
 801bb20:	e7df      	b.n	801bae2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801bb22:	d10a      	bne.n	801bb3a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801bb24:	7839      	ldrb	r1, [r7, #0]
 801bb26:	4622      	mov	r2, r4
 801bb28:	3403      	adds	r4, #3
 801bb2a:	464b      	mov	r3, r9
 801bb2c:	0909      	lsrs	r1, r1, #4
 801bb2e:	4650      	mov	r0, sl
 801bb30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bb34:	4429      	add	r1, r5
 801bb36:	f7ff ff39 	bl	801b9ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801bb3a:	9b04      	ldr	r3, [sp, #16]
 801bb3c:	9a01      	ldr	r2, [sp, #4]
 801bb3e:	881b      	ldrh	r3, [r3, #0]
 801bb40:	eba3 0308 	sub.w	r3, r3, r8
 801bb44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb48:	441c      	add	r4, r3
 801bb4a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bb4e:	4413      	add	r3, r2
 801bb50:	9a05      	ldr	r2, [sp, #20]
 801bb52:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb56:	441e      	add	r6, r3
 801bb58:	e7ae      	b.n	801bab8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801bb5a:	4632      	mov	r2, r6
 801bb5c:	46c4      	mov	ip, r8
 801bb5e:	e037      	b.n	801bbd0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801bb60:	d10e      	bne.n	801bb80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801bb62:	7812      	ldrb	r2, [r2, #0]
 801bb64:	3003      	adds	r0, #3
 801bb66:	0912      	lsrs	r2, r2, #4
 801bb68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bb6c:	18ac      	adds	r4, r5, r2
 801bb6e:	5caa      	ldrb	r2, [r5, r2]
 801bb70:	f800 2c03 	strb.w	r2, [r0, #-3]
 801bb74:	7862      	ldrb	r2, [r4, #1]
 801bb76:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bb7a:	78a2      	ldrb	r2, [r4, #2]
 801bb7c:	f800 2c01 	strb.w	r2, [r0, #-1]
 801bb80:	880c      	ldrh	r4, [r1, #0]
 801bb82:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801bb86:	eba4 0408 	sub.w	r4, r4, r8
 801bb8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bb8e:	4404      	add	r4, r0
 801bb90:	9801      	ldr	r0, [sp, #4]
 801bb92:	4402      	add	r2, r0
 801bb94:	fb92 f2f7 	sdiv	r2, r2, r7
 801bb98:	4416      	add	r6, r2
 801bb9a:	429c      	cmp	r4, r3
 801bb9c:	d245      	bcs.n	801bc2a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801bb9e:	9a02      	ldr	r2, [sp, #8]
 801bba0:	2a00      	cmp	r2, #0
 801bba2:	d0da      	beq.n	801bb5a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801bba4:	7830      	ldrb	r0, [r6, #0]
 801bba6:	1c72      	adds	r2, r6, #1
 801bba8:	3403      	adds	r4, #3
 801bbaa:	f000 000f 	and.w	r0, r0, #15
 801bbae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bbb2:	eb05 0c00 	add.w	ip, r5, r0
 801bbb6:	5c28      	ldrb	r0, [r5, r0]
 801bbb8:	f804 0c03 	strb.w	r0, [r4, #-3]
 801bbbc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801bbc0:	f804 0c02 	strb.w	r0, [r4, #-2]
 801bbc4:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801bbc8:	f108 3cff 	add.w	ip, r8, #4294967295
 801bbcc:	f804 0c01 	strb.w	r0, [r4, #-1]
 801bbd0:	f1bc 0f01 	cmp.w	ip, #1
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f104 0406 	add.w	r4, r4, #6
 801bbda:	ddc1      	ble.n	801bb60 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801bbdc:	7810      	ldrb	r0, [r2, #0]
 801bbde:	f1ac 0c02 	sub.w	ip, ip, #2
 801bbe2:	0900      	lsrs	r0, r0, #4
 801bbe4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bbe8:	eb05 0e00 	add.w	lr, r5, r0
 801bbec:	5c28      	ldrb	r0, [r5, r0]
 801bbee:	f804 0c06 	strb.w	r0, [r4, #-6]
 801bbf2:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801bbf6:	f804 0c05 	strb.w	r0, [r4, #-5]
 801bbfa:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801bbfe:	f804 0c04 	strb.w	r0, [r4, #-4]
 801bc02:	f812 0b01 	ldrb.w	r0, [r2], #1
 801bc06:	f000 000f 	and.w	r0, r0, #15
 801bc0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bc0e:	eb05 0e00 	add.w	lr, r5, r0
 801bc12:	5c28      	ldrb	r0, [r5, r0]
 801bc14:	f804 0c03 	strb.w	r0, [r4, #-3]
 801bc18:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801bc1c:	f804 0c02 	strb.w	r0, [r4, #-2]
 801bc20:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801bc24:	f804 0c01 	strb.w	r0, [r4, #-1]
 801bc28:	e7d2      	b.n	801bbd0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801bc2a:	4b04      	ldr	r3, [pc, #16]	@ (801bc3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801bc2c:	6818      	ldr	r0, [r3, #0]
 801bc2e:	6803      	ldr	r3, [r0, #0]
 801bc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc32:	4798      	blx	r3
 801bc34:	b00b      	add	sp, #44	@ 0x2c
 801bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc3a:	bf00      	nop
 801bc3c:	24065a50 	.word	0x24065a50
 801bc40:	24065a4a 	.word	0x24065a4a

0801bc44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801bc44:	b530      	push	{r4, r5, lr}
 801bc46:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801bc4a:	780d      	ldrb	r5, [r1, #0]
 801bc4c:	28ff      	cmp	r0, #255	@ 0xff
 801bc4e:	d107      	bne.n	801bc60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801bc50:	2bff      	cmp	r3, #255	@ 0xff
 801bc52:	d105      	bne.n	801bc60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801bc54:	7015      	strb	r5, [r2, #0]
 801bc56:	784b      	ldrb	r3, [r1, #1]
 801bc58:	7053      	strb	r3, [r2, #1]
 801bc5a:	788b      	ldrb	r3, [r1, #2]
 801bc5c:	7093      	strb	r3, [r2, #2]
 801bc5e:	bd30      	pop	{r4, r5, pc}
 801bc60:	fb10 f003 	smulbb	r0, r0, r3
 801bc64:	b283      	uxth	r3, r0
 801bc66:	1c58      	adds	r0, r3, #1
 801bc68:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bc6c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bc70:	b284      	uxth	r4, r0
 801bc72:	43c0      	mvns	r0, r0
 801bc74:	fb15 f504 	smulbb	r5, r5, r4
 801bc78:	b2c3      	uxtb	r3, r0
 801bc7a:	7810      	ldrb	r0, [r2, #0]
 801bc7c:	fb00 5003 	mla	r0, r0, r3, r5
 801bc80:	b280      	uxth	r0, r0
 801bc82:	1c45      	adds	r5, r0, #1
 801bc84:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801bc88:	7855      	ldrb	r5, [r2, #1]
 801bc8a:	fb15 f503 	smulbb	r5, r5, r3
 801bc8e:	1200      	asrs	r0, r0, #8
 801bc90:	7010      	strb	r0, [r2, #0]
 801bc92:	7848      	ldrb	r0, [r1, #1]
 801bc94:	fb00 5004 	mla	r0, r0, r4, r5
 801bc98:	b280      	uxth	r0, r0
 801bc9a:	1c45      	adds	r5, r0, #1
 801bc9c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801bca0:	1200      	asrs	r0, r0, #8
 801bca2:	7050      	strb	r0, [r2, #1]
 801bca4:	7888      	ldrb	r0, [r1, #2]
 801bca6:	7891      	ldrb	r1, [r2, #2]
 801bca8:	fb11 f303 	smulbb	r3, r1, r3
 801bcac:	fb00 3304 	mla	r3, r0, r4, r3
 801bcb0:	b29b      	uxth	r3, r3
 801bcb2:	1c59      	adds	r1, r3, #1
 801bcb4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bcb8:	121b      	asrs	r3, r3, #8
 801bcba:	e7cf      	b.n	801bc5c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801bcbc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc0:	461d      	mov	r5, r3
 801bcc2:	b08f      	sub	sp, #60	@ 0x3c
 801bcc4:	460c      	mov	r4, r1
 801bcc6:	4616      	mov	r6, r2
 801bcc8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bcca:	4680      	mov	r8, r0
 801bccc:	6869      	ldr	r1, [r5, #4]
 801bcce:	aa0a      	add	r2, sp, #40	@ 0x28
 801bcd0:	6828      	ldr	r0, [r5, #0]
 801bcd2:	3604      	adds	r6, #4
 801bcd4:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 801bcd8:	4f57      	ldr	r7, [pc, #348]	@ (801be38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801bcda:	c203      	stmia	r2!, {r0, r1}
 801bcdc:	6818      	ldr	r0, [r3, #0]
 801bcde:	aa0c      	add	r2, sp, #48	@ 0x30
 801bce0:	6859      	ldr	r1, [r3, #4]
 801bce2:	c203      	stmia	r2!, {r0, r1}
 801bce4:	a80a      	add	r0, sp, #40	@ 0x28
 801bce6:	f7f3 faa1 	bl	800f22c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bcea:	4629      	mov	r1, r5
 801bcec:	a80c      	add	r0, sp, #48	@ 0x30
 801bcee:	2502      	movs	r5, #2
 801bcf0:	f7f3 fac4 	bl	800f27c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bcf4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801bcf8:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 801bcfc:	f002 0301 	and.w	r3, r2, #1
 801bd00:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 801bd04:	9304      	str	r3, [sp, #16]
 801bd06:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801bd0a:	f003 0101 	and.w	r1, r3, #1
 801bd0e:	9103      	str	r1, [sp, #12]
 801bd10:	9803      	ldr	r0, [sp, #12]
 801bd12:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801bd16:	4403      	add	r3, r0
 801bd18:	6838      	ldr	r0, [r7, #0]
 801bd1a:	fb01 2303 	mla	r3, r1, r3, r2
 801bd1e:	fb93 f3f5 	sdiv	r3, r3, r5
 801bd22:	18e5      	adds	r5, r4, r3
 801bd24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801bd28:	441a      	add	r2, r3
 801bd2a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801bd2e:	4419      	add	r1, r3
 801bd30:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801bd34:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801bd38:	6803      	ldr	r3, [r0, #0]
 801bd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bd3c:	4798      	blx	r3
 801bd3e:	4a3f      	ldr	r2, [pc, #252]	@ (801be3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801bd40:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801bd44:	8813      	ldrh	r3, [r2, #0]
 801bd46:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801bd4a:	9207      	str	r2, [sp, #28]
 801bd4c:	fb03 1404 	mla	r4, r3, r4, r1
 801bd50:	fb0a f303 	mul.w	r3, sl, r3
 801bd54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd5c:	4404      	add	r4, r0
 801bd5e:	18e3      	adds	r3, r4, r3
 801bd60:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801bd64:	9b05      	ldr	r3, [sp, #20]
 801bd66:	429c      	cmp	r4, r3
 801bd68:	d25d      	bcs.n	801be26 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801bd6a:	9b04      	ldr	r3, [sp, #16]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d037      	beq.n	801bde0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801bd70:	782b      	ldrb	r3, [r5, #0]
 801bd72:	1c6f      	adds	r7, r5, #1
 801bd74:	f003 030f 	and.w	r3, r3, #15
 801bd78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd7e:	0e1b      	lsrs	r3, r3, #24
 801bd80:	d006      	beq.n	801bd90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801bd82:	9300      	str	r3, [sp, #0]
 801bd84:	4622      	mov	r2, r4
 801bd86:	464b      	mov	r3, r9
 801bd88:	a909      	add	r1, sp, #36	@ 0x24
 801bd8a:	4640      	mov	r0, r8
 801bd8c:	f7ff ff5a 	bl	801bc44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801bd90:	3403      	adds	r4, #3
 801bd92:	f10b 3aff 	add.w	sl, fp, #4294967295
 801bd96:	f1ba 0f01 	cmp.w	sl, #1
 801bd9a:	dd24      	ble.n	801bde6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801bd9c:	783b      	ldrb	r3, [r7, #0]
 801bd9e:	091b      	lsrs	r3, r3, #4
 801bda0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bda4:	9308      	str	r3, [sp, #32]
 801bda6:	0e1b      	lsrs	r3, r3, #24
 801bda8:	d006      	beq.n	801bdb8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801bdaa:	9300      	str	r3, [sp, #0]
 801bdac:	4622      	mov	r2, r4
 801bdae:	464b      	mov	r3, r9
 801bdb0:	a908      	add	r1, sp, #32
 801bdb2:	4640      	mov	r0, r8
 801bdb4:	f7ff ff46 	bl	801bc44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801bdb8:	f817 3b01 	ldrb.w	r3, [r7], #1
 801bdbc:	f003 030f 	and.w	r3, r3, #15
 801bdc0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bdc4:	9309      	str	r3, [sp, #36]	@ 0x24
 801bdc6:	0e1b      	lsrs	r3, r3, #24
 801bdc8:	d006      	beq.n	801bdd8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801bdca:	9300      	str	r3, [sp, #0]
 801bdcc:	1ce2      	adds	r2, r4, #3
 801bdce:	464b      	mov	r3, r9
 801bdd0:	a909      	add	r1, sp, #36	@ 0x24
 801bdd2:	4640      	mov	r0, r8
 801bdd4:	f7ff ff36 	bl	801bc44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801bdd8:	3406      	adds	r4, #6
 801bdda:	f1aa 0a02 	sub.w	sl, sl, #2
 801bdde:	e7da      	b.n	801bd96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801bde0:	462f      	mov	r7, r5
 801bde2:	46da      	mov	sl, fp
 801bde4:	e7d7      	b.n	801bd96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801bde6:	d10e      	bne.n	801be06 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801bde8:	783b      	ldrb	r3, [r7, #0]
 801bdea:	091b      	lsrs	r3, r3, #4
 801bdec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bdf0:	9309      	str	r3, [sp, #36]	@ 0x24
 801bdf2:	0e1b      	lsrs	r3, r3, #24
 801bdf4:	d006      	beq.n	801be04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801bdf6:	9300      	str	r3, [sp, #0]
 801bdf8:	4622      	mov	r2, r4
 801bdfa:	464b      	mov	r3, r9
 801bdfc:	a909      	add	r1, sp, #36	@ 0x24
 801bdfe:	4640      	mov	r0, r8
 801be00:	f7ff ff20 	bl	801bc44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801be04:	3403      	adds	r4, #3
 801be06:	9b07      	ldr	r3, [sp, #28]
 801be08:	9a03      	ldr	r2, [sp, #12]
 801be0a:	881b      	ldrh	r3, [r3, #0]
 801be0c:	eba3 030b 	sub.w	r3, r3, fp
 801be10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be14:	441c      	add	r4, r3
 801be16:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801be1a:	4413      	add	r3, r2
 801be1c:	2202      	movs	r2, #2
 801be1e:	fb93 f3f2 	sdiv	r3, r3, r2
 801be22:	441d      	add	r5, r3
 801be24:	e79e      	b.n	801bd64 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801be26:	9b06      	ldr	r3, [sp, #24]
 801be28:	6818      	ldr	r0, [r3, #0]
 801be2a:	6803      	ldr	r3, [r0, #0]
 801be2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be2e:	4798      	blx	r3
 801be30:	b00f      	add	sp, #60	@ 0x3c
 801be32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be36:	bf00      	nop
 801be38:	24065a50 	.word	0x24065a50
 801be3c:	24065a4a 	.word	0x24065a4a

0801be40 <CRC_Lock>:
 801be40:	4a2d      	ldr	r2, [pc, #180]	@ (801bef8 <CRC_Lock+0xb8>)
 801be42:	b530      	push	{r4, r5, lr}
 801be44:	6813      	ldr	r3, [r2, #0]
 801be46:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801be4a:	f023 0301 	bic.w	r3, r3, #1
 801be4e:	6013      	str	r3, [r2, #0]
 801be50:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801be54:	4b29      	ldr	r3, [pc, #164]	@ (801befc <CRC_Lock+0xbc>)
 801be56:	681c      	ldr	r4, [r3, #0]
 801be58:	4014      	ands	r4, r2
 801be5a:	42ac      	cmp	r4, r5
 801be5c:	d005      	beq.n	801be6a <CRC_Lock+0x2a>
 801be5e:	681c      	ldr	r4, [r3, #0]
 801be60:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801be64:	4014      	ands	r4, r2
 801be66:	42ac      	cmp	r4, r5
 801be68:	d125      	bne.n	801beb6 <CRC_Lock+0x76>
 801be6a:	4b25      	ldr	r3, [pc, #148]	@ (801bf00 <CRC_Lock+0xc0>)
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d139      	bne.n	801bee6 <CRC_Lock+0xa6>
 801be72:	4b24      	ldr	r3, [pc, #144]	@ (801bf04 <CRC_Lock+0xc4>)
 801be74:	681a      	ldr	r2, [r3, #0]
 801be76:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801be7a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801be7e:	d00d      	beq.n	801be9c <CRC_Lock+0x5c>
 801be80:	681a      	ldr	r2, [r3, #0]
 801be82:	f240 4483 	movw	r4, #1155	@ 0x483
 801be86:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801be8a:	42a2      	cmp	r2, r4
 801be8c:	d006      	beq.n	801be9c <CRC_Lock+0x5c>
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	f240 4285 	movw	r2, #1157	@ 0x485
 801be94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801be98:	4293      	cmp	r3, r2
 801be9a:	d124      	bne.n	801bee6 <CRC_Lock+0xa6>
 801be9c:	4b1a      	ldr	r3, [pc, #104]	@ (801bf08 <CRC_Lock+0xc8>)
 801be9e:	2201      	movs	r2, #1
 801bea0:	601a      	str	r2, [r3, #0]
 801bea2:	681a      	ldr	r2, [r3, #0]
 801bea4:	2a00      	cmp	r2, #0
 801bea6:	d1fc      	bne.n	801bea2 <CRC_Lock+0x62>
 801bea8:	4b18      	ldr	r3, [pc, #96]	@ (801bf0c <CRC_Lock+0xcc>)
 801beaa:	6018      	str	r0, [r3, #0]
 801beac:	6818      	ldr	r0, [r3, #0]
 801beae:	1a43      	subs	r3, r0, r1
 801beb0:	4258      	negs	r0, r3
 801beb2:	4158      	adcs	r0, r3
 801beb4:	e00e      	b.n	801bed4 <CRC_Lock+0x94>
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	4013      	ands	r3, r2
 801beba:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801bebe:	4293      	cmp	r3, r2
 801bec0:	d111      	bne.n	801bee6 <CRC_Lock+0xa6>
 801bec2:	4b13      	ldr	r3, [pc, #76]	@ (801bf10 <CRC_Lock+0xd0>)
 801bec4:	f240 4286 	movw	r2, #1158	@ 0x486
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bece:	4293      	cmp	r3, r2
 801bed0:	d001      	beq.n	801bed6 <CRC_Lock+0x96>
 801bed2:	2000      	movs	r0, #0
 801bed4:	bd30      	pop	{r4, r5, pc}
 801bed6:	4b0f      	ldr	r3, [pc, #60]	@ (801bf14 <CRC_Lock+0xd4>)
 801bed8:	2201      	movs	r2, #1
 801beda:	601a      	str	r2, [r3, #0]
 801bedc:	681a      	ldr	r2, [r3, #0]
 801bede:	2a00      	cmp	r2, #0
 801bee0:	d1fc      	bne.n	801bedc <CRC_Lock+0x9c>
 801bee2:	4b0d      	ldr	r3, [pc, #52]	@ (801bf18 <CRC_Lock+0xd8>)
 801bee4:	e7e1      	b.n	801beaa <CRC_Lock+0x6a>
 801bee6:	4b0d      	ldr	r3, [pc, #52]	@ (801bf1c <CRC_Lock+0xdc>)
 801bee8:	2201      	movs	r2, #1
 801beea:	601a      	str	r2, [r3, #0]
 801beec:	681a      	ldr	r2, [r3, #0]
 801beee:	2a00      	cmp	r2, #0
 801bef0:	d1fc      	bne.n	801beec <CRC_Lock+0xac>
 801bef2:	4b0b      	ldr	r3, [pc, #44]	@ (801bf20 <CRC_Lock+0xe0>)
 801bef4:	e7d9      	b.n	801beaa <CRC_Lock+0x6a>
 801bef6:	bf00      	nop
 801bef8:	e0002000 	.word	0xe0002000
 801befc:	e000ed00 	.word	0xe000ed00
 801bf00:	e0042000 	.word	0xe0042000
 801bf04:	5c001000 	.word	0x5c001000
 801bf08:	58024c08 	.word	0x58024c08
 801bf0c:	58024c00 	.word	0x58024c00
 801bf10:	46008ff0 	.word	0x46008ff0
 801bf14:	46024c08 	.word	0x46024c08
 801bf18:	46024c00 	.word	0x46024c00
 801bf1c:	40023008 	.word	0x40023008
 801bf20:	40023000 	.word	0x40023000

0801bf24 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801bf24:	6101      	str	r1, [r0, #16]
 801bf26:	4770      	bx	lr

0801bf28 <_ZN8touchgfx8Gestures4tickEv>:
 801bf28:	7b83      	ldrb	r3, [r0, #14]
 801bf2a:	b14b      	cbz	r3, 801bf40 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801bf2c:	8903      	ldrh	r3, [r0, #8]
 801bf2e:	3301      	adds	r3, #1
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	2b07      	cmp	r3, #7
 801bf34:	8103      	strh	r3, [r0, #8]
 801bf36:	bf81      	itttt	hi
 801bf38:	2300      	movhi	r3, #0
 801bf3a:	8143      	strhhi	r3, [r0, #10]
 801bf3c:	8183      	strhhi	r3, [r0, #12]
 801bf3e:	7383      	strbhi	r3, [r0, #14]
 801bf40:	4770      	bx	lr
	...

0801bf44 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801bf44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bf48:	4698      	mov	r8, r3
 801bf4a:	8883      	ldrh	r3, [r0, #4]
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	4617      	mov	r7, r2
 801bf50:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf54:	eba8 0303 	sub.w	r3, r8, r3
 801bf58:	4a19      	ldr	r2, [pc, #100]	@ (801bfc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801bf5a:	460e      	mov	r6, r1
 801bf5c:	b21b      	sxth	r3, r3
 801bf5e:	88c1      	ldrh	r1, [r0, #6]
 801bf60:	9200      	str	r2, [sp, #0]
 801bf62:	2000      	movs	r0, #0
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	8aa2      	ldrh	r2, [r4, #20]
 801bf68:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801bf6c:	bfb8      	it	lt
 801bf6e:	425b      	neglt	r3, r3
 801bf70:	f88d 0004 	strb.w	r0, [sp, #4]
 801bf74:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bf78:	b21b      	sxth	r3, r3
 801bf7a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801bf7e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801bf82:	4293      	cmp	r3, r2
 801bf84:	dc07      	bgt.n	801bf96 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801bf86:	1a69      	subs	r1, r5, r1
 801bf88:	b209      	sxth	r1, r1
 801bf8a:	2900      	cmp	r1, #0
 801bf8c:	bfb8      	it	lt
 801bf8e:	4249      	neglt	r1, r1
 801bf90:	b209      	sxth	r1, r1
 801bf92:	428a      	cmp	r2, r1
 801bf94:	da10      	bge.n	801bfb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801bf96:	6920      	ldr	r0, [r4, #16]
 801bf98:	4669      	mov	r1, sp
 801bf9a:	eba8 0606 	sub.w	r6, r8, r6
 801bf9e:	1bef      	subs	r7, r5, r7
 801bfa0:	6803      	ldr	r3, [r0, #0]
 801bfa2:	685b      	ldr	r3, [r3, #4]
 801bfa4:	4798      	blx	r3
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	2001      	movs	r0, #1
 801bfaa:	8166      	strh	r6, [r4, #10]
 801bfac:	8123      	strh	r3, [r4, #8]
 801bfae:	81a7      	strh	r7, [r4, #12]
 801bfb0:	f8a4 8004 	strh.w	r8, [r4, #4]
 801bfb4:	80e5      	strh	r5, [r4, #6]
 801bfb6:	73a0      	strb	r0, [r4, #14]
 801bfb8:	b004      	add	sp, #16
 801bfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfbe:	bf00      	nop
 801bfc0:	0801ea28 	.word	0x0801ea28

0801bfc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfc6:	461e      	mov	r6, r3
 801bfc8:	1e4b      	subs	r3, r1, #1
 801bfca:	b085      	sub	sp, #20
 801bfcc:	4604      	mov	r4, r0
 801bfce:	2b01      	cmp	r3, #1
 801bfd0:	460d      	mov	r5, r1
 801bfd2:	4617      	mov	r7, r2
 801bfd4:	d84b      	bhi.n	801c06e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801bfd6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bfda:	1cd3      	adds	r3, r2, #3
 801bfdc:	b29b      	uxth	r3, r3
 801bfde:	2b06      	cmp	r3, #6
 801bfe0:	d916      	bls.n	801c010 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801bfe2:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801c084 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bfe6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bfea:	f8cd c004 	str.w	ip, [sp, #4]
 801bfee:	f04f 0c00 	mov.w	ip, #0
 801bff2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bff6:	6900      	ldr	r0, [r0, #16]
 801bff8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bffc:	a901      	add	r1, sp, #4
 801bffe:	f88d c008 	strb.w	ip, [sp, #8]
 801c002:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c006:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c00a:	6803      	ldr	r3, [r0, #0]
 801c00c:	689b      	ldr	r3, [r3, #8]
 801c00e:	4798      	blx	r3
 801c010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c014:	1cd3      	adds	r3, r2, #3
 801c016:	b29b      	uxth	r3, r3
 801c018:	2b06      	cmp	r3, #6
 801c01a:	d916      	bls.n	801c04a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c01c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801c084 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c020:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c024:	f8cd c004 	str.w	ip, [sp, #4]
 801c028:	f04f 0c01 	mov.w	ip, #1
 801c02c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c030:	6920      	ldr	r0, [r4, #16]
 801c032:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c036:	a901      	add	r1, sp, #4
 801c038:	f88d c008 	strb.w	ip, [sp, #8]
 801c03c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c040:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c044:	6803      	ldr	r3, [r0, #0]
 801c046:	689b      	ldr	r3, [r3, #8]
 801c048:	4798      	blx	r3
 801c04a:	4b0d      	ldr	r3, [pc, #52]	@ (801c080 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801c04c:	a901      	add	r1, sp, #4
 801c04e:	6920      	ldr	r0, [r4, #16]
 801c050:	9301      	str	r3, [sp, #4]
 801c052:	2300      	movs	r3, #0
 801c054:	f88d 5008 	strb.w	r5, [sp, #8]
 801c058:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c05c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c060:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c064:	6803      	ldr	r3, [r0, #0]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	4798      	blx	r3
 801c06a:	b005      	add	sp, #20
 801c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c06e:	2900      	cmp	r1, #0
 801c070:	d1eb      	bne.n	801c04a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c072:	80a2      	strh	r2, [r4, #4]
 801c074:	80c6      	strh	r6, [r0, #6]
 801c076:	60a1      	str	r1, [r4, #8]
 801c078:	81a1      	strh	r1, [r4, #12]
 801c07a:	73a1      	strb	r1, [r4, #14]
 801c07c:	e7e5      	b.n	801c04a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c07e:	bf00      	nop
 801c080:	0801ea14 	.word	0x0801ea14
 801c084:	0801ea3c 	.word	0x0801ea3c

0801c088 <__aeabi_atexit>:
 801c088:	460b      	mov	r3, r1
 801c08a:	4601      	mov	r1, r0
 801c08c:	4618      	mov	r0, r3
 801c08e:	f000 b911 	b.w	801c2b4 <__cxa_atexit>

0801c092 <_ZdlPvj>:
 801c092:	f000 b812 	b.w	801c0ba <_ZdlPv>

0801c096 <__cxa_guard_acquire>:
 801c096:	6802      	ldr	r2, [r0, #0]
 801c098:	07d2      	lsls	r2, r2, #31
 801c09a:	4603      	mov	r3, r0
 801c09c:	d405      	bmi.n	801c0aa <__cxa_guard_acquire+0x14>
 801c09e:	7842      	ldrb	r2, [r0, #1]
 801c0a0:	b102      	cbz	r2, 801c0a4 <__cxa_guard_acquire+0xe>
 801c0a2:	deff      	udf	#255	@ 0xff
 801c0a4:	2001      	movs	r0, #1
 801c0a6:	7058      	strb	r0, [r3, #1]
 801c0a8:	4770      	bx	lr
 801c0aa:	2000      	movs	r0, #0
 801c0ac:	4770      	bx	lr

0801c0ae <__cxa_guard_release>:
 801c0ae:	2301      	movs	r3, #1
 801c0b0:	6003      	str	r3, [r0, #0]
 801c0b2:	4770      	bx	lr

0801c0b4 <__cxa_pure_virtual>:
 801c0b4:	b508      	push	{r3, lr}
 801c0b6:	f000 f80f 	bl	801c0d8 <_ZSt9terminatev>

0801c0ba <_ZdlPv>:
 801c0ba:	f000 b845 	b.w	801c148 <free>

0801c0be <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c0be:	b508      	push	{r3, lr}
 801c0c0:	4780      	blx	r0
 801c0c2:	f000 f80e 	bl	801c0e2 <abort>
	...

0801c0c8 <_ZSt13get_terminatev>:
 801c0c8:	4b02      	ldr	r3, [pc, #8]	@ (801c0d4 <_ZSt13get_terminatev+0xc>)
 801c0ca:	6818      	ldr	r0, [r3, #0]
 801c0cc:	f3bf 8f5b 	dmb	ish
 801c0d0:	4770      	bx	lr
 801c0d2:	bf00      	nop
 801c0d4:	24000078 	.word	0x24000078

0801c0d8 <_ZSt9terminatev>:
 801c0d8:	b508      	push	{r3, lr}
 801c0da:	f7ff fff5 	bl	801c0c8 <_ZSt13get_terminatev>
 801c0de:	f7ff ffee 	bl	801c0be <_ZN10__cxxabiv111__terminateEPFvvE>

0801c0e2 <abort>:
 801c0e2:	b508      	push	{r3, lr}
 801c0e4:	2006      	movs	r0, #6
 801c0e6:	f000 facf 	bl	801c688 <raise>
 801c0ea:	2001      	movs	r0, #1
 801c0ec:	f7e4 febc 	bl	8000e68 <_exit>

0801c0f0 <__assert_func>:
 801c0f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c0f2:	4614      	mov	r4, r2
 801c0f4:	461a      	mov	r2, r3
 801c0f6:	4b09      	ldr	r3, [pc, #36]	@ (801c11c <__assert_func+0x2c>)
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	4605      	mov	r5, r0
 801c0fc:	68d8      	ldr	r0, [r3, #12]
 801c0fe:	b954      	cbnz	r4, 801c116 <__assert_func+0x26>
 801c100:	4b07      	ldr	r3, [pc, #28]	@ (801c120 <__assert_func+0x30>)
 801c102:	461c      	mov	r4, r3
 801c104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c108:	9100      	str	r1, [sp, #0]
 801c10a:	462b      	mov	r3, r5
 801c10c:	4905      	ldr	r1, [pc, #20]	@ (801c124 <__assert_func+0x34>)
 801c10e:	f000 f983 	bl	801c418 <fiprintf>
 801c112:	f7ff ffe6 	bl	801c0e2 <abort>
 801c116:	4b04      	ldr	r3, [pc, #16]	@ (801c128 <__assert_func+0x38>)
 801c118:	e7f4      	b.n	801c104 <__assert_func+0x14>
 801c11a:	bf00      	nop
 801c11c:	24000088 	.word	0x24000088
 801c120:	0801ecff 	.word	0x0801ecff
 801c124:	0801ecd1 	.word	0x0801ecd1
 801c128:	0801ecc4 	.word	0x0801ecc4

0801c12c <atexit>:
 801c12c:	2300      	movs	r3, #0
 801c12e:	4601      	mov	r1, r0
 801c130:	461a      	mov	r2, r3
 801c132:	4618      	mov	r0, r3
 801c134:	f000 bbac 	b.w	801c890 <__register_exitproc>

0801c138 <malloc>:
 801c138:	4b02      	ldr	r3, [pc, #8]	@ (801c144 <malloc+0xc>)
 801c13a:	4601      	mov	r1, r0
 801c13c:	6818      	ldr	r0, [r3, #0]
 801c13e:	f000 b82d 	b.w	801c19c <_malloc_r>
 801c142:	bf00      	nop
 801c144:	24000088 	.word	0x24000088

0801c148 <free>:
 801c148:	4b02      	ldr	r3, [pc, #8]	@ (801c154 <free+0xc>)
 801c14a:	4601      	mov	r1, r0
 801c14c:	6818      	ldr	r0, [r3, #0]
 801c14e:	f000 bbfb 	b.w	801c948 <_free_r>
 801c152:	bf00      	nop
 801c154:	24000088 	.word	0x24000088

0801c158 <sbrk_aligned>:
 801c158:	b570      	push	{r4, r5, r6, lr}
 801c15a:	4e0f      	ldr	r6, [pc, #60]	@ (801c198 <sbrk_aligned+0x40>)
 801c15c:	460c      	mov	r4, r1
 801c15e:	6831      	ldr	r1, [r6, #0]
 801c160:	4605      	mov	r5, r0
 801c162:	b911      	cbnz	r1, 801c16a <sbrk_aligned+0x12>
 801c164:	f000 fb36 	bl	801c7d4 <_sbrk_r>
 801c168:	6030      	str	r0, [r6, #0]
 801c16a:	4621      	mov	r1, r4
 801c16c:	4628      	mov	r0, r5
 801c16e:	f000 fb31 	bl	801c7d4 <_sbrk_r>
 801c172:	1c43      	adds	r3, r0, #1
 801c174:	d103      	bne.n	801c17e <sbrk_aligned+0x26>
 801c176:	f04f 34ff 	mov.w	r4, #4294967295
 801c17a:	4620      	mov	r0, r4
 801c17c:	bd70      	pop	{r4, r5, r6, pc}
 801c17e:	1cc4      	adds	r4, r0, #3
 801c180:	f024 0403 	bic.w	r4, r4, #3
 801c184:	42a0      	cmp	r0, r4
 801c186:	d0f8      	beq.n	801c17a <sbrk_aligned+0x22>
 801c188:	1a21      	subs	r1, r4, r0
 801c18a:	4628      	mov	r0, r5
 801c18c:	f000 fb22 	bl	801c7d4 <_sbrk_r>
 801c190:	3001      	adds	r0, #1
 801c192:	d1f2      	bne.n	801c17a <sbrk_aligned+0x22>
 801c194:	e7ef      	b.n	801c176 <sbrk_aligned+0x1e>
 801c196:	bf00      	nop
 801c198:	24066484 	.word	0x24066484

0801c19c <_malloc_r>:
 801c19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1a0:	1ccd      	adds	r5, r1, #3
 801c1a2:	f025 0503 	bic.w	r5, r5, #3
 801c1a6:	3508      	adds	r5, #8
 801c1a8:	2d0c      	cmp	r5, #12
 801c1aa:	bf38      	it	cc
 801c1ac:	250c      	movcc	r5, #12
 801c1ae:	2d00      	cmp	r5, #0
 801c1b0:	4606      	mov	r6, r0
 801c1b2:	db01      	blt.n	801c1b8 <_malloc_r+0x1c>
 801c1b4:	42a9      	cmp	r1, r5
 801c1b6:	d904      	bls.n	801c1c2 <_malloc_r+0x26>
 801c1b8:	230c      	movs	r3, #12
 801c1ba:	6033      	str	r3, [r6, #0]
 801c1bc:	2000      	movs	r0, #0
 801c1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c298 <_malloc_r+0xfc>
 801c1c6:	f000 f869 	bl	801c29c <__malloc_lock>
 801c1ca:	f8d8 3000 	ldr.w	r3, [r8]
 801c1ce:	461c      	mov	r4, r3
 801c1d0:	bb44      	cbnz	r4, 801c224 <_malloc_r+0x88>
 801c1d2:	4629      	mov	r1, r5
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	f7ff ffbf 	bl	801c158 <sbrk_aligned>
 801c1da:	1c43      	adds	r3, r0, #1
 801c1dc:	4604      	mov	r4, r0
 801c1de:	d158      	bne.n	801c292 <_malloc_r+0xf6>
 801c1e0:	f8d8 4000 	ldr.w	r4, [r8]
 801c1e4:	4627      	mov	r7, r4
 801c1e6:	2f00      	cmp	r7, #0
 801c1e8:	d143      	bne.n	801c272 <_malloc_r+0xd6>
 801c1ea:	2c00      	cmp	r4, #0
 801c1ec:	d04b      	beq.n	801c286 <_malloc_r+0xea>
 801c1ee:	6823      	ldr	r3, [r4, #0]
 801c1f0:	4639      	mov	r1, r7
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	eb04 0903 	add.w	r9, r4, r3
 801c1f8:	f000 faec 	bl	801c7d4 <_sbrk_r>
 801c1fc:	4581      	cmp	r9, r0
 801c1fe:	d142      	bne.n	801c286 <_malloc_r+0xea>
 801c200:	6821      	ldr	r1, [r4, #0]
 801c202:	1a6d      	subs	r5, r5, r1
 801c204:	4629      	mov	r1, r5
 801c206:	4630      	mov	r0, r6
 801c208:	f7ff ffa6 	bl	801c158 <sbrk_aligned>
 801c20c:	3001      	adds	r0, #1
 801c20e:	d03a      	beq.n	801c286 <_malloc_r+0xea>
 801c210:	6823      	ldr	r3, [r4, #0]
 801c212:	442b      	add	r3, r5
 801c214:	6023      	str	r3, [r4, #0]
 801c216:	f8d8 3000 	ldr.w	r3, [r8]
 801c21a:	685a      	ldr	r2, [r3, #4]
 801c21c:	bb62      	cbnz	r2, 801c278 <_malloc_r+0xdc>
 801c21e:	f8c8 7000 	str.w	r7, [r8]
 801c222:	e00f      	b.n	801c244 <_malloc_r+0xa8>
 801c224:	6822      	ldr	r2, [r4, #0]
 801c226:	1b52      	subs	r2, r2, r5
 801c228:	d420      	bmi.n	801c26c <_malloc_r+0xd0>
 801c22a:	2a0b      	cmp	r2, #11
 801c22c:	d917      	bls.n	801c25e <_malloc_r+0xc2>
 801c22e:	1961      	adds	r1, r4, r5
 801c230:	42a3      	cmp	r3, r4
 801c232:	6025      	str	r5, [r4, #0]
 801c234:	bf18      	it	ne
 801c236:	6059      	strne	r1, [r3, #4]
 801c238:	6863      	ldr	r3, [r4, #4]
 801c23a:	bf08      	it	eq
 801c23c:	f8c8 1000 	streq.w	r1, [r8]
 801c240:	5162      	str	r2, [r4, r5]
 801c242:	604b      	str	r3, [r1, #4]
 801c244:	4630      	mov	r0, r6
 801c246:	f000 f82f 	bl	801c2a8 <__malloc_unlock>
 801c24a:	f104 000b 	add.w	r0, r4, #11
 801c24e:	1d23      	adds	r3, r4, #4
 801c250:	f020 0007 	bic.w	r0, r0, #7
 801c254:	1ac2      	subs	r2, r0, r3
 801c256:	bf1c      	itt	ne
 801c258:	1a1b      	subne	r3, r3, r0
 801c25a:	50a3      	strne	r3, [r4, r2]
 801c25c:	e7af      	b.n	801c1be <_malloc_r+0x22>
 801c25e:	6862      	ldr	r2, [r4, #4]
 801c260:	42a3      	cmp	r3, r4
 801c262:	bf0c      	ite	eq
 801c264:	f8c8 2000 	streq.w	r2, [r8]
 801c268:	605a      	strne	r2, [r3, #4]
 801c26a:	e7eb      	b.n	801c244 <_malloc_r+0xa8>
 801c26c:	4623      	mov	r3, r4
 801c26e:	6864      	ldr	r4, [r4, #4]
 801c270:	e7ae      	b.n	801c1d0 <_malloc_r+0x34>
 801c272:	463c      	mov	r4, r7
 801c274:	687f      	ldr	r7, [r7, #4]
 801c276:	e7b6      	b.n	801c1e6 <_malloc_r+0x4a>
 801c278:	461a      	mov	r2, r3
 801c27a:	685b      	ldr	r3, [r3, #4]
 801c27c:	42a3      	cmp	r3, r4
 801c27e:	d1fb      	bne.n	801c278 <_malloc_r+0xdc>
 801c280:	2300      	movs	r3, #0
 801c282:	6053      	str	r3, [r2, #4]
 801c284:	e7de      	b.n	801c244 <_malloc_r+0xa8>
 801c286:	230c      	movs	r3, #12
 801c288:	6033      	str	r3, [r6, #0]
 801c28a:	4630      	mov	r0, r6
 801c28c:	f000 f80c 	bl	801c2a8 <__malloc_unlock>
 801c290:	e794      	b.n	801c1bc <_malloc_r+0x20>
 801c292:	6005      	str	r5, [r0, #0]
 801c294:	e7d6      	b.n	801c244 <_malloc_r+0xa8>
 801c296:	bf00      	nop
 801c298:	24066488 	.word	0x24066488

0801c29c <__malloc_lock>:
 801c29c:	4801      	ldr	r0, [pc, #4]	@ (801c2a4 <__malloc_lock+0x8>)
 801c29e:	f000 bae6 	b.w	801c86e <__retarget_lock_acquire_recursive>
 801c2a2:	bf00      	nop
 801c2a4:	240665cc 	.word	0x240665cc

0801c2a8 <__malloc_unlock>:
 801c2a8:	4801      	ldr	r0, [pc, #4]	@ (801c2b0 <__malloc_unlock+0x8>)
 801c2aa:	f000 bae1 	b.w	801c870 <__retarget_lock_release_recursive>
 801c2ae:	bf00      	nop
 801c2b0:	240665cc 	.word	0x240665cc

0801c2b4 <__cxa_atexit>:
 801c2b4:	b510      	push	{r4, lr}
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	4804      	ldr	r0, [pc, #16]	@ (801c2cc <__cxa_atexit+0x18>)
 801c2ba:	4613      	mov	r3, r2
 801c2bc:	b120      	cbz	r0, 801c2c8 <__cxa_atexit+0x14>
 801c2be:	460a      	mov	r2, r1
 801c2c0:	2002      	movs	r0, #2
 801c2c2:	4621      	mov	r1, r4
 801c2c4:	f000 fae4 	bl	801c890 <__register_exitproc>
 801c2c8:	bd10      	pop	{r4, pc}
 801c2ca:	bf00      	nop
 801c2cc:	0801c891 	.word	0x0801c891

0801c2d0 <std>:
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	b510      	push	{r4, lr}
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	e9c0 3300 	strd	r3, r3, [r0]
 801c2da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c2de:	6083      	str	r3, [r0, #8]
 801c2e0:	8181      	strh	r1, [r0, #12]
 801c2e2:	6643      	str	r3, [r0, #100]	@ 0x64
 801c2e4:	81c2      	strh	r2, [r0, #14]
 801c2e6:	6183      	str	r3, [r0, #24]
 801c2e8:	4619      	mov	r1, r3
 801c2ea:	2208      	movs	r2, #8
 801c2ec:	305c      	adds	r0, #92	@ 0x5c
 801c2ee:	f000 f99b 	bl	801c628 <memset>
 801c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (801c328 <std+0x58>)
 801c2f4:	6263      	str	r3, [r4, #36]	@ 0x24
 801c2f6:	4b0d      	ldr	r3, [pc, #52]	@ (801c32c <std+0x5c>)
 801c2f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (801c330 <std+0x60>)
 801c2fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c2fe:	4b0d      	ldr	r3, [pc, #52]	@ (801c334 <std+0x64>)
 801c300:	6323      	str	r3, [r4, #48]	@ 0x30
 801c302:	4b0d      	ldr	r3, [pc, #52]	@ (801c338 <std+0x68>)
 801c304:	6224      	str	r4, [r4, #32]
 801c306:	429c      	cmp	r4, r3
 801c308:	d006      	beq.n	801c318 <std+0x48>
 801c30a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c30e:	4294      	cmp	r4, r2
 801c310:	d002      	beq.n	801c318 <std+0x48>
 801c312:	33d0      	adds	r3, #208	@ 0xd0
 801c314:	429c      	cmp	r4, r3
 801c316:	d105      	bne.n	801c324 <std+0x54>
 801c318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c320:	f000 baa4 	b.w	801c86c <__retarget_lock_init_recursive>
 801c324:	bd10      	pop	{r4, pc}
 801c326:	bf00      	nop
 801c328:	0801c479 	.word	0x0801c479
 801c32c:	0801c49b 	.word	0x0801c49b
 801c330:	0801c4d3 	.word	0x0801c4d3
 801c334:	0801c4f7 	.word	0x0801c4f7
 801c338:	2406648c 	.word	0x2406648c

0801c33c <stdio_exit_handler>:
 801c33c:	4a02      	ldr	r2, [pc, #8]	@ (801c348 <stdio_exit_handler+0xc>)
 801c33e:	4903      	ldr	r1, [pc, #12]	@ (801c34c <stdio_exit_handler+0x10>)
 801c340:	4803      	ldr	r0, [pc, #12]	@ (801c350 <stdio_exit_handler+0x14>)
 801c342:	f000 b87b 	b.w	801c43c <_fwalk_sglue>
 801c346:	bf00      	nop
 801c348:	2400007c 	.word	0x2400007c
 801c34c:	0801d085 	.word	0x0801d085
 801c350:	2400008c 	.word	0x2400008c

0801c354 <cleanup_stdio>:
 801c354:	6841      	ldr	r1, [r0, #4]
 801c356:	4b0c      	ldr	r3, [pc, #48]	@ (801c388 <cleanup_stdio+0x34>)
 801c358:	4299      	cmp	r1, r3
 801c35a:	b510      	push	{r4, lr}
 801c35c:	4604      	mov	r4, r0
 801c35e:	d001      	beq.n	801c364 <cleanup_stdio+0x10>
 801c360:	f000 fe90 	bl	801d084 <_fflush_r>
 801c364:	68a1      	ldr	r1, [r4, #8]
 801c366:	4b09      	ldr	r3, [pc, #36]	@ (801c38c <cleanup_stdio+0x38>)
 801c368:	4299      	cmp	r1, r3
 801c36a:	d002      	beq.n	801c372 <cleanup_stdio+0x1e>
 801c36c:	4620      	mov	r0, r4
 801c36e:	f000 fe89 	bl	801d084 <_fflush_r>
 801c372:	68e1      	ldr	r1, [r4, #12]
 801c374:	4b06      	ldr	r3, [pc, #24]	@ (801c390 <cleanup_stdio+0x3c>)
 801c376:	4299      	cmp	r1, r3
 801c378:	d004      	beq.n	801c384 <cleanup_stdio+0x30>
 801c37a:	4620      	mov	r0, r4
 801c37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c380:	f000 be80 	b.w	801d084 <_fflush_r>
 801c384:	bd10      	pop	{r4, pc}
 801c386:	bf00      	nop
 801c388:	2406648c 	.word	0x2406648c
 801c38c:	240664f4 	.word	0x240664f4
 801c390:	2406655c 	.word	0x2406655c

0801c394 <global_stdio_init.part.0>:
 801c394:	b510      	push	{r4, lr}
 801c396:	4b0b      	ldr	r3, [pc, #44]	@ (801c3c4 <global_stdio_init.part.0+0x30>)
 801c398:	4c0b      	ldr	r4, [pc, #44]	@ (801c3c8 <global_stdio_init.part.0+0x34>)
 801c39a:	4a0c      	ldr	r2, [pc, #48]	@ (801c3cc <global_stdio_init.part.0+0x38>)
 801c39c:	601a      	str	r2, [r3, #0]
 801c39e:	4620      	mov	r0, r4
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	2104      	movs	r1, #4
 801c3a4:	f7ff ff94 	bl	801c2d0 <std>
 801c3a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c3ac:	2201      	movs	r2, #1
 801c3ae:	2109      	movs	r1, #9
 801c3b0:	f7ff ff8e 	bl	801c2d0 <std>
 801c3b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c3b8:	2202      	movs	r2, #2
 801c3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3be:	2112      	movs	r1, #18
 801c3c0:	f7ff bf86 	b.w	801c2d0 <std>
 801c3c4:	240665c4 	.word	0x240665c4
 801c3c8:	2406648c 	.word	0x2406648c
 801c3cc:	0801c33d 	.word	0x0801c33d

0801c3d0 <__sfp_lock_acquire>:
 801c3d0:	4801      	ldr	r0, [pc, #4]	@ (801c3d8 <__sfp_lock_acquire+0x8>)
 801c3d2:	f000 ba4c 	b.w	801c86e <__retarget_lock_acquire_recursive>
 801c3d6:	bf00      	nop
 801c3d8:	240665ce 	.word	0x240665ce

0801c3dc <__sfp_lock_release>:
 801c3dc:	4801      	ldr	r0, [pc, #4]	@ (801c3e4 <__sfp_lock_release+0x8>)
 801c3de:	f000 ba47 	b.w	801c870 <__retarget_lock_release_recursive>
 801c3e2:	bf00      	nop
 801c3e4:	240665ce 	.word	0x240665ce

0801c3e8 <__sinit>:
 801c3e8:	b510      	push	{r4, lr}
 801c3ea:	4604      	mov	r4, r0
 801c3ec:	f7ff fff0 	bl	801c3d0 <__sfp_lock_acquire>
 801c3f0:	6a23      	ldr	r3, [r4, #32]
 801c3f2:	b11b      	cbz	r3, 801c3fc <__sinit+0x14>
 801c3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3f8:	f7ff bff0 	b.w	801c3dc <__sfp_lock_release>
 801c3fc:	4b04      	ldr	r3, [pc, #16]	@ (801c410 <__sinit+0x28>)
 801c3fe:	6223      	str	r3, [r4, #32]
 801c400:	4b04      	ldr	r3, [pc, #16]	@ (801c414 <__sinit+0x2c>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d1f5      	bne.n	801c3f4 <__sinit+0xc>
 801c408:	f7ff ffc4 	bl	801c394 <global_stdio_init.part.0>
 801c40c:	e7f2      	b.n	801c3f4 <__sinit+0xc>
 801c40e:	bf00      	nop
 801c410:	0801c355 	.word	0x0801c355
 801c414:	240665c4 	.word	0x240665c4

0801c418 <fiprintf>:
 801c418:	b40e      	push	{r1, r2, r3}
 801c41a:	b503      	push	{r0, r1, lr}
 801c41c:	4601      	mov	r1, r0
 801c41e:	ab03      	add	r3, sp, #12
 801c420:	4805      	ldr	r0, [pc, #20]	@ (801c438 <fiprintf+0x20>)
 801c422:	f853 2b04 	ldr.w	r2, [r3], #4
 801c426:	6800      	ldr	r0, [r0, #0]
 801c428:	9301      	str	r3, [sp, #4]
 801c42a:	f000 fb01 	bl	801ca30 <_vfiprintf_r>
 801c42e:	b002      	add	sp, #8
 801c430:	f85d eb04 	ldr.w	lr, [sp], #4
 801c434:	b003      	add	sp, #12
 801c436:	4770      	bx	lr
 801c438:	24000088 	.word	0x24000088

0801c43c <_fwalk_sglue>:
 801c43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c440:	4607      	mov	r7, r0
 801c442:	4688      	mov	r8, r1
 801c444:	4614      	mov	r4, r2
 801c446:	2600      	movs	r6, #0
 801c448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c44c:	f1b9 0901 	subs.w	r9, r9, #1
 801c450:	d505      	bpl.n	801c45e <_fwalk_sglue+0x22>
 801c452:	6824      	ldr	r4, [r4, #0]
 801c454:	2c00      	cmp	r4, #0
 801c456:	d1f7      	bne.n	801c448 <_fwalk_sglue+0xc>
 801c458:	4630      	mov	r0, r6
 801c45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c45e:	89ab      	ldrh	r3, [r5, #12]
 801c460:	2b01      	cmp	r3, #1
 801c462:	d907      	bls.n	801c474 <_fwalk_sglue+0x38>
 801c464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c468:	3301      	adds	r3, #1
 801c46a:	d003      	beq.n	801c474 <_fwalk_sglue+0x38>
 801c46c:	4629      	mov	r1, r5
 801c46e:	4638      	mov	r0, r7
 801c470:	47c0      	blx	r8
 801c472:	4306      	orrs	r6, r0
 801c474:	3568      	adds	r5, #104	@ 0x68
 801c476:	e7e9      	b.n	801c44c <_fwalk_sglue+0x10>

0801c478 <__sread>:
 801c478:	b510      	push	{r4, lr}
 801c47a:	460c      	mov	r4, r1
 801c47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c480:	f000 f982 	bl	801c788 <_read_r>
 801c484:	2800      	cmp	r0, #0
 801c486:	bfab      	itete	ge
 801c488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c48a:	89a3      	ldrhlt	r3, [r4, #12]
 801c48c:	181b      	addge	r3, r3, r0
 801c48e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c492:	bfac      	ite	ge
 801c494:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c496:	81a3      	strhlt	r3, [r4, #12]
 801c498:	bd10      	pop	{r4, pc}

0801c49a <__swrite>:
 801c49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c49e:	461f      	mov	r7, r3
 801c4a0:	898b      	ldrh	r3, [r1, #12]
 801c4a2:	05db      	lsls	r3, r3, #23
 801c4a4:	4605      	mov	r5, r0
 801c4a6:	460c      	mov	r4, r1
 801c4a8:	4616      	mov	r6, r2
 801c4aa:	d505      	bpl.n	801c4b8 <__swrite+0x1e>
 801c4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4b0:	2302      	movs	r3, #2
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	f000 f956 	bl	801c764 <_lseek_r>
 801c4b8:	89a3      	ldrh	r3, [r4, #12]
 801c4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c4c2:	81a3      	strh	r3, [r4, #12]
 801c4c4:	4632      	mov	r2, r6
 801c4c6:	463b      	mov	r3, r7
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4ce:	f000 b991 	b.w	801c7f4 <_write_r>

0801c4d2 <__sseek>:
 801c4d2:	b510      	push	{r4, lr}
 801c4d4:	460c      	mov	r4, r1
 801c4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4da:	f000 f943 	bl	801c764 <_lseek_r>
 801c4de:	1c43      	adds	r3, r0, #1
 801c4e0:	89a3      	ldrh	r3, [r4, #12]
 801c4e2:	bf15      	itete	ne
 801c4e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c4e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c4ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c4ee:	81a3      	strheq	r3, [r4, #12]
 801c4f0:	bf18      	it	ne
 801c4f2:	81a3      	strhne	r3, [r4, #12]
 801c4f4:	bd10      	pop	{r4, pc}

0801c4f6 <__sclose>:
 801c4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4fa:	f000 b8cd 	b.w	801c698 <_close_r>

0801c4fe <__swbuf_r>:
 801c4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c500:	460e      	mov	r6, r1
 801c502:	4614      	mov	r4, r2
 801c504:	4605      	mov	r5, r0
 801c506:	b118      	cbz	r0, 801c510 <__swbuf_r+0x12>
 801c508:	6a03      	ldr	r3, [r0, #32]
 801c50a:	b90b      	cbnz	r3, 801c510 <__swbuf_r+0x12>
 801c50c:	f7ff ff6c 	bl	801c3e8 <__sinit>
 801c510:	69a3      	ldr	r3, [r4, #24]
 801c512:	60a3      	str	r3, [r4, #8]
 801c514:	89a3      	ldrh	r3, [r4, #12]
 801c516:	071a      	lsls	r2, r3, #28
 801c518:	d501      	bpl.n	801c51e <__swbuf_r+0x20>
 801c51a:	6923      	ldr	r3, [r4, #16]
 801c51c:	b943      	cbnz	r3, 801c530 <__swbuf_r+0x32>
 801c51e:	4621      	mov	r1, r4
 801c520:	4628      	mov	r0, r5
 801c522:	f000 f82b 	bl	801c57c <__swsetup_r>
 801c526:	b118      	cbz	r0, 801c530 <__swbuf_r+0x32>
 801c528:	f04f 37ff 	mov.w	r7, #4294967295
 801c52c:	4638      	mov	r0, r7
 801c52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c530:	6823      	ldr	r3, [r4, #0]
 801c532:	6922      	ldr	r2, [r4, #16]
 801c534:	1a98      	subs	r0, r3, r2
 801c536:	6963      	ldr	r3, [r4, #20]
 801c538:	b2f6      	uxtb	r6, r6
 801c53a:	4283      	cmp	r3, r0
 801c53c:	4637      	mov	r7, r6
 801c53e:	dc05      	bgt.n	801c54c <__swbuf_r+0x4e>
 801c540:	4621      	mov	r1, r4
 801c542:	4628      	mov	r0, r5
 801c544:	f000 fd9e 	bl	801d084 <_fflush_r>
 801c548:	2800      	cmp	r0, #0
 801c54a:	d1ed      	bne.n	801c528 <__swbuf_r+0x2a>
 801c54c:	68a3      	ldr	r3, [r4, #8]
 801c54e:	3b01      	subs	r3, #1
 801c550:	60a3      	str	r3, [r4, #8]
 801c552:	6823      	ldr	r3, [r4, #0]
 801c554:	1c5a      	adds	r2, r3, #1
 801c556:	6022      	str	r2, [r4, #0]
 801c558:	701e      	strb	r6, [r3, #0]
 801c55a:	6962      	ldr	r2, [r4, #20]
 801c55c:	1c43      	adds	r3, r0, #1
 801c55e:	429a      	cmp	r2, r3
 801c560:	d004      	beq.n	801c56c <__swbuf_r+0x6e>
 801c562:	89a3      	ldrh	r3, [r4, #12]
 801c564:	07db      	lsls	r3, r3, #31
 801c566:	d5e1      	bpl.n	801c52c <__swbuf_r+0x2e>
 801c568:	2e0a      	cmp	r6, #10
 801c56a:	d1df      	bne.n	801c52c <__swbuf_r+0x2e>
 801c56c:	4621      	mov	r1, r4
 801c56e:	4628      	mov	r0, r5
 801c570:	f000 fd88 	bl	801d084 <_fflush_r>
 801c574:	2800      	cmp	r0, #0
 801c576:	d0d9      	beq.n	801c52c <__swbuf_r+0x2e>
 801c578:	e7d6      	b.n	801c528 <__swbuf_r+0x2a>
	...

0801c57c <__swsetup_r>:
 801c57c:	b538      	push	{r3, r4, r5, lr}
 801c57e:	4b29      	ldr	r3, [pc, #164]	@ (801c624 <__swsetup_r+0xa8>)
 801c580:	4605      	mov	r5, r0
 801c582:	6818      	ldr	r0, [r3, #0]
 801c584:	460c      	mov	r4, r1
 801c586:	b118      	cbz	r0, 801c590 <__swsetup_r+0x14>
 801c588:	6a03      	ldr	r3, [r0, #32]
 801c58a:	b90b      	cbnz	r3, 801c590 <__swsetup_r+0x14>
 801c58c:	f7ff ff2c 	bl	801c3e8 <__sinit>
 801c590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c594:	0719      	lsls	r1, r3, #28
 801c596:	d422      	bmi.n	801c5de <__swsetup_r+0x62>
 801c598:	06da      	lsls	r2, r3, #27
 801c59a:	d407      	bmi.n	801c5ac <__swsetup_r+0x30>
 801c59c:	2209      	movs	r2, #9
 801c59e:	602a      	str	r2, [r5, #0]
 801c5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c5a4:	81a3      	strh	r3, [r4, #12]
 801c5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801c5aa:	e033      	b.n	801c614 <__swsetup_r+0x98>
 801c5ac:	0758      	lsls	r0, r3, #29
 801c5ae:	d512      	bpl.n	801c5d6 <__swsetup_r+0x5a>
 801c5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c5b2:	b141      	cbz	r1, 801c5c6 <__swsetup_r+0x4a>
 801c5b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c5b8:	4299      	cmp	r1, r3
 801c5ba:	d002      	beq.n	801c5c2 <__swsetup_r+0x46>
 801c5bc:	4628      	mov	r0, r5
 801c5be:	f000 f9c3 	bl	801c948 <_free_r>
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	6363      	str	r3, [r4, #52]	@ 0x34
 801c5c6:	89a3      	ldrh	r3, [r4, #12]
 801c5c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c5cc:	81a3      	strh	r3, [r4, #12]
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	6063      	str	r3, [r4, #4]
 801c5d2:	6923      	ldr	r3, [r4, #16]
 801c5d4:	6023      	str	r3, [r4, #0]
 801c5d6:	89a3      	ldrh	r3, [r4, #12]
 801c5d8:	f043 0308 	orr.w	r3, r3, #8
 801c5dc:	81a3      	strh	r3, [r4, #12]
 801c5de:	6923      	ldr	r3, [r4, #16]
 801c5e0:	b94b      	cbnz	r3, 801c5f6 <__swsetup_r+0x7a>
 801c5e2:	89a3      	ldrh	r3, [r4, #12]
 801c5e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c5e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c5ec:	d003      	beq.n	801c5f6 <__swsetup_r+0x7a>
 801c5ee:	4621      	mov	r1, r4
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	f000 fd95 	bl	801d120 <__smakebuf_r>
 801c5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5fa:	f013 0201 	ands.w	r2, r3, #1
 801c5fe:	d00a      	beq.n	801c616 <__swsetup_r+0x9a>
 801c600:	2200      	movs	r2, #0
 801c602:	60a2      	str	r2, [r4, #8]
 801c604:	6962      	ldr	r2, [r4, #20]
 801c606:	4252      	negs	r2, r2
 801c608:	61a2      	str	r2, [r4, #24]
 801c60a:	6922      	ldr	r2, [r4, #16]
 801c60c:	b942      	cbnz	r2, 801c620 <__swsetup_r+0xa4>
 801c60e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c612:	d1c5      	bne.n	801c5a0 <__swsetup_r+0x24>
 801c614:	bd38      	pop	{r3, r4, r5, pc}
 801c616:	0799      	lsls	r1, r3, #30
 801c618:	bf58      	it	pl
 801c61a:	6962      	ldrpl	r2, [r4, #20]
 801c61c:	60a2      	str	r2, [r4, #8]
 801c61e:	e7f4      	b.n	801c60a <__swsetup_r+0x8e>
 801c620:	2000      	movs	r0, #0
 801c622:	e7f7      	b.n	801c614 <__swsetup_r+0x98>
 801c624:	24000088 	.word	0x24000088

0801c628 <memset>:
 801c628:	4402      	add	r2, r0
 801c62a:	4603      	mov	r3, r0
 801c62c:	4293      	cmp	r3, r2
 801c62e:	d100      	bne.n	801c632 <memset+0xa>
 801c630:	4770      	bx	lr
 801c632:	f803 1b01 	strb.w	r1, [r3], #1
 801c636:	e7f9      	b.n	801c62c <memset+0x4>

0801c638 <_raise_r>:
 801c638:	291f      	cmp	r1, #31
 801c63a:	b538      	push	{r3, r4, r5, lr}
 801c63c:	4605      	mov	r5, r0
 801c63e:	460c      	mov	r4, r1
 801c640:	d904      	bls.n	801c64c <_raise_r+0x14>
 801c642:	2316      	movs	r3, #22
 801c644:	6003      	str	r3, [r0, #0]
 801c646:	f04f 30ff 	mov.w	r0, #4294967295
 801c64a:	bd38      	pop	{r3, r4, r5, pc}
 801c64c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c64e:	b112      	cbz	r2, 801c656 <_raise_r+0x1e>
 801c650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c654:	b94b      	cbnz	r3, 801c66a <_raise_r+0x32>
 801c656:	4628      	mov	r0, r5
 801c658:	f000 f8ba 	bl	801c7d0 <_getpid_r>
 801c65c:	4622      	mov	r2, r4
 801c65e:	4601      	mov	r1, r0
 801c660:	4628      	mov	r0, r5
 801c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c666:	f000 b8a1 	b.w	801c7ac <_kill_r>
 801c66a:	2b01      	cmp	r3, #1
 801c66c:	d00a      	beq.n	801c684 <_raise_r+0x4c>
 801c66e:	1c59      	adds	r1, r3, #1
 801c670:	d103      	bne.n	801c67a <_raise_r+0x42>
 801c672:	2316      	movs	r3, #22
 801c674:	6003      	str	r3, [r0, #0]
 801c676:	2001      	movs	r0, #1
 801c678:	e7e7      	b.n	801c64a <_raise_r+0x12>
 801c67a:	2100      	movs	r1, #0
 801c67c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c680:	4620      	mov	r0, r4
 801c682:	4798      	blx	r3
 801c684:	2000      	movs	r0, #0
 801c686:	e7e0      	b.n	801c64a <_raise_r+0x12>

0801c688 <raise>:
 801c688:	4b02      	ldr	r3, [pc, #8]	@ (801c694 <raise+0xc>)
 801c68a:	4601      	mov	r1, r0
 801c68c:	6818      	ldr	r0, [r3, #0]
 801c68e:	f7ff bfd3 	b.w	801c638 <_raise_r>
 801c692:	bf00      	nop
 801c694:	24000088 	.word	0x24000088

0801c698 <_close_r>:
 801c698:	b538      	push	{r3, r4, r5, lr}
 801c69a:	4d06      	ldr	r5, [pc, #24]	@ (801c6b4 <_close_r+0x1c>)
 801c69c:	2300      	movs	r3, #0
 801c69e:	4604      	mov	r4, r0
 801c6a0:	4608      	mov	r0, r1
 801c6a2:	602b      	str	r3, [r5, #0]
 801c6a4:	f7e4 fc24 	bl	8000ef0 <_close>
 801c6a8:	1c43      	adds	r3, r0, #1
 801c6aa:	d102      	bne.n	801c6b2 <_close_r+0x1a>
 801c6ac:	682b      	ldr	r3, [r5, #0]
 801c6ae:	b103      	cbz	r3, 801c6b2 <_close_r+0x1a>
 801c6b0:	6023      	str	r3, [r4, #0]
 801c6b2:	bd38      	pop	{r3, r4, r5, pc}
 801c6b4:	240665c8 	.word	0x240665c8

0801c6b8 <_reclaim_reent>:
 801c6b8:	4b29      	ldr	r3, [pc, #164]	@ (801c760 <_reclaim_reent+0xa8>)
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	4283      	cmp	r3, r0
 801c6be:	b570      	push	{r4, r5, r6, lr}
 801c6c0:	4604      	mov	r4, r0
 801c6c2:	d04b      	beq.n	801c75c <_reclaim_reent+0xa4>
 801c6c4:	69c3      	ldr	r3, [r0, #28]
 801c6c6:	b1ab      	cbz	r3, 801c6f4 <_reclaim_reent+0x3c>
 801c6c8:	68db      	ldr	r3, [r3, #12]
 801c6ca:	b16b      	cbz	r3, 801c6e8 <_reclaim_reent+0x30>
 801c6cc:	2500      	movs	r5, #0
 801c6ce:	69e3      	ldr	r3, [r4, #28]
 801c6d0:	68db      	ldr	r3, [r3, #12]
 801c6d2:	5959      	ldr	r1, [r3, r5]
 801c6d4:	2900      	cmp	r1, #0
 801c6d6:	d13b      	bne.n	801c750 <_reclaim_reent+0x98>
 801c6d8:	3504      	adds	r5, #4
 801c6da:	2d80      	cmp	r5, #128	@ 0x80
 801c6dc:	d1f7      	bne.n	801c6ce <_reclaim_reent+0x16>
 801c6de:	69e3      	ldr	r3, [r4, #28]
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	68d9      	ldr	r1, [r3, #12]
 801c6e4:	f000 f930 	bl	801c948 <_free_r>
 801c6e8:	69e3      	ldr	r3, [r4, #28]
 801c6ea:	6819      	ldr	r1, [r3, #0]
 801c6ec:	b111      	cbz	r1, 801c6f4 <_reclaim_reent+0x3c>
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f000 f92a 	bl	801c948 <_free_r>
 801c6f4:	6961      	ldr	r1, [r4, #20]
 801c6f6:	b111      	cbz	r1, 801c6fe <_reclaim_reent+0x46>
 801c6f8:	4620      	mov	r0, r4
 801c6fa:	f000 f925 	bl	801c948 <_free_r>
 801c6fe:	69e1      	ldr	r1, [r4, #28]
 801c700:	b111      	cbz	r1, 801c708 <_reclaim_reent+0x50>
 801c702:	4620      	mov	r0, r4
 801c704:	f000 f920 	bl	801c948 <_free_r>
 801c708:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c70a:	b111      	cbz	r1, 801c712 <_reclaim_reent+0x5a>
 801c70c:	4620      	mov	r0, r4
 801c70e:	f000 f91b 	bl	801c948 <_free_r>
 801c712:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c714:	b111      	cbz	r1, 801c71c <_reclaim_reent+0x64>
 801c716:	4620      	mov	r0, r4
 801c718:	f000 f916 	bl	801c948 <_free_r>
 801c71c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c71e:	b111      	cbz	r1, 801c726 <_reclaim_reent+0x6e>
 801c720:	4620      	mov	r0, r4
 801c722:	f000 f911 	bl	801c948 <_free_r>
 801c726:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c728:	b111      	cbz	r1, 801c730 <_reclaim_reent+0x78>
 801c72a:	4620      	mov	r0, r4
 801c72c:	f000 f90c 	bl	801c948 <_free_r>
 801c730:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c732:	b111      	cbz	r1, 801c73a <_reclaim_reent+0x82>
 801c734:	4620      	mov	r0, r4
 801c736:	f000 f907 	bl	801c948 <_free_r>
 801c73a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c73c:	b111      	cbz	r1, 801c744 <_reclaim_reent+0x8c>
 801c73e:	4620      	mov	r0, r4
 801c740:	f000 f902 	bl	801c948 <_free_r>
 801c744:	6a23      	ldr	r3, [r4, #32]
 801c746:	b14b      	cbz	r3, 801c75c <_reclaim_reent+0xa4>
 801c748:	4620      	mov	r0, r4
 801c74a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c74e:	4718      	bx	r3
 801c750:	680e      	ldr	r6, [r1, #0]
 801c752:	4620      	mov	r0, r4
 801c754:	f000 f8f8 	bl	801c948 <_free_r>
 801c758:	4631      	mov	r1, r6
 801c75a:	e7bb      	b.n	801c6d4 <_reclaim_reent+0x1c>
 801c75c:	bd70      	pop	{r4, r5, r6, pc}
 801c75e:	bf00      	nop
 801c760:	24000088 	.word	0x24000088

0801c764 <_lseek_r>:
 801c764:	b538      	push	{r3, r4, r5, lr}
 801c766:	4d07      	ldr	r5, [pc, #28]	@ (801c784 <_lseek_r+0x20>)
 801c768:	4604      	mov	r4, r0
 801c76a:	4608      	mov	r0, r1
 801c76c:	4611      	mov	r1, r2
 801c76e:	2200      	movs	r2, #0
 801c770:	602a      	str	r2, [r5, #0]
 801c772:	461a      	mov	r2, r3
 801c774:	f7e4 fbe3 	bl	8000f3e <_lseek>
 801c778:	1c43      	adds	r3, r0, #1
 801c77a:	d102      	bne.n	801c782 <_lseek_r+0x1e>
 801c77c:	682b      	ldr	r3, [r5, #0]
 801c77e:	b103      	cbz	r3, 801c782 <_lseek_r+0x1e>
 801c780:	6023      	str	r3, [r4, #0]
 801c782:	bd38      	pop	{r3, r4, r5, pc}
 801c784:	240665c8 	.word	0x240665c8

0801c788 <_read_r>:
 801c788:	b538      	push	{r3, r4, r5, lr}
 801c78a:	4d07      	ldr	r5, [pc, #28]	@ (801c7a8 <_read_r+0x20>)
 801c78c:	4604      	mov	r4, r0
 801c78e:	4608      	mov	r0, r1
 801c790:	4611      	mov	r1, r2
 801c792:	2200      	movs	r2, #0
 801c794:	602a      	str	r2, [r5, #0]
 801c796:	461a      	mov	r2, r3
 801c798:	f7e4 fb71 	bl	8000e7e <_read>
 801c79c:	1c43      	adds	r3, r0, #1
 801c79e:	d102      	bne.n	801c7a6 <_read_r+0x1e>
 801c7a0:	682b      	ldr	r3, [r5, #0]
 801c7a2:	b103      	cbz	r3, 801c7a6 <_read_r+0x1e>
 801c7a4:	6023      	str	r3, [r4, #0]
 801c7a6:	bd38      	pop	{r3, r4, r5, pc}
 801c7a8:	240665c8 	.word	0x240665c8

0801c7ac <_kill_r>:
 801c7ac:	b538      	push	{r3, r4, r5, lr}
 801c7ae:	4d07      	ldr	r5, [pc, #28]	@ (801c7cc <_kill_r+0x20>)
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	4604      	mov	r4, r0
 801c7b4:	4608      	mov	r0, r1
 801c7b6:	4611      	mov	r1, r2
 801c7b8:	602b      	str	r3, [r5, #0]
 801c7ba:	f7e4 fb45 	bl	8000e48 <_kill>
 801c7be:	1c43      	adds	r3, r0, #1
 801c7c0:	d102      	bne.n	801c7c8 <_kill_r+0x1c>
 801c7c2:	682b      	ldr	r3, [r5, #0]
 801c7c4:	b103      	cbz	r3, 801c7c8 <_kill_r+0x1c>
 801c7c6:	6023      	str	r3, [r4, #0]
 801c7c8:	bd38      	pop	{r3, r4, r5, pc}
 801c7ca:	bf00      	nop
 801c7cc:	240665c8 	.word	0x240665c8

0801c7d0 <_getpid_r>:
 801c7d0:	f7e4 bb32 	b.w	8000e38 <_getpid>

0801c7d4 <_sbrk_r>:
 801c7d4:	b538      	push	{r3, r4, r5, lr}
 801c7d6:	4d06      	ldr	r5, [pc, #24]	@ (801c7f0 <_sbrk_r+0x1c>)
 801c7d8:	2300      	movs	r3, #0
 801c7da:	4604      	mov	r4, r0
 801c7dc:	4608      	mov	r0, r1
 801c7de:	602b      	str	r3, [r5, #0]
 801c7e0:	f7e4 fbba 	bl	8000f58 <_sbrk>
 801c7e4:	1c43      	adds	r3, r0, #1
 801c7e6:	d102      	bne.n	801c7ee <_sbrk_r+0x1a>
 801c7e8:	682b      	ldr	r3, [r5, #0]
 801c7ea:	b103      	cbz	r3, 801c7ee <_sbrk_r+0x1a>
 801c7ec:	6023      	str	r3, [r4, #0]
 801c7ee:	bd38      	pop	{r3, r4, r5, pc}
 801c7f0:	240665c8 	.word	0x240665c8

0801c7f4 <_write_r>:
 801c7f4:	b538      	push	{r3, r4, r5, lr}
 801c7f6:	4d07      	ldr	r5, [pc, #28]	@ (801c814 <_write_r+0x20>)
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	4608      	mov	r0, r1
 801c7fc:	4611      	mov	r1, r2
 801c7fe:	2200      	movs	r2, #0
 801c800:	602a      	str	r2, [r5, #0]
 801c802:	461a      	mov	r2, r3
 801c804:	f7e4 fb58 	bl	8000eb8 <_write>
 801c808:	1c43      	adds	r3, r0, #1
 801c80a:	d102      	bne.n	801c812 <_write_r+0x1e>
 801c80c:	682b      	ldr	r3, [r5, #0]
 801c80e:	b103      	cbz	r3, 801c812 <_write_r+0x1e>
 801c810:	6023      	str	r3, [r4, #0]
 801c812:	bd38      	pop	{r3, r4, r5, pc}
 801c814:	240665c8 	.word	0x240665c8

0801c818 <__errno>:
 801c818:	4b01      	ldr	r3, [pc, #4]	@ (801c820 <__errno+0x8>)
 801c81a:	6818      	ldr	r0, [r3, #0]
 801c81c:	4770      	bx	lr
 801c81e:	bf00      	nop
 801c820:	24000088 	.word	0x24000088

0801c824 <__libc_init_array>:
 801c824:	b570      	push	{r4, r5, r6, lr}
 801c826:	4d0d      	ldr	r5, [pc, #52]	@ (801c85c <__libc_init_array+0x38>)
 801c828:	4c0d      	ldr	r4, [pc, #52]	@ (801c860 <__libc_init_array+0x3c>)
 801c82a:	1b64      	subs	r4, r4, r5
 801c82c:	10a4      	asrs	r4, r4, #2
 801c82e:	2600      	movs	r6, #0
 801c830:	42a6      	cmp	r6, r4
 801c832:	d109      	bne.n	801c848 <__libc_init_array+0x24>
 801c834:	4d0b      	ldr	r5, [pc, #44]	@ (801c864 <__libc_init_array+0x40>)
 801c836:	4c0c      	ldr	r4, [pc, #48]	@ (801c868 <__libc_init_array+0x44>)
 801c838:	f000 fcd0 	bl	801d1dc <_init>
 801c83c:	1b64      	subs	r4, r4, r5
 801c83e:	10a4      	asrs	r4, r4, #2
 801c840:	2600      	movs	r6, #0
 801c842:	42a6      	cmp	r6, r4
 801c844:	d105      	bne.n	801c852 <__libc_init_array+0x2e>
 801c846:	bd70      	pop	{r4, r5, r6, pc}
 801c848:	f855 3b04 	ldr.w	r3, [r5], #4
 801c84c:	4798      	blx	r3
 801c84e:	3601      	adds	r6, #1
 801c850:	e7ee      	b.n	801c830 <__libc_init_array+0xc>
 801c852:	f855 3b04 	ldr.w	r3, [r5], #4
 801c856:	4798      	blx	r3
 801c858:	3601      	adds	r6, #1
 801c85a:	e7f2      	b.n	801c842 <__libc_init_array+0x1e>
 801c85c:	080206ac 	.word	0x080206ac
 801c860:	080206ac 	.word	0x080206ac
 801c864:	080206ac 	.word	0x080206ac
 801c868:	080206c0 	.word	0x080206c0

0801c86c <__retarget_lock_init_recursive>:
 801c86c:	4770      	bx	lr

0801c86e <__retarget_lock_acquire_recursive>:
 801c86e:	4770      	bx	lr

0801c870 <__retarget_lock_release_recursive>:
 801c870:	4770      	bx	lr

0801c872 <memcpy>:
 801c872:	440a      	add	r2, r1
 801c874:	4291      	cmp	r1, r2
 801c876:	f100 33ff 	add.w	r3, r0, #4294967295
 801c87a:	d100      	bne.n	801c87e <memcpy+0xc>
 801c87c:	4770      	bx	lr
 801c87e:	b510      	push	{r4, lr}
 801c880:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c884:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c888:	4291      	cmp	r1, r2
 801c88a:	d1f9      	bne.n	801c880 <memcpy+0xe>
 801c88c:	bd10      	pop	{r4, pc}
	...

0801c890 <__register_exitproc>:
 801c890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c894:	4d27      	ldr	r5, [pc, #156]	@ (801c934 <__register_exitproc+0xa4>)
 801c896:	4607      	mov	r7, r0
 801c898:	6828      	ldr	r0, [r5, #0]
 801c89a:	4691      	mov	r9, r2
 801c89c:	460e      	mov	r6, r1
 801c89e:	4698      	mov	r8, r3
 801c8a0:	f7ff ffe5 	bl	801c86e <__retarget_lock_acquire_recursive>
 801c8a4:	4a24      	ldr	r2, [pc, #144]	@ (801c938 <__register_exitproc+0xa8>)
 801c8a6:	6814      	ldr	r4, [r2, #0]
 801c8a8:	b93c      	cbnz	r4, 801c8ba <__register_exitproc+0x2a>
 801c8aa:	4b24      	ldr	r3, [pc, #144]	@ (801c93c <__register_exitproc+0xac>)
 801c8ac:	6013      	str	r3, [r2, #0]
 801c8ae:	4a24      	ldr	r2, [pc, #144]	@ (801c940 <__register_exitproc+0xb0>)
 801c8b0:	b112      	cbz	r2, 801c8b8 <__register_exitproc+0x28>
 801c8b2:	6812      	ldr	r2, [r2, #0]
 801c8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801c8b8:	4c20      	ldr	r4, [pc, #128]	@ (801c93c <__register_exitproc+0xac>)
 801c8ba:	6863      	ldr	r3, [r4, #4]
 801c8bc:	2b1f      	cmp	r3, #31
 801c8be:	dd06      	ble.n	801c8ce <__register_exitproc+0x3e>
 801c8c0:	6828      	ldr	r0, [r5, #0]
 801c8c2:	f7ff ffd5 	bl	801c870 <__retarget_lock_release_recursive>
 801c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 801c8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8ce:	b32f      	cbz	r7, 801c91c <__register_exitproc+0x8c>
 801c8d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 801c8d4:	b968      	cbnz	r0, 801c8f2 <__register_exitproc+0x62>
 801c8d6:	4b1b      	ldr	r3, [pc, #108]	@ (801c944 <__register_exitproc+0xb4>)
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d0f1      	beq.n	801c8c0 <__register_exitproc+0x30>
 801c8dc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 801c8e0:	f7ff fc2a 	bl	801c138 <malloc>
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	d0eb      	beq.n	801c8c0 <__register_exitproc+0x30>
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 801c8ee:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 801c8f2:	6863      	ldr	r3, [r4, #4]
 801c8f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801c8f8:	2201      	movs	r2, #1
 801c8fa:	409a      	lsls	r2, r3
 801c8fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801c900:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 801c904:	4313      	orrs	r3, r2
 801c906:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 801c90a:	2f02      	cmp	r7, #2
 801c90c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 801c910:	bf02      	ittt	eq
 801c912:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 801c916:	4313      	orreq	r3, r2
 801c918:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 801c91c:	6863      	ldr	r3, [r4, #4]
 801c91e:	6828      	ldr	r0, [r5, #0]
 801c920:	1c5a      	adds	r2, r3, #1
 801c922:	3302      	adds	r3, #2
 801c924:	6062      	str	r2, [r4, #4]
 801c926:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801c92a:	f7ff ffa1 	bl	801c870 <__retarget_lock_release_recursive>
 801c92e:	2000      	movs	r0, #0
 801c930:	e7cb      	b.n	801c8ca <__register_exitproc+0x3a>
 801c932:	bf00      	nop
 801c934:	240000d8 	.word	0x240000d8
 801c938:	2406665c 	.word	0x2406665c
 801c93c:	240665d0 	.word	0x240665d0
 801c940:	0801ed00 	.word	0x0801ed00
 801c944:	0801c139 	.word	0x0801c139

0801c948 <_free_r>:
 801c948:	b538      	push	{r3, r4, r5, lr}
 801c94a:	4605      	mov	r5, r0
 801c94c:	2900      	cmp	r1, #0
 801c94e:	d041      	beq.n	801c9d4 <_free_r+0x8c>
 801c950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c954:	1f0c      	subs	r4, r1, #4
 801c956:	2b00      	cmp	r3, #0
 801c958:	bfb8      	it	lt
 801c95a:	18e4      	addlt	r4, r4, r3
 801c95c:	f7ff fc9e 	bl	801c29c <__malloc_lock>
 801c960:	4a1d      	ldr	r2, [pc, #116]	@ (801c9d8 <_free_r+0x90>)
 801c962:	6813      	ldr	r3, [r2, #0]
 801c964:	b933      	cbnz	r3, 801c974 <_free_r+0x2c>
 801c966:	6063      	str	r3, [r4, #4]
 801c968:	6014      	str	r4, [r2, #0]
 801c96a:	4628      	mov	r0, r5
 801c96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c970:	f7ff bc9a 	b.w	801c2a8 <__malloc_unlock>
 801c974:	42a3      	cmp	r3, r4
 801c976:	d908      	bls.n	801c98a <_free_r+0x42>
 801c978:	6820      	ldr	r0, [r4, #0]
 801c97a:	1821      	adds	r1, r4, r0
 801c97c:	428b      	cmp	r3, r1
 801c97e:	bf01      	itttt	eq
 801c980:	6819      	ldreq	r1, [r3, #0]
 801c982:	685b      	ldreq	r3, [r3, #4]
 801c984:	1809      	addeq	r1, r1, r0
 801c986:	6021      	streq	r1, [r4, #0]
 801c988:	e7ed      	b.n	801c966 <_free_r+0x1e>
 801c98a:	461a      	mov	r2, r3
 801c98c:	685b      	ldr	r3, [r3, #4]
 801c98e:	b10b      	cbz	r3, 801c994 <_free_r+0x4c>
 801c990:	42a3      	cmp	r3, r4
 801c992:	d9fa      	bls.n	801c98a <_free_r+0x42>
 801c994:	6811      	ldr	r1, [r2, #0]
 801c996:	1850      	adds	r0, r2, r1
 801c998:	42a0      	cmp	r0, r4
 801c99a:	d10b      	bne.n	801c9b4 <_free_r+0x6c>
 801c99c:	6820      	ldr	r0, [r4, #0]
 801c99e:	4401      	add	r1, r0
 801c9a0:	1850      	adds	r0, r2, r1
 801c9a2:	4283      	cmp	r3, r0
 801c9a4:	6011      	str	r1, [r2, #0]
 801c9a6:	d1e0      	bne.n	801c96a <_free_r+0x22>
 801c9a8:	6818      	ldr	r0, [r3, #0]
 801c9aa:	685b      	ldr	r3, [r3, #4]
 801c9ac:	6053      	str	r3, [r2, #4]
 801c9ae:	4408      	add	r0, r1
 801c9b0:	6010      	str	r0, [r2, #0]
 801c9b2:	e7da      	b.n	801c96a <_free_r+0x22>
 801c9b4:	d902      	bls.n	801c9bc <_free_r+0x74>
 801c9b6:	230c      	movs	r3, #12
 801c9b8:	602b      	str	r3, [r5, #0]
 801c9ba:	e7d6      	b.n	801c96a <_free_r+0x22>
 801c9bc:	6820      	ldr	r0, [r4, #0]
 801c9be:	1821      	adds	r1, r4, r0
 801c9c0:	428b      	cmp	r3, r1
 801c9c2:	bf04      	itt	eq
 801c9c4:	6819      	ldreq	r1, [r3, #0]
 801c9c6:	685b      	ldreq	r3, [r3, #4]
 801c9c8:	6063      	str	r3, [r4, #4]
 801c9ca:	bf04      	itt	eq
 801c9cc:	1809      	addeq	r1, r1, r0
 801c9ce:	6021      	streq	r1, [r4, #0]
 801c9d0:	6054      	str	r4, [r2, #4]
 801c9d2:	e7ca      	b.n	801c96a <_free_r+0x22>
 801c9d4:	bd38      	pop	{r3, r4, r5, pc}
 801c9d6:	bf00      	nop
 801c9d8:	24066488 	.word	0x24066488

0801c9dc <__sfputc_r>:
 801c9dc:	6893      	ldr	r3, [r2, #8]
 801c9de:	3b01      	subs	r3, #1
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	b410      	push	{r4}
 801c9e4:	6093      	str	r3, [r2, #8]
 801c9e6:	da08      	bge.n	801c9fa <__sfputc_r+0x1e>
 801c9e8:	6994      	ldr	r4, [r2, #24]
 801c9ea:	42a3      	cmp	r3, r4
 801c9ec:	db01      	blt.n	801c9f2 <__sfputc_r+0x16>
 801c9ee:	290a      	cmp	r1, #10
 801c9f0:	d103      	bne.n	801c9fa <__sfputc_r+0x1e>
 801c9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9f6:	f7ff bd82 	b.w	801c4fe <__swbuf_r>
 801c9fa:	6813      	ldr	r3, [r2, #0]
 801c9fc:	1c58      	adds	r0, r3, #1
 801c9fe:	6010      	str	r0, [r2, #0]
 801ca00:	7019      	strb	r1, [r3, #0]
 801ca02:	4608      	mov	r0, r1
 801ca04:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca08:	4770      	bx	lr

0801ca0a <__sfputs_r>:
 801ca0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca0c:	4606      	mov	r6, r0
 801ca0e:	460f      	mov	r7, r1
 801ca10:	4614      	mov	r4, r2
 801ca12:	18d5      	adds	r5, r2, r3
 801ca14:	42ac      	cmp	r4, r5
 801ca16:	d101      	bne.n	801ca1c <__sfputs_r+0x12>
 801ca18:	2000      	movs	r0, #0
 801ca1a:	e007      	b.n	801ca2c <__sfputs_r+0x22>
 801ca1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca20:	463a      	mov	r2, r7
 801ca22:	4630      	mov	r0, r6
 801ca24:	f7ff ffda 	bl	801c9dc <__sfputc_r>
 801ca28:	1c43      	adds	r3, r0, #1
 801ca2a:	d1f3      	bne.n	801ca14 <__sfputs_r+0xa>
 801ca2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ca30 <_vfiprintf_r>:
 801ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca34:	460d      	mov	r5, r1
 801ca36:	b09d      	sub	sp, #116	@ 0x74
 801ca38:	4614      	mov	r4, r2
 801ca3a:	4698      	mov	r8, r3
 801ca3c:	4606      	mov	r6, r0
 801ca3e:	b118      	cbz	r0, 801ca48 <_vfiprintf_r+0x18>
 801ca40:	6a03      	ldr	r3, [r0, #32]
 801ca42:	b90b      	cbnz	r3, 801ca48 <_vfiprintf_r+0x18>
 801ca44:	f7ff fcd0 	bl	801c3e8 <__sinit>
 801ca48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ca4a:	07d9      	lsls	r1, r3, #31
 801ca4c:	d405      	bmi.n	801ca5a <_vfiprintf_r+0x2a>
 801ca4e:	89ab      	ldrh	r3, [r5, #12]
 801ca50:	059a      	lsls	r2, r3, #22
 801ca52:	d402      	bmi.n	801ca5a <_vfiprintf_r+0x2a>
 801ca54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ca56:	f7ff ff0a 	bl	801c86e <__retarget_lock_acquire_recursive>
 801ca5a:	89ab      	ldrh	r3, [r5, #12]
 801ca5c:	071b      	lsls	r3, r3, #28
 801ca5e:	d501      	bpl.n	801ca64 <_vfiprintf_r+0x34>
 801ca60:	692b      	ldr	r3, [r5, #16]
 801ca62:	b99b      	cbnz	r3, 801ca8c <_vfiprintf_r+0x5c>
 801ca64:	4629      	mov	r1, r5
 801ca66:	4630      	mov	r0, r6
 801ca68:	f7ff fd88 	bl	801c57c <__swsetup_r>
 801ca6c:	b170      	cbz	r0, 801ca8c <_vfiprintf_r+0x5c>
 801ca6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ca70:	07dc      	lsls	r4, r3, #31
 801ca72:	d504      	bpl.n	801ca7e <_vfiprintf_r+0x4e>
 801ca74:	f04f 30ff 	mov.w	r0, #4294967295
 801ca78:	b01d      	add	sp, #116	@ 0x74
 801ca7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca7e:	89ab      	ldrh	r3, [r5, #12]
 801ca80:	0598      	lsls	r0, r3, #22
 801ca82:	d4f7      	bmi.n	801ca74 <_vfiprintf_r+0x44>
 801ca84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ca86:	f7ff fef3 	bl	801c870 <__retarget_lock_release_recursive>
 801ca8a:	e7f3      	b.n	801ca74 <_vfiprintf_r+0x44>
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca90:	2320      	movs	r3, #32
 801ca92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ca96:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca9a:	2330      	movs	r3, #48	@ 0x30
 801ca9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cc4c <_vfiprintf_r+0x21c>
 801caa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801caa4:	f04f 0901 	mov.w	r9, #1
 801caa8:	4623      	mov	r3, r4
 801caaa:	469a      	mov	sl, r3
 801caac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cab0:	b10a      	cbz	r2, 801cab6 <_vfiprintf_r+0x86>
 801cab2:	2a25      	cmp	r2, #37	@ 0x25
 801cab4:	d1f9      	bne.n	801caaa <_vfiprintf_r+0x7a>
 801cab6:	ebba 0b04 	subs.w	fp, sl, r4
 801caba:	d00b      	beq.n	801cad4 <_vfiprintf_r+0xa4>
 801cabc:	465b      	mov	r3, fp
 801cabe:	4622      	mov	r2, r4
 801cac0:	4629      	mov	r1, r5
 801cac2:	4630      	mov	r0, r6
 801cac4:	f7ff ffa1 	bl	801ca0a <__sfputs_r>
 801cac8:	3001      	adds	r0, #1
 801caca:	f000 80a7 	beq.w	801cc1c <_vfiprintf_r+0x1ec>
 801cace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cad0:	445a      	add	r2, fp
 801cad2:	9209      	str	r2, [sp, #36]	@ 0x24
 801cad4:	f89a 3000 	ldrb.w	r3, [sl]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	f000 809f 	beq.w	801cc1c <_vfiprintf_r+0x1ec>
 801cade:	2300      	movs	r3, #0
 801cae0:	f04f 32ff 	mov.w	r2, #4294967295
 801cae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cae8:	f10a 0a01 	add.w	sl, sl, #1
 801caec:	9304      	str	r3, [sp, #16]
 801caee:	9307      	str	r3, [sp, #28]
 801caf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801caf4:	931a      	str	r3, [sp, #104]	@ 0x68
 801caf6:	4654      	mov	r4, sl
 801caf8:	2205      	movs	r2, #5
 801cafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cafe:	4853      	ldr	r0, [pc, #332]	@ (801cc4c <_vfiprintf_r+0x21c>)
 801cb00:	f7e3 fc06 	bl	8000310 <memchr>
 801cb04:	9a04      	ldr	r2, [sp, #16]
 801cb06:	b9d8      	cbnz	r0, 801cb40 <_vfiprintf_r+0x110>
 801cb08:	06d1      	lsls	r1, r2, #27
 801cb0a:	bf44      	itt	mi
 801cb0c:	2320      	movmi	r3, #32
 801cb0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb12:	0713      	lsls	r3, r2, #28
 801cb14:	bf44      	itt	mi
 801cb16:	232b      	movmi	r3, #43	@ 0x2b
 801cb18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb1c:	f89a 3000 	ldrb.w	r3, [sl]
 801cb20:	2b2a      	cmp	r3, #42	@ 0x2a
 801cb22:	d015      	beq.n	801cb50 <_vfiprintf_r+0x120>
 801cb24:	9a07      	ldr	r2, [sp, #28]
 801cb26:	4654      	mov	r4, sl
 801cb28:	2000      	movs	r0, #0
 801cb2a:	f04f 0c0a 	mov.w	ip, #10
 801cb2e:	4621      	mov	r1, r4
 801cb30:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cb34:	3b30      	subs	r3, #48	@ 0x30
 801cb36:	2b09      	cmp	r3, #9
 801cb38:	d94b      	bls.n	801cbd2 <_vfiprintf_r+0x1a2>
 801cb3a:	b1b0      	cbz	r0, 801cb6a <_vfiprintf_r+0x13a>
 801cb3c:	9207      	str	r2, [sp, #28]
 801cb3e:	e014      	b.n	801cb6a <_vfiprintf_r+0x13a>
 801cb40:	eba0 0308 	sub.w	r3, r0, r8
 801cb44:	fa09 f303 	lsl.w	r3, r9, r3
 801cb48:	4313      	orrs	r3, r2
 801cb4a:	9304      	str	r3, [sp, #16]
 801cb4c:	46a2      	mov	sl, r4
 801cb4e:	e7d2      	b.n	801caf6 <_vfiprintf_r+0xc6>
 801cb50:	9b03      	ldr	r3, [sp, #12]
 801cb52:	1d19      	adds	r1, r3, #4
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	9103      	str	r1, [sp, #12]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	bfbb      	ittet	lt
 801cb5c:	425b      	neglt	r3, r3
 801cb5e:	f042 0202 	orrlt.w	r2, r2, #2
 801cb62:	9307      	strge	r3, [sp, #28]
 801cb64:	9307      	strlt	r3, [sp, #28]
 801cb66:	bfb8      	it	lt
 801cb68:	9204      	strlt	r2, [sp, #16]
 801cb6a:	7823      	ldrb	r3, [r4, #0]
 801cb6c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb6e:	d10a      	bne.n	801cb86 <_vfiprintf_r+0x156>
 801cb70:	7863      	ldrb	r3, [r4, #1]
 801cb72:	2b2a      	cmp	r3, #42	@ 0x2a
 801cb74:	d132      	bne.n	801cbdc <_vfiprintf_r+0x1ac>
 801cb76:	9b03      	ldr	r3, [sp, #12]
 801cb78:	1d1a      	adds	r2, r3, #4
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	9203      	str	r2, [sp, #12]
 801cb7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cb82:	3402      	adds	r4, #2
 801cb84:	9305      	str	r3, [sp, #20]
 801cb86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cc5c <_vfiprintf_r+0x22c>
 801cb8a:	7821      	ldrb	r1, [r4, #0]
 801cb8c:	2203      	movs	r2, #3
 801cb8e:	4650      	mov	r0, sl
 801cb90:	f7e3 fbbe 	bl	8000310 <memchr>
 801cb94:	b138      	cbz	r0, 801cba6 <_vfiprintf_r+0x176>
 801cb96:	9b04      	ldr	r3, [sp, #16]
 801cb98:	eba0 000a 	sub.w	r0, r0, sl
 801cb9c:	2240      	movs	r2, #64	@ 0x40
 801cb9e:	4082      	lsls	r2, r0
 801cba0:	4313      	orrs	r3, r2
 801cba2:	3401      	adds	r4, #1
 801cba4:	9304      	str	r3, [sp, #16]
 801cba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cbaa:	4829      	ldr	r0, [pc, #164]	@ (801cc50 <_vfiprintf_r+0x220>)
 801cbac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cbb0:	2206      	movs	r2, #6
 801cbb2:	f7e3 fbad 	bl	8000310 <memchr>
 801cbb6:	2800      	cmp	r0, #0
 801cbb8:	d03f      	beq.n	801cc3a <_vfiprintf_r+0x20a>
 801cbba:	4b26      	ldr	r3, [pc, #152]	@ (801cc54 <_vfiprintf_r+0x224>)
 801cbbc:	bb1b      	cbnz	r3, 801cc06 <_vfiprintf_r+0x1d6>
 801cbbe:	9b03      	ldr	r3, [sp, #12]
 801cbc0:	3307      	adds	r3, #7
 801cbc2:	f023 0307 	bic.w	r3, r3, #7
 801cbc6:	3308      	adds	r3, #8
 801cbc8:	9303      	str	r3, [sp, #12]
 801cbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbcc:	443b      	add	r3, r7
 801cbce:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbd0:	e76a      	b.n	801caa8 <_vfiprintf_r+0x78>
 801cbd2:	fb0c 3202 	mla	r2, ip, r2, r3
 801cbd6:	460c      	mov	r4, r1
 801cbd8:	2001      	movs	r0, #1
 801cbda:	e7a8      	b.n	801cb2e <_vfiprintf_r+0xfe>
 801cbdc:	2300      	movs	r3, #0
 801cbde:	3401      	adds	r4, #1
 801cbe0:	9305      	str	r3, [sp, #20]
 801cbe2:	4619      	mov	r1, r3
 801cbe4:	f04f 0c0a 	mov.w	ip, #10
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cbee:	3a30      	subs	r2, #48	@ 0x30
 801cbf0:	2a09      	cmp	r2, #9
 801cbf2:	d903      	bls.n	801cbfc <_vfiprintf_r+0x1cc>
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d0c6      	beq.n	801cb86 <_vfiprintf_r+0x156>
 801cbf8:	9105      	str	r1, [sp, #20]
 801cbfa:	e7c4      	b.n	801cb86 <_vfiprintf_r+0x156>
 801cbfc:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc00:	4604      	mov	r4, r0
 801cc02:	2301      	movs	r3, #1
 801cc04:	e7f0      	b.n	801cbe8 <_vfiprintf_r+0x1b8>
 801cc06:	ab03      	add	r3, sp, #12
 801cc08:	9300      	str	r3, [sp, #0]
 801cc0a:	462a      	mov	r2, r5
 801cc0c:	4b12      	ldr	r3, [pc, #72]	@ (801cc58 <_vfiprintf_r+0x228>)
 801cc0e:	a904      	add	r1, sp, #16
 801cc10:	4630      	mov	r0, r6
 801cc12:	f3af 8000 	nop.w
 801cc16:	4607      	mov	r7, r0
 801cc18:	1c78      	adds	r0, r7, #1
 801cc1a:	d1d6      	bne.n	801cbca <_vfiprintf_r+0x19a>
 801cc1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc1e:	07d9      	lsls	r1, r3, #31
 801cc20:	d405      	bmi.n	801cc2e <_vfiprintf_r+0x1fe>
 801cc22:	89ab      	ldrh	r3, [r5, #12]
 801cc24:	059a      	lsls	r2, r3, #22
 801cc26:	d402      	bmi.n	801cc2e <_vfiprintf_r+0x1fe>
 801cc28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cc2a:	f7ff fe21 	bl	801c870 <__retarget_lock_release_recursive>
 801cc2e:	89ab      	ldrh	r3, [r5, #12]
 801cc30:	065b      	lsls	r3, r3, #25
 801cc32:	f53f af1f 	bmi.w	801ca74 <_vfiprintf_r+0x44>
 801cc36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cc38:	e71e      	b.n	801ca78 <_vfiprintf_r+0x48>
 801cc3a:	ab03      	add	r3, sp, #12
 801cc3c:	9300      	str	r3, [sp, #0]
 801cc3e:	462a      	mov	r2, r5
 801cc40:	4b05      	ldr	r3, [pc, #20]	@ (801cc58 <_vfiprintf_r+0x228>)
 801cc42:	a904      	add	r1, sp, #16
 801cc44:	4630      	mov	r0, r6
 801cc46:	f000 f879 	bl	801cd3c <_printf_i>
 801cc4a:	e7e4      	b.n	801cc16 <_vfiprintf_r+0x1e6>
 801cc4c:	0801ed04 	.word	0x0801ed04
 801cc50:	0801ed0e 	.word	0x0801ed0e
 801cc54:	00000000 	.word	0x00000000
 801cc58:	0801ca0b 	.word	0x0801ca0b
 801cc5c:	0801ed0a 	.word	0x0801ed0a

0801cc60 <_printf_common>:
 801cc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc64:	4616      	mov	r6, r2
 801cc66:	4698      	mov	r8, r3
 801cc68:	688a      	ldr	r2, [r1, #8]
 801cc6a:	690b      	ldr	r3, [r1, #16]
 801cc6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cc70:	4293      	cmp	r3, r2
 801cc72:	bfb8      	it	lt
 801cc74:	4613      	movlt	r3, r2
 801cc76:	6033      	str	r3, [r6, #0]
 801cc78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cc7c:	4607      	mov	r7, r0
 801cc7e:	460c      	mov	r4, r1
 801cc80:	b10a      	cbz	r2, 801cc86 <_printf_common+0x26>
 801cc82:	3301      	adds	r3, #1
 801cc84:	6033      	str	r3, [r6, #0]
 801cc86:	6823      	ldr	r3, [r4, #0]
 801cc88:	0699      	lsls	r1, r3, #26
 801cc8a:	bf42      	ittt	mi
 801cc8c:	6833      	ldrmi	r3, [r6, #0]
 801cc8e:	3302      	addmi	r3, #2
 801cc90:	6033      	strmi	r3, [r6, #0]
 801cc92:	6825      	ldr	r5, [r4, #0]
 801cc94:	f015 0506 	ands.w	r5, r5, #6
 801cc98:	d106      	bne.n	801cca8 <_printf_common+0x48>
 801cc9a:	f104 0a19 	add.w	sl, r4, #25
 801cc9e:	68e3      	ldr	r3, [r4, #12]
 801cca0:	6832      	ldr	r2, [r6, #0]
 801cca2:	1a9b      	subs	r3, r3, r2
 801cca4:	42ab      	cmp	r3, r5
 801cca6:	dc26      	bgt.n	801ccf6 <_printf_common+0x96>
 801cca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ccac:	6822      	ldr	r2, [r4, #0]
 801ccae:	3b00      	subs	r3, #0
 801ccb0:	bf18      	it	ne
 801ccb2:	2301      	movne	r3, #1
 801ccb4:	0692      	lsls	r2, r2, #26
 801ccb6:	d42b      	bmi.n	801cd10 <_printf_common+0xb0>
 801ccb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ccbc:	4641      	mov	r1, r8
 801ccbe:	4638      	mov	r0, r7
 801ccc0:	47c8      	blx	r9
 801ccc2:	3001      	adds	r0, #1
 801ccc4:	d01e      	beq.n	801cd04 <_printf_common+0xa4>
 801ccc6:	6823      	ldr	r3, [r4, #0]
 801ccc8:	6922      	ldr	r2, [r4, #16]
 801ccca:	f003 0306 	and.w	r3, r3, #6
 801ccce:	2b04      	cmp	r3, #4
 801ccd0:	bf02      	ittt	eq
 801ccd2:	68e5      	ldreq	r5, [r4, #12]
 801ccd4:	6833      	ldreq	r3, [r6, #0]
 801ccd6:	1aed      	subeq	r5, r5, r3
 801ccd8:	68a3      	ldr	r3, [r4, #8]
 801ccda:	bf0c      	ite	eq
 801ccdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cce0:	2500      	movne	r5, #0
 801cce2:	4293      	cmp	r3, r2
 801cce4:	bfc4      	itt	gt
 801cce6:	1a9b      	subgt	r3, r3, r2
 801cce8:	18ed      	addgt	r5, r5, r3
 801ccea:	2600      	movs	r6, #0
 801ccec:	341a      	adds	r4, #26
 801ccee:	42b5      	cmp	r5, r6
 801ccf0:	d11a      	bne.n	801cd28 <_printf_common+0xc8>
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	e008      	b.n	801cd08 <_printf_common+0xa8>
 801ccf6:	2301      	movs	r3, #1
 801ccf8:	4652      	mov	r2, sl
 801ccfa:	4641      	mov	r1, r8
 801ccfc:	4638      	mov	r0, r7
 801ccfe:	47c8      	blx	r9
 801cd00:	3001      	adds	r0, #1
 801cd02:	d103      	bne.n	801cd0c <_printf_common+0xac>
 801cd04:	f04f 30ff 	mov.w	r0, #4294967295
 801cd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd0c:	3501      	adds	r5, #1
 801cd0e:	e7c6      	b.n	801cc9e <_printf_common+0x3e>
 801cd10:	18e1      	adds	r1, r4, r3
 801cd12:	1c5a      	adds	r2, r3, #1
 801cd14:	2030      	movs	r0, #48	@ 0x30
 801cd16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cd1a:	4422      	add	r2, r4
 801cd1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cd20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cd24:	3302      	adds	r3, #2
 801cd26:	e7c7      	b.n	801ccb8 <_printf_common+0x58>
 801cd28:	2301      	movs	r3, #1
 801cd2a:	4622      	mov	r2, r4
 801cd2c:	4641      	mov	r1, r8
 801cd2e:	4638      	mov	r0, r7
 801cd30:	47c8      	blx	r9
 801cd32:	3001      	adds	r0, #1
 801cd34:	d0e6      	beq.n	801cd04 <_printf_common+0xa4>
 801cd36:	3601      	adds	r6, #1
 801cd38:	e7d9      	b.n	801ccee <_printf_common+0x8e>
	...

0801cd3c <_printf_i>:
 801cd3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cd40:	7e0f      	ldrb	r7, [r1, #24]
 801cd42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cd44:	2f78      	cmp	r7, #120	@ 0x78
 801cd46:	4691      	mov	r9, r2
 801cd48:	4680      	mov	r8, r0
 801cd4a:	460c      	mov	r4, r1
 801cd4c:	469a      	mov	sl, r3
 801cd4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cd52:	d807      	bhi.n	801cd64 <_printf_i+0x28>
 801cd54:	2f62      	cmp	r7, #98	@ 0x62
 801cd56:	d80a      	bhi.n	801cd6e <_printf_i+0x32>
 801cd58:	2f00      	cmp	r7, #0
 801cd5a:	f000 80d2 	beq.w	801cf02 <_printf_i+0x1c6>
 801cd5e:	2f58      	cmp	r7, #88	@ 0x58
 801cd60:	f000 80b9 	beq.w	801ced6 <_printf_i+0x19a>
 801cd64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cd68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cd6c:	e03a      	b.n	801cde4 <_printf_i+0xa8>
 801cd6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cd72:	2b15      	cmp	r3, #21
 801cd74:	d8f6      	bhi.n	801cd64 <_printf_i+0x28>
 801cd76:	a101      	add	r1, pc, #4	@ (adr r1, 801cd7c <_printf_i+0x40>)
 801cd78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cd7c:	0801cdd5 	.word	0x0801cdd5
 801cd80:	0801cde9 	.word	0x0801cde9
 801cd84:	0801cd65 	.word	0x0801cd65
 801cd88:	0801cd65 	.word	0x0801cd65
 801cd8c:	0801cd65 	.word	0x0801cd65
 801cd90:	0801cd65 	.word	0x0801cd65
 801cd94:	0801cde9 	.word	0x0801cde9
 801cd98:	0801cd65 	.word	0x0801cd65
 801cd9c:	0801cd65 	.word	0x0801cd65
 801cda0:	0801cd65 	.word	0x0801cd65
 801cda4:	0801cd65 	.word	0x0801cd65
 801cda8:	0801cee9 	.word	0x0801cee9
 801cdac:	0801ce13 	.word	0x0801ce13
 801cdb0:	0801cea3 	.word	0x0801cea3
 801cdb4:	0801cd65 	.word	0x0801cd65
 801cdb8:	0801cd65 	.word	0x0801cd65
 801cdbc:	0801cf0b 	.word	0x0801cf0b
 801cdc0:	0801cd65 	.word	0x0801cd65
 801cdc4:	0801ce13 	.word	0x0801ce13
 801cdc8:	0801cd65 	.word	0x0801cd65
 801cdcc:	0801cd65 	.word	0x0801cd65
 801cdd0:	0801ceab 	.word	0x0801ceab
 801cdd4:	6833      	ldr	r3, [r6, #0]
 801cdd6:	1d1a      	adds	r2, r3, #4
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	6032      	str	r2, [r6, #0]
 801cddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cde0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cde4:	2301      	movs	r3, #1
 801cde6:	e09d      	b.n	801cf24 <_printf_i+0x1e8>
 801cde8:	6833      	ldr	r3, [r6, #0]
 801cdea:	6820      	ldr	r0, [r4, #0]
 801cdec:	1d19      	adds	r1, r3, #4
 801cdee:	6031      	str	r1, [r6, #0]
 801cdf0:	0606      	lsls	r6, r0, #24
 801cdf2:	d501      	bpl.n	801cdf8 <_printf_i+0xbc>
 801cdf4:	681d      	ldr	r5, [r3, #0]
 801cdf6:	e003      	b.n	801ce00 <_printf_i+0xc4>
 801cdf8:	0645      	lsls	r5, r0, #25
 801cdfa:	d5fb      	bpl.n	801cdf4 <_printf_i+0xb8>
 801cdfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ce00:	2d00      	cmp	r5, #0
 801ce02:	da03      	bge.n	801ce0c <_printf_i+0xd0>
 801ce04:	232d      	movs	r3, #45	@ 0x2d
 801ce06:	426d      	negs	r5, r5
 801ce08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce0c:	4859      	ldr	r0, [pc, #356]	@ (801cf74 <_printf_i+0x238>)
 801ce0e:	230a      	movs	r3, #10
 801ce10:	e011      	b.n	801ce36 <_printf_i+0xfa>
 801ce12:	6821      	ldr	r1, [r4, #0]
 801ce14:	6833      	ldr	r3, [r6, #0]
 801ce16:	0608      	lsls	r0, r1, #24
 801ce18:	f853 5b04 	ldr.w	r5, [r3], #4
 801ce1c:	d402      	bmi.n	801ce24 <_printf_i+0xe8>
 801ce1e:	0649      	lsls	r1, r1, #25
 801ce20:	bf48      	it	mi
 801ce22:	b2ad      	uxthmi	r5, r5
 801ce24:	2f6f      	cmp	r7, #111	@ 0x6f
 801ce26:	4853      	ldr	r0, [pc, #332]	@ (801cf74 <_printf_i+0x238>)
 801ce28:	6033      	str	r3, [r6, #0]
 801ce2a:	bf14      	ite	ne
 801ce2c:	230a      	movne	r3, #10
 801ce2e:	2308      	moveq	r3, #8
 801ce30:	2100      	movs	r1, #0
 801ce32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ce36:	6866      	ldr	r6, [r4, #4]
 801ce38:	60a6      	str	r6, [r4, #8]
 801ce3a:	2e00      	cmp	r6, #0
 801ce3c:	bfa2      	ittt	ge
 801ce3e:	6821      	ldrge	r1, [r4, #0]
 801ce40:	f021 0104 	bicge.w	r1, r1, #4
 801ce44:	6021      	strge	r1, [r4, #0]
 801ce46:	b90d      	cbnz	r5, 801ce4c <_printf_i+0x110>
 801ce48:	2e00      	cmp	r6, #0
 801ce4a:	d04b      	beq.n	801cee4 <_printf_i+0x1a8>
 801ce4c:	4616      	mov	r6, r2
 801ce4e:	fbb5 f1f3 	udiv	r1, r5, r3
 801ce52:	fb03 5711 	mls	r7, r3, r1, r5
 801ce56:	5dc7      	ldrb	r7, [r0, r7]
 801ce58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ce5c:	462f      	mov	r7, r5
 801ce5e:	42bb      	cmp	r3, r7
 801ce60:	460d      	mov	r5, r1
 801ce62:	d9f4      	bls.n	801ce4e <_printf_i+0x112>
 801ce64:	2b08      	cmp	r3, #8
 801ce66:	d10b      	bne.n	801ce80 <_printf_i+0x144>
 801ce68:	6823      	ldr	r3, [r4, #0]
 801ce6a:	07df      	lsls	r7, r3, #31
 801ce6c:	d508      	bpl.n	801ce80 <_printf_i+0x144>
 801ce6e:	6923      	ldr	r3, [r4, #16]
 801ce70:	6861      	ldr	r1, [r4, #4]
 801ce72:	4299      	cmp	r1, r3
 801ce74:	bfde      	ittt	le
 801ce76:	2330      	movle	r3, #48	@ 0x30
 801ce78:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ce7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ce80:	1b92      	subs	r2, r2, r6
 801ce82:	6122      	str	r2, [r4, #16]
 801ce84:	f8cd a000 	str.w	sl, [sp]
 801ce88:	464b      	mov	r3, r9
 801ce8a:	aa03      	add	r2, sp, #12
 801ce8c:	4621      	mov	r1, r4
 801ce8e:	4640      	mov	r0, r8
 801ce90:	f7ff fee6 	bl	801cc60 <_printf_common>
 801ce94:	3001      	adds	r0, #1
 801ce96:	d14a      	bne.n	801cf2e <_printf_i+0x1f2>
 801ce98:	f04f 30ff 	mov.w	r0, #4294967295
 801ce9c:	b004      	add	sp, #16
 801ce9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cea2:	6823      	ldr	r3, [r4, #0]
 801cea4:	f043 0320 	orr.w	r3, r3, #32
 801cea8:	6023      	str	r3, [r4, #0]
 801ceaa:	4833      	ldr	r0, [pc, #204]	@ (801cf78 <_printf_i+0x23c>)
 801ceac:	2778      	movs	r7, #120	@ 0x78
 801ceae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ceb2:	6823      	ldr	r3, [r4, #0]
 801ceb4:	6831      	ldr	r1, [r6, #0]
 801ceb6:	061f      	lsls	r7, r3, #24
 801ceb8:	f851 5b04 	ldr.w	r5, [r1], #4
 801cebc:	d402      	bmi.n	801cec4 <_printf_i+0x188>
 801cebe:	065f      	lsls	r7, r3, #25
 801cec0:	bf48      	it	mi
 801cec2:	b2ad      	uxthmi	r5, r5
 801cec4:	6031      	str	r1, [r6, #0]
 801cec6:	07d9      	lsls	r1, r3, #31
 801cec8:	bf44      	itt	mi
 801ceca:	f043 0320 	orrmi.w	r3, r3, #32
 801cece:	6023      	strmi	r3, [r4, #0]
 801ced0:	b11d      	cbz	r5, 801ceda <_printf_i+0x19e>
 801ced2:	2310      	movs	r3, #16
 801ced4:	e7ac      	b.n	801ce30 <_printf_i+0xf4>
 801ced6:	4827      	ldr	r0, [pc, #156]	@ (801cf74 <_printf_i+0x238>)
 801ced8:	e7e9      	b.n	801ceae <_printf_i+0x172>
 801ceda:	6823      	ldr	r3, [r4, #0]
 801cedc:	f023 0320 	bic.w	r3, r3, #32
 801cee0:	6023      	str	r3, [r4, #0]
 801cee2:	e7f6      	b.n	801ced2 <_printf_i+0x196>
 801cee4:	4616      	mov	r6, r2
 801cee6:	e7bd      	b.n	801ce64 <_printf_i+0x128>
 801cee8:	6833      	ldr	r3, [r6, #0]
 801ceea:	6825      	ldr	r5, [r4, #0]
 801ceec:	6961      	ldr	r1, [r4, #20]
 801ceee:	1d18      	adds	r0, r3, #4
 801cef0:	6030      	str	r0, [r6, #0]
 801cef2:	062e      	lsls	r6, r5, #24
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	d501      	bpl.n	801cefc <_printf_i+0x1c0>
 801cef8:	6019      	str	r1, [r3, #0]
 801cefa:	e002      	b.n	801cf02 <_printf_i+0x1c6>
 801cefc:	0668      	lsls	r0, r5, #25
 801cefe:	d5fb      	bpl.n	801cef8 <_printf_i+0x1bc>
 801cf00:	8019      	strh	r1, [r3, #0]
 801cf02:	2300      	movs	r3, #0
 801cf04:	6123      	str	r3, [r4, #16]
 801cf06:	4616      	mov	r6, r2
 801cf08:	e7bc      	b.n	801ce84 <_printf_i+0x148>
 801cf0a:	6833      	ldr	r3, [r6, #0]
 801cf0c:	1d1a      	adds	r2, r3, #4
 801cf0e:	6032      	str	r2, [r6, #0]
 801cf10:	681e      	ldr	r6, [r3, #0]
 801cf12:	6862      	ldr	r2, [r4, #4]
 801cf14:	2100      	movs	r1, #0
 801cf16:	4630      	mov	r0, r6
 801cf18:	f7e3 f9fa 	bl	8000310 <memchr>
 801cf1c:	b108      	cbz	r0, 801cf22 <_printf_i+0x1e6>
 801cf1e:	1b80      	subs	r0, r0, r6
 801cf20:	6060      	str	r0, [r4, #4]
 801cf22:	6863      	ldr	r3, [r4, #4]
 801cf24:	6123      	str	r3, [r4, #16]
 801cf26:	2300      	movs	r3, #0
 801cf28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cf2c:	e7aa      	b.n	801ce84 <_printf_i+0x148>
 801cf2e:	6923      	ldr	r3, [r4, #16]
 801cf30:	4632      	mov	r2, r6
 801cf32:	4649      	mov	r1, r9
 801cf34:	4640      	mov	r0, r8
 801cf36:	47d0      	blx	sl
 801cf38:	3001      	adds	r0, #1
 801cf3a:	d0ad      	beq.n	801ce98 <_printf_i+0x15c>
 801cf3c:	6823      	ldr	r3, [r4, #0]
 801cf3e:	079b      	lsls	r3, r3, #30
 801cf40:	d413      	bmi.n	801cf6a <_printf_i+0x22e>
 801cf42:	68e0      	ldr	r0, [r4, #12]
 801cf44:	9b03      	ldr	r3, [sp, #12]
 801cf46:	4298      	cmp	r0, r3
 801cf48:	bfb8      	it	lt
 801cf4a:	4618      	movlt	r0, r3
 801cf4c:	e7a6      	b.n	801ce9c <_printf_i+0x160>
 801cf4e:	2301      	movs	r3, #1
 801cf50:	4632      	mov	r2, r6
 801cf52:	4649      	mov	r1, r9
 801cf54:	4640      	mov	r0, r8
 801cf56:	47d0      	blx	sl
 801cf58:	3001      	adds	r0, #1
 801cf5a:	d09d      	beq.n	801ce98 <_printf_i+0x15c>
 801cf5c:	3501      	adds	r5, #1
 801cf5e:	68e3      	ldr	r3, [r4, #12]
 801cf60:	9903      	ldr	r1, [sp, #12]
 801cf62:	1a5b      	subs	r3, r3, r1
 801cf64:	42ab      	cmp	r3, r5
 801cf66:	dcf2      	bgt.n	801cf4e <_printf_i+0x212>
 801cf68:	e7eb      	b.n	801cf42 <_printf_i+0x206>
 801cf6a:	2500      	movs	r5, #0
 801cf6c:	f104 0619 	add.w	r6, r4, #25
 801cf70:	e7f5      	b.n	801cf5e <_printf_i+0x222>
 801cf72:	bf00      	nop
 801cf74:	0801ed15 	.word	0x0801ed15
 801cf78:	0801ed26 	.word	0x0801ed26

0801cf7c <__sflush_r>:
 801cf7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf84:	0716      	lsls	r6, r2, #28
 801cf86:	4605      	mov	r5, r0
 801cf88:	460c      	mov	r4, r1
 801cf8a:	d454      	bmi.n	801d036 <__sflush_r+0xba>
 801cf8c:	684b      	ldr	r3, [r1, #4]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	dc02      	bgt.n	801cf98 <__sflush_r+0x1c>
 801cf92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	dd48      	ble.n	801d02a <__sflush_r+0xae>
 801cf98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cf9a:	2e00      	cmp	r6, #0
 801cf9c:	d045      	beq.n	801d02a <__sflush_r+0xae>
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cfa4:	682f      	ldr	r7, [r5, #0]
 801cfa6:	6a21      	ldr	r1, [r4, #32]
 801cfa8:	602b      	str	r3, [r5, #0]
 801cfaa:	d030      	beq.n	801d00e <__sflush_r+0x92>
 801cfac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cfae:	89a3      	ldrh	r3, [r4, #12]
 801cfb0:	0759      	lsls	r1, r3, #29
 801cfb2:	d505      	bpl.n	801cfc0 <__sflush_r+0x44>
 801cfb4:	6863      	ldr	r3, [r4, #4]
 801cfb6:	1ad2      	subs	r2, r2, r3
 801cfb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cfba:	b10b      	cbz	r3, 801cfc0 <__sflush_r+0x44>
 801cfbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cfbe:	1ad2      	subs	r2, r2, r3
 801cfc0:	2300      	movs	r3, #0
 801cfc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cfc4:	6a21      	ldr	r1, [r4, #32]
 801cfc6:	4628      	mov	r0, r5
 801cfc8:	47b0      	blx	r6
 801cfca:	1c43      	adds	r3, r0, #1
 801cfcc:	89a3      	ldrh	r3, [r4, #12]
 801cfce:	d106      	bne.n	801cfde <__sflush_r+0x62>
 801cfd0:	6829      	ldr	r1, [r5, #0]
 801cfd2:	291d      	cmp	r1, #29
 801cfd4:	d82b      	bhi.n	801d02e <__sflush_r+0xb2>
 801cfd6:	4a2a      	ldr	r2, [pc, #168]	@ (801d080 <__sflush_r+0x104>)
 801cfd8:	410a      	asrs	r2, r1
 801cfda:	07d6      	lsls	r6, r2, #31
 801cfdc:	d427      	bmi.n	801d02e <__sflush_r+0xb2>
 801cfde:	2200      	movs	r2, #0
 801cfe0:	6062      	str	r2, [r4, #4]
 801cfe2:	04d9      	lsls	r1, r3, #19
 801cfe4:	6922      	ldr	r2, [r4, #16]
 801cfe6:	6022      	str	r2, [r4, #0]
 801cfe8:	d504      	bpl.n	801cff4 <__sflush_r+0x78>
 801cfea:	1c42      	adds	r2, r0, #1
 801cfec:	d101      	bne.n	801cff2 <__sflush_r+0x76>
 801cfee:	682b      	ldr	r3, [r5, #0]
 801cff0:	b903      	cbnz	r3, 801cff4 <__sflush_r+0x78>
 801cff2:	6560      	str	r0, [r4, #84]	@ 0x54
 801cff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cff6:	602f      	str	r7, [r5, #0]
 801cff8:	b1b9      	cbz	r1, 801d02a <__sflush_r+0xae>
 801cffa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cffe:	4299      	cmp	r1, r3
 801d000:	d002      	beq.n	801d008 <__sflush_r+0x8c>
 801d002:	4628      	mov	r0, r5
 801d004:	f7ff fca0 	bl	801c948 <_free_r>
 801d008:	2300      	movs	r3, #0
 801d00a:	6363      	str	r3, [r4, #52]	@ 0x34
 801d00c:	e00d      	b.n	801d02a <__sflush_r+0xae>
 801d00e:	2301      	movs	r3, #1
 801d010:	4628      	mov	r0, r5
 801d012:	47b0      	blx	r6
 801d014:	4602      	mov	r2, r0
 801d016:	1c50      	adds	r0, r2, #1
 801d018:	d1c9      	bne.n	801cfae <__sflush_r+0x32>
 801d01a:	682b      	ldr	r3, [r5, #0]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d0c6      	beq.n	801cfae <__sflush_r+0x32>
 801d020:	2b1d      	cmp	r3, #29
 801d022:	d001      	beq.n	801d028 <__sflush_r+0xac>
 801d024:	2b16      	cmp	r3, #22
 801d026:	d11e      	bne.n	801d066 <__sflush_r+0xea>
 801d028:	602f      	str	r7, [r5, #0]
 801d02a:	2000      	movs	r0, #0
 801d02c:	e022      	b.n	801d074 <__sflush_r+0xf8>
 801d02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d032:	b21b      	sxth	r3, r3
 801d034:	e01b      	b.n	801d06e <__sflush_r+0xf2>
 801d036:	690f      	ldr	r7, [r1, #16]
 801d038:	2f00      	cmp	r7, #0
 801d03a:	d0f6      	beq.n	801d02a <__sflush_r+0xae>
 801d03c:	0793      	lsls	r3, r2, #30
 801d03e:	680e      	ldr	r6, [r1, #0]
 801d040:	bf08      	it	eq
 801d042:	694b      	ldreq	r3, [r1, #20]
 801d044:	600f      	str	r7, [r1, #0]
 801d046:	bf18      	it	ne
 801d048:	2300      	movne	r3, #0
 801d04a:	eba6 0807 	sub.w	r8, r6, r7
 801d04e:	608b      	str	r3, [r1, #8]
 801d050:	f1b8 0f00 	cmp.w	r8, #0
 801d054:	dde9      	ble.n	801d02a <__sflush_r+0xae>
 801d056:	6a21      	ldr	r1, [r4, #32]
 801d058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d05a:	4643      	mov	r3, r8
 801d05c:	463a      	mov	r2, r7
 801d05e:	4628      	mov	r0, r5
 801d060:	47b0      	blx	r6
 801d062:	2800      	cmp	r0, #0
 801d064:	dc08      	bgt.n	801d078 <__sflush_r+0xfc>
 801d066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d06e:	81a3      	strh	r3, [r4, #12]
 801d070:	f04f 30ff 	mov.w	r0, #4294967295
 801d074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d078:	4407      	add	r7, r0
 801d07a:	eba8 0800 	sub.w	r8, r8, r0
 801d07e:	e7e7      	b.n	801d050 <__sflush_r+0xd4>
 801d080:	dfbffffe 	.word	0xdfbffffe

0801d084 <_fflush_r>:
 801d084:	b538      	push	{r3, r4, r5, lr}
 801d086:	690b      	ldr	r3, [r1, #16]
 801d088:	4605      	mov	r5, r0
 801d08a:	460c      	mov	r4, r1
 801d08c:	b913      	cbnz	r3, 801d094 <_fflush_r+0x10>
 801d08e:	2500      	movs	r5, #0
 801d090:	4628      	mov	r0, r5
 801d092:	bd38      	pop	{r3, r4, r5, pc}
 801d094:	b118      	cbz	r0, 801d09e <_fflush_r+0x1a>
 801d096:	6a03      	ldr	r3, [r0, #32]
 801d098:	b90b      	cbnz	r3, 801d09e <_fflush_r+0x1a>
 801d09a:	f7ff f9a5 	bl	801c3e8 <__sinit>
 801d09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d0f3      	beq.n	801d08e <_fflush_r+0xa>
 801d0a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d0a8:	07d0      	lsls	r0, r2, #31
 801d0aa:	d404      	bmi.n	801d0b6 <_fflush_r+0x32>
 801d0ac:	0599      	lsls	r1, r3, #22
 801d0ae:	d402      	bmi.n	801d0b6 <_fflush_r+0x32>
 801d0b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d0b2:	f7ff fbdc 	bl	801c86e <__retarget_lock_acquire_recursive>
 801d0b6:	4628      	mov	r0, r5
 801d0b8:	4621      	mov	r1, r4
 801d0ba:	f7ff ff5f 	bl	801cf7c <__sflush_r>
 801d0be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d0c0:	07da      	lsls	r2, r3, #31
 801d0c2:	4605      	mov	r5, r0
 801d0c4:	d4e4      	bmi.n	801d090 <_fflush_r+0xc>
 801d0c6:	89a3      	ldrh	r3, [r4, #12]
 801d0c8:	059b      	lsls	r3, r3, #22
 801d0ca:	d4e1      	bmi.n	801d090 <_fflush_r+0xc>
 801d0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d0ce:	f7ff fbcf 	bl	801c870 <__retarget_lock_release_recursive>
 801d0d2:	e7dd      	b.n	801d090 <_fflush_r+0xc>

0801d0d4 <__swhatbuf_r>:
 801d0d4:	b570      	push	{r4, r5, r6, lr}
 801d0d6:	460c      	mov	r4, r1
 801d0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0dc:	2900      	cmp	r1, #0
 801d0de:	b096      	sub	sp, #88	@ 0x58
 801d0e0:	4615      	mov	r5, r2
 801d0e2:	461e      	mov	r6, r3
 801d0e4:	da0d      	bge.n	801d102 <__swhatbuf_r+0x2e>
 801d0e6:	89a3      	ldrh	r3, [r4, #12]
 801d0e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d0ec:	f04f 0100 	mov.w	r1, #0
 801d0f0:	bf14      	ite	ne
 801d0f2:	2340      	movne	r3, #64	@ 0x40
 801d0f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d0f8:	2000      	movs	r0, #0
 801d0fa:	6031      	str	r1, [r6, #0]
 801d0fc:	602b      	str	r3, [r5, #0]
 801d0fe:	b016      	add	sp, #88	@ 0x58
 801d100:	bd70      	pop	{r4, r5, r6, pc}
 801d102:	466a      	mov	r2, sp
 801d104:	f000 f848 	bl	801d198 <_fstat_r>
 801d108:	2800      	cmp	r0, #0
 801d10a:	dbec      	blt.n	801d0e6 <__swhatbuf_r+0x12>
 801d10c:	9901      	ldr	r1, [sp, #4]
 801d10e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d112:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d116:	4259      	negs	r1, r3
 801d118:	4159      	adcs	r1, r3
 801d11a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d11e:	e7eb      	b.n	801d0f8 <__swhatbuf_r+0x24>

0801d120 <__smakebuf_r>:
 801d120:	898b      	ldrh	r3, [r1, #12]
 801d122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d124:	079d      	lsls	r5, r3, #30
 801d126:	4606      	mov	r6, r0
 801d128:	460c      	mov	r4, r1
 801d12a:	d507      	bpl.n	801d13c <__smakebuf_r+0x1c>
 801d12c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d130:	6023      	str	r3, [r4, #0]
 801d132:	6123      	str	r3, [r4, #16]
 801d134:	2301      	movs	r3, #1
 801d136:	6163      	str	r3, [r4, #20]
 801d138:	b003      	add	sp, #12
 801d13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d13c:	ab01      	add	r3, sp, #4
 801d13e:	466a      	mov	r2, sp
 801d140:	f7ff ffc8 	bl	801d0d4 <__swhatbuf_r>
 801d144:	9f00      	ldr	r7, [sp, #0]
 801d146:	4605      	mov	r5, r0
 801d148:	4639      	mov	r1, r7
 801d14a:	4630      	mov	r0, r6
 801d14c:	f7ff f826 	bl	801c19c <_malloc_r>
 801d150:	b948      	cbnz	r0, 801d166 <__smakebuf_r+0x46>
 801d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d156:	059a      	lsls	r2, r3, #22
 801d158:	d4ee      	bmi.n	801d138 <__smakebuf_r+0x18>
 801d15a:	f023 0303 	bic.w	r3, r3, #3
 801d15e:	f043 0302 	orr.w	r3, r3, #2
 801d162:	81a3      	strh	r3, [r4, #12]
 801d164:	e7e2      	b.n	801d12c <__smakebuf_r+0xc>
 801d166:	89a3      	ldrh	r3, [r4, #12]
 801d168:	6020      	str	r0, [r4, #0]
 801d16a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d16e:	81a3      	strh	r3, [r4, #12]
 801d170:	9b01      	ldr	r3, [sp, #4]
 801d172:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d176:	b15b      	cbz	r3, 801d190 <__smakebuf_r+0x70>
 801d178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d17c:	4630      	mov	r0, r6
 801d17e:	f000 f81d 	bl	801d1bc <_isatty_r>
 801d182:	b128      	cbz	r0, 801d190 <__smakebuf_r+0x70>
 801d184:	89a3      	ldrh	r3, [r4, #12]
 801d186:	f023 0303 	bic.w	r3, r3, #3
 801d18a:	f043 0301 	orr.w	r3, r3, #1
 801d18e:	81a3      	strh	r3, [r4, #12]
 801d190:	89a3      	ldrh	r3, [r4, #12]
 801d192:	431d      	orrs	r5, r3
 801d194:	81a5      	strh	r5, [r4, #12]
 801d196:	e7cf      	b.n	801d138 <__smakebuf_r+0x18>

0801d198 <_fstat_r>:
 801d198:	b538      	push	{r3, r4, r5, lr}
 801d19a:	4d07      	ldr	r5, [pc, #28]	@ (801d1b8 <_fstat_r+0x20>)
 801d19c:	2300      	movs	r3, #0
 801d19e:	4604      	mov	r4, r0
 801d1a0:	4608      	mov	r0, r1
 801d1a2:	4611      	mov	r1, r2
 801d1a4:	602b      	str	r3, [r5, #0]
 801d1a6:	f7e3 feaf 	bl	8000f08 <_fstat>
 801d1aa:	1c43      	adds	r3, r0, #1
 801d1ac:	d102      	bne.n	801d1b4 <_fstat_r+0x1c>
 801d1ae:	682b      	ldr	r3, [r5, #0]
 801d1b0:	b103      	cbz	r3, 801d1b4 <_fstat_r+0x1c>
 801d1b2:	6023      	str	r3, [r4, #0]
 801d1b4:	bd38      	pop	{r3, r4, r5, pc}
 801d1b6:	bf00      	nop
 801d1b8:	240665c8 	.word	0x240665c8

0801d1bc <_isatty_r>:
 801d1bc:	b538      	push	{r3, r4, r5, lr}
 801d1be:	4d06      	ldr	r5, [pc, #24]	@ (801d1d8 <_isatty_r+0x1c>)
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	4604      	mov	r4, r0
 801d1c4:	4608      	mov	r0, r1
 801d1c6:	602b      	str	r3, [r5, #0]
 801d1c8:	f7e3 feae 	bl	8000f28 <_isatty>
 801d1cc:	1c43      	adds	r3, r0, #1
 801d1ce:	d102      	bne.n	801d1d6 <_isatty_r+0x1a>
 801d1d0:	682b      	ldr	r3, [r5, #0]
 801d1d2:	b103      	cbz	r3, 801d1d6 <_isatty_r+0x1a>
 801d1d4:	6023      	str	r3, [r4, #0]
 801d1d6:	bd38      	pop	{r3, r4, r5, pc}
 801d1d8:	240665c8 	.word	0x240665c8

0801d1dc <_init>:
 801d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1de:	bf00      	nop
 801d1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1e2:	bc08      	pop	{r3}
 801d1e4:	469e      	mov	lr, r3
 801d1e6:	4770      	bx	lr

0801d1e8 <_fini>:
 801d1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1ea:	bf00      	nop
 801d1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1ee:	bc08      	pop	{r3}
 801d1f0:	469e      	mov	lr, r3
 801d1f2:	4770      	bx	lr
